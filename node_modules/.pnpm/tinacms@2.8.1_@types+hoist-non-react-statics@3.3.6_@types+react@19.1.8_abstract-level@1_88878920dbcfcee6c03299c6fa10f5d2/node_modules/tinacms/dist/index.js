var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
(function(global2, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("zod"), require("react"), require("react-dom"), require("@udecode/cn"), require("@udecode/plate-heading"), require("is-hotkey"), require("clsx"), require("@radix-ui/react-slot"), require("@udecode/plate-code-block"), require("lucide-react"), require("mermaid"), require("class-variance-authority"), require("cmdk"), require("@radix-ui/react-dialog"), require("@radix-ui/react-popover"), require("@udecode/plate"), require("@ariakit/react"), require("@udecode/plate-combobox"), require("@udecode/plate-reset-node"), require("@udecode/plate-list"), require("@udecode/plate-resizable"), require("@udecode/plate-dnd"), require("@udecode/plate-table"), require("@radix-ui/react-dropdown-menu"), require("@radix-ui/react-toolbar"), require("@radix-ui/react-separator"), require("@radix-ui/react-tooltip"), require("final-form"), require("final-form-arrays"), require("final-form-set-field-data"), require("react-final-form"), require("prop-types"), require("react-color"), require("color-string"), require("tailwind-merge"), require("react-dropzone"), require("@udecode/cmdk"), require("react-beautiful-dnd"), require("@headlessui/react"), require("@udecode/plate-trailing-block"), require("@udecode/plate-floating"), require("@udecode/plate-block-quote"), require("@udecode/plate-node-id"), require("@udecode/plate-link"), require("@udecode/plate-autoformat"), require("lodash.get"), require("moment"), require("date-fns"), require("graphql"), require("@tinacms/schema-tools"), require("graphql-tag"), require("@graphql-inspector/core"), require("yup"), require("react-router-dom"), require("@tinacms/mdx")) : typeof define === "function" && define.amd ? define(["exports", "zod", "react", "react-dom", "@udecode/cn", "@udecode/plate-heading", "is-hotkey", "clsx", "@radix-ui/react-slot", "@udecode/plate-code-block", "lucide-react", "mermaid", "class-variance-authority", "cmdk", "@radix-ui/react-dialog", "@radix-ui/react-popover", "@udecode/plate", "@ariakit/react", "@udecode/plate-combobox", "@udecode/plate-reset-node", "@udecode/plate-list", "@udecode/plate-resizable", "@udecode/plate-dnd", "@udecode/plate-table", "@radix-ui/react-dropdown-menu", "@radix-ui/react-toolbar", "@radix-ui/react-separator", "@radix-ui/react-tooltip", "final-form", "final-form-arrays", "final-form-set-field-data", "react-final-form", "prop-types", "react-color", "color-string", "tailwind-merge", "react-dropzone", "@udecode/cmdk", "react-beautiful-dnd", "@headlessui/react", "@udecode/plate-trailing-block", "@udecode/plate-floating", "@udecode/plate-block-quote", "@udecode/plate-node-id", "@udecode/plate-link", "@udecode/plate-autoformat", "lodash.get", "moment", "date-fns", "graphql", "@tinacms/schema-tools", "graphql-tag", "@graphql-inspector/core", "yup", "react-router-dom", "@tinacms/mdx"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.tinacms = {}, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP, global2.NOOP));
})(this, function(exports2, zod, React, ReactDOM, cn$2, plateHeading, isHotkey, clsx, reactSlot, plateCodeBlock, lucideReact, mermaid, classVarianceAuthority, cmdk, DialogPrimitive, PopoverPrimitive, plate, react, plateCombobox, plateResetNode, plateList, plateResizable, plateDnd, plateTable, DropdownMenuPrimitive, ToolbarPrimitive, SeparatorPrimitive, TooltipPrimitive, finalForm, arrayMutators, setFieldData, reactFinalForm, PropTypes, pkg$1, pkg, tailwindMerge, dropzone, cmdk$1, reactBeautifulDnd, react$1, plateTrailingBlock, plateFloating, plateBlockQuote, plateNodeId, plateLink, plateAutoformat, get$5, moment, dateFns, graphql$1, schemaTools, gql, core$1, yup, reactRouterDom, mdx) {
  var _a;
  "use strict";
  function _interopNamespaceDefault(e3) {
    const n2 = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
    if (e3) {
      for (const k in e3) {
        if (k !== "default") {
          const d2 = Object.getOwnPropertyDescriptor(e3, k);
          Object.defineProperty(n2, k, d2.get ? d2 : {
            enumerable: true,
            get: () => e3[k]
          });
        }
      }
    }
    n2.default = e3;
    return Object.freeze(n2);
  }
  const React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
  const DialogPrimitive__namespace = /* @__PURE__ */ _interopNamespaceDefault(DialogPrimitive);
  const PopoverPrimitive__namespace = /* @__PURE__ */ _interopNamespaceDefault(PopoverPrimitive);
  const DropdownMenuPrimitive__namespace = /* @__PURE__ */ _interopNamespaceDefault(DropdownMenuPrimitive);
  const ToolbarPrimitive__namespace = /* @__PURE__ */ _interopNamespaceDefault(ToolbarPrimitive);
  const SeparatorPrimitive__namespace = /* @__PURE__ */ _interopNamespaceDefault(SeparatorPrimitive);
  const TooltipPrimitive__namespace = /* @__PURE__ */ _interopNamespaceDefault(TooltipPrimitive);
  const pkg__namespace$1 = /* @__PURE__ */ _interopNamespaceDefault(pkg$1);
  const pkg__namespace = /* @__PURE__ */ _interopNamespaceDefault(pkg);
  const dropzone__namespace = /* @__PURE__ */ _interopNamespaceDefault(dropzone);
  const yup__namespace = /* @__PURE__ */ _interopNamespaceDefault(yup);
  const ModalProvider = ({ children }) => {
    const [modalRootContainerRef, setModalRootContainerRef] = React.useState(
      null
    );
    const setModalRef = React.useCallback((node2) => {
      if (node2 !== null) {
        setModalRootContainerRef(node2);
      }
    }, []);
    return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("div", { id: "modal-root", ref: setModalRef }), /* @__PURE__ */ React__namespace.createElement(
      ModalContainerContext.Provider,
      {
        value: { portalNode: modalRootContainerRef }
      },
      children
    ));
  };
  const ModalContainerContext = React__namespace.createContext(null);
  function useModalContainer() {
    const modalContainer = React__namespace.useContext(ModalContainerContext);
    if (!modalContainer) {
      throw new Error("No Modal Container context provided");
    }
    return modalContainer;
  }
  const ModalOverlay = ({ children }) => {
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "fixed inset-0 z-modal w-screen h-dvh overflow-y-auto" }, children, /* @__PURE__ */ React__namespace.createElement("div", { className: "fixed -z-1 inset-0 opacity-80 bg-gradient-to-br from-gray-800 via-gray-900 to-black" }));
  };
  const Modal = (props) => {
    const { portalNode } = useModalContainer();
    if (!portalNode)
      return null;
    return ReactDOM.createPortal(
      /* @__PURE__ */ React__namespace.createElement(ModalOverlay, null, /* @__PURE__ */ React__namespace.createElement("div", { ...props })),
      portalNode
    );
  };
  const ModalActions = ({ children }) => {
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "w-full flex justify-between gap-4 items-center px-5 pb-5 rounded-b-md" }, children);
  };
  const ModalBody = ({ className = "", padded = false, ...props }) => /* @__PURE__ */ React.createElement(
    "div",
    {
      className: `${padded ? "p-5" : "p-0"} m-0 overflow-hidden flex flex-col min-h-[160px] [&:last-child]:rounded-[0_0_5px_5px] ${className}`,
      ...props
    }
  );
  const AddIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M14.9524 4.89689L14.9524 26.8016H16.7461L16.7461 4.89689H14.9524Z" }),
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M4.8969 16.7461H26.8016L26.8016 14.9523H4.89689L4.8969 16.7461Z" })
  );
  const AlignCenter = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement("svg", { viewBox: "0 0 32 32", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React__namespace.createElement(
    "path",
    {
      d: "M9.125 24H22.875V26H9.125V24ZM5 18H27V20H5V18ZM5 6H27V8H5V6ZM9.125 12H22.875V14H9.125V12Z",
      fill: "inherit"
    }
  ));
  const AlignLeft = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement("svg", { viewBox: "0 0 32 32", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React__namespace.createElement(
    "path",
    {
      d: "M5 24H20.125V26H5V24ZM5 18H27V20H5V18ZM5 6H27V8H5V6ZM5 12H20.125V14H5V12Z",
      fill: "inherit"
    }
  ));
  const AlignRight = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement("svg", { viewBox: "0 0 32 32", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React__namespace.createElement(
    "path",
    {
      d: "M11.875 24H27V26H11.875V24ZM5 18H27V20H5V18ZM5 6H27V8H5V6ZM11.875 12H27V14H11.875V12Z",
      fill: "inherit"
    }
  ));
  const CloseIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M5 6.2684L24.7316 26L26 24.7316L6.2684 5L5 6.2684Z" }),
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M6.2684 26L26 6.2684L24.7316 5L5 24.7316L6.2684 26Z" })
  );
  const EllipsisVerticalIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 4 14",
      fill: "#828282",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M2 5.5C1.5625 5.5 1.21875 5.65625 0.9375 5.9375C0.625 6.25 0.5 6.59375 0.5 7C0.5 7.4375 0.625 7.78125 0.9375 8.0625C1.21875 8.375 1.5625 8.5 2 8.5C2.40625 8.5 2.75 8.375 3.0625 8.0625C3.34375 7.78125 3.5 7.4375 3.5 7C3.5 6.59375 3.34375 6.25 3.0625 5.9375C2.75 5.65625 2.40625 5.5 2 5.5ZM0.5 2.25C0.5 1.84375 0.625 1.5 0.9375 1.1875C1.21875 0.90625 1.5625 0.75 2 0.75C2.40625 0.75 2.75 0.90625 3.0625 1.1875C3.34375 1.5 3.5 1.84375 3.5 2.25C3.5 2.6875 3.34375 3.03125 3.0625 3.3125C2.75 3.625 2.40625 3.75 2 3.75C1.5625 3.75 1.21875 3.625 0.9375 3.3125C0.625 3.03125 0.5 2.6875 0.5 2.25ZM0.5 11.75C0.5 11.3438 0.625 11 0.9375 10.6875C1.21875 10.4062 1.5625 10.25 2 10.25C2.40625 10.25 2.75 10.4062 3.0625 10.6875C3.34375 11 3.5 11.3438 3.5 11.75C3.5 12.1875 3.34375 12.5312 3.0625 12.8125C2.75 13.125 2.40625 13.25 2 13.25C1.5625 13.25 1.21875 13.125 0.9375 12.8125C0.625 12.5312 0.5 12.1875 0.5 11.75Z" })
  );
  const HamburgerIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M4 10H28V8H4V10Z" }),
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M4 17H28V15H4V17Z" }),
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M4 24H28V22H4V24Z" })
  );
  const EditIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M24.3324 8.96875C24.754 9.42578 25 9.95312 25 10.5859C25 11.2188 24.754 11.7461 24.3324 12.168L11.9634 24.543L7.85212 25C7.57101 25 7.36018 24.9297 7.21962 24.7188C7.04392 24.543 6.97365 24.332 7.00878 24.0508L7.46559 20.043L19.8346 7.66797C20.2562 7.24609 20.7833 7 21.4158 7C22.0483 7 22.5754 7.24609 23.0322 7.66797L24.3324 8.96875ZM11.1903 22.9258L20.3968 13.7148L18.2884 11.6055L9.08199 20.8164L8.80088 23.207L11.1903 22.9258ZM23.1376 10.9727C23.243 10.8672 23.3133 10.7266 23.3133 10.5859C23.3133 10.4453 23.243 10.3047 23.1376 10.1641L21.8375 8.86328C21.6969 8.75781 21.5564 8.6875 21.4158 8.6875C21.2753 8.6875 21.1347 8.75781 21.0293 8.86328L19.4832 10.4102L21.5915 12.5195L23.1376 10.9727Z" })
  );
  const ChevronDownIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M6.708 10.5L5.5 11.7654L14.2939 20.9773C14.9597 21.6747 16.0412 21.6737 16.7061 20.9773L25.5 11.7654L24.292 10.5L15.5 19.7098L6.708 10.5Z" })
  );
  const ChevronUpIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M25.292 21.5L26.5 20.2346L17.7061 11.0227C17.0403 10.3253 15.9588 10.3263 15.2939 11.0227L6.5 20.2346L7.708 21.5L16.5 12.2901L25.292 21.5Z" })
  );
  const ChevronLeftIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M21 7.208L19.7346 6L10.5227 14.7939C9.82527 15.4597 9.82626 16.5412 10.5227 17.2061L19.7346 26L21 24.792L11.7901 16L21 7.208Z" })
  );
  const ChevronRightIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M11 24.792L12.2654 26L21.4773 17.2061C22.1747 16.5403 22.1737 15.4588 21.4773 14.7939L12.2654 6L11 7.208L20.2099 16L11 24.792Z" })
  );
  const DuplicateIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        d: "M24.95,25.85H13.01c-0.5,0-0.9-0.4-0.9-0.9V13.01c0-0.5,0.4-0.9,0.9-0.9h11.94c0.5,0,0.9,0.4,0.9,0.9v11.94\n      C25.85,25.45,25.45,25.85,24.95,25.85z M13.91,24.05h10.14V13.91H13.91V24.05z"
      }
    ),
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        d: "M9.93,19.89H7.05c-0.5,0-0.9-0.4-0.9-0.9V7.05c0-0.5,0.4-0.9,0.9-0.9h11.94c0.5,0,0.9,0.4,0.9,0.9v2.89h-1.8V7.95H7.95\n      v10.14h1.99V19.89z"
      }
    )
  );
  const DragIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M15 22C15 23.1 14.1 24 13 24C11.9 24 11 23.1 11 22C11 20.9 11.9 20 13 20C14.1 20 15 20.9 15 22ZM13 14C11.9 14 11 14.9 11 16C11 17.1 11.9 18 13 18C14.1 18 15 17.1 15 16C15 14.9 14.1 14 13 14ZM13 8C11.9 8 11 8.9 11 10C11 11.1 11.9 12 13 12C14.1 12 15 11.1 15 10C15 8.9 14.1 8 13 8ZM19 12C20.1 12 21 11.1 21 10C21 8.9 20.1 8 19 8C17.9 8 17 8.9 17 10C17 11.1 17.9 12 19 12ZM19 14C17.9 14 17 14.9 17 16C17 17.1 17.9 18 19 18C20.1 18 21 17.1 21 16C21 14.9 20.1 14 19 14ZM19 20C17.9 20 17 20.9 17 22C17 23.1 17.9 24 19 24C20.1 24 21 23.1 21 22C21 20.9 20.1 20 19 20Z" })
  );
  const LeftArrowIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M21 7.208L19.7346 6L10.5227 14.7939C9.82527 15.4597 9.82626 16.5412 10.5227 17.2061L19.7346 26L21 24.792L11.7901 16L21 7.208Z" })
  );
  const RightArrowIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M11 24.792L12.2654 26L21.4773 17.2061C22.1747 16.5403 22.1737 15.4588 21.4773 14.7939L12.2654 6L11 7.20799L20.2099 16L11 24.792Z" })
  );
  const BoldIcon$1 = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M20.8 14.3867C22.0933 13.4933 23 12.0267 23 10.6667C23 7.65334 20.6667 5.33334 17.6667 5.33334H9.33333V24H18.72C21.5067 24 23.6667 21.7333 23.6667 18.9467C23.6667 16.92 22.52 15.1867 20.8 14.3867V14.3867ZM13.3333 8.66667H17.3333C18.44 8.66667 19.3333 9.56 19.3333 10.6667C19.3333 11.7733 18.44 12.6667 17.3333 12.6667H13.3333V8.66667ZM18 20.6667H13.3333V16.6667H18C19.1067 16.6667 20 17.56 20 18.6667C20 19.7733 19.1067 20.6667 18 20.6667Z" })
  );
  const CodeIcon$1 = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M12.5333 22.1333L6.40001 16L12.5333 9.86667L10.6667 8L2.66667 16L10.6667 24L12.5333 22.1333ZM19.4667 22.1333L25.6 16L19.4667 9.86667L21.3333 8L29.3333 16L21.3333 24L19.4667 22.1333V22.1333Z" })
  );
  const ExitIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M15.5 23.0129L8.88889 23.0129L8.88889 9.10324L15.5 9.10324L15.5 7.11615L8.88889 7.11615C7.85 7.11615 7 8.01034 7 9.10324L7 23.0129C7 24.1058 7.85 25 8.88889 25L15.5 25L15.5 23.0129Z" }),
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M18.6961 12.4912L21.1328 15.0645L12 15.0645L12 17.0516L21.1328 17.0516L18.6961 19.6249L20.0278 21.0258L24.75 16.0581L20.0278 11.0903L18.6961 12.4912Z" })
  );
  const HeadingIcon$1 = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M12 5.33334V9.33334H18.6667V25.3333H22.6667V9.33334H29.3333V5.33334H12ZM4 16H8V25.3333H12V16H16V12H4V16Z" })
  );
  const ItalicIcon$1 = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M13.3333 5.33334V9.33334H16.28L11.72 20H8V24H18.6667V20H15.72L20.28 9.33334H24V5.33334H13.3333Z" })
  );
  const MediaIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M26 20V8C26 6.9 25.1 6 24 6H12C10.9 6 10 6.9 10 8V20C10 21.1 10.9 22 12 22H24C25.1 22 26 21.1 26 20ZM15 16L17.03 18.71L20 15L24 20H12L15 16ZM6 10V24C6 25.1 6.9 26 8 26H22V24H8V10H6Z" })
  );
  const OrderedListIcon$1 = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M2.66667 22.6667H5.33333V23.3333H4V24.6667H5.33333V25.3333H2.66667V26.6667H6.66667V21.3333H2.66667V22.6667ZM4 10.6667H5.33333V5.33334H2.66667V6.66667H4V10.6667ZM2.66667 14.6667H5.06667L2.66667 17.4667V18.6667H6.66667V17.3333H4.26667L6.66667 14.5333V13.3333H2.66667V14.6667ZM9.33333 6.66667V9.33334H28V6.66667H9.33333ZM9.33333 25.3333H28V22.6667H9.33333V25.3333ZM9.33333 17.3333H28V14.6667H9.33333V17.3333Z" })
  );
  const SettingsIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M24.7021 13.8628L24.0959 12.4533C24.0959 12.4533 25.5063 9.34049 25.3804 9.22033L23.5152 7.43748C23.3853 7.3142 20.2046 8.73502 20.2046 8.73502L18.7364 8.1553C18.7364 8.1553 17.4403 5 17.2622 5H14.629C14.4469 5 13.2457 8.16271 13.2457 8.16271L11.7807 8.74321C11.7807 8.74321 8.53338 7.393 8.40784 7.51277L6.54507 9.29875C6.41594 9.42125 7.89851 12.4724 7.89851 12.4724L7.29273 13.8788C7.29273 13.8788 4 15.1209 4 15.2883V17.8143C4 17.9903 7.3003 19.1415 7.3003 19.1415L7.90608 20.5467C7.90608 20.5467 6.49724 23.6572 6.62079 23.7765L8.48595 25.5641C8.61189 25.6854 11.795 24.265 11.795 24.265L13.264 24.847C13.264 24.847 14.5601 28 14.739 28H17.373C17.5551 28 18.7555 24.8373 18.7555 24.8373L20.2257 24.2552C20.2257 24.2552 23.467 25.607 23.5922 25.4888L25.4581 23.7028C25.5872 23.5788 24.1015 20.5292 24.1015 20.5292L24.7057 19.1228C24.7057 19.1228 28 17.8791 28 17.7094V15.1841C28.0008 15.0105 24.7021 13.8628 24.7021 13.8628ZM19.8479 16.4984C19.8479 18.5306 18.1222 20.1855 16.0012 20.1855C13.8818 20.1855 12.1537 18.5306 12.1537 16.4984C12.1537 14.4679 13.8818 12.8161 16.0012 12.8161C18.123 12.8169 19.8479 14.4679 19.8479 16.4984Z" })
  );
  const TableIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 24 24",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M4 21h15.893c1.103 0 2-.897 2-2V5c0-1.103-.897-2-2-2H4c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2zm0-2v-5h4v5H4zM14 7v5h-4V7h4zM8 7v5H4V7h4zm2 12v-5h4v5h-4zm6 0v-5h3.894v5H16zm3.893-7H16V7h3.893v5z" })
  );
  const TinaIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M18.6466 14.5553C19.9018 13.5141 20.458 7.36086 21.0014 5.14903C21.5447 2.9372 23.7919 3.04938 23.7919 3.04938C23.7919 3.04938 23.2085 4.06764 23.4464 4.82751C23.6844 5.58738 25.3145 6.26662 25.3145 6.26662L24.9629 7.19622C24.9629 7.19622 24.2288 7.10204 23.7919 7.9785C23.355 8.85496 24.3392 17.4442 24.3392 17.4442C24.3392 17.4442 21.4469 22.7275 21.4469 24.9206C21.4469 27.1136 22.4819 28.9515 22.4819 28.9515H21.0296C21.0296 28.9515 18.899 26.4086 18.462 25.1378C18.0251 23.8669 18.1998 22.596 18.1998 22.596C18.1998 22.596 15.8839 22.4646 13.8303 22.596C11.7767 22.7275 10.4072 24.498 10.16 25.4884C9.91287 26.4787 9.81048 28.9515 9.81048 28.9515H8.66211C7.96315 26.7882 7.40803 26.0129 7.70918 24.9206C8.54334 21.8949 8.37949 20.1788 8.18635 19.4145C7.99321 18.6501 6.68552 17.983 6.68552 17.983C7.32609 16.6741 7.97996 16.0452 10.7926 15.9796C13.6052 15.914 17.3915 15.5965 18.6466 14.5553Z" }),
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M11.1268 24.7939C11.1268 24.7939 11.4236 27.5481 13.0001 28.9516H14.3511C13.0001 27.4166 12.8527 23.4155 12.8527 23.4155C12.1656 23.6399 11.3045 24.3846 11.1268 24.7939Z" })
  );
  const TrashIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M16.9 4.2V6.9H25V8.7H7V6.9H15.1V4.2H16.9ZM7.77201 10.5H24.2279L22.4102 24.1332C22.2853 25.0698 21.4406 25.8 20.4977 25.8H11.5022C10.5561 25.8 9.71404 25.0653 9.58977 24.1332L7.77201 10.5ZM22.172 12.3H9.82791L11.3739 23.8953C11.3788 23.9318 11.4569 24 11.5022 24H20.4977C20.5432 24 20.6209 23.9328 20.6259 23.8953L22.172 12.3Z"
      }
    )
  );
  const UnorderedListIcon$1 = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M5.33333 14C4.22667 14 3.33333 14.8933 3.33333 16C3.33333 17.1067 4.22667 18 5.33333 18C6.44 18 7.33333 17.1067 7.33333 16C7.33333 14.8933 6.44 14 5.33333 14ZM5.33333 6C4.22667 6 3.33333 6.89333 3.33333 8C3.33333 9.10667 4.22667 10 5.33333 10C6.44 10 7.33333 9.10667 7.33333 8C7.33333 6.89333 6.44 6 5.33333 6ZM5.33333 22C4.22667 22 3.33333 22.9067 3.33333 24C3.33333 25.0933 4.24 26 5.33333 26C6.42667 26 7.33333 25.0933 7.33333 24C7.33333 22.9067 6.44 22 5.33333 22ZM9.33333 25.3333H28V22.6667H9.33333V25.3333ZM9.33333 17.3333H28V14.6667H9.33333V17.3333ZM9.33333 6.66667V9.33333H28V6.66667H9.33333Z" })
  );
  const UndoIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M16.6667 10.6667C13.1333 10.6667 9.93333 11.9867 7.46667 14.1333L2.66667 9.33334V21.3333H14.6667L9.84 16.5067C11.6933 14.96 14.0533 14 16.6667 14C21.3867 14 25.4 17.08 26.8 21.3333L29.96 20.2933C28.1067 14.7067 22.8667 10.6667 16.6667 10.6667Z" })
  );
  const RedoIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M24.5333 14.1333C22.0667 11.9867 18.8667 10.6667 15.3333 10.6667C9.13333 10.6667 3.89333 14.7067 2.05333 20.2933L5.2 21.3333C6.6 17.08 10.6 14 15.3333 14C17.9333 14 20.3067 14.96 22.16 16.5067L17.3333 21.3333H29.3333V9.33334L24.5333 14.1333Z" })
  );
  const ReorderIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M15.3012 6.23952L11.0607 10.4801L10 9.41943L14.2406 5.17886C14.9213 4.49816 16.0233 4.48258 16.7196 5.17886L20.9602 9.41943L19.8995 10.4801L15.6589 6.23952C15.5561 6.13671 15.4039 6.13689 15.3012 6.23952Z"
      }
    ),
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M15.6988 25.8732L19.9393 21.6326L21 22.6933L16.7594 26.9339C16.0787 27.6146 14.9767 27.6301 14.2804 26.9339L10.0398 22.6933L11.1005 21.6326L15.3411 25.8732C15.4439 25.976 15.5961 25.9758 15.6988 25.8732Z"
      }
    ),
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M14.6569 27.1127V17.799L16.1569 17.799V27.1127L14.6569 27.1127Z"
      }
    ),
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M14.6569 14.3137V5L16.1569 5V14.3137L14.6569 14.3137Z"
      }
    )
  );
  const ReorderRowIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M25.7605 15.3012L21.5199 11.0607L22.5806 10L26.8211 14.2406C27.5018 14.9213 27.5174 16.0233 26.8211 16.7196L22.5806 20.9602L21.5199 19.8995L25.7605 15.6589C25.8633 15.5561 25.8631 15.4039 25.7605 15.3012Z"
      }
    ),
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M6.12679 15.6988L10.3674 19.9393L9.3067 21L5.06613 16.7594C4.38543 16.0787 4.36985 14.9767 5.06613 14.2804L9.3067 10.0398L10.3674 11.1005L6.12679 15.3411C6.02398 15.4439 6.02416 15.5961 6.12679 15.6988Z"
      }
    ),
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M4.88727 14.6569L14.201 14.6569L14.201 16.1569L4.88727 16.1569L4.88727 14.6569Z"
      }
    ),
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M17.6863 14.6569L27 14.6569L27 16.1569L17.6863 16.1569L17.6863 14.6569Z"
      }
    )
  );
  const UploadIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M17.3 25.1V19.9H21.2L16 13.4L10.8 19.9H14.7V25.1H17.3Z" }),
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M9.5 25.1H12.1V22.5H9.5C7.3498 22.5 5.6 20.7502 5.6 18.6C5.6 16.7748 7.1587 15.0172 9.0749 14.6805L9.8302 14.5479L10.0798 13.8225C10.9937 11.1562 13.2635 9.49996 16 9.49996C19.5841 9.49996 22.5 12.4159 22.5 16V17.3H23.8C25.2339 17.3 26.4 18.4661 26.4 19.9C26.4 21.3339 25.2339 22.5 23.8 22.5H19.9V25.1H23.8C26.6678 25.1 29 22.7678 29 19.9C28.998 18.7347 28.6056 17.6036 27.8855 16.6874C27.1654 15.7713 26.1591 15.1228 25.0272 14.8456C24.4591 10.371 20.628 6.89996 16 6.89996C12.4172 6.89996 9.305 8.99426 7.8841 12.295C5.0917 13.1296 3 15.766 3 18.6C3 22.1841 5.9159 25.1 9.5 25.1Z" })
  );
  const ResetIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        d: "M12.625 13.3846H19.375C21.2358 13.3846 22.75 14.8342 22.75 16.6154C22.75 18.3966 21.2358 19.8462 19.375 19.8462H16V22H19.375C22.4766 22 25 19.5845 25 16.6154C25 13.6463 22.4766 11.2308 19.375 11.2308H12.625V8L7 12.3077L12.625 16.6154V13.3846Z",
        fill: "inherit"
      }
    )
  );
  const LinkIcon$1 = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M5.2 16C5.2 13.72 7.05333 11.8667 9.33333 11.8667H14.6667V9.33334H9.33333C5.65333 9.33334 2.66666 12.32 2.66666 16C2.66666 19.68 5.65333 22.6667 9.33333 22.6667H14.6667V20.1333H9.33333C7.05333 20.1333 5.2 18.28 5.2 16ZM10.6667 17.3333H21.3333V14.6667H10.6667V17.3333ZM22.6667 9.33334H17.3333V11.8667H22.6667C24.9467 11.8667 26.8 13.72 26.8 16C26.8 18.28 24.9467 20.1333 22.6667 20.1333H17.3333V22.6667H22.6667C26.3467 22.6667 29.3333 19.68 29.3333 16C29.3333 12.32 26.3467 9.33334 22.6667 9.33334Z" })
  );
  const LockIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        d: "M25 16.5C25 15.3419 23.9909 14.4 22.75 14.4H21.625V10.25C21.625 7.35515 19.1016 5 16 5C12.8984 5 10.375 7.35515 10.375 10.25V14.4H9.25C8.00912 14.4 7 15.3419 7 16.5V23.9C7 25.0581 8.00912 26 9.25 26H22.75C23.9909 26 25 25.0581 25 23.9V16.5ZM12.625 10.25C12.625 8.5133 14.1392 7.1 16 7.1C17.8608 7.1 19.375 8.5133 19.375 10.25V14.4H12.625V10.25Z",
        fill: "inherit"
      }
    )
  );
  const QuoteIcon$1 = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M8.00001 22.6667H12L14.6667 17.3333V9.33334H6.66667V17.3333H10.6667L8.00001 22.6667ZM18.6667 22.6667H22.6667L25.3333 17.3333V9.33334H17.3333V17.3333H21.3333L18.6667 22.6667Z" })
  );
  const UnderlineIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M16 22.6667C20.4133 22.6667 24 19.08 24 14.6667V4H20.6667V14.6667C20.6667 17.24 18.5733 19.3333 16 19.3333C13.4267 19.3333 11.3333 17.24 11.3333 14.6667V4H8.00001V14.6667C8.00001 19.08 11.5867 22.6667 16 22.6667ZM6.66667 25.3333V28H25.3333V25.3333H6.66667Z" })
  );
  const StrikethroughIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M16.578 26a14.1 14.1 0 01-4.535-.75A12.299 12.299 0 018 22.889l2.628-3.028a13.437 13.437 0 002.83 1.722c.982.426 2.051.64 3.206.64.924 0 1.637-.158 2.137-.473.52-.333.78-.787.78-1.361v-.056c0-.117-.01-.228-.03-.333H24c-.003.952-.186 1.804-.549 2.556a5.478 5.478 0 01-1.53 1.888c-.655.5-1.435.89-2.34 1.167-.905.26-1.906.389-3.003.389zm-3.993-9H29v-3H17.265a71.646 71.646 0 01-1.843-.5c-.558-.167-1-.343-1.328-.528-.327-.185-.558-.389-.693-.61a1.905 1.905 0 01-.174-.834v-.056c0-.481.212-.88.636-1.194.443-.334 1.097-.5 1.964-.5.866 0 1.733.176 2.599.528a14.16 14.16 0 012.657 1.388l2.31-3.222a11.94 11.94 0 00-3.436-1.833C18.724 6.213 17.367 6 15.884 6c-1.04 0-1.992.139-2.859.417-.866.277-1.617.676-2.252 1.194a5.537 5.537 0 00-1.444 1.861c-.347.704-.52 1.5-.52 2.39v.055c0 .804.107 1.498.322 2.083H4v3h8.585z"
      }
    )
  );
  const MarkdownIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M28.0035 7H4.01374C2.91056 7 2 7.988 2 9.185V23.796C2 25.012 2.91056 26 4.01374 26H27.986C29.1067 26 29.9998 25.012 29.9998 23.815V9.185C30.0173 7.988 29.1067 7 28.0035 7ZM17.7597 22.2H14.2576V16.5L11.6309 20.148L9.00432 16.5V22.2H5.50216V10.8H9.00432L11.6309 14.6L14.2576 10.8H17.7597V22.2ZM22.9954 23.15L18.6352 16.5H21.2619V10.8H24.764V16.5H27.3906L22.9954 23.15Z"
      }
    )
  );
  const AlertIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        d: "M16 29.3333C17.4666 29.3333 18.6666 28.1333 18.6666 26.6666H13.3333C13.3333 27.3739 13.6143 28.0522 14.1144 28.5523C14.6145 29.0524 15.2927 29.3333 16 29.3333ZM24 21.3333V14.6666C24 10.5733 21.8133 7.14665 18 6.23998V5.33331C18 4.22665 17.1066 3.33331 16 3.33331C14.8933 3.33331 14 4.22665 14 5.33331V6.23998C10.1733 7.14665 7.99998 10.56 7.99998 14.6666V21.3333L5.33331 24V25.3333H26.6666V24L24 21.3333Z",
        fill: "inherit"
      }
    )
  );
  const InfoIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        d: "M16 2.66669C8.64802 2.66669 2.66669 8.64802 2.66669 16C2.66669 23.352 8.64802 29.3334 16 29.3334C23.352 29.3334 29.3334 23.352 29.3334 16C29.3334 8.64802 23.352 2.66669 16 2.66669ZM17.3334 22.6667H14.6667V14.6667H17.3334V22.6667ZM17.3334 12H14.6667V9.33335H17.3334V12Z",
        fill: "inherit"
      }
    )
  );
  const WarningIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        d: "M31.2176 28.768L16.9664 2.1568C16.8686 1.98698 16.7278 1.84593 16.5581 1.74786C16.3884 1.64978 16.1959 1.59814 16 1.59814C15.804 1.59814 15.6115 1.64978 15.4419 1.74786C15.2722 1.84593 15.1314 1.98698 15.0336 2.1568L0.783977 28.768C0.688907 28.9338 0.639554 29.1219 0.640959 29.3131C0.642365 29.5042 0.694478 29.6916 0.791977 29.856C0.991977 30.1936 1.35518 30.4 1.74878 30.4H30.2512C30.4442 30.4003 30.6339 30.3503 30.8017 30.2549C30.9695 30.1595 31.1095 30.022 31.208 29.856C31.3054 29.6916 31.3576 29.5044 31.3593 29.3133C31.361 29.1222 31.3121 28.9341 31.2176 28.768V28.768ZM17.6 27.2H14.4V24H17.6V27.2ZM17.6 21.6H14.4V11.2H17.6V21.6Z",
        fill: "inherit"
      }
    )
  );
  const ErrorIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "inherit",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement(
      "path",
      {
        d: "M22.276 3.05736C22.1524 2.9333 22.0055 2.83491 21.8437 2.76787C21.6819 2.70082 21.5085 2.66643 21.3334 2.66669H10.6667C10.4916 2.66643 10.3181 2.70082 10.1563 2.76787C9.99455 2.83491 9.84763 2.9333 9.72402 3.05736L3.05736 9.72402C2.9333 9.84763 2.83491 9.99455 2.76787 10.1563C2.70082 10.3181 2.66643 10.4916 2.66669 10.6667V21.3334C2.66669 21.688 2.80669 22.0267 3.05736 22.276L9.72402 28.9427C9.84763 29.0667 9.99455 29.1651 10.1563 29.2322C10.3181 29.2992 10.4916 29.3336 10.6667 29.3334H21.3334C21.688 29.3334 22.0267 29.1934 22.276 28.9427L28.9427 22.276C29.0667 22.1524 29.1651 22.0055 29.2322 21.8437C29.2992 21.6819 29.3336 21.5085 29.3334 21.3334V10.6667C29.3336 10.4916 29.2992 10.3181 29.2322 10.1563C29.1651 9.99455 29.0667 9.84763 28.9427 9.72402L22.276 3.05736ZM17.3334 22.6667H14.6667V20H17.3334V22.6667ZM17.3334 17.3334H14.6667V9.33336H17.3334V17.3334Z",
        fill: "inherit"
      }
    )
  );
  const PullRequestIcon = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      viewBox: "0 0 32 32",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M22.6328 19.163V11.997C22.6281 10.391 21.613 8 18.8359 8V6L15.0484 9L18.8359 12V10C20.5677 10 20.7306 11.539 20.7391 12V19.163C19.3756 19.597 18.3719 20.92 18.3719 22.5C18.3719 24.43 19.8585 26 21.686 26C23.5134 26 25 24.43 25 22.5C25 20.92 23.9963 19.597 22.6328 19.163ZM21.686 24C20.9029 24 20.2656 23.327 20.2656 22.5C20.2656 21.673 20.9029 21 21.686 21C22.469 21 23.1063 21.673 23.1063 22.5C23.1063 23.327 22.469 24 21.686 24ZM13.6281 9.5C13.6281 7.57 12.1415 6 10.314 6C8.48659 6 7 7.57 7 9.5C7 11.08 8.00368 12.403 9.36718 12.837V19.163C8.00368 19.597 7 20.92 7 22.5C7 24.43 8.48659 26 10.314 26C12.1415 26 13.6281 24.43 13.6281 22.5C13.6281 20.92 12.6244 19.597 11.2609 19.163V12.837C12.6244 12.403 13.6281 11.08 13.6281 9.5ZM8.89374 9.5C8.89374 8.673 9.53098 8 10.314 8C11.0971 8 11.7344 8.673 11.7344 9.5C11.7344 10.327 11.0971 11 10.314 11C9.53098 11 8.89374 10.327 8.89374 9.5ZM11.7344 22.5C11.7344 23.327 11.0971 24 10.314 24C9.53098 24 8.89374 23.327 8.89374 22.5C8.89374 21.673 9.53098 21 10.314 21C11.0971 21 11.7344 21.673 11.7344 22.5Z" })
  );
  const Folder = ({ ...props }) => {
    return /* @__PURE__ */ React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "2 2 20 20", ...props }, /* @__PURE__ */ React.createElement("path", { d: "M20,5h-8.586L9.707,3.293C9.52,3.105,9.265,3,9,3H4C2.897,3,2,3.897,2,5v14c0,1.103,0.897,2,2,2h16c1.103,0,2-0.897,2-2V7 C22,5.897,21.103,5,20,5z M4,19V7h7h1h8l0.002,12H4z" }));
  };
  const File = ({ ...props }) => {
    return /* @__PURE__ */ React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "2 2 20 20", ...props }, /* @__PURE__ */ React.createElement("path", { d: "M19.903,8.586c-0.049-0.106-0.11-0.207-0.196-0.293l-6-6c-0.086-0.086-0.187-0.147-0.293-0.196 c-0.03-0.014-0.062-0.022-0.094-0.033c-0.084-0.028-0.17-0.046-0.259-0.051C13.04,2.011,13.021,2,13,2H6C4.897,2,4,2.897,4,4v16 c0,1.103,0.897,2,2,2h12c1.103,0,2-0.897,2-2V9c0-0.021-0.011-0.04-0.013-0.062c-0.005-0.089-0.022-0.175-0.051-0.259 C19.926,8.647,19.917,8.616,19.903,8.586z M16.586,8H14V5.414L16.586,8z M6,20V4h6v5c0,0.553,0.447,1,1,1h5l0.002,10H6z" }), /* @__PURE__ */ React.createElement("path", { d: "M8 12H16V14H8zM8 16H16V18H8zM8 8H10V10H8z" }));
  };
  const Circle = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      className: "bi bi-circle",
      viewBox: "0 0 16 16",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" })
  );
  const CircleCheck = ({ ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      className: "bi bi-check-circle-fill",
      viewBox: "0 0 16 16",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement("path", { d: "M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" })
  );
  const ModalHeader = ({ children, close: close2 }) => {
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "h-14 flex items-center justify-between px-5 border-b border-gray-200 m-0" }, /* @__PURE__ */ React__namespace.createElement(ModalTitle, null, children), close2 && /* @__PURE__ */ React__namespace.createElement(
      "div",
      {
        onClick: close2,
        className: "flex items-center fill-gray-400 cursor-pointer transition-colors duration-100 ease-out hover:fill-gray-700"
      },
      /* @__PURE__ */ React__namespace.createElement(CloseIcon, { className: "w-6 h-auto" })
    ));
  };
  const ModalTitle = ({ children }) => {
    return /* @__PURE__ */ React__namespace.createElement("h2", { className: "text-gray-600 font-sans font-medium text-base leading-none m-0 block truncate flex items-center" }, children);
  };
  const FullscreenModal = ({ className = "", style = {}, ...props }) => /* @__PURE__ */ React.createElement(
    "div",
    {
      className: `flex flex-col z-0 overflow-visible bg-white rounded-none absolute top-0 left-0 w-full max-w-[1500px] h-full ${className} md:w-[calc(100%-170px)]`,
      style: {
        animation: "popup-right 150ms ease-out 1",
        ...style
      },
      ...props
    }
  );
  const ModalFullscreen = FullscreenModal;
  const PopupModal = ({ className = "", style = {}, ...props }) => /* @__PURE__ */ React.createElement(
    "div",
    {
      className: `block z-0 overflow-visible bg-gray-50 rounded-[5px] my-10 mx-auto w-[460px] max-w-[90%] ${className}`,
      style: {
        animation: "popup-down 150ms ease-out 1",
        ...style
      },
      ...props
    }
  );
  const ModalPopup = PopupModal;
  const ERROR_MISSING_CMS = `useCMS could not find an instance of CMS`;
  const CMSContext = React__namespace.createContext(null);
  function useCMS$1() {
    const { cms, dispatch, state } = React__namespace.useContext(CMSContext);
    if (!cms) {
      throw new Error(ERROR_MISSING_CMS);
    }
    const [, setEnabled] = React__namespace.useState(cms.enabled);
    cms.dispatch = dispatch;
    cms.state = state;
    React__namespace.useEffect(() => {
      return cms.events.subscribe("cms", () => {
        setEnabled(cms.enabled);
      });
    }, [cms]);
    return cms;
  }
  function useCMSEvent(event, callback, deps) {
    const cms = useCMS$1();
    React__namespace.useEffect(function() {
      return cms.events.subscribe(event, callback);
    }, deps);
  }
  const useEventSubscription = useCMSEvent;
  function useEvent(eventType) {
    const cms = useCMS$1();
    return {
      dispatch: (event) => cms.events.dispatch({
        ...event,
        type: eventType
      }),
      subscribe: (callback) => cms.events.subscribe(eventType, callback)
    };
  }
  function wrapFieldsWithMeta(Field) {
    return (props) => {
      return /* @__PURE__ */ React__namespace.createElement(
        FieldMeta,
        {
          name: props.input.name,
          label: props.field.label,
          description: props.field.description,
          error: props.meta.error,
          index: props.index,
          tinaForm: props.tinaForm
        },
        /* @__PURE__ */ React__namespace.createElement(Field, { ...props })
      );
    };
  }
  function wrapFieldWithNoHeader(Field) {
    return (props) => {
      return /* @__PURE__ */ React__namespace.createElement(
        FieldMeta,
        {
          name: props.input.name,
          label: false,
          description: "",
          error: props.meta.error,
          index: props.index,
          tinaForm: props.tinaForm
        },
        /* @__PURE__ */ React__namespace.createElement(Field, { ...props })
      );
    };
  }
  function wrapFieldWithError(Field) {
    return (props) => {
      return /* @__PURE__ */ React__namespace.createElement(
        FieldMeta,
        {
          name: props.input.name,
          label: false,
          description: props.field.description,
          error: props.meta.error,
          index: props.index,
          tinaForm: props.tinaForm
        },
        /* @__PURE__ */ React__namespace.createElement(Field, { ...props })
      );
    };
  }
  const FieldMeta = ({
    name,
    label,
    description,
    error: error2,
    margin = true,
    children,
    index,
    tinaForm,
    ...props
  }) => {
    const { dispatch: setHoveredField } = useEvent("field:hover");
    const { dispatch: setFocusedField } = useEvent("field:focus");
    return /* @__PURE__ */ React__namespace.createElement(
      FieldWrapper,
      {
        margin,
        onMouseOver: () => setHoveredField({ id: tinaForm.id, fieldName: name }),
        onMouseOut: () => setHoveredField({ id: null, fieldName: null }),
        onClick: () => setFocusedField({ id: tinaForm.id, fieldName: name }),
        style: { zIndex: index ? 1e3 - index : void 0 },
        ...props
      },
      (label !== false || description) && /* @__PURE__ */ React__namespace.createElement(FieldLabel, { name }, label !== false && /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, label || name), description && /* @__PURE__ */ React__namespace.createElement(FieldDescription, null, description)),
      children,
      error2 && typeof error2 === "string" && /* @__PURE__ */ React__namespace.createElement(FieldError, null, error2)
    );
  };
  const FieldWrapper = ({
    margin,
    children,
    ...props
  }) => {
    return /* @__PURE__ */ React__namespace.createElement("div", { className: `relative ${margin ? `mb-5 last:mb-0` : ``}`, ...props }, children);
  };
  const FieldLabel = ({
    children,
    className,
    name,
    ...props
  }) => {
    return /* @__PURE__ */ React__namespace.createElement(
      "label",
      {
        htmlFor: name,
        className: `block font-sans text-xs font-semibold text-gray-700 whitespace-normal mb-2 ${className}`,
        ...props
      },
      children
    );
  };
  const FieldDescription = ({
    children,
    className,
    ...props
  }) => {
    if (typeof children === "string") {
      return /* @__PURE__ */ React__namespace.createElement(
        "span",
        {
          className: `block font-sans text-xs italic font-light text-gray-400 pt-0.5 whitespace-normal m-0 ${className}`,
          ...props,
          dangerouslySetInnerHTML: { __html: children }
        }
      );
    }
    return /* @__PURE__ */ React__namespace.createElement(
      "span",
      {
        className: `block font-sans text-xs italic font-light text-gray-400 pt-0.5 whitespace-normal m-0 ${className}`,
        ...props
      },
      children
    );
  };
  const FieldError = ({
    children,
    className,
    ...props
  }) => {
    return /* @__PURE__ */ React__namespace.createElement(
      "span",
      {
        className: `block font-sans text-xs font-normal text-red-500 pt-3 animate-slide-in whitespace-normal m-0  ${className}`,
        ...props
      },
      children
    );
  };
  const EditorContext$1 = React.createContext({
    fieldName: "",
    rawMode: false,
    setRawMode: () => {
    },
    templates: []
  });
  const useEditorContext = () => {
    return React.useContext(EditorContext$1);
  };
  const useTemplates = () => {
    return React.useContext(EditorContext$1);
  };
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
  }
  var direction_1 = direction;
  var RTL = "֑-߿יִ-﷽ﹰ-ﻼ";
  var LTR = "A-Za-zÀ-ÖØ-öø-ʸ̀-֐ࠀ-῿‎Ⰰ-﬜︀-﹯﻽-￿";
  var rtl = new RegExp("^[^" + LTR + "]*[" + RTL + "]");
  var ltr = new RegExp("^[^" + RTL + "]*[" + LTR + "]");
  function direction(value) {
    value = String(value || "");
    if (rtl.test(value)) {
      return "rtl";
    }
    if (ltr.test(value)) {
      return "ltr";
    }
    return "neutral";
  }
  const getDirection = /* @__PURE__ */ getDefaultExportFromCjs(direction_1);
  function isObject$e(value) {
    var type = typeof value;
    return value != null && (type == "object" || type == "function");
  }
  var isObject_1 = isObject$e;
  var freeGlobal$1 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var _freeGlobal = freeGlobal$1;
  var freeGlobal = _freeGlobal;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root$9 = freeGlobal || freeSelf || Function("return this")();
  var _root = root$9;
  var root$8 = _root;
  var now$1 = function() {
    return root$8.Date.now();
  };
  var now_1 = now$1;
  var reWhitespace = /\s/;
  function trimmedEndIndex$1(string2) {
    var index = string2.length;
    while (index-- && reWhitespace.test(string2.charAt(index))) {
    }
    return index;
  }
  var _trimmedEndIndex = trimmedEndIndex$1;
  var trimmedEndIndex = _trimmedEndIndex;
  var reTrimStart = /^\s+/;
  function baseTrim$1(string2) {
    return string2 ? string2.slice(0, trimmedEndIndex(string2) + 1).replace(reTrimStart, "") : string2;
  }
  var _baseTrim = baseTrim$1;
  var root$7 = _root;
  var Symbol$7 = root$7.Symbol;
  var _Symbol = Symbol$7;
  var Symbol$6 = _Symbol;
  var objectProto$f = Object.prototype;
  var hasOwnProperty$c = objectProto$f.hasOwnProperty;
  var nativeObjectToString$1 = objectProto$f.toString;
  var symToStringTag$1 = Symbol$6 ? Symbol$6.toStringTag : void 0;
  function getRawTag$1(value) {
    var isOwn = hasOwnProperty$c.call(value, symToStringTag$1), tag = value[symToStringTag$1];
    try {
      value[symToStringTag$1] = void 0;
      var unmasked = true;
    } catch (e3) {
    }
    var result = nativeObjectToString$1.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }
    return result;
  }
  var _getRawTag = getRawTag$1;
  var objectProto$e = Object.prototype;
  var nativeObjectToString = objectProto$e.toString;
  function objectToString$1(value) {
    return nativeObjectToString.call(value);
  }
  var _objectToString = objectToString$1;
  var Symbol$5 = _Symbol, getRawTag = _getRawTag, objectToString = _objectToString;
  var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
  var symToStringTag = Symbol$5 ? Symbol$5.toStringTag : void 0;
  function baseGetTag$6(value) {
    if (value == null) {
      return value === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }
  var _baseGetTag = baseGetTag$6;
  function isObjectLike$9(value) {
    return value != null && typeof value == "object";
  }
  var isObjectLike_1 = isObjectLike$9;
  var baseGetTag$5 = _baseGetTag, isObjectLike$8 = isObjectLike_1;
  var symbolTag$3 = "[object Symbol]";
  function isSymbol$4(value) {
    return typeof value == "symbol" || isObjectLike$8(value) && baseGetTag$5(value) == symbolTag$3;
  }
  var isSymbol_1 = isSymbol$4;
  var baseTrim = _baseTrim, isObject$d = isObject_1, isSymbol$3 = isSymbol_1;
  var NAN = 0 / 0;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;
  function toNumber$1(value) {
    if (typeof value == "number") {
      return value;
    }
    if (isSymbol$3(value)) {
      return NAN;
    }
    if (isObject$d(value)) {
      var other = typeof value.valueOf == "function" ? value.valueOf() : value;
      value = isObject$d(other) ? other + "" : other;
    }
    if (typeof value != "string") {
      return value === 0 ? value : +value;
    }
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }
  var toNumber_1 = toNumber$1;
  var isObject$c = isObject_1, now = now_1, toNumber = toNumber_1;
  var FUNC_ERROR_TEXT$3 = "Expected a function";
  var nativeMax$1 = Math.max, nativeMin = Math.min;
  function debounce$1(func, wait, options) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT$3);
    }
    wait = toNumber(wait) || 0;
    if (isObject$c(options)) {
      leading = !!options.leading;
      maxing = "maxWait" in options;
      maxWait = maxing ? nativeMax$1(toNumber(options.maxWait) || 0, wait) : maxWait;
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time2) {
      var args = lastArgs, thisArg = lastThis;
      lastArgs = lastThis = void 0;
      lastInvokeTime = time2;
      result = func.apply(thisArg, args);
      return result;
    }
    function leadingEdge(time2) {
      lastInvokeTime = time2;
      timerId = setTimeout(timerExpired, wait);
      return leading ? invokeFunc(time2) : result;
    }
    function remainingWait(time2) {
      var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
      return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    function shouldInvoke(time2) {
      var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
      return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
      var time2 = now();
      if (shouldInvoke(time2)) {
        return trailingEdge(time2);
      }
      timerId = setTimeout(timerExpired, remainingWait(time2));
    }
    function trailingEdge(time2) {
      timerId = void 0;
      if (trailing && lastArgs) {
        return invokeFunc(time2);
      }
      lastArgs = lastThis = void 0;
      return result;
    }
    function cancel() {
      if (timerId !== void 0) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = void 0;
    }
    function flush() {
      return timerId === void 0 ? result : trailingEdge(now());
    }
    function debounced() {
      var time2 = now(), isInvoking = shouldInvoke(time2);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time2;
      if (isInvoking) {
        if (timerId === void 0) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === void 0) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }
  var debounce_1 = debounce$1;
  const debounce$2 = /* @__PURE__ */ getDefaultExportFromCjs(debounce_1);
  var debounce = debounce_1, isObject$b = isObject_1;
  var FUNC_ERROR_TEXT$2 = "Expected a function";
  function throttle(func, wait, options) {
    var leading = true, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT$2);
    }
    if (isObject$b(options)) {
      leading = "leading" in options ? !!options.leading : leading;
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    return debounce(func, wait, {
      "leading": leading,
      "maxWait": wait,
      "trailing": trailing
    });
  }
  var throttle_1 = throttle;
  const throttle$1 = /* @__PURE__ */ getDefaultExportFromCjs(throttle_1);
  const t$2 = (t2) => "object" == typeof t2 && null != t2 && 1 === t2.nodeType, e$3 = (t2, e3) => (!e3 || "hidden" !== t2) && ("visible" !== t2 && "clip" !== t2), n$3 = (t2, n2) => {
    if (t2.clientHeight < t2.scrollHeight || t2.clientWidth < t2.scrollWidth) {
      const o3 = getComputedStyle(t2, null);
      return e$3(o3.overflowY, n2) || e$3(o3.overflowX, n2) || ((t3) => {
        const e3 = ((t4) => {
          if (!t4.ownerDocument || !t4.ownerDocument.defaultView)
            return null;
          try {
            return t4.ownerDocument.defaultView.frameElement;
          } catch (t5) {
            return null;
          }
        })(t3);
        return !!e3 && (e3.clientHeight < t3.scrollHeight || e3.clientWidth < t3.scrollWidth);
      })(t2);
    }
    return false;
  }, o$3 = (t2, e3, n2, o3, l2, r2, i2, s2) => r2 < t2 && i2 > e3 || r2 > t2 && i2 < e3 ? 0 : r2 <= t2 && s2 <= n2 || i2 >= e3 && s2 >= n2 ? r2 - t2 - o3 : i2 > e3 && s2 < n2 || r2 < t2 && s2 > n2 ? i2 - e3 + l2 : 0, l$2 = (t2) => {
    const e3 = t2.parentElement;
    return null == e3 ? t2.getRootNode().host || null : e3;
  }, r$3 = (e3, r2) => {
    var i2, s2, d2, h;
    if ("undefined" == typeof document)
      return [];
    const { scrollMode: c2, block: f2, inline: u2, boundary: a2, skipOverflowHiddenElements: g } = r2, p2 = "function" == typeof a2 ? a2 : (t2) => t2 !== a2;
    if (!t$2(e3))
      throw new TypeError("Invalid target");
    const m = document.scrollingElement || document.documentElement, w2 = [];
    let W = e3;
    for (; t$2(W) && p2(W); ) {
      if (W = l$2(W), W === m) {
        w2.push(W);
        break;
      }
      null != W && W === document.body && n$3(W) && !n$3(document.documentElement) || null != W && n$3(W, g) && w2.push(W);
    }
    const b = null != (s2 = null == (i2 = window.visualViewport) ? void 0 : i2.width) ? s2 : innerWidth, H = null != (h = null == (d2 = window.visualViewport) ? void 0 : d2.height) ? h : innerHeight, { scrollX: y, scrollY: M } = window, { height: v, width: E, top: x, right: C, bottom: I, left: R } = e3.getBoundingClientRect(), { top: T, right: B, bottom: F, left: V } = ((t2) => {
      const e4 = window.getComputedStyle(t2);
      return { top: parseFloat(e4.scrollMarginTop) || 0, right: parseFloat(e4.scrollMarginRight) || 0, bottom: parseFloat(e4.scrollMarginBottom) || 0, left: parseFloat(e4.scrollMarginLeft) || 0 };
    })(e3);
    let k = "start" === f2 || "nearest" === f2 ? x - T : "end" === f2 ? I + F : x + v / 2 - T + F, D = "center" === u2 ? R + E / 2 - V + B : "end" === u2 ? C + B : R - V;
    const L = [];
    for (let t2 = 0; t2 < w2.length; t2++) {
      const e4 = w2[t2], { height: l2, width: r3, top: i3, right: s3, bottom: d3, left: h2 } = e4.getBoundingClientRect();
      if ("if-needed" === c2 && x >= 0 && R >= 0 && I <= H && C <= b && (e4 === m && !n$3(e4) || x >= i3 && I <= d3 && R >= h2 && C <= s3))
        return L;
      const a3 = getComputedStyle(e4), g2 = parseInt(a3.borderLeftWidth, 10), p3 = parseInt(a3.borderTopWidth, 10), W2 = parseInt(a3.borderRightWidth, 10), T2 = parseInt(a3.borderBottomWidth, 10);
      let B2 = 0, F2 = 0;
      const V2 = "offsetWidth" in e4 ? e4.offsetWidth - e4.clientWidth - g2 - W2 : 0, S = "offsetHeight" in e4 ? e4.offsetHeight - e4.clientHeight - p3 - T2 : 0, X = "offsetWidth" in e4 ? 0 === e4.offsetWidth ? 0 : r3 / e4.offsetWidth : 0, Y = "offsetHeight" in e4 ? 0 === e4.offsetHeight ? 0 : l2 / e4.offsetHeight : 0;
      if (m === e4)
        B2 = "start" === f2 ? k : "end" === f2 ? k - H : "nearest" === f2 ? o$3(M, M + H, H, p3, T2, M + k, M + k + v, v) : k - H / 2, F2 = "start" === u2 ? D : "center" === u2 ? D - b / 2 : "end" === u2 ? D - b : o$3(y, y + b, b, g2, W2, y + D, y + D + E, E), B2 = Math.max(0, B2 + M), F2 = Math.max(0, F2 + y);
      else {
        B2 = "start" === f2 ? k - i3 - p3 : "end" === f2 ? k - d3 + T2 + S : "nearest" === f2 ? o$3(i3, d3, l2, p3, T2 + S, k, k + v, v) : k - (i3 + l2 / 2) + S / 2, F2 = "start" === u2 ? D - h2 - g2 : "center" === u2 ? D - (h2 + r3 / 2) + V2 / 2 : "end" === u2 ? D - s3 + W2 + V2 : o$3(h2, s3, r3, g2, W2 + V2, D, D + E, E);
        const { scrollLeft: t3, scrollTop: n2 } = e4;
        B2 = 0 === Y ? 0 : Math.max(0, Math.min(n2 + B2 / Y, e4.scrollHeight - l2 / Y + S)), F2 = 0 === X ? 0 : Math.max(0, Math.min(t3 + F2 / X, e4.scrollWidth - r3 / X + V2)), k += n2 - B2, D += t3 - F2;
      }
      L.push({ el: e4, top: B2, left: F2 });
    }
    return L;
  };
  const o$2 = (t2) => false === t2 ? { block: "end", inline: "nearest" } : ((t3) => t3 === Object(t3) && 0 !== Object.keys(t3).length)(t2) ? t2 : { block: "start", inline: "nearest" };
  function e$2(e3, r2) {
    if (!e3.isConnected || !((t2) => {
      let o3 = t2;
      for (; o3 && o3.parentNode; ) {
        if (o3.parentNode === document)
          return true;
        o3 = o3.parentNode instanceof ShadowRoot ? o3.parentNode.host : o3.parentNode;
      }
      return false;
    })(e3))
      return;
    const n2 = ((t2) => {
      const o3 = window.getComputedStyle(t2);
      return { top: parseFloat(o3.scrollMarginTop) || 0, right: parseFloat(o3.scrollMarginRight) || 0, bottom: parseFloat(o3.scrollMarginBottom) || 0, left: parseFloat(o3.scrollMarginLeft) || 0 };
    })(e3);
    if (((t2) => "object" == typeof t2 && "function" == typeof t2.behavior)(r2))
      return r2.behavior(r$3(e3, r2));
    const l2 = "boolean" == typeof r2 || null == r2 ? void 0 : r2.behavior;
    for (const { el: a2, top: i2, left: s2 } of r$3(e3, o$2(r2))) {
      const t2 = i2 - n2.top + n2.bottom, o3 = s2 - n2.left + n2.right;
      a2.scroll({ top: t2, left: o3, behavior: l2 });
    }
  }
  /*!
   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   */
  function isObject$a(o3) {
    return Object.prototype.toString.call(o3) === "[object Object]";
  }
  function isPlainObject$5(o3) {
    var ctor, prot;
    if (isObject$a(o3) === false)
      return false;
    ctor = o3.constructor;
    if (ctor === void 0)
      return true;
    prot = ctor.prototype;
    if (isObject$a(prot) === false)
      return false;
    if (prot.hasOwnProperty("isPrototypeOf") === false) {
      return false;
    }
    return true;
  }
  var NOTHING = Symbol.for("immer-nothing");
  var DRAFTABLE = Symbol.for("immer-draftable");
  var DRAFT_STATE = Symbol.for("immer-state");
  var errors = process.env.NODE_ENV !== "production" ? [
    // All error codes, starting by 0:
    function(plugin) {
      return `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \`enable${plugin}()\` when initializing your application.`;
    },
    function(thing) {
      return `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`;
    },
    "This object has been frozen and should not be mutated",
    function(data) {
      return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + data;
    },
    "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",
    "Immer forbids circular references",
    "The first or second argument to `produce` must be a function",
    "The third argument to `produce` must be a function or undefined",
    "First argument to `createDraft` must be a plain object, an array, or an immerable object",
    "First argument to `finishDraft` must be a draft returned by `createDraft`",
    function(thing) {
      return `'current' expects a draft, got: ${thing}`;
    },
    "Object.defineProperty() cannot be used on an Immer draft",
    "Object.setPrototypeOf() cannot be used on an Immer draft",
    "Immer only supports deleting array indices",
    "Immer only supports setting array indices and the 'length' property",
    function(thing) {
      return `'original' expects a draft, got: ${thing}`;
    }
    // Note: if more errors are added, the errorOffset in Patches.ts should be increased
    // See Patches.ts for additional errors
  ] : [];
  function die(error2, ...args) {
    if (process.env.NODE_ENV !== "production") {
      const e3 = errors[error2];
      const msg2 = typeof e3 === "function" ? e3.apply(null, args) : e3;
      throw new Error(`[Immer] ${msg2}`);
    }
    throw new Error(
      `[Immer] minified error nr: ${error2}. Full error at: https://bit.ly/3cXEKWf`
    );
  }
  var getPrototypeOf = Object.getPrototypeOf;
  function isDraft$1(value) {
    return !!value && !!value[DRAFT_STATE];
  }
  function isDraftable$1(value) {
    var _a2;
    if (!value)
      return false;
    return isPlainObject$4(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!((_a2 = value.constructor) == null ? void 0 : _a2[DRAFTABLE]) || isMap$2(value) || isSet$2(value);
  }
  var objectCtorString$1 = Object.prototype.constructor.toString();
  function isPlainObject$4(value) {
    if (!value || typeof value !== "object")
      return false;
    const proto = getPrototypeOf(value);
    if (proto === null) {
      return true;
    }
    const Ctor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
    if (Ctor === Object)
      return true;
    return typeof Ctor == "function" && Function.toString.call(Ctor) === objectCtorString$1;
  }
  function each(obj, iter) {
    if (getArchtype(obj) === 0) {
      Reflect.ownKeys(obj).forEach((key) => {
        iter(key, obj[key], obj);
      });
    } else {
      obj.forEach((entry, index) => iter(index, entry, obj));
    }
  }
  function getArchtype(thing) {
    const state = thing[DRAFT_STATE];
    return state ? state.type_ : Array.isArray(thing) ? 1 : isMap$2(thing) ? 2 : isSet$2(thing) ? 3 : 0;
  }
  function has$2(thing, prop2) {
    return getArchtype(thing) === 2 ? thing.has(prop2) : Object.prototype.hasOwnProperty.call(thing, prop2);
  }
  function set$3(thing, propOrOldValue, value) {
    const t2 = getArchtype(thing);
    if (t2 === 2)
      thing.set(propOrOldValue, value);
    else if (t2 === 3) {
      thing.add(value);
    } else
      thing[propOrOldValue] = value;
  }
  function is(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }
  function isMap$2(target) {
    return target instanceof Map;
  }
  function isSet$2(target) {
    return target instanceof Set;
  }
  function latest$1(state) {
    return state.copy_ || state.base_;
  }
  function shallowCopy$1(base, strict) {
    if (isMap$2(base)) {
      return new Map(base);
    }
    if (isSet$2(base)) {
      return new Set(base);
    }
    if (Array.isArray(base))
      return Array.prototype.slice.call(base);
    const isPlain = isPlainObject$4(base);
    if (strict === true || strict === "class_only" && !isPlain) {
      const descriptors = Object.getOwnPropertyDescriptors(base);
      delete descriptors[DRAFT_STATE];
      let keys2 = Reflect.ownKeys(descriptors);
      for (let i2 = 0; i2 < keys2.length; i2++) {
        const key = keys2[i2];
        const desc = descriptors[key];
        if (desc.writable === false) {
          desc.writable = true;
          desc.configurable = true;
        }
        if (desc.get || desc.set)
          descriptors[key] = {
            configurable: true,
            writable: true,
            // could live with !!desc.set as well here...
            enumerable: desc.enumerable,
            value: base[key]
          };
      }
      return Object.create(getPrototypeOf(base), descriptors);
    } else {
      const proto = getPrototypeOf(base);
      if (proto !== null && isPlain) {
        return { ...base };
      }
      const obj = Object.create(proto);
      return Object.assign(obj, base);
    }
  }
  function freeze$1(obj, deep = false) {
    if (isFrozen(obj) || isDraft$1(obj) || !isDraftable$1(obj))
      return obj;
    if (getArchtype(obj) > 1) {
      obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;
    }
    Object.freeze(obj);
    if (deep)
      Object.entries(obj).forEach(([key, value]) => freeze$1(value, true));
    return obj;
  }
  function dontMutateFrozenCollections() {
    die(2);
  }
  function isFrozen(obj) {
    return Object.isFrozen(obj);
  }
  var plugins = {};
  function getPlugin(pluginKey) {
    const plugin = plugins[pluginKey];
    if (!plugin) {
      die(0, pluginKey);
    }
    return plugin;
  }
  var currentScope;
  function getCurrentScope() {
    return currentScope;
  }
  function createScope(parent_, immer_) {
    return {
      drafts_: [],
      parent_,
      immer_,
      // Whenever the modified draft contains a draft from another scope, we
      // need to prevent auto-freezing so the unowned draft can be finalized.
      canAutoFreeze_: true,
      unfinalizedDrafts_: 0
    };
  }
  function usePatchesInScope(scope, patchListener) {
    if (patchListener) {
      getPlugin("Patches");
      scope.patches_ = [];
      scope.inversePatches_ = [];
      scope.patchListener_ = patchListener;
    }
  }
  function revokeScope(scope) {
    leaveScope(scope);
    scope.drafts_.forEach(revokeDraft);
    scope.drafts_ = null;
  }
  function leaveScope(scope) {
    if (scope === currentScope) {
      currentScope = scope.parent_;
    }
  }
  function enterScope(immer2) {
    return currentScope = createScope(currentScope, immer2);
  }
  function revokeDraft(draft) {
    const state = draft[DRAFT_STATE];
    if (state.type_ === 0 || state.type_ === 1)
      state.revoke_();
    else
      state.revoked_ = true;
  }
  function processResult(result, scope) {
    scope.unfinalizedDrafts_ = scope.drafts_.length;
    const baseDraft = scope.drafts_[0];
    const isReplaced = result !== void 0 && result !== baseDraft;
    if (isReplaced) {
      if (baseDraft[DRAFT_STATE].modified_) {
        revokeScope(scope);
        die(4);
      }
      if (isDraftable$1(result)) {
        result = finalize(scope, result);
        if (!scope.parent_)
          maybeFreeze(scope, result);
      }
      if (scope.patches_) {
        getPlugin("Patches").generateReplacementPatches_(
          baseDraft[DRAFT_STATE].base_,
          result,
          scope.patches_,
          scope.inversePatches_
        );
      }
    } else {
      result = finalize(scope, baseDraft, []);
    }
    revokeScope(scope);
    if (scope.patches_) {
      scope.patchListener_(scope.patches_, scope.inversePatches_);
    }
    return result !== NOTHING ? result : void 0;
  }
  function finalize(rootScope, value, path2) {
    if (isFrozen(value))
      return value;
    const state = value[DRAFT_STATE];
    if (!state) {
      each(
        value,
        (key, childValue) => finalizeProperty(rootScope, state, value, key, childValue, path2)
      );
      return value;
    }
    if (state.scope_ !== rootScope)
      return value;
    if (!state.modified_) {
      maybeFreeze(rootScope, state.base_, true);
      return state.base_;
    }
    if (!state.finalized_) {
      state.finalized_ = true;
      state.scope_.unfinalizedDrafts_--;
      const result = state.copy_;
      let resultEach = result;
      let isSet2 = false;
      if (state.type_ === 3) {
        resultEach = new Set(result);
        result.clear();
        isSet2 = true;
      }
      each(
        resultEach,
        (key, childValue) => finalizeProperty(rootScope, state, result, key, childValue, path2, isSet2)
      );
      maybeFreeze(rootScope, result, false);
      if (path2 && rootScope.patches_) {
        getPlugin("Patches").generatePatches_(
          state,
          path2,
          rootScope.patches_,
          rootScope.inversePatches_
        );
      }
    }
    return state.copy_;
  }
  function finalizeProperty(rootScope, parentState, targetObject, prop2, childValue, rootPath, targetIsSet) {
    if (process.env.NODE_ENV !== "production" && childValue === targetObject)
      die(5);
    if (isDraft$1(childValue)) {
      const path2 = rootPath && parentState && parentState.type_ !== 3 && // Set objects are atomic since they have no keys.
      !has$2(parentState.assigned_, prop2) ? rootPath.concat(prop2) : void 0;
      const res = finalize(rootScope, childValue, path2);
      set$3(targetObject, prop2, res);
      if (isDraft$1(res)) {
        rootScope.canAutoFreeze_ = false;
      } else
        return;
    } else if (targetIsSet) {
      targetObject.add(childValue);
    }
    if (isDraftable$1(childValue) && !isFrozen(childValue)) {
      if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {
        return;
      }
      finalize(rootScope, childValue);
      if ((!parentState || !parentState.scope_.parent_) && typeof prop2 !== "symbol" && Object.prototype.propertyIsEnumerable.call(targetObject, prop2))
        maybeFreeze(rootScope, childValue);
    }
  }
  function maybeFreeze(scope, value, deep = false) {
    if (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {
      freeze$1(value, deep);
    }
  }
  function createProxyProxy(base, parent2) {
    const isArray2 = Array.isArray(base);
    const state = {
      type_: isArray2 ? 1 : 0,
      // Track which produce call this is associated with.
      scope_: parent2 ? parent2.scope_ : getCurrentScope(),
      // True for both shallow and deep changes.
      modified_: false,
      // Used during finalization.
      finalized_: false,
      // Track which properties have been assigned (true) or deleted (false).
      assigned_: {},
      // The parent draft state.
      parent_: parent2,
      // The base state.
      base_: base,
      // The base proxy.
      draft_: null,
      // set below
      // The base copy with any updated values.
      copy_: null,
      // Called by the `produce` function.
      revoke_: null,
      isManual_: false
    };
    let target = state;
    let traps = objectTraps;
    if (isArray2) {
      target = [state];
      traps = arrayTraps;
    }
    const { revoke, proxy } = Proxy.revocable(target, traps);
    state.draft_ = proxy;
    state.revoke_ = revoke;
    return proxy;
  }
  var objectTraps = {
    get(state, prop2) {
      if (prop2 === DRAFT_STATE)
        return state;
      const source2 = latest$1(state);
      if (!has$2(source2, prop2)) {
        return readPropFromProto(state, source2, prop2);
      }
      const value = source2[prop2];
      if (state.finalized_ || !isDraftable$1(value)) {
        return value;
      }
      if (value === peek$1(state.base_, prop2)) {
        prepareCopy(state);
        return state.copy_[prop2] = createProxy(value, state);
      }
      return value;
    },
    has(state, prop2) {
      return prop2 in latest$1(state);
    },
    ownKeys(state) {
      return Reflect.ownKeys(latest$1(state));
    },
    set(state, prop2, value) {
      const desc = getDescriptorFromProto(latest$1(state), prop2);
      if (desc == null ? void 0 : desc.set) {
        desc.set.call(state.draft_, value);
        return true;
      }
      if (!state.modified_) {
        const current2 = peek$1(latest$1(state), prop2);
        const currentState = current2 == null ? void 0 : current2[DRAFT_STATE];
        if (currentState && currentState.base_ === value) {
          state.copy_[prop2] = value;
          state.assigned_[prop2] = false;
          return true;
        }
        if (is(value, current2) && (value !== void 0 || has$2(state.base_, prop2)))
          return true;
        prepareCopy(state);
        markChanged$1(state);
      }
      if (state.copy_[prop2] === value && // special case: handle new props with value 'undefined'
      (value !== void 0 || prop2 in state.copy_) || // special case: NaN
      Number.isNaN(value) && Number.isNaN(state.copy_[prop2]))
        return true;
      state.copy_[prop2] = value;
      state.assigned_[prop2] = true;
      return true;
    },
    deleteProperty(state, prop2) {
      if (peek$1(state.base_, prop2) !== void 0 || prop2 in state.base_) {
        state.assigned_[prop2] = false;
        prepareCopy(state);
        markChanged$1(state);
      } else {
        delete state.assigned_[prop2];
      }
      if (state.copy_) {
        delete state.copy_[prop2];
      }
      return true;
    },
    // Note: We never coerce `desc.value` into an Immer draft, because we can't make
    // the same guarantee in ES5 mode.
    getOwnPropertyDescriptor(state, prop2) {
      const owner = latest$1(state);
      const desc = Reflect.getOwnPropertyDescriptor(owner, prop2);
      if (!desc)
        return desc;
      return {
        writable: true,
        configurable: state.type_ !== 1 || prop2 !== "length",
        enumerable: desc.enumerable,
        value: owner[prop2]
      };
    },
    defineProperty() {
      die(11);
    },
    getPrototypeOf(state) {
      return getPrototypeOf(state.base_);
    },
    setPrototypeOf() {
      die(12);
    }
  };
  var arrayTraps = {};
  each(objectTraps, (key, fn) => {
    arrayTraps[key] = function() {
      arguments[0] = arguments[0][0];
      return fn.apply(this, arguments);
    };
  });
  arrayTraps.deleteProperty = function(state, prop2) {
    if (process.env.NODE_ENV !== "production" && isNaN(parseInt(prop2)))
      die(13);
    return arrayTraps.set.call(this, state, prop2, void 0);
  };
  arrayTraps.set = function(state, prop2, value) {
    if (process.env.NODE_ENV !== "production" && prop2 !== "length" && isNaN(parseInt(prop2)))
      die(14);
    return objectTraps.set.call(this, state[0], prop2, value, state[0]);
  };
  function peek$1(draft, prop2) {
    const state = draft[DRAFT_STATE];
    const source2 = state ? latest$1(state) : draft;
    return source2[prop2];
  }
  function readPropFromProto(state, source2, prop2) {
    var _a2;
    const desc = getDescriptorFromProto(source2, prop2);
    return desc ? `value` in desc ? desc.value : (
      // This is a very special case, if the prop is a getter defined by the
      // prototype, we should invoke it with the draft as context!
      (_a2 = desc.get) == null ? void 0 : _a2.call(state.draft_)
    ) : void 0;
  }
  function getDescriptorFromProto(source2, prop2) {
    if (!(prop2 in source2))
      return void 0;
    let proto = getPrototypeOf(source2);
    while (proto) {
      const desc = Object.getOwnPropertyDescriptor(proto, prop2);
      if (desc)
        return desc;
      proto = getPrototypeOf(proto);
    }
    return void 0;
  }
  function markChanged$1(state) {
    if (!state.modified_) {
      state.modified_ = true;
      if (state.parent_) {
        markChanged$1(state.parent_);
      }
    }
  }
  function prepareCopy(state) {
    if (!state.copy_) {
      state.copy_ = shallowCopy$1(
        state.base_,
        state.scope_.immer_.useStrictShallowCopy_
      );
    }
  }
  var Immer2 = class {
    constructor(config) {
      this.autoFreeze_ = true;
      this.useStrictShallowCopy_ = false;
      this.produce = (base, recipe, patchListener) => {
        if (typeof base === "function" && typeof recipe !== "function") {
          const defaultBase = recipe;
          recipe = base;
          const self2 = this;
          return function curriedProduce(base2 = defaultBase, ...args) {
            return self2.produce(base2, (draft) => recipe.call(this, draft, ...args));
          };
        }
        if (typeof recipe !== "function")
          die(6);
        if (patchListener !== void 0 && typeof patchListener !== "function")
          die(7);
        let result;
        if (isDraftable$1(base)) {
          const scope = enterScope(this);
          const proxy = createProxy(base, void 0);
          let hasError = true;
          try {
            result = recipe(proxy);
            hasError = false;
          } finally {
            if (hasError)
              revokeScope(scope);
            else
              leaveScope(scope);
          }
          usePatchesInScope(scope, patchListener);
          return processResult(result, scope);
        } else if (!base || typeof base !== "object") {
          result = recipe(base);
          if (result === void 0)
            result = base;
          if (result === NOTHING)
            result = void 0;
          if (this.autoFreeze_)
            freeze$1(result, true);
          if (patchListener) {
            const p2 = [];
            const ip = [];
            getPlugin("Patches").generateReplacementPatches_(base, result, p2, ip);
            patchListener(p2, ip);
          }
          return result;
        } else
          die(1, base);
      };
      this.produceWithPatches = (base, recipe) => {
        if (typeof base === "function") {
          return (state, ...args) => this.produceWithPatches(state, (draft) => base(draft, ...args));
        }
        let patches, inversePatches;
        const result = this.produce(base, recipe, (p2, ip) => {
          patches = p2;
          inversePatches = ip;
        });
        return [result, patches, inversePatches];
      };
      if (typeof (config == null ? void 0 : config.autoFreeze) === "boolean")
        this.setAutoFreeze(config.autoFreeze);
      if (typeof (config == null ? void 0 : config.useStrictShallowCopy) === "boolean")
        this.setUseStrictShallowCopy(config.useStrictShallowCopy);
    }
    createDraft(base) {
      if (!isDraftable$1(base))
        die(8);
      if (isDraft$1(base))
        base = current$1(base);
      const scope = enterScope(this);
      const proxy = createProxy(base, void 0);
      proxy[DRAFT_STATE].isManual_ = true;
      leaveScope(scope);
      return proxy;
    }
    finishDraft(draft, patchListener) {
      const state = draft && draft[DRAFT_STATE];
      if (!state || !state.isManual_)
        die(9);
      const { scope_: scope } = state;
      usePatchesInScope(scope, patchListener);
      return processResult(void 0, scope);
    }
    /**
     * Pass true to automatically freeze all copies created by Immer.
     *
     * By default, auto-freezing is enabled.
     */
    setAutoFreeze(value) {
      this.autoFreeze_ = value;
    }
    /**
     * Pass true to enable strict shallow copy.
     *
     * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.
     */
    setUseStrictShallowCopy(value) {
      this.useStrictShallowCopy_ = value;
    }
    applyPatches(base, patches) {
      let i2;
      for (i2 = patches.length - 1; i2 >= 0; i2--) {
        const patch = patches[i2];
        if (patch.path.length === 0 && patch.op === "replace") {
          base = patch.value;
          break;
        }
      }
      if (i2 > -1) {
        patches = patches.slice(i2 + 1);
      }
      const applyPatchesImpl = getPlugin("Patches").applyPatches_;
      if (isDraft$1(base)) {
        return applyPatchesImpl(base, patches);
      }
      return this.produce(
        base,
        (draft) => applyPatchesImpl(draft, patches)
      );
    }
  };
  function createProxy(value, parent2) {
    const draft = isMap$2(value) ? getPlugin("MapSet").proxyMap_(value, parent2) : isSet$2(value) ? getPlugin("MapSet").proxySet_(value, parent2) : createProxyProxy(value, parent2);
    const scope = parent2 ? parent2.scope_ : getCurrentScope();
    scope.drafts_.push(draft);
    return draft;
  }
  function current$1(value) {
    if (!isDraft$1(value))
      die(10, value);
    return currentImpl(value);
  }
  function currentImpl(value) {
    if (!isDraftable$1(value) || isFrozen(value))
      return value;
    const state = value[DRAFT_STATE];
    let copy2;
    if (state) {
      if (!state.modified_)
        return state.base_;
      state.finalized_ = true;
      copy2 = shallowCopy$1(value, state.scope_.immer_.useStrictShallowCopy_);
    } else {
      copy2 = shallowCopy$1(value, true);
    }
    each(copy2, (key, childValue) => {
      set$3(copy2, key, currentImpl(childValue));
    });
    if (state) {
      state.finalized_ = false;
    }
    return copy2;
  }
  var immer = new Immer2();
  var produce = immer.produce;
  immer.produceWithPatches.bind(
    immer
  );
  immer.setAutoFreeze.bind(immer);
  immer.setUseStrictShallowCopy.bind(immer);
  immer.applyPatches.bind(immer);
  var createDraft$1 = immer.createDraft.bind(immer);
  var finishDraft = immer.finishDraft.bind(immer);
  var PathRef = {
    transform(ref, op) {
      var {
        current: current2,
        affinity
      } = ref;
      if (current2 == null) {
        return;
      }
      var path2 = Path.transform(current2, op, {
        affinity
      });
      ref.current = path2;
      if (path2 == null) {
        ref.unref();
      }
    }
  };
  var PointRef = {
    transform(ref, op) {
      var {
        current: current2,
        affinity
      } = ref;
      if (current2 == null) {
        return;
      }
      var point2 = Point.transform(current2, op, {
        affinity
      });
      ref.current = point2;
      if (point2 == null) {
        ref.unref();
      }
    }
  };
  var RangeRef = {
    transform(ref, op) {
      var {
        current: current2,
        affinity
      } = ref;
      if (current2 == null) {
        return;
      }
      var path2 = Range.transform(current2, op, {
        affinity
      });
      ref.current = path2;
      if (path2 == null) {
        ref.unref();
      }
    }
  };
  var DIRTY_PATHS = /* @__PURE__ */ new WeakMap();
  var DIRTY_PATH_KEYS = /* @__PURE__ */ new WeakMap();
  var FLUSHING = /* @__PURE__ */ new WeakMap();
  var NORMALIZING = /* @__PURE__ */ new WeakMap();
  var PATH_REFS = /* @__PURE__ */ new WeakMap();
  var POINT_REFS = /* @__PURE__ */ new WeakMap();
  var RANGE_REFS = /* @__PURE__ */ new WeakMap();
  var Path = {
    ancestors(path2) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var {
        reverse = false
      } = options;
      var paths = Path.levels(path2, options);
      if (reverse) {
        paths = paths.slice(1);
      } else {
        paths = paths.slice(0, -1);
      }
      return paths;
    },
    common(path2, another) {
      var common = [];
      for (var i2 = 0; i2 < path2.length && i2 < another.length; i2++) {
        var av = path2[i2];
        var bv = another[i2];
        if (av !== bv) {
          break;
        }
        common.push(av);
      }
      return common;
    },
    compare(path2, another) {
      var min2 = Math.min(path2.length, another.length);
      for (var i2 = 0; i2 < min2; i2++) {
        if (path2[i2] < another[i2])
          return -1;
        if (path2[i2] > another[i2])
          return 1;
      }
      return 0;
    },
    endsAfter(path2, another) {
      var i2 = path2.length - 1;
      var as = path2.slice(0, i2);
      var bs = another.slice(0, i2);
      var av = path2[i2];
      var bv = another[i2];
      return Path.equals(as, bs) && av > bv;
    },
    endsAt(path2, another) {
      var i2 = path2.length;
      var as = path2.slice(0, i2);
      var bs = another.slice(0, i2);
      return Path.equals(as, bs);
    },
    endsBefore(path2, another) {
      var i2 = path2.length - 1;
      var as = path2.slice(0, i2);
      var bs = another.slice(0, i2);
      var av = path2[i2];
      var bv = another[i2];
      return Path.equals(as, bs) && av < bv;
    },
    equals(path2, another) {
      return path2.length === another.length && path2.every((n2, i2) => n2 === another[i2]);
    },
    hasPrevious(path2) {
      return path2[path2.length - 1] > 0;
    },
    isAfter(path2, another) {
      return Path.compare(path2, another) === 1;
    },
    isAncestor(path2, another) {
      return path2.length < another.length && Path.compare(path2, another) === 0;
    },
    isBefore(path2, another) {
      return Path.compare(path2, another) === -1;
    },
    isChild(path2, another) {
      return path2.length === another.length + 1 && Path.compare(path2, another) === 0;
    },
    isCommon(path2, another) {
      return path2.length <= another.length && Path.compare(path2, another) === 0;
    },
    isDescendant(path2, another) {
      return path2.length > another.length && Path.compare(path2, another) === 0;
    },
    isParent(path2, another) {
      return path2.length + 1 === another.length && Path.compare(path2, another) === 0;
    },
    isPath(value) {
      return Array.isArray(value) && (value.length === 0 || typeof value[0] === "number");
    },
    isSibling(path2, another) {
      if (path2.length !== another.length) {
        return false;
      }
      var as = path2.slice(0, -1);
      var bs = another.slice(0, -1);
      var al = path2[path2.length - 1];
      var bl = another[another.length - 1];
      return al !== bl && Path.equals(as, bs);
    },
    levels(path2) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var {
        reverse = false
      } = options;
      var list = [];
      for (var i2 = 0; i2 <= path2.length; i2++) {
        list.push(path2.slice(0, i2));
      }
      if (reverse) {
        list.reverse();
      }
      return list;
    },
    next(path2) {
      if (path2.length === 0) {
        throw new Error("Cannot get the next path of a root path [".concat(path2, "], because it has no next index."));
      }
      var last2 = path2[path2.length - 1];
      return path2.slice(0, -1).concat(last2 + 1);
    },
    operationCanTransformPath(operation) {
      switch (operation.type) {
        case "insert_node":
        case "remove_node":
        case "merge_node":
        case "split_node":
        case "move_node":
          return true;
        default:
          return false;
      }
    },
    parent(path2) {
      if (path2.length === 0) {
        throw new Error("Cannot get the parent path of the root path [".concat(path2, "]."));
      }
      return path2.slice(0, -1);
    },
    previous(path2) {
      if (path2.length === 0) {
        throw new Error("Cannot get the previous path of a root path [".concat(path2, "], because it has no previous index."));
      }
      var last2 = path2[path2.length - 1];
      if (last2 <= 0) {
        throw new Error("Cannot get the previous path of a first child path [".concat(path2, "] because it would result in a negative index."));
      }
      return path2.slice(0, -1).concat(last2 - 1);
    },
    relative(path2, ancestor) {
      if (!Path.isAncestor(ancestor, path2) && !Path.equals(path2, ancestor)) {
        throw new Error("Cannot get the relative path of [".concat(path2, "] inside ancestor [").concat(ancestor, "], because it is not above or equal to the path."));
      }
      return path2.slice(ancestor.length);
    },
    transform(path2, operation) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      if (!path2)
        return null;
      var p2 = [...path2];
      var {
        affinity = "forward"
      } = options;
      if (path2.length === 0) {
        return p2;
      }
      switch (operation.type) {
        case "insert_node": {
          var {
            path: op
          } = operation;
          if (Path.equals(op, p2) || Path.endsBefore(op, p2) || Path.isAncestor(op, p2)) {
            p2[op.length - 1] += 1;
          }
          break;
        }
        case "remove_node": {
          var {
            path: _op
          } = operation;
          if (Path.equals(_op, p2) || Path.isAncestor(_op, p2)) {
            return null;
          } else if (Path.endsBefore(_op, p2)) {
            p2[_op.length - 1] -= 1;
          }
          break;
        }
        case "merge_node": {
          var {
            path: _op2,
            position
          } = operation;
          if (Path.equals(_op2, p2) || Path.endsBefore(_op2, p2)) {
            p2[_op2.length - 1] -= 1;
          } else if (Path.isAncestor(_op2, p2)) {
            p2[_op2.length - 1] -= 1;
            p2[_op2.length] += position;
          }
          break;
        }
        case "split_node": {
          var {
            path: _op3,
            position: _position
          } = operation;
          if (Path.equals(_op3, p2)) {
            if (affinity === "forward") {
              p2[p2.length - 1] += 1;
            } else if (affinity === "backward")
              ;
            else {
              return null;
            }
          } else if (Path.endsBefore(_op3, p2)) {
            p2[_op3.length - 1] += 1;
          } else if (Path.isAncestor(_op3, p2) && path2[_op3.length] >= _position) {
            p2[_op3.length - 1] += 1;
            p2[_op3.length] -= _position;
          }
          break;
        }
        case "move_node": {
          var {
            path: _op4,
            newPath: onp
          } = operation;
          if (Path.equals(_op4, onp)) {
            return p2;
          }
          if (Path.isAncestor(_op4, p2) || Path.equals(_op4, p2)) {
            var copy2 = onp.slice();
            if (Path.endsBefore(_op4, onp) && _op4.length < onp.length) {
              copy2[_op4.length - 1] -= 1;
            }
            return copy2.concat(p2.slice(_op4.length));
          } else if (Path.isSibling(_op4, onp) && (Path.isAncestor(onp, p2) || Path.equals(onp, p2))) {
            if (Path.endsBefore(_op4, p2)) {
              p2[_op4.length - 1] -= 1;
            } else {
              p2[_op4.length - 1] += 1;
            }
          } else if (Path.endsBefore(onp, p2) || Path.equals(onp, p2) || Path.isAncestor(onp, p2)) {
            if (Path.endsBefore(_op4, p2)) {
              p2[_op4.length - 1] -= 1;
            }
            p2[onp.length - 1] += 1;
          } else if (Path.endsBefore(_op4, p2)) {
            if (Path.equals(onp, p2)) {
              p2[onp.length - 1] += 1;
            }
            p2[_op4.length - 1] -= 1;
          }
          break;
        }
      }
      return p2;
    }
  };
  function _typeof$4(o3) {
    "@babel/helpers - typeof";
    return _typeof$4 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o4) {
      return typeof o4;
    } : function(o4) {
      return o4 && "function" == typeof Symbol && o4.constructor === Symbol && o4 !== Symbol.prototype ? "symbol" : typeof o4;
    }, _typeof$4(o3);
  }
  function _toPrimitive$4(input, hint) {
    if (_typeof$4(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof$4(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey$4(arg) {
    var key = _toPrimitive$4(arg, "string");
    return _typeof$4(key) === "symbol" ? key : String(key);
  }
  function _defineProperty$5(obj, key, value) {
    key = _toPropertyKey$4(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function ownKeys$e(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$e(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$e(Object(t2), true).forEach(function(r3) {
        _defineProperty$5(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$e(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var applyToDraft = (editor, selection, op) => {
    switch (op.type) {
      case "insert_node": {
        var {
          path: path2,
          node: node2
        } = op;
        var parent2 = Node$1.parent(editor, path2);
        var index = path2[path2.length - 1];
        if (index > parent2.children.length) {
          throw new Error('Cannot apply an "insert_node" operation at path ['.concat(path2, "] because the destination is past the end of the node."));
        }
        parent2.children.splice(index, 0, node2);
        if (selection) {
          for (var [point2, key] of Range.points(selection)) {
            selection[key] = Point.transform(point2, op);
          }
        }
        break;
      }
      case "insert_text": {
        var {
          path: _path,
          offset,
          text
        } = op;
        if (text.length === 0)
          break;
        var _node = Node$1.leaf(editor, _path);
        var before2 = _node.text.slice(0, offset);
        var after2 = _node.text.slice(offset);
        _node.text = before2 + text + after2;
        if (selection) {
          for (var [_point, _key] of Range.points(selection)) {
            selection[_key] = Point.transform(_point, op);
          }
        }
        break;
      }
      case "merge_node": {
        var {
          path: _path2
        } = op;
        var _node2 = Node$1.get(editor, _path2);
        var prevPath = Path.previous(_path2);
        var prev = Node$1.get(editor, prevPath);
        var _parent2 = Node$1.parent(editor, _path2);
        var _index = _path2[_path2.length - 1];
        if (Text$1.isText(_node2) && Text$1.isText(prev)) {
          prev.text += _node2.text;
        } else if (!Text$1.isText(_node2) && !Text$1.isText(prev)) {
          prev.children.push(..._node2.children);
        } else {
          throw new Error('Cannot apply a "merge_node" operation at path ['.concat(_path2, "] to nodes of different interfaces: ").concat(Scrubber.stringify(_node2), " ").concat(Scrubber.stringify(prev)));
        }
        _parent2.children.splice(_index, 1);
        if (selection) {
          for (var [_point2, _key2] of Range.points(selection)) {
            selection[_key2] = Point.transform(_point2, op);
          }
        }
        break;
      }
      case "move_node": {
        var {
          path: _path3,
          newPath
        } = op;
        if (Path.isAncestor(_path3, newPath)) {
          throw new Error("Cannot move a path [".concat(_path3, "] to new path [").concat(newPath, "] because the destination is inside itself."));
        }
        var _node3 = Node$1.get(editor, _path3);
        var _parent22 = Node$1.parent(editor, _path3);
        var _index2 = _path3[_path3.length - 1];
        _parent22.children.splice(_index2, 1);
        var truePath = Path.transform(_path3, op);
        var newParent = Node$1.get(editor, Path.parent(truePath));
        var newIndex = truePath[truePath.length - 1];
        newParent.children.splice(newIndex, 0, _node3);
        if (selection) {
          for (var [_point3, _key3] of Range.points(selection)) {
            selection[_key3] = Point.transform(_point3, op);
          }
        }
        break;
      }
      case "remove_node": {
        var {
          path: _path4
        } = op;
        var _index3 = _path4[_path4.length - 1];
        var _parent3 = Node$1.parent(editor, _path4);
        _parent3.children.splice(_index3, 1);
        if (selection) {
          for (var [_point4, _key4] of Range.points(selection)) {
            var result = Point.transform(_point4, op);
            if (selection != null && result != null) {
              selection[_key4] = result;
            } else {
              var _prev = void 0;
              var next2 = void 0;
              for (var [n2, p2] of Node$1.texts(editor)) {
                if (Path.compare(p2, _path4) === -1) {
                  _prev = [n2, p2];
                } else {
                  next2 = [n2, p2];
                  break;
                }
              }
              var preferNext = false;
              if (_prev && next2) {
                if (Path.equals(next2[1], _path4)) {
                  preferNext = !Path.hasPrevious(next2[1]);
                } else {
                  preferNext = Path.common(_prev[1], _path4).length < Path.common(next2[1], _path4).length;
                }
              }
              if (_prev && !preferNext) {
                _point4.path = _prev[1];
                _point4.offset = _prev[0].text.length;
              } else if (next2) {
                _point4.path = next2[1];
                _point4.offset = 0;
              } else {
                selection = null;
              }
            }
          }
        }
        break;
      }
      case "remove_text": {
        var {
          path: _path5,
          offset: _offset,
          text: _text
        } = op;
        if (_text.length === 0)
          break;
        var _node4 = Node$1.leaf(editor, _path5);
        var _before = _node4.text.slice(0, _offset);
        var _after = _node4.text.slice(_offset + _text.length);
        _node4.text = _before + _after;
        if (selection) {
          for (var [_point5, _key5] of Range.points(selection)) {
            selection[_key5] = Point.transform(_point5, op);
          }
        }
        break;
      }
      case "set_node": {
        var {
          path: _path6,
          properties: properties2,
          newProperties
        } = op;
        if (_path6.length === 0) {
          throw new Error("Cannot set properties on the root node!");
        }
        var _node5 = Node$1.get(editor, _path6);
        for (var _key6 in newProperties) {
          if (_key6 === "children" || _key6 === "text") {
            throw new Error('Cannot set the "'.concat(_key6, '" property of nodes!'));
          }
          var value = newProperties[_key6];
          if (value == null) {
            delete _node5[_key6];
          } else {
            _node5[_key6] = value;
          }
        }
        for (var _key7 in properties2) {
          if (!newProperties.hasOwnProperty(_key7)) {
            delete _node5[_key7];
          }
        }
        break;
      }
      case "set_selection": {
        var {
          newProperties: _newProperties
        } = op;
        if (_newProperties == null) {
          selection = _newProperties;
        } else {
          if (selection == null) {
            if (!Range.isRange(_newProperties)) {
              throw new Error('Cannot apply an incomplete "set_selection" operation properties '.concat(Scrubber.stringify(_newProperties), " when there is no current selection."));
            }
            selection = _objectSpread$e({}, _newProperties);
          }
          for (var _key8 in _newProperties) {
            var _value = _newProperties[_key8];
            if (_value == null) {
              if (_key8 === "anchor" || _key8 === "focus") {
                throw new Error('Cannot remove the "'.concat(_key8, '" selection property'));
              }
              delete selection[_key8];
            } else {
              selection[_key8] = _value;
            }
          }
        }
        break;
      }
      case "split_node": {
        var {
          path: _path7,
          position,
          properties: _properties
        } = op;
        if (_path7.length === 0) {
          throw new Error('Cannot apply a "split_node" operation at path ['.concat(_path7, "] because the root node cannot be split."));
        }
        var _node6 = Node$1.get(editor, _path7);
        var _parent4 = Node$1.parent(editor, _path7);
        var _index4 = _path7[_path7.length - 1];
        var newNode2;
        if (Text$1.isText(_node6)) {
          var _before2 = _node6.text.slice(0, position);
          var _after2 = _node6.text.slice(position);
          _node6.text = _before2;
          newNode2 = _objectSpread$e(_objectSpread$e({}, _properties), {}, {
            text: _after2
          });
        } else {
          var _before3 = _node6.children.slice(0, position);
          var _after3 = _node6.children.slice(position);
          _node6.children = _before3;
          newNode2 = _objectSpread$e(_objectSpread$e({}, _properties), {}, {
            children: _after3
          });
        }
        _parent4.children.splice(_index4 + 1, 0, newNode2);
        if (selection) {
          for (var [_point6, _key9] of Range.points(selection)) {
            selection[_key9] = Point.transform(_point6, op);
          }
        }
        break;
      }
    }
    return selection;
  };
  var GeneralTransforms = {
    transform(editor, op) {
      editor.children = createDraft$1(editor.children);
      var selection = editor.selection && createDraft$1(editor.selection);
      try {
        selection = applyToDraft(editor, selection, op);
      } finally {
        editor.children = finishDraft(editor.children);
        if (selection) {
          editor.selection = isDraft$1(selection) ? finishDraft(selection) : selection;
        } else {
          editor.selection = null;
        }
      }
    }
  };
  var NodeTransforms = {
    insertNodes(editor, nodes2, options) {
      editor.insertNodes(nodes2, options);
    },
    liftNodes(editor, options) {
      editor.liftNodes(options);
    },
    mergeNodes(editor, options) {
      editor.mergeNodes(options);
    },
    moveNodes(editor, options) {
      editor.moveNodes(options);
    },
    removeNodes(editor, options) {
      editor.removeNodes(options);
    },
    setNodes(editor, props, options) {
      editor.setNodes(props, options);
    },
    splitNodes(editor, options) {
      editor.splitNodes(options);
    },
    unsetNodes(editor, props, options) {
      editor.unsetNodes(props, options);
    },
    unwrapNodes(editor, options) {
      editor.unwrapNodes(options);
    },
    wrapNodes(editor, element, options) {
      editor.wrapNodes(element, options);
    }
  };
  var SelectionTransforms = {
    collapse(editor, options) {
      editor.collapse(options);
    },
    deselect(editor) {
      editor.deselect();
    },
    move(editor, options) {
      editor.move(options);
    },
    select(editor, target) {
      editor.select(target);
    },
    setPoint(editor, props, options) {
      editor.setPoint(props, options);
    },
    setSelection(editor, props) {
      editor.setSelection(props);
    }
  };
  var isDeepEqual = (node2, another) => {
    for (var key in node2) {
      var a2 = node2[key];
      var b = another[key];
      if (isPlainObject$5(a2) && isPlainObject$5(b)) {
        if (!isDeepEqual(a2, b))
          return false;
      } else if (Array.isArray(a2) && Array.isArray(b)) {
        if (a2.length !== b.length)
          return false;
        for (var i2 = 0; i2 < a2.length; i2++) {
          if (a2[i2] !== b[i2])
            return false;
        }
      } else if (a2 !== b) {
        return false;
      }
    }
    for (var _key in another) {
      if (node2[_key] === void 0 && another[_key] !== void 0) {
        return false;
      }
    }
    return true;
  };
  function _objectWithoutPropertiesLoose$3(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _objectWithoutProperties$3(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose$3(source2, excluded);
    var key, i2;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
        key = sourceSymbolKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  var _excluded$4$1 = ["anchor", "focus"];
  function ownKeys$d(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$d(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$d(Object(t2), true).forEach(function(r3) {
        _defineProperty$5(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$d(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var Range = {
    edges(range2) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var {
        reverse = false
      } = options;
      var {
        anchor,
        focus: focus2
      } = range2;
      return Range.isBackward(range2) === reverse ? [anchor, focus2] : [focus2, anchor];
    },
    end(range2) {
      var [, end2] = Range.edges(range2);
      return end2;
    },
    equals(range2, another) {
      return Point.equals(range2.anchor, another.anchor) && Point.equals(range2.focus, another.focus);
    },
    surrounds(range2, target) {
      var intersectionRange = Range.intersection(range2, target);
      if (!intersectionRange) {
        return false;
      }
      return Range.equals(intersectionRange, target);
    },
    includes(range2, target) {
      if (Range.isRange(target)) {
        if (Range.includes(range2, target.anchor) || Range.includes(range2, target.focus)) {
          return true;
        }
        var [rs, re] = Range.edges(range2);
        var [ts, te] = Range.edges(target);
        return Point.isBefore(rs, ts) && Point.isAfter(re, te);
      }
      var [start2, end2] = Range.edges(range2);
      var isAfterStart = false;
      var isBeforeEnd = false;
      if (Point.isPoint(target)) {
        isAfterStart = Point.compare(target, start2) >= 0;
        isBeforeEnd = Point.compare(target, end2) <= 0;
      } else {
        isAfterStart = Path.compare(target, start2.path) >= 0;
        isBeforeEnd = Path.compare(target, end2.path) <= 0;
      }
      return isAfterStart && isBeforeEnd;
    },
    intersection(range2, another) {
      var rest = _objectWithoutProperties$3(range2, _excluded$4$1);
      var [s1, e1] = Range.edges(range2);
      var [s2, e22] = Range.edges(another);
      var start2 = Point.isBefore(s1, s2) ? s2 : s1;
      var end2 = Point.isBefore(e1, e22) ? e1 : e22;
      if (Point.isBefore(end2, start2)) {
        return null;
      } else {
        return _objectSpread$d({
          anchor: start2,
          focus: end2
        }, rest);
      }
    },
    isBackward(range2) {
      var {
        anchor,
        focus: focus2
      } = range2;
      return Point.isAfter(anchor, focus2);
    },
    isCollapsed(range2) {
      var {
        anchor,
        focus: focus2
      } = range2;
      return Point.equals(anchor, focus2);
    },
    isExpanded(range2) {
      return !Range.isCollapsed(range2);
    },
    isForward(range2) {
      return !Range.isBackward(range2);
    },
    isRange(value) {
      return isPlainObject$5(value) && Point.isPoint(value.anchor) && Point.isPoint(value.focus);
    },
    *points(range2) {
      yield [range2.anchor, "anchor"];
      yield [range2.focus, "focus"];
    },
    start(range2) {
      var [start2] = Range.edges(range2);
      return start2;
    },
    transform(range2, op) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      return produce(range2, (r2) => {
        if (r2 === null) {
          return null;
        }
        var {
          affinity = "inward"
        } = options;
        var affinityAnchor;
        var affinityFocus;
        if (affinity === "inward") {
          var isCollapsed = Range.isCollapsed(r2);
          if (Range.isForward(r2)) {
            affinityAnchor = "forward";
            affinityFocus = isCollapsed ? affinityAnchor : "backward";
          } else {
            affinityAnchor = "backward";
            affinityFocus = isCollapsed ? affinityAnchor : "forward";
          }
        } else if (affinity === "outward") {
          if (Range.isForward(r2)) {
            affinityAnchor = "backward";
            affinityFocus = "forward";
          } else {
            affinityAnchor = "forward";
            affinityFocus = "backward";
          }
        } else {
          affinityAnchor = affinity;
          affinityFocus = affinity;
        }
        var anchor = Point.transform(r2.anchor, op, {
          affinity: affinityAnchor
        });
        var focus2 = Point.transform(r2.focus, op, {
          affinity: affinityFocus
        });
        if (!anchor || !focus2) {
          return null;
        }
        r2.anchor = anchor;
        r2.focus = focus2;
      });
    }
  };
  var isElement$1 = (value) => {
    return isPlainObject$5(value) && Node$1.isNodeList(value.children) && !Editor$2.isEditor(value);
  };
  var Element$2 = {
    isAncestor(value) {
      return isPlainObject$5(value) && Node$1.isNodeList(value.children);
    },
    isElement: isElement$1,
    isElementList(value) {
      return Array.isArray(value) && value.every((val) => Element$2.isElement(val));
    },
    isElementProps(props) {
      return props.children !== void 0;
    },
    isElementType: function isElementType(value, elementVal) {
      var elementKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "type";
      return isElement$1(value) && value[elementKey] === elementVal;
    },
    matches(element, props) {
      for (var key in props) {
        if (key === "children") {
          continue;
        }
        if (element[key] !== props[key]) {
          return false;
        }
      }
      return true;
    }
  };
  var _excluded$3$1 = ["children"], _excluded2$3 = ["text"];
  var IS_NODE_LIST_CACHE = /* @__PURE__ */ new WeakMap();
  var Node$1 = {
    ancestor(root2, path2) {
      var node2 = Node$1.get(root2, path2);
      if (Text$1.isText(node2)) {
        throw new Error("Cannot get the ancestor node at path [".concat(path2, "] because it refers to a text node instead: ").concat(Scrubber.stringify(node2)));
      }
      return node2;
    },
    ancestors(root2, path2) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      return function* () {
        for (var p2 of Path.ancestors(path2, options)) {
          var n2 = Node$1.ancestor(root2, p2);
          var entry = [n2, p2];
          yield entry;
        }
      }();
    },
    child(root2, index) {
      if (Text$1.isText(root2)) {
        throw new Error("Cannot get the child of a text node: ".concat(Scrubber.stringify(root2)));
      }
      var c2 = root2.children[index];
      if (c2 == null) {
        throw new Error("Cannot get child at index `".concat(index, "` in node: ").concat(Scrubber.stringify(root2)));
      }
      return c2;
    },
    children(root2, path2) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      return function* () {
        var {
          reverse = false
        } = options;
        var ancestor = Node$1.ancestor(root2, path2);
        var {
          children
        } = ancestor;
        var index = reverse ? children.length - 1 : 0;
        while (reverse ? index >= 0 : index < children.length) {
          var child = Node$1.child(ancestor, index);
          var childPath = path2.concat(index);
          yield [child, childPath];
          index = reverse ? index - 1 : index + 1;
        }
      }();
    },
    common(root2, path2, another) {
      var p2 = Path.common(path2, another);
      var n2 = Node$1.get(root2, p2);
      return [n2, p2];
    },
    descendant(root2, path2) {
      var node2 = Node$1.get(root2, path2);
      if (Editor$2.isEditor(node2)) {
        throw new Error("Cannot get the descendant node at path [".concat(path2, "] because it refers to the root editor node instead: ").concat(Scrubber.stringify(node2)));
      }
      return node2;
    },
    descendants(root2) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      return function* () {
        for (var [node2, path2] of Node$1.nodes(root2, options)) {
          if (path2.length !== 0) {
            yield [node2, path2];
          }
        }
      }();
    },
    elements(root2) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      return function* () {
        for (var [node2, path2] of Node$1.nodes(root2, options)) {
          if (Element$2.isElement(node2)) {
            yield [node2, path2];
          }
        }
      }();
    },
    extractProps(node2) {
      if (Element$2.isAncestor(node2)) {
        var properties2 = _objectWithoutProperties$3(node2, _excluded$3$1);
        return properties2;
      } else {
        var properties2 = _objectWithoutProperties$3(node2, _excluded2$3);
        return properties2;
      }
    },
    first(root2, path2) {
      var p2 = path2.slice();
      var n2 = Node$1.get(root2, p2);
      while (n2) {
        if (Text$1.isText(n2) || n2.children.length === 0) {
          break;
        } else {
          n2 = n2.children[0];
          p2.push(0);
        }
      }
      return [n2, p2];
    },
    fragment(root2, range2) {
      if (Text$1.isText(root2)) {
        throw new Error("Cannot get a fragment starting from a root text node: ".concat(Scrubber.stringify(root2)));
      }
      var newRoot = produce({
        children: root2.children
      }, (r2) => {
        var [start2, end2] = Range.edges(range2);
        var nodeEntries = Node$1.nodes(r2, {
          reverse: true,
          pass: (_ref) => {
            var [, path3] = _ref;
            return !Range.includes(range2, path3);
          }
        });
        for (var [, path2] of nodeEntries) {
          if (!Range.includes(range2, path2)) {
            var parent2 = Node$1.parent(r2, path2);
            var index = path2[path2.length - 1];
            parent2.children.splice(index, 1);
          }
          if (Path.equals(path2, end2.path)) {
            var leaf2 = Node$1.leaf(r2, path2);
            leaf2.text = leaf2.text.slice(0, end2.offset);
          }
          if (Path.equals(path2, start2.path)) {
            var _leaf = Node$1.leaf(r2, path2);
            _leaf.text = _leaf.text.slice(start2.offset);
          }
        }
        if (Editor$2.isEditor(r2)) {
          r2.selection = null;
        }
      });
      return newRoot.children;
    },
    get(root2, path2) {
      var node2 = Node$1.getIf(root2, path2);
      if (node2 === void 0) {
        throw new Error("Cannot find a descendant at path [".concat(path2, "] in node: ").concat(Scrubber.stringify(root2)));
      }
      return node2;
    },
    getIf(root2, path2) {
      var node2 = root2;
      for (var i2 = 0; i2 < path2.length; i2++) {
        var p2 = path2[i2];
        if (Text$1.isText(node2) || !node2.children[p2]) {
          return;
        }
        node2 = node2.children[p2];
      }
      return node2;
    },
    has(root2, path2) {
      var node2 = root2;
      for (var i2 = 0; i2 < path2.length; i2++) {
        var p2 = path2[i2];
        if (Text$1.isText(node2) || !node2.children[p2]) {
          return false;
        }
        node2 = node2.children[p2];
      }
      return true;
    },
    isNode(value) {
      return Text$1.isText(value) || Element$2.isElement(value) || Editor$2.isEditor(value);
    },
    isNodeList(value) {
      if (!Array.isArray(value)) {
        return false;
      }
      var cachedResult = IS_NODE_LIST_CACHE.get(value);
      if (cachedResult !== void 0) {
        return cachedResult;
      }
      var isNodeList = value.every((val) => Node$1.isNode(val));
      IS_NODE_LIST_CACHE.set(value, isNodeList);
      return isNodeList;
    },
    last(root2, path2) {
      var p2 = path2.slice();
      var n2 = Node$1.get(root2, p2);
      while (n2) {
        if (Text$1.isText(n2) || n2.children.length === 0) {
          break;
        } else {
          var i2 = n2.children.length - 1;
          n2 = n2.children[i2];
          p2.push(i2);
        }
      }
      return [n2, p2];
    },
    leaf(root2, path2) {
      var node2 = Node$1.get(root2, path2);
      if (!Text$1.isText(node2)) {
        throw new Error("Cannot get the leaf node at path [".concat(path2, "] because it refers to a non-leaf node: ").concat(Scrubber.stringify(node2)));
      }
      return node2;
    },
    levels(root2, path2) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      return function* () {
        for (var p2 of Path.levels(path2, options)) {
          var n2 = Node$1.get(root2, p2);
          yield [n2, p2];
        }
      }();
    },
    matches(node2, props) {
      return Element$2.isElement(node2) && Element$2.isElementProps(props) && Element$2.matches(node2, props) || Text$1.isText(node2) && Text$1.isTextProps(props) && Text$1.matches(node2, props);
    },
    nodes(root2) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      return function* () {
        var {
          pass,
          reverse = false
        } = options;
        var {
          from = [],
          to: to2
        } = options;
        var visited = /* @__PURE__ */ new Set();
        var p2 = [];
        var n2 = root2;
        while (true) {
          if (to2 && (reverse ? Path.isBefore(p2, to2) : Path.isAfter(p2, to2))) {
            break;
          }
          if (!visited.has(n2)) {
            yield [n2, p2];
          }
          if (!visited.has(n2) && !Text$1.isText(n2) && n2.children.length !== 0 && (pass == null || pass([n2, p2]) === false)) {
            visited.add(n2);
            var nextIndex = reverse ? n2.children.length - 1 : 0;
            if (Path.isAncestor(p2, from)) {
              nextIndex = from[p2.length];
            }
            p2 = p2.concat(nextIndex);
            n2 = Node$1.get(root2, p2);
            continue;
          }
          if (p2.length === 0) {
            break;
          }
          if (!reverse) {
            var newPath = Path.next(p2);
            if (Node$1.has(root2, newPath)) {
              p2 = newPath;
              n2 = Node$1.get(root2, p2);
              continue;
            }
          }
          if (reverse && p2[p2.length - 1] !== 0) {
            var _newPath = Path.previous(p2);
            p2 = _newPath;
            n2 = Node$1.get(root2, p2);
            continue;
          }
          p2 = Path.parent(p2);
          n2 = Node$1.get(root2, p2);
          visited.add(n2);
        }
      }();
    },
    parent(root2, path2) {
      var parentPath = Path.parent(path2);
      var p2 = Node$1.get(root2, parentPath);
      if (Text$1.isText(p2)) {
        throw new Error("Cannot get the parent of path [".concat(path2, "] because it does not exist in the root."));
      }
      return p2;
    },
    string(node2) {
      if (Text$1.isText(node2)) {
        return node2.text;
      } else {
        return node2.children.map(Node$1.string).join("");
      }
    },
    texts(root2) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      return function* () {
        for (var [node2, path2] of Node$1.nodes(root2, options)) {
          if (Text$1.isText(node2)) {
            yield [node2, path2];
          }
        }
      }();
    }
  };
  function ownKeys$c(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$c(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$c(Object(t2), true).forEach(function(r3) {
        _defineProperty$5(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$c(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var Operation$1 = {
    isNodeOperation(value) {
      return Operation$1.isOperation(value) && value.type.endsWith("_node");
    },
    isOperation(value) {
      if (!isPlainObject$5(value)) {
        return false;
      }
      switch (value.type) {
        case "insert_node":
          return Path.isPath(value.path) && Node$1.isNode(value.node);
        case "insert_text":
          return typeof value.offset === "number" && typeof value.text === "string" && Path.isPath(value.path);
        case "merge_node":
          return typeof value.position === "number" && Path.isPath(value.path) && isPlainObject$5(value.properties);
        case "move_node":
          return Path.isPath(value.path) && Path.isPath(value.newPath);
        case "remove_node":
          return Path.isPath(value.path) && Node$1.isNode(value.node);
        case "remove_text":
          return typeof value.offset === "number" && typeof value.text === "string" && Path.isPath(value.path);
        case "set_node":
          return Path.isPath(value.path) && isPlainObject$5(value.properties) && isPlainObject$5(value.newProperties);
        case "set_selection":
          return value.properties === null && Range.isRange(value.newProperties) || value.newProperties === null && Range.isRange(value.properties) || isPlainObject$5(value.properties) && isPlainObject$5(value.newProperties);
        case "split_node":
          return Path.isPath(value.path) && typeof value.position === "number" && isPlainObject$5(value.properties);
        default:
          return false;
      }
    },
    isOperationList(value) {
      return Array.isArray(value) && value.every((val) => Operation$1.isOperation(val));
    },
    isSelectionOperation(value) {
      return Operation$1.isOperation(value) && value.type.endsWith("_selection");
    },
    isTextOperation(value) {
      return Operation$1.isOperation(value) && value.type.endsWith("_text");
    },
    inverse(op) {
      switch (op.type) {
        case "insert_node": {
          return _objectSpread$c(_objectSpread$c({}, op), {}, {
            type: "remove_node"
          });
        }
        case "insert_text": {
          return _objectSpread$c(_objectSpread$c({}, op), {}, {
            type: "remove_text"
          });
        }
        case "merge_node": {
          return _objectSpread$c(_objectSpread$c({}, op), {}, {
            type: "split_node",
            path: Path.previous(op.path)
          });
        }
        case "move_node": {
          var {
            newPath,
            path: path2
          } = op;
          if (Path.equals(newPath, path2)) {
            return op;
          }
          if (Path.isSibling(path2, newPath)) {
            return _objectSpread$c(_objectSpread$c({}, op), {}, {
              path: newPath,
              newPath: path2
            });
          }
          var inversePath = Path.transform(path2, op);
          var inverseNewPath = Path.transform(Path.next(path2), op);
          return _objectSpread$c(_objectSpread$c({}, op), {}, {
            path: inversePath,
            newPath: inverseNewPath
          });
        }
        case "remove_node": {
          return _objectSpread$c(_objectSpread$c({}, op), {}, {
            type: "insert_node"
          });
        }
        case "remove_text": {
          return _objectSpread$c(_objectSpread$c({}, op), {}, {
            type: "insert_text"
          });
        }
        case "set_node": {
          var {
            properties: properties2,
            newProperties
          } = op;
          return _objectSpread$c(_objectSpread$c({}, op), {}, {
            properties: newProperties,
            newProperties: properties2
          });
        }
        case "set_selection": {
          var {
            properties: _properties,
            newProperties: _newProperties
          } = op;
          if (_properties == null) {
            return _objectSpread$c(_objectSpread$c({}, op), {}, {
              properties: _newProperties,
              newProperties: null
            });
          } else if (_newProperties == null) {
            return _objectSpread$c(_objectSpread$c({}, op), {}, {
              properties: null,
              newProperties: _properties
            });
          } else {
            return _objectSpread$c(_objectSpread$c({}, op), {}, {
              properties: _newProperties,
              newProperties: _properties
            });
          }
        }
        case "split_node": {
          return _objectSpread$c(_objectSpread$c({}, op), {}, {
            type: "merge_node",
            path: Path.next(op.path)
          });
        }
      }
    }
  };
  var IS_EDITOR_CACHE = /* @__PURE__ */ new WeakMap();
  var isEditor = (value) => {
    var cachedIsEditor = IS_EDITOR_CACHE.get(value);
    if (cachedIsEditor !== void 0) {
      return cachedIsEditor;
    }
    if (!isPlainObject$5(value)) {
      return false;
    }
    var isEditor2 = typeof value.addMark === "function" && typeof value.apply === "function" && typeof value.deleteFragment === "function" && typeof value.insertBreak === "function" && typeof value.insertSoftBreak === "function" && typeof value.insertFragment === "function" && typeof value.insertNode === "function" && typeof value.insertText === "function" && typeof value.isElementReadOnly === "function" && typeof value.isInline === "function" && typeof value.isSelectable === "function" && typeof value.isVoid === "function" && typeof value.normalizeNode === "function" && typeof value.onChange === "function" && typeof value.removeMark === "function" && typeof value.getDirtyPaths === "function" && (value.marks === null || isPlainObject$5(value.marks)) && (value.selection === null || Range.isRange(value.selection)) && Node$1.isNodeList(value.children) && Operation$1.isOperationList(value.operations);
    IS_EDITOR_CACHE.set(value, isEditor2);
    return isEditor2;
  };
  var Editor$2 = {
    above(editor, options) {
      return editor.above(options);
    },
    addMark(editor, key, value) {
      editor.addMark(key, value);
    },
    after(editor, at2, options) {
      return editor.after(at2, options);
    },
    before(editor, at2, options) {
      return editor.before(at2, options);
    },
    deleteBackward(editor) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var {
        unit = "character"
      } = options;
      editor.deleteBackward(unit);
    },
    deleteForward(editor) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var {
        unit = "character"
      } = options;
      editor.deleteForward(unit);
    },
    deleteFragment(editor, options) {
      editor.deleteFragment(options);
    },
    edges(editor, at2) {
      return editor.edges(at2);
    },
    elementReadOnly(editor) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      return editor.elementReadOnly(options);
    },
    end(editor, at2) {
      return editor.end(at2);
    },
    first(editor, at2) {
      return editor.first(at2);
    },
    fragment(editor, at2) {
      return editor.fragment(at2);
    },
    hasBlocks(editor, element) {
      return editor.hasBlocks(element);
    },
    hasInlines(editor, element) {
      return editor.hasInlines(element);
    },
    hasPath(editor, path2) {
      return editor.hasPath(path2);
    },
    hasTexts(editor, element) {
      return editor.hasTexts(element);
    },
    insertBreak(editor) {
      editor.insertBreak();
    },
    insertFragment(editor, fragment2, options) {
      editor.insertFragment(fragment2, options);
    },
    insertNode(editor, node2) {
      editor.insertNode(node2);
    },
    insertSoftBreak(editor) {
      editor.insertSoftBreak();
    },
    insertText(editor, text) {
      editor.insertText(text);
    },
    isBlock(editor, value) {
      return editor.isBlock(value);
    },
    isEdge(editor, point2, at2) {
      return editor.isEdge(point2, at2);
    },
    isEditor(value) {
      return isEditor(value);
    },
    isElementReadOnly(editor, element) {
      return editor.isElementReadOnly(element);
    },
    isEmpty(editor, element) {
      return editor.isEmpty(element);
    },
    isEnd(editor, point2, at2) {
      return editor.isEnd(point2, at2);
    },
    isInline(editor, value) {
      return editor.isInline(value);
    },
    isNormalizing(editor) {
      return editor.isNormalizing();
    },
    isSelectable(editor, value) {
      return editor.isSelectable(value);
    },
    isStart(editor, point2, at2) {
      return editor.isStart(point2, at2);
    },
    isVoid(editor, value) {
      return editor.isVoid(value);
    },
    last(editor, at2) {
      return editor.last(at2);
    },
    leaf(editor, at2, options) {
      return editor.leaf(at2, options);
    },
    levels(editor, options) {
      return editor.levels(options);
    },
    marks(editor) {
      return editor.getMarks();
    },
    next(editor, options) {
      return editor.next(options);
    },
    node(editor, at2, options) {
      return editor.node(at2, options);
    },
    nodes(editor, options) {
      return editor.nodes(options);
    },
    normalize(editor, options) {
      editor.normalize(options);
    },
    parent(editor, at2, options) {
      return editor.parent(at2, options);
    },
    path(editor, at2, options) {
      return editor.path(at2, options);
    },
    pathRef(editor, path2, options) {
      return editor.pathRef(path2, options);
    },
    pathRefs(editor) {
      return editor.pathRefs();
    },
    point(editor, at2, options) {
      return editor.point(at2, options);
    },
    pointRef(editor, point2, options) {
      return editor.pointRef(point2, options);
    },
    pointRefs(editor) {
      return editor.pointRefs();
    },
    positions(editor, options) {
      return editor.positions(options);
    },
    previous(editor, options) {
      return editor.previous(options);
    },
    range(editor, at2, to2) {
      return editor.range(at2, to2);
    },
    rangeRef(editor, range2, options) {
      return editor.rangeRef(range2, options);
    },
    rangeRefs(editor) {
      return editor.rangeRefs();
    },
    removeMark(editor, key) {
      editor.removeMark(key);
    },
    setNormalizing(editor, isNormalizing2) {
      editor.setNormalizing(isNormalizing2);
    },
    start(editor, at2) {
      return editor.start(at2);
    },
    string(editor, at2, options) {
      return editor.string(at2, options);
    },
    unhangRange(editor, range2, options) {
      return editor.unhangRange(range2, options);
    },
    void(editor, options) {
      return editor.void(options);
    },
    withoutNormalizing(editor, fn) {
      editor.withoutNormalizing(fn);
    },
    shouldMergeNodesRemovePrevNode: (editor, prevNode, curNode) => {
      return editor.shouldMergeNodesRemovePrevNode(prevNode, curNode);
    }
  };
  var Location = {
    isLocation(value) {
      return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value);
    }
  };
  var Span = {
    isSpan(value) {
      return Array.isArray(value) && value.length === 2 && value.every(Path.isPath);
    }
  };
  function ownKeys$b(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$b(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$b(Object(t2), true).forEach(function(r3) {
        _defineProperty$5(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$b(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var Point = {
    compare(point2, another) {
      var result = Path.compare(point2.path, another.path);
      if (result === 0) {
        if (point2.offset < another.offset)
          return -1;
        if (point2.offset > another.offset)
          return 1;
        return 0;
      }
      return result;
    },
    isAfter(point2, another) {
      return Point.compare(point2, another) === 1;
    },
    isBefore(point2, another) {
      return Point.compare(point2, another) === -1;
    },
    equals(point2, another) {
      return point2.offset === another.offset && Path.equals(point2.path, another.path);
    },
    isPoint(value) {
      return isPlainObject$5(value) && typeof value.offset === "number" && Path.isPath(value.path);
    },
    transform(point2, op) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      return produce(point2, (p2) => {
        if (p2 === null) {
          return null;
        }
        var {
          affinity = "forward"
        } = options;
        var {
          path: path2,
          offset
        } = p2;
        switch (op.type) {
          case "insert_node":
          case "move_node": {
            p2.path = Path.transform(path2, op, options);
            break;
          }
          case "insert_text": {
            if (Path.equals(op.path, path2) && (op.offset < offset || op.offset === offset && affinity === "forward")) {
              p2.offset += op.text.length;
            }
            break;
          }
          case "merge_node": {
            if (Path.equals(op.path, path2)) {
              p2.offset += op.position;
            }
            p2.path = Path.transform(path2, op, options);
            break;
          }
          case "remove_text": {
            if (Path.equals(op.path, path2) && op.offset <= offset) {
              p2.offset -= Math.min(offset - op.offset, op.text.length);
            }
            break;
          }
          case "remove_node": {
            if (Path.equals(op.path, path2) || Path.isAncestor(op.path, path2)) {
              return null;
            }
            p2.path = Path.transform(path2, op, options);
            break;
          }
          case "split_node": {
            if (Path.equals(op.path, path2)) {
              if (op.position === offset && affinity == null) {
                return null;
              } else if (op.position < offset || op.position === offset && affinity === "forward") {
                p2.offset -= op.position;
                p2.path = Path.transform(path2, op, _objectSpread$b(_objectSpread$b({}, options), {}, {
                  affinity: "forward"
                }));
              }
            } else {
              p2.path = Path.transform(path2, op, options);
            }
            break;
          }
        }
      });
    }
  };
  var _scrubber = void 0;
  var Scrubber = {
    setScrubber(scrubber) {
      _scrubber = scrubber;
    },
    stringify(value) {
      return JSON.stringify(value, _scrubber);
    }
  };
  var _excluded$2$1 = ["text"], _excluded2$2 = ["anchor", "focus", "merge"];
  function ownKeys$a(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$a(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$a(Object(t2), true).forEach(function(r3) {
        _defineProperty$5(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$a(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var Text$1 = {
    equals(text, another) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var {
        loose = false
      } = options;
      function omitText(obj) {
        var rest = _objectWithoutProperties$3(obj, _excluded$2$1);
        return rest;
      }
      return isDeepEqual(loose ? omitText(text) : text, loose ? omitText(another) : another);
    },
    isText(value) {
      return isPlainObject$5(value) && typeof value.text === "string";
    },
    isTextList(value) {
      return Array.isArray(value) && value.every((val) => Text$1.isText(val));
    },
    isTextProps(props) {
      return props.text !== void 0;
    },
    matches(text, props) {
      for (var key in props) {
        if (key === "text") {
          continue;
        }
        if (!text.hasOwnProperty(key) || text[key] !== props[key]) {
          return false;
        }
      }
      return true;
    },
    decorations(node2, decorations) {
      var leaves = [{
        leaf: _objectSpread$a({}, node2)
      }];
      for (var dec of decorations) {
        var {
          anchor,
          focus: focus2,
          merge: mergeDecoration
        } = dec, rest = _objectWithoutProperties$3(dec, _excluded2$2);
        var [start2, end2] = Range.edges(dec);
        var next2 = [];
        var leafEnd = 0;
        var decorationStart = start2.offset;
        var decorationEnd = end2.offset;
        var merge2 = mergeDecoration !== null && mergeDecoration !== void 0 ? mergeDecoration : Object.assign;
        for (var {
          leaf: leaf2
        } of leaves) {
          var {
            length
          } = leaf2.text;
          var leafStart = leafEnd;
          leafEnd += length;
          if (decorationStart <= leafStart && leafEnd <= decorationEnd) {
            merge2(leaf2, rest);
            next2.push({
              leaf: leaf2
            });
            continue;
          }
          if (decorationStart !== decorationEnd && (decorationStart === leafEnd || decorationEnd === leafStart) || decorationStart > leafEnd || decorationEnd < leafStart || decorationEnd === leafStart && leafStart !== 0) {
            next2.push({
              leaf: leaf2
            });
            continue;
          }
          var middle = leaf2;
          var before2 = void 0;
          var after2 = void 0;
          if (decorationEnd < leafEnd) {
            var off2 = decorationEnd - leafStart;
            after2 = {
              leaf: _objectSpread$a(_objectSpread$a({}, middle), {}, {
                text: middle.text.slice(off2)
              })
            };
            middle = _objectSpread$a(_objectSpread$a({}, middle), {}, {
              text: middle.text.slice(0, off2)
            });
          }
          if (decorationStart > leafStart) {
            var _off = decorationStart - leafStart;
            before2 = {
              leaf: _objectSpread$a(_objectSpread$a({}, middle), {}, {
                text: middle.text.slice(0, _off)
              })
            };
            middle = _objectSpread$a(_objectSpread$a({}, middle), {}, {
              text: middle.text.slice(_off)
            });
          }
          merge2(middle, rest);
          if (before2) {
            next2.push(before2);
          }
          next2.push({
            leaf: middle
          });
          if (after2) {
            next2.push(after2);
          }
        }
        leaves = next2;
      }
      if (leaves.length > 1) {
        var currentOffset = 0;
        for (var [index, item] of leaves.entries()) {
          var _start = currentOffset;
          var _end = _start + item.leaf.text.length;
          var position = {
            start: _start,
            end: _end
          };
          if (index === 0)
            position.isFirst = true;
          if (index === leaves.length - 1)
            position.isLast = true;
          item.position = position;
          currentOffset = _end;
        }
      }
      return leaves;
    }
  };
  var getDefaultInsertLocation = (editor) => {
    if (editor.selection) {
      return editor.selection;
    } else if (editor.children.length > 0) {
      return Editor$2.end(editor, []);
    } else {
      return [0];
    }
  };
  var matchPath = (editor, path2) => {
    var [node2] = Editor$2.node(editor, path2);
    return (n2) => n2 === node2;
  };
  var getCharacterDistance = function getCharacterDistance2(str) {
    var isRTL = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var isLTR = !isRTL;
    var codepoints = isRTL ? codepointsIteratorRTL(str) : str;
    var left = CodepointType.None;
    var right = CodepointType.None;
    var distance = 0;
    var gb11 = null;
    var gb12Or13 = null;
    for (var char of codepoints) {
      var code = char.codePointAt(0);
      if (!code)
        break;
      var type = getCodepointType(char, code);
      [left, right] = isLTR ? [right, type] : [type, left];
      if (intersects(left, CodepointType.ZWJ) && intersects(right, CodepointType.ExtPict)) {
        if (isLTR) {
          gb11 = endsWithEmojiZWJ(str.substring(0, distance));
        } else {
          gb11 = endsWithEmojiZWJ(str.substring(0, str.length - distance));
        }
        if (!gb11)
          break;
      }
      if (intersects(left, CodepointType.RI) && intersects(right, CodepointType.RI)) {
        if (gb12Or13 !== null) {
          gb12Or13 = !gb12Or13;
        } else {
          if (isLTR) {
            gb12Or13 = true;
          } else {
            gb12Or13 = endsWithOddNumberOfRIs(str.substring(0, str.length - distance));
          }
        }
        if (!gb12Or13)
          break;
      }
      if (left !== CodepointType.None && right !== CodepointType.None && isBoundaryPair(left, right)) {
        break;
      }
      distance += char.length;
    }
    return distance || 1;
  };
  var SPACE = /\s/;
  var PUNCTUATION = /[\u002B\u0021-\u0023\u0025-\u002A\u002C-\u002F\u003A\u003B\u003F\u0040\u005B-\u005D\u005F\u007B\u007D\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E3B\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;
  var CHAMELEON = /['\u2018\u2019]/;
  var getWordDistance = function getWordDistance2(text) {
    var isRTL = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var dist = 0;
    var started = false;
    while (text.length > 0) {
      var charDist = getCharacterDistance(text, isRTL);
      var [char, remaining] = splitByCharacterDistance(text, charDist, isRTL);
      if (isWordCharacter(char, remaining, isRTL)) {
        started = true;
        dist += charDist;
      } else if (!started) {
        dist += charDist;
      } else {
        break;
      }
      text = remaining;
    }
    return dist;
  };
  var splitByCharacterDistance = (str, dist, isRTL) => {
    if (isRTL) {
      var at2 = str.length - dist;
      return [str.slice(at2, str.length), str.slice(0, at2)];
    }
    return [str.slice(0, dist), str.slice(dist)];
  };
  var isWordCharacter = function isWordCharacter2(char, remaining) {
    var isRTL = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    if (SPACE.test(char)) {
      return false;
    }
    if (CHAMELEON.test(char)) {
      var charDist = getCharacterDistance(remaining, isRTL);
      var [nextChar, nextRemaining] = splitByCharacterDistance(remaining, charDist, isRTL);
      if (isWordCharacter2(nextChar, nextRemaining, isRTL)) {
        return true;
      }
    }
    if (PUNCTUATION.test(char)) {
      return false;
    }
    return true;
  };
  var codepointsIteratorRTL = function* codepointsIteratorRTL2(str) {
    var end2 = str.length - 1;
    for (var i2 = 0; i2 < str.length; i2++) {
      var char1 = str.charAt(end2 - i2);
      if (isLowSurrogate(char1.charCodeAt(0))) {
        var char2 = str.charAt(end2 - i2 - 1);
        if (isHighSurrogate(char2.charCodeAt(0))) {
          yield char2 + char1;
          i2++;
          continue;
        }
      }
      yield char1;
    }
  };
  var isHighSurrogate = (charCode) => {
    return charCode >= 55296 && charCode <= 56319;
  };
  var isLowSurrogate = (charCode) => {
    return charCode >= 56320 && charCode <= 57343;
  };
  var CodepointType;
  (function(CodepointType2) {
    CodepointType2[CodepointType2["None"] = 0] = "None";
    CodepointType2[CodepointType2["Extend"] = 1] = "Extend";
    CodepointType2[CodepointType2["ZWJ"] = 2] = "ZWJ";
    CodepointType2[CodepointType2["RI"] = 4] = "RI";
    CodepointType2[CodepointType2["Prepend"] = 8] = "Prepend";
    CodepointType2[CodepointType2["SpacingMark"] = 16] = "SpacingMark";
    CodepointType2[CodepointType2["L"] = 32] = "L";
    CodepointType2[CodepointType2["V"] = 64] = "V";
    CodepointType2[CodepointType2["T"] = 128] = "T";
    CodepointType2[CodepointType2["LV"] = 256] = "LV";
    CodepointType2[CodepointType2["LVT"] = 512] = "LVT";
    CodepointType2[CodepointType2["ExtPict"] = 1024] = "ExtPict";
    CodepointType2[CodepointType2["Any"] = 2048] = "Any";
  })(CodepointType || (CodepointType = {}));
  var reExtend = /^(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDEFD-\uDEFF\uDF46-\uDF50\uDF82-\uDF85]|\uD804[\uDC01\uDC38-\uDC46\uDC70\uDC73\uDC74\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDCC2\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDE41\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4\uDF00\uDF01\uDF36-\uDF3A\uDF40\uDF42]|\uD80D[\uDC40\uDC47-\uDC55]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDC8F\uDD30-\uDD36\uDEAE\uDEEC-\uDEEF]|\uD839[\uDCEC-\uDCEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])$/;
  var rePrepend = /^(?:[\u0600-\u0605\u06DD\u070F\u0890\u0891\u08E2\u0D4E]|\uD804[\uDCBD\uDCCD\uDDC2\uDDC3]|\uD806[\uDD3F\uDD41\uDE3A\uDE84-\uDE89]|\uD807\uDD46)$/;
  var reSpacingMark = /^(?:[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BF\u09C0\u09C7\u09C8\u09CB\u09CC\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0\u0CC1\u0CC3\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0D02\u0D03\u0D3F\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D82\u0D83\u0DD0\u0DD1\u0DD8-\u0DDE\u0DF2\u0DF3\u0E33\u0EB3\u0F3E\u0F3F\u0F7F\u1031\u103B\u103C\u1056\u1057\u1084\u1715\u1734\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A6D-\u1A72\u1B04\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC]|\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB1\uDCB2\uDCB9\uDCBB\uDCBC\uDCBE\uDCC1\uDDB0\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD31-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD66\uDD6D])$/;
  var reL = /^[\u1100-\u115F\uA960-\uA97C]$/;
  var reV = /^[\u1160-\u11A7\uD7B0-\uD7C6]$/;
  var reT = /^[\u11A8-\u11FF\uD7CB-\uD7FB]$/;
  var reLV = /^[\uAC00\uAC1C\uAC38\uAC54\uAC70\uAC8C\uACA8\uACC4\uACE0\uACFC\uAD18\uAD34\uAD50\uAD6C\uAD88\uADA4\uADC0\uADDC\uADF8\uAE14\uAE30\uAE4C\uAE68\uAE84\uAEA0\uAEBC\uAED8\uAEF4\uAF10\uAF2C\uAF48\uAF64\uAF80\uAF9C\uAFB8\uAFD4\uAFF0\uB00C\uB028\uB044\uB060\uB07C\uB098\uB0B4\uB0D0\uB0EC\uB108\uB124\uB140\uB15C\uB178\uB194\uB1B0\uB1CC\uB1E8\uB204\uB220\uB23C\uB258\uB274\uB290\uB2AC\uB2C8\uB2E4\uB300\uB31C\uB338\uB354\uB370\uB38C\uB3A8\uB3C4\uB3E0\uB3FC\uB418\uB434\uB450\uB46C\uB488\uB4A4\uB4C0\uB4DC\uB4F8\uB514\uB530\uB54C\uB568\uB584\uB5A0\uB5BC\uB5D8\uB5F4\uB610\uB62C\uB648\uB664\uB680\uB69C\uB6B8\uB6D4\uB6F0\uB70C\uB728\uB744\uB760\uB77C\uB798\uB7B4\uB7D0\uB7EC\uB808\uB824\uB840\uB85C\uB878\uB894\uB8B0\uB8CC\uB8E8\uB904\uB920\uB93C\uB958\uB974\uB990\uB9AC\uB9C8\uB9E4\uBA00\uBA1C\uBA38\uBA54\uBA70\uBA8C\uBAA8\uBAC4\uBAE0\uBAFC\uBB18\uBB34\uBB50\uBB6C\uBB88\uBBA4\uBBC0\uBBDC\uBBF8\uBC14\uBC30\uBC4C\uBC68\uBC84\uBCA0\uBCBC\uBCD8\uBCF4\uBD10\uBD2C\uBD48\uBD64\uBD80\uBD9C\uBDB8\uBDD4\uBDF0\uBE0C\uBE28\uBE44\uBE60\uBE7C\uBE98\uBEB4\uBED0\uBEEC\uBF08\uBF24\uBF40\uBF5C\uBF78\uBF94\uBFB0\uBFCC\uBFE8\uC004\uC020\uC03C\uC058\uC074\uC090\uC0AC\uC0C8\uC0E4\uC100\uC11C\uC138\uC154\uC170\uC18C\uC1A8\uC1C4\uC1E0\uC1FC\uC218\uC234\uC250\uC26C\uC288\uC2A4\uC2C0\uC2DC\uC2F8\uC314\uC330\uC34C\uC368\uC384\uC3A0\uC3BC\uC3D8\uC3F4\uC410\uC42C\uC448\uC464\uC480\uC49C\uC4B8\uC4D4\uC4F0\uC50C\uC528\uC544\uC560\uC57C\uC598\uC5B4\uC5D0\uC5EC\uC608\uC624\uC640\uC65C\uC678\uC694\uC6B0\uC6CC\uC6E8\uC704\uC720\uC73C\uC758\uC774\uC790\uC7AC\uC7C8\uC7E4\uC800\uC81C\uC838\uC854\uC870\uC88C\uC8A8\uC8C4\uC8E0\uC8FC\uC918\uC934\uC950\uC96C\uC988\uC9A4\uC9C0\uC9DC\uC9F8\uCA14\uCA30\uCA4C\uCA68\uCA84\uCAA0\uCABC\uCAD8\uCAF4\uCB10\uCB2C\uCB48\uCB64\uCB80\uCB9C\uCBB8\uCBD4\uCBF0\uCC0C\uCC28\uCC44\uCC60\uCC7C\uCC98\uCCB4\uCCD0\uCCEC\uCD08\uCD24\uCD40\uCD5C\uCD78\uCD94\uCDB0\uCDCC\uCDE8\uCE04\uCE20\uCE3C\uCE58\uCE74\uCE90\uCEAC\uCEC8\uCEE4\uCF00\uCF1C\uCF38\uCF54\uCF70\uCF8C\uCFA8\uCFC4\uCFE0\uCFFC\uD018\uD034\uD050\uD06C\uD088\uD0A4\uD0C0\uD0DC\uD0F8\uD114\uD130\uD14C\uD168\uD184\uD1A0\uD1BC\uD1D8\uD1F4\uD210\uD22C\uD248\uD264\uD280\uD29C\uD2B8\uD2D4\uD2F0\uD30C\uD328\uD344\uD360\uD37C\uD398\uD3B4\uD3D0\uD3EC\uD408\uD424\uD440\uD45C\uD478\uD494\uD4B0\uD4CC\uD4E8\uD504\uD520\uD53C\uD558\uD574\uD590\uD5AC\uD5C8\uD5E4\uD600\uD61C\uD638\uD654\uD670\uD68C\uD6A8\uD6C4\uD6E0\uD6FC\uD718\uD734\uD750\uD76C\uD788]$/;
  var reLVT = /^[\uAC01-\uAC1B\uAC1D-\uAC37\uAC39-\uAC53\uAC55-\uAC6F\uAC71-\uAC8B\uAC8D-\uACA7\uACA9-\uACC3\uACC5-\uACDF\uACE1-\uACFB\uACFD-\uAD17\uAD19-\uAD33\uAD35-\uAD4F\uAD51-\uAD6B\uAD6D-\uAD87\uAD89-\uADA3\uADA5-\uADBF\uADC1-\uADDB\uADDD-\uADF7\uADF9-\uAE13\uAE15-\uAE2F\uAE31-\uAE4B\uAE4D-\uAE67\uAE69-\uAE83\uAE85-\uAE9F\uAEA1-\uAEBB\uAEBD-\uAED7\uAED9-\uAEF3\uAEF5-\uAF0F\uAF11-\uAF2B\uAF2D-\uAF47\uAF49-\uAF63\uAF65-\uAF7F\uAF81-\uAF9B\uAF9D-\uAFB7\uAFB9-\uAFD3\uAFD5-\uAFEF\uAFF1-\uB00B\uB00D-\uB027\uB029-\uB043\uB045-\uB05F\uB061-\uB07B\uB07D-\uB097\uB099-\uB0B3\uB0B5-\uB0CF\uB0D1-\uB0EB\uB0ED-\uB107\uB109-\uB123\uB125-\uB13F\uB141-\uB15B\uB15D-\uB177\uB179-\uB193\uB195-\uB1AF\uB1B1-\uB1CB\uB1CD-\uB1E7\uB1E9-\uB203\uB205-\uB21F\uB221-\uB23B\uB23D-\uB257\uB259-\uB273\uB275-\uB28F\uB291-\uB2AB\uB2AD-\uB2C7\uB2C9-\uB2E3\uB2E5-\uB2FF\uB301-\uB31B\uB31D-\uB337\uB339-\uB353\uB355-\uB36F\uB371-\uB38B\uB38D-\uB3A7\uB3A9-\uB3C3\uB3C5-\uB3DF\uB3E1-\uB3FB\uB3FD-\uB417\uB419-\uB433\uB435-\uB44F\uB451-\uB46B\uB46D-\uB487\uB489-\uB4A3\uB4A5-\uB4BF\uB4C1-\uB4DB\uB4DD-\uB4F7\uB4F9-\uB513\uB515-\uB52F\uB531-\uB54B\uB54D-\uB567\uB569-\uB583\uB585-\uB59F\uB5A1-\uB5BB\uB5BD-\uB5D7\uB5D9-\uB5F3\uB5F5-\uB60F\uB611-\uB62B\uB62D-\uB647\uB649-\uB663\uB665-\uB67F\uB681-\uB69B\uB69D-\uB6B7\uB6B9-\uB6D3\uB6D5-\uB6EF\uB6F1-\uB70B\uB70D-\uB727\uB729-\uB743\uB745-\uB75F\uB761-\uB77B\uB77D-\uB797\uB799-\uB7B3\uB7B5-\uB7CF\uB7D1-\uB7EB\uB7ED-\uB807\uB809-\uB823\uB825-\uB83F\uB841-\uB85B\uB85D-\uB877\uB879-\uB893\uB895-\uB8AF\uB8B1-\uB8CB\uB8CD-\uB8E7\uB8E9-\uB903\uB905-\uB91F\uB921-\uB93B\uB93D-\uB957\uB959-\uB973\uB975-\uB98F\uB991-\uB9AB\uB9AD-\uB9C7\uB9C9-\uB9E3\uB9E5-\uB9FF\uBA01-\uBA1B\uBA1D-\uBA37\uBA39-\uBA53\uBA55-\uBA6F\uBA71-\uBA8B\uBA8D-\uBAA7\uBAA9-\uBAC3\uBAC5-\uBADF\uBAE1-\uBAFB\uBAFD-\uBB17\uBB19-\uBB33\uBB35-\uBB4F\uBB51-\uBB6B\uBB6D-\uBB87\uBB89-\uBBA3\uBBA5-\uBBBF\uBBC1-\uBBDB\uBBDD-\uBBF7\uBBF9-\uBC13\uBC15-\uBC2F\uBC31-\uBC4B\uBC4D-\uBC67\uBC69-\uBC83\uBC85-\uBC9F\uBCA1-\uBCBB\uBCBD-\uBCD7\uBCD9-\uBCF3\uBCF5-\uBD0F\uBD11-\uBD2B\uBD2D-\uBD47\uBD49-\uBD63\uBD65-\uBD7F\uBD81-\uBD9B\uBD9D-\uBDB7\uBDB9-\uBDD3\uBDD5-\uBDEF\uBDF1-\uBE0B\uBE0D-\uBE27\uBE29-\uBE43\uBE45-\uBE5F\uBE61-\uBE7B\uBE7D-\uBE97\uBE99-\uBEB3\uBEB5-\uBECF\uBED1-\uBEEB\uBEED-\uBF07\uBF09-\uBF23\uBF25-\uBF3F\uBF41-\uBF5B\uBF5D-\uBF77\uBF79-\uBF93\uBF95-\uBFAF\uBFB1-\uBFCB\uBFCD-\uBFE7\uBFE9-\uC003\uC005-\uC01F\uC021-\uC03B\uC03D-\uC057\uC059-\uC073\uC075-\uC08F\uC091-\uC0AB\uC0AD-\uC0C7\uC0C9-\uC0E3\uC0E5-\uC0FF\uC101-\uC11B\uC11D-\uC137\uC139-\uC153\uC155-\uC16F\uC171-\uC18B\uC18D-\uC1A7\uC1A9-\uC1C3\uC1C5-\uC1DF\uC1E1-\uC1FB\uC1FD-\uC217\uC219-\uC233\uC235-\uC24F\uC251-\uC26B\uC26D-\uC287\uC289-\uC2A3\uC2A5-\uC2BF\uC2C1-\uC2DB\uC2DD-\uC2F7\uC2F9-\uC313\uC315-\uC32F\uC331-\uC34B\uC34D-\uC367\uC369-\uC383\uC385-\uC39F\uC3A1-\uC3BB\uC3BD-\uC3D7\uC3D9-\uC3F3\uC3F5-\uC40F\uC411-\uC42B\uC42D-\uC447\uC449-\uC463\uC465-\uC47F\uC481-\uC49B\uC49D-\uC4B7\uC4B9-\uC4D3\uC4D5-\uC4EF\uC4F1-\uC50B\uC50D-\uC527\uC529-\uC543\uC545-\uC55F\uC561-\uC57B\uC57D-\uC597\uC599-\uC5B3\uC5B5-\uC5CF\uC5D1-\uC5EB\uC5ED-\uC607\uC609-\uC623\uC625-\uC63F\uC641-\uC65B\uC65D-\uC677\uC679-\uC693\uC695-\uC6AF\uC6B1-\uC6CB\uC6CD-\uC6E7\uC6E9-\uC703\uC705-\uC71F\uC721-\uC73B\uC73D-\uC757\uC759-\uC773\uC775-\uC78F\uC791-\uC7AB\uC7AD-\uC7C7\uC7C9-\uC7E3\uC7E5-\uC7FF\uC801-\uC81B\uC81D-\uC837\uC839-\uC853\uC855-\uC86F\uC871-\uC88B\uC88D-\uC8A7\uC8A9-\uC8C3\uC8C5-\uC8DF\uC8E1-\uC8FB\uC8FD-\uC917\uC919-\uC933\uC935-\uC94F\uC951-\uC96B\uC96D-\uC987\uC989-\uC9A3\uC9A5-\uC9BF\uC9C1-\uC9DB\uC9DD-\uC9F7\uC9F9-\uCA13\uCA15-\uCA2F\uCA31-\uCA4B\uCA4D-\uCA67\uCA69-\uCA83\uCA85-\uCA9F\uCAA1-\uCABB\uCABD-\uCAD7\uCAD9-\uCAF3\uCAF5-\uCB0F\uCB11-\uCB2B\uCB2D-\uCB47\uCB49-\uCB63\uCB65-\uCB7F\uCB81-\uCB9B\uCB9D-\uCBB7\uCBB9-\uCBD3\uCBD5-\uCBEF\uCBF1-\uCC0B\uCC0D-\uCC27\uCC29-\uCC43\uCC45-\uCC5F\uCC61-\uCC7B\uCC7D-\uCC97\uCC99-\uCCB3\uCCB5-\uCCCF\uCCD1-\uCCEB\uCCED-\uCD07\uCD09-\uCD23\uCD25-\uCD3F\uCD41-\uCD5B\uCD5D-\uCD77\uCD79-\uCD93\uCD95-\uCDAF\uCDB1-\uCDCB\uCDCD-\uCDE7\uCDE9-\uCE03\uCE05-\uCE1F\uCE21-\uCE3B\uCE3D-\uCE57\uCE59-\uCE73\uCE75-\uCE8F\uCE91-\uCEAB\uCEAD-\uCEC7\uCEC9-\uCEE3\uCEE5-\uCEFF\uCF01-\uCF1B\uCF1D-\uCF37\uCF39-\uCF53\uCF55-\uCF6F\uCF71-\uCF8B\uCF8D-\uCFA7\uCFA9-\uCFC3\uCFC5-\uCFDF\uCFE1-\uCFFB\uCFFD-\uD017\uD019-\uD033\uD035-\uD04F\uD051-\uD06B\uD06D-\uD087\uD089-\uD0A3\uD0A5-\uD0BF\uD0C1-\uD0DB\uD0DD-\uD0F7\uD0F9-\uD113\uD115-\uD12F\uD131-\uD14B\uD14D-\uD167\uD169-\uD183\uD185-\uD19F\uD1A1-\uD1BB\uD1BD-\uD1D7\uD1D9-\uD1F3\uD1F5-\uD20F\uD211-\uD22B\uD22D-\uD247\uD249-\uD263\uD265-\uD27F\uD281-\uD29B\uD29D-\uD2B7\uD2B9-\uD2D3\uD2D5-\uD2EF\uD2F1-\uD30B\uD30D-\uD327\uD329-\uD343\uD345-\uD35F\uD361-\uD37B\uD37D-\uD397\uD399-\uD3B3\uD3B5-\uD3CF\uD3D1-\uD3EB\uD3ED-\uD407\uD409-\uD423\uD425-\uD43F\uD441-\uD45B\uD45D-\uD477\uD479-\uD493\uD495-\uD4AF\uD4B1-\uD4CB\uD4CD-\uD4E7\uD4E9-\uD503\uD505-\uD51F\uD521-\uD53B\uD53D-\uD557\uD559-\uD573\uD575-\uD58F\uD591-\uD5AB\uD5AD-\uD5C7\uD5C9-\uD5E3\uD5E5-\uD5FF\uD601-\uD61B\uD61D-\uD637\uD639-\uD653\uD655-\uD66F\uD671-\uD68B\uD68D-\uD6A7\uD6A9-\uD6C3\uD6C5-\uD6DF\uD6E1-\uD6FB\uD6FD-\uD717\uD719-\uD733\uD735-\uD74F\uD751-\uD76B\uD76D-\uD787\uD789-\uD7A3]$/;
  var reExtPict = /^(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])$/;
  var getCodepointType = (char, code) => {
    var type = CodepointType.Any;
    if (char.search(reExtend) !== -1) {
      type |= CodepointType.Extend;
    }
    if (code === 8205) {
      type |= CodepointType.ZWJ;
    }
    if (code >= 127462 && code <= 127487) {
      type |= CodepointType.RI;
    }
    if (char.search(rePrepend) !== -1) {
      type |= CodepointType.Prepend;
    }
    if (char.search(reSpacingMark) !== -1) {
      type |= CodepointType.SpacingMark;
    }
    if (char.search(reL) !== -1) {
      type |= CodepointType.L;
    }
    if (char.search(reV) !== -1) {
      type |= CodepointType.V;
    }
    if (char.search(reT) !== -1) {
      type |= CodepointType.T;
    }
    if (char.search(reLV) !== -1) {
      type |= CodepointType.LV;
    }
    if (char.search(reLVT) !== -1) {
      type |= CodepointType.LVT;
    }
    if (char.search(reExtPict) !== -1) {
      type |= CodepointType.ExtPict;
    }
    return type;
  };
  function intersects(x, y) {
    return (x & y) !== 0;
  }
  var NonBoundaryPairs = [
    // GB6
    [CodepointType.L, CodepointType.L | CodepointType.V | CodepointType.LV | CodepointType.LVT],
    // GB7
    [CodepointType.LV | CodepointType.V, CodepointType.V | CodepointType.T],
    // GB8
    [CodepointType.LVT | CodepointType.T, CodepointType.T],
    // GB9
    [CodepointType.Any, CodepointType.Extend | CodepointType.ZWJ],
    // GB9a
    [CodepointType.Any, CodepointType.SpacingMark],
    // GB9b
    [CodepointType.Prepend, CodepointType.Any],
    // GB11
    [CodepointType.ZWJ, CodepointType.ExtPict],
    // GB12 and GB13
    [CodepointType.RI, CodepointType.RI]
  ];
  function isBoundaryPair(left, right) {
    return NonBoundaryPairs.findIndex((r2) => intersects(left, r2[0]) && intersects(right, r2[1])) === -1;
  }
  var endingEmojiZWJ = /(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDEFD-\uDEFF\uDF46-\uDF50\uDF82-\uDF85]|\uD804[\uDC01\uDC38-\uDC46\uDC70\uDC73\uDC74\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDCC2\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDE41\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4\uDF00\uDF01\uDF36-\uDF3A\uDF40\uDF42]|\uD80D[\uDC40\uDC47-\uDC55]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDC8F\uDD30-\uDD36\uDEAE\uDEEC-\uDEEF]|\uD839[\uDCEC-\uDCEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])*\u200D$/;
  var endsWithEmojiZWJ = (str) => {
    return str.search(endingEmojiZWJ) !== -1;
  };
  var endingRIs = /(?:\uD83C[\uDDE6-\uDDFF])+$/g;
  var endsWithOddNumberOfRIs = (str) => {
    var match2 = str.match(endingRIs);
    if (match2 === null) {
      return false;
    } else {
      var numRIs = match2[0].length / 2;
      return numRIs % 2 === 1;
    }
  };
  var TextTransforms = {
    delete(editor, options) {
      editor.delete(options);
    },
    insertFragment(editor, fragment2, options) {
      editor.insertFragment(fragment2, options);
    },
    insertText(editor, text) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      Editor$2.withoutNormalizing(editor, () => {
        var {
          voids = false
        } = options;
        var {
          at: at2 = getDefaultInsertLocation(editor)
        } = options;
        if (Path.isPath(at2)) {
          at2 = Editor$2.range(editor, at2);
        }
        if (Range.isRange(at2)) {
          if (Range.isCollapsed(at2)) {
            at2 = at2.anchor;
          } else {
            var end2 = Range.end(at2);
            if (!voids && Editor$2.void(editor, {
              at: end2
            })) {
              return;
            }
            var start2 = Range.start(at2);
            var startRef = Editor$2.pointRef(editor, start2);
            var endRef = Editor$2.pointRef(editor, end2);
            Transforms.delete(editor, {
              at: at2,
              voids
            });
            var startPoint = startRef.unref();
            var endPoint = endRef.unref();
            at2 = startPoint || endPoint;
            Transforms.setSelection(editor, {
              anchor: at2,
              focus: at2
            });
          }
        }
        if (!voids && Editor$2.void(editor, {
          at: at2
        }) || Editor$2.elementReadOnly(editor, {
          at: at2
        })) {
          return;
        }
        var {
          path: path2,
          offset
        } = at2;
        if (text.length > 0)
          editor.apply({
            type: "insert_text",
            path: path2,
            offset,
            text
          });
      });
    }
  };
  function ownKeys$9(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$9(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$9(Object(t2), true).forEach(function(r3) {
        _defineProperty$5(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$9(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var Transforms = _objectSpread$9(_objectSpread$9(_objectSpread$9(_objectSpread$9({}, GeneralTransforms), NodeTransforms), SelectionTransforms), TextTransforms);
  var BATCHING_DIRTY_PATHS = /* @__PURE__ */ new WeakMap();
  var isBatchingDirtyPaths = (editor) => {
    return BATCHING_DIRTY_PATHS.get(editor) || false;
  };
  var batchDirtyPaths = (editor, fn, update) => {
    var value = BATCHING_DIRTY_PATHS.get(editor) || false;
    BATCHING_DIRTY_PATHS.set(editor, true);
    try {
      fn();
      update();
    } finally {
      BATCHING_DIRTY_PATHS.set(editor, value);
    }
  };
  function updateDirtyPaths(editor, newDirtyPaths, transform) {
    var oldDirtyPaths = DIRTY_PATHS.get(editor) || [];
    var oldDirtyPathKeys = DIRTY_PATH_KEYS.get(editor) || /* @__PURE__ */ new Set();
    var dirtyPaths;
    var dirtyPathKeys;
    var add = (path3) => {
      if (path3) {
        var key = path3.join(",");
        if (!dirtyPathKeys.has(key)) {
          dirtyPathKeys.add(key);
          dirtyPaths.push(path3);
        }
      }
    };
    if (transform) {
      dirtyPaths = [];
      dirtyPathKeys = /* @__PURE__ */ new Set();
      for (var path2 of oldDirtyPaths) {
        var newPath = transform(path2);
        add(newPath);
      }
    } else {
      dirtyPaths = oldDirtyPaths;
      dirtyPathKeys = oldDirtyPathKeys;
    }
    for (var _path of newDirtyPaths) {
      add(_path);
    }
    DIRTY_PATHS.set(editor, dirtyPaths);
    DIRTY_PATH_KEYS.set(editor, dirtyPathKeys);
  }
  var apply$2 = (editor, op) => {
    for (var ref of Editor$2.pathRefs(editor)) {
      PathRef.transform(ref, op);
    }
    for (var _ref of Editor$2.pointRefs(editor)) {
      PointRef.transform(_ref, op);
    }
    for (var _ref2 of Editor$2.rangeRefs(editor)) {
      RangeRef.transform(_ref2, op);
    }
    if (!isBatchingDirtyPaths(editor)) {
      var transform = Path.operationCanTransformPath(op) ? (p2) => Path.transform(p2, op) : void 0;
      updateDirtyPaths(editor, editor.getDirtyPaths(op), transform);
    }
    Transforms.transform(editor, op);
    editor.operations.push(op);
    Editor$2.normalize(editor, {
      operation: op
    });
    if (op.type === "set_selection") {
      editor.marks = null;
    }
    if (!FLUSHING.get(editor)) {
      FLUSHING.set(editor, true);
      Promise.resolve().then(() => {
        FLUSHING.set(editor, false);
        editor.onChange({
          operation: op
        });
        editor.operations = [];
      });
    }
  };
  var getDirtyPaths = (editor, op) => {
    switch (op.type) {
      case "insert_text":
      case "remove_text":
      case "set_node": {
        var {
          path: path2
        } = op;
        return Path.levels(path2);
      }
      case "insert_node": {
        var {
          node: node2,
          path: _path
        } = op;
        var levels2 = Path.levels(_path);
        var descendants = Text$1.isText(node2) ? [] : Array.from(Node$1.nodes(node2), (_ref) => {
          var [, p3] = _ref;
          return _path.concat(p3);
        });
        return [...levels2, ...descendants];
      }
      case "merge_node": {
        var {
          path: _path2
        } = op;
        var ancestors = Path.ancestors(_path2);
        var previousPath = Path.previous(_path2);
        return [...ancestors, previousPath];
      }
      case "move_node": {
        var {
          path: _path3,
          newPath
        } = op;
        if (Path.equals(_path3, newPath)) {
          return [];
        }
        var oldAncestors = [];
        var newAncestors = [];
        for (var ancestor of Path.ancestors(_path3)) {
          var p2 = Path.transform(ancestor, op);
          oldAncestors.push(p2);
        }
        for (var _ancestor of Path.ancestors(newPath)) {
          var _p = Path.transform(_ancestor, op);
          newAncestors.push(_p);
        }
        var newParent = newAncestors[newAncestors.length - 1];
        var newIndex = newPath[newPath.length - 1];
        var resultPath = newParent.concat(newIndex);
        return [...oldAncestors, ...newAncestors, resultPath];
      }
      case "remove_node": {
        var {
          path: _path4
        } = op;
        var _ancestors = Path.ancestors(_path4);
        return [..._ancestors];
      }
      case "split_node": {
        var {
          path: _path5
        } = op;
        var _levels = Path.levels(_path5);
        var nextPath = Path.next(_path5);
        return [..._levels, nextPath];
      }
      default: {
        return [];
      }
    }
  };
  var getFragment$1 = (editor) => {
    var {
      selection
    } = editor;
    if (selection) {
      return Node$1.fragment(editor, selection);
    }
    return [];
  };
  var normalizeNode = (editor, entry) => {
    var [node2, path2] = entry;
    if (Text$1.isText(node2)) {
      return;
    }
    if (Element$2.isElement(node2) && node2.children.length === 0) {
      var child = {
        text: ""
      };
      Transforms.insertNodes(editor, child, {
        at: path2.concat(0),
        voids: true
      });
      return;
    }
    var shouldHaveInlines = Editor$2.isEditor(node2) ? false : Element$2.isElement(node2) && (editor.isInline(node2) || node2.children.length === 0 || Text$1.isText(node2.children[0]) || editor.isInline(node2.children[0]));
    var n2 = 0;
    for (var i2 = 0; i2 < node2.children.length; i2++, n2++) {
      var currentNode = Node$1.get(editor, path2);
      if (Text$1.isText(currentNode))
        continue;
      var _child = currentNode.children[n2];
      var prev = currentNode.children[n2 - 1];
      var isLast = i2 === node2.children.length - 1;
      var isInlineOrText = Text$1.isText(_child) || Element$2.isElement(_child) && editor.isInline(_child);
      if (isInlineOrText !== shouldHaveInlines) {
        if (isInlineOrText) {
          Transforms.removeNodes(editor, {
            at: path2.concat(n2),
            voids: true
          });
        } else {
          Transforms.unwrapNodes(editor, {
            at: path2.concat(n2),
            voids: true
          });
        }
        n2--;
      } else if (Element$2.isElement(_child)) {
        if (editor.isInline(_child)) {
          if (prev == null || !Text$1.isText(prev)) {
            var newChild = {
              text: ""
            };
            Transforms.insertNodes(editor, newChild, {
              at: path2.concat(n2),
              voids: true
            });
            n2++;
          } else if (isLast) {
            var _newChild = {
              text: ""
            };
            Transforms.insertNodes(editor, _newChild, {
              at: path2.concat(n2 + 1),
              voids: true
            });
            n2++;
          }
        }
      } else {
        if (!Text$1.isText(_child) && !("children" in _child)) {
          var elementChild = _child;
          elementChild.children = [];
        }
        if (prev != null && Text$1.isText(prev)) {
          if (Text$1.equals(_child, prev, {
            loose: true
          })) {
            Transforms.mergeNodes(editor, {
              at: path2.concat(n2),
              voids: true
            });
            n2--;
          } else if (prev.text === "") {
            Transforms.removeNodes(editor, {
              at: path2.concat(n2 - 1),
              voids: true
            });
            n2--;
          } else if (_child.text === "") {
            Transforms.removeNodes(editor, {
              at: path2.concat(n2),
              voids: true
            });
            n2--;
          }
        }
      }
    }
  };
  var shouldNormalize = (editor, _ref) => {
    var {
      iteration,
      initialDirtyPathsLength
    } = _ref;
    var maxIterations = initialDirtyPathsLength * 42;
    if (iteration > maxIterations) {
      throw new Error("Could not completely normalize the editor after ".concat(maxIterations, " iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state."));
    }
    return true;
  };
  var above$1 = function above2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var {
      voids = false,
      mode = "lowest",
      at: at2 = editor.selection,
      match: match2
    } = options;
    if (!at2) {
      return;
    }
    var path2 = Editor$2.path(editor, at2);
    var reverse = mode === "lowest";
    for (var [n2, p2] of Editor$2.levels(editor, {
      at: path2,
      voids,
      match: match2,
      reverse
    })) {
      if (Text$1.isText(n2))
        continue;
      if (Range.isRange(at2)) {
        if (Path.isAncestor(p2, at2.anchor.path) && Path.isAncestor(p2, at2.focus.path)) {
          return [n2, p2];
        }
      } else {
        if (!Path.equals(path2, p2)) {
          return [n2, p2];
        }
      }
    }
  };
  function ownKeys$8$1(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$8$1(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$8$1(Object(t2), true).forEach(function(r3) {
        _defineProperty$5(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$8$1(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var addMark$1 = (editor, key, value) => {
    var {
      selection
    } = editor;
    if (selection) {
      var match2 = (node2, path2) => {
        if (!Text$1.isText(node2)) {
          return false;
        }
        var [parentNode2, parentPath] = Editor$2.parent(editor, path2);
        return !editor.isVoid(parentNode2) || editor.markableVoid(parentNode2);
      };
      var expandedSelection = Range.isExpanded(selection);
      var markAcceptingVoidSelected = false;
      if (!expandedSelection) {
        var [selectedNode, selectedPath] = Editor$2.node(editor, selection);
        if (selectedNode && match2(selectedNode, selectedPath)) {
          var [parentNode] = Editor$2.parent(editor, selectedPath);
          markAcceptingVoidSelected = parentNode && editor.markableVoid(parentNode);
        }
      }
      if (expandedSelection || markAcceptingVoidSelected) {
        Transforms.setNodes(editor, {
          [key]: value
        }, {
          match: match2,
          split: true,
          voids: true
        });
      } else {
        var marks2 = _objectSpread$8$1(_objectSpread$8$1({}, Editor$2.marks(editor) || {}), {}, {
          [key]: value
        });
        editor.marks = marks2;
        if (!FLUSHING.get(editor)) {
          editor.onChange();
        }
      }
    }
  };
  function ownKeys$7$1(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$7$1(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$7$1(Object(t2), true).forEach(function(r3) {
        _defineProperty$5(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$7$1(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var after = function after2(editor, at2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var anchor = Editor$2.point(editor, at2, {
      edge: "end"
    });
    var focus2 = Editor$2.end(editor, []);
    var range2 = {
      anchor,
      focus: focus2
    };
    var {
      distance = 1
    } = options;
    var d2 = 0;
    var target;
    for (var p2 of Editor$2.positions(editor, _objectSpread$7$1(_objectSpread$7$1({}, options), {}, {
      at: range2
    }))) {
      if (d2 > distance) {
        break;
      }
      if (d2 !== 0) {
        target = p2;
      }
      d2++;
    }
    return target;
  };
  function ownKeys$6$1(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$6$1(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$6$1(Object(t2), true).forEach(function(r3) {
        _defineProperty$5(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$6$1(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var before = function before2(editor, at2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var anchor = Editor$2.start(editor, []);
    var focus2 = Editor$2.point(editor, at2, {
      edge: "start"
    });
    var range2 = {
      anchor,
      focus: focus2
    };
    var {
      distance = 1
    } = options;
    var d2 = 0;
    var target;
    for (var p2 of Editor$2.positions(editor, _objectSpread$6$1(_objectSpread$6$1({}, options), {}, {
      at: range2,
      reverse: true
    }))) {
      if (d2 > distance) {
        break;
      }
      if (d2 !== 0) {
        target = p2;
      }
      d2++;
    }
    return target;
  };
  var deleteBackward$1 = (editor, unit) => {
    var {
      selection
    } = editor;
    if (selection && Range.isCollapsed(selection)) {
      Transforms.delete(editor, {
        unit,
        reverse: true
      });
    }
  };
  var deleteForward$1 = (editor, unit) => {
    var {
      selection
    } = editor;
    if (selection && Range.isCollapsed(selection)) {
      Transforms.delete(editor, {
        unit
      });
    }
  };
  var deleteFragment$1 = function deleteFragment2(editor) {
    var {
      direction: direction2 = "forward"
    } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var {
      selection
    } = editor;
    if (selection && Range.isExpanded(selection)) {
      Transforms.delete(editor, {
        reverse: direction2 === "backward"
      });
    }
  };
  var edges = (editor, at2) => {
    return [Editor$2.start(editor, at2), Editor$2.end(editor, at2)];
  };
  function ownKeys$5$1(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$5$1(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$5$1(Object(t2), true).forEach(function(r3) {
        _defineProperty$5(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$5$1(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var elementReadOnly = function elementReadOnly2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return Editor$2.above(editor, _objectSpread$5$1(_objectSpread$5$1({}, options), {}, {
      match: (n2) => Element$2.isElement(n2) && Editor$2.isElementReadOnly(editor, n2)
    }));
  };
  var end = (editor, at2) => {
    return Editor$2.point(editor, at2, {
      edge: "end"
    });
  };
  var first = (editor, at2) => {
    var path2 = Editor$2.path(editor, at2, {
      edge: "start"
    });
    return Editor$2.node(editor, path2);
  };
  var fragment = (editor, at2) => {
    var range2 = Editor$2.range(editor, at2);
    return Node$1.fragment(editor, range2);
  };
  function ownKeys$4$1(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$4$1(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$4$1(Object(t2), true).forEach(function(r3) {
        _defineProperty$5(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$4$1(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var getVoid = function getVoid2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return Editor$2.above(editor, _objectSpread$4$1(_objectSpread$4$1({}, options), {}, {
      match: (n2) => Element$2.isElement(n2) && Editor$2.isVoid(editor, n2)
    }));
  };
  var hasBlocks$1 = (editor, element) => {
    return element.children.some((n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2));
  };
  var hasInlines$1 = (editor, element) => {
    return element.children.some((n2) => Text$1.isText(n2) || Editor$2.isInline(editor, n2));
  };
  var hasPath$2 = (editor, path2) => {
    return Node$1.has(editor, path2);
  };
  var hasTexts$1 = (editor, element) => {
    return element.children.every((n2) => Text$1.isText(n2));
  };
  var insertBreak$1 = (editor) => {
    Transforms.splitNodes(editor, {
      always: true
    });
  };
  var insertNode$1 = (editor, node2, options) => {
    Transforms.insertNodes(editor, node2, options);
  };
  var insertSoftBreak = (editor) => {
    Transforms.splitNodes(editor, {
      always: true
    });
  };
  function ownKeys$3$1(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$3$1(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$3$1(Object(t2), true).forEach(function(r3) {
        _defineProperty$5(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$3$1(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var insertText$1 = function insertText2(editor, text) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      selection,
      marks: marks2
    } = editor;
    if (selection) {
      if (marks2) {
        var node2 = _objectSpread$3$1({
          text
        }, marks2);
        Transforms.insertNodes(editor, node2, {
          at: options.at,
          voids: options.voids
        });
      } else {
        Transforms.insertText(editor, text, options);
      }
      editor.marks = null;
    }
  };
  var isBlock$1 = (editor, value) => {
    return !editor.isInline(value);
  };
  var isEdge = (editor, point2, at2) => {
    return Editor$2.isStart(editor, point2, at2) || Editor$2.isEnd(editor, point2, at2);
  };
  var isEmpty$1 = (editor, element) => {
    var {
      children
    } = element;
    var [first2] = children;
    return children.length === 0 || children.length === 1 && Text$1.isText(first2) && first2.text === "" && !editor.isVoid(element);
  };
  var isEnd = (editor, point2, at2) => {
    var end2 = Editor$2.end(editor, at2);
    return Point.equals(point2, end2);
  };
  var isNormalizing = (editor) => {
    var isNormalizing2 = NORMALIZING.get(editor);
    return isNormalizing2 === void 0 ? true : isNormalizing2;
  };
  var isStart = (editor, point2, at2) => {
    if (point2.offset !== 0) {
      return false;
    }
    var start2 = Editor$2.start(editor, at2);
    return Point.equals(point2, start2);
  };
  var last$3 = (editor, at2) => {
    var path2 = Editor$2.path(editor, at2, {
      edge: "end"
    });
    return Editor$2.node(editor, path2);
  };
  var leaf$1 = function leaf2(editor, at2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var path2 = Editor$2.path(editor, at2, options);
    var node2 = Node$1.leaf(editor, path2);
    return [node2, path2];
  };
  function levels(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return function* () {
      var {
        at: at2 = editor.selection,
        reverse = false,
        voids = false
      } = options;
      var {
        match: match2
      } = options;
      if (match2 == null) {
        match2 = () => true;
      }
      if (!at2) {
        return;
      }
      var levels2 = [];
      var path2 = Editor$2.path(editor, at2);
      for (var [n2, p2] of Node$1.levels(editor, path2)) {
        if (!match2(n2, p2)) {
          continue;
        }
        levels2.push([n2, p2]);
        if (!voids && Element$2.isElement(n2) && Editor$2.isVoid(editor, n2)) {
          break;
        }
      }
      if (reverse) {
        levels2.reverse();
      }
      yield* levels2;
    }();
  }
  var _excluded$1$1 = ["text"], _excluded2$1$1 = ["text"];
  var marks = function marks2(editor) {
    var {
      marks: marks3,
      selection
    } = editor;
    if (!selection) {
      return null;
    }
    var {
      anchor,
      focus: focus2
    } = selection;
    if (marks3) {
      return marks3;
    }
    if (Range.isExpanded(selection)) {
      var isBackward = Range.isBackward(selection);
      if (isBackward) {
        [focus2, anchor] = [anchor, focus2];
      }
      var isEnd2 = Editor$2.isEnd(editor, anchor, anchor.path);
      if (isEnd2) {
        var after2 = Editor$2.after(editor, anchor);
        if (after2) {
          anchor = after2;
        }
      }
      var [match2] = Editor$2.nodes(editor, {
        match: Text$1.isText,
        at: {
          anchor,
          focus: focus2
        }
      });
      if (match2) {
        var [_node] = match2;
        var _rest = _objectWithoutProperties$3(_node, _excluded$1$1);
        return _rest;
      } else {
        return {};
      }
    }
    var {
      path: path2
    } = anchor;
    var [node2] = Editor$2.leaf(editor, path2);
    if (anchor.offset === 0) {
      var prev = Editor$2.previous(editor, {
        at: path2,
        match: Text$1.isText
      });
      var markedVoid = Editor$2.above(editor, {
        match: (n2) => Element$2.isElement(n2) && Editor$2.isVoid(editor, n2) && editor.markableVoid(n2)
      });
      if (!markedVoid) {
        var block2 = Editor$2.above(editor, {
          match: (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2)
        });
        if (prev && block2) {
          var [prevNode, prevPath] = prev;
          var [, blockPath] = block2;
          if (Path.isAncestor(blockPath, prevPath)) {
            node2 = prevNode;
          }
        }
      }
    }
    var rest = _objectWithoutProperties$3(node2, _excluded2$1$1);
    return rest;
  };
  var next$1 = function next2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var {
      mode = "lowest",
      voids = false
    } = options;
    var {
      match: match2,
      at: at2 = editor.selection
    } = options;
    if (!at2) {
      return;
    }
    var pointAfterLocation = Editor$2.after(editor, at2, {
      voids
    });
    if (!pointAfterLocation)
      return;
    var [, to2] = Editor$2.last(editor, []);
    var span = [pointAfterLocation.path, to2];
    if (Path.isPath(at2) && at2.length === 0) {
      throw new Error("Cannot get the next node from the root node!");
    }
    if (match2 == null) {
      if (Path.isPath(at2)) {
        var [parent2] = Editor$2.parent(editor, at2);
        match2 = (n2) => parent2.children.includes(n2);
      } else {
        match2 = () => true;
      }
    }
    var [next3] = Editor$2.nodes(editor, {
      at: span,
      match: match2,
      mode,
      voids
    });
    return next3;
  };
  var node$1 = function node2(editor, at2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var path2 = Editor$2.path(editor, at2, options);
    var node3 = Node$1.get(editor, path2);
    return [node3, path2];
  };
  function nodes$1(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return function* () {
      var {
        at: at2 = editor.selection,
        mode = "all",
        universal = false,
        reverse = false,
        voids = false,
        pass: _pass,
        ignoreNonSelectable = false
      } = options;
      var {
        match: match2
      } = options;
      if (!match2) {
        match2 = () => true;
      }
      if (!at2) {
        return;
      }
      var from;
      var to2;
      if (Span.isSpan(at2)) {
        from = at2[0];
        to2 = at2[1];
      } else {
        var first2 = Editor$2.path(editor, at2, {
          edge: "start"
        });
        var last2 = Editor$2.path(editor, at2, {
          edge: "end"
        });
        from = reverse ? last2 : first2;
        to2 = reverse ? first2 : last2;
      }
      var nodeEntries = Node$1.nodes(editor, {
        reverse,
        from,
        to: to2,
        pass: (_ref) => {
          var [node3, path3] = _ref;
          if (_pass && _pass([node3, path3]))
            return true;
          if (!Element$2.isElement(node3))
            return false;
          if (!voids && (Editor$2.isVoid(editor, node3) || Editor$2.isElementReadOnly(editor, node3)))
            return true;
          if (ignoreNonSelectable && !Editor$2.isSelectable(editor, node3))
            return true;
          return false;
        }
      });
      var matches = [];
      var hit;
      for (var [node2, path2] of nodeEntries) {
        if (ignoreNonSelectable && Element$2.isElement(node2) && !Editor$2.isSelectable(editor, node2)) {
          continue;
        }
        var isLower = hit && Path.compare(path2, hit[1]) === 0;
        if (mode === "highest" && isLower) {
          continue;
        }
        if (!match2(node2, path2)) {
          if (universal && !isLower && Text$1.isText(node2)) {
            return;
          } else {
            continue;
          }
        }
        if (mode === "lowest" && isLower) {
          hit = [node2, path2];
          continue;
        }
        var emit = mode === "lowest" ? hit : [node2, path2];
        if (emit) {
          if (universal) {
            matches.push(emit);
          } else {
            yield emit;
          }
        }
        hit = [node2, path2];
      }
      if (mode === "lowest" && hit) {
        if (universal) {
          matches.push(hit);
        } else {
          yield hit;
        }
      }
      if (universal) {
        yield* matches;
      }
    }();
  }
  var normalize$2 = function normalize2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var {
      force = false,
      operation
    } = options;
    var getDirtyPaths2 = (editor2) => {
      return DIRTY_PATHS.get(editor2) || [];
    };
    var getDirtyPathKeys = (editor2) => {
      return DIRTY_PATH_KEYS.get(editor2) || /* @__PURE__ */ new Set();
    };
    var popDirtyPath = (editor2) => {
      var path2 = getDirtyPaths2(editor2).pop();
      var key = path2.join(",");
      getDirtyPathKeys(editor2).delete(key);
      return path2;
    };
    if (!Editor$2.isNormalizing(editor)) {
      return;
    }
    if (force) {
      var allPaths = Array.from(Node$1.nodes(editor), (_ref) => {
        var [, p2] = _ref;
        return p2;
      });
      var allPathKeys = new Set(allPaths.map((p2) => p2.join(",")));
      DIRTY_PATHS.set(editor, allPaths);
      DIRTY_PATH_KEYS.set(editor, allPathKeys);
    }
    if (getDirtyPaths2(editor).length === 0) {
      return;
    }
    Editor$2.withoutNormalizing(editor, () => {
      for (var dirtyPath of getDirtyPaths2(editor)) {
        if (Node$1.has(editor, dirtyPath)) {
          var entry = Editor$2.node(editor, dirtyPath);
          var [node2, _] = entry;
          if (Element$2.isElement(node2) && node2.children.length === 0) {
            editor.normalizeNode(entry, {
              operation
            });
          }
        }
      }
      var dirtyPaths = getDirtyPaths2(editor);
      var initialDirtyPathsLength = dirtyPaths.length;
      var iteration = 0;
      while (dirtyPaths.length !== 0) {
        if (!editor.shouldNormalize({
          dirtyPaths,
          iteration,
          initialDirtyPathsLength,
          operation
        })) {
          return;
        }
        var _dirtyPath = popDirtyPath(editor);
        if (Node$1.has(editor, _dirtyPath)) {
          var _entry = Editor$2.node(editor, _dirtyPath);
          editor.normalizeNode(_entry, {
            operation
          });
        }
        iteration++;
        dirtyPaths = getDirtyPaths2(editor);
      }
    });
  };
  var parent$3 = function parent2(editor, at2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var path2 = Editor$2.path(editor, at2, options);
    var parentPath = Path.parent(path2);
    var entry = Editor$2.node(editor, parentPath);
    return entry;
  };
  var pathRef = function pathRef2(editor, path2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      affinity = "forward"
    } = options;
    var ref = {
      current: path2,
      affinity,
      unref() {
        var {
          current: current2
        } = ref;
        var pathRefs2 = Editor$2.pathRefs(editor);
        pathRefs2.delete(ref);
        ref.current = null;
        return current2;
      }
    };
    var refs = Editor$2.pathRefs(editor);
    refs.add(ref);
    return ref;
  };
  var pathRefs = (editor) => {
    var refs = PATH_REFS.get(editor);
    if (!refs) {
      refs = /* @__PURE__ */ new Set();
      PATH_REFS.set(editor, refs);
    }
    return refs;
  };
  var path$1 = function path2(editor, at2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      depth,
      edge
    } = options;
    if (Path.isPath(at2)) {
      if (edge === "start") {
        var [, firstPath] = Node$1.first(editor, at2);
        at2 = firstPath;
      } else if (edge === "end") {
        var [, lastPath] = Node$1.last(editor, at2);
        at2 = lastPath;
      }
    }
    if (Range.isRange(at2)) {
      if (edge === "start") {
        at2 = Range.start(at2);
      } else if (edge === "end") {
        at2 = Range.end(at2);
      } else {
        at2 = Path.common(at2.anchor.path, at2.focus.path);
      }
    }
    if (Point.isPoint(at2)) {
      at2 = at2.path;
    }
    if (depth != null) {
      at2 = at2.slice(0, depth);
    }
    return at2;
  };
  var pointRef = function pointRef2(editor, point2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      affinity = "forward"
    } = options;
    var ref = {
      current: point2,
      affinity,
      unref() {
        var {
          current: current2
        } = ref;
        var pointRefs2 = Editor$2.pointRefs(editor);
        pointRefs2.delete(ref);
        ref.current = null;
        return current2;
      }
    };
    var refs = Editor$2.pointRefs(editor);
    refs.add(ref);
    return ref;
  };
  var pointRefs = (editor) => {
    var refs = POINT_REFS.get(editor);
    if (!refs) {
      refs = /* @__PURE__ */ new Set();
      POINT_REFS.set(editor, refs);
    }
    return refs;
  };
  var point = function point2(editor, at2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      edge = "start"
    } = options;
    if (Path.isPath(at2)) {
      var path2;
      if (edge === "end") {
        var [, lastPath] = Node$1.last(editor, at2);
        path2 = lastPath;
      } else {
        var [, firstPath] = Node$1.first(editor, at2);
        path2 = firstPath;
      }
      var node2 = Node$1.get(editor, path2);
      if (!Text$1.isText(node2)) {
        throw new Error("Cannot get the ".concat(edge, " point in the node at path [").concat(at2, "] because it has no ").concat(edge, " text node."));
      }
      return {
        path: path2,
        offset: edge === "end" ? node2.text.length : 0
      };
    }
    if (Range.isRange(at2)) {
      var [start2, end2] = Range.edges(at2);
      return edge === "start" ? start2 : end2;
    }
    return at2;
  };
  function positions(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return function* () {
      var {
        at: at2 = editor.selection,
        unit = "offset",
        reverse = false,
        voids = false,
        ignoreNonSelectable = false
      } = options;
      if (!at2) {
        return;
      }
      var range2 = Editor$2.range(editor, at2);
      var [start2, end2] = Range.edges(range2);
      var first2 = reverse ? end2 : start2;
      var isNewBlock = false;
      var blockText = "";
      var distance = 0;
      var leafTextRemaining = 0;
      var leafTextOffset = 0;
      for (var [node2, path2] of Editor$2.nodes(editor, {
        at: at2,
        reverse,
        voids,
        ignoreNonSelectable
      })) {
        if (Element$2.isElement(node2)) {
          if (!voids && (editor.isVoid(node2) || editor.isElementReadOnly(node2))) {
            yield Editor$2.start(editor, path2);
            continue;
          }
          if (editor.isInline(node2))
            continue;
          if (Editor$2.hasInlines(editor, node2)) {
            var e3 = Path.isAncestor(path2, end2.path) ? end2 : Editor$2.end(editor, path2);
            var s2 = Path.isAncestor(path2, start2.path) ? start2 : Editor$2.start(editor, path2);
            blockText = Editor$2.string(editor, {
              anchor: s2,
              focus: e3
            }, {
              voids
            });
            isNewBlock = true;
          }
        }
        if (Text$1.isText(node2)) {
          var isFirst = Path.equals(path2, first2.path);
          if (isFirst) {
            leafTextRemaining = reverse ? first2.offset : node2.text.length - first2.offset;
            leafTextOffset = first2.offset;
          } else {
            leafTextRemaining = node2.text.length;
            leafTextOffset = reverse ? leafTextRemaining : 0;
          }
          if (isFirst || isNewBlock || unit === "offset") {
            yield {
              path: path2,
              offset: leafTextOffset
            };
            isNewBlock = false;
          }
          while (true) {
            if (distance === 0) {
              if (blockText === "")
                break;
              distance = calcDistance(blockText, unit, reverse);
              blockText = splitByCharacterDistance(blockText, distance, reverse)[1];
            }
            leafTextOffset = reverse ? leafTextOffset - distance : leafTextOffset + distance;
            leafTextRemaining = leafTextRemaining - distance;
            if (leafTextRemaining < 0) {
              distance = -leafTextRemaining;
              break;
            }
            distance = 0;
            yield {
              path: path2,
              offset: leafTextOffset
            };
          }
        }
      }
      function calcDistance(text, unit2, reverse2) {
        if (unit2 === "character") {
          return getCharacterDistance(text, reverse2);
        } else if (unit2 === "word") {
          return getWordDistance(text, reverse2);
        } else if (unit2 === "line" || unit2 === "block") {
          return text.length;
        }
        return 1;
      }
    }();
  }
  var previous$1 = function previous2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var {
      mode = "lowest",
      voids = false
    } = options;
    var {
      match: match2,
      at: at2 = editor.selection
    } = options;
    if (!at2) {
      return;
    }
    var pointBeforeLocation = Editor$2.before(editor, at2, {
      voids
    });
    if (!pointBeforeLocation) {
      return;
    }
    var [, to2] = Editor$2.first(editor, []);
    var span = [pointBeforeLocation.path, to2];
    if (Path.isPath(at2) && at2.length === 0) {
      throw new Error("Cannot get the previous node from the root node!");
    }
    if (match2 == null) {
      if (Path.isPath(at2)) {
        var [parent2] = Editor$2.parent(editor, at2);
        match2 = (n2) => parent2.children.includes(n2);
      } else {
        match2 = () => true;
      }
    }
    var [previous3] = Editor$2.nodes(editor, {
      reverse: true,
      at: span,
      match: match2,
      mode,
      voids
    });
    return previous3;
  };
  var rangeRef = function rangeRef2(editor, range2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      affinity = "forward"
    } = options;
    var ref = {
      current: range2,
      affinity,
      unref() {
        var {
          current: current2
        } = ref;
        var rangeRefs2 = Editor$2.rangeRefs(editor);
        rangeRefs2.delete(ref);
        ref.current = null;
        return current2;
      }
    };
    var refs = Editor$2.rangeRefs(editor);
    refs.add(ref);
    return ref;
  };
  var rangeRefs = (editor) => {
    var refs = RANGE_REFS.get(editor);
    if (!refs) {
      refs = /* @__PURE__ */ new Set();
      RANGE_REFS.set(editor, refs);
    }
    return refs;
  };
  var range$1 = (editor, at2, to2) => {
    if (Range.isRange(at2) && !to2) {
      return at2;
    }
    var start2 = Editor$2.start(editor, at2);
    var end2 = Editor$2.end(editor, to2 || at2);
    return {
      anchor: start2,
      focus: end2
    };
  };
  function ownKeys$2$2(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$2$2(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$2$2(Object(t2), true).forEach(function(r3) {
        _defineProperty$5(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$2$2(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var removeMark = (editor, key) => {
    var {
      selection
    } = editor;
    if (selection) {
      var match2 = (node2, path2) => {
        if (!Text$1.isText(node2)) {
          return false;
        }
        var [parentNode2, parentPath] = Editor$2.parent(editor, path2);
        return !editor.isVoid(parentNode2) || editor.markableVoid(parentNode2);
      };
      var expandedSelection = Range.isExpanded(selection);
      var markAcceptingVoidSelected = false;
      if (!expandedSelection) {
        var [selectedNode, selectedPath] = Editor$2.node(editor, selection);
        if (selectedNode && match2(selectedNode, selectedPath)) {
          var [parentNode] = Editor$2.parent(editor, selectedPath);
          markAcceptingVoidSelected = parentNode && editor.markableVoid(parentNode);
        }
      }
      if (expandedSelection || markAcceptingVoidSelected) {
        Transforms.unsetNodes(editor, key, {
          match: match2,
          split: true,
          voids: true
        });
      } else {
        var marks2 = _objectSpread$2$2({}, Editor$2.marks(editor) || {});
        delete marks2[key];
        editor.marks = marks2;
        if (!FLUSHING.get(editor)) {
          editor.onChange();
        }
      }
    }
  };
  var setNormalizing = (editor, isNormalizing2) => {
    NORMALIZING.set(editor, isNormalizing2);
  };
  var start = (editor, at2) => {
    return Editor$2.point(editor, at2, {
      edge: "start"
    });
  };
  var string = function string2(editor, at2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      voids = false
    } = options;
    var range2 = Editor$2.range(editor, at2);
    var [start2, end2] = Range.edges(range2);
    var text = "";
    for (var [node2, path2] of Editor$2.nodes(editor, {
      at: range2,
      match: Text$1.isText,
      voids
    })) {
      var t2 = node2.text;
      if (Path.equals(path2, end2.path)) {
        t2 = t2.slice(0, end2.offset);
      }
      if (Path.equals(path2, start2.path)) {
        t2 = t2.slice(start2.offset);
      }
      text += t2;
    }
    return text;
  };
  var unhangRange$1 = function unhangRange2(editor, range2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      voids = false
    } = options;
    var [start2, end2] = Range.edges(range2);
    if (start2.offset !== 0 || end2.offset !== 0 || Range.isCollapsed(range2) || Path.hasPrevious(end2.path)) {
      return range2;
    }
    var endBlock = Editor$2.above(editor, {
      at: end2,
      match: (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2),
      voids
    });
    var blockPath = endBlock ? endBlock[1] : [];
    var first2 = Editor$2.start(editor, start2);
    var before2 = {
      anchor: first2,
      focus: end2
    };
    var skip = true;
    for (var [node2, path2] of Editor$2.nodes(editor, {
      at: before2,
      match: Text$1.isText,
      reverse: true,
      voids
    })) {
      if (skip) {
        skip = false;
        continue;
      }
      if (node2.text !== "" || Path.isBefore(path2, blockPath)) {
        end2 = {
          path: path2,
          offset: node2.text.length
        };
        break;
      }
    }
    return {
      anchor: start2,
      focus: end2
    };
  };
  var withoutNormalizing$1 = (editor, fn) => {
    var value = Editor$2.isNormalizing(editor);
    Editor$2.setNormalizing(editor, false);
    try {
      fn();
    } finally {
      Editor$2.setNormalizing(editor, value);
    }
    Editor$2.normalize(editor);
  };
  var shouldMergeNodesRemovePrevNode = (editor, _ref, _ref2) => {
    var [prevNode, prevPath] = _ref;
    return Element$2.isElement(prevNode) && Editor$2.isEmpty(editor, prevNode) || Text$1.isText(prevNode) && prevNode.text === "" && prevPath[prevPath.length - 1] !== 0;
  };
  var deleteText$1 = function deleteText2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Editor$2.withoutNormalizing(editor, () => {
      var _Editor$void, _Editor$void2;
      var {
        reverse = false,
        unit = "character",
        distance = 1,
        voids = false
      } = options;
      var {
        at: at2 = editor.selection,
        hanging = false
      } = options;
      if (!at2) {
        return;
      }
      var isCollapsed = false;
      if (Range.isRange(at2) && Range.isCollapsed(at2)) {
        isCollapsed = true;
        at2 = at2.anchor;
      }
      if (Point.isPoint(at2)) {
        var furthestVoid = Editor$2.void(editor, {
          at: at2,
          mode: "highest"
        });
        if (!voids && furthestVoid) {
          var [, voidPath] = furthestVoid;
          at2 = voidPath;
        } else {
          var opts = {
            unit,
            distance
          };
          var target = reverse ? Editor$2.before(editor, at2, opts) || Editor$2.start(editor, []) : Editor$2.after(editor, at2, opts) || Editor$2.end(editor, []);
          at2 = {
            anchor: at2,
            focus: target
          };
          hanging = true;
        }
      }
      if (Path.isPath(at2)) {
        Transforms.removeNodes(editor, {
          at: at2,
          voids
        });
        return;
      }
      if (Range.isCollapsed(at2)) {
        return;
      }
      if (!hanging) {
        var [, _end] = Range.edges(at2);
        var endOfDoc = Editor$2.end(editor, []);
        if (!Point.equals(_end, endOfDoc)) {
          at2 = Editor$2.unhangRange(editor, at2, {
            voids
          });
        }
      }
      var [start2, end2] = Range.edges(at2);
      var startBlock = Editor$2.above(editor, {
        match: (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2),
        at: start2,
        voids
      });
      var endBlock = Editor$2.above(editor, {
        match: (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2),
        at: end2,
        voids
      });
      var isAcrossBlocks = startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1]);
      var isSingleText = Path.equals(start2.path, end2.path);
      var startNonEditable = voids ? null : (_Editor$void = Editor$2.void(editor, {
        at: start2,
        mode: "highest"
      })) !== null && _Editor$void !== void 0 ? _Editor$void : Editor$2.elementReadOnly(editor, {
        at: start2,
        mode: "highest"
      });
      var endNonEditable = voids ? null : (_Editor$void2 = Editor$2.void(editor, {
        at: end2,
        mode: "highest"
      })) !== null && _Editor$void2 !== void 0 ? _Editor$void2 : Editor$2.elementReadOnly(editor, {
        at: end2,
        mode: "highest"
      });
      if (startNonEditable) {
        var before2 = Editor$2.before(editor, start2);
        if (before2 && startBlock && Path.isAncestor(startBlock[1], before2.path)) {
          start2 = before2;
        }
      }
      if (endNonEditable) {
        var after2 = Editor$2.after(editor, end2);
        if (after2 && endBlock && Path.isAncestor(endBlock[1], after2.path)) {
          end2 = after2;
        }
      }
      var matches = [];
      var lastPath;
      for (var entry of Editor$2.nodes(editor, {
        at: at2,
        voids
      })) {
        var [node2, path2] = entry;
        if (lastPath && Path.compare(path2, lastPath) === 0) {
          continue;
        }
        if (!voids && Element$2.isElement(node2) && (Editor$2.isVoid(editor, node2) || Editor$2.isElementReadOnly(editor, node2)) || !Path.isCommon(path2, start2.path) && !Path.isCommon(path2, end2.path)) {
          matches.push(entry);
          lastPath = path2;
        }
      }
      var pathRefs2 = Array.from(matches, (_ref) => {
        var [, p2] = _ref;
        return Editor$2.pathRef(editor, p2);
      });
      var startRef = Editor$2.pointRef(editor, start2);
      var endRef = Editor$2.pointRef(editor, end2);
      var removedText = "";
      if (!isSingleText && !startNonEditable) {
        var _point = startRef.current;
        var [_node] = Editor$2.leaf(editor, _point);
        var {
          path: _path
        } = _point;
        var {
          offset
        } = start2;
        var text = _node.text.slice(offset);
        if (text.length > 0) {
          editor.apply({
            type: "remove_text",
            path: _path,
            offset,
            text
          });
          removedText = text;
        }
      }
      pathRefs2.reverse().map((r2) => r2.unref()).filter((r2) => r2 !== null).forEach((p2) => Transforms.removeNodes(editor, {
        at: p2,
        voids
      }));
      if (!endNonEditable) {
        var _point2 = endRef.current;
        var [_node2] = Editor$2.leaf(editor, _point2);
        var {
          path: _path2
        } = _point2;
        var _offset = isSingleText ? start2.offset : 0;
        var _text = _node2.text.slice(_offset, end2.offset);
        if (_text.length > 0) {
          editor.apply({
            type: "remove_text",
            path: _path2,
            offset: _offset,
            text: _text
          });
          removedText = _text;
        }
      }
      if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) {
        Transforms.mergeNodes(editor, {
          at: endRef.current,
          hanging: true,
          voids
        });
      }
      if (isCollapsed && reverse && unit === "character" && removedText.length > 1 && removedText.match(/[\u0E00-\u0E7F]+/)) {
        Transforms.insertText(editor, removedText.slice(0, removedText.length - distance));
      }
      var startUnref = startRef.unref();
      var endUnref = endRef.unref();
      var point2 = reverse ? startUnref || endUnref : endUnref || startUnref;
      if (options.at == null && point2) {
        Transforms.select(editor, point2);
      }
    });
  };
  var insertFragment$1 = function insertFragment2(editor, fragment2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    Editor$2.withoutNormalizing(editor, () => {
      var {
        hanging = false,
        voids = false
      } = options;
      var {
        at: at2 = getDefaultInsertLocation(editor),
        batchDirty = true
      } = options;
      if (!fragment2.length) {
        return;
      }
      if (Range.isRange(at2)) {
        if (!hanging) {
          at2 = Editor$2.unhangRange(editor, at2, {
            voids
          });
        }
        if (Range.isCollapsed(at2)) {
          at2 = at2.anchor;
        } else {
          var [, end2] = Range.edges(at2);
          if (!voids && Editor$2.void(editor, {
            at: end2
          })) {
            return;
          }
          var pointRef2 = Editor$2.pointRef(editor, end2);
          Transforms.delete(editor, {
            at: at2
          });
          at2 = pointRef2.unref();
        }
      } else if (Path.isPath(at2)) {
        at2 = Editor$2.start(editor, at2);
      }
      if (!voids && Editor$2.void(editor, {
        at: at2
      })) {
        return;
      }
      var inlineElementMatch = Editor$2.above(editor, {
        at: at2,
        match: (n2) => Element$2.isElement(n2) && Editor$2.isInline(editor, n2),
        mode: "highest",
        voids
      });
      if (inlineElementMatch) {
        var [, _inlinePath] = inlineElementMatch;
        if (Editor$2.isEnd(editor, at2, _inlinePath)) {
          var after2 = Editor$2.after(editor, _inlinePath);
          at2 = after2;
        } else if (Editor$2.isStart(editor, at2, _inlinePath)) {
          var before2 = Editor$2.before(editor, _inlinePath);
          at2 = before2;
        }
      }
      var blockMatch = Editor$2.above(editor, {
        match: (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2),
        at: at2,
        voids
      });
      var [, blockPath] = blockMatch;
      var isBlockStart = Editor$2.isStart(editor, at2, blockPath);
      var isBlockEnd = Editor$2.isEnd(editor, at2, blockPath);
      var isBlockEmpty = isBlockStart && isBlockEnd;
      var mergeStart = !isBlockStart || isBlockStart && isBlockEnd;
      var mergeEnd = !isBlockEnd;
      var [, firstPath] = Node$1.first({
        children: fragment2
      }, []);
      var [, lastPath] = Node$1.last({
        children: fragment2
      }, []);
      var matches = [];
      var matcher = (_ref) => {
        var [n2, p2] = _ref;
        var isRoot = p2.length === 0;
        if (isRoot) {
          return false;
        }
        if (isBlockEmpty) {
          return true;
        }
        if (mergeStart && Path.isAncestor(p2, firstPath) && Element$2.isElement(n2) && !editor.isVoid(n2) && !editor.isInline(n2)) {
          return false;
        }
        if (mergeEnd && Path.isAncestor(p2, lastPath) && Element$2.isElement(n2) && !editor.isVoid(n2) && !editor.isInline(n2)) {
          return false;
        }
        return true;
      };
      for (var entry of Node$1.nodes({
        children: fragment2
      }, {
        pass: matcher
      })) {
        if (matcher(entry)) {
          matches.push(entry);
        }
      }
      var starts = [];
      var middles = [];
      var ends = [];
      var starting = true;
      var hasBlocks2 = false;
      for (var [node2] of matches) {
        if (Element$2.isElement(node2) && !editor.isInline(node2)) {
          starting = false;
          hasBlocks2 = true;
          middles.push(node2);
        } else if (starting) {
          starts.push(node2);
        } else {
          ends.push(node2);
        }
      }
      var [inlineMatch] = Editor$2.nodes(editor, {
        at: at2,
        match: (n2) => Text$1.isText(n2) || Editor$2.isInline(editor, n2),
        mode: "highest",
        voids
      });
      var [, inlinePath] = inlineMatch;
      var isInlineStart = Editor$2.isStart(editor, at2, inlinePath);
      var isInlineEnd = Editor$2.isEnd(editor, at2, inlinePath);
      var middleRef = Editor$2.pathRef(editor, isBlockEnd && !ends.length ? Path.next(blockPath) : blockPath);
      var endRef = Editor$2.pathRef(editor, isInlineEnd ? Path.next(inlinePath) : inlinePath);
      Transforms.splitNodes(editor, {
        at: at2,
        match: (n2) => hasBlocks2 ? Element$2.isElement(n2) && Editor$2.isBlock(editor, n2) : Text$1.isText(n2) || Editor$2.isInline(editor, n2),
        mode: hasBlocks2 ? "lowest" : "highest",
        always: hasBlocks2 && (!isBlockStart || starts.length > 0) && (!isBlockEnd || ends.length > 0),
        voids
      });
      var startRef = Editor$2.pathRef(editor, !isInlineStart || isInlineStart && isInlineEnd ? Path.next(inlinePath) : inlinePath);
      Transforms.insertNodes(editor, starts, {
        at: startRef.current,
        match: (n2) => Text$1.isText(n2) || Editor$2.isInline(editor, n2),
        mode: "highest",
        voids,
        batchDirty
      });
      if (isBlockEmpty && !starts.length && middles.length && !ends.length) {
        Transforms.delete(editor, {
          at: blockPath,
          voids
        });
      }
      Transforms.insertNodes(editor, middles, {
        at: middleRef.current,
        match: (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2),
        mode: "lowest",
        voids,
        batchDirty
      });
      Transforms.insertNodes(editor, ends, {
        at: endRef.current,
        match: (n2) => Text$1.isText(n2) || Editor$2.isInline(editor, n2),
        mode: "highest",
        voids,
        batchDirty
      });
      if (!options.at) {
        var path2;
        if (ends.length > 0 && endRef.current) {
          path2 = Path.previous(endRef.current);
        } else if (middles.length > 0 && middleRef.current) {
          path2 = Path.previous(middleRef.current);
        } else if (startRef.current) {
          path2 = Path.previous(startRef.current);
        }
        if (path2) {
          var _end = Editor$2.end(editor, path2);
          Transforms.select(editor, _end);
        }
      }
      startRef.unref();
      middleRef.unref();
      endRef.unref();
    });
  };
  var collapse = function collapse2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var {
      edge = "anchor"
    } = options;
    var {
      selection
    } = editor;
    if (!selection) {
      return;
    } else if (edge === "anchor") {
      Transforms.select(editor, selection.anchor);
    } else if (edge === "focus") {
      Transforms.select(editor, selection.focus);
    } else if (edge === "start") {
      var [start2] = Range.edges(selection);
      Transforms.select(editor, start2);
    } else if (edge === "end") {
      var [, end2] = Range.edges(selection);
      Transforms.select(editor, end2);
    }
  };
  var deselect$1 = (editor) => {
    var {
      selection
    } = editor;
    if (selection) {
      editor.apply({
        type: "set_selection",
        properties: selection,
        newProperties: null
      });
    }
  };
  var move = function move2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var {
      selection
    } = editor;
    var {
      distance = 1,
      unit = "character",
      reverse = false
    } = options;
    var {
      edge = null
    } = options;
    if (!selection) {
      return;
    }
    if (edge === "start") {
      edge = Range.isBackward(selection) ? "focus" : "anchor";
    }
    if (edge === "end") {
      edge = Range.isBackward(selection) ? "anchor" : "focus";
    }
    var {
      anchor,
      focus: focus2
    } = selection;
    var opts = {
      distance,
      unit,
      ignoreNonSelectable: true
    };
    var props = {};
    if (edge == null || edge === "anchor") {
      var point2 = reverse ? Editor$2.before(editor, anchor, opts) : Editor$2.after(editor, anchor, opts);
      if (point2) {
        props.anchor = point2;
      }
    }
    if (edge == null || edge === "focus") {
      var _point = reverse ? Editor$2.before(editor, focus2, opts) : Editor$2.after(editor, focus2, opts);
      if (_point) {
        props.focus = _point;
      }
    }
    Transforms.setSelection(editor, props);
  };
  var select$1 = (editor, target) => {
    var {
      selection
    } = editor;
    target = Editor$2.range(editor, target);
    if (selection) {
      Transforms.setSelection(editor, target);
      return;
    }
    if (!Range.isRange(target)) {
      throw new Error("When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: ".concat(Scrubber.stringify(target)));
    }
    editor.apply({
      type: "set_selection",
      properties: selection,
      newProperties: target
    });
  };
  function ownKeys$1$2(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$1$2(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$1$2(Object(t2), true).forEach(function(r3) {
        _defineProperty$5(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$1$2(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var setPoint$1 = function setPoint2(editor, props) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var {
      selection
    } = editor;
    var {
      edge = "both"
    } = options;
    if (!selection) {
      return;
    }
    if (edge === "start") {
      edge = Range.isBackward(selection) ? "focus" : "anchor";
    }
    if (edge === "end") {
      edge = Range.isBackward(selection) ? "anchor" : "focus";
    }
    var {
      anchor,
      focus: focus2
    } = selection;
    var point2 = edge === "anchor" ? anchor : focus2;
    Transforms.setSelection(editor, {
      [edge === "anchor" ? "anchor" : "focus"]: _objectSpread$1$2(_objectSpread$1$2({}, point2), props)
    });
  };
  var setSelection$1 = (editor, props) => {
    var {
      selection
    } = editor;
    var oldProps = {};
    var newProps = {};
    if (!selection) {
      return;
    }
    for (var k in props) {
      if (k === "anchor" && props.anchor != null && !Point.equals(props.anchor, selection.anchor) || k === "focus" && props.focus != null && !Point.equals(props.focus, selection.focus) || k !== "anchor" && k !== "focus" && props[k] !== selection[k]) {
        oldProps[k] = selection[k];
        newProps[k] = props[k];
      }
    }
    if (Object.keys(oldProps).length > 0) {
      editor.apply({
        type: "set_selection",
        properties: oldProps,
        newProperties: newProps
      });
    }
  };
  var insertNodes$1 = function insertNodes2(editor, nodes2) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    Editor$2.withoutNormalizing(editor, () => {
      var {
        hanging = false,
        voids = false,
        mode = "lowest",
        batchDirty = true
      } = options;
      var {
        at: at2,
        match: match2,
        select: select2
      } = options;
      if (Node$1.isNode(nodes2)) {
        nodes2 = [nodes2];
      }
      if (nodes2.length === 0) {
        return;
      }
      var [node2] = nodes2;
      if (!at2) {
        at2 = getDefaultInsertLocation(editor);
        if (select2 !== false) {
          select2 = true;
        }
      }
      if (select2 == null) {
        select2 = false;
      }
      if (Range.isRange(at2)) {
        if (!hanging) {
          at2 = Editor$2.unhangRange(editor, at2, {
            voids
          });
        }
        if (Range.isCollapsed(at2)) {
          at2 = at2.anchor;
        } else {
          var [, end2] = Range.edges(at2);
          var pointRef2 = Editor$2.pointRef(editor, end2);
          Transforms.delete(editor, {
            at: at2
          });
          at2 = pointRef2.unref();
        }
      }
      if (Point.isPoint(at2)) {
        if (match2 == null) {
          if (Text$1.isText(node2)) {
            match2 = (n2) => Text$1.isText(n2);
          } else if (editor.isInline(node2)) {
            match2 = (n2) => Text$1.isText(n2) || Editor$2.isInline(editor, n2);
          } else {
            match2 = (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2);
          }
        }
        var [entry] = Editor$2.nodes(editor, {
          at: at2.path,
          match: match2,
          mode,
          voids
        });
        if (entry) {
          var [, matchPath2] = entry;
          var pathRef2 = Editor$2.pathRef(editor, matchPath2);
          var isAtEnd = Editor$2.isEnd(editor, at2, matchPath2);
          Transforms.splitNodes(editor, {
            at: at2,
            match: match2,
            mode,
            voids
          });
          var path2 = pathRef2.unref();
          at2 = isAtEnd ? Path.next(path2) : path2;
        } else {
          return;
        }
      }
      var parentPath = Path.parent(at2);
      var index = at2[at2.length - 1];
      if (!voids && Editor$2.void(editor, {
        at: parentPath
      })) {
        return;
      }
      if (batchDirty) {
        var batchedOps = [];
        var newDirtyPaths = Path.levels(parentPath);
        batchDirtyPaths(editor, () => {
          var _loop = function _loop2() {
            var path3 = parentPath.concat(index);
            index++;
            var op = {
              type: "insert_node",
              path: path3,
              node: _node
            };
            editor.apply(op);
            at2 = Path.next(at2);
            batchedOps.push(op);
            if (Text$1.isText(_node)) {
              newDirtyPaths.push(path3);
            } else {
              newDirtyPaths.push(...Array.from(Node$1.nodes(_node), (_ref) => {
                var [, p2] = _ref;
                return path3.concat(p2);
              }));
            }
          };
          for (var _node of nodes2) {
            _loop();
          }
        }, () => {
          updateDirtyPaths(editor, newDirtyPaths, (p2) => {
            var newPath = p2;
            for (var op of batchedOps) {
              if (Path.operationCanTransformPath(op)) {
                newPath = Path.transform(newPath, op);
                if (!newPath) {
                  return null;
                }
              }
            }
            return newPath;
          });
        });
      } else {
        for (var _node2 of nodes2) {
          var _path = parentPath.concat(index);
          index++;
          editor.apply({
            type: "insert_node",
            path: _path,
            node: _node2
          });
          at2 = Path.next(at2);
        }
      }
      at2 = Path.previous(at2);
      if (select2) {
        var point2 = Editor$2.end(editor, at2);
        if (point2) {
          Transforms.select(editor, point2);
        }
      }
    });
  };
  var liftNodes$1 = function liftNodes2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Editor$2.withoutNormalizing(editor, () => {
      var {
        at: at2 = editor.selection,
        mode = "lowest",
        voids = false
      } = options;
      var {
        match: match2
      } = options;
      if (match2 == null) {
        match2 = Path.isPath(at2) ? matchPath(editor, at2) : (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2);
      }
      if (!at2) {
        return;
      }
      var matches = Editor$2.nodes(editor, {
        at: at2,
        match: match2,
        mode,
        voids
      });
      var pathRefs2 = Array.from(matches, (_ref) => {
        var [, p2] = _ref;
        return Editor$2.pathRef(editor, p2);
      });
      for (var pathRef2 of pathRefs2) {
        var path2 = pathRef2.unref();
        if (path2.length < 2) {
          throw new Error("Cannot lift node at a path [".concat(path2, "] because it has a depth of less than `2`."));
        }
        var parentNodeEntry = Editor$2.node(editor, Path.parent(path2));
        var [parent2, parentPath] = parentNodeEntry;
        var index = path2[path2.length - 1];
        var {
          length
        } = parent2.children;
        if (length === 1) {
          var toPath = Path.next(parentPath);
          Transforms.moveNodes(editor, {
            at: path2,
            to: toPath,
            voids
          });
          Transforms.removeNodes(editor, {
            at: parentPath,
            voids
          });
        } else if (index === 0) {
          Transforms.moveNodes(editor, {
            at: path2,
            to: parentPath,
            voids
          });
        } else if (index === length - 1) {
          var _toPath = Path.next(parentPath);
          Transforms.moveNodes(editor, {
            at: path2,
            to: _toPath,
            voids
          });
        } else {
          var splitPath = Path.next(path2);
          var _toPath2 = Path.next(parentPath);
          Transforms.splitNodes(editor, {
            at: splitPath,
            voids
          });
          Transforms.moveNodes(editor, {
            at: path2,
            to: _toPath2,
            voids
          });
        }
      }
    });
  };
  var _excluded$5 = ["text"], _excluded2$4 = ["children"];
  var hasSingleChildNest = (editor, node2) => {
    if (Element$2.isElement(node2)) {
      var element = node2;
      if (Editor$2.isVoid(editor, node2)) {
        return true;
      } else if (element.children.length === 1) {
        return hasSingleChildNest(editor, element.children[0]);
      } else {
        return false;
      }
    } else if (Editor$2.isEditor(node2)) {
      return false;
    } else {
      return true;
    }
  };
  var mergeNodes$1 = function mergeNodes2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Editor$2.withoutNormalizing(editor, () => {
      var {
        match: match2,
        at: at2 = editor.selection
      } = options;
      var {
        hanging = false,
        voids = false,
        mode = "lowest"
      } = options;
      if (!at2) {
        return;
      }
      if (match2 == null) {
        if (Path.isPath(at2)) {
          var [parent2] = Editor$2.parent(editor, at2);
          match2 = (n2) => parent2.children.includes(n2);
        } else {
          match2 = (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2);
        }
      }
      if (!hanging && Range.isRange(at2)) {
        at2 = Editor$2.unhangRange(editor, at2, {
          voids
        });
      }
      if (Range.isRange(at2)) {
        if (Range.isCollapsed(at2)) {
          at2 = at2.anchor;
        } else {
          var [, end2] = Range.edges(at2);
          var pointRef2 = Editor$2.pointRef(editor, end2);
          Transforms.delete(editor, {
            at: at2
          });
          at2 = pointRef2.unref();
          if (options.at == null) {
            Transforms.select(editor, at2);
          }
        }
      }
      var [current2] = Editor$2.nodes(editor, {
        at: at2,
        match: match2,
        voids,
        mode
      });
      var prev = Editor$2.previous(editor, {
        at: at2,
        match: match2,
        voids,
        mode
      });
      if (!current2 || !prev) {
        return;
      }
      var [node2, path2] = current2;
      var [prevNode, prevPath] = prev;
      if (path2.length === 0 || prevPath.length === 0) {
        return;
      }
      var newPath = Path.next(prevPath);
      var commonPath = Path.common(path2, prevPath);
      var isPreviousSibling = Path.isSibling(path2, prevPath);
      var levels2 = Array.from(Editor$2.levels(editor, {
        at: path2
      }), (_ref) => {
        var [n2] = _ref;
        return n2;
      }).slice(commonPath.length).slice(0, -1);
      var emptyAncestor = Editor$2.above(editor, {
        at: path2,
        mode: "highest",
        match: (n2) => levels2.includes(n2) && hasSingleChildNest(editor, n2)
      });
      var emptyRef = emptyAncestor && Editor$2.pathRef(editor, emptyAncestor[1]);
      var properties2;
      var position;
      if (Text$1.isText(node2) && Text$1.isText(prevNode)) {
        var rest = _objectWithoutProperties$3(node2, _excluded$5);
        position = prevNode.text.length;
        properties2 = rest;
      } else if (Element$2.isElement(node2) && Element$2.isElement(prevNode)) {
        var rest = _objectWithoutProperties$3(node2, _excluded2$4);
        position = prevNode.children.length;
        properties2 = rest;
      } else {
        throw new Error("Cannot merge the node at path [".concat(path2, "] with the previous sibling because it is not the same kind: ").concat(Scrubber.stringify(node2), " ").concat(Scrubber.stringify(prevNode)));
      }
      if (!isPreviousSibling) {
        Transforms.moveNodes(editor, {
          at: path2,
          to: newPath,
          voids
        });
      }
      if (emptyRef) {
        Transforms.removeNodes(editor, {
          at: emptyRef.current,
          voids
        });
      }
      if (Editor$2.shouldMergeNodesRemovePrevNode(editor, prev, current2)) {
        Transforms.removeNodes(editor, {
          at: prevPath,
          voids
        });
      } else {
        editor.apply({
          type: "merge_node",
          path: newPath,
          position,
          properties: properties2
        });
      }
      if (emptyRef) {
        emptyRef.unref();
      }
    });
  };
  var moveNodes$1 = (editor, options) => {
    Editor$2.withoutNormalizing(editor, () => {
      var {
        to: to2,
        at: at2 = editor.selection,
        mode = "lowest",
        voids = false
      } = options;
      var {
        match: match2
      } = options;
      if (!at2) {
        return;
      }
      if (match2 == null) {
        match2 = Path.isPath(at2) ? matchPath(editor, at2) : (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2);
      }
      var toRef = Editor$2.pathRef(editor, to2);
      var targets = Editor$2.nodes(editor, {
        at: at2,
        match: match2,
        mode,
        voids
      });
      var pathRefs2 = Array.from(targets, (_ref) => {
        var [, p2] = _ref;
        return Editor$2.pathRef(editor, p2);
      });
      for (var pathRef2 of pathRefs2) {
        var path2 = pathRef2.unref();
        var newPath = toRef.current;
        if (path2.length !== 0) {
          editor.apply({
            type: "move_node",
            path: path2,
            newPath
          });
        }
        if (toRef.current && Path.isSibling(newPath, path2) && Path.isAfter(newPath, path2)) {
          toRef.current = Path.next(toRef.current);
        }
      }
      toRef.unref();
    });
  };
  var removeNodes$1 = function removeNodes2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Editor$2.withoutNormalizing(editor, () => {
      var {
        hanging = false,
        voids = false,
        mode = "lowest"
      } = options;
      var {
        at: at2 = editor.selection,
        match: match2
      } = options;
      if (!at2) {
        return;
      }
      if (match2 == null) {
        match2 = Path.isPath(at2) ? matchPath(editor, at2) : (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2);
      }
      if (!hanging && Range.isRange(at2)) {
        at2 = Editor$2.unhangRange(editor, at2, {
          voids
        });
      }
      var depths = Editor$2.nodes(editor, {
        at: at2,
        match: match2,
        mode,
        voids
      });
      var pathRefs2 = Array.from(depths, (_ref) => {
        var [, p2] = _ref;
        return Editor$2.pathRef(editor, p2);
      });
      for (var pathRef2 of pathRefs2) {
        var path2 = pathRef2.unref();
        if (path2) {
          var [node2] = Editor$2.node(editor, path2);
          editor.apply({
            type: "remove_node",
            path: path2,
            node: node2
          });
        }
      }
    });
  };
  var setNodes$1 = function setNodes2(editor, props) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    Editor$2.withoutNormalizing(editor, () => {
      var {
        match: match2,
        at: at2 = editor.selection,
        compare,
        merge: merge2
      } = options;
      var {
        hanging = false,
        mode = "lowest",
        split = false,
        voids = false
      } = options;
      if (!at2) {
        return;
      }
      if (match2 == null) {
        match2 = Path.isPath(at2) ? matchPath(editor, at2) : (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2);
      }
      if (!hanging && Range.isRange(at2)) {
        at2 = Editor$2.unhangRange(editor, at2, {
          voids
        });
      }
      if (split && Range.isRange(at2)) {
        if (Range.isCollapsed(at2) && Editor$2.leaf(editor, at2.anchor)[0].text.length > 0) {
          return;
        }
        var rangeRef2 = Editor$2.rangeRef(editor, at2, {
          affinity: "inward"
        });
        var [start2, end2] = Range.edges(at2);
        var splitMode = mode === "lowest" ? "lowest" : "highest";
        var endAtEndOfNode = Editor$2.isEnd(editor, end2, end2.path);
        Transforms.splitNodes(editor, {
          at: end2,
          match: match2,
          mode: splitMode,
          voids,
          always: !endAtEndOfNode
        });
        var startAtStartOfNode = Editor$2.isStart(editor, start2, start2.path);
        Transforms.splitNodes(editor, {
          at: start2,
          match: match2,
          mode: splitMode,
          voids,
          always: !startAtStartOfNode
        });
        at2 = rangeRef2.unref();
        if (options.at == null) {
          Transforms.select(editor, at2);
        }
      }
      if (!compare) {
        compare = (prop2, nodeProp) => prop2 !== nodeProp;
      }
      for (var [node2, path2] of Editor$2.nodes(editor, {
        at: at2,
        match: match2,
        mode,
        voids
      })) {
        var properties2 = {};
        var newProperties = {};
        if (path2.length === 0) {
          continue;
        }
        var hasChanges = false;
        for (var k in props) {
          if (k === "children" || k === "text") {
            continue;
          }
          if (compare(props[k], node2[k])) {
            hasChanges = true;
            if (node2.hasOwnProperty(k))
              properties2[k] = node2[k];
            if (merge2) {
              if (props[k] != null)
                newProperties[k] = merge2(node2[k], props[k]);
            } else {
              if (props[k] != null)
                newProperties[k] = props[k];
            }
          }
        }
        if (hasChanges) {
          editor.apply({
            type: "set_node",
            path: path2,
            properties: properties2,
            newProperties
          });
        }
      }
    });
  };
  var deleteRange = (editor, range2) => {
    if (Range.isCollapsed(range2)) {
      return range2.anchor;
    } else {
      var [, end2] = Range.edges(range2);
      var pointRef2 = Editor$2.pointRef(editor, end2);
      Transforms.delete(editor, {
        at: range2
      });
      return pointRef2.unref();
    }
  };
  var splitNodes$1 = function splitNodes2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Editor$2.withoutNormalizing(editor, () => {
      var {
        mode = "lowest",
        voids = false
      } = options;
      var {
        match: match2,
        at: at2 = editor.selection,
        height = 0,
        always = false
      } = options;
      if (match2 == null) {
        match2 = (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2);
      }
      if (Range.isRange(at2)) {
        at2 = deleteRange(editor, at2);
      }
      if (Path.isPath(at2)) {
        var path2 = at2;
        var point2 = Editor$2.point(editor, path2);
        var [parent2] = Editor$2.parent(editor, path2);
        match2 = (n2) => n2 === parent2;
        height = point2.path.length - path2.length + 1;
        at2 = point2;
        always = true;
      }
      if (!at2) {
        return;
      }
      var beforeRef = Editor$2.pointRef(editor, at2, {
        affinity: "backward"
      });
      var afterRef;
      try {
        var [highest] = Editor$2.nodes(editor, {
          at: at2,
          match: match2,
          mode,
          voids
        });
        if (!highest) {
          return;
        }
        var voidMatch = Editor$2.void(editor, {
          at: at2,
          mode: "highest"
        });
        var nudge = 0;
        if (!voids && voidMatch) {
          var [voidNode, voidPath] = voidMatch;
          if (Element$2.isElement(voidNode) && editor.isInline(voidNode)) {
            var after2 = Editor$2.after(editor, voidPath);
            if (!after2) {
              var text = {
                text: ""
              };
              var afterPath = Path.next(voidPath);
              Transforms.insertNodes(editor, text, {
                at: afterPath,
                voids
              });
              after2 = Editor$2.point(editor, afterPath);
            }
            at2 = after2;
            always = true;
          }
          var siblingHeight = at2.path.length - voidPath.length;
          height = siblingHeight + 1;
          always = true;
        }
        afterRef = Editor$2.pointRef(editor, at2);
        var depth = at2.path.length - height;
        var [, highestPath] = highest;
        var lowestPath = at2.path.slice(0, depth);
        var position = height === 0 ? at2.offset : at2.path[depth] + nudge;
        for (var [node2, _path] of Editor$2.levels(editor, {
          at: lowestPath,
          reverse: true,
          voids
        })) {
          var split = false;
          if (_path.length < highestPath.length || _path.length === 0 || !voids && Element$2.isElement(node2) && Editor$2.isVoid(editor, node2)) {
            break;
          }
          var _point = beforeRef.current;
          var isEnd2 = Editor$2.isEnd(editor, _point, _path);
          if (always || !beforeRef || !Editor$2.isEdge(editor, _point, _path)) {
            split = true;
            var properties2 = Node$1.extractProps(node2);
            editor.apply({
              type: "split_node",
              path: _path,
              position,
              properties: properties2
            });
          }
          position = _path[_path.length - 1] + (split || isEnd2 ? 1 : 0);
        }
        if (options.at == null) {
          var _point2 = afterRef.current || Editor$2.end(editor, []);
          Transforms.select(editor, _point2);
        }
      } finally {
        var _afterRef;
        beforeRef.unref();
        (_afterRef = afterRef) === null || _afterRef === void 0 || _afterRef.unref();
      }
    });
  };
  var unsetNodes$1 = function unsetNodes2(editor, props) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    if (!Array.isArray(props)) {
      props = [props];
    }
    var obj = {};
    for (var key of props) {
      obj[key] = null;
    }
    Transforms.setNodes(editor, obj, options);
  };
  var unwrapNodes$1 = function unwrapNodes2(editor) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    Editor$2.withoutNormalizing(editor, () => {
      var {
        mode = "lowest",
        split = false,
        voids = false
      } = options;
      var {
        at: at2 = editor.selection,
        match: match2
      } = options;
      if (!at2) {
        return;
      }
      if (match2 == null) {
        match2 = Path.isPath(at2) ? matchPath(editor, at2) : (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2);
      }
      if (Path.isPath(at2)) {
        at2 = Editor$2.range(editor, at2);
      }
      var rangeRef2 = Range.isRange(at2) ? Editor$2.rangeRef(editor, at2) : null;
      var matches = Editor$2.nodes(editor, {
        at: at2,
        match: match2,
        mode,
        voids
      });
      var pathRefs2 = Array.from(
        matches,
        (_ref) => {
          var [, p2] = _ref;
          return Editor$2.pathRef(editor, p2);
        }
        // unwrapNode will call liftNode which does not support splitting the node when nested.
        // If we do not reverse the order and call it from top to the bottom, it will remove all blocks
        // that wrap target node. So we reverse the order.
      ).reverse();
      var _loop = function _loop2() {
        var path2 = pathRef2.unref();
        var [node2] = Editor$2.node(editor, path2);
        var range2 = Editor$2.range(editor, path2);
        if (split && rangeRef2) {
          range2 = Range.intersection(rangeRef2.current, range2);
        }
        Transforms.liftNodes(editor, {
          at: range2,
          match: (n2) => Element$2.isAncestor(node2) && node2.children.includes(n2),
          voids
        });
      };
      for (var pathRef2 of pathRefs2) {
        _loop();
      }
      if (rangeRef2) {
        rangeRef2.unref();
      }
    });
  };
  function ownKeys$f(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$f(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$f(Object(t2), true).forEach(function(r3) {
        _defineProperty$5(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$f(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var wrapNodes$1 = function wrapNodes2(editor, element) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    Editor$2.withoutNormalizing(editor, () => {
      var {
        mode = "lowest",
        split = false,
        voids = false
      } = options;
      var {
        match: match2,
        at: at2 = editor.selection
      } = options;
      if (!at2) {
        return;
      }
      if (match2 == null) {
        if (Path.isPath(at2)) {
          match2 = matchPath(editor, at2);
        } else if (editor.isInline(element)) {
          match2 = (n2) => Element$2.isElement(n2) && Editor$2.isInline(editor, n2) || Text$1.isText(n2);
        } else {
          match2 = (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2);
        }
      }
      if (split && Range.isRange(at2)) {
        var [start2, end2] = Range.edges(at2);
        var rangeRef2 = Editor$2.rangeRef(editor, at2, {
          affinity: "inward"
        });
        Transforms.splitNodes(editor, {
          at: end2,
          match: match2,
          voids
        });
        Transforms.splitNodes(editor, {
          at: start2,
          match: match2,
          voids
        });
        at2 = rangeRef2.unref();
        if (options.at == null) {
          Transforms.select(editor, at2);
        }
      }
      var roots = Array.from(Editor$2.nodes(editor, {
        at: at2,
        match: editor.isInline(element) ? (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2) : (n2) => Editor$2.isEditor(n2),
        mode: "lowest",
        voids
      }));
      var _loop = function _loop2() {
        var a2 = Range.isRange(at2) ? Range.intersection(at2, Editor$2.range(editor, rootPath)) : at2;
        if (!a2) {
          return 0;
        }
        var matches = Array.from(Editor$2.nodes(editor, {
          at: a2,
          match: match2,
          mode,
          voids
        }));
        if (matches.length > 0) {
          var [first2] = matches;
          var last2 = matches[matches.length - 1];
          var [, firstPath] = first2;
          var [, lastPath] = last2;
          if (firstPath.length === 0 && lastPath.length === 0) {
            return 0;
          }
          var commonPath = Path.equals(firstPath, lastPath) ? Path.parent(firstPath) : Path.common(firstPath, lastPath);
          var range2 = Editor$2.range(editor, firstPath, lastPath);
          var commonNodeEntry = Editor$2.node(editor, commonPath);
          var [commonNode] = commonNodeEntry;
          var depth = commonPath.length + 1;
          var wrapperPath = Path.next(lastPath.slice(0, depth));
          var wrapper = _objectSpread$f(_objectSpread$f({}, element), {}, {
            children: []
          });
          Transforms.insertNodes(editor, wrapper, {
            at: wrapperPath,
            voids
          });
          Transforms.moveNodes(editor, {
            at: range2,
            match: (n2) => Element$2.isAncestor(commonNode) && commonNode.children.includes(n2),
            to: wrapperPath.concat(0),
            voids
          });
        }
      }, _ret;
      for (var [, rootPath] of roots) {
        _ret = _loop();
        if (_ret === 0)
          continue;
      }
    });
  };
  var createEditor$2 = () => {
    var editor = {
      children: [],
      operations: [],
      selection: null,
      marks: null,
      isElementReadOnly: () => false,
      isInline: () => false,
      isSelectable: () => true,
      isVoid: () => false,
      markableVoid: () => false,
      onChange: () => {
      },
      // Core
      apply: function apply$12() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return apply$2(editor, ...args);
      },
      // Editor
      addMark: function addMark$1$1() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return addMark$1(editor, ...args);
      },
      deleteBackward: function deleteBackward$1$1() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        return deleteBackward$1(editor, ...args);
      },
      deleteForward: function deleteForward$1$1() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        return deleteForward$1(editor, ...args);
      },
      deleteFragment: function deleteFragment$1$1() {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }
        return deleteFragment$1(editor, ...args);
      },
      getFragment: function getFragment$1$1() {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }
        return getFragment$1(editor, ...args);
      },
      insertBreak: function insertBreak$1$1() {
        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }
        return insertBreak$1(editor, ...args);
      },
      insertSoftBreak: function insertSoftBreak$1() {
        for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
          args[_key8] = arguments[_key8];
        }
        return insertSoftBreak(editor, ...args);
      },
      insertFragment: function insertFragment$1$1() {
        for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
          args[_key9] = arguments[_key9];
        }
        return insertFragment$1(editor, ...args);
      },
      insertNode: function insertNode$1$1() {
        for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
          args[_key10] = arguments[_key10];
        }
        return insertNode$1(editor, ...args);
      },
      insertText: function insertText$1$1() {
        for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
          args[_key11] = arguments[_key11];
        }
        return insertText$1(editor, ...args);
      },
      normalizeNode: function normalizeNode$1() {
        for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
          args[_key12] = arguments[_key12];
        }
        return normalizeNode(editor, ...args);
      },
      removeMark: function removeMark$1() {
        for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
          args[_key13] = arguments[_key13];
        }
        return removeMark(editor, ...args);
      },
      getDirtyPaths: function getDirtyPaths$1() {
        for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
          args[_key14] = arguments[_key14];
        }
        return getDirtyPaths(editor, ...args);
      },
      shouldNormalize: function shouldNormalize$1() {
        for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
          args[_key15] = arguments[_key15];
        }
        return shouldNormalize(editor, ...args);
      },
      // Editor interface
      above: function above$1$1() {
        for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
          args[_key16] = arguments[_key16];
        }
        return above$1(editor, ...args);
      },
      after: function after$1() {
        for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
          args[_key17] = arguments[_key17];
        }
        return after(editor, ...args);
      },
      before: function before$1() {
        for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
          args[_key18] = arguments[_key18];
        }
        return before(editor, ...args);
      },
      collapse: function collapse$1() {
        for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
          args[_key19] = arguments[_key19];
        }
        return collapse(editor, ...args);
      },
      delete: function _delete() {
        for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
          args[_key20] = arguments[_key20];
        }
        return deleteText$1(editor, ...args);
      },
      deselect: function deselect$1$1() {
        for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {
          args[_key21] = arguments[_key21];
        }
        return deselect$1(editor, ...args);
      },
      edges: function edges$1() {
        for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {
          args[_key22] = arguments[_key22];
        }
        return edges(editor, ...args);
      },
      elementReadOnly: function elementReadOnly$1() {
        for (var _len23 = arguments.length, args = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {
          args[_key23] = arguments[_key23];
        }
        return elementReadOnly(editor, ...args);
      },
      end: function end$1() {
        for (var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {
          args[_key24] = arguments[_key24];
        }
        return end(editor, ...args);
      },
      first: function first$1() {
        for (var _len25 = arguments.length, args = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {
          args[_key25] = arguments[_key25];
        }
        return first(editor, ...args);
      },
      fragment: function fragment$1() {
        for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {
          args[_key26] = arguments[_key26];
        }
        return fragment(editor, ...args);
      },
      getMarks: function getMarks2() {
        for (var _len27 = arguments.length, args = new Array(_len27), _key27 = 0; _key27 < _len27; _key27++) {
          args[_key27] = arguments[_key27];
        }
        return marks(editor, ...args);
      },
      hasBlocks: function hasBlocks$1$1() {
        for (var _len28 = arguments.length, args = new Array(_len28), _key28 = 0; _key28 < _len28; _key28++) {
          args[_key28] = arguments[_key28];
        }
        return hasBlocks$1(editor, ...args);
      },
      hasInlines: function hasInlines$1$1() {
        for (var _len29 = arguments.length, args = new Array(_len29), _key29 = 0; _key29 < _len29; _key29++) {
          args[_key29] = arguments[_key29];
        }
        return hasInlines$1(editor, ...args);
      },
      hasPath: function hasPath$12() {
        for (var _len30 = arguments.length, args = new Array(_len30), _key30 = 0; _key30 < _len30; _key30++) {
          args[_key30] = arguments[_key30];
        }
        return hasPath$2(editor, ...args);
      },
      hasTexts: function hasTexts$1$1() {
        for (var _len31 = arguments.length, args = new Array(_len31), _key31 = 0; _key31 < _len31; _key31++) {
          args[_key31] = arguments[_key31];
        }
        return hasTexts$1(editor, ...args);
      },
      insertNodes: function insertNodes$1$1() {
        for (var _len32 = arguments.length, args = new Array(_len32), _key32 = 0; _key32 < _len32; _key32++) {
          args[_key32] = arguments[_key32];
        }
        return insertNodes$1(editor, ...args);
      },
      isBlock: function isBlock$1$1() {
        for (var _len33 = arguments.length, args = new Array(_len33), _key33 = 0; _key33 < _len33; _key33++) {
          args[_key33] = arguments[_key33];
        }
        return isBlock$1(editor, ...args);
      },
      isEdge: function isEdge$1() {
        for (var _len34 = arguments.length, args = new Array(_len34), _key34 = 0; _key34 < _len34; _key34++) {
          args[_key34] = arguments[_key34];
        }
        return isEdge(editor, ...args);
      },
      isEmpty: function isEmpty$1$1() {
        for (var _len35 = arguments.length, args = new Array(_len35), _key35 = 0; _key35 < _len35; _key35++) {
          args[_key35] = arguments[_key35];
        }
        return isEmpty$1(editor, ...args);
      },
      isEnd: function isEnd$1() {
        for (var _len36 = arguments.length, args = new Array(_len36), _key36 = 0; _key36 < _len36; _key36++) {
          args[_key36] = arguments[_key36];
        }
        return isEnd(editor, ...args);
      },
      isNormalizing: function isNormalizing$1() {
        for (var _len37 = arguments.length, args = new Array(_len37), _key37 = 0; _key37 < _len37; _key37++) {
          args[_key37] = arguments[_key37];
        }
        return isNormalizing(editor, ...args);
      },
      isStart: function isStart$1() {
        for (var _len38 = arguments.length, args = new Array(_len38), _key38 = 0; _key38 < _len38; _key38++) {
          args[_key38] = arguments[_key38];
        }
        return isStart(editor, ...args);
      },
      last: function last$12() {
        for (var _len39 = arguments.length, args = new Array(_len39), _key39 = 0; _key39 < _len39; _key39++) {
          args[_key39] = arguments[_key39];
        }
        return last$3(editor, ...args);
      },
      leaf: function leaf$1$1() {
        for (var _len40 = arguments.length, args = new Array(_len40), _key40 = 0; _key40 < _len40; _key40++) {
          args[_key40] = arguments[_key40];
        }
        return leaf$1(editor, ...args);
      },
      levels: function levels$1() {
        for (var _len41 = arguments.length, args = new Array(_len41), _key41 = 0; _key41 < _len41; _key41++) {
          args[_key41] = arguments[_key41];
        }
        return levels(editor, ...args);
      },
      liftNodes: function liftNodes$1$1() {
        for (var _len42 = arguments.length, args = new Array(_len42), _key42 = 0; _key42 < _len42; _key42++) {
          args[_key42] = arguments[_key42];
        }
        return liftNodes$1(editor, ...args);
      },
      mergeNodes: function mergeNodes$1$1() {
        for (var _len43 = arguments.length, args = new Array(_len43), _key43 = 0; _key43 < _len43; _key43++) {
          args[_key43] = arguments[_key43];
        }
        return mergeNodes$1(editor, ...args);
      },
      move: function move$1() {
        for (var _len44 = arguments.length, args = new Array(_len44), _key44 = 0; _key44 < _len44; _key44++) {
          args[_key44] = arguments[_key44];
        }
        return move(editor, ...args);
      },
      moveNodes: function moveNodes$1$1() {
        for (var _len45 = arguments.length, args = new Array(_len45), _key45 = 0; _key45 < _len45; _key45++) {
          args[_key45] = arguments[_key45];
        }
        return moveNodes$1(editor, ...args);
      },
      next: function next$1$1() {
        for (var _len46 = arguments.length, args = new Array(_len46), _key46 = 0; _key46 < _len46; _key46++) {
          args[_key46] = arguments[_key46];
        }
        return next$1(editor, ...args);
      },
      node: function node$1$1() {
        for (var _len47 = arguments.length, args = new Array(_len47), _key47 = 0; _key47 < _len47; _key47++) {
          args[_key47] = arguments[_key47];
        }
        return node$1(editor, ...args);
      },
      nodes: function nodes$1$1() {
        for (var _len48 = arguments.length, args = new Array(_len48), _key48 = 0; _key48 < _len48; _key48++) {
          args[_key48] = arguments[_key48];
        }
        return nodes$1(editor, ...args);
      },
      normalize: function normalize$12() {
        for (var _len49 = arguments.length, args = new Array(_len49), _key49 = 0; _key49 < _len49; _key49++) {
          args[_key49] = arguments[_key49];
        }
        return normalize$2(editor, ...args);
      },
      parent: function parent$12() {
        for (var _len50 = arguments.length, args = new Array(_len50), _key50 = 0; _key50 < _len50; _key50++) {
          args[_key50] = arguments[_key50];
        }
        return parent$3(editor, ...args);
      },
      path: function path$1$1() {
        for (var _len51 = arguments.length, args = new Array(_len51), _key51 = 0; _key51 < _len51; _key51++) {
          args[_key51] = arguments[_key51];
        }
        return path$1(editor, ...args);
      },
      pathRef: function pathRef$1() {
        for (var _len52 = arguments.length, args = new Array(_len52), _key52 = 0; _key52 < _len52; _key52++) {
          args[_key52] = arguments[_key52];
        }
        return pathRef(editor, ...args);
      },
      pathRefs: function pathRefs$1() {
        for (var _len53 = arguments.length, args = new Array(_len53), _key53 = 0; _key53 < _len53; _key53++) {
          args[_key53] = arguments[_key53];
        }
        return pathRefs(editor, ...args);
      },
      point: function point$1() {
        for (var _len54 = arguments.length, args = new Array(_len54), _key54 = 0; _key54 < _len54; _key54++) {
          args[_key54] = arguments[_key54];
        }
        return point(editor, ...args);
      },
      pointRef: function pointRef$1() {
        for (var _len55 = arguments.length, args = new Array(_len55), _key55 = 0; _key55 < _len55; _key55++) {
          args[_key55] = arguments[_key55];
        }
        return pointRef(editor, ...args);
      },
      pointRefs: function pointRefs$1() {
        for (var _len56 = arguments.length, args = new Array(_len56), _key56 = 0; _key56 < _len56; _key56++) {
          args[_key56] = arguments[_key56];
        }
        return pointRefs(editor, ...args);
      },
      positions: function positions$1() {
        for (var _len57 = arguments.length, args = new Array(_len57), _key57 = 0; _key57 < _len57; _key57++) {
          args[_key57] = arguments[_key57];
        }
        return positions(editor, ...args);
      },
      previous: function previous$1$1() {
        for (var _len58 = arguments.length, args = new Array(_len58), _key58 = 0; _key58 < _len58; _key58++) {
          args[_key58] = arguments[_key58];
        }
        return previous$1(editor, ...args);
      },
      range: function range$1$1() {
        for (var _len59 = arguments.length, args = new Array(_len59), _key59 = 0; _key59 < _len59; _key59++) {
          args[_key59] = arguments[_key59];
        }
        return range$1(editor, ...args);
      },
      rangeRef: function rangeRef$1() {
        for (var _len60 = arguments.length, args = new Array(_len60), _key60 = 0; _key60 < _len60; _key60++) {
          args[_key60] = arguments[_key60];
        }
        return rangeRef(editor, ...args);
      },
      rangeRefs: function rangeRefs$1() {
        for (var _len61 = arguments.length, args = new Array(_len61), _key61 = 0; _key61 < _len61; _key61++) {
          args[_key61] = arguments[_key61];
        }
        return rangeRefs(editor, ...args);
      },
      removeNodes: function removeNodes$1$1() {
        for (var _len62 = arguments.length, args = new Array(_len62), _key62 = 0; _key62 < _len62; _key62++) {
          args[_key62] = arguments[_key62];
        }
        return removeNodes$1(editor, ...args);
      },
      select: function select$1$1() {
        for (var _len63 = arguments.length, args = new Array(_len63), _key63 = 0; _key63 < _len63; _key63++) {
          args[_key63] = arguments[_key63];
        }
        return select$1(editor, ...args);
      },
      setNodes: function setNodes$1$1() {
        for (var _len64 = arguments.length, args = new Array(_len64), _key64 = 0; _key64 < _len64; _key64++) {
          args[_key64] = arguments[_key64];
        }
        return setNodes$1(editor, ...args);
      },
      setNormalizing: function setNormalizing$1() {
        for (var _len65 = arguments.length, args = new Array(_len65), _key65 = 0; _key65 < _len65; _key65++) {
          args[_key65] = arguments[_key65];
        }
        return setNormalizing(editor, ...args);
      },
      setPoint: function setPoint$1$1() {
        for (var _len66 = arguments.length, args = new Array(_len66), _key66 = 0; _key66 < _len66; _key66++) {
          args[_key66] = arguments[_key66];
        }
        return setPoint$1(editor, ...args);
      },
      setSelection: function setSelection$1$1() {
        for (var _len67 = arguments.length, args = new Array(_len67), _key67 = 0; _key67 < _len67; _key67++) {
          args[_key67] = arguments[_key67];
        }
        return setSelection$1(editor, ...args);
      },
      splitNodes: function splitNodes$1$1() {
        for (var _len68 = arguments.length, args = new Array(_len68), _key68 = 0; _key68 < _len68; _key68++) {
          args[_key68] = arguments[_key68];
        }
        return splitNodes$1(editor, ...args);
      },
      start: function start$1() {
        for (var _len69 = arguments.length, args = new Array(_len69), _key69 = 0; _key69 < _len69; _key69++) {
          args[_key69] = arguments[_key69];
        }
        return start(editor, ...args);
      },
      string: function string$1() {
        for (var _len70 = arguments.length, args = new Array(_len70), _key70 = 0; _key70 < _len70; _key70++) {
          args[_key70] = arguments[_key70];
        }
        return string(editor, ...args);
      },
      unhangRange: function unhangRange$1$1() {
        for (var _len71 = arguments.length, args = new Array(_len71), _key71 = 0; _key71 < _len71; _key71++) {
          args[_key71] = arguments[_key71];
        }
        return unhangRange$1(editor, ...args);
      },
      unsetNodes: function unsetNodes$1$1() {
        for (var _len72 = arguments.length, args = new Array(_len72), _key72 = 0; _key72 < _len72; _key72++) {
          args[_key72] = arguments[_key72];
        }
        return unsetNodes$1(editor, ...args);
      },
      unwrapNodes: function unwrapNodes$1$1() {
        for (var _len73 = arguments.length, args = new Array(_len73), _key73 = 0; _key73 < _len73; _key73++) {
          args[_key73] = arguments[_key73];
        }
        return unwrapNodes$1(editor, ...args);
      },
      void: function _void() {
        for (var _len74 = arguments.length, args = new Array(_len74), _key74 = 0; _key74 < _len74; _key74++) {
          args[_key74] = arguments[_key74];
        }
        return getVoid(editor, ...args);
      },
      withoutNormalizing: function withoutNormalizing$1$1() {
        for (var _len75 = arguments.length, args = new Array(_len75), _key75 = 0; _key75 < _len75; _key75++) {
          args[_key75] = arguments[_key75];
        }
        return withoutNormalizing$1(editor, ...args);
      },
      wrapNodes: function wrapNodes$1$1() {
        for (var _len76 = arguments.length, args = new Array(_len76), _key76 = 0; _key76 < _len76; _key76++) {
          args[_key76] = arguments[_key76];
        }
        return wrapNodes$1(editor, ...args);
      },
      shouldMergeNodesRemovePrevNode: function shouldMergeNodesRemovePrevNode$1() {
        for (var _len77 = arguments.length, args = new Array(_len77), _key77 = 0; _key77 < _len77; _key77++) {
          args[_key77] = arguments[_key77];
        }
        return shouldMergeNodesRemovePrevNode(editor, ...args);
      }
    };
    return editor;
  };
  var DOMNode = globalThis.Node;
  var DOMText = globalThis.Text;
  var getDefaultView = (value) => {
    return value && value.ownerDocument && value.ownerDocument.defaultView || null;
  };
  var isDOMComment = (value) => {
    return isDOMNode(value) && value.nodeType === 8;
  };
  var isDOMElement = (value) => {
    return isDOMNode(value) && value.nodeType === 1;
  };
  var isDOMNode = (value) => {
    var window2 = getDefaultView(value);
    return !!window2 && value instanceof window2.Node;
  };
  var isDOMSelection = (value) => {
    var window2 = value && value.anchorNode && getDefaultView(value.anchorNode);
    return !!window2 && value instanceof window2.Selection;
  };
  var isDOMText = (value) => {
    return isDOMNode(value) && value.nodeType === 3;
  };
  var isPlainTextOnlyPaste = (event) => {
    return event.clipboardData && event.clipboardData.getData("text/plain") !== "" && event.clipboardData.types.length === 1;
  };
  var normalizeDOMPoint = (domPoint) => {
    var [node2, offset] = domPoint;
    if (isDOMElement(node2) && node2.childNodes.length) {
      var isLast = offset === node2.childNodes.length;
      var index = isLast ? offset - 1 : offset;
      [node2, index] = getEditableChildAndIndex(node2, index, isLast ? "backward" : "forward");
      isLast = index < offset;
      while (isDOMElement(node2) && node2.childNodes.length) {
        var i2 = isLast ? node2.childNodes.length - 1 : 0;
        node2 = getEditableChild(node2, i2, isLast ? "backward" : "forward");
      }
      offset = isLast && node2.textContent != null ? node2.textContent.length : 0;
    }
    return [node2, offset];
  };
  var hasShadowRoot = (node2) => {
    var parent2 = node2 && node2.parentNode;
    while (parent2) {
      if (parent2.toString() === "[object ShadowRoot]") {
        return true;
      }
      parent2 = parent2.parentNode;
    }
    return false;
  };
  var getEditableChildAndIndex = (parent2, index, direction2) => {
    var {
      childNodes
    } = parent2;
    var child = childNodes[index];
    var i2 = index;
    var triedForward = false;
    var triedBackward = false;
    while (isDOMComment(child) || isDOMElement(child) && child.childNodes.length === 0 || isDOMElement(child) && child.getAttribute("contenteditable") === "false") {
      if (triedForward && triedBackward) {
        break;
      }
      if (i2 >= childNodes.length) {
        triedForward = true;
        i2 = index - 1;
        direction2 = "backward";
        continue;
      }
      if (i2 < 0) {
        triedBackward = true;
        i2 = index + 1;
        direction2 = "forward";
        continue;
      }
      child = childNodes[i2];
      index = i2;
      i2 += direction2 === "forward" ? 1 : -1;
    }
    return [child, index];
  };
  var getEditableChild = (parent2, index, direction2) => {
    var [child] = getEditableChildAndIndex(parent2, index, direction2);
    return child;
  };
  var getPlainText = (domNode) => {
    var text = "";
    if (isDOMText(domNode) && domNode.nodeValue) {
      return domNode.nodeValue;
    }
    if (isDOMElement(domNode)) {
      for (var childNode of Array.from(domNode.childNodes)) {
        text += getPlainText(childNode);
      }
      var display = getComputedStyle(domNode).getPropertyValue("display");
      if (display === "block" || display === "list" || domNode.tagName === "BR") {
        text += "\n";
      }
    }
    return text;
  };
  var catchSlateFragment = /data-slate-fragment="(.+?)"/m;
  var getSlateFragmentAttribute = (dataTransfer) => {
    var htmlData = dataTransfer.getData("text/html");
    var [, fragment2] = htmlData.match(catchSlateFragment) || [];
    return fragment2;
  };
  var getSelection = (root2) => {
    if (root2.getSelection != null) {
      return root2.getSelection();
    }
    return document.getSelection();
  };
  var isTrackedMutation = (editor, mutation, batch) => {
    var {
      target
    } = mutation;
    if (isDOMElement(target) && target.matches('[contentEditable="false"]')) {
      return false;
    }
    var {
      document: document2
    } = DOMEditor.getWindow(editor);
    if (document2.contains(target)) {
      return DOMEditor.hasDOMNode(editor, target, {
        editable: true
      });
    }
    var parentMutation = batch.find((_ref) => {
      var {
        addedNodes,
        removedNodes
      } = _ref;
      for (var node2 of addedNodes) {
        if (node2 === target || node2.contains(target)) {
          return true;
        }
      }
      for (var _node of removedNodes) {
        if (_node === target || _node.contains(target)) {
          return true;
        }
      }
    });
    if (!parentMutation || parentMutation === mutation) {
      return false;
    }
    return isTrackedMutation(editor, parentMutation, batch);
  };
  var getActiveElement = () => {
    var activeElement = document.activeElement;
    while ((_activeElement = activeElement) !== null && _activeElement !== void 0 && _activeElement.shadowRoot && (_activeElement$shadow = activeElement.shadowRoot) !== null && _activeElement$shadow !== void 0 && _activeElement$shadow.activeElement) {
      var _activeElement, _activeElement$shadow, _activeElement2;
      activeElement = (_activeElement2 = activeElement) === null || _activeElement2 === void 0 || (_activeElement2 = _activeElement2.shadowRoot) === null || _activeElement2 === void 0 ? void 0 : _activeElement2.activeElement;
    }
    return activeElement;
  };
  var isBefore = (node2, otherNode) => Boolean(node2.compareDocumentPosition(otherNode) & DOMNode.DOCUMENT_POSITION_PRECEDING);
  var isAfter = (node2, otherNode) => Boolean(node2.compareDocumentPosition(otherNode) & DOMNode.DOCUMENT_POSITION_FOLLOWING);
  var _navigator$userAgent$, _navigator$userAgent$2;
  var IS_IOS = typeof navigator !== "undefined" && typeof window !== "undefined" && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
  var IS_APPLE = typeof navigator !== "undefined" && /Mac OS X/.test(navigator.userAgent);
  var IS_ANDROID = typeof navigator !== "undefined" && /Android/.test(navigator.userAgent);
  var IS_FIREFOX = typeof navigator !== "undefined" && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);
  var IS_WEBKIT = typeof navigator !== "undefined" && /AppleWebKit(?!.*Chrome)/i.test(navigator.userAgent);
  var IS_EDGE_LEGACY = typeof navigator !== "undefined" && /Edge?\/(?:[0-6][0-9]|[0-7][0-8])(?:\.)/i.test(navigator.userAgent);
  var IS_CHROME = typeof navigator !== "undefined" && /Chrome/i.test(navigator.userAgent);
  var IS_CHROME_LEGACY = typeof navigator !== "undefined" && /Chrome?\/(?:[0-7][0-5]|[0-6][0-9])(?:\.)/i.test(navigator.userAgent);
  var IS_ANDROID_CHROME_LEGACY = IS_ANDROID && typeof navigator !== "undefined" && /Chrome?\/(?:[0-5]?\d)(?:\.)/i.test(navigator.userAgent);
  var IS_FIREFOX_LEGACY = typeof navigator !== "undefined" && /^(?!.*Seamonkey)(?=.*Firefox\/(?:[0-7][0-9]|[0-8][0-6])(?:\.)).*/i.test(navigator.userAgent);
  var IS_UC_MOBILE = typeof navigator !== "undefined" && /.*UCBrowser/.test(navigator.userAgent);
  var IS_WECHATBROWSER = typeof navigator !== "undefined" && /.*Wechat/.test(navigator.userAgent) && !/.*MacWechat/.test(navigator.userAgent);
  var CAN_USE_DOM$1 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
  typeof navigator !== "undefined" && /Safari/.test(navigator.userAgent) && /Version\/(\d+)/.test(navigator.userAgent) && ((_navigator$userAgent$ = navigator.userAgent.match(/Version\/(\d+)/)) !== null && _navigator$userAgent$ !== void 0 && _navigator$userAgent$[1] ? parseInt((_navigator$userAgent$2 = navigator.userAgent.match(/Version\/(\d+)/)) === null || _navigator$userAgent$2 === void 0 ? void 0 : _navigator$userAgent$2[1], 10) < 17 : false);
  var HAS_BEFORE_INPUT_SUPPORT = (!IS_CHROME_LEGACY || !IS_ANDROID_CHROME_LEGACY) && !IS_EDGE_LEGACY && // globalThis is undefined in older browsers
  typeof globalThis !== "undefined" && globalThis.InputEvent && // @ts-ignore The `getTargetRanges` property isn't recognized.
  typeof globalThis.InputEvent.prototype.getTargetRanges === "function";
  function _typeof$3(o3) {
    "@babel/helpers - typeof";
    return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o4) {
      return typeof o4;
    } : function(o4) {
      return o4 && "function" == typeof Symbol && o4.constructor === Symbol && o4 !== Symbol.prototype ? "symbol" : typeof o4;
    }, _typeof$3(o3);
  }
  function _toPrimitive$3(input, hint) {
    if (_typeof$3(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof$3(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey$3(arg) {
    var key = _toPrimitive$3(arg, "string");
    return _typeof$3(key) === "symbol" ? key : String(key);
  }
  function _defineProperty$4(obj, key, value) {
    key = _toPropertyKey$3(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var n$2 = 0;
  let Key$1 = class Key {
    constructor() {
      _defineProperty$4(this, "id", void 0);
      this.id = "".concat(n$2++);
    }
  };
  var IS_NODE_MAP_DIRTY = /* @__PURE__ */ new WeakMap();
  var NODE_TO_INDEX = /* @__PURE__ */ new WeakMap();
  var NODE_TO_PARENT = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_WINDOW = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_ELEMENT = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_PLACEHOLDER_ELEMENT = /* @__PURE__ */ new WeakMap();
  var ELEMENT_TO_NODE = /* @__PURE__ */ new WeakMap();
  var NODE_TO_ELEMENT = /* @__PURE__ */ new WeakMap();
  var NODE_TO_KEY = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_KEY_TO_ELEMENT = /* @__PURE__ */ new WeakMap();
  var IS_READ_ONLY = /* @__PURE__ */ new WeakMap();
  var IS_FOCUSED = /* @__PURE__ */ new WeakMap();
  var IS_COMPOSING = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_USER_SELECTION = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_ON_CHANGE = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_SCHEDULE_FLUSH = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_PENDING_INSERTION_MARKS = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_USER_MARKS = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_PENDING_DIFFS = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_PENDING_ACTION = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_PENDING_SELECTION = /* @__PURE__ */ new WeakMap();
  var EDITOR_TO_FORCE_RENDER = /* @__PURE__ */ new WeakMap();
  var PLACEHOLDER_SYMBOL = Symbol("placeholder");
  var MARK_PLACEHOLDER_SYMBOL = Symbol("mark-placeholder");
  var DOMEditor = {
    androidPendingDiffs: (editor) => EDITOR_TO_PENDING_DIFFS.get(editor),
    androidScheduleFlush: (editor) => {
      var _EDITOR_TO_SCHEDULE_F;
      (_EDITOR_TO_SCHEDULE_F = EDITOR_TO_SCHEDULE_FLUSH.get(editor)) === null || _EDITOR_TO_SCHEDULE_F === void 0 || _EDITOR_TO_SCHEDULE_F();
    },
    blur: (editor) => {
      var el = DOMEditor.toDOMNode(editor, editor);
      var root2 = DOMEditor.findDocumentOrShadowRoot(editor);
      IS_FOCUSED.set(editor, false);
      if (root2.activeElement === el) {
        el.blur();
      }
    },
    deselect: (editor) => {
      var {
        selection
      } = editor;
      var root2 = DOMEditor.findDocumentOrShadowRoot(editor);
      var domSelection = getSelection(root2);
      if (domSelection && domSelection.rangeCount > 0) {
        domSelection.removeAllRanges();
      }
      if (selection) {
        Transforms.deselect(editor);
      }
    },
    findDocumentOrShadowRoot: (editor) => {
      var el = DOMEditor.toDOMNode(editor, editor);
      var root2 = el.getRootNode();
      if (root2 instanceof Document || root2 instanceof ShadowRoot) {
        return root2;
      }
      return el.ownerDocument;
    },
    findEventRange: (editor, event) => {
      if ("nativeEvent" in event) {
        event = event.nativeEvent;
      }
      var {
        clientX: x,
        clientY: y,
        target
      } = event;
      if (x == null || y == null) {
        throw new Error("Cannot resolve a Slate range from a DOM event: ".concat(event));
      }
      var node2 = DOMEditor.toSlateNode(editor, event.target);
      var path2 = DOMEditor.findPath(editor, node2);
      if (Element$2.isElement(node2) && Editor$2.isVoid(editor, node2)) {
        var rect = target.getBoundingClientRect();
        var isPrev = editor.isInline(node2) ? x - rect.left < rect.left + rect.width - x : y - rect.top < rect.top + rect.height - y;
        var edge = Editor$2.point(editor, path2, {
          edge: isPrev ? "start" : "end"
        });
        var point2 = isPrev ? Editor$2.before(editor, edge) : Editor$2.after(editor, edge);
        if (point2) {
          var _range = Editor$2.range(editor, point2);
          return _range;
        }
      }
      var domRange;
      var {
        document: document2
      } = DOMEditor.getWindow(editor);
      if (document2.caretRangeFromPoint) {
        domRange = document2.caretRangeFromPoint(x, y);
      } else {
        var position = document2.caretPositionFromPoint(x, y);
        if (position) {
          domRange = document2.createRange();
          domRange.setStart(position.offsetNode, position.offset);
          domRange.setEnd(position.offsetNode, position.offset);
        }
      }
      if (!domRange) {
        throw new Error("Cannot resolve a Slate range from a DOM event: ".concat(event));
      }
      var range2 = DOMEditor.toSlateRange(editor, domRange, {
        exactMatch: false,
        suppressThrow: false
      });
      return range2;
    },
    findKey: (editor, node2) => {
      var key = NODE_TO_KEY.get(node2);
      if (!key) {
        key = new Key$1();
        NODE_TO_KEY.set(node2, key);
      }
      return key;
    },
    findPath: (editor, node2) => {
      var path2 = [];
      var child = node2;
      while (true) {
        var parent2 = NODE_TO_PARENT.get(child);
        if (parent2 == null) {
          if (Editor$2.isEditor(child)) {
            return path2;
          } else {
            break;
          }
        }
        var i2 = NODE_TO_INDEX.get(child);
        if (i2 == null) {
          break;
        }
        path2.unshift(i2);
        child = parent2;
      }
      throw new Error("Unable to find the path for Slate node: ".concat(Scrubber.stringify(node2)));
    },
    focus: function focus2(editor) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        retries: 5
      };
      if (IS_FOCUSED.get(editor)) {
        return;
      }
      if (options.retries <= 0) {
        throw new Error("Could not set focus, editor seems stuck with pending operations");
      }
      if (editor.operations.length > 0) {
        setTimeout(() => {
          DOMEditor.focus(editor, {
            retries: options.retries - 1
          });
        }, 10);
        return;
      }
      var el = DOMEditor.toDOMNode(editor, editor);
      var root2 = DOMEditor.findDocumentOrShadowRoot(editor);
      if (root2.activeElement !== el) {
        if (editor.selection && root2 instanceof Document) {
          var domSelection = getSelection(root2);
          var domRange = DOMEditor.toDOMRange(editor, editor.selection);
          domSelection === null || domSelection === void 0 || domSelection.removeAllRanges();
          domSelection === null || domSelection === void 0 || domSelection.addRange(domRange);
        }
        if (!editor.selection) {
          Transforms.select(editor, Editor$2.start(editor, []));
        }
        IS_FOCUSED.set(editor, true);
        el.focus({
          preventScroll: true
        });
      }
    },
    getWindow: (editor) => {
      var window2 = EDITOR_TO_WINDOW.get(editor);
      if (!window2) {
        throw new Error("Unable to find a host window element for this editor");
      }
      return window2;
    },
    hasDOMNode: function hasDOMNode2(editor, target) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var {
        editable = false
      } = options;
      var editorEl = DOMEditor.toDOMNode(editor, editor);
      var targetEl;
      try {
        targetEl = isDOMElement(target) ? target : target.parentElement;
      } catch (err) {
        if (err instanceof Error && !err.message.includes('Permission denied to access property "nodeType"')) {
          throw err;
        }
      }
      if (!targetEl) {
        return false;
      }
      return targetEl.closest("[data-slate-editor]") === editorEl && (!editable || targetEl.isContentEditable ? true : typeof targetEl.isContentEditable === "boolean" && // isContentEditable exists only on HTMLElement, and on other nodes it will be undefined
      // this is the core logic that lets you know you got the right editor.selection instead of null when editor is contenteditable="false"(readOnly)
      targetEl.closest('[contenteditable="false"]') === editorEl || !!targetEl.getAttribute("data-slate-zero-width"));
    },
    hasEditableTarget: (editor, target) => isDOMNode(target) && DOMEditor.hasDOMNode(editor, target, {
      editable: true
    }),
    hasRange: (editor, range2) => {
      var {
        anchor,
        focus: focus2
      } = range2;
      return Editor$2.hasPath(editor, anchor.path) && Editor$2.hasPath(editor, focus2.path);
    },
    hasSelectableTarget: (editor, target) => DOMEditor.hasEditableTarget(editor, target) || DOMEditor.isTargetInsideNonReadonlyVoid(editor, target),
    hasTarget: (editor, target) => isDOMNode(target) && DOMEditor.hasDOMNode(editor, target),
    insertData: (editor, data) => {
      editor.insertData(data);
    },
    insertFragmentData: (editor, data) => editor.insertFragmentData(data),
    insertTextData: (editor, data) => editor.insertTextData(data),
    isComposing: (editor) => {
      return !!IS_COMPOSING.get(editor);
    },
    isFocused: (editor) => !!IS_FOCUSED.get(editor),
    isReadOnly: (editor) => !!IS_READ_ONLY.get(editor),
    isTargetInsideNonReadonlyVoid: (editor, target) => {
      if (IS_READ_ONLY.get(editor))
        return false;
      var slateNode = DOMEditor.hasTarget(editor, target) && DOMEditor.toSlateNode(editor, target);
      return Element$2.isElement(slateNode) && Editor$2.isVoid(editor, slateNode);
    },
    setFragmentData: (editor, data, originEvent) => editor.setFragmentData(data, originEvent),
    toDOMNode: (editor, node2) => {
      var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);
      var domNode = Editor$2.isEditor(node2) ? EDITOR_TO_ELEMENT.get(editor) : KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.get(DOMEditor.findKey(editor, node2));
      if (!domNode) {
        throw new Error("Cannot resolve a DOM node from Slate node: ".concat(Scrubber.stringify(node2)));
      }
      return domNode;
    },
    toDOMPoint: (editor, point2) => {
      var [node2] = Editor$2.node(editor, point2.path);
      var el = DOMEditor.toDOMNode(editor, node2);
      var domPoint;
      if (Editor$2.void(editor, {
        at: point2
      })) {
        point2 = {
          path: point2.path,
          offset: 0
        };
      }
      var selector = "[data-slate-string], [data-slate-zero-width]";
      var texts = Array.from(el.querySelectorAll(selector));
      var start2 = 0;
      for (var i2 = 0; i2 < texts.length; i2++) {
        var text = texts[i2];
        var domNode = text.childNodes[0];
        if (domNode == null || domNode.textContent == null) {
          continue;
        }
        var {
          length
        } = domNode.textContent;
        var attr = text.getAttribute("data-slate-length");
        var trueLength = attr == null ? length : parseInt(attr, 10);
        var end2 = start2 + trueLength;
        var nextText = texts[i2 + 1];
        if (point2.offset === end2 && nextText !== null && nextText !== void 0 && nextText.hasAttribute("data-slate-mark-placeholder")) {
          var _nextText$textContent;
          var domText = nextText.childNodes[0];
          domPoint = [
            // COMPAT: If we don't explicity set the dom point to be on the actual
            // dom text element, chrome will put the selection behind the actual dom
            // text element, causing domRange.getBoundingClientRect() calls on a collapsed
            // selection to return incorrect zero values (https://bugs.chromium.org/p/chromium/issues/detail?id=435438)
            // which will cause issues when scrolling to it.
            domText instanceof DOMText ? domText : nextText,
            (_nextText$textContent = nextText.textContent) !== null && _nextText$textContent !== void 0 && _nextText$textContent.startsWith("\uFEFF") ? 1 : 0
          ];
          break;
        }
        if (point2.offset <= end2) {
          var offset = Math.min(length, Math.max(0, point2.offset - start2));
          domPoint = [domNode, offset];
          break;
        }
        start2 = end2;
      }
      if (!domPoint) {
        throw new Error("Cannot resolve a DOM point from Slate point: ".concat(Scrubber.stringify(point2)));
      }
      return domPoint;
    },
    toDOMRange: (editor, range2) => {
      var {
        anchor,
        focus: focus2
      } = range2;
      var isBackward = Range.isBackward(range2);
      var domAnchor = DOMEditor.toDOMPoint(editor, anchor);
      var domFocus = Range.isCollapsed(range2) ? domAnchor : DOMEditor.toDOMPoint(editor, focus2);
      var window2 = DOMEditor.getWindow(editor);
      var domRange = window2.document.createRange();
      var [startNode, startOffset] = isBackward ? domFocus : domAnchor;
      var [endNode, endOffset] = isBackward ? domAnchor : domFocus;
      var startEl = isDOMElement(startNode) ? startNode : startNode.parentElement;
      var isStartAtZeroWidth = !!startEl.getAttribute("data-slate-zero-width");
      var endEl = isDOMElement(endNode) ? endNode : endNode.parentElement;
      var isEndAtZeroWidth = !!endEl.getAttribute("data-slate-zero-width");
      domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset);
      domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset);
      return domRange;
    },
    toSlateNode: (editor, domNode) => {
      var domEl = isDOMElement(domNode) ? domNode : domNode.parentElement;
      if (domEl && !domEl.hasAttribute("data-slate-node")) {
        domEl = domEl.closest("[data-slate-node]");
      }
      var node2 = domEl ? ELEMENT_TO_NODE.get(domEl) : null;
      if (!node2) {
        throw new Error("Cannot resolve a Slate node from DOM node: ".concat(domEl));
      }
      return node2;
    },
    toSlatePoint: (editor, domPoint, options) => {
      var {
        exactMatch,
        suppressThrow,
        searchDirection = "backward"
      } = options;
      var [nearestNode, nearestOffset] = exactMatch ? domPoint : normalizeDOMPoint(domPoint);
      var parentNode = nearestNode.parentNode;
      var textNode = null;
      var offset = 0;
      if (parentNode) {
        var _domNode$textContent, _domNode$textContent2;
        var editorEl = DOMEditor.toDOMNode(editor, editor);
        var potentialVoidNode = parentNode.closest('[data-slate-void="true"]');
        var voidNode = potentialVoidNode && editorEl.contains(potentialVoidNode) ? potentialVoidNode : null;
        var potentialNonEditableNode = parentNode.closest('[contenteditable="false"]');
        var nonEditableNode = potentialNonEditableNode && editorEl.contains(potentialNonEditableNode) ? potentialNonEditableNode : null;
        var leafNode = parentNode.closest("[data-slate-leaf]");
        var domNode = null;
        if (leafNode) {
          textNode = leafNode.closest('[data-slate-node="text"]');
          if (textNode) {
            var window2 = DOMEditor.getWindow(editor);
            var range2 = window2.document.createRange();
            range2.setStart(textNode, 0);
            range2.setEnd(nearestNode, nearestOffset);
            var contents = range2.cloneContents();
            var removals = [...Array.prototype.slice.call(contents.querySelectorAll("[data-slate-zero-width]")), ...Array.prototype.slice.call(contents.querySelectorAll("[contenteditable=false]"))];
            removals.forEach((el) => {
              if (IS_ANDROID && !exactMatch && el.hasAttribute("data-slate-zero-width") && el.textContent.length > 0 && el.textContext !== "\uFEFF") {
                if (el.textContent.startsWith("\uFEFF")) {
                  el.textContent = el.textContent.slice(1);
                }
                return;
              }
              el.parentNode.removeChild(el);
            });
            offset = contents.textContent.length;
            domNode = textNode;
          }
        } else if (voidNode) {
          var leafNodes = voidNode.querySelectorAll("[data-slate-leaf]");
          for (var index = 0; index < leafNodes.length; index++) {
            var current2 = leafNodes[index];
            if (DOMEditor.hasDOMNode(editor, current2)) {
              leafNode = current2;
              break;
            }
          }
          if (!leafNode) {
            offset = 1;
          } else {
            textNode = leafNode.closest('[data-slate-node="text"]');
            domNode = leafNode;
            offset = domNode.textContent.length;
            domNode.querySelectorAll("[data-slate-zero-width]").forEach((el) => {
              offset -= el.textContent.length;
            });
          }
        } else if (nonEditableNode) {
          var getLeafNodes = (node3) => node3 ? node3.querySelectorAll(
            // Exclude leaf nodes in nested editors
            "[data-slate-leaf]:not(:scope [data-slate-editor] [data-slate-leaf])"
          ) : [];
          var elementNode = nonEditableNode.closest('[data-slate-node="element"]');
          if (searchDirection === "forward") {
            var _leafNodes$find;
            var _leafNodes = [...getLeafNodes(elementNode), ...getLeafNodes(elementNode === null || elementNode === void 0 ? void 0 : elementNode.nextElementSibling)];
            leafNode = (_leafNodes$find = _leafNodes.find((leaf2) => isAfter(nonEditableNode, leaf2))) !== null && _leafNodes$find !== void 0 ? _leafNodes$find : null;
          } else {
            var _leafNodes2$findLast;
            var _leafNodes2 = [...getLeafNodes(elementNode === null || elementNode === void 0 ? void 0 : elementNode.previousElementSibling), ...getLeafNodes(elementNode)];
            leafNode = (_leafNodes2$findLast = _leafNodes2.findLast((leaf2) => isBefore(nonEditableNode, leaf2))) !== null && _leafNodes2$findLast !== void 0 ? _leafNodes2$findLast : null;
          }
          if (leafNode) {
            textNode = leafNode.closest('[data-slate-node="text"]');
            domNode = leafNode;
            if (searchDirection === "forward") {
              offset = 0;
            } else {
              offset = domNode.textContent.length;
              domNode.querySelectorAll("[data-slate-zero-width]").forEach((el) => {
                offset -= el.textContent.length;
              });
            }
          }
        }
        if (domNode && offset === domNode.textContent.length && // COMPAT: Android IMEs might remove the zero width space while composing,
        // and we don't add it for line-breaks.
        IS_ANDROID && domNode.getAttribute("data-slate-zero-width") === "z" && (_domNode$textContent = domNode.textContent) !== null && _domNode$textContent !== void 0 && _domNode$textContent.startsWith("\uFEFF") && // COMPAT: If the parent node is a Slate zero-width space, editor is
        // because the text node should have no characters. However, during IME
        // composition the ASCII characters will be prepended to the zero-width
        // space, so subtract 1 from the offset to account for the zero-width
        // space character.
        (parentNode.hasAttribute("data-slate-zero-width") || // COMPAT: In Firefox, `range.cloneContents()` returns an extra trailing '\n'
        // when the document ends with a new-line character. This results in the offset
        // length being off by one, so we need to subtract one to account for this.
        IS_FIREFOX && (_domNode$textContent2 = domNode.textContent) !== null && _domNode$textContent2 !== void 0 && _domNode$textContent2.endsWith("\n\n"))) {
          offset--;
        }
      }
      if (IS_ANDROID && !textNode && !exactMatch) {
        var node2 = parentNode.hasAttribute("data-slate-node") ? parentNode : parentNode.closest("[data-slate-node]");
        if (node2 && DOMEditor.hasDOMNode(editor, node2, {
          editable: true
        })) {
          var _slateNode = DOMEditor.toSlateNode(editor, node2);
          var {
            path: _path,
            offset: _offset
          } = Editor$2.start(editor, DOMEditor.findPath(editor, _slateNode));
          if (!node2.querySelector("[data-slate-leaf]")) {
            _offset = nearestOffset;
          }
          return {
            path: _path,
            offset: _offset
          };
        }
      }
      if (!textNode) {
        if (suppressThrow) {
          return null;
        }
        throw new Error("Cannot resolve a Slate point from DOM point: ".concat(domPoint));
      }
      var slateNode = DOMEditor.toSlateNode(editor, textNode);
      var path2 = DOMEditor.findPath(editor, slateNode);
      return {
        path: path2,
        offset
      };
    },
    toSlateRange: (editor, domRange, options) => {
      var _focusNode$textConten;
      var {
        exactMatch,
        suppressThrow
      } = options;
      var el = isDOMSelection(domRange) ? domRange.anchorNode : domRange.startContainer;
      var anchorNode;
      var anchorOffset;
      var focusNode;
      var focusOffset;
      var isCollapsed;
      if (el) {
        if (isDOMSelection(domRange)) {
          if (IS_FIREFOX && domRange.rangeCount > 1) {
            focusNode = domRange.focusNode;
            var firstRange = domRange.getRangeAt(0);
            var lastRange = domRange.getRangeAt(domRange.rangeCount - 1);
            if (focusNode instanceof HTMLTableRowElement && firstRange.startContainer instanceof HTMLTableRowElement && lastRange.startContainer instanceof HTMLTableRowElement) {
              let getLastChildren = function(element) {
                if (element.childElementCount > 0) {
                  return getLastChildren(element.children[0]);
                } else {
                  return element;
                }
              };
              var firstNodeRow = firstRange.startContainer;
              var lastNodeRow = lastRange.startContainer;
              var firstNode = getLastChildren(firstNodeRow.children[firstRange.startOffset]);
              var lastNode = getLastChildren(lastNodeRow.children[lastRange.startOffset]);
              focusOffset = 0;
              if (lastNode.childNodes.length > 0) {
                anchorNode = lastNode.childNodes[0];
              } else {
                anchorNode = lastNode;
              }
              if (firstNode.childNodes.length > 0) {
                focusNode = firstNode.childNodes[0];
              } else {
                focusNode = firstNode;
              }
              if (lastNode instanceof HTMLElement) {
                anchorOffset = lastNode.innerHTML.length;
              } else {
                anchorOffset = 0;
              }
            } else {
              if (firstRange.startContainer === focusNode) {
                anchorNode = lastRange.endContainer;
                anchorOffset = lastRange.endOffset;
                focusOffset = firstRange.startOffset;
              } else {
                anchorNode = firstRange.startContainer;
                anchorOffset = firstRange.endOffset;
                focusOffset = lastRange.startOffset;
              }
            }
          } else {
            anchorNode = domRange.anchorNode;
            anchorOffset = domRange.anchorOffset;
            focusNode = domRange.focusNode;
            focusOffset = domRange.focusOffset;
          }
          if (IS_CHROME && hasShadowRoot(anchorNode) || IS_FIREFOX) {
            isCollapsed = domRange.anchorNode === domRange.focusNode && domRange.anchorOffset === domRange.focusOffset;
          } else {
            isCollapsed = domRange.isCollapsed;
          }
        } else {
          anchorNode = domRange.startContainer;
          anchorOffset = domRange.startOffset;
          focusNode = domRange.endContainer;
          focusOffset = domRange.endOffset;
          isCollapsed = domRange.collapsed;
        }
      }
      if (anchorNode == null || focusNode == null || anchorOffset == null || focusOffset == null) {
        throw new Error("Cannot resolve a Slate range from DOM range: ".concat(domRange));
      }
      if (IS_FIREFOX && (_focusNode$textConten = focusNode.textContent) !== null && _focusNode$textConten !== void 0 && _focusNode$textConten.endsWith("\n\n") && focusOffset === focusNode.textContent.length) {
        focusOffset--;
      }
      var anchor = DOMEditor.toSlatePoint(editor, [anchorNode, anchorOffset], {
        exactMatch,
        suppressThrow
      });
      if (!anchor) {
        return null;
      }
      var focusBeforeAnchor = isBefore(anchorNode, focusNode) || anchorNode === focusNode && focusOffset < anchorOffset;
      var focus2 = isCollapsed ? anchor : DOMEditor.toSlatePoint(editor, [focusNode, focusOffset], {
        exactMatch,
        suppressThrow,
        searchDirection: focusBeforeAnchor ? "forward" : "backward"
      });
      if (!focus2) {
        return null;
      }
      var range2 = {
        anchor,
        focus: focus2
      };
      if (Range.isExpanded(range2) && Range.isForward(range2) && isDOMElement(focusNode) && Editor$2.void(editor, {
        at: range2.focus,
        mode: "highest"
      })) {
        range2 = Editor$2.unhangRange(editor, range2, {
          voids: true
        });
      }
      return range2;
    }
  };
  function verifyDiffState(editor, textDiff) {
    var {
      path: path2,
      diff: diff2
    } = textDiff;
    if (!Editor$2.hasPath(editor, path2)) {
      return false;
    }
    var node2 = Node$1.get(editor, path2);
    if (!Text$1.isText(node2)) {
      return false;
    }
    if (diff2.start !== node2.text.length || diff2.text.length === 0) {
      return node2.text.slice(diff2.start, diff2.start + diff2.text.length) === diff2.text;
    }
    var nextPath = Path.next(path2);
    if (!Editor$2.hasPath(editor, nextPath)) {
      return false;
    }
    var nextNode = Node$1.get(editor, nextPath);
    return Text$1.isText(nextNode) && nextNode.text.startsWith(diff2.text);
  }
  function applyStringDiff(text) {
    for (var _len = arguments.length, diffs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      diffs[_key - 1] = arguments[_key];
    }
    return diffs.reduce((text2, diff2) => text2.slice(0, diff2.start) + diff2.text + text2.slice(diff2.end), text);
  }
  function longestCommonPrefixLength(str, another) {
    var length = Math.min(str.length, another.length);
    for (var i2 = 0; i2 < length; i2++) {
      if (str.charAt(i2) !== another.charAt(i2)) {
        return i2;
      }
    }
    return length;
  }
  function longestCommonSuffixLength(str, another, max2) {
    var length = Math.min(str.length, another.length, max2);
    for (var i2 = 0; i2 < length; i2++) {
      if (str.charAt(str.length - i2 - 1) !== another.charAt(another.length - i2 - 1)) {
        return i2;
      }
    }
    return length;
  }
  function normalizeStringDiff(targetText, diff2) {
    var {
      start: start2,
      end: end2,
      text
    } = diff2;
    var removedText = targetText.slice(start2, end2);
    var prefixLength = longestCommonPrefixLength(removedText, text);
    var max2 = Math.min(removedText.length - prefixLength, text.length - prefixLength);
    var suffixLength = longestCommonSuffixLength(removedText, text, max2);
    var normalized = {
      start: start2 + prefixLength,
      end: end2 - suffixLength,
      text: text.slice(prefixLength, text.length - suffixLength)
    };
    if (normalized.start === normalized.end && normalized.text.length === 0) {
      return null;
    }
    return normalized;
  }
  function mergeStringDiffs(targetText, a2, b) {
    var start2 = Math.min(a2.start, b.start);
    var overlap = Math.max(0, Math.min(a2.start + a2.text.length, b.end) - b.start);
    var applied = applyStringDiff(targetText, a2, b);
    var sliceEnd = Math.max(b.start + b.text.length, a2.start + a2.text.length + (a2.start + a2.text.length > b.start ? b.text.length : 0) - overlap);
    var text = applied.slice(start2, sliceEnd);
    var end2 = Math.max(a2.end, b.end - a2.text.length + (a2.end - a2.start));
    return normalizeStringDiff(targetText, {
      start: start2,
      end: end2,
      text
    });
  }
  function targetRange(textDiff) {
    var {
      path: path2,
      diff: diff2
    } = textDiff;
    return {
      anchor: {
        path: path2,
        offset: diff2.start
      },
      focus: {
        path: path2,
        offset: diff2.end
      }
    };
  }
  function normalizePoint(editor, point2) {
    var {
      path: path2,
      offset
    } = point2;
    if (!Editor$2.hasPath(editor, path2)) {
      return null;
    }
    var leaf2 = Node$1.get(editor, path2);
    if (!Text$1.isText(leaf2)) {
      return null;
    }
    var parentBlock = Editor$2.above(editor, {
      match: (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2),
      at: path2
    });
    if (!parentBlock) {
      return null;
    }
    while (offset > leaf2.text.length) {
      var entry = Editor$2.next(editor, {
        at: path2,
        match: Text$1.isText
      });
      if (!entry || !Path.isDescendant(entry[1], parentBlock[1])) {
        return null;
      }
      offset -= leaf2.text.length;
      leaf2 = entry[0];
      path2 = entry[1];
    }
    return {
      path: path2,
      offset
    };
  }
  function normalizeRange(editor, range2) {
    var anchor = normalizePoint(editor, range2.anchor);
    if (!anchor) {
      return null;
    }
    if (Range.isCollapsed(range2)) {
      return {
        anchor,
        focus: anchor
      };
    }
    var focus2 = normalizePoint(editor, range2.focus);
    if (!focus2) {
      return null;
    }
    return {
      anchor,
      focus: focus2
    };
  }
  function transformPendingPoint(editor, point2, op) {
    var pendingDiffs = EDITOR_TO_PENDING_DIFFS.get(editor);
    var textDiff = pendingDiffs === null || pendingDiffs === void 0 ? void 0 : pendingDiffs.find((_ref) => {
      var {
        path: path2
      } = _ref;
      return Path.equals(path2, point2.path);
    });
    if (!textDiff || point2.offset <= textDiff.diff.start) {
      return Point.transform(point2, op, {
        affinity: "backward"
      });
    }
    var {
      diff: diff2
    } = textDiff;
    if (point2.offset <= diff2.start + diff2.text.length) {
      var _anchor = {
        path: point2.path,
        offset: diff2.start
      };
      var _transformed = Point.transform(_anchor, op, {
        affinity: "backward"
      });
      if (!_transformed) {
        return null;
      }
      return {
        path: _transformed.path,
        offset: _transformed.offset + point2.offset - diff2.start
      };
    }
    var anchor = {
      path: point2.path,
      offset: point2.offset - diff2.text.length + diff2.end - diff2.start
    };
    var transformed = Point.transform(anchor, op, {
      affinity: "backward"
    });
    if (!transformed) {
      return null;
    }
    if (op.type === "split_node" && Path.equals(op.path, point2.path) && anchor.offset < op.position && diff2.start < op.position) {
      return transformed;
    }
    return {
      path: transformed.path,
      offset: transformed.offset + diff2.text.length - diff2.end + diff2.start
    };
  }
  function transformPendingRange(editor, range2, op) {
    var anchor = transformPendingPoint(editor, range2.anchor, op);
    if (!anchor) {
      return null;
    }
    if (Range.isCollapsed(range2)) {
      return {
        anchor,
        focus: anchor
      };
    }
    var focus2 = transformPendingPoint(editor, range2.focus, op);
    if (!focus2) {
      return null;
    }
    return {
      anchor,
      focus: focus2
    };
  }
  function transformTextDiff(textDiff, op) {
    var {
      path: path2,
      diff: diff2,
      id: id2
    } = textDiff;
    switch (op.type) {
      case "insert_text": {
        if (!Path.equals(op.path, path2) || op.offset >= diff2.end) {
          return textDiff;
        }
        if (op.offset <= diff2.start) {
          return {
            diff: {
              start: op.text.length + diff2.start,
              end: op.text.length + diff2.end,
              text: diff2.text
            },
            id: id2,
            path: path2
          };
        }
        return {
          diff: {
            start: diff2.start,
            end: diff2.end + op.text.length,
            text: diff2.text
          },
          id: id2,
          path: path2
        };
      }
      case "remove_text": {
        if (!Path.equals(op.path, path2) || op.offset >= diff2.end) {
          return textDiff;
        }
        if (op.offset + op.text.length <= diff2.start) {
          return {
            diff: {
              start: diff2.start - op.text.length,
              end: diff2.end - op.text.length,
              text: diff2.text
            },
            id: id2,
            path: path2
          };
        }
        return {
          diff: {
            start: diff2.start,
            end: diff2.end - op.text.length,
            text: diff2.text
          },
          id: id2,
          path: path2
        };
      }
      case "split_node": {
        if (!Path.equals(op.path, path2) || op.position >= diff2.end) {
          return {
            diff: diff2,
            id: id2,
            path: Path.transform(path2, op, {
              affinity: "backward"
            })
          };
        }
        if (op.position > diff2.start) {
          return {
            diff: {
              start: diff2.start,
              end: Math.min(op.position, diff2.end),
              text: diff2.text
            },
            id: id2,
            path: path2
          };
        }
        return {
          diff: {
            start: diff2.start - op.position,
            end: diff2.end - op.position,
            text: diff2.text
          },
          id: id2,
          path: Path.transform(path2, op, {
            affinity: "forward"
          })
        };
      }
      case "merge_node": {
        if (!Path.equals(op.path, path2)) {
          return {
            diff: diff2,
            id: id2,
            path: Path.transform(path2, op)
          };
        }
        return {
          diff: {
            start: diff2.start + op.position,
            end: diff2.end + op.position,
            text: diff2.text
          },
          id: id2,
          path: Path.transform(path2, op)
        };
      }
    }
    var newPath = Path.transform(path2, op);
    if (!newPath) {
      return null;
    }
    return {
      diff: diff2,
      path: newPath,
      id: id2
    };
  }
  var doRectsIntersect = (rect, compareRect) => {
    var middle = (compareRect.top + compareRect.bottom) / 2;
    return rect.top <= middle && rect.bottom >= middle;
  };
  var areRangesSameLine = (editor, range1, range2) => {
    var rect1 = DOMEditor.toDOMRange(editor, range1).getBoundingClientRect();
    var rect2 = DOMEditor.toDOMRange(editor, range2).getBoundingClientRect();
    return doRectsIntersect(rect1, rect2) && doRectsIntersect(rect2, rect1);
  };
  var findCurrentLineRange = (editor, parentRange) => {
    var parentRangeBoundary = Editor$2.range(editor, Range.end(parentRange));
    var positions2 = Array.from(Editor$2.positions(editor, {
      at: parentRange
    }));
    var left = 0;
    var right = positions2.length;
    var middle = Math.floor(right / 2);
    if (areRangesSameLine(editor, Editor$2.range(editor, positions2[left]), parentRangeBoundary)) {
      return Editor$2.range(editor, positions2[left], parentRangeBoundary);
    }
    if (positions2.length < 2) {
      return Editor$2.range(editor, positions2[positions2.length - 1], parentRangeBoundary);
    }
    while (middle !== positions2.length && middle !== left) {
      if (areRangesSameLine(editor, Editor$2.range(editor, positions2[middle]), parentRangeBoundary)) {
        right = middle;
      } else {
        left = middle;
      }
      middle = Math.floor((left + right) / 2);
    }
    return Editor$2.range(editor, positions2[left], parentRangeBoundary);
  };
  function ownKeys$8(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$8(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$8(Object(t2), true).forEach(function(r3) {
        _defineProperty$4(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$8(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var withDOM = function withDOM2(editor) {
    var clipboardFormatKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "x-slate-fragment";
    var e3 = editor;
    var {
      apply: apply2,
      onChange,
      deleteBackward: deleteBackward2,
      addMark: addMark2,
      removeMark: removeMark2
    } = e3;
    EDITOR_TO_KEY_TO_ELEMENT.set(e3, /* @__PURE__ */ new WeakMap());
    e3.addMark = (key, value) => {
      var _EDITOR_TO_SCHEDULE_F, _EDITOR_TO_PENDING_DI;
      (_EDITOR_TO_SCHEDULE_F = EDITOR_TO_SCHEDULE_FLUSH.get(e3)) === null || _EDITOR_TO_SCHEDULE_F === void 0 || _EDITOR_TO_SCHEDULE_F();
      if (!EDITOR_TO_PENDING_INSERTION_MARKS.get(e3) && (_EDITOR_TO_PENDING_DI = EDITOR_TO_PENDING_DIFFS.get(e3)) !== null && _EDITOR_TO_PENDING_DI !== void 0 && _EDITOR_TO_PENDING_DI.length) {
        EDITOR_TO_PENDING_INSERTION_MARKS.set(e3, null);
      }
      EDITOR_TO_USER_MARKS.delete(e3);
      addMark2(key, value);
    };
    e3.removeMark = (key) => {
      var _EDITOR_TO_PENDING_DI2;
      if (!EDITOR_TO_PENDING_INSERTION_MARKS.get(e3) && (_EDITOR_TO_PENDING_DI2 = EDITOR_TO_PENDING_DIFFS.get(e3)) !== null && _EDITOR_TO_PENDING_DI2 !== void 0 && _EDITOR_TO_PENDING_DI2.length) {
        EDITOR_TO_PENDING_INSERTION_MARKS.set(e3, null);
      }
      EDITOR_TO_USER_MARKS.delete(e3);
      removeMark2(key);
    };
    e3.deleteBackward = (unit) => {
      if (unit !== "line") {
        return deleteBackward2(unit);
      }
      if (e3.selection && Range.isCollapsed(e3.selection)) {
        var parentBlockEntry = Editor$2.above(e3, {
          match: (n2) => Element$2.isElement(n2) && Editor$2.isBlock(e3, n2),
          at: e3.selection
        });
        if (parentBlockEntry) {
          var [, parentBlockPath] = parentBlockEntry;
          var parentElementRange = Editor$2.range(e3, parentBlockPath, e3.selection.anchor);
          var currentLineRange = findCurrentLineRange(e3, parentElementRange);
          if (!Range.isCollapsed(currentLineRange)) {
            Transforms.delete(e3, {
              at: currentLineRange
            });
          }
        }
      }
    };
    e3.apply = (op) => {
      var matches = [];
      var pathRefMatches = [];
      var pendingDiffs = EDITOR_TO_PENDING_DIFFS.get(e3);
      if (pendingDiffs !== null && pendingDiffs !== void 0 && pendingDiffs.length) {
        var transformed = pendingDiffs.map((textDiff) => transformTextDiff(textDiff, op)).filter(Boolean);
        EDITOR_TO_PENDING_DIFFS.set(e3, transformed);
      }
      var pendingSelection = EDITOR_TO_PENDING_SELECTION.get(e3);
      if (pendingSelection) {
        EDITOR_TO_PENDING_SELECTION.set(e3, transformPendingRange(e3, pendingSelection, op));
      }
      var pendingAction = EDITOR_TO_PENDING_ACTION.get(e3);
      if (pendingAction !== null && pendingAction !== void 0 && pendingAction.at) {
        var at2 = Point.isPoint(pendingAction === null || pendingAction === void 0 ? void 0 : pendingAction.at) ? transformPendingPoint(e3, pendingAction.at, op) : transformPendingRange(e3, pendingAction.at, op);
        EDITOR_TO_PENDING_ACTION.set(e3, at2 ? _objectSpread$8(_objectSpread$8({}, pendingAction), {}, {
          at: at2
        }) : null);
      }
      switch (op.type) {
        case "insert_text":
        case "remove_text":
        case "set_node":
        case "split_node": {
          matches.push(...getMatches(e3, op.path));
          break;
        }
        case "set_selection": {
          var _EDITOR_TO_USER_SELEC;
          (_EDITOR_TO_USER_SELEC = EDITOR_TO_USER_SELECTION.get(e3)) === null || _EDITOR_TO_USER_SELEC === void 0 || _EDITOR_TO_USER_SELEC.unref();
          EDITOR_TO_USER_SELECTION.delete(e3);
          break;
        }
        case "insert_node":
        case "remove_node": {
          matches.push(...getMatches(e3, Path.parent(op.path)));
          break;
        }
        case "merge_node": {
          var prevPath = Path.previous(op.path);
          matches.push(...getMatches(e3, prevPath));
          break;
        }
        case "move_node": {
          var commonPath = Path.common(Path.parent(op.path), Path.parent(op.newPath));
          matches.push(...getMatches(e3, commonPath));
          var changedPath;
          if (Path.isBefore(op.path, op.newPath)) {
            matches.push(...getMatches(e3, Path.parent(op.path)));
            changedPath = op.newPath;
          } else {
            matches.push(...getMatches(e3, Path.parent(op.newPath)));
            changedPath = op.path;
          }
          var changedNode = Node$1.get(editor, Path.parent(changedPath));
          var changedNodeKey = DOMEditor.findKey(e3, changedNode);
          var changedPathRef = Editor$2.pathRef(e3, Path.parent(changedPath));
          pathRefMatches.push([changedPathRef, changedNodeKey]);
          break;
        }
      }
      apply2(op);
      switch (op.type) {
        case "insert_node":
        case "remove_node":
        case "merge_node":
        case "move_node":
        case "split_node":
        case "insert_text":
        case "remove_text":
        case "set_selection": {
          IS_NODE_MAP_DIRTY.set(e3, true);
        }
      }
      for (var [path2, key] of matches) {
        var [node2] = Editor$2.node(e3, path2);
        NODE_TO_KEY.set(node2, key);
      }
      for (var [pathRef2, _key] of pathRefMatches) {
        if (pathRef2.current) {
          var [_node] = Editor$2.node(e3, pathRef2.current);
          NODE_TO_KEY.set(_node, _key);
        }
        pathRef2.unref();
      }
    };
    e3.setFragmentData = (data) => {
      var {
        selection
      } = e3;
      if (!selection) {
        return;
      }
      var [start2, end2] = Range.edges(selection);
      var startVoid = Editor$2.void(e3, {
        at: start2.path
      });
      var endVoid = Editor$2.void(e3, {
        at: end2.path
      });
      if (Range.isCollapsed(selection) && !startVoid) {
        return;
      }
      var domRange = DOMEditor.toDOMRange(e3, selection);
      var contents = domRange.cloneContents();
      var attach = contents.childNodes[0];
      contents.childNodes.forEach((node2) => {
        if (node2.textContent && node2.textContent.trim() !== "") {
          attach = node2;
        }
      });
      if (endVoid) {
        var [voidNode] = endVoid;
        var r2 = domRange.cloneRange();
        var domNode = DOMEditor.toDOMNode(e3, voidNode);
        r2.setEndAfter(domNode);
        contents = r2.cloneContents();
      }
      if (startVoid) {
        attach = contents.querySelector("[data-slate-spacer]");
      }
      Array.from(contents.querySelectorAll("[data-slate-zero-width]")).forEach((zw) => {
        var isNewline = zw.getAttribute("data-slate-zero-width") === "n";
        zw.textContent = isNewline ? "\n" : "";
      });
      if (isDOMText(attach)) {
        var span = attach.ownerDocument.createElement("span");
        span.style.whiteSpace = "pre";
        span.appendChild(attach);
        contents.appendChild(span);
        attach = span;
      }
      var fragment2 = e3.getFragment();
      var string2 = JSON.stringify(fragment2);
      var encoded = window.btoa(encodeURIComponent(string2));
      attach.setAttribute("data-slate-fragment", encoded);
      data.setData("application/".concat(clipboardFormatKey), encoded);
      var div = contents.ownerDocument.createElement("div");
      div.appendChild(contents);
      div.setAttribute("hidden", "true");
      contents.ownerDocument.body.appendChild(div);
      data.setData("text/html", div.innerHTML);
      data.setData("text/plain", getPlainText(div));
      contents.ownerDocument.body.removeChild(div);
      return data;
    };
    e3.insertData = (data) => {
      if (!e3.insertFragmentData(data)) {
        e3.insertTextData(data);
      }
    };
    e3.insertFragmentData = (data) => {
      var fragment2 = data.getData("application/".concat(clipboardFormatKey)) || getSlateFragmentAttribute(data);
      if (fragment2) {
        var decoded = decodeURIComponent(window.atob(fragment2));
        var parsed = JSON.parse(decoded);
        e3.insertFragment(parsed);
        return true;
      }
      return false;
    };
    e3.insertTextData = (data) => {
      var text = data.getData("text/plain");
      if (text) {
        var lines = text.split(/\r\n|\r|\n/);
        var split = false;
        for (var line of lines) {
          if (split) {
            Transforms.splitNodes(e3, {
              always: true
            });
          }
          e3.insertText(line);
          split = true;
        }
        return true;
      }
      return false;
    };
    e3.onChange = (options) => {
      var onContextChange = EDITOR_TO_ON_CHANGE.get(e3);
      if (onContextChange) {
        onContextChange(options);
      }
      onChange(options);
    };
    return e3;
  };
  var getMatches = (e3, path2) => {
    var matches = [];
    for (var [n2, p2] of Editor$2.levels(e3, {
      at: path2
    })) {
      var key = DOMEditor.findKey(e3, n2);
      matches.push([p2, key]);
    }
    return matches;
  };
  var TRIPLE_CLICK = 3;
  var HOTKEYS = {
    bold: "mod+b",
    compose: ["down", "left", "right", "up", "backspace", "enter"],
    moveBackward: "left",
    moveForward: "right",
    moveWordBackward: "ctrl+left",
    moveWordForward: "ctrl+right",
    deleteBackward: "shift?+backspace",
    deleteForward: "shift?+delete",
    extendBackward: "shift+left",
    extendForward: "shift+right",
    italic: "mod+i",
    insertSoftBreak: "shift+enter",
    splitBlock: "enter",
    undo: "mod+z"
  };
  var APPLE_HOTKEYS = {
    moveLineBackward: "opt+up",
    moveLineForward: "opt+down",
    moveWordBackward: "opt+left",
    moveWordForward: "opt+right",
    deleteBackward: ["ctrl+backspace", "ctrl+h"],
    deleteForward: ["ctrl+delete", "ctrl+d"],
    deleteLineBackward: "cmd+shift?+backspace",
    deleteLineForward: ["cmd+shift?+delete", "ctrl+k"],
    deleteWordBackward: "opt+shift?+backspace",
    deleteWordForward: "opt+shift?+delete",
    extendLineBackward: "opt+shift+up",
    extendLineForward: "opt+shift+down",
    redo: "cmd+shift+z",
    transposeCharacter: "ctrl+t"
  };
  var WINDOWS_HOTKEYS = {
    deleteWordBackward: "ctrl+shift?+backspace",
    deleteWordForward: "ctrl+shift?+delete",
    redo: ["ctrl+y", "ctrl+shift+z"]
  };
  var create$1 = (key) => {
    var generic = HOTKEYS[key];
    var apple = APPLE_HOTKEYS[key];
    var windows = WINDOWS_HOTKEYS[key];
    var isGeneric = generic && isHotkey.isHotkey(generic);
    var isApple = apple && isHotkey.isHotkey(apple);
    var isWindows = windows && isHotkey.isHotkey(windows);
    return (event) => {
      if (isGeneric && isGeneric(event))
        return true;
      if (IS_APPLE && isApple && isApple(event))
        return true;
      if (!IS_APPLE && isWindows && isWindows(event))
        return true;
      return false;
    };
  };
  var hotkeys = {
    isBold: create$1("bold"),
    isCompose: create$1("compose"),
    isMoveBackward: create$1("moveBackward"),
    isMoveForward: create$1("moveForward"),
    isDeleteBackward: create$1("deleteBackward"),
    isDeleteForward: create$1("deleteForward"),
    isDeleteLineBackward: create$1("deleteLineBackward"),
    isDeleteLineForward: create$1("deleteLineForward"),
    isDeleteWordBackward: create$1("deleteWordBackward"),
    isDeleteWordForward: create$1("deleteWordForward"),
    isExtendBackward: create$1("extendBackward"),
    isExtendForward: create$1("extendForward"),
    isExtendLineBackward: create$1("extendLineBackward"),
    isExtendLineForward: create$1("extendLineForward"),
    isItalic: create$1("italic"),
    isMoveLineBackward: create$1("moveLineBackward"),
    isMoveLineForward: create$1("moveLineForward"),
    isMoveWordBackward: create$1("moveWordBackward"),
    isMoveWordForward: create$1("moveWordForward"),
    isRedo: create$1("redo"),
    isSoftBreak: create$1("insertSoftBreak"),
    isSplitBlock: create$1("splitBlock"),
    isTransposeCharacter: create$1("transposeCharacter"),
    isUndo: create$1("undo")
  };
  function _objectWithoutPropertiesLoose$2(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _objectWithoutProperties$2(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose$2(source2, excluded);
    var key, i2;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
        key = sourceSymbolKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  var _excluded$4 = ["anchor", "focus"], _excluded2$1 = ["anchor", "focus"];
  var shallowCompare = (obj1, obj2) => Object.keys(obj1).length === Object.keys(obj2).length && Object.keys(obj1).every((key) => obj2.hasOwnProperty(key) && obj1[key] === obj2[key]);
  var isDecorationFlagsEqual = (range2, other) => {
    var rangeOwnProps = _objectWithoutProperties$2(range2, _excluded$4);
    var otherOwnProps = _objectWithoutProperties$2(other, _excluded2$1);
    return range2[PLACEHOLDER_SYMBOL] === other[PLACEHOLDER_SYMBOL] && shallowCompare(rangeOwnProps, otherOwnProps);
  };
  var isElementDecorationsEqual = (list, another) => {
    if (list.length !== another.length) {
      return false;
    }
    for (var i2 = 0; i2 < list.length; i2++) {
      var range2 = list[i2];
      var other = another[i2];
      if (!Range.equals(range2, other) || !isDecorationFlagsEqual(range2, other)) {
        return false;
      }
    }
    return true;
  };
  var isTextDecorationsEqual = (list, another) => {
    if (list.length !== another.length) {
      return false;
    }
    for (var i2 = 0; i2 < list.length; i2++) {
      var range2 = list[i2];
      var other = another[i2];
      if (range2.anchor.offset !== other.anchor.offset || range2.focus.offset !== other.focus.offset || !isDecorationFlagsEqual(range2, other)) {
        return false;
      }
    }
    return true;
  };
  var resizeObservers = [];
  var hasActiveObservations = function() {
    return resizeObservers.some(function(ro) {
      return ro.activeTargets.length > 0;
    });
  };
  var hasSkippedObservations = function() {
    return resizeObservers.some(function(ro) {
      return ro.skippedTargets.length > 0;
    });
  };
  var msg = "ResizeObserver loop completed with undelivered notifications.";
  var deliverResizeLoopError = function() {
    var event;
    if (typeof ErrorEvent === "function") {
      event = new ErrorEvent("error", {
        message: msg
      });
    } else {
      event = document.createEvent("Event");
      event.initEvent("error", false, false);
      event.message = msg;
    }
    window.dispatchEvent(event);
  };
  var ResizeObserverBoxOptions;
  (function(ResizeObserverBoxOptions2) {
    ResizeObserverBoxOptions2["BORDER_BOX"] = "border-box";
    ResizeObserverBoxOptions2["CONTENT_BOX"] = "content-box";
    ResizeObserverBoxOptions2["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
  })(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));
  var freeze = function(obj) {
    return Object.freeze(obj);
  };
  var ResizeObserverSize = function() {
    function ResizeObserverSize2(inlineSize, blockSize) {
      this.inlineSize = inlineSize;
      this.blockSize = blockSize;
      freeze(this);
    }
    return ResizeObserverSize2;
  }();
  var DOMRectReadOnly = function() {
    function DOMRectReadOnly2(x, y, width, height) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      this.top = this.y;
      this.left = this.x;
      this.bottom = this.top + this.height;
      this.right = this.left + this.width;
      return freeze(this);
    }
    DOMRectReadOnly2.prototype.toJSON = function() {
      var _a2 = this, x = _a2.x, y = _a2.y, top = _a2.top, right = _a2.right, bottom = _a2.bottom, left = _a2.left, width = _a2.width, height = _a2.height;
      return { x, y, top, right, bottom, left, width, height };
    };
    DOMRectReadOnly2.fromRect = function(rectangle) {
      return new DOMRectReadOnly2(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
    };
    return DOMRectReadOnly2;
  }();
  var isSVG = function(target) {
    return target instanceof SVGElement && "getBBox" in target;
  };
  var isHidden = function(target) {
    if (isSVG(target)) {
      var _a2 = target.getBBox(), width = _a2.width, height = _a2.height;
      return !width && !height;
    }
    var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;
    return !(offsetWidth || offsetHeight || target.getClientRects().length);
  };
  var isElement = function(obj) {
    var _a2;
    if (obj instanceof Element) {
      return true;
    }
    var scope = (_a2 = obj === null || obj === void 0 ? void 0 : obj.ownerDocument) === null || _a2 === void 0 ? void 0 : _a2.defaultView;
    return !!(scope && obj instanceof scope.Element);
  };
  var isReplacedElement = function(target) {
    switch (target.tagName) {
      case "INPUT":
        if (target.type !== "image") {
          break;
        }
      case "VIDEO":
      case "AUDIO":
      case "EMBED":
      case "OBJECT":
      case "CANVAS":
      case "IFRAME":
      case "IMG":
        return true;
    }
    return false;
  };
  var global$1 = typeof window !== "undefined" ? window : {};
  var cache = /* @__PURE__ */ new WeakMap();
  var scrollRegexp = /auto|scroll/;
  var verticalRegexp = /^tb|vertical/;
  var IE = /msie|trident/i.test(global$1.navigator && global$1.navigator.userAgent);
  var parseDimension = function(pixel) {
    return parseFloat(pixel || "0");
  };
  var size = function(inlineSize, blockSize, switchSizes) {
    if (inlineSize === void 0) {
      inlineSize = 0;
    }
    if (blockSize === void 0) {
      blockSize = 0;
    }
    if (switchSizes === void 0) {
      switchSizes = false;
    }
    return new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
  };
  var zeroBoxes = freeze({
    devicePixelContentBoxSize: size(),
    borderBoxSize: size(),
    contentBoxSize: size(),
    contentRect: new DOMRectReadOnly(0, 0, 0, 0)
  });
  var calculateBoxSizes = function(target, forceRecalculation) {
    if (forceRecalculation === void 0) {
      forceRecalculation = false;
    }
    if (cache.has(target) && !forceRecalculation) {
      return cache.get(target);
    }
    if (isHidden(target)) {
      cache.set(target, zeroBoxes);
      return zeroBoxes;
    }
    var cs = getComputedStyle(target);
    var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();
    var removePadding = !IE && cs.boxSizing === "border-box";
    var switchSizes = verticalRegexp.test(cs.writingMode || "");
    var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || "");
    var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || "");
    var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);
    var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);
    var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);
    var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);
    var borderTop2 = svg ? 0 : parseDimension(cs.borderTopWidth);
    var borderRight2 = svg ? 0 : parseDimension(cs.borderRightWidth);
    var borderBottom2 = svg ? 0 : parseDimension(cs.borderBottomWidth);
    var borderLeft2 = svg ? 0 : parseDimension(cs.borderLeftWidth);
    var horizontalPadding = paddingLeft + paddingRight;
    var verticalPadding = paddingTop + paddingBottom;
    var horizontalBorderArea = borderLeft2 + borderRight2;
    var verticalBorderArea = borderTop2 + borderBottom2;
    var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;
    var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;
    var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;
    var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;
    var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;
    var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;
    var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;
    var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;
    var boxes = freeze({
      devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),
      borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),
      contentBoxSize: size(contentWidth, contentHeight, switchSizes),
      contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)
    });
    cache.set(target, boxes);
    return boxes;
  };
  var calculateBoxSize = function(target, observedBox, forceRecalculation) {
    var _a2 = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a2.borderBoxSize, contentBoxSize = _a2.contentBoxSize, devicePixelContentBoxSize = _a2.devicePixelContentBoxSize;
    switch (observedBox) {
      case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
        return devicePixelContentBoxSize;
      case ResizeObserverBoxOptions.BORDER_BOX:
        return borderBoxSize;
      default:
        return contentBoxSize;
    }
  };
  var ResizeObserverEntry = function() {
    function ResizeObserverEntry2(target) {
      var boxes = calculateBoxSizes(target);
      this.target = target;
      this.contentRect = boxes.contentRect;
      this.borderBoxSize = freeze([boxes.borderBoxSize]);
      this.contentBoxSize = freeze([boxes.contentBoxSize]);
      this.devicePixelContentBoxSize = freeze([boxes.devicePixelContentBoxSize]);
    }
    return ResizeObserverEntry2;
  }();
  var calculateDepthForNode = function(node2) {
    if (isHidden(node2)) {
      return Infinity;
    }
    var depth = 0;
    var parent2 = node2.parentNode;
    while (parent2) {
      depth += 1;
      parent2 = parent2.parentNode;
    }
    return depth;
  };
  var broadcastActiveObservations = function() {
    var shallowestDepth = Infinity;
    var callbacks2 = [];
    resizeObservers.forEach(function processObserver(ro) {
      if (ro.activeTargets.length === 0) {
        return;
      }
      var entries = [];
      ro.activeTargets.forEach(function processTarget(ot) {
        var entry = new ResizeObserverEntry(ot.target);
        var targetDepth = calculateDepthForNode(ot.target);
        entries.push(entry);
        ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);
        if (targetDepth < shallowestDepth) {
          shallowestDepth = targetDepth;
        }
      });
      callbacks2.push(function resizeObserverCallback() {
        ro.callback.call(ro.observer, entries, ro.observer);
      });
      ro.activeTargets.splice(0, ro.activeTargets.length);
    });
    for (var _i = 0, callbacks_1 = callbacks2; _i < callbacks_1.length; _i++) {
      var callback = callbacks_1[_i];
      callback();
    }
    return shallowestDepth;
  };
  var gatherActiveObservationsAtDepth = function(depth) {
    resizeObservers.forEach(function processObserver(ro) {
      ro.activeTargets.splice(0, ro.activeTargets.length);
      ro.skippedTargets.splice(0, ro.skippedTargets.length);
      ro.observationTargets.forEach(function processTarget(ot) {
        if (ot.isActive()) {
          if (calculateDepthForNode(ot.target) > depth) {
            ro.activeTargets.push(ot);
          } else {
            ro.skippedTargets.push(ot);
          }
        }
      });
    });
  };
  var process$1 = function() {
    var depth = 0;
    gatherActiveObservationsAtDepth(depth);
    while (hasActiveObservations()) {
      depth = broadcastActiveObservations();
      gatherActiveObservationsAtDepth(depth);
    }
    if (hasSkippedObservations()) {
      deliverResizeLoopError();
    }
    return depth > 0;
  };
  var trigger;
  var callbacks = [];
  var notify = function() {
    return callbacks.splice(0).forEach(function(cb) {
      return cb();
    });
  };
  var queueMicroTask = function(callback) {
    if (!trigger) {
      var toggle_1 = 0;
      var el_1 = document.createTextNode("");
      var config = { characterData: true };
      new MutationObserver(function() {
        return notify();
      }).observe(el_1, config);
      trigger = function() {
        el_1.textContent = "".concat(toggle_1 ? toggle_1-- : toggle_1++);
      };
    }
    callbacks.push(callback);
    trigger();
  };
  var queueResizeObserver = function(cb) {
    queueMicroTask(function ResizeObserver2() {
      requestAnimationFrame(cb);
    });
  };
  var watching = 0;
  var isWatching = function() {
    return !!watching;
  };
  var CATCH_PERIOD = 250;
  var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };
  var events = [
    "resize",
    "load",
    "transitionend",
    "animationend",
    "animationstart",
    "animationiteration",
    "keyup",
    "keydown",
    "mouseup",
    "mousedown",
    "mouseover",
    "mouseout",
    "blur",
    "focus"
  ];
  var time = function(timeout) {
    if (timeout === void 0) {
      timeout = 0;
    }
    return Date.now() + timeout;
  };
  var scheduled = false;
  var Scheduler = function() {
    function Scheduler2() {
      var _this = this;
      this.stopped = true;
      this.listener = function() {
        return _this.schedule();
      };
    }
    Scheduler2.prototype.run = function(timeout) {
      var _this = this;
      if (timeout === void 0) {
        timeout = CATCH_PERIOD;
      }
      if (scheduled) {
        return;
      }
      scheduled = true;
      var until = time(timeout);
      queueResizeObserver(function() {
        var elementsHaveResized = false;
        try {
          elementsHaveResized = process$1();
        } finally {
          scheduled = false;
          timeout = until - time();
          if (!isWatching()) {
            return;
          }
          if (elementsHaveResized) {
            _this.run(1e3);
          } else if (timeout > 0) {
            _this.run(timeout);
          } else {
            _this.start();
          }
        }
      });
    };
    Scheduler2.prototype.schedule = function() {
      this.stop();
      this.run();
    };
    Scheduler2.prototype.observe = function() {
      var _this = this;
      var cb = function() {
        return _this.observer && _this.observer.observe(document.body, observerConfig);
      };
      document.body ? cb() : global$1.addEventListener("DOMContentLoaded", cb);
    };
    Scheduler2.prototype.start = function() {
      var _this = this;
      if (this.stopped) {
        this.stopped = false;
        this.observer = new MutationObserver(this.listener);
        this.observe();
        events.forEach(function(name) {
          return global$1.addEventListener(name, _this.listener, true);
        });
      }
    };
    Scheduler2.prototype.stop = function() {
      var _this = this;
      if (!this.stopped) {
        this.observer && this.observer.disconnect();
        events.forEach(function(name) {
          return global$1.removeEventListener(name, _this.listener, true);
        });
        this.stopped = true;
      }
    };
    return Scheduler2;
  }();
  var scheduler = new Scheduler();
  var updateCount = function(n2) {
    !watching && n2 > 0 && scheduler.start();
    watching += n2;
    !watching && scheduler.stop();
  };
  var skipNotifyOnElement = function(target) {
    return !isSVG(target) && !isReplacedElement(target) && getComputedStyle(target).display === "inline";
  };
  var ResizeObservation = function() {
    function ResizeObservation2(target, observedBox) {
      this.target = target;
      this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;
      this.lastReportedSize = {
        inlineSize: 0,
        blockSize: 0
      };
    }
    ResizeObservation2.prototype.isActive = function() {
      var size2 = calculateBoxSize(this.target, this.observedBox, true);
      if (skipNotifyOnElement(this.target)) {
        this.lastReportedSize = size2;
      }
      if (this.lastReportedSize.inlineSize !== size2.inlineSize || this.lastReportedSize.blockSize !== size2.blockSize) {
        return true;
      }
      return false;
    };
    return ResizeObservation2;
  }();
  var ResizeObserverDetail = function() {
    function ResizeObserverDetail2(resizeObserver, callback) {
      this.activeTargets = [];
      this.skippedTargets = [];
      this.observationTargets = [];
      this.observer = resizeObserver;
      this.callback = callback;
    }
    return ResizeObserverDetail2;
  }();
  var observerMap = /* @__PURE__ */ new WeakMap();
  var getObservationIndex = function(observationTargets, target) {
    for (var i2 = 0; i2 < observationTargets.length; i2 += 1) {
      if (observationTargets[i2].target === target) {
        return i2;
      }
    }
    return -1;
  };
  var ResizeObserverController = function() {
    function ResizeObserverController2() {
    }
    ResizeObserverController2.connect = function(resizeObserver, callback) {
      var detail = new ResizeObserverDetail(resizeObserver, callback);
      observerMap.set(resizeObserver, detail);
    };
    ResizeObserverController2.observe = function(resizeObserver, target, options) {
      var detail = observerMap.get(resizeObserver);
      var firstObservation = detail.observationTargets.length === 0;
      if (getObservationIndex(detail.observationTargets, target) < 0) {
        firstObservation && resizeObservers.push(detail);
        detail.observationTargets.push(new ResizeObservation(target, options && options.box));
        updateCount(1);
        scheduler.schedule();
      }
    };
    ResizeObserverController2.unobserve = function(resizeObserver, target) {
      var detail = observerMap.get(resizeObserver);
      var index = getObservationIndex(detail.observationTargets, target);
      var lastObservation = detail.observationTargets.length === 1;
      if (index >= 0) {
        lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);
        detail.observationTargets.splice(index, 1);
        updateCount(-1);
      }
    };
    ResizeObserverController2.disconnect = function(resizeObserver) {
      var _this = this;
      var detail = observerMap.get(resizeObserver);
      detail.observationTargets.slice().forEach(function(ot) {
        return _this.unobserve(resizeObserver, ot.target);
      });
      detail.activeTargets.splice(0, detail.activeTargets.length);
    };
    return ResizeObserverController2;
  }();
  var ResizeObserver$1 = function() {
    function ResizeObserver2(callback) {
      if (arguments.length === 0) {
        throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
      }
      if (typeof callback !== "function") {
        throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
      }
      ResizeObserverController.connect(this, callback);
    }
    ResizeObserver2.prototype.observe = function(target, options) {
      if (arguments.length === 0) {
        throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
      }
      if (!isElement(target)) {
        throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
      }
      ResizeObserverController.observe(this, target, options);
    };
    ResizeObserver2.prototype.unobserve = function(target) {
      if (arguments.length === 0) {
        throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
      }
      if (!isElement(target)) {
        throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
      }
      ResizeObserverController.unobserve(this, target);
    };
    ResizeObserver2.prototype.disconnect = function() {
      ResizeObserverController.disconnect(this);
    };
    ResizeObserver2.toString = function() {
      return "function ResizeObserver () { [polyfill code] }";
    };
    return ResizeObserver2;
  }();
  function _objectWithoutPropertiesLoose$1(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source2);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source2[key];
    }
    return target;
  }
  function _objectWithoutProperties$1(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose$1(source2, excluded);
    var key, i2;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
        key = sourceSymbolKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _typeof$2(o3) {
    "@babel/helpers - typeof";
    return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o4) {
      return typeof o4;
    } : function(o4) {
      return o4 && "function" == typeof Symbol && o4.constructor === Symbol && o4 !== Symbol.prototype ? "symbol" : typeof o4;
    }, _typeof$2(o3);
  }
  function _toPrimitive$2(input, hint) {
    if (_typeof$2(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof$2(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey$2(arg) {
    var key = _toPrimitive$2(arg, "string");
    return _typeof$2(key) === "symbol" ? key : String(key);
  }
  function _defineProperty$3(obj, key, value) {
    key = _toPropertyKey$2(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var EditorContext = /* @__PURE__ */ React.createContext(null);
  var useSlateStatic = () => {
    var editor = React.useContext(EditorContext);
    if (!editor) {
      throw new Error("The `useSlateStatic` hook must be used inside the <Slate> component's context.");
    }
    return editor;
  };
  var ReactEditor = DOMEditor;
  function ownKeys$6(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$6(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$6(Object(t2), true).forEach(function(r3) {
        _defineProperty$3(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$6(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var RESOLVE_DELAY = 25;
  var FLUSH_DELAY = 200;
  var debug = function debug2() {
  };
  var isDataTransfer = (value) => (value === null || value === void 0 ? void 0 : value.constructor.name) === "DataTransfer";
  function createAndroidInputManager(_ref) {
    var {
      editor,
      scheduleOnDOMSelectionChange,
      onDOMSelectionChange
    } = _ref;
    var flushing = false;
    var compositionEndTimeoutId = null;
    var flushTimeoutId = null;
    var actionTimeoutId = null;
    var idCounter = 0;
    var insertPositionHint = false;
    var applyPendingSelection = () => {
      var pendingSelection = EDITOR_TO_PENDING_SELECTION.get(editor);
      EDITOR_TO_PENDING_SELECTION.delete(editor);
      if (pendingSelection) {
        var {
          selection
        } = editor;
        var normalized = normalizeRange(editor, pendingSelection);
        if (normalized && (!selection || !Range.equals(normalized, selection))) {
          Transforms.select(editor, normalized);
        }
      }
    };
    var performAction = () => {
      var action = EDITOR_TO_PENDING_ACTION.get(editor);
      EDITOR_TO_PENDING_ACTION.delete(editor);
      if (!action) {
        return;
      }
      if (action.at) {
        var target = Point.isPoint(action.at) ? normalizePoint(editor, action.at) : normalizeRange(editor, action.at);
        if (!target) {
          return;
        }
        var _targetRange = Editor$2.range(editor, target);
        if (!editor.selection || !Range.equals(editor.selection, _targetRange)) {
          Transforms.select(editor, target);
        }
      }
      action.run();
    };
    var flush = () => {
      if (flushTimeoutId) {
        clearTimeout(flushTimeoutId);
        flushTimeoutId = null;
      }
      if (actionTimeoutId) {
        clearTimeout(actionTimeoutId);
        actionTimeoutId = null;
      }
      if (!hasPendingDiffs() && !hasPendingAction()) {
        applyPendingSelection();
        return;
      }
      if (!flushing) {
        flushing = true;
        setTimeout(() => flushing = false);
      }
      if (hasPendingAction()) {
        flushing = "action";
      }
      var selectionRef = editor.selection && Editor$2.rangeRef(editor, editor.selection, {
        affinity: "forward"
      });
      EDITOR_TO_USER_MARKS.set(editor, editor.marks);
      debug("flush", EDITOR_TO_PENDING_ACTION.get(editor), EDITOR_TO_PENDING_DIFFS.get(editor));
      var scheduleSelectionChange = hasPendingDiffs();
      var diff2;
      while (diff2 = (_EDITOR_TO_PENDING_DI = EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI === void 0 ? void 0 : _EDITOR_TO_PENDING_DI[0]) {
        var _EDITOR_TO_PENDING_DI, _EDITOR_TO_PENDING_DI2;
        var pendingMarks = EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);
        if (pendingMarks !== void 0) {
          EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);
          editor.marks = pendingMarks;
        }
        if (pendingMarks && insertPositionHint === false) {
          insertPositionHint = null;
        }
        var range2 = targetRange(diff2);
        if (!editor.selection || !Range.equals(editor.selection, range2)) {
          Transforms.select(editor, range2);
        }
        if (diff2.diff.text) {
          Editor$2.insertText(editor, diff2.diff.text);
        } else {
          Editor$2.deleteFragment(editor);
        }
        EDITOR_TO_PENDING_DIFFS.set(editor, (_EDITOR_TO_PENDING_DI2 = EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI2 === void 0 ? void 0 : _EDITOR_TO_PENDING_DI2.filter((_ref2) => {
          var {
            id: id2
          } = _ref2;
          return id2 !== diff2.id;
        }));
        if (!verifyDiffState(editor, diff2)) {
          scheduleSelectionChange = false;
          EDITOR_TO_PENDING_ACTION.delete(editor);
          EDITOR_TO_USER_MARKS.delete(editor);
          flushing = "action";
          EDITOR_TO_PENDING_SELECTION.delete(editor);
          scheduleOnDOMSelectionChange.cancel();
          onDOMSelectionChange.cancel();
          selectionRef === null || selectionRef === void 0 || selectionRef.unref();
        }
      }
      var selection = selectionRef === null || selectionRef === void 0 ? void 0 : selectionRef.unref();
      if (selection && !EDITOR_TO_PENDING_SELECTION.get(editor) && (!editor.selection || !Range.equals(selection, editor.selection))) {
        Transforms.select(editor, selection);
      }
      if (hasPendingAction()) {
        performAction();
        return;
      }
      if (scheduleSelectionChange) {
        scheduleOnDOMSelectionChange();
      }
      scheduleOnDOMSelectionChange.flush();
      onDOMSelectionChange.flush();
      applyPendingSelection();
      var userMarks = EDITOR_TO_USER_MARKS.get(editor);
      EDITOR_TO_USER_MARKS.delete(editor);
      if (userMarks !== void 0) {
        editor.marks = userMarks;
        editor.onChange();
      }
    };
    var handleCompositionEnd = (_event) => {
      if (compositionEndTimeoutId) {
        clearTimeout(compositionEndTimeoutId);
      }
      compositionEndTimeoutId = setTimeout(() => {
        IS_COMPOSING.set(editor, false);
        flush();
      }, RESOLVE_DELAY);
    };
    var handleCompositionStart = (_event) => {
      IS_COMPOSING.set(editor, true);
      if (compositionEndTimeoutId) {
        clearTimeout(compositionEndTimeoutId);
        compositionEndTimeoutId = null;
      }
    };
    var updatePlaceholderVisibility = function updatePlaceholderVisibility2() {
      var forceHide = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      var placeholderElement = EDITOR_TO_PLACEHOLDER_ELEMENT.get(editor);
      if (!placeholderElement) {
        return;
      }
      if (hasPendingDiffs() || forceHide) {
        placeholderElement.style.display = "none";
        return;
      }
      placeholderElement.style.removeProperty("display");
    };
    var storeDiff = (path2, diff2) => {
      var _EDITOR_TO_PENDING_DI3;
      var pendingDiffs = (_EDITOR_TO_PENDING_DI3 = EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI3 !== void 0 ? _EDITOR_TO_PENDING_DI3 : [];
      EDITOR_TO_PENDING_DIFFS.set(editor, pendingDiffs);
      var target = Node$1.leaf(editor, path2);
      var idx = pendingDiffs.findIndex((change) => Path.equals(change.path, path2));
      if (idx < 0) {
        var normalized = normalizeStringDiff(target.text, diff2);
        if (normalized) {
          pendingDiffs.push({
            path: path2,
            diff: diff2,
            id: idCounter++
          });
        }
        updatePlaceholderVisibility();
        return;
      }
      var merged = mergeStringDiffs(target.text, pendingDiffs[idx].diff, diff2);
      if (!merged) {
        pendingDiffs.splice(idx, 1);
        updatePlaceholderVisibility();
        return;
      }
      pendingDiffs[idx] = _objectSpread$6(_objectSpread$6({}, pendingDiffs[idx]), {}, {
        diff: merged
      });
    };
    var scheduleAction = function scheduleAction2(run) {
      var {
        at: at2
      } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      insertPositionHint = false;
      EDITOR_TO_PENDING_SELECTION.delete(editor);
      scheduleOnDOMSelectionChange.cancel();
      onDOMSelectionChange.cancel();
      if (hasPendingAction()) {
        flush();
      }
      EDITOR_TO_PENDING_ACTION.set(editor, {
        at: at2,
        run
      });
      actionTimeoutId = setTimeout(flush);
    };
    var handleDOMBeforeInput = (event) => {
      var _targetRange2;
      if (flushTimeoutId) {
        clearTimeout(flushTimeoutId);
        flushTimeoutId = null;
      }
      if (IS_NODE_MAP_DIRTY.get(editor)) {
        return;
      }
      var {
        inputType: type
      } = event;
      var targetRange2 = null;
      var data = event.dataTransfer || event.data || void 0;
      if (insertPositionHint !== false && type !== "insertText" && type !== "insertCompositionText") {
        insertPositionHint = false;
      }
      var [nativeTargetRange] = event.getTargetRanges();
      if (nativeTargetRange) {
        targetRange2 = ReactEditor.toSlateRange(editor, nativeTargetRange, {
          exactMatch: false,
          suppressThrow: true
        });
      }
      var window2 = ReactEditor.getWindow(editor);
      var domSelection = window2.getSelection();
      if (!targetRange2 && domSelection) {
        nativeTargetRange = domSelection;
        targetRange2 = ReactEditor.toSlateRange(editor, domSelection, {
          exactMatch: false,
          suppressThrow: true
        });
      }
      targetRange2 = (_targetRange2 = targetRange2) !== null && _targetRange2 !== void 0 ? _targetRange2 : editor.selection;
      if (!targetRange2) {
        return;
      }
      var canStoreDiff = true;
      if (type.startsWith("delete")) {
        if (Range.isExpanded(targetRange2)) {
          var [_start, _end] = Range.edges(targetRange2);
          var _leaf = Node$1.leaf(editor, _start.path);
          if (_leaf.text.length === _start.offset && _end.offset === 0) {
            var next2 = Editor$2.next(editor, {
              at: _start.path,
              match: Text$1.isText
            });
            if (next2 && Path.equals(next2[1], _end.path)) {
              targetRange2 = {
                anchor: _end,
                focus: _end
              };
            }
          }
        }
        var direction2 = type.endsWith("Backward") ? "backward" : "forward";
        var [start2, end2] = Range.edges(targetRange2);
        var [leaf2, path2] = Editor$2.leaf(editor, start2.path);
        var diff2 = {
          text: "",
          start: start2.offset,
          end: end2.offset
        };
        var pendingDiffs = EDITOR_TO_PENDING_DIFFS.get(editor);
        var relevantPendingDiffs = pendingDiffs === null || pendingDiffs === void 0 ? void 0 : pendingDiffs.find((change) => Path.equals(change.path, path2));
        var diffs = relevantPendingDiffs ? [relevantPendingDiffs.diff, diff2] : [diff2];
        var text = applyStringDiff(leaf2.text, ...diffs);
        if (text.length === 0) {
          canStoreDiff = false;
        }
        if (Range.isExpanded(targetRange2)) {
          if (canStoreDiff && Path.equals(targetRange2.anchor.path, targetRange2.focus.path)) {
            var point2 = {
              path: targetRange2.anchor.path,
              offset: start2.offset
            };
            var range2 = Editor$2.range(editor, point2, point2);
            handleUserSelect(range2);
            return storeDiff(targetRange2.anchor.path, {
              text: "",
              end: end2.offset,
              start: start2.offset
            });
          }
          return scheduleAction(() => Editor$2.deleteFragment(editor, {
            direction: direction2
          }), {
            at: targetRange2
          });
        }
      }
      switch (type) {
        case "deleteByComposition":
        case "deleteByCut":
        case "deleteByDrag": {
          return scheduleAction(() => Editor$2.deleteFragment(editor), {
            at: targetRange2
          });
        }
        case "deleteContent":
        case "deleteContentForward": {
          var {
            anchor
          } = targetRange2;
          if (canStoreDiff && Range.isCollapsed(targetRange2)) {
            var targetNode = Node$1.leaf(editor, anchor.path);
            if (anchor.offset < targetNode.text.length) {
              return storeDiff(anchor.path, {
                text: "",
                start: anchor.offset,
                end: anchor.offset + 1
              });
            }
          }
          return scheduleAction(() => Editor$2.deleteForward(editor), {
            at: targetRange2
          });
        }
        case "deleteContentBackward": {
          var _nativeTargetRange;
          var {
            anchor: _anchor
          } = targetRange2;
          var nativeCollapsed = isDOMSelection(nativeTargetRange) ? nativeTargetRange.isCollapsed : !!((_nativeTargetRange = nativeTargetRange) !== null && _nativeTargetRange !== void 0 && _nativeTargetRange.collapsed);
          if (canStoreDiff && nativeCollapsed && Range.isCollapsed(targetRange2) && _anchor.offset > 0) {
            return storeDiff(_anchor.path, {
              text: "",
              start: _anchor.offset - 1,
              end: _anchor.offset
            });
          }
          return scheduleAction(() => Editor$2.deleteBackward(editor), {
            at: targetRange2
          });
        }
        case "deleteEntireSoftLine": {
          return scheduleAction(() => {
            Editor$2.deleteBackward(editor, {
              unit: "line"
            });
            Editor$2.deleteForward(editor, {
              unit: "line"
            });
          }, {
            at: targetRange2
          });
        }
        case "deleteHardLineBackward": {
          return scheduleAction(() => Editor$2.deleteBackward(editor, {
            unit: "block"
          }), {
            at: targetRange2
          });
        }
        case "deleteSoftLineBackward": {
          return scheduleAction(() => Editor$2.deleteBackward(editor, {
            unit: "line"
          }), {
            at: targetRange2
          });
        }
        case "deleteHardLineForward": {
          return scheduleAction(() => Editor$2.deleteForward(editor, {
            unit: "block"
          }), {
            at: targetRange2
          });
        }
        case "deleteSoftLineForward": {
          return scheduleAction(() => Editor$2.deleteForward(editor, {
            unit: "line"
          }), {
            at: targetRange2
          });
        }
        case "deleteWordBackward": {
          return scheduleAction(() => Editor$2.deleteBackward(editor, {
            unit: "word"
          }), {
            at: targetRange2
          });
        }
        case "deleteWordForward": {
          return scheduleAction(() => Editor$2.deleteForward(editor, {
            unit: "word"
          }), {
            at: targetRange2
          });
        }
        case "insertLineBreak": {
          return scheduleAction(() => Editor$2.insertSoftBreak(editor), {
            at: targetRange2
          });
        }
        case "insertParagraph": {
          return scheduleAction(() => Editor$2.insertBreak(editor), {
            at: targetRange2
          });
        }
        case "insertCompositionText":
        case "deleteCompositionText":
        case "insertFromComposition":
        case "insertFromDrop":
        case "insertFromPaste":
        case "insertFromYank":
        case "insertReplacementText":
        case "insertText": {
          if (isDataTransfer(data)) {
            return scheduleAction(() => ReactEditor.insertData(editor, data), {
              at: targetRange2
            });
          }
          var _text = data !== null && data !== void 0 ? data : "";
          if (EDITOR_TO_PENDING_INSERTION_MARKS.get(editor)) {
            _text = _text.replace("\uFEFF", "");
          }
          if (type === "insertText" && /.*\n.*\n$/.test(_text)) {
            _text = _text.slice(0, -1);
          }
          if (_text.includes("\n")) {
            return scheduleAction(() => {
              var parts = _text.split("\n");
              parts.forEach((line, i2) => {
                if (line) {
                  Editor$2.insertText(editor, line);
                }
                if (i2 !== parts.length - 1) {
                  Editor$2.insertSoftBreak(editor);
                }
              });
            }, {
              at: targetRange2
            });
          }
          if (Path.equals(targetRange2.anchor.path, targetRange2.focus.path)) {
            var [_start2, _end2] = Range.edges(targetRange2);
            var _diff = {
              start: _start2.offset,
              end: _end2.offset,
              text: _text
            };
            if (_text && insertPositionHint && type === "insertCompositionText") {
              var hintPosition = insertPositionHint.start + insertPositionHint.text.search(/\S|$/);
              var diffPosition = _diff.start + _diff.text.search(/\S|$/);
              if (diffPosition === hintPosition + 1 && _diff.end === insertPositionHint.start + insertPositionHint.text.length) {
                _diff.start -= 1;
                insertPositionHint = null;
                scheduleFlush();
              } else {
                insertPositionHint = false;
              }
            } else if (type === "insertText") {
              if (insertPositionHint === null) {
                insertPositionHint = _diff;
              } else if (insertPositionHint && Range.isCollapsed(targetRange2) && insertPositionHint.end + insertPositionHint.text.length === _start2.offset) {
                insertPositionHint = _objectSpread$6(_objectSpread$6({}, insertPositionHint), {}, {
                  text: insertPositionHint.text + _text
                });
              } else {
                insertPositionHint = false;
              }
            } else {
              insertPositionHint = false;
            }
            if (canStoreDiff) {
              storeDiff(_start2.path, _diff);
              return;
            }
          }
          return scheduleAction(() => Editor$2.insertText(editor, _text), {
            at: targetRange2
          });
        }
      }
    };
    var hasPendingAction = () => {
      return !!EDITOR_TO_PENDING_ACTION.get(editor);
    };
    var hasPendingDiffs = () => {
      var _EDITOR_TO_PENDING_DI4;
      return !!((_EDITOR_TO_PENDING_DI4 = EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI4 !== void 0 && _EDITOR_TO_PENDING_DI4.length);
    };
    var hasPendingChanges = () => {
      return hasPendingAction() || hasPendingDiffs();
    };
    var isFlushing = () => {
      return flushing;
    };
    var handleUserSelect = (range2) => {
      EDITOR_TO_PENDING_SELECTION.set(editor, range2);
      if (flushTimeoutId) {
        clearTimeout(flushTimeoutId);
        flushTimeoutId = null;
      }
      var {
        selection
      } = editor;
      if (!range2) {
        return;
      }
      var pathChanged = !selection || !Path.equals(selection.anchor.path, range2.anchor.path);
      var parentPathChanged = !selection || !Path.equals(selection.anchor.path.slice(0, -1), range2.anchor.path.slice(0, -1));
      if (pathChanged && insertPositionHint || parentPathChanged) {
        insertPositionHint = false;
      }
      if (pathChanged || hasPendingDiffs()) {
        flushTimeoutId = setTimeout(flush, FLUSH_DELAY);
      }
    };
    var handleInput = () => {
      if (hasPendingAction() || !hasPendingDiffs()) {
        flush();
      }
    };
    var handleKeyDown = (_) => {
      if (!hasPendingDiffs()) {
        updatePlaceholderVisibility(true);
        setTimeout(updatePlaceholderVisibility);
      }
    };
    var scheduleFlush = () => {
      if (!hasPendingAction()) {
        actionTimeoutId = setTimeout(flush);
      }
    };
    var handleDomMutations = (mutations) => {
      if (hasPendingDiffs() || hasPendingAction()) {
        return;
      }
      if (mutations.some((mutation) => isTrackedMutation(editor, mutation, mutations))) {
        var _EDITOR_TO_FORCE_REND;
        (_EDITOR_TO_FORCE_REND = EDITOR_TO_FORCE_RENDER.get(editor)) === null || _EDITOR_TO_FORCE_REND === void 0 || _EDITOR_TO_FORCE_REND();
      }
    };
    return {
      flush,
      scheduleFlush,
      hasPendingDiffs,
      hasPendingAction,
      hasPendingChanges,
      isFlushing,
      handleUserSelect,
      handleCompositionEnd,
      handleCompositionStart,
      handleDOMBeforeInput,
      handleKeyDown,
      handleDomMutations,
      handleInput
    };
  }
  function useIsMounted() {
    var isMountedRef = React.useRef(false);
    React.useEffect(() => {
      isMountedRef.current = true;
      return () => {
        isMountedRef.current = false;
      };
    }, []);
    return isMountedRef.current;
  }
  var useIsomorphicLayoutEffect = CAN_USE_DOM$1 ? React.useLayoutEffect : React.useEffect;
  function useMutationObserver(node2, callback, options) {
    var [mutationObserver] = React.useState(() => new MutationObserver(callback));
    useIsomorphicLayoutEffect(() => {
      mutationObserver.takeRecords();
    });
    React.useEffect(() => {
      if (!node2.current) {
        throw new Error("Failed to attach MutationObserver, `node` is undefined");
      }
      mutationObserver.observe(node2.current, options);
      return () => mutationObserver.disconnect();
    }, [mutationObserver, node2, options]);
  }
  var _excluded$2 = ["node"];
  function ownKeys$5(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$5(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$5(Object(t2), true).forEach(function(r3) {
        _defineProperty$3(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$5(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var MUTATION_OBSERVER_CONFIG$1 = {
    subtree: true,
    childList: true,
    characterData: true
  };
  var useAndroidInputManager = !IS_ANDROID ? () => null : (_ref) => {
    var {
      node: node2
    } = _ref, options = _objectWithoutProperties$1(_ref, _excluded$2);
    if (!IS_ANDROID) {
      return null;
    }
    var editor = useSlateStatic();
    var isMounted = useIsMounted();
    var [inputManager] = React.useState(() => createAndroidInputManager(_objectSpread$5({
      editor
    }, options)));
    useMutationObserver(node2, inputManager.handleDomMutations, MUTATION_OBSERVER_CONFIG$1);
    EDITOR_TO_SCHEDULE_FLUSH.set(editor, inputManager.scheduleFlush);
    if (isMounted) {
      inputManager.flush();
    }
    return inputManager;
  };
  function ownKeys$4(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$4(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$4(Object(t2), true).forEach(function(r3) {
        _defineProperty$3(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$4(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var String$1 = (props) => {
    var {
      isLast,
      leaf: leaf2,
      parent: parent2,
      text
    } = props;
    var editor = useSlateStatic();
    var path2 = ReactEditor.findPath(editor, text);
    var parentPath = Path.parent(path2);
    var isMarkPlaceholder = Boolean(leaf2[MARK_PLACEHOLDER_SYMBOL]);
    if (editor.isVoid(parent2)) {
      return /* @__PURE__ */ React.createElement(ZeroWidthString, {
        length: Node$1.string(parent2).length
      });
    }
    if (leaf2.text === "" && parent2.children[parent2.children.length - 1] === text && !editor.isInline(parent2) && Editor$2.string(editor, parentPath) === "") {
      return /* @__PURE__ */ React.createElement(ZeroWidthString, {
        isLineBreak: true,
        isMarkPlaceholder
      });
    }
    if (leaf2.text === "") {
      return /* @__PURE__ */ React.createElement(ZeroWidthString, {
        isMarkPlaceholder
      });
    }
    if (isLast && leaf2.text.slice(-1) === "\n") {
      return /* @__PURE__ */ React.createElement(TextString, {
        isTrailing: true,
        text: leaf2.text
      });
    }
    return /* @__PURE__ */ React.createElement(TextString, {
      text: leaf2.text
    });
  };
  var TextString = (props) => {
    var {
      text,
      isTrailing = false
    } = props;
    var ref = React.useRef(null);
    var getTextContent = () => {
      return "".concat(text !== null && text !== void 0 ? text : "").concat(isTrailing ? "\n" : "");
    };
    var [initialText] = React.useState(getTextContent);
    useIsomorphicLayoutEffect(() => {
      var textWithTrailing = getTextContent();
      if (ref.current && ref.current.textContent !== textWithTrailing) {
        ref.current.textContent = textWithTrailing;
      }
    });
    return /* @__PURE__ */ React.createElement(MemoizedText$1, {
      ref
    }, initialText);
  };
  var MemoizedText$1 = /* @__PURE__ */ React.memo(/* @__PURE__ */ React.forwardRef((props, ref) => {
    return /* @__PURE__ */ React.createElement("span", {
      "data-slate-string": true,
      ref
    }, props.children);
  }));
  var ZeroWidthString = (props) => {
    var {
      length = 0,
      isLineBreak = false,
      isMarkPlaceholder = false
    } = props;
    var attributes = {
      "data-slate-zero-width": isLineBreak ? "n" : "z",
      "data-slate-length": length
    };
    if (isMarkPlaceholder) {
      attributes["data-slate-mark-placeholder"] = true;
    }
    return /* @__PURE__ */ React.createElement("span", _objectSpread$4({}, attributes), !(IS_ANDROID || IS_IOS) || !isLineBreak ? "\uFEFF" : null, isLineBreak ? /* @__PURE__ */ React.createElement("br", null) : null);
  };
  function ownKeys$3(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$3(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$3(Object(t2), true).forEach(function(r3) {
        _defineProperty$3(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$3(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var PLACEHOLDER_DELAY = IS_ANDROID ? 300 : 0;
  function disconnectPlaceholderResizeObserver(placeholderResizeObserver, releaseObserver) {
    if (placeholderResizeObserver.current) {
      placeholderResizeObserver.current.disconnect();
      if (releaseObserver) {
        placeholderResizeObserver.current = null;
      }
    }
  }
  function clearTimeoutRef(timeoutRef) {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  }
  var Leaf = (props) => {
    var {
      leaf: leaf2,
      isLast,
      text,
      parent: parent2,
      renderPlaceholder,
      renderLeaf = (props2) => /* @__PURE__ */ React.createElement(DefaultLeaf, _objectSpread$3({}, props2)),
      leafPosition
    } = props;
    var editor = useSlateStatic();
    var placeholderResizeObserver = React.useRef(null);
    var placeholderRef = React.useRef(null);
    var [showPlaceholder, setShowPlaceholder] = React.useState(false);
    var showPlaceholderTimeoutRef = React.useRef(null);
    var callbackPlaceholderRef = React.useCallback((placeholderEl) => {
      disconnectPlaceholderResizeObserver(placeholderResizeObserver, placeholderEl == null);
      if (placeholderEl == null) {
        var _leaf$onPlaceholderRe;
        EDITOR_TO_PLACEHOLDER_ELEMENT.delete(editor);
        (_leaf$onPlaceholderRe = leaf2.onPlaceholderResize) === null || _leaf$onPlaceholderRe === void 0 || _leaf$onPlaceholderRe.call(leaf2, null);
      } else {
        EDITOR_TO_PLACEHOLDER_ELEMENT.set(editor, placeholderEl);
        if (!placeholderResizeObserver.current) {
          var ResizeObserver$1$1 = window.ResizeObserver || ResizeObserver$1;
          placeholderResizeObserver.current = new ResizeObserver$1$1(() => {
            var _leaf$onPlaceholderRe2;
            (_leaf$onPlaceholderRe2 = leaf2.onPlaceholderResize) === null || _leaf$onPlaceholderRe2 === void 0 || _leaf$onPlaceholderRe2.call(leaf2, placeholderEl);
          });
        }
        placeholderResizeObserver.current.observe(placeholderEl);
        placeholderRef.current = placeholderEl;
      }
    }, [placeholderRef, leaf2, editor]);
    var children = /* @__PURE__ */ React.createElement(String$1, {
      isLast,
      leaf: leaf2,
      parent: parent2,
      text
    });
    var leafIsPlaceholder = Boolean(leaf2[PLACEHOLDER_SYMBOL]);
    React.useEffect(() => {
      if (leafIsPlaceholder) {
        if (!showPlaceholderTimeoutRef.current) {
          showPlaceholderTimeoutRef.current = setTimeout(() => {
            setShowPlaceholder(true);
            showPlaceholderTimeoutRef.current = null;
          }, PLACEHOLDER_DELAY);
        }
      } else {
        clearTimeoutRef(showPlaceholderTimeoutRef);
        setShowPlaceholder(false);
      }
      return () => clearTimeoutRef(showPlaceholderTimeoutRef);
    }, [leafIsPlaceholder, setShowPlaceholder]);
    if (leafIsPlaceholder && showPlaceholder) {
      var placeholderProps = {
        children: leaf2.placeholder,
        attributes: {
          "data-slate-placeholder": true,
          style: {
            position: "absolute",
            top: 0,
            pointerEvents: "none",
            width: "100%",
            maxWidth: "100%",
            display: "block",
            opacity: "0.333",
            userSelect: "none",
            textDecoration: "none",
            // Fixes https://github.com/udecode/plate/issues/2315
            WebkitUserModify: IS_WEBKIT ? "inherit" : void 0
          },
          contentEditable: false,
          ref: callbackPlaceholderRef
        }
      };
      children = /* @__PURE__ */ React.createElement(React.Fragment, null, renderPlaceholder(placeholderProps), children);
    }
    var attributes = {
      "data-slate-leaf": true
    };
    return renderLeaf({
      attributes,
      children,
      leaf: leaf2,
      text,
      leafPosition
    });
  };
  var MemoizedLeaf = /* @__PURE__ */ React.memo(Leaf, (prev, next2) => {
    return next2.parent === prev.parent && next2.isLast === prev.isLast && next2.renderLeaf === prev.renderLeaf && next2.renderPlaceholder === prev.renderPlaceholder && next2.text === prev.text && Text$1.equals(next2.leaf, prev.leaf) && next2.leaf[PLACEHOLDER_SYMBOL] === prev.leaf[PLACEHOLDER_SYMBOL];
  });
  var DefaultLeaf = (props) => {
    var {
      attributes,
      children
    } = props;
    return /* @__PURE__ */ React.createElement("span", _objectSpread$3({}, attributes), children);
  };
  function ownKeys$2$1(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$2$1(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$2$1(Object(t2), true).forEach(function(r3) {
        _defineProperty$3(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$2$1(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var Text = (props) => {
    var {
      decorations,
      isLast,
      parent: parent2,
      renderPlaceholder,
      renderLeaf,
      renderText = (props2) => /* @__PURE__ */ React.createElement(DefaultText, _objectSpread$2$1({}, props2)),
      text
    } = props;
    var editor = useSlateStatic();
    var ref = React.useRef(null);
    var decoratedLeaves = Text$1.decorations(text, decorations);
    var key = ReactEditor.findKey(editor, text);
    var children = [];
    for (var i2 = 0; i2 < decoratedLeaves.length; i2++) {
      var {
        leaf: leaf2,
        position
      } = decoratedLeaves[i2];
      children.push(/* @__PURE__ */ React.createElement(MemoizedLeaf, {
        isLast: isLast && i2 === decoratedLeaves.length - 1,
        key: "".concat(key.id, "-").concat(i2),
        renderPlaceholder,
        leaf: leaf2,
        leafPosition: position,
        text,
        parent: parent2,
        renderLeaf
      }));
    }
    var callbackRef = React.useCallback((span) => {
      var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);
      if (span) {
        KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, span);
        NODE_TO_ELEMENT.set(text, span);
        ELEMENT_TO_NODE.set(span, text);
      } else {
        KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.delete(key);
        NODE_TO_ELEMENT.delete(text);
        if (ref.current) {
          ELEMENT_TO_NODE.delete(ref.current);
        }
      }
      ref.current = span;
    }, [ref, editor, key, text]);
    var attributes = {
      "data-slate-node": "text",
      ref: callbackRef
    };
    return renderText({
      text,
      children,
      attributes
    });
  };
  var MemoizedText = /* @__PURE__ */ React.memo(Text, (prev, next2) => {
    return next2.parent === prev.parent && next2.isLast === prev.isLast && next2.renderText === prev.renderText && next2.renderLeaf === prev.renderLeaf && next2.renderPlaceholder === prev.renderPlaceholder && next2.text === prev.text && isTextDecorationsEqual(next2.decorations, prev.decorations);
  });
  var DefaultText = (props) => {
    var {
      attributes,
      children
    } = props;
    return /* @__PURE__ */ React.createElement("span", _objectSpread$2$1({}, attributes), children);
  };
  function ownKeys$1$1(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$1$1(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$1$1(Object(t2), true).forEach(function(r3) {
        _defineProperty$3(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$1$1(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var Element$1 = (props) => {
    var {
      decorations,
      element,
      renderElement = (p2) => /* @__PURE__ */ React.createElement(DefaultElement, _objectSpread$1$1({}, p2)),
      renderPlaceholder,
      renderLeaf,
      renderText,
      selection
    } = props;
    var editor = useSlateStatic();
    var readOnly = useReadOnly();
    var isInline = editor.isInline(element);
    var key = ReactEditor.findKey(editor, element);
    var ref = React.useCallback((ref2) => {
      var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);
      if (ref2) {
        KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, ref2);
        NODE_TO_ELEMENT.set(element, ref2);
        ELEMENT_TO_NODE.set(ref2, element);
      } else {
        KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.delete(key);
        NODE_TO_ELEMENT.delete(element);
      }
    }, [editor, key, element]);
    var children = useChildren({
      decorations,
      node: element,
      renderElement,
      renderPlaceholder,
      renderLeaf,
      renderText,
      selection
    });
    var attributes = {
      "data-slate-node": "element",
      ref
    };
    if (isInline) {
      attributes["data-slate-inline"] = true;
    }
    if (!isInline && Editor$2.hasInlines(editor, element)) {
      var text = Node$1.string(element);
      var dir = getDirection(text);
      if (dir === "rtl") {
        attributes.dir = dir;
      }
    }
    if (Editor$2.isVoid(editor, element)) {
      attributes["data-slate-void"] = true;
      if (!readOnly && isInline) {
        attributes.contentEditable = false;
      }
      var Tag2 = isInline ? "span" : "div";
      var [[_text]] = Node$1.texts(element);
      children = /* @__PURE__ */ React.createElement(Tag2, {
        "data-slate-spacer": true,
        style: {
          height: "0",
          color: "transparent",
          outline: "none",
          position: "absolute"
        }
      }, /* @__PURE__ */ React.createElement(MemoizedText, {
        renderPlaceholder,
        decorations: [],
        isLast: false,
        parent: element,
        text: _text
      }));
      NODE_TO_INDEX.set(_text, 0);
      NODE_TO_PARENT.set(_text, element);
    }
    return renderElement({
      attributes,
      children,
      element
    });
  };
  var MemoizedElement = /* @__PURE__ */ React.memo(Element$1, (prev, next2) => {
    return prev.element === next2.element && prev.renderElement === next2.renderElement && prev.renderText === next2.renderText && prev.renderLeaf === next2.renderLeaf && prev.renderPlaceholder === next2.renderPlaceholder && isElementDecorationsEqual(prev.decorations, next2.decorations) && (prev.selection === next2.selection || !!prev.selection && !!next2.selection && Range.equals(prev.selection, next2.selection));
  });
  var DefaultElement = (props) => {
    var {
      attributes,
      children,
      element
    } = props;
    var editor = useSlateStatic();
    var Tag2 = editor.isInline(element) ? "span" : "div";
    return /* @__PURE__ */ React.createElement(Tag2, _objectSpread$1$1(_objectSpread$1$1({}, attributes), {}, {
      style: {
        position: "relative"
      }
    }), children);
  };
  var DecorateContext = /* @__PURE__ */ React.createContext(() => []);
  var useDecorate = () => {
    return React.useContext(DecorateContext);
  };
  var SelectedContext = /* @__PURE__ */ React.createContext(false);
  var useSelected = () => {
    return React.useContext(SelectedContext);
  };
  var useChildren = (props) => {
    var {
      decorations,
      node: node2,
      renderElement,
      renderPlaceholder,
      renderText,
      renderLeaf,
      selection
    } = props;
    var decorate = useDecorate();
    var editor = useSlateStatic();
    IS_NODE_MAP_DIRTY.set(editor, false);
    var path2 = ReactEditor.findPath(editor, node2);
    var children = [];
    var isLeafBlock = Element$2.isElement(node2) && !editor.isInline(node2) && Editor$2.hasInlines(editor, node2);
    for (var i2 = 0; i2 < node2.children.length; i2++) {
      var p2 = path2.concat(i2);
      var n2 = node2.children[i2];
      var key = ReactEditor.findKey(editor, n2);
      var range2 = Editor$2.range(editor, p2);
      var sel = selection && Range.intersection(range2, selection);
      var ds = decorate([n2, p2]);
      for (var dec of decorations) {
        var d2 = Range.intersection(dec, range2);
        if (d2) {
          ds.push(d2);
        }
      }
      if (Element$2.isElement(n2)) {
        children.push(/* @__PURE__ */ React.createElement(SelectedContext.Provider, {
          key: "provider-".concat(key.id),
          value: !!sel
        }, /* @__PURE__ */ React.createElement(MemoizedElement, {
          decorations: ds,
          element: n2,
          key: key.id,
          renderElement,
          renderPlaceholder,
          renderLeaf,
          renderText,
          selection: sel
        })));
      } else {
        children.push(/* @__PURE__ */ React.createElement(MemoizedText, {
          decorations: ds,
          key: key.id,
          isLast: isLeafBlock && i2 === node2.children.length - 1,
          parent: node2,
          renderPlaceholder,
          renderLeaf,
          renderText,
          text: n2
        }));
      }
      NODE_TO_INDEX.set(n2, i2);
      NODE_TO_PARENT.set(n2, node2);
    }
    return children;
  };
  var ReadOnlyContext = /* @__PURE__ */ React.createContext(false);
  var useReadOnly = () => {
    return React.useContext(ReadOnlyContext);
  };
  var SlateContext = /* @__PURE__ */ React.createContext(null);
  var useSlate = () => {
    var context = React.useContext(SlateContext);
    if (!context) {
      throw new Error("The `useSlate` hook must be used inside the <Slate> component's context.");
    }
    var {
      editor
    } = context;
    return editor;
  };
  function useTrackUserInput() {
    var editor = useSlateStatic();
    var receivedUserInput = React.useRef(false);
    var animationFrameIdRef = React.useRef(0);
    var onUserInput = React.useCallback(() => {
      if (receivedUserInput.current) {
        return;
      }
      receivedUserInput.current = true;
      var window2 = ReactEditor.getWindow(editor);
      window2.cancelAnimationFrame(animationFrameIdRef.current);
      animationFrameIdRef.current = window2.requestAnimationFrame(() => {
        receivedUserInput.current = false;
      });
    }, [editor]);
    React.useEffect(() => () => cancelAnimationFrame(animationFrameIdRef.current), []);
    return {
      receivedUserInput,
      onUserInput
    };
  }
  var createRestoreDomManager = (editor, receivedUserInput) => {
    var bufferedMutations = [];
    var clear = () => {
      bufferedMutations = [];
    };
    var registerMutations = (mutations) => {
      if (!receivedUserInput.current) {
        return;
      }
      var trackedMutations = mutations.filter((mutation) => isTrackedMutation(editor, mutation, mutations));
      bufferedMutations.push(...trackedMutations);
    };
    function restoreDOM() {
      if (bufferedMutations.length > 0) {
        bufferedMutations.reverse().forEach((mutation) => {
          if (mutation.type === "characterData") {
            return;
          }
          mutation.removedNodes.forEach((node2) => {
            mutation.target.insertBefore(node2, mutation.nextSibling);
          });
          mutation.addedNodes.forEach((node2) => {
            mutation.target.removeChild(node2);
          });
        });
        clear();
      }
    }
    return {
      registerMutations,
      restoreDOM,
      clear
    };
  };
  var MUTATION_OBSERVER_CONFIG = {
    subtree: true,
    childList: true,
    characterData: true,
    characterDataOldValue: true
  };
  class RestoreDOMComponent extends React.Component {
    constructor() {
      super(...arguments);
      _defineProperty$3(this, "context", null);
      _defineProperty$3(this, "manager", null);
      _defineProperty$3(this, "mutationObserver", null);
    }
    observe() {
      var _this$mutationObserve;
      var {
        node: node2
      } = this.props;
      if (!node2.current) {
        throw new Error("Failed to attach MutationObserver, `node` is undefined");
      }
      (_this$mutationObserve = this.mutationObserver) === null || _this$mutationObserve === void 0 || _this$mutationObserve.observe(node2.current, MUTATION_OBSERVER_CONFIG);
    }
    componentDidMount() {
      var {
        receivedUserInput
      } = this.props;
      var editor = this.context;
      this.manager = createRestoreDomManager(editor, receivedUserInput);
      this.mutationObserver = new MutationObserver(this.manager.registerMutations);
      this.observe();
    }
    getSnapshotBeforeUpdate() {
      var _this$mutationObserve2, _this$mutationObserve3, _this$manager2;
      var pendingMutations = (_this$mutationObserve2 = this.mutationObserver) === null || _this$mutationObserve2 === void 0 ? void 0 : _this$mutationObserve2.takeRecords();
      if (pendingMutations !== null && pendingMutations !== void 0 && pendingMutations.length) {
        var _this$manager;
        (_this$manager = this.manager) === null || _this$manager === void 0 || _this$manager.registerMutations(pendingMutations);
      }
      (_this$mutationObserve3 = this.mutationObserver) === null || _this$mutationObserve3 === void 0 || _this$mutationObserve3.disconnect();
      (_this$manager2 = this.manager) === null || _this$manager2 === void 0 || _this$manager2.restoreDOM();
      return null;
    }
    componentDidUpdate() {
      var _this$manager3;
      (_this$manager3 = this.manager) === null || _this$manager3 === void 0 || _this$manager3.clear();
      this.observe();
    }
    componentWillUnmount() {
      var _this$mutationObserve4;
      (_this$mutationObserve4 = this.mutationObserver) === null || _this$mutationObserve4 === void 0 || _this$mutationObserve4.disconnect();
    }
    render() {
      return this.props.children;
    }
  }
  _defineProperty$3(RestoreDOMComponent, "contextType", EditorContext);
  var RestoreDOM = IS_ANDROID ? RestoreDOMComponent : (_ref) => {
    var {
      children
    } = _ref;
    return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
  };
  var ComposingContext = /* @__PURE__ */ React.createContext(false);
  var _excluded$1 = ["autoFocus", "decorate", "onDOMBeforeInput", "placeholder", "readOnly", "renderElement", "renderLeaf", "renderText", "renderPlaceholder", "scrollSelectionIntoView", "style", "as", "disableDefaultStyles"], _excluded2 = ["text"];
  function ownKeys$7(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$7(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$7(Object(t2), true).forEach(function(r3) {
        _defineProperty$3(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$7(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var Children = (props) => /* @__PURE__ */ React.createElement(React.Fragment, null, useChildren(props));
  var Editable = /* @__PURE__ */ React.forwardRef((props, forwardedRef) => {
    var defaultRenderPlaceholder = React.useCallback((props2) => /* @__PURE__ */ React.createElement(DefaultPlaceholder, _objectSpread$7({}, props2)), []);
    var {
      autoFocus,
      decorate = defaultDecorate,
      onDOMBeforeInput: propsOnDOMBeforeInput,
      placeholder,
      readOnly = false,
      renderElement,
      renderLeaf,
      renderText,
      renderPlaceholder = defaultRenderPlaceholder,
      scrollSelectionIntoView = defaultScrollSelectionIntoView,
      style: userStyle = {},
      as: Component = "div",
      disableDefaultStyles = false
    } = props, attributes = _objectWithoutProperties$1(props, _excluded$1);
    var editor = useSlate();
    var [isComposing2, setIsComposing] = React.useState(false);
    var ref = React.useRef(null);
    var deferredOperations = React.useRef([]);
    var [placeholderHeight, setPlaceholderHeight] = React.useState();
    var processing2 = React.useRef(false);
    var {
      onUserInput,
      receivedUserInput
    } = useTrackUserInput();
    var [, forceRender] = React.useReducer((s2) => s2 + 1, 0);
    EDITOR_TO_FORCE_RENDER.set(editor, forceRender);
    IS_READ_ONLY.set(editor, readOnly);
    var state = React.useMemo(() => ({
      isDraggingInternally: false,
      isUpdatingSelection: false,
      latestElement: null,
      hasMarkPlaceholder: false
    }), []);
    React.useEffect(() => {
      if (ref.current && autoFocus) {
        ref.current.focus();
      }
    }, [autoFocus]);
    var androidInputManagerRef = React.useRef();
    var onDOMSelectionChange = React.useMemo(() => throttle$1(() => {
      if (IS_NODE_MAP_DIRTY.get(editor)) {
        onDOMSelectionChange();
        return;
      }
      var el = ReactEditor.toDOMNode(editor, editor);
      var root2 = el.getRootNode();
      if (!processing2.current && IS_WEBKIT && root2 instanceof ShadowRoot) {
        processing2.current = true;
        var active = getActiveElement();
        if (active) {
          document.execCommand("indent");
        } else {
          Transforms.deselect(editor);
        }
        processing2.current = false;
        return;
      }
      var androidInputManager = androidInputManagerRef.current;
      if ((IS_ANDROID || !ReactEditor.isComposing(editor)) && (!state.isUpdatingSelection || androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing()) && !state.isDraggingInternally) {
        var _root2 = ReactEditor.findDocumentOrShadowRoot(editor);
        var {
          activeElement
        } = _root2;
        var _el = ReactEditor.toDOMNode(editor, editor);
        var domSelection = getSelection(_root2);
        if (activeElement === _el) {
          state.latestElement = activeElement;
          IS_FOCUSED.set(editor, true);
        } else {
          IS_FOCUSED.delete(editor);
        }
        if (!domSelection) {
          return Transforms.deselect(editor);
        }
        var {
          anchorNode,
          focusNode
        } = domSelection;
        var anchorNodeSelectable = ReactEditor.hasEditableTarget(editor, anchorNode) || ReactEditor.isTargetInsideNonReadonlyVoid(editor, anchorNode);
        var focusNodeInEditor = ReactEditor.hasTarget(editor, focusNode);
        if (anchorNodeSelectable && focusNodeInEditor) {
          var range2 = ReactEditor.toSlateRange(editor, domSelection, {
            exactMatch: false,
            suppressThrow: true
          });
          if (range2) {
            if (!ReactEditor.isComposing(editor) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.hasPendingChanges()) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing())) {
              Transforms.select(editor, range2);
            } else {
              androidInputManager === null || androidInputManager === void 0 || androidInputManager.handleUserSelect(range2);
            }
          }
        }
        if (readOnly && (!anchorNodeSelectable || !focusNodeInEditor)) {
          Transforms.deselect(editor);
        }
      }
    }, 100), [editor, readOnly, state]);
    var scheduleOnDOMSelectionChange = React.useMemo(() => debounce$2(onDOMSelectionChange, 0), [onDOMSelectionChange]);
    androidInputManagerRef.current = useAndroidInputManager({
      node: ref,
      onDOMSelectionChange,
      scheduleOnDOMSelectionChange
    });
    useIsomorphicLayoutEffect(() => {
      var _androidInputManagerR, _androidInputManagerR2;
      var window2;
      if (ref.current && (window2 = getDefaultView(ref.current))) {
        EDITOR_TO_WINDOW.set(editor, window2);
        EDITOR_TO_ELEMENT.set(editor, ref.current);
        NODE_TO_ELEMENT.set(editor, ref.current);
        ELEMENT_TO_NODE.set(ref.current, editor);
      } else {
        NODE_TO_ELEMENT.delete(editor);
      }
      var {
        selection
      } = editor;
      var root2 = ReactEditor.findDocumentOrShadowRoot(editor);
      var domSelection = getSelection(root2);
      if (!domSelection || !ReactEditor.isFocused(editor) || (_androidInputManagerR = androidInputManagerRef.current) !== null && _androidInputManagerR !== void 0 && _androidInputManagerR.hasPendingAction()) {
        return;
      }
      var setDomSelection = (forceChange) => {
        var hasDomSelection = domSelection.type !== "None";
        if (!selection && !hasDomSelection) {
          return;
        }
        var focusNode = domSelection.focusNode;
        var anchorNode;
        if (IS_FIREFOX && domSelection.rangeCount > 1) {
          var firstRange = domSelection.getRangeAt(0);
          var lastRange = domSelection.getRangeAt(domSelection.rangeCount - 1);
          if (firstRange.startContainer === focusNode) {
            anchorNode = lastRange.endContainer;
          } else {
            anchorNode = firstRange.startContainer;
          }
        } else {
          anchorNode = domSelection.anchorNode;
        }
        var editorElement = EDITOR_TO_ELEMENT.get(editor);
        var hasDomSelectionInEditor = false;
        if (editorElement.contains(anchorNode) && editorElement.contains(focusNode)) {
          hasDomSelectionInEditor = true;
        }
        if (hasDomSelection && hasDomSelectionInEditor && selection && !forceChange) {
          var slateRange = ReactEditor.toSlateRange(editor, domSelection, {
            exactMatch: true,
            // domSelection is not necessarily a valid Slate range
            // (e.g. when clicking on contentEditable:false element)
            suppressThrow: true
          });
          if (slateRange && Range.equals(slateRange, selection)) {
            var _anchorNode;
            if (!state.hasMarkPlaceholder) {
              return;
            }
            if ((_anchorNode = anchorNode) !== null && _anchorNode !== void 0 && (_anchorNode = _anchorNode.parentElement) !== null && _anchorNode !== void 0 && _anchorNode.hasAttribute("data-slate-mark-placeholder")) {
              return;
            }
          }
        }
        if (selection && !ReactEditor.hasRange(editor, selection)) {
          editor.selection = ReactEditor.toSlateRange(editor, domSelection, {
            exactMatch: false,
            suppressThrow: true
          });
          return;
        }
        state.isUpdatingSelection = true;
        var newDomRange = null;
        try {
          newDomRange = selection && ReactEditor.toDOMRange(editor, selection);
        } catch (e3) {
        }
        if (newDomRange) {
          if (ReactEditor.isComposing(editor) && !IS_ANDROID) {
            domSelection.collapseToEnd();
          } else if (Range.isBackward(selection)) {
            domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);
          } else {
            domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);
          }
          scrollSelectionIntoView(editor, newDomRange);
        } else {
          domSelection.removeAllRanges();
        }
        return newDomRange;
      };
      if (domSelection.rangeCount <= 1) {
        setDomSelection();
      }
      var ensureSelection = ((_androidInputManagerR2 = androidInputManagerRef.current) === null || _androidInputManagerR2 === void 0 ? void 0 : _androidInputManagerR2.isFlushing()) === "action";
      if (!IS_ANDROID || !ensureSelection) {
        setTimeout(() => {
          state.isUpdatingSelection = false;
        });
        return;
      }
      var timeoutId = null;
      var animationFrameId = requestAnimationFrame(() => {
        if (ensureSelection) {
          var ensureDomSelection = (forceChange) => {
            try {
              var el = ReactEditor.toDOMNode(editor, editor);
              el.focus();
              setDomSelection(forceChange);
            } catch (e3) {
            }
          };
          ensureDomSelection();
          timeoutId = setTimeout(() => {
            ensureDomSelection(true);
            state.isUpdatingSelection = false;
          });
        }
      });
      return () => {
        cancelAnimationFrame(animationFrameId);
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
      };
    });
    var onDOMBeforeInput = React.useCallback((event) => {
      handleNativeHistoryEvents(editor, event);
      var el = ReactEditor.toDOMNode(editor, editor);
      var root2 = el.getRootNode();
      if (processing2 !== null && processing2 !== void 0 && processing2.current && IS_WEBKIT && root2 instanceof ShadowRoot) {
        var ranges = event.getTargetRanges();
        var range2 = ranges[0];
        var newRange = new window.Range();
        newRange.setStart(range2.startContainer, range2.startOffset);
        newRange.setEnd(range2.endContainer, range2.endOffset);
        var slateRange = ReactEditor.toSlateRange(editor, newRange, {
          exactMatch: false,
          suppressThrow: false
        });
        Transforms.select(editor, slateRange);
        event.preventDefault();
        event.stopImmediatePropagation();
        return;
      }
      onUserInput();
      if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {
        var _EDITOR_TO_USER_SELEC;
        if (androidInputManagerRef.current) {
          return androidInputManagerRef.current.handleDOMBeforeInput(event);
        }
        scheduleOnDOMSelectionChange.flush();
        onDOMSelectionChange.flush();
        var {
          selection
        } = editor;
        var {
          inputType: type
        } = event;
        var data = event.dataTransfer || event.data || void 0;
        var isCompositionChange = type === "insertCompositionText" || type === "deleteCompositionText";
        if (isCompositionChange && ReactEditor.isComposing(editor)) {
          return;
        }
        var native = false;
        if (type === "insertText" && selection && Range.isCollapsed(selection) && // Only use native character insertion for single characters a-z or space for now.
        // Long-press events (hold a + press 4 = ä) to choose a special character otherwise
        // causes duplicate inserts.
        event.data && event.data.length === 1 && /[a-z ]/i.test(event.data) && // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405
        // When there is an inline element, e.g. a link, and you select
        // right after it (the start of the next node).
        selection.anchor.offset !== 0) {
          native = true;
          if (editor.marks) {
            native = false;
          }
          if (!IS_NODE_MAP_DIRTY.get(editor)) {
            var _node$parentElement, _window$getComputedSt;
            var {
              anchor: anchor2
            } = selection;
            var [node2, offset] = ReactEditor.toDOMPoint(editor, anchor2);
            var anchorNode = (_node$parentElement = node2.parentElement) === null || _node$parentElement === void 0 ? void 0 : _node$parentElement.closest("a");
            var _window = ReactEditor.getWindow(editor);
            if (native && anchorNode && ReactEditor.hasDOMNode(editor, anchorNode)) {
              var _lastText$textContent;
              var lastText = _window === null || _window === void 0 ? void 0 : _window.document.createTreeWalker(anchorNode, NodeFilter.SHOW_TEXT).lastChild();
              if (lastText === node2 && ((_lastText$textContent = lastText.textContent) === null || _lastText$textContent === void 0 ? void 0 : _lastText$textContent.length) === offset) {
                native = false;
              }
            }
            if (native && node2.parentElement && (_window === null || _window === void 0 || (_window$getComputedSt = _window.getComputedStyle(node2.parentElement)) === null || _window$getComputedSt === void 0 ? void 0 : _window$getComputedSt.whiteSpace) === "pre") {
              var block2 = Editor$2.above(editor, {
                at: anchor2.path,
                match: (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2)
              });
              if (block2 && Node$1.string(block2[0]).includes("	")) {
                native = false;
              }
            }
          }
        }
        if ((!type.startsWith("delete") || type.startsWith("deleteBy")) && !IS_NODE_MAP_DIRTY.get(editor)) {
          var [targetRange2] = event.getTargetRanges();
          if (targetRange2) {
            var _range = ReactEditor.toSlateRange(editor, targetRange2, {
              exactMatch: false,
              suppressThrow: false
            });
            if (!selection || !Range.equals(selection, _range)) {
              native = false;
              var selectionRef = !isCompositionChange && editor.selection && Editor$2.rangeRef(editor, editor.selection);
              Transforms.select(editor, _range);
              if (selectionRef) {
                EDITOR_TO_USER_SELECTION.set(editor, selectionRef);
              }
            }
          }
        }
        if (isCompositionChange) {
          return;
        }
        if (!native) {
          event.preventDefault();
        }
        if (selection && Range.isExpanded(selection) && type.startsWith("delete")) {
          var direction2 = type.endsWith("Backward") ? "backward" : "forward";
          Editor$2.deleteFragment(editor, {
            direction: direction2
          });
          return;
        }
        switch (type) {
          case "deleteByComposition":
          case "deleteByCut":
          case "deleteByDrag": {
            Editor$2.deleteFragment(editor);
            break;
          }
          case "deleteContent":
          case "deleteContentForward": {
            Editor$2.deleteForward(editor);
            break;
          }
          case "deleteContentBackward": {
            Editor$2.deleteBackward(editor);
            break;
          }
          case "deleteEntireSoftLine": {
            Editor$2.deleteBackward(editor, {
              unit: "line"
            });
            Editor$2.deleteForward(editor, {
              unit: "line"
            });
            break;
          }
          case "deleteHardLineBackward": {
            Editor$2.deleteBackward(editor, {
              unit: "block"
            });
            break;
          }
          case "deleteSoftLineBackward": {
            Editor$2.deleteBackward(editor, {
              unit: "line"
            });
            break;
          }
          case "deleteHardLineForward": {
            Editor$2.deleteForward(editor, {
              unit: "block"
            });
            break;
          }
          case "deleteSoftLineForward": {
            Editor$2.deleteForward(editor, {
              unit: "line"
            });
            break;
          }
          case "deleteWordBackward": {
            Editor$2.deleteBackward(editor, {
              unit: "word"
            });
            break;
          }
          case "deleteWordForward": {
            Editor$2.deleteForward(editor, {
              unit: "word"
            });
            break;
          }
          case "insertLineBreak":
            Editor$2.insertSoftBreak(editor);
            break;
          case "insertParagraph": {
            Editor$2.insertBreak(editor);
            break;
          }
          case "insertFromComposition":
          case "insertFromDrop":
          case "insertFromPaste":
          case "insertFromYank":
          case "insertReplacementText":
          case "insertText": {
            if (type === "insertFromComposition") {
              if (ReactEditor.isComposing(editor)) {
                setIsComposing(false);
                IS_COMPOSING.set(editor, false);
              }
            }
            if ((data === null || data === void 0 ? void 0 : data.constructor.name) === "DataTransfer") {
              ReactEditor.insertData(editor, data);
            } else if (typeof data === "string") {
              if (native) {
                deferredOperations.current.push(() => Editor$2.insertText(editor, data));
              } else {
                Editor$2.insertText(editor, data);
              }
            }
            break;
          }
        }
        var toRestore = (_EDITOR_TO_USER_SELEC = EDITOR_TO_USER_SELECTION.get(editor)) === null || _EDITOR_TO_USER_SELEC === void 0 ? void 0 : _EDITOR_TO_USER_SELEC.unref();
        EDITOR_TO_USER_SELECTION.delete(editor);
        if (toRestore && (!editor.selection || !Range.equals(editor.selection, toRestore))) {
          Transforms.select(editor, toRestore);
        }
      }
    }, [editor, onDOMSelectionChange, onUserInput, propsOnDOMBeforeInput, readOnly, scheduleOnDOMSelectionChange]);
    var callbackRef = React.useCallback((node2) => {
      if (node2 == null) {
        onDOMSelectionChange.cancel();
        scheduleOnDOMSelectionChange.cancel();
        EDITOR_TO_ELEMENT.delete(editor);
        NODE_TO_ELEMENT.delete(editor);
        if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {
          ref.current.removeEventListener("beforeinput", onDOMBeforeInput);
        }
      } else {
        if (HAS_BEFORE_INPUT_SUPPORT) {
          node2.addEventListener("beforeinput", onDOMBeforeInput);
        }
      }
      ref.current = node2;
      if (typeof forwardedRef === "function") {
        forwardedRef(node2);
      } else if (forwardedRef) {
        forwardedRef.current = node2;
      }
    }, [onDOMSelectionChange, scheduleOnDOMSelectionChange, editor, onDOMBeforeInput, forwardedRef]);
    useIsomorphicLayoutEffect(() => {
      var window2 = ReactEditor.getWindow(editor);
      var onSelectionChange = (_ref) => {
        var {
          target
        } = _ref;
        var targetElement = target instanceof HTMLElement ? target : null;
        var targetTagName = targetElement === null || targetElement === void 0 ? void 0 : targetElement.tagName;
        if (targetTagName === "INPUT" || targetTagName === "TEXTAREA") {
          return;
        }
        scheduleOnDOMSelectionChange();
      };
      window2.document.addEventListener("selectionchange", onSelectionChange);
      var stoppedDragging = () => {
        state.isDraggingInternally = false;
      };
      window2.document.addEventListener("dragend", stoppedDragging);
      window2.document.addEventListener("drop", stoppedDragging);
      return () => {
        window2.document.removeEventListener("selectionchange", onSelectionChange);
        window2.document.removeEventListener("dragend", stoppedDragging);
        window2.document.removeEventListener("drop", stoppedDragging);
      };
    }, [scheduleOnDOMSelectionChange, state]);
    var decorations = decorate([editor, []]);
    var showPlaceholder = placeholder && editor.children.length === 1 && Array.from(Node$1.texts(editor)).length === 1 && Node$1.string(editor) === "" && !isComposing2;
    var placeHolderResizeHandler = React.useCallback((placeholderEl) => {
      if (placeholderEl && showPlaceholder) {
        var _placeholderEl$getBou;
        setPlaceholderHeight((_placeholderEl$getBou = placeholderEl.getBoundingClientRect()) === null || _placeholderEl$getBou === void 0 ? void 0 : _placeholderEl$getBou.height);
      } else {
        setPlaceholderHeight(void 0);
      }
    }, [showPlaceholder]);
    if (showPlaceholder) {
      var start2 = Editor$2.start(editor, []);
      decorations.push({
        [PLACEHOLDER_SYMBOL]: true,
        placeholder,
        onPlaceholderResize: placeHolderResizeHandler,
        anchor: start2,
        focus: start2
      });
    }
    var {
      marks: marks2
    } = editor;
    state.hasMarkPlaceholder = false;
    if (editor.selection && Range.isCollapsed(editor.selection) && marks2) {
      var {
        anchor
      } = editor.selection;
      var leaf2 = Node$1.leaf(editor, anchor.path);
      var rest = _objectWithoutProperties$1(leaf2, _excluded2);
      if (!Text$1.equals(leaf2, marks2, {
        loose: true
      })) {
        state.hasMarkPlaceholder = true;
        var unset = Object.fromEntries(Object.keys(rest).map((mark2) => [mark2, null]));
        decorations.push(_objectSpread$7(_objectSpread$7(_objectSpread$7({
          [MARK_PLACEHOLDER_SYMBOL]: true
        }, unset), marks2), {}, {
          anchor,
          focus: anchor
        }));
      }
    }
    React.useEffect(() => {
      setTimeout(() => {
        var {
          selection
        } = editor;
        if (selection) {
          var {
            anchor: _anchor
          } = selection;
          var _text = Node$1.leaf(editor, _anchor.path);
          if (marks2 && !Text$1.equals(_text, marks2, {
            loose: true
          })) {
            EDITOR_TO_PENDING_INSERTION_MARKS.set(editor, marks2);
            return;
          }
        }
        EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);
      });
    });
    return /* @__PURE__ */ React.createElement(ReadOnlyContext.Provider, {
      value: readOnly
    }, /* @__PURE__ */ React.createElement(ComposingContext.Provider, {
      value: isComposing2
    }, /* @__PURE__ */ React.createElement(DecorateContext.Provider, {
      value: decorate
    }, /* @__PURE__ */ React.createElement(RestoreDOM, {
      node: ref,
      receivedUserInput
    }, /* @__PURE__ */ React.createElement(Component, _objectSpread$7(_objectSpread$7({
      role: readOnly ? void 0 : "textbox",
      "aria-multiline": readOnly ? void 0 : true
    }, attributes), {}, {
      // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd
      // have to use hacks to make these replacement-based features work.
      // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop
      // mismatch warning app moves to browser. Pass-through consumer props when
      // not CAN_USE_DOM (SSR) and default to falsy value
      spellCheck: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM$1 ? attributes.spellCheck : false,
      autoCorrect: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM$1 ? attributes.autoCorrect : "false",
      autoCapitalize: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM$1 ? attributes.autoCapitalize : "false",
      "data-slate-editor": true,
      "data-slate-node": "value",
      // explicitly set this
      contentEditable: !readOnly,
      // in some cases, a decoration needs access to the range / selection to decorate a text node,
      // then you will select the whole text node when you select part the of text
      // this magic zIndex="-1" will fix it
      zindex: -1,
      suppressContentEditableWarning: true,
      ref: callbackRef,
      style: _objectSpread$7(_objectSpread$7({}, disableDefaultStyles ? {} : _objectSpread$7({
        // Allow positioning relative to the editable element.
        position: "relative",
        // Preserve adjacent whitespace and new lines.
        whiteSpace: "pre-wrap",
        // Allow words to break if they are too long.
        wordWrap: "break-word"
      }, placeholderHeight ? {
        minHeight: placeholderHeight
      } : {})), userStyle),
      onBeforeInput: React.useCallback((event) => {
        if (!HAS_BEFORE_INPUT_SUPPORT && !readOnly && !isEventHandled$1(event, attributes.onBeforeInput) && ReactEditor.hasSelectableTarget(editor, event.target)) {
          event.preventDefault();
          if (!ReactEditor.isComposing(editor)) {
            var _text2 = event.data;
            Editor$2.insertText(editor, _text2);
          }
        }
      }, [attributes.onBeforeInput, editor, readOnly]),
      onInput: React.useCallback((event) => {
        if (isEventHandled$1(event, attributes.onInput)) {
          return;
        }
        if (androidInputManagerRef.current) {
          androidInputManagerRef.current.handleInput();
          return;
        }
        for (var op of deferredOperations.current) {
          op();
        }
        deferredOperations.current = [];
        if (!ReactEditor.isFocused(editor)) {
          handleNativeHistoryEvents(editor, event.nativeEvent);
        }
      }, [attributes.onInput, editor]),
      onBlur: React.useCallback((event) => {
        if (readOnly || state.isUpdatingSelection || !ReactEditor.hasSelectableTarget(editor, event.target) || isEventHandled$1(event, attributes.onBlur)) {
          return;
        }
        var root2 = ReactEditor.findDocumentOrShadowRoot(editor);
        if (state.latestElement === root2.activeElement) {
          return;
        }
        var {
          relatedTarget
        } = event;
        var el = ReactEditor.toDOMNode(editor, editor);
        if (relatedTarget === el) {
          return;
        }
        if (isDOMElement(relatedTarget) && relatedTarget.hasAttribute("data-slate-spacer")) {
          return;
        }
        if (relatedTarget != null && isDOMNode(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {
          var node2 = ReactEditor.toSlateNode(editor, relatedTarget);
          if (Element$2.isElement(node2) && !editor.isVoid(node2)) {
            return;
          }
        }
        if (IS_WEBKIT) {
          var domSelection = getSelection(root2);
          domSelection === null || domSelection === void 0 || domSelection.removeAllRanges();
        }
        IS_FOCUSED.delete(editor);
      }, [readOnly, state.isUpdatingSelection, state.latestElement, editor, attributes.onBlur]),
      onClick: React.useCallback((event) => {
        if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled$1(event, attributes.onClick) && isDOMNode(event.target)) {
          var node2 = ReactEditor.toSlateNode(editor, event.target);
          var path2 = ReactEditor.findPath(editor, node2);
          if (!Editor$2.hasPath(editor, path2) || Node$1.get(editor, path2) !== node2) {
            return;
          }
          if (event.detail === TRIPLE_CLICK && path2.length >= 1) {
            var blockPath = path2;
            if (!(Element$2.isElement(node2) && Editor$2.isBlock(editor, node2))) {
              var _block$;
              var block2 = Editor$2.above(editor, {
                match: (n2) => Element$2.isElement(n2) && Editor$2.isBlock(editor, n2),
                at: path2
              });
              blockPath = (_block$ = block2 === null || block2 === void 0 ? void 0 : block2[1]) !== null && _block$ !== void 0 ? _block$ : path2.slice(0, 1);
            }
            var range2 = Editor$2.range(editor, blockPath);
            Transforms.select(editor, range2);
            return;
          }
          if (readOnly) {
            return;
          }
          var _start = Editor$2.start(editor, path2);
          var end2 = Editor$2.end(editor, path2);
          var startVoid = Editor$2.void(editor, {
            at: _start
          });
          var endVoid = Editor$2.void(editor, {
            at: end2
          });
          if (startVoid && endVoid && Path.equals(startVoid[1], endVoid[1])) {
            var _range2 = Editor$2.range(editor, _start);
            Transforms.select(editor, _range2);
          }
        }
      }, [editor, attributes.onClick, readOnly]),
      onCompositionEnd: React.useCallback((event) => {
        if (ReactEditor.hasSelectableTarget(editor, event.target)) {
          var _androidInputManagerR3;
          if (ReactEditor.isComposing(editor)) {
            Promise.resolve().then(() => {
              setIsComposing(false);
              IS_COMPOSING.set(editor, false);
            });
          }
          (_androidInputManagerR3 = androidInputManagerRef.current) === null || _androidInputManagerR3 === void 0 || _androidInputManagerR3.handleCompositionEnd(event);
          if (isEventHandled$1(event, attributes.onCompositionEnd) || IS_ANDROID) {
            return;
          }
          if (!IS_WEBKIT && !IS_FIREFOX_LEGACY && !IS_IOS && !IS_WECHATBROWSER && !IS_UC_MOBILE && event.data) {
            var placeholderMarks = EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);
            EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);
            if (placeholderMarks !== void 0) {
              EDITOR_TO_USER_MARKS.set(editor, editor.marks);
              editor.marks = placeholderMarks;
            }
            Editor$2.insertText(editor, event.data);
            var userMarks = EDITOR_TO_USER_MARKS.get(editor);
            EDITOR_TO_USER_MARKS.delete(editor);
            if (userMarks !== void 0) {
              editor.marks = userMarks;
            }
          }
        }
      }, [attributes.onCompositionEnd, editor]),
      onCompositionUpdate: React.useCallback((event) => {
        if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled$1(event, attributes.onCompositionUpdate)) {
          if (!ReactEditor.isComposing(editor)) {
            setIsComposing(true);
            IS_COMPOSING.set(editor, true);
          }
        }
      }, [attributes.onCompositionUpdate, editor]),
      onCompositionStart: React.useCallback((event) => {
        if (ReactEditor.hasSelectableTarget(editor, event.target)) {
          var _androidInputManagerR4;
          (_androidInputManagerR4 = androidInputManagerRef.current) === null || _androidInputManagerR4 === void 0 || _androidInputManagerR4.handleCompositionStart(event);
          if (isEventHandled$1(event, attributes.onCompositionStart) || IS_ANDROID) {
            return;
          }
          setIsComposing(true);
          var {
            selection
          } = editor;
          if (selection && Range.isExpanded(selection)) {
            Editor$2.deleteFragment(editor);
            return;
          }
        }
      }, [attributes.onCompositionStart, editor]),
      onCopy: React.useCallback((event) => {
        if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled$1(event, attributes.onCopy) && !isDOMEventTargetInput(event)) {
          event.preventDefault();
          ReactEditor.setFragmentData(editor, event.clipboardData, "copy");
        }
      }, [attributes.onCopy, editor]),
      onCut: React.useCallback((event) => {
        if (!readOnly && ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled$1(event, attributes.onCut) && !isDOMEventTargetInput(event)) {
          event.preventDefault();
          ReactEditor.setFragmentData(editor, event.clipboardData, "cut");
          var {
            selection
          } = editor;
          if (selection) {
            if (Range.isExpanded(selection)) {
              Editor$2.deleteFragment(editor);
            } else {
              var node2 = Node$1.parent(editor, selection.anchor.path);
              if (Editor$2.isVoid(editor, node2)) {
                Transforms.delete(editor);
              }
            }
          }
        }
      }, [readOnly, editor, attributes.onCut]),
      onDragOver: React.useCallback((event) => {
        if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled$1(event, attributes.onDragOver)) {
          var node2 = ReactEditor.toSlateNode(editor, event.target);
          if (Element$2.isElement(node2) && Editor$2.isVoid(editor, node2)) {
            event.preventDefault();
          }
        }
      }, [attributes.onDragOver, editor]),
      onDragStart: React.useCallback((event) => {
        if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled$1(event, attributes.onDragStart)) {
          var node2 = ReactEditor.toSlateNode(editor, event.target);
          var path2 = ReactEditor.findPath(editor, node2);
          var voidMatch = Element$2.isElement(node2) && Editor$2.isVoid(editor, node2) || Editor$2.void(editor, {
            at: path2,
            voids: true
          });
          if (voidMatch) {
            var range2 = Editor$2.range(editor, path2);
            Transforms.select(editor, range2);
          }
          state.isDraggingInternally = true;
          ReactEditor.setFragmentData(editor, event.dataTransfer, "drag");
        }
      }, [readOnly, editor, attributes.onDragStart, state]),
      onDrop: React.useCallback((event) => {
        if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled$1(event, attributes.onDrop)) {
          event.preventDefault();
          var draggedRange = editor.selection;
          var range2 = ReactEditor.findEventRange(editor, event);
          var data = event.dataTransfer;
          Transforms.select(editor, range2);
          if (state.isDraggingInternally) {
            if (draggedRange && !Range.equals(draggedRange, range2) && !Editor$2.void(editor, {
              at: range2,
              voids: true
            })) {
              Transforms.delete(editor, {
                at: draggedRange
              });
            }
          }
          ReactEditor.insertData(editor, data);
          if (!ReactEditor.isFocused(editor)) {
            ReactEditor.focus(editor);
          }
        }
      }, [readOnly, editor, attributes.onDrop, state]),
      onDragEnd: React.useCallback((event) => {
        if (!readOnly && state.isDraggingInternally && attributes.onDragEnd && ReactEditor.hasTarget(editor, event.target)) {
          attributes.onDragEnd(event);
        }
      }, [readOnly, state, attributes, editor]),
      onFocus: React.useCallback((event) => {
        if (!readOnly && !state.isUpdatingSelection && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled$1(event, attributes.onFocus)) {
          var el = ReactEditor.toDOMNode(editor, editor);
          var root2 = ReactEditor.findDocumentOrShadowRoot(editor);
          state.latestElement = root2.activeElement;
          if (IS_FIREFOX && event.target !== el) {
            el.focus();
            return;
          }
          IS_FOCUSED.set(editor, true);
        }
      }, [readOnly, state, editor, attributes.onFocus]),
      onKeyDown: React.useCallback((event) => {
        if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target)) {
          var _androidInputManagerR5;
          (_androidInputManagerR5 = androidInputManagerRef.current) === null || _androidInputManagerR5 === void 0 || _androidInputManagerR5.handleKeyDown(event);
          var {
            nativeEvent
          } = event;
          if (ReactEditor.isComposing(editor) && nativeEvent.isComposing === false) {
            IS_COMPOSING.set(editor, false);
            setIsComposing(false);
          }
          if (isEventHandled$1(event, attributes.onKeyDown) || ReactEditor.isComposing(editor)) {
            return;
          }
          var {
            selection
          } = editor;
          var element = editor.children[selection !== null ? selection.focus.path[0] : 0];
          var isRTL = getDirection(Node$1.string(element)) === "rtl";
          if (hotkeys.isRedo(nativeEvent)) {
            event.preventDefault();
            var maybeHistoryEditor = editor;
            if (typeof maybeHistoryEditor.redo === "function") {
              maybeHistoryEditor.redo();
            }
            return;
          }
          if (hotkeys.isUndo(nativeEvent)) {
            event.preventDefault();
            var _maybeHistoryEditor = editor;
            if (typeof _maybeHistoryEditor.undo === "function") {
              _maybeHistoryEditor.undo();
            }
            return;
          }
          if (hotkeys.isMoveLineBackward(nativeEvent)) {
            event.preventDefault();
            Transforms.move(editor, {
              unit: "line",
              reverse: true
            });
            return;
          }
          if (hotkeys.isMoveLineForward(nativeEvent)) {
            event.preventDefault();
            Transforms.move(editor, {
              unit: "line"
            });
            return;
          }
          if (hotkeys.isExtendLineBackward(nativeEvent)) {
            event.preventDefault();
            Transforms.move(editor, {
              unit: "line",
              edge: "focus",
              reverse: true
            });
            return;
          }
          if (hotkeys.isExtendLineForward(nativeEvent)) {
            event.preventDefault();
            Transforms.move(editor, {
              unit: "line",
              edge: "focus"
            });
            return;
          }
          if (hotkeys.isMoveBackward(nativeEvent)) {
            event.preventDefault();
            if (selection && Range.isCollapsed(selection)) {
              Transforms.move(editor, {
                reverse: !isRTL
              });
            } else {
              Transforms.collapse(editor, {
                edge: isRTL ? "end" : "start"
              });
            }
            return;
          }
          if (hotkeys.isMoveForward(nativeEvent)) {
            event.preventDefault();
            if (selection && Range.isCollapsed(selection)) {
              Transforms.move(editor, {
                reverse: isRTL
              });
            } else {
              Transforms.collapse(editor, {
                edge: isRTL ? "start" : "end"
              });
            }
            return;
          }
          if (hotkeys.isMoveWordBackward(nativeEvent)) {
            event.preventDefault();
            if (selection && Range.isExpanded(selection)) {
              Transforms.collapse(editor, {
                edge: "focus"
              });
            }
            Transforms.move(editor, {
              unit: "word",
              reverse: !isRTL
            });
            return;
          }
          if (hotkeys.isMoveWordForward(nativeEvent)) {
            event.preventDefault();
            if (selection && Range.isExpanded(selection)) {
              Transforms.collapse(editor, {
                edge: "focus"
              });
            }
            Transforms.move(editor, {
              unit: "word",
              reverse: isRTL
            });
            return;
          }
          if (!HAS_BEFORE_INPUT_SUPPORT) {
            if (hotkeys.isBold(nativeEvent) || hotkeys.isItalic(nativeEvent) || hotkeys.isTransposeCharacter(nativeEvent)) {
              event.preventDefault();
              return;
            }
            if (hotkeys.isSoftBreak(nativeEvent)) {
              event.preventDefault();
              Editor$2.insertSoftBreak(editor);
              return;
            }
            if (hotkeys.isSplitBlock(nativeEvent)) {
              event.preventDefault();
              Editor$2.insertBreak(editor);
              return;
            }
            if (hotkeys.isDeleteBackward(nativeEvent)) {
              event.preventDefault();
              if (selection && Range.isExpanded(selection)) {
                Editor$2.deleteFragment(editor, {
                  direction: "backward"
                });
              } else {
                Editor$2.deleteBackward(editor);
              }
              return;
            }
            if (hotkeys.isDeleteForward(nativeEvent)) {
              event.preventDefault();
              if (selection && Range.isExpanded(selection)) {
                Editor$2.deleteFragment(editor, {
                  direction: "forward"
                });
              } else {
                Editor$2.deleteForward(editor);
              }
              return;
            }
            if (hotkeys.isDeleteLineBackward(nativeEvent)) {
              event.preventDefault();
              if (selection && Range.isExpanded(selection)) {
                Editor$2.deleteFragment(editor, {
                  direction: "backward"
                });
              } else {
                Editor$2.deleteBackward(editor, {
                  unit: "line"
                });
              }
              return;
            }
            if (hotkeys.isDeleteLineForward(nativeEvent)) {
              event.preventDefault();
              if (selection && Range.isExpanded(selection)) {
                Editor$2.deleteFragment(editor, {
                  direction: "forward"
                });
              } else {
                Editor$2.deleteForward(editor, {
                  unit: "line"
                });
              }
              return;
            }
            if (hotkeys.isDeleteWordBackward(nativeEvent)) {
              event.preventDefault();
              if (selection && Range.isExpanded(selection)) {
                Editor$2.deleteFragment(editor, {
                  direction: "backward"
                });
              } else {
                Editor$2.deleteBackward(editor, {
                  unit: "word"
                });
              }
              return;
            }
            if (hotkeys.isDeleteWordForward(nativeEvent)) {
              event.preventDefault();
              if (selection && Range.isExpanded(selection)) {
                Editor$2.deleteFragment(editor, {
                  direction: "forward"
                });
              } else {
                Editor$2.deleteForward(editor, {
                  unit: "word"
                });
              }
              return;
            }
          } else {
            if (IS_CHROME || IS_WEBKIT) {
              if (selection && (hotkeys.isDeleteBackward(nativeEvent) || hotkeys.isDeleteForward(nativeEvent)) && Range.isCollapsed(selection)) {
                var currentNode = Node$1.parent(editor, selection.anchor.path);
                if (Element$2.isElement(currentNode) && Editor$2.isVoid(editor, currentNode) && (Editor$2.isInline(editor, currentNode) || Editor$2.isBlock(editor, currentNode))) {
                  event.preventDefault();
                  Editor$2.deleteBackward(editor, {
                    unit: "block"
                  });
                  return;
                }
              }
            }
          }
        }
      }, [readOnly, editor, attributes.onKeyDown]),
      onPaste: React.useCallback((event) => {
        if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled$1(event, attributes.onPaste)) {
          if (!HAS_BEFORE_INPUT_SUPPORT || isPlainTextOnlyPaste(event.nativeEvent) || IS_WEBKIT) {
            event.preventDefault();
            ReactEditor.insertData(editor, event.clipboardData);
          }
        }
      }, [readOnly, editor, attributes.onPaste])
    }), /* @__PURE__ */ React.createElement(Children, {
      decorations,
      node: editor,
      renderElement,
      renderPlaceholder,
      renderLeaf,
      renderText,
      selection: editor.selection
    }))))));
  });
  var DefaultPlaceholder = (_ref2) => {
    var {
      attributes,
      children
    } = _ref2;
    return (
      // COMPAT: Artificially add a line-break to the end on the placeholder element
      // to prevent Android IMEs to pick up its content in autocorrect and to auto-capitalize the first letter
      /* @__PURE__ */ React.createElement("span", _objectSpread$7({}, attributes), children, IS_ANDROID && /* @__PURE__ */ React.createElement("br", null))
    );
  };
  var defaultDecorate = () => [];
  var defaultScrollSelectionIntoView = (editor, domRange) => {
    if (domRange.getBoundingClientRect && (!editor.selection || editor.selection && Range.isCollapsed(editor.selection))) {
      var leafEl = domRange.startContainer.parentElement;
      leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange);
      e$2(leafEl, {
        scrollMode: "if-needed"
      });
      delete leafEl.getBoundingClientRect;
    }
  };
  var isEventHandled$1 = (event, handler) => {
    if (!handler) {
      return false;
    }
    var shouldTreatEventAsHandled = handler(event);
    if (shouldTreatEventAsHandled != null) {
      return shouldTreatEventAsHandled;
    }
    return event.isDefaultPrevented() || event.isPropagationStopped();
  };
  var isDOMEventTargetInput = (event) => {
    return isDOMNode(event.target) && (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement);
  };
  var isDOMEventHandled = (event, handler) => {
    if (!handler) {
      return false;
    }
    var shouldTreatEventAsHandled = handler(event);
    if (shouldTreatEventAsHandled != null) {
      return shouldTreatEventAsHandled;
    }
    return event.defaultPrevented;
  };
  var handleNativeHistoryEvents = (editor, event) => {
    var maybeHistoryEditor = editor;
    if (event.inputType === "historyUndo" && typeof maybeHistoryEditor.undo === "function") {
      maybeHistoryEditor.undo();
      return;
    }
    if (event.inputType === "historyRedo" && typeof maybeHistoryEditor.redo === "function") {
      maybeHistoryEditor.redo();
      return;
    }
  };
  var FocusedContext = /* @__PURE__ */ React.createContext(false);
  var useFocused = () => {
    return React.useContext(FocusedContext);
  };
  var SlateSelectorContext = /* @__PURE__ */ React.createContext({});
  function useSelectorContext(editor) {
    var eventListeners = React.useRef([]).current;
    var slateRef = React.useRef({
      editor
    }).current;
    var onChange = React.useCallback((editor2) => {
      slateRef.editor = editor2;
      eventListeners.forEach((listener) => listener(editor2));
    }, [eventListeners, slateRef]);
    var selectorContext = React.useMemo(() => {
      return {
        getSlate: () => slateRef.editor,
        addEventListener: (callback) => {
          eventListeners.push(callback);
          return () => {
            eventListeners.splice(eventListeners.indexOf(callback), 1);
          };
        }
      };
    }, [eventListeners, slateRef]);
    return {
      selectorContext,
      onChange
    };
  }
  var REACT_MAJOR_VERSION = parseInt(React.version.split(".")[0], 10);
  var _excluded$3 = ["editor", "children", "onChange", "onSelectionChange", "onValueChange", "initialValue"];
  var Slate = (props) => {
    var {
      editor,
      children,
      onChange,
      onSelectionChange,
      onValueChange,
      initialValue
    } = props, rest = _objectWithoutProperties$1(props, _excluded$3);
    var [context, setContext] = React.useState(() => {
      if (!Node$1.isNodeList(initialValue)) {
        throw new Error("[Slate] initialValue is invalid! Expected a list of elements but got: ".concat(Scrubber.stringify(initialValue)));
      }
      if (!Editor$2.isEditor(editor)) {
        throw new Error("[Slate] editor is invalid! You passed: ".concat(Scrubber.stringify(editor)));
      }
      editor.children = initialValue;
      Object.assign(editor, rest);
      return {
        v: 0,
        editor
      };
    });
    var {
      selectorContext,
      onChange: handleSelectorChange
    } = useSelectorContext(editor);
    var onContextChange = React.useCallback((options) => {
      var _options$operation;
      if (onChange) {
        onChange(editor.children);
      }
      switch (options === null || options === void 0 || (_options$operation = options.operation) === null || _options$operation === void 0 ? void 0 : _options$operation.type) {
        case "set_selection":
          onSelectionChange === null || onSelectionChange === void 0 || onSelectionChange(editor.selection);
          break;
        default:
          onValueChange === null || onValueChange === void 0 || onValueChange(editor.children);
      }
      setContext((prevContext) => ({
        v: prevContext.v + 1,
        editor
      }));
      handleSelectorChange(editor);
    }, [editor, handleSelectorChange, onChange, onSelectionChange, onValueChange]);
    React.useEffect(() => {
      EDITOR_TO_ON_CHANGE.set(editor, onContextChange);
      return () => {
        EDITOR_TO_ON_CHANGE.set(editor, () => {
        });
      };
    }, [editor, onContextChange]);
    var [isFocused2, setIsFocused] = React.useState(ReactEditor.isFocused(editor));
    React.useEffect(() => {
      setIsFocused(ReactEditor.isFocused(editor));
    }, [editor]);
    useIsomorphicLayoutEffect(() => {
      var fn = () => setIsFocused(ReactEditor.isFocused(editor));
      if (REACT_MAJOR_VERSION >= 17) {
        document.addEventListener("focusin", fn);
        document.addEventListener("focusout", fn);
        return () => {
          document.removeEventListener("focusin", fn);
          document.removeEventListener("focusout", fn);
        };
      } else {
        document.addEventListener("focus", fn, true);
        document.addEventListener("blur", fn, true);
        return () => {
          document.removeEventListener("focus", fn, true);
          document.removeEventListener("blur", fn, true);
        };
      }
    }, []);
    return /* @__PURE__ */ React.createElement(SlateSelectorContext.Provider, {
      value: selectorContext
    }, /* @__PURE__ */ React.createElement(SlateContext.Provider, {
      value: context
    }, /* @__PURE__ */ React.createElement(EditorContext.Provider, {
      value: context.editor
    }, /* @__PURE__ */ React.createElement(FocusedContext.Provider, {
      value: isFocused2
    }, children))));
  };
  var withReact = function withReact2(editor) {
    var clipboardFormatKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "x-slate-fragment";
    var e3 = editor;
    e3 = withDOM(e3, clipboardFormatKey);
    var {
      onChange
    } = e3;
    e3.onChange = (options) => {
      var maybeBatchUpdates = REACT_MAJOR_VERSION < 18 ? ReactDOM.unstable_batchedUpdates : (callback) => callback();
      maybeBatchUpdates(() => {
        onChange(options);
      });
    };
    return e3;
  };
  var __defProp$2 = Object.defineProperty;
  var __defProps$2 = Object.defineProperties;
  var __getOwnPropDescs$2 = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;
  var __hasOwnProp$2 = Object.prototype.hasOwnProperty;
  var __propIsEnum$2 = Object.prototype.propertyIsEnumerable;
  var __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues$2 = (a2, b) => {
    for (var prop2 in b || (b = {}))
      if (__hasOwnProp$2.call(b, prop2))
        __defNormalProp$2(a2, prop2, b[prop2]);
    if (__getOwnPropSymbols$2)
      for (var prop2 of __getOwnPropSymbols$2(b)) {
        if (__propIsEnum$2.call(b, prop2))
          __defNormalProp$2(a2, prop2, b[prop2]);
      }
    return a2;
  };
  var __spreadProps$2 = (a2, b) => __defProps$2(a2, __getOwnPropDescs$2(b));
  var BoundHotkeysProxyProvider = React.createContext(void 0);
  var useBoundHotkeysProxy = () => {
    return React.useContext(BoundHotkeysProxyProvider);
  };
  function deepEqual(x, y) {
    return x && y && typeof x === "object" && typeof y === "object" ? Object.keys(x).length === Object.keys(y).length && Object.keys(x).reduce(
      (isEqual2, key) => isEqual2 && deepEqual(x[key], y[key]),
      true
    ) : x === y;
  }
  var HotkeysContext = React.createContext({
    activeScopes: [],
    // This array has to be empty instead of containing '*' as default, to check if the provider is set or not
    disableScope: () => {
    },
    enableScope: () => {
    },
    hotkeys: [],
    toggleScope: () => {
    }
  });
  var useHotkeysContext = () => {
    return React.useContext(HotkeysContext);
  };
  var reservedModifierKeywords = /* @__PURE__ */ new Set([
    "shift",
    "alt",
    "meta",
    "mod",
    "ctrl",
    "control"
  ]);
  var mappedKeys = {
    AltLeft: "alt",
    AltRight: "alt",
    ControlLeft: "ctrl",
    ControlRight: "ctrl",
    MetaLeft: "meta",
    MetaRight: "meta",
    OSLeft: "meta",
    OSRight: "meta",
    ShiftLeft: "shift",
    ShiftRight: "shift",
    down: "arrowdown",
    esc: "escape",
    left: "arrowleft",
    return: "enter",
    right: "arrowright",
    up: "arrowup"
  };
  function mapKey(key) {
    return (mappedKeys[key.trim()] || key.trim()).toLowerCase().replace(/key|digit|numpad/, "");
  }
  function isHotkeyModifier(key) {
    return reservedModifierKeywords.has(key);
  }
  function parseKeysHookInput(keys2, delimiter = ",") {
    return keys2.toLowerCase().split(delimiter);
  }
  function parseHotkey(hotkey, splitKey = "+", useKey = false, description) {
    const keys2 = hotkey.toLocaleLowerCase().split(splitKey).map((k) => mapKey(k));
    const modifiers = {
      alt: keys2.includes("alt"),
      ctrl: keys2.includes("ctrl") || keys2.includes("control"),
      meta: keys2.includes("meta"),
      mod: keys2.includes("mod"),
      shift: keys2.includes("shift"),
      useKey
    };
    const singleCharKeys = keys2.filter((k) => !reservedModifierKeywords.has(k));
    return __spreadProps$2(__spreadValues$2({}, modifiers), {
      description,
      keys: singleCharKeys
    });
  }
  (() => {
    if (typeof document !== "undefined") {
      document.addEventListener("keydown", (e3) => {
        if (e3.code === void 0) {
          return;
        }
        pushToCurrentlyPressedKeys([mapKey(e3.code)]);
      });
      document.addEventListener("keyup", (e3) => {
        if (e3.code === void 0) {
          return;
        }
        removeFromCurrentlyPressedKeys([mapKey(e3.code)]);
      });
    }
    if (typeof window !== "undefined") {
      window.addEventListener("blur", () => {
        currentlyPressedKeys.clear();
      });
    }
  })();
  var currentlyPressedKeys = /* @__PURE__ */ new Set();
  function isReadonlyArray(value) {
    return Array.isArray(value);
  }
  function isHotkeyPressed(key, delimiter = ",") {
    const hotkeyArray = isReadonlyArray(key) ? key : key.split(delimiter);
    return hotkeyArray.every(
      (hotkey) => currentlyPressedKeys.has(hotkey.trim().toLowerCase())
    );
  }
  function pushToCurrentlyPressedKeys(key) {
    const hotkeyArray = Array.isArray(key) ? key : [key];
    if (currentlyPressedKeys.has("meta")) {
      currentlyPressedKeys.forEach(
        (key2) => !isHotkeyModifier(key2) && currentlyPressedKeys.delete(key2.toLowerCase())
      );
    }
    hotkeyArray.forEach(
      (hotkey) => currentlyPressedKeys.add(hotkey.toLowerCase())
    );
  }
  function removeFromCurrentlyPressedKeys(key) {
    const hotkeyArray = Array.isArray(key) ? key : [key];
    if (key === "meta") {
      currentlyPressedKeys.clear();
    } else {
      hotkeyArray.forEach(
        (hotkey) => currentlyPressedKeys.delete(hotkey.toLowerCase())
      );
    }
  }
  var Key = {
    /** Changes the input mode on an external audio/video receiver (AVR) unit. */
    AVRInput: "AVRInput",
    /** Toggles the power on an external AVR unit. */
    AVRPower: "AVRPower",
    /**
     * The Accept, Commit, or OK key or button. Accepts the currently selected
     * option or input method sequence conversion.
     */
    Accept: "Accept",
    /** The numeric keypad's addition key, +. */
    Add: "Add",
    /** The Again key. Redoes or repeats a previous action. */
    Again: "Again",
    /**
     * The All Candidates key, which starts multi-candidate mode, in which
     * multiple candidates are displayed for the ongoing input.
     */
    AllCandidates: "AllCandidates",
    /** The Alphanumeric key. */
    Alphanumeric: "Alphanumeric",
    /**
     * The Alt (Alternative) key. This is the Option ⌥ key on Mac, or the Alt key
     * on Windows.
     */
    Alt: "Alt",
    /**
     * The AltGr or AltGraph (Alternate Graphics) key. Enables the ISO Level 3
     * shift modifier (where Shift is the level 2 modifier).
     */
    AltGraph: "AltGraph",
    /**
     * Presents a list of recently-used applications which lets the user change
     * apps quickly.
     */
    AppSwitch: "AppSwitch",
    /** The down arrow key. */
    ArrowDown: "ArrowDown",
    /** The left arrow key. */
    ArrowLeft: "ArrowLeft",
    /** The right arrow key. */
    ArrowRight: "ArrowRight",
    /** The up arrow key. */
    ArrowUp: "ArrowUp",
    /** The Attn (Attention) key. */
    Attn: "Attn",
    /** Adjusts audio balance toward the left. */
    AudioBalanceLeft: "AudioBalanceLeft",
    /** Adjusts audio balance twoard the right. */
    AudioBalanceRight: "AudioBalanceRight",
    /**
     * Reduces bass boosting or cycles downward through bass boost modes or
     * states.
     */
    AudioBassBoostDown: "AudioBassBoostDown",
    /** Toggles bass boosting on and off. */
    AudioBassBoostToggle: "AudioBassBoostToggle",
    /**
     * Increases the amoung of bass boosting, or cycles upward through a set of
     * bass boost modes or states.
     */
    AudioBassBoostUp: "AudioBassBoostUp",
    /** Decreases the amount of bass. */
    AudioBassDown: "AudioBassDown",
    /** Increases the amount of bass. */
    AudioBassUp: "AudioBassUp",
    /** Adjusts the audio fader toward the front. */
    AudioFaderFront: "AudioFaderFront",
    /** Adjustts the audio fader toward the rear. */
    AudioFaderRear: "AudioFaderRear",
    /** Selects the next available surround sound mode. */
    AudioSurroundModeNext: "AudioSurroundModeNext",
    /** Decreases the amount of treble. */
    AudioTrebleDown: "AudioTrebleDown",
    /** Increases the amount of treble. */
    AudioTrebleUp: "AudioTrebleUp",
    /** Decreases the audio volume. */
    AudioVolumeDown: "AudioVolumeDown",
    /** Mutes the audio. */
    AudioVolumeMute: "AudioVolumeMute",
    /** Increases the audio volume. */
    AudioVolumeUp: "AudioVolumeUp",
    /** The Backspace key. This key is labeled Delete on Mac keyboards. */
    Backspace: "Backspace",
    /**
     * The Brightness Down key. Typically used to reduce the brightness of the
     * display.
     */
    BrightnessDown: "BrightnessDown",
    /** The Brightness Up key. Typically increases the brightness of the display. */
    BrightnessUp: "BrightnessUp",
    /**
     * Navigates to the previous content or page in the current Web view's
     * history.
     */
    BrowserBack: "BrowserBack",
    /** Opens the user's list of bookmarks/favorites. */
    BrowserFavorites: "BrowserFavorites",
    /** Navigates to the next content or page in the current Web view's history. */
    BrowserForward: "BrowserForward",
    /** Navigates to the user's preferred home page. */
    BrowserHome: "BrowserHome",
    /** Refreshes the current page or contentl. */
    BrowserRefresh: "BrowserRefresh",
    /**
     * Activates the user's preferred search engine or the search interface within
     * their browser.
     */
    BrowserSearch: "BrowserSearch",
    /** Stops loading the currently displayed Web view or content. */
    BrowserStop: "BrowserStop",
    /** The Call key; dials the number which has been entered. */
    Call: "Call",
    /** The Camera key; activates the camera. */
    Camera: "Camera",
    /** The Focus key; focuses the camera. */
    CameraFocus: "CameraFocus",
    /** The Cancel key. */
    Cancel: "Cancel",
    /**
     * The Caps Lock key. Toggles the capital character lock on and off for
     * subsequent input.
     */
    CapsLock: "CapsLock",
    /** Switches to the previous channel. */
    ChannelDown: "ChannelDown",
    /** Switches to the next channel. */
    ChannelUp: "ChannelUp",
    /** The Clear key. Removes the currently selected input. */
    Clear: "Clear",
    /** Closes the current document or message. Must not exit the application. */
    Close: "Close",
    /** Toggles closed captioning on and off. */
    ClosedCaptionToggle: "ClosedCaptionToggle",
    /**
     * The Code Input key, which enables code input mode, which lets the user
     * enter characters by typing their code points (their Unicode character
     * numbers, typically).
     */
    CodeInput: "CodeInput",
    /**
     * General-purpose media function key, color-coded red; this has index 0 among
     * the colored keys.
     */
    ColorF0Red: "ColorF0Red",
    /**
     * General-purpose media funciton key, color-coded green; this has index 1
     * among the colored keys.
     */
    ColorF1Green: "ColorF1Green",
    /**
     * General-purpose media funciton key, color-coded yellow; this has index 2
     * among the colored keys.
     */
    ColorF2Yellow: "ColorF2Yellow",
    /**
     * General-purpose media funciton key, color-coded blue; this has index 3
     * among the colored keys.
     */
    ColorF3Blue: "ColorF3Blue",
    /**
     * General-purpose media funciton key, color-coded grey; this has index 4
     * among the colored keys.
     */
    ColorF4Grey: "ColorF4Grey",
    /**
     * General-purpose media funciton key, color-coded brown; this has index 5
     * among the colored keys.
     */
    ColorF5Brown: "ColorF5Brown",
    /** The Compose key. */
    Compose: "Compose",
    /**
     * Shows the context menu. Typically found between the Windows (or OS) key and
     * the Control key on the right side of the keyboard.
     */
    ContextMenu: "ContextMenu",
    /** The Control, Ctrl, or Ctl key. Allows typing control characters. */
    Control: "Control",
    /**
     * The Convert key, which instructs the IME to convert the current input
     * method sequence into the resulting character.
     */
    Convert: "Convert",
    /** The Copy key (on certain extended keyboards). */
    Copy: "Copy",
    /** The Cursor Select key, CrSel. */
    CrSel: "CrSel",
    /** The Cut key (on certain extended keyboards). */
    Cut: "Cut",
    /** Switches the input source to the Digital Video Recorder (DVR). */
    DVR: "DVR",
    /**
     * A dead "combining" key; that is, a key which is used in tandem with other
     * keys to generate accented and other modified characters. If pressed by
     * itself, it doesn't generate a character. If you wish to identify which
     * specific dead key was pressed (in cases where more than one exists), you
     * can do so by examining the KeyboardEvent's associated compositionupdate
     * event's data property.
     */
    Dead: "Dead",
    /**
     * The decimal point key (typically . or , depending on the region. In newer
     * browsers, this value to simply be the character generated by the decimal
     * key (one of those two characters). [1]
     */
    Decimal: "Decimal",
    /** The Delete key, Del. */
    Delete: "Delete",
    /**
     * Adjusts the brightness of the device by toggling between two brightness
     * levels or by cycling among multiple brightness levels.
     */
    Dimmer: "Dimmer",
    /** Cycles among video sources. */
    DisplaySwap: "DisplaySwap",
    /** The numeric keypad's division key, /. */
    Divide: "Divide",
    /**
     * The Eisu key. This key's purpose is defined by the IME, but may be used to
     * close the IME.
     */
    Eisu: "Eisu",
    /**
     * The Eject key. Ejects removable media (or toggles an optical storage device
     * tray open and closed).
     */
    Eject: "Eject",
    /** The End key. Moves to the end of content. */
    End: "End",
    /** The End Call or Hang Up button. */
    EndCall: "EndCall",
    /** The Enter or ↵ key (sometimes labeled Return). */
    Enter: "Enter",
    /**
     * Erase to End of Field. Deletes all characters from the current cursor
     * position to the end of the current field.
     */
    EraseEof: "EraseEof",
    /**
     * The Esc (Escape) key. Typically used as an exit, cancel, or "escape this
     * operation" button. Historically, the Escape character was used to signal
     * the start of a special control sequence of characters called an "escape
     * sequence."
     */
    Escape: "Escape",
    /** The ExSel (Extend Selection) key. */
    ExSel: "ExSel",
    /** The Execute key. */
    Execute: "Execute",
    /** The Exit button, which exits the curreent application or menu. */
    Exit: "Exit",
    /** The first general-purpose function key, F1. */
    F1: "F1",
    /** The F2 key. */
    F2: "F2",
    /** The F3 key. */
    F3: "F3",
    /** The F4 key. */
    F4: "F4",
    /** The F5 key. */
    F5: "F5",
    /** The F6 key. */
    F6: "F6",
    /** The F7 key. */
    F7: "F7",
    /** The F8 key. */
    F8: "F8",
    /** The F9 key. */
    F9: "F9",
    /** The F10 key. */
    F10: "F10",
    /** The F11 key. */
    F11: "F11",
    /** The F12 key. */
    F12: "F12",
    /** The F13 key. */
    F13: "F13",
    /** The F14 key. */
    F14: "F14",
    /** The F15 key. */
    F15: "F15",
    /** The F16 key. */
    F16: "F16",
    /** The F17 key. */
    F17: "F17",
    /** The F18 key. */
    F18: "F18",
    /** The F19 key. */
    F19: "F19",
    /** The F20 key. */
    F20: "F20",
    /** Clears the program or content stored in the first favorites list slot. */
    FavoriteClear0: "FavoriteClear0",
    /** Clears the program or content stored in the second favorites list slot. */
    FavoriteClear1: "FavoriteClear1",
    /** Clears the program or content stored in the third favorites list slot. */
    FavoriteClear2: "FavoriteClear2",
    /** Clears the program or content stored in the fourth favorites list slot. */
    FavoriteClear3: "FavoriteClear3",
    /**
     * Selects (recalls) the program or content stored in the first favorites list
     * slot.
     */
    FavoriteRecall0: "FavoriteRecall0",
    /**
     * Selects (recalls) the program or content stored in the second favorites
     * list slot.
     */
    FavoriteRecall1: "FavoriteRecall1",
    /**
     * Selects (recalls) the program or content stored in the third favorites list
     * slot.
     */
    FavoriteRecall2: "FavoriteRecall2",
    /**
     * Selects (recalls) the program or content stored in the fourth favorites
     * list slot.
     */
    FavoriteRecall3: "FavoriteRecall3",
    /** Stores the current program or content into the first favorites list slot. */
    FavoriteStore0: "FavoriteStore0",
    /** Stores the current program or content into the second favorites list slot. */
    FavoriteStore1: "FavoriteStore1",
    /** Stores the current program or content into the third favorites list slot. */
    FavoriteStore2: "FavoriteStore2",
    /** Stores the current program or content into the fourth favorites list slot. */
    FavoriteStore3: "FavoriteStore3",
    /**
     * The Final (Final Mode) key is used on some Asian keyboards to enter final
     * mode when using IMEs.
     */
    FinalMode: "FinalMode",
    /**
     * The Find key. Opens an interface (typically a dialog box) for performing a
     * find/search operation.
     */
    Find: "Find",
    /** The Finish key. */
    Finish: "Finish",
    /**
     * The Fn (Function modifier) key. Used to allow generating function key
     * (F1-F15, for instance) characters on keyboards without a dedicated function
     * key area. Often handled in hardware so that events aren't generated for
     * this key.
     */
    Fn: "Fn",
    /**
     * The FnLock or F-Lock (Function Lock) key.Toggles the function key mode
     * described by "Fn" on and off. Often handled in hardware so that events
     * aren't generated for this key.
     */
    FnLock: "FnLock",
    /** The Back button. */
    GoBack: "GoBack",
    /**
     * The Home button, which takes the user to the phone's main screen (usually
     * an application launcher).
     */
    GoHome: "GoHome",
    /**
     * Switches to the first character group on an ISO/IEC 9995 keyboard. Each key
     * may have multiple groups of characters, each in its own column. Pressing
     * this key instructs the device to interpret keypresses as coming from the
     * first column on subsequent keystrokes.
     */
    GroupFirst: "GroupFirst",
    /** Switches to the last character group on an ISO/IEC 9995 keyboard. */
    GroupLast: "GroupLast",
    /** Switches to the next character group on an ISO/IEC 9995 keyboard. */
    GroupNext: "GroupNext",
    /** Switches to the previous character group on an ISO/IEC 9995 keyboard. */
    GroupPrevious: "GroupPrevious",
    /** Toggles the display of the program or content guide. */
    Guide: "Guide",
    /**
     * If the guide is currently displayed, this button tells the guide to display
     * the next day's content.
     */
    GuideNextDay: "GuideNextDay",
    /**
     * If the guide is currently displayed, this button tells the guide to display
     * the previous day's content.
     */
    GuidePreviousDay: "GuidePreviousDay",
    /**
     * The Hangul (Korean character set) mode key, which toggles between Hangul
     * and English entry modes.
     */
    HangulMode: "HangulMode",
    /**
     * Selects the Hanja mode, for converting Hangul characters to the more
     * specific Hanja characters.
     */
    HanjaMode: "HanjaMode",
    /** The Hankaku (half-width characters) key. */
    Hankaku: "Hankaku",
    /**
     * The Headset Hook key. This is typically actually a button on the headset
     * which is used to hang up calls and play or pause media.
     */
    HeadsetHook: "HeadsetHook",
    /** The Help key. Opens or toggles the display of help information. */
    Help: "Help",
    /**
     * The Hibernate key. This saves the state of the computer to disk and then
     * shuts down; the computer can be returned to its previous state by restoring
     * the saved state information.
     */
    Hibernate: "Hibernate",
    /** The Hiragana key; selects Kana characters mode. */
    Hiragana: "Hiragana",
    /** Toggles between the Hiragana and Katakana writing systems. */
    HiraganaKatakana: "HiraganaKatakana",
    /** The Home key. Moves to the start of content. */
    Home: "Home",
    /** The Hyper key. */
    Hyper: "Hyper",
    /**
     * Toggles the display of information about the currently selected content,
     * program, or media.
     */
    Info: "Info",
    /** The Insert key, Ins. Toggles between inserting and overwriting text. */
    Insert: "Insert",
    /**
     * Tellls the device to perform an instant replay (typically some form of
     * jumping back a short amount of time then playing it again, possibly but not
     * usually in slow motion).
     */
    InstantReplay: "InstantReplay",
    /**
     * Selects the Junja mode, in which Korean is represented using single-byte
     * Latin characters.
     */
    JunjaMode: "JunjaMode",
    /** The Kana Mode (Kana Lock) key. */
    KanaMode: "KanaMode",
    /**
     * The Kanji Mode key. Enables entering Japanese text using the ideographic
     * characters of Chinese origin.
     */
    KanjiMode: "KanjiMode",
    /** The Katakana key. */
    Katakana: "Katakana",
    /** The 11 key found on certain media numeric keypads. */
    Key11: "Key11",
    /** The 12 key found on certain media numeric keypads. */
    Key12: "Key12",
    /** The Redial button, which redials the last-called number. */
    LastNumberRedial: "LastNumberRedial",
    /** The first generic application launcher button. */
    LaunchApplication1: "LaunchApplication1",
    /** The second generic application launcher button. */
    LaunchApplication2: "LaunchApplication2",
    /** The third generic application launcher button. */
    LaunchApplication3: "LaunchApplication3",
    /** The fourth generic application launcher button. */
    LaunchApplication4: "LaunchApplication4",
    /** The fifth generic application launcher button. */
    LaunchApplication5: "LaunchApplication5",
    /** The sixth generic application launcher button. */
    LaunchApplication6: "LaunchApplication6",
    /** The seventh generic application launcher button. */
    LaunchApplication7: "LaunchApplication7",
    /** The eighth generic application launcher button. */
    LaunchApplication8: "LaunchApplication8",
    /** The ninth generic application launcher button. */
    LaunchApplication9: "LaunchApplication9",
    /** The 10th generic application launcher button. */
    LaunchApplication10: "LaunchApplication10",
    /** The 11th generic application launcher button. */
    LaunchApplication11: "LaunchApplication11",
    /** The 12th generic application launcher button. */
    LaunchApplication12: "LaunchApplication12",
    /** The 13th generic application launcher button. */
    LaunchApplication13: "LaunchApplication13",
    /** The 14th generic application launcher button. */
    LaunchApplication14: "LaunchApplication14",
    /** The 15th generic application launcher button. */
    LaunchApplication15: "LaunchApplication15",
    /** The 16th generic application launcher button. */
    LaunchApplication16: "LaunchApplication16",
    /**
     * The Calculator key, often labeled with an icon such as . This is often used
     * as a generic application launcher key (APPCOMMAND_LAUNCH_APP2).
     */
    LaunchCalculator: "LaunchCalculator",
    /** The Calendar key, often labeled with an icon like . */
    LaunchCalendar: "LaunchCalendar",
    /** The Contacts key. */
    LaunchContacts: "LaunchContacts",
    /** The Mail key. This is often displayed as . */
    LaunchMail: "LaunchMail",
    /** The Media Player key. */
    LaunchMediaPlayer: "LaunchMediaPlayer",
    /** The Music Player key, often labeled with an icon such as . */
    LaunchMusicPlayer: "LaunchMusicPlayer",
    /**
     * The My Computer key on Windows keyboards. This is often used as a generic
     * application launcher key (APPCOMMAND_LAUNCH_APP1).
     */
    LaunchMyComputer: "LaunchMyComputer",
    /** The Phone key, to open the phone dialer application if one is present. */
    LaunchPhone: "LaunchPhone",
    /** The Screen Saver key. */
    LaunchScreenSaver: "LaunchScreenSaver",
    /**
     * The Spreadsheet key. This key may be labeled with an icon such as or that
     * of a specific spreadsheet application.
     */
    LaunchSpreadsheet: "LaunchSpreadsheet",
    /**
     * The Web Browser key. This key is frequently labeled with an icon such as or
     * the icon of a specific browser, depending on the device manufacturer.
     */
    LaunchWebBrowser: "LaunchWebBrowser",
    /** The WebCam key. Opens the webcam application. */
    LaunchWebCam: "LaunchWebCam",
    /**
     * The Word Processor key. This may be an icon of a specific word processor
     * application, or a generic document icon.
     */
    LaunchWordProcessor: "LaunchWordProcessor",
    /** Opens content liniked to the current program, if available and possible. */
    Link: "Link",
    /** Lists the current program. */
    ListProgram: "ListProgram",
    /** Toggles a display listing currently available live content or programs. */
    LiveContent: "LiveContent",
    /** Locks or unlocks the currently selected content or pgoram. */
    Lock: "Lock",
    /** The LogOff key. */
    LogOff: "LogOff",
    /** Opens the user interface to forward a message. */
    MailForward: "MailForward",
    /** Opens the user interface to reply to a message. */
    MailReply: "MailReply",
    /** Sends the current message. */
    MailSend: "MailSend",
    /**
     * A button which cycles among the notification modes: silent, vibrate, ring,
     * and so forth.
     */
    MannerMode: "MannerMode",
    /**
     * Presents a list of media applications, such as photo viewers, audio and
     * video players, and games. [1]
     */
    MediaApps: "MediaApps",
    /** The Audio Track key. */
    MediaAudioTrack: "MediaAudioTrack",
    /** Starts, continues, or increases the speed of fast forwarding the media. */
    MediaFastForward: "MediaFastForward",
    /** Jumps back to the last-viewed content, program, or other media. */
    MediaLast: "MediaLast",
    /**
     * Pauses the currently playing media. Some older applications use simply
     * "Pause" but this is not correct.
     */
    MediaPause: "MediaPause",
    /**
     * Starts or continues playing media at normal speed, if not already doing so.
     * Has no effect otherwise.
     */
    MediaPlay: "MediaPlay",
    /** Toggles between playing and pausing the current media. */
    MediaPlayPause: "MediaPlayPause",
    /** Starts or resumes recording media. */
    MediaRecord: "MediaRecord",
    /** Starts, continues, or increases the speed of rewinding the media. */
    MediaRewind: "MediaRewind",
    /** Skips backward to the previous content or program. */
    MediaSkipBackward: "MediaSkipBackward",
    /** Skips forward to the next content or program. */
    MediaSkipForward: "MediaSkipForward",
    /** Steps backward to the previous content or program. */
    MediaStepBackward: "MediaStepBackward",
    /** Steps forward to the next content or program. */
    MediaStepForward: "MediaStepForward",
    /**
     * Stops the current media activity (such as playing, recording, pausing,
     * forwarding, or rewinding). Has no effect if the media is currently stopped
     * already.
     */
    MediaStop: "MediaStop",
    /**
     * Top Menu button; opens the media's main menu, such as on a DVD or Blu-Ray
     * disc.
     */
    MediaTopMenu: "MediaTopMenu",
    /** Seeks to the next media or program track. */
    MediaTrackNext: "MediaTrackNext",
    /** Seeks to the previous media or program track. */
    MediaTrackPrevious: "MediaTrackPrevious",
    /**
     * The Meta key. Allows issuing special command inputs. This is the Windows
     * logo key, or the Command ⌘ key on Mac.
     */
    Meta: "Meta",
    /** Toggles the microphone on and off. */
    MicrophoneToggle: "MicrophoneToggle",
    /** Decreases the microphone's input volume. */
    MicrophoneVolumeDown: "MicrophoneVolumeDown",
    /** Mutes the microphone input. */
    MicrophoneVolumeMute: "MicrophoneVolumeMute",
    /** Increases the microphone's input volume. */
    MicrophoneVolumeUp: "MicrophoneVolumeUp",
    /** The Mod key. This is the Command ⌘ on Mac, or the Control key on Windows. */
    Mod: "Mod",
    /** The Mode Change key. Toggles or cycles among input modes of IMEs. */
    ModeChange: "ModeChange",
    /** The numeric keypad's multiplication key, *. */
    Multiply: "Multiply",
    /** Navigates into a submenu or option. */
    NavigateIn: "NavigateIn",
    /** Navigates to the next item. */
    NavigateNext: "NavigateNext",
    /** Navigates out of the current screen or menu. */
    NavigateOut: "NavigateOut",
    /** Navigates to the previous item. */
    NavigatePrevious: "NavigatePrevious",
    /** Creates a new document or message. */
    New: "New",
    /**
     * The Next Candidate function key. Selects the next possible match for the
     * ongoing input.
     */
    NextCandidate: "NextCandidate",
    /** Cycles to the next channel in the favorites list. */
    NextFavoriteChannel: "NextFavoriteChannel",
    /**
     * Cycles to the next saved user profile, if this feature is supported and
     * multiple profiles exist.
     */
    NextUserProfile: "NextUserProfile",
    /**
     * The NonConvert ("Don't convert") key. This accepts the current input method
     * sequence without running conversion when using an IME.
     */
    NonConvert: "NonConvert",
    /** The Notification key. */
    Notification: "Notification",
    /**
     * The NumLock (Number Lock) key. Toggles the numeric keypad between number
     * entry some other mode (often directional arrows).
     */
    NumLock: "NumLock",
    /**
     * Opens the user interface for selecting on demand content or programs to
     * watch.
     */
    OnDemand: "OnDemand",
    /** Opens an existing document or message. */
    Open: "Open",
    /**
     * The Page Down (or PgDn) key. Scrolls down or displays the next page of
     * content.
     */
    PageDown: "PageDown",
    /**
     * The Page Up (or PgUp) key. Scrolls up or displays the previous page of
     * content.
     */
    PageUp: "PageUp",
    /** Starts the process of pairing the remote with a device to be controlled. */
    Pairing: "Pairing",
    /** Paste from the clipboard. */
    Paste: "Paste",
    /**
     * The Pause key. Pauses the current application or state, if applicable. This
     * shouldn't be confused with the "MediaPause" key value, which is used for
     * media controllers, rather than to control applications and processes.
     */
    Pause: "Pause",
    /** A button to move the picture-in-picture view downward. */
    PinPDown: "PinPDown",
    /** A button to control moving the picture-in-picture view. */
    PinPMove: "PinPMove",
    /** Toggles display of th epicture-in-picture view on and off. */
    PinPToggle: "PinPToggle",
    /** A button to move the picture-in-picture view upward. */
    PinPUp: "PinPUp",
    /**
     * The Play key. Resumes a previously paused application, if applicable. This
     * shouldn't be confused with the "MediaPlay" key value, which is used for
     * media controllers, rather than to control applications and processes.
     */
    Play: "Play",
    /** Decreases the media playback rate. */
    PlaySpeedDown: "PlaySpeedDown",
    /** Returns the media playback rate to normal. */
    PlaySpeedReset: "PlaySpeedReset",
    /** Increases the media playback rate. */
    PlaySpeedUp: "PlaySpeedUp",
    /**
     * The Power button or key, to toggle power on and off. Not all systems pass
     * this key through to to the user agent.
     */
    Power: "Power",
    /** The PowerOff or PowerDown key. Shuts off the system. */
    PowerOff: "PowerOff",
    /**
     * The Previous Candidate key. Selects the previous possible match for the
     * ongoing input.
     */
    PreviousCandidate: "PreviousCandidate",
    /** Prints the current document or message. */
    Print: "Print",
    /**
     * The PrintScreen or PrtScr key. Sometimes SnapShot. Captures the screen and
     * prints it or saves it to disk.
     */
    PrintScreen: "PrintScreen",
    /** The Process key. Instructs the IME to process the conversion. */
    Process: "Process",
    /** The Props (Properties) key. */
    Props: "Props",
    /** Toggles random media (also known as "shuffle mode") on and off. */
    RandomToggle: "RandomToggle",
    /**
     * A code sent when the remote control's battery is low. This doesn't actually
     * correspond to a physical key at all.
     */
    RcLowBattery: "RcLowBattery",
    /** Cycles among the available media recording speeds. */
    RecordSpeedNext: "RecordSpeedNext",
    /** Redo the last action. */
    Redo: "Redo",
    /**
     * Toggles radio frequency (RF) input bypass mode on and off. RF bypass mode
     * passes RF input directly to the RF output without any processing or
     * filtering.
     */
    RfBypass: "RfBypass",
    /** The Romaji key; selects the Roman character set. */
    Romaji: "Romaji",
    /** Cycles among input modes on an external set-top box (STB). */
    STBInput: "STBInput",
    /** Toggles on and off an external STB. */
    STBPower: "STBPower",
    /** Saves the current document or message. */
    Save: "Save",
    /**
     * Toggles the channel scan mode on and off; this is a mode which flips
     * through channels automatically until the user stops the scan.
     */
    ScanChannelsToggle: "ScanChannelsToggle",
    /** Cycles through the available screen display modes. */
    ScreenModeNext: "ScreenModeNext",
    /** The Scroll Lock key. Toggles beteen scrolling and cursor movement modes. */
    ScrollLock: "ScrollLock",
    /** The Select key. */
    Select: "Select",
    /**
     * The numeric keypad's places separator character (in the United States, this
     * is a comma, but elsewhere it is frequently a period).
     */
    Separator: "Separator",
    /** Toggles display of the device's settings screen on and off. */
    Settings: "Settings",
    /**
     * The Shift key. Modifies keystrokes to allow typing upper (or other) case
     * letters, and to support typing punctuation and other special characters.
     */
    Shift: "Shift",
    /**
     * The Single Candidate key. Enables single candidate mode (as opposed to
     * multi-candidate mode); in this mode, only one candidate is displayed at a
     * time.
     */
    SingleCandidate: "SingleCandidate",
    /** The first general-purpose virtual function key. */
    Soft1: "Soft1",
    /** The second general-purpose virtual function key. */
    Soft2: "Soft2",
    /** The third general-purpose virtual function key. */
    Soft3: "Soft3",
    /** The fourth general-purpose virtual function key. */
    Soft4: "Soft4",
    /**
     * Presents a list of possible corrections for a word which was incorrectly
     * identified.
     */
    SpeechCorrectionList: "SpeechCorrectionList",
    /**
     * Toggles between dictation mode and command/control mode. This lets the
     * speech engine know whether to interpret spoken words as input text or as
     * commands.
     */
    SpeechInputToggle: "SpeechInputToggle",
    /** Starts spell checking the current document. */
    SpellCheck: "SpellCheck",
    /** Toggles split screen display mode on and off. */
    SplitScreenToggle: "SplitScreenToggle",
    /**
     * The Standby key; also known as Suspend or Sleep. This turns off the display
     * and puts the computer in a low power consumption mode, without completely
     * powering off.
     */
    Standby: "Standby",
    /** Toggles the display of subtitles on and off if they're available. */
    Subtitle: "Subtitle",
    /** The numeric keypad's subtraction key, -. */
    Subtract: "Subtract",
    /** The Super key. */
    Super: "Super",
    /** The Symbol modifier key (found on certain virtual keyboards). */
    Symbol: "Symbol",
    /** The Symbol Lock key. */
    SymbolLock: "SymbolLock",
    /** Switches into TV viewing mode. */
    TV: "TV",
    /** Toggles 3D TV mode on and off. */
    TV3DMode: "TV3DMode",
    /** Toggles between antenna and cable inputs. */
    TVAntennaCable: "TVAntennaCable",
    /** Toggles audio description mode on and off. */
    TVAudioDescription: "TVAudioDescription",
    /**
     * Decreases trhe audio description's mixing volume; reduces the volume of the
     * audio descriptions relative to the program sound.
     */
    TVAudioDescriptionMixDown: "TVAudioDescriptionMixDown",
    /**
     * Increases the audio description's mixing volume; increases the volume of
     * the audio descriptions relative to the program sound.
     */
    TVAudioDescriptionMixUp: "TVAudioDescriptionMixUp",
    /**
     * Displays or hides the media contents available for playback (this may be a
     * channel guide showing the currently airing programs, or a list of media
     * files to play).
     */
    TVContentsMenu: "TVContentsMenu",
    /** Displays or hides the TV's data service menu. */
    TVDataService: "TVDataService",
    /** Cycles the input mode on an external TV. */
    TVInput: "TVInput",
    /** Switches to the input "Component 1." */
    TVInputComponent1: "TVInputComponent1",
    /** Switches to the input "Component 2." */
    TVInputComponent2: "TVInputComponent2",
    /** Switches to the input "Composite 1." */
    TVInputComposite1: "TVInputComposite1",
    /** Switches to the input "Composite 2." */
    TVInputComposite2: "TVInputComposite2",
    /** Switches to the input "HDMI 1." */
    TVInputHDMI1: "TVInputHDMI1",
    /** Switches to the input "HDMI 2." */
    TVInputHDMI2: "TVInputHDMI2",
    /** Switches to the input "HDMI 3." */
    TVInputHDMI3: "TVInputHDMI3",
    /** Switches to the input "HDMI 4." */
    TVInputHDMI4: "TVInputHDMI4",
    /** Switches to the input "VGA 1." */
    TVInputVGA1: "TVInputVGA1",
    /** The Media Context menu key. */
    TVMediaContext: "TVMediaContext",
    /** Toggle the TV's network connection on and off. */
    TVNetwork: "TVNetwork",
    /** Put the TV into number entry mode. */
    TVNumberEntry: "TVNumberEntry",
    /** The device's power button. */
    TVPower: "TVPower",
    /** Radio button. */
    TVRadioService: "TVRadioService",
    /** Satellite button. */
    TVSatellite: "TVSatellite",
    /** Broadcast Satellite button. */
    TVSatelliteBS: "TVSatelliteBS",
    /** Communication Satellite button. */
    TVSatelliteCS: "TVSatelliteCS",
    /** Toggles among available satellites. */
    TVSatelliteToggle: "TVSatelliteToggle",
    /**
     * Selects analog terrestrial television service (analog cable or antenna
     * reception).
     */
    TVTerrestrialAnalog: "TVTerrestrialAnalog",
    /**
     * Selects digital terrestrial television service (digital cable or antenna
     * receiption).
     */
    TVTerrestrialDigital: "TVTerrestrialDigital",
    /** Timer programming button. */
    TVTimer: "TVTimer",
    /** The Horizontal Tab key, Tab. */
    Tab: "Tab",
    /** Toggles display of teletext, if available. */
    Teletext: "Teletext",
    /** Undo the last action. */
    Undo: "Undo",
    /**
     * The user agent wasn't able to map the event's virtual keycode to a specific
     * key value. This can happen due to hardware or software constraints, or
     * because of constraints around the platform on which the user agent is
     * running.
     */
    Unidentified: "Unidentified",
    /** Cycles through the available video modes. */
    VideoModeNext: "VideoModeNext",
    /** The Voice Dial key. Initiates voice dialing. */
    VoiceDial: "VoiceDial",
    /**
     * The WakeUp key; used to wake the computer from the hibernation or standby
     * modes.
     */
    WakeUp: "WakeUp",
    /**
     * Causes the device to identify itself in some fashion, such as by flashing a
     * light, briefly changing the brightness of indicator lights, or emitting a
     * tone.
     */
    Wink: "Wink",
    /** The Zenkaku (full width) characters key. */
    Zenkaku: "Zenkaku",
    /** The Zenkaku/Hankaku (full width/half width) toggle key. */
    ZenkakuHanaku: "ZenkakuHanaku",
    /** The ZoomIn key. */
    ZoomIn: "ZoomIn",
    /** The ZoomOut key. */
    ZoomOut: "ZoomOut",
    /**
     * Toggles between full-screen and scaled content display, or otherwise change
     * the magnification level.
     */
    ZoomToggle: "ZoomToggle"
  };
  function useDeepEqualMemo(value) {
    const ref = React.useRef();
    if (!deepEqual(ref.current, value)) {
      ref.current = value;
    }
    return ref.current;
  }
  function maybePreventDefault(e3, hotkey, preventDefault) {
    if (typeof preventDefault === "function" && preventDefault(e3, hotkey) || preventDefault === true) {
      e3.preventDefault();
    }
  }
  function isHotkeyEnabled(e3, hotkey, enabled) {
    if (typeof enabled === "function") {
      return enabled(e3, hotkey);
    }
    return enabled === true || enabled === void 0;
  }
  function isKeyboardEventTriggeredByInput(ev) {
    return isHotkeyEnabledOnTag(ev, ["input", "textarea", "select"]);
  }
  function isHotkeyEnabledOnTag({ target }, enabledOnTags = false) {
    const targetTagName = target && target.tagName;
    if (isReadonlyArray(enabledOnTags)) {
      return Boolean(
        targetTagName && (enabledOnTags == null ? void 0 : enabledOnTags.some(
          (tag) => tag.toLowerCase() === targetTagName.toLowerCase()
        ))
      );
    }
    return Boolean(targetTagName && enabledOnTags && enabledOnTags);
  }
  function isScopeActive(activeScopes, scopes) {
    if (activeScopes.length === 0 && scopes) {
      console.warn(
        'A hotkey has the "scopes" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>'
      );
      return true;
    }
    if (!scopes) {
      return true;
    }
    return activeScopes.some((scope) => scopes.includes(scope)) || activeScopes.includes("*");
  }
  var isHotkeyMatchingKeyboardEvent = (e3, hotkey, ignoreModifiers = false) => {
    const { alt, ctrl, keys: keys2, meta, mod, shift, useKey } = hotkey;
    const { altKey, code, ctrlKey, key: producedKey, metaKey, shiftKey } = e3;
    const mappedCode = mapKey(code);
    if (useKey && (keys2 == null ? void 0 : keys2.length) === 1 && keys2.includes(producedKey)) {
      return true;
    }
    if (!(keys2 == null ? void 0 : keys2.includes(mappedCode)) && !["alt", "control", "ctrl", "meta", "os", "shift", "unknown"].includes(
      mappedCode
    )) {
      return false;
    }
    if (!ignoreModifiers) {
      if (alt !== altKey && mappedCode !== "alt") {
        return false;
      }
      if (shift !== shiftKey && mappedCode !== "shift") {
        return false;
      }
      if (mod) {
        if (!metaKey && !ctrlKey) {
          return false;
        }
      } else {
        if (meta !== metaKey && mappedCode !== "meta" && mappedCode !== "os") {
          return false;
        }
        if (ctrl !== ctrlKey && mappedCode !== "ctrl" && mappedCode !== "control") {
          return false;
        }
      }
    }
    if (keys2 && keys2.length === 1 && keys2.includes(mappedCode)) {
      return true;
    } else if (keys2) {
      return isHotkeyPressed(keys2);
    } else if (!keys2) {
      return true;
    }
    return false;
  };
  var stopPropagation = (e3) => {
    e3.stopPropagation();
    e3.preventDefault();
    e3.stopImmediatePropagation();
  };
  var useSafeLayoutEffect = typeof window === "undefined" ? React.useEffect : React.useLayoutEffect;
  function useHotkeys(keys2, callback, options, dependencies) {
    const [ref, setRef2] = React.useState(null);
    const hasTriggeredRef = React.useRef(false);
    const _options = Array.isArray(options) ? Array.isArray(dependencies) ? void 0 : dependencies : options;
    const _keys = React.useMemo(() => {
      if (Array.isArray(keys2) && keys2.length > 0 && Array.isArray(keys2[0])) {
        return keys2.map(
          (keyCombo) => keyCombo.map((k) => k.toString()).join((_options == null ? void 0 : _options.splitKey) || "+")
        ).join((_options == null ? void 0 : _options.delimiter) || ",");
      } else if (Array.isArray(keys2)) {
        return keys2.join((_options == null ? void 0 : _options.delimiter) || ",");
      }
      return keys2;
    }, [keys2, _options == null ? void 0 : _options.splitKey, _options == null ? void 0 : _options.delimiter]);
    const _deps = Array.isArray(options) ? options : Array.isArray(dependencies) ? dependencies : void 0;
    const memoisedCB = React.useCallback(callback, _deps != null ? _deps : []);
    const cbRef = React.useRef(memoisedCB);
    cbRef.current = _deps ? memoisedCB : callback;
    const memoisedOptions = useDeepEqualMemo(_options);
    const { activeScopes } = useHotkeysContext();
    const proxy = useBoundHotkeysProxy();
    useSafeLayoutEffect(() => {
      if ((memoisedOptions == null ? void 0 : memoisedOptions.enabled) === false || !isScopeActive(activeScopes, memoisedOptions == null ? void 0 : memoisedOptions.scopes)) {
        return;
      }
      const listener = (e3, isKeyUp = false) => {
        var _a2;
        if (isKeyboardEventTriggeredByInput(e3) && !isHotkeyEnabledOnTag(e3, memoisedOptions == null ? void 0 : memoisedOptions.enableOnFormTags)) {
          return;
        }
        if (ref !== null) {
          const rootNode = ref.getRootNode();
          if ((rootNode instanceof Document || rootNode instanceof ShadowRoot) && rootNode.activeElement !== ref && !ref.contains(rootNode.activeElement)) {
            stopPropagation(e3);
            return;
          }
        }
        if (((_a2 = e3.target) == null ? void 0 : _a2.isContentEditable) && !(memoisedOptions == null ? void 0 : memoisedOptions.enableOnContentEditable)) {
          return;
        }
        parseKeysHookInput(_keys, memoisedOptions == null ? void 0 : memoisedOptions.delimiter).forEach((key) => {
          var _a22, _b, _c;
          const hotkey = parseHotkey(
            key,
            memoisedOptions == null ? void 0 : memoisedOptions.splitKey,
            memoisedOptions == null ? void 0 : memoisedOptions.useKey
          );
          if (isHotkeyMatchingKeyboardEvent(
            e3,
            hotkey,
            memoisedOptions == null ? void 0 : memoisedOptions.ignoreModifiers
          ) || ((_a22 = hotkey.keys) == null ? void 0 : _a22.includes("*"))) {
            if (((_b = memoisedOptions == null ? void 0 : memoisedOptions.ignoreEventWhenPrevented) != null ? _b : true) && e3.defaultPrevented) {
              return;
            }
            if ((_c = memoisedOptions == null ? void 0 : memoisedOptions.ignoreEventWhen) == null ? void 0 : _c.call(memoisedOptions, e3)) {
              return;
            }
            if (isKeyUp && hasTriggeredRef.current) {
              return;
            }
            if (!isHotkeyEnabled(e3, hotkey, memoisedOptions == null ? void 0 : memoisedOptions.enabled)) {
              stopPropagation(e3);
              return;
            }
            cbRef.current(e3, hotkey);
            maybePreventDefault(e3, hotkey, memoisedOptions == null ? void 0 : memoisedOptions.preventDefault);
            if (!isKeyUp) {
              hasTriggeredRef.current = true;
            }
          }
        });
      };
      const handleKeyDown = (event) => {
        if (event.code === void 0) {
          return;
        }
        pushToCurrentlyPressedKeys(mapKey(event.code));
        if ((memoisedOptions == null ? void 0 : memoisedOptions.keydown) === void 0 && (memoisedOptions == null ? void 0 : memoisedOptions.keyup) !== true || (memoisedOptions == null ? void 0 : memoisedOptions.keydown)) {
          listener(event);
        }
      };
      const handleKeyUp = (event) => {
        if (event.code === void 0) {
          return;
        }
        removeFromCurrentlyPressedKeys(mapKey(event.code));
        hasTriggeredRef.current = false;
        if (memoisedOptions == null ? void 0 : memoisedOptions.keyup) {
          listener(event, true);
        }
      };
      const domNode = ref || (_options == null ? void 0 : _options.document) || document;
      domNode.addEventListener("keyup", handleKeyUp);
      domNode.addEventListener("keydown", handleKeyDown);
      if (proxy) {
        parseKeysHookInput(_keys, memoisedOptions == null ? void 0 : memoisedOptions.delimiter).forEach(
          (key) => proxy.addHotkey(
            parseHotkey(
              key,
              memoisedOptions == null ? void 0 : memoisedOptions.splitKey,
              memoisedOptions == null ? void 0 : memoisedOptions.useKey,
              memoisedOptions == null ? void 0 : memoisedOptions.description
            )
          )
        );
      }
      return () => {
        domNode.removeEventListener("keyup", handleKeyUp);
        domNode.removeEventListener("keydown", handleKeyDown);
        if (proxy) {
          parseKeysHookInput(_keys, memoisedOptions == null ? void 0 : memoisedOptions.delimiter).forEach(
            (key) => proxy.removeHotkey(
              parseHotkey(
                key,
                memoisedOptions == null ? void 0 : memoisedOptions.splitKey,
                memoisedOptions == null ? void 0 : memoisedOptions.useKey,
                memoisedOptions == null ? void 0 : memoisedOptions.description
              )
            )
          );
        }
      };
    }, [ref, _keys, memoisedOptions, activeScopes]);
    return setRef2;
  }
  typeof navigator !== "undefined" && navigator.userAgent.includes("Mac OS X");
  var isUndefined$2 = (obj) => obj === void 0;
  var isNull = (obj) => obj === null;
  var isUndefinedOrNull = (obj) => isUndefined$2(obj) || isNull(obj);
  var isDefined = (arg) => !isUndefinedOrNull(arg);
  function bindFirst(fn, firstArg) {
    return (...args) => fn(firstArg, ...args);
  }
  let keyCount = 0;
  function atom(read, write) {
    const key = `atom${++keyCount}`;
    const config = {
      toString: () => key
    };
    if (typeof read === "function") {
      config.read = read;
    } else {
      config.init = read;
      config.read = defaultRead;
      config.write = defaultWrite;
    }
    if (write) {
      config.write = write;
    }
    return config;
  }
  function defaultRead(get2) {
    return get2(this);
  }
  function defaultWrite(get2, set2, arg) {
    return set2(
      this,
      typeof arg === "function" ? arg(get2(this)) : arg
    );
  }
  const isSelfAtom = (atom2, a2) => atom2.unstable_is ? atom2.unstable_is(a2) : a2 === atom2;
  const hasInitialValue = (atom2) => "init" in atom2;
  const isActuallyWritableAtom = (atom2) => !!atom2.write;
  const cancelPromiseMap = /* @__PURE__ */ new WeakMap();
  const registerCancelPromise = (promise, cancel) => {
    cancelPromiseMap.set(promise, cancel);
    promise.catch(() => {
    }).finally(() => cancelPromiseMap.delete(promise));
  };
  const cancelPromise = (promise, next2) => {
    const cancel = cancelPromiseMap.get(promise);
    if (cancel) {
      cancelPromiseMap.delete(promise);
      cancel(next2);
    }
  };
  const resolvePromise = (promise, value) => {
    promise.status = "fulfilled";
    promise.value = value;
  };
  const rejectPromise = (promise, e3) => {
    promise.status = "rejected";
    promise.reason = e3;
  };
  const isPromiseLike$2 = (x) => typeof (x == null ? void 0 : x.then) === "function";
  const isEqualAtomValue = (a2, b) => !!a2 && "v" in a2 && "v" in b && Object.is(a2.v, b.v);
  const isEqualAtomError = (a2, b) => !!a2 && "e" in a2 && "e" in b && Object.is(a2.e, b.e);
  const hasPromiseAtomValue = (a2) => !!a2 && "v" in a2 && a2.v instanceof Promise;
  const isEqualPromiseAtomValue = (a2, b) => "v" in a2 && "v" in b && a2.v.orig && a2.v.orig === b.v.orig;
  const returnAtomValue = (atomState) => {
    if ("e" in atomState) {
      throw atomState.e;
    }
    return atomState.v;
  };
  const createStore$1$1 = () => {
    const atomStateMap = /* @__PURE__ */ new WeakMap();
    const mountedMap = /* @__PURE__ */ new WeakMap();
    const pendingStack = [];
    const pendingMap = /* @__PURE__ */ new WeakMap();
    let devListenersRev2;
    let mountedAtoms;
    if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
      devListenersRev2 = /* @__PURE__ */ new Set();
      mountedAtoms = /* @__PURE__ */ new Set();
    }
    const getAtomState = (atom2) => atomStateMap.get(atom2);
    const addPendingDependent = (atom2, atomState) => {
      atomState.d.forEach((_, a2) => {
        if (!pendingMap.has(a2)) {
          const aState = getAtomState(a2);
          pendingMap.set(a2, [aState, /* @__PURE__ */ new Set()]);
          if (aState) {
            addPendingDependent(a2, aState);
          }
        }
        pendingMap.get(a2)[1].add(atom2);
      });
    };
    const setAtomState = (atom2, atomState) => {
      var _a2;
      if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
        Object.freeze(atomState);
      }
      const prevAtomState = getAtomState(atom2);
      atomStateMap.set(atom2, atomState);
      (_a2 = pendingStack[pendingStack.length - 1]) == null ? void 0 : _a2.add(atom2);
      if (!pendingMap.has(atom2)) {
        pendingMap.set(atom2, [prevAtomState, /* @__PURE__ */ new Set()]);
        addPendingDependent(atom2, atomState);
      }
      if (hasPromiseAtomValue(prevAtomState)) {
        const next2 = "v" in atomState ? atomState.v instanceof Promise ? atomState.v : Promise.resolve(atomState.v) : Promise.reject(atomState.e);
        if (prevAtomState.v !== next2) {
          cancelPromise(prevAtomState.v, next2);
        }
      }
    };
    const updateDependencies = (atom2, nextAtomState, nextDependencies, keepPreviousDependencies) => {
      const dependencies = new Map(
        keepPreviousDependencies ? nextAtomState.d : null
      );
      let changed = false;
      nextDependencies.forEach((aState, a2) => {
        if (!aState && isSelfAtom(atom2, a2)) {
          aState = nextAtomState;
        }
        if (aState) {
          dependencies.set(a2, aState);
          if (nextAtomState.d.get(a2) !== aState) {
            changed = true;
          }
        } else if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
          console.warn("[Bug] atom state not found");
        }
      });
      if (changed || nextAtomState.d.size !== dependencies.size) {
        nextAtomState.d = dependencies;
      }
    };
    const setAtomValue = (atom2, value, nextDependencies, keepPreviousDependencies) => {
      const prevAtomState = getAtomState(atom2);
      const nextAtomState = {
        d: (prevAtomState == null ? void 0 : prevAtomState.d) || /* @__PURE__ */ new Map(),
        v: value
      };
      if (nextDependencies) {
        updateDependencies(
          atom2,
          nextAtomState,
          nextDependencies,
          keepPreviousDependencies
        );
      }
      if (isEqualAtomValue(prevAtomState, nextAtomState) && prevAtomState.d === nextAtomState.d) {
        return prevAtomState;
      }
      if (hasPromiseAtomValue(prevAtomState) && hasPromiseAtomValue(nextAtomState) && isEqualPromiseAtomValue(prevAtomState, nextAtomState)) {
        if (prevAtomState.d === nextAtomState.d) {
          return prevAtomState;
        } else {
          nextAtomState.v = prevAtomState.v;
        }
      }
      setAtomState(atom2, nextAtomState);
      return nextAtomState;
    };
    const setAtomValueOrPromise = (atom2, valueOrPromise, nextDependencies, abortPromise) => {
      if (isPromiseLike$2(valueOrPromise)) {
        let continuePromise;
        const updatePromiseDependencies = () => {
          const prevAtomState = getAtomState(atom2);
          if (!hasPromiseAtomValue(prevAtomState) || prevAtomState.v !== promise) {
            return;
          }
          const nextAtomState = setAtomValue(
            atom2,
            promise,
            nextDependencies
          );
          if (mountedMap.has(atom2) && prevAtomState.d !== nextAtomState.d) {
            mountDependencies(atom2, nextAtomState, prevAtomState.d);
          }
        };
        const promise = new Promise((resolve, reject) => {
          let settled = false;
          valueOrPromise.then(
            (v) => {
              if (!settled) {
                settled = true;
                resolvePromise(promise, v);
                resolve(v);
                updatePromiseDependencies();
              }
            },
            (e3) => {
              if (!settled) {
                settled = true;
                rejectPromise(promise, e3);
                reject(e3);
                updatePromiseDependencies();
              }
            }
          );
          continuePromise = (next2) => {
            if (!settled) {
              settled = true;
              next2.then(
                (v) => resolvePromise(promise, v),
                (e3) => rejectPromise(promise, e3)
              );
              resolve(next2);
            }
          };
        });
        promise.orig = valueOrPromise;
        promise.status = "pending";
        registerCancelPromise(promise, (next2) => {
          if (next2) {
            continuePromise(next2);
            abortPromise == null ? void 0 : abortPromise();
          }
        });
        return setAtomValue(atom2, promise, nextDependencies, true);
      }
      return setAtomValue(atom2, valueOrPromise, nextDependencies);
    };
    const setAtomError = (atom2, error2, nextDependencies) => {
      const prevAtomState = getAtomState(atom2);
      const nextAtomState = {
        d: (prevAtomState == null ? void 0 : prevAtomState.d) || /* @__PURE__ */ new Map(),
        e: error2
      };
      if (nextDependencies) {
        updateDependencies(atom2, nextAtomState, nextDependencies);
      }
      if (isEqualAtomError(prevAtomState, nextAtomState) && prevAtomState.d === nextAtomState.d) {
        return prevAtomState;
      }
      setAtomState(atom2, nextAtomState);
      return nextAtomState;
    };
    const readAtomState = (atom2, force) => {
      const atomState = getAtomState(atom2);
      if (!(force == null ? void 0 : force(atom2)) && atomState) {
        if (mountedMap.has(atom2)) {
          return atomState;
        }
        if (Array.from(atomState.d).every(([a2, s2]) => {
          if (a2 === atom2) {
            return true;
          }
          const aState = readAtomState(a2, force);
          return aState === s2 || isEqualAtomValue(aState, s2);
        })) {
          return atomState;
        }
      }
      const nextDependencies = /* @__PURE__ */ new Map();
      let isSync = true;
      const getter = (a2) => {
        if (isSelfAtom(atom2, a2)) {
          const aState2 = getAtomState(a2);
          if (aState2) {
            nextDependencies.set(a2, aState2);
            return returnAtomValue(aState2);
          }
          if (hasInitialValue(a2)) {
            nextDependencies.set(a2, void 0);
            return a2.init;
          }
          throw new Error("no atom init");
        }
        const aState = readAtomState(a2, force);
        nextDependencies.set(a2, aState);
        return returnAtomValue(aState);
      };
      let controller;
      let setSelf;
      const options = {
        get signal() {
          if (!controller) {
            controller = new AbortController();
          }
          return controller.signal;
        },
        get setSelf() {
          if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production" && !isActuallyWritableAtom(atom2)) {
            console.warn("setSelf function cannot be used with read-only atom");
          }
          if (!setSelf && isActuallyWritableAtom(atom2)) {
            setSelf = (...args) => {
              if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production" && isSync) {
                console.warn("setSelf function cannot be called in sync");
              }
              if (!isSync) {
                return writeAtom(atom2, ...args);
              }
            };
          }
          return setSelf;
        }
      };
      try {
        const valueOrPromise = atom2.read(getter, options);
        return setAtomValueOrPromise(
          atom2,
          valueOrPromise,
          nextDependencies,
          () => controller == null ? void 0 : controller.abort()
        );
      } catch (error2) {
        return setAtomError(atom2, error2, nextDependencies);
      } finally {
        isSync = false;
      }
    };
    const readAtom = (atom2) => returnAtomValue(readAtomState(atom2));
    const recomputeDependents = (atom2) => {
      const getDependents = (a2) => {
        var _a2, _b;
        const dependents = new Set((_a2 = mountedMap.get(a2)) == null ? void 0 : _a2.t);
        (_b = pendingMap.get(a2)) == null ? void 0 : _b[1].forEach((dependent) => {
          dependents.add(dependent);
        });
        return dependents;
      };
      const topsortedAtoms = new Array();
      const markedAtoms = /* @__PURE__ */ new Set();
      const visit = (n2) => {
        if (markedAtoms.has(n2)) {
          return;
        }
        markedAtoms.add(n2);
        for (const m of getDependents(n2)) {
          if (n2 !== m) {
            visit(m);
          }
        }
        topsortedAtoms.push(n2);
      };
      visit(atom2);
      const changedAtoms = /* @__PURE__ */ new Set([atom2]);
      const isMarked = (a2) => markedAtoms.has(a2);
      for (let i2 = topsortedAtoms.length - 1; i2 >= 0; --i2) {
        const a2 = topsortedAtoms[i2];
        const prevAtomState = getAtomState(a2);
        if (!prevAtomState) {
          continue;
        }
        let hasChangedDeps = false;
        for (const dep of prevAtomState.d.keys()) {
          if (dep !== a2 && changedAtoms.has(dep)) {
            hasChangedDeps = true;
            break;
          }
        }
        if (hasChangedDeps) {
          const nextAtomState = readAtomState(a2, isMarked);
          addPendingDependent(a2, nextAtomState);
          if (!isEqualAtomValue(prevAtomState, nextAtomState)) {
            changedAtoms.add(a2);
          }
        }
        markedAtoms.delete(a2);
      }
    };
    const writeAtomState = (atom2, ...args) => {
      const getter = (a2) => returnAtomValue(readAtomState(a2));
      const setter = (a2, ...args2) => {
        const isSync = pendingStack.length > 0;
        if (!isSync) {
          pendingStack.push(/* @__PURE__ */ new Set([a2]));
        }
        let r2;
        if (isSelfAtom(atom2, a2)) {
          if (!hasInitialValue(a2)) {
            throw new Error("atom not writable");
          }
          const prevAtomState = getAtomState(a2);
          const nextAtomState = setAtomValueOrPromise(a2, args2[0]);
          if (!isEqualAtomValue(prevAtomState, nextAtomState)) {
            recomputeDependents(a2);
          }
        } else {
          r2 = writeAtomState(a2, ...args2);
        }
        if (!isSync) {
          const flushed = flushPending(pendingStack.pop());
          if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
            devListenersRev2.forEach(
              (l2) => l2({ type: "async-write", flushed })
            );
          }
        }
        return r2;
      };
      const result = atom2.write(getter, setter, ...args);
      return result;
    };
    const writeAtom = (atom2, ...args) => {
      pendingStack.push(/* @__PURE__ */ new Set([atom2]));
      const result = writeAtomState(atom2, ...args);
      const flushed = flushPending(pendingStack.pop());
      if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
        devListenersRev2.forEach((l2) => l2({ type: "write", flushed }));
      }
      return result;
    };
    const mountAtom = (atom2, initialDependent, onMountQueue) => {
      var _a2;
      const existingMount = mountedMap.get(atom2);
      if (existingMount) {
        if (initialDependent) {
          existingMount.t.add(initialDependent);
        }
        return existingMount;
      }
      const queue = onMountQueue || [];
      (_a2 = getAtomState(atom2)) == null ? void 0 : _a2.d.forEach((_, a2) => {
        if (a2 !== atom2) {
          mountAtom(a2, atom2, queue);
        }
      });
      readAtomState(atom2);
      const mounted = {
        t: new Set(initialDependent && [initialDependent]),
        l: /* @__PURE__ */ new Set()
      };
      mountedMap.set(atom2, mounted);
      if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
        mountedAtoms.add(atom2);
      }
      if (isActuallyWritableAtom(atom2) && atom2.onMount) {
        const { onMount } = atom2;
        queue.push(() => {
          const onUnmount = onMount((...args) => writeAtom(atom2, ...args));
          if (onUnmount) {
            mounted.u = onUnmount;
          }
        });
      }
      if (!onMountQueue) {
        queue.forEach((f2) => f2());
      }
      return mounted;
    };
    const canUnmountAtom = (atom2, mounted) => !mounted.l.size && (!mounted.t.size || mounted.t.size === 1 && mounted.t.has(atom2));
    const tryUnmountAtom = (atom2, mounted) => {
      if (!canUnmountAtom(atom2, mounted)) {
        return;
      }
      const onUnmount = mounted.u;
      if (onUnmount) {
        onUnmount();
      }
      mountedMap.delete(atom2);
      if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
        mountedAtoms.delete(atom2);
      }
      const atomState = getAtomState(atom2);
      if (atomState) {
        if (hasPromiseAtomValue(atomState)) {
          cancelPromise(atomState.v);
        }
        atomState.d.forEach((_, a2) => {
          if (a2 !== atom2) {
            const mountedDep = mountedMap.get(a2);
            if (mountedDep) {
              mountedDep.t.delete(atom2);
              tryUnmountAtom(a2, mountedDep);
            }
          }
        });
      } else if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
        console.warn("[Bug] could not find atom state to unmount", atom2);
      }
    };
    const mountDependencies = (atom2, atomState, prevDependencies) => {
      const depSet = new Set(atomState.d.keys());
      const maybeUnmountAtomSet = /* @__PURE__ */ new Set();
      prevDependencies == null ? void 0 : prevDependencies.forEach((_, a2) => {
        if (depSet.has(a2)) {
          depSet.delete(a2);
          return;
        }
        maybeUnmountAtomSet.add(a2);
        const mounted = mountedMap.get(a2);
        if (mounted) {
          mounted.t.delete(atom2);
        }
      });
      depSet.forEach((a2) => {
        mountAtom(a2, atom2);
      });
      maybeUnmountAtomSet.forEach((a2) => {
        const mounted = mountedMap.get(a2);
        if (mounted) {
          tryUnmountAtom(a2, mounted);
        }
      });
    };
    const flushPending = (pendingAtoms) => {
      let flushed;
      if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
        flushed = /* @__PURE__ */ new Set();
      }
      const pending = [];
      const collectPending = (pendingAtom) => {
        var _a2;
        if (!pendingMap.has(pendingAtom)) {
          return;
        }
        const [prevAtomState, dependents] = pendingMap.get(pendingAtom);
        pendingMap.delete(pendingAtom);
        pending.push([pendingAtom, prevAtomState]);
        dependents.forEach(collectPending);
        (_a2 = getAtomState(pendingAtom)) == null ? void 0 : _a2.d.forEach((_, a2) => collectPending(a2));
      };
      pendingAtoms.forEach(collectPending);
      pending.forEach(([atom2, prevAtomState]) => {
        const atomState = getAtomState(atom2);
        if (!atomState) {
          if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
            console.warn("[Bug] no atom state to flush");
          }
          return;
        }
        if (atomState !== prevAtomState) {
          const mounted = mountedMap.get(atom2);
          if (mounted && atomState.d !== (prevAtomState == null ? void 0 : prevAtomState.d)) {
            mountDependencies(atom2, atomState, prevAtomState == null ? void 0 : prevAtomState.d);
          }
          if (mounted && !// TODO This seems pretty hacky. Hope to fix it.
          // Maybe we could `mountDependencies` in `setAtomState`?
          (!hasPromiseAtomValue(prevAtomState) && (isEqualAtomValue(prevAtomState, atomState) || isEqualAtomError(prevAtomState, atomState)))) {
            mounted.l.forEach((listener) => listener());
            if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
              flushed.add(atom2);
            }
          }
        }
      });
      if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
        return flushed;
      }
    };
    const subscribeAtom = (atom2, listener) => {
      const mounted = mountAtom(atom2);
      const flushed = flushPending([atom2]);
      const listeners = mounted.l;
      listeners.add(listener);
      if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
        devListenersRev2.forEach(
          (l2) => l2({ type: "sub", flushed })
        );
      }
      return () => {
        listeners.delete(listener);
        tryUnmountAtom(atom2, mounted);
        if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
          devListenersRev2.forEach((l2) => l2({ type: "unsub" }));
        }
      };
    };
    if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
      return {
        get: readAtom,
        set: writeAtom,
        sub: subscribeAtom,
        // store dev methods (these are tentative and subject to change without notice)
        dev_subscribe_store: (l2) => {
          devListenersRev2.add(l2);
          return () => {
            devListenersRev2.delete(l2);
          };
        },
        dev_get_mounted_atoms: () => mountedAtoms.values(),
        dev_get_atom_state: (a2) => atomStateMap.get(a2),
        dev_get_mounted: (a2) => mountedMap.get(a2),
        dev_restore_atoms: (values) => {
          pendingStack.push(/* @__PURE__ */ new Set());
          for (const [atom2, valueOrPromise] of values) {
            if (hasInitialValue(atom2)) {
              setAtomValueOrPromise(atom2, valueOrPromise);
              recomputeDependents(atom2);
            }
          }
          const flushed = flushPending(pendingStack.pop());
          devListenersRev2.forEach(
            (l2) => l2({ type: "restore", flushed })
          );
        }
      };
    }
    return {
      get: readAtom,
      set: writeAtom,
      sub: subscribeAtom
    };
  };
  let defaultStore;
  const getDefaultStore$1 = () => {
    if (!defaultStore) {
      defaultStore = createStore$1$1();
      if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
        globalThis.__JOTAI_DEFAULT_STORE__ || (globalThis.__JOTAI_DEFAULT_STORE__ = defaultStore);
        if (globalThis.__JOTAI_DEFAULT_STORE__ !== defaultStore) {
          console.warn(
            "Detected multiple Jotai instances. It may cause unexpected behavior with the default store. https://github.com/pmndrs/jotai/discussions/2044"
          );
        }
      }
    }
    return defaultStore;
  };
  const createStore$2 = createStore$1$1;
  const getDefaultStore = getDefaultStore$1;
  const StoreContext = React.createContext(
    void 0
  );
  const useStore = (options) => {
    const store = React.useContext(StoreContext);
    return (options == null ? void 0 : options.store) || store || getDefaultStore();
  };
  const isPromiseLike$1 = (x) => typeof (x == null ? void 0 : x.then) === "function";
  const use = React.use || ((promise) => {
    if (promise.status === "pending") {
      throw promise;
    } else if (promise.status === "fulfilled") {
      return promise.value;
    } else if (promise.status === "rejected") {
      throw promise.reason;
    } else {
      promise.status = "pending";
      promise.then(
        (v) => {
          promise.status = "fulfilled";
          promise.value = v;
        },
        (e3) => {
          promise.status = "rejected";
          promise.reason = e3;
        }
      );
      throw promise;
    }
  });
  function useAtomValue(atom2, options) {
    const store = useStore(options);
    const [[valueFromReducer, storeFromReducer, atomFromReducer], rerender] = React.useReducer(
      (prev) => {
        const nextValue = store.get(atom2);
        if (Object.is(prev[0], nextValue) && prev[1] === store && prev[2] === atom2) {
          return prev;
        }
        return [nextValue, store, atom2];
      },
      void 0,
      () => [store.get(atom2), store, atom2]
    );
    let value = valueFromReducer;
    if (storeFromReducer !== store || atomFromReducer !== atom2) {
      rerender();
      value = store.get(atom2);
    }
    const delay = options == null ? void 0 : options.delay;
    React.useEffect(() => {
      const unsub = store.sub(atom2, () => {
        if (typeof delay === "number") {
          setTimeout(rerender, delay);
          return;
        }
        rerender();
      });
      rerender();
      return unsub;
    }, [store, atom2, delay]);
    React.useDebugValue(value);
    return isPromiseLike$1(value) ? use(value) : value;
  }
  function useSetAtom(atom2, options) {
    const store = useStore(options);
    const setAtom = React.useCallback(
      (...args) => {
        if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production" && !("write" in atom2)) {
          throw new Error("not writable atom");
        }
        return store.set(atom2, ...args);
      },
      [store, atom2]
    );
    return setAtom;
  }
  function useAtom(atom2, options) {
    return [
      useAtomValue(atom2, options),
      // We do wrong type assertion here, which results in throwing an error.
      useSetAtom(atom2, options)
    ];
  }
  const getCached$2 = (c2, m, k) => (m.has(k) ? m : m.set(k, c2())).get(k);
  const cache1$3 = /* @__PURE__ */ new WeakMap();
  const memo3 = (create2, dep1, dep2, dep3) => {
    const cache2 = getCached$2(() => /* @__PURE__ */ new WeakMap(), cache1$3, dep1);
    const cache3 = getCached$2(() => /* @__PURE__ */ new WeakMap(), cache2, dep2);
    return getCached$2(create2, cache3, dep3);
  };
  function selectAtom(anAtom, selector, equalityFn = Object.is) {
    return memo3(
      () => {
        const EMPTY = Symbol();
        const selectValue = ([value, prevSlice]) => {
          if (prevSlice === EMPTY) {
            return selector(value);
          }
          const slice = selector(value, prevSlice);
          return equalityFn(prevSlice, slice) ? prevSlice : slice;
        };
        const derivedAtom = atom((get2) => {
          const prev = get2(derivedAtom);
          const value = get2(anAtom);
          return selectValue([value, prev]);
        });
        derivedAtom.init = EMPTY;
        return derivedAtom;
      },
      anAtom,
      selector,
      equalityFn
    );
  }
  const isPromiseLike = (x) => typeof (x == null ? void 0 : x.then) === "function";
  function createJSONStorage$1(getStringStorage = () => {
    try {
      return window.localStorage;
    } catch (e3) {
      if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") {
        if (typeof window !== "undefined") {
          console.warn(e3);
        }
      }
      return void 0;
    }
  }, options) {
    var _a2;
    let lastStr;
    let lastValue;
    const storage = {
      getItem: (key, initialValue) => {
        var _a22, _b;
        const parse2 = (str2) => {
          str2 = str2 || "";
          if (lastStr !== str2) {
            try {
              lastValue = JSON.parse(str2, options == null ? void 0 : options.reviver);
            } catch (e3) {
              return initialValue;
            }
            lastStr = str2;
          }
          return lastValue;
        };
        const str = (_b = (_a22 = getStringStorage()) == null ? void 0 : _a22.getItem(key)) != null ? _b : null;
        if (isPromiseLike(str)) {
          return str.then(parse2);
        }
        return parse2(str);
      },
      setItem: (key, newValue) => {
        var _a22;
        return (_a22 = getStringStorage()) == null ? void 0 : _a22.setItem(
          key,
          JSON.stringify(newValue, options == null ? void 0 : options.replacer)
        );
      },
      removeItem: (key) => {
        var _a22;
        return (_a22 = getStringStorage()) == null ? void 0 : _a22.removeItem(key);
      }
    };
    const createHandleSubscribe = (subscriber2) => (key, callback, initialValue) => subscriber2(key, (v) => {
      let newValue;
      try {
        newValue = JSON.parse(v || "");
      } catch (e3) {
        newValue = initialValue;
      }
      callback(newValue);
    });
    let subscriber;
    try {
      subscriber = (_a2 = getStringStorage()) == null ? void 0 : _a2.subscribe;
    } catch (e3) {
    }
    if (!subscriber && typeof window !== "undefined" && typeof window.addEventListener === "function" && window.Storage) {
      subscriber = (key, callback) => {
        if (!(getStringStorage() instanceof window.Storage)) {
          return () => {
          };
        }
        const storageEventCallback = (e3) => {
          if (e3.storageArea === getStringStorage() && e3.key === key) {
            callback(e3.newValue);
          }
        };
        window.addEventListener("storage", storageEventCallback);
        return () => {
          window.removeEventListener("storage", storageEventCallback);
        };
      };
    }
    if (subscriber) {
      storage.subscribe = createHandleSubscribe(subscriber);
    }
    return storage;
  }
  createJSONStorage$1();
  const hydratedMap = /* @__PURE__ */ new WeakMap();
  function useHydrateAtoms(values, options) {
    const store = useStore(options);
    const hydratedSet = getHydratedSet(store);
    for (const [atom2, value] of values) {
      if (!hydratedSet.has(atom2) || (options == null ? void 0 : options.dangerouslyForceHydrate)) {
        hydratedSet.add(atom2);
        store.set(atom2, value);
      }
    }
  }
  const getHydratedSet = (store) => {
    let hydratedSet = hydratedMap.get(store);
    if (!hydratedSet) {
      hydratedSet = /* @__PURE__ */ new WeakSet();
      hydratedMap.set(store, hydratedSet);
    }
    return hydratedSet;
  };
  var __defProp$1 = Object.defineProperty;
  var __defProps$1 = Object.defineProperties;
  var __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
  var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
  var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
  var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues$1 = (a2, b) => {
    for (var prop2 in b || (b = {}))
      if (__hasOwnProp$1.call(b, prop2))
        __defNormalProp$1(a2, prop2, b[prop2]);
    if (__getOwnPropSymbols$1)
      for (var prop2 of __getOwnPropSymbols$1(b)) {
        if (__propIsEnum$1.call(b, prop2))
          __defNormalProp$1(a2, prop2, b[prop2]);
      }
    return a2;
  };
  var __spreadProps$1 = (a2, b) => __defProps$1(a2, __getOwnPropDescs$1(b));
  var __objRest$1 = (source2, exclude) => {
    var target = {};
    for (var prop2 in source2)
      if (__hasOwnProp$1.call(source2, prop2) && exclude.indexOf(prop2) < 0)
        target[prop2] = source2[prop2];
    if (source2 != null && __getOwnPropSymbols$1)
      for (var prop2 of __getOwnPropSymbols$1(source2)) {
        if (exclude.indexOf(prop2) < 0 && __propIsEnum$1.call(source2, prop2))
          target[prop2] = source2[prop2];
      }
    return target;
  };
  var wrapFn = (fnOrValue) => typeof fnOrValue === "function" ? { __fn: fnOrValue } : fnOrValue;
  var unwrapFn = (wrappedFnOrValue) => wrappedFnOrValue && typeof wrappedFnOrValue === "object" && "__fn" in wrappedFnOrValue ? wrappedFnOrValue.__fn : wrappedFnOrValue;
  var atomWithFn = (initialValue) => {
    const baseAtom = atom(wrapFn(initialValue));
    return atom(
      (get2) => unwrapFn(get2(baseAtom)),
      (_get, set2, value) => set2(baseAtom, wrapFn(value))
    );
  };
  var useHydrateStore = (atoms, initialValues, options = {}) => {
    const values = [];
    for (const key of Object.keys(atoms)) {
      const initialValue = initialValues[key];
      if (initialValue !== void 0) {
        values.push([atoms[key], initialValue]);
      }
    }
    useHydrateAtoms(values, options);
  };
  var useSyncStore = (atoms, values, { store } = {}) => {
    for (const key of Object.keys(atoms)) {
      const value = values[key];
      const atom2 = atoms[key];
      const set2 = useSetAtom(atom2, { store });
      React.useEffect(() => {
        if (value !== void 0 && value !== null) {
          set2(value);
        }
      }, [set2, value]);
    }
  };
  var getFullyQualifiedScope = (storeName, scope) => {
    return `${storeName}:${scope}`;
  };
  var PROVIDER_SCOPE = "provider";
  var AtomStoreContext = React.createContext(
    /* @__PURE__ */ new Map()
  );
  var useAtomStore = (storeName, scope = PROVIDER_SCOPE, warnIfUndefined = true) => {
    var _a2;
    const storeContext = React.useContext(AtomStoreContext);
    const store = (_a2 = storeContext.get(getFullyQualifiedScope(storeName, scope))) != null ? _a2 : storeContext.get(getFullyQualifiedScope(storeName, PROVIDER_SCOPE));
    if (!store && warnIfUndefined) {
      console.warn(
        `Tried to access jotai store '${storeName}' outside of a matching provider.`
      );
    }
    return store;
  };
  var HydrateAtoms = (_a2) => {
    var _b = _a2, {
      initialValues,
      children,
      store,
      atoms
    } = _b, props = __objRest$1(_b, [
      "initialValues",
      "children",
      "store",
      "atoms"
    ]);
    useHydrateStore(atoms, __spreadValues$1(__spreadValues$1({}, initialValues), props), {
      store
    });
    useSyncStore(atoms, props, {
      store
    });
    return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
  };
  var createAtomProvider = (storeScope, atoms, options = {}) => {
    const Effect = options.effect;
    return (_a2) => {
      var _b = _a2, { store, scope, children, resetKey } = _b, props = __objRest$1(_b, ["store", "scope", "children", "resetKey"]);
      const [storeState, setStoreState] = React.useState(createStore$2());
      React.useEffect(() => {
        if (resetKey) {
          setStoreState(createStore$2());
        }
      }, [resetKey]);
      const previousStoreContext = React.useContext(AtomStoreContext);
      const storeContext = React.useMemo(() => {
        const newStoreContext = new Map(previousStoreContext);
        if (scope) {
          newStoreContext.set(
            getFullyQualifiedScope(storeScope, scope),
            storeState
          );
        }
        newStoreContext.set(
          getFullyQualifiedScope(storeScope, PROVIDER_SCOPE),
          storeState
        );
        return newStoreContext;
      }, [previousStoreContext, scope, storeState]);
      return /* @__PURE__ */ React.createElement(AtomStoreContext.Provider, { value: storeContext }, /* @__PURE__ */ React.createElement(HydrateAtoms, __spreadValues$1({ store: storeState, atoms }, props), !!Effect && /* @__PURE__ */ React.createElement(Effect, null), children));
    };
  };
  var capitalizeFirstLetter = (str = "") => str.length > 0 ? str[0].toUpperCase() + str.slice(1) : "";
  var getProviderIndex = (name = "") => `${capitalizeFirstLetter(name)}Provider`;
  var getStoreIndex = (name = "") => name.length > 0 ? `${name}Store` : "store";
  var getUseStoreIndex = (name = "") => `use${capitalizeFirstLetter(name)}Store`;
  var getUseValueIndex = (key = "") => `use${capitalizeFirstLetter(key)}Value`;
  var getGetIndex = (key = "") => `get${capitalizeFirstLetter(key)}`;
  var getUseSetIndex = (key = "") => `useSet${capitalizeFirstLetter(key)}`;
  var getSetIndex = (key = "") => `set${capitalizeFirstLetter(key)}`;
  var getUseStateIndex = (key = "") => `use${capitalizeFirstLetter(key)}State`;
  var getSubscribeIndex = (key = "") => `subscribe${capitalizeFirstLetter(key)}`;
  var isAtom = (possibleAtom) => !!possibleAtom && typeof possibleAtom === "object" && "read" in possibleAtom && typeof possibleAtom.read === "function";
  var withStoreAndOptions = (fnRecord, getIndex, store, options) => Object.fromEntries(
    Object.entries(fnRecord).map(([key, fn]) => [
      getIndex(key),
      (...args) => fn(store, options, ...args)
    ])
  );
  var withKeyAndStoreAndOptions = (fnRecord, store, options) => (key, ...args) => fnRecord[key](store, options, ...args);
  var convertScopeShorthand = (optionsOrScope = {}) => typeof optionsOrScope === "string" ? { scope: optionsOrScope } : optionsOrScope;
  var useConvertScopeShorthand = (optionsOrScope) => {
    const convertedOptions = convertScopeShorthand(optionsOrScope);
    return React.useMemo(() => convertedOptions, Object.values(convertedOptions));
  };
  var identity$6 = (x) => x;
  var createAtomStore = (initialState2, {
    name,
    delay: delayRoot,
    effect,
    extend,
    infiniteRenderDetectionLimit = 1e5,
    suppressWarnings
  }) => {
    const providerIndex = getProviderIndex(name);
    const useStoreIndex = getUseStoreIndex(name);
    const storeIndex = getStoreIndex(name);
    const atomsWithoutExtend = {};
    const writableAtomsWithoutExtend = {};
    const atomIsWritable = {};
    for (const [key, atomOrValue] of Object.entries(initialState2)) {
      const atomConfig = isAtom(atomOrValue) ? atomOrValue : atomWithFn(atomOrValue);
      atomsWithoutExtend[key] = atomConfig;
      const writable = "write" in atomConfig;
      atomIsWritable[key] = writable;
      if (writable) {
        writableAtomsWithoutExtend[key] = atomConfig;
      }
    }
    const atoms = __spreadValues$1({}, atomsWithoutExtend);
    if (extend) {
      const extendedAtoms = extend(atomsWithoutExtend);
      for (const [key, atomConfig] of Object.entries(extendedAtoms)) {
        atoms[key] = atomConfig;
        atomIsWritable[key] = "write" in atomConfig;
      }
    }
    const atomsOfUseValue = {};
    const atomsOfGet = {};
    const atomsOfUseSet = {};
    const atomsOfSet = {};
    const atomsOfUseState = {};
    const atomsOfSubscribe = {};
    const useStore2 = (optionsOrScope = {}) => {
      const {
        scope,
        store,
        warnIfNoStore = !suppressWarnings
      } = convertScopeShorthand(optionsOrScope);
      const contextStore = useAtomStore(name, scope, !store && warnIfNoStore);
      return store != null ? store : contextStore;
    };
    let renderCount = 0;
    const useAtomValueWithStore = (atomConfig, store, optionsOrScope, selector, equalityFnOrDeps, deps) => {
      var _a2, _b;
      if (process.env.NODE_ENV !== "production" && infiniteRenderDetectionLimit) {
        renderCount += 1;
        if (renderCount > infiniteRenderDetectionLimit) {
          throw new Error(
            `
use<Key>Value/useValue/use<StoreName>Value has rendered ${infiniteRenderDetectionLimit} times in the same render.
It is very likely to have fallen into an infinite loop.
That is because you do not memoize the selector/equalityFn function param.
Please wrap them with useCallback or configure the deps array correctly.`
          );
        }
        setTimeout(() => {
          renderCount = 0;
        });
      }
      const options = convertScopeShorthand(optionsOrScope);
      selector != null ? selector : selector = identity$6;
      const equalityFn = typeof equalityFnOrDeps === "function" ? equalityFnOrDeps : void 0;
      deps = (_a2 = typeof equalityFnOrDeps === "function" ? deps : equalityFnOrDeps) != null ? _a2 : [selector, equalityFn];
      const [memoizedSelector, memoizedEqualityFn] = React.useMemo(
        () => [selector, equalityFn],
        deps
      );
      const selectorAtom = selectAtom(
        atomConfig,
        memoizedSelector,
        memoizedEqualityFn
      );
      return useAtomValue(selectorAtom, {
        store,
        delay: (_b = options.delay) != null ? _b : delayRoot
      });
    };
    const getAtomWithStore = (atomConfig, store, _optionsOrScope) => {
      return (store != null ? store : getDefaultStore()).get(atomConfig);
    };
    const useSetAtomWithStore = (atomConfig, store, _optionsOrScope) => {
      return useSetAtom(atomConfig, { store });
    };
    const setAtomWithStore = (atomConfig, store, _optionsOrScope) => {
      return (...args) => (store != null ? store : getDefaultStore()).set(
        atomConfig,
        ...args
      );
    };
    const useAtomStateWithStore = (atomConfig, store, optionsOrScope) => {
      const { delay = delayRoot } = convertScopeShorthand(optionsOrScope);
      return useAtom(atomConfig, { store, delay });
    };
    const subscribeAtomWithStore = (atomConfig, store, _optionsOrScope) => {
      return (callback) => {
        store != null ? store : store = getDefaultStore();
        const unsubscribe = store.sub(atomConfig, () => {
          callback(store.get(atomConfig));
        });
        return () => unsubscribe();
      };
    };
    for (const key of Object.keys(atoms)) {
      const atomConfig = atoms[key];
      const isWritable = atomIsWritable[key];
      atomsOfUseValue[key] = (store, optionsOrScope = {}, selector, equalityFnOrDeps, deps) => useAtomValueWithStore(
        atomConfig,
        store,
        optionsOrScope,
        selector,
        equalityFnOrDeps,
        deps
      );
      atomsOfGet[key] = (store, optionsOrScope = {}) => getAtomWithStore(atomConfig, store);
      atomsOfSubscribe[key] = (store, optionsOrScope = {}, callback) => subscribeAtomWithStore(atomConfig, store)(callback);
      if (isWritable) {
        atomsOfUseSet[key] = (store, optionsOrScope = {}) => useSetAtomWithStore(
          atomConfig,
          store
        );
        atomsOfSet[key] = (store, optionsOrScope = {}, ...args) => setAtomWithStore(
          atomConfig,
          store
        )(...args);
        atomsOfUseState[key] = (store, optionsOrScope = {}) => useAtomStateWithStore(
          atomConfig,
          store,
          optionsOrScope
        );
      }
    }
    const Provider = createAtomProvider(
      name,
      writableAtomsWithoutExtend,
      { effect }
    );
    const storeApi = {
      atom: atoms,
      name
    };
    const useStoreApi = (options = {}) => {
      const convertedOptions = useConvertScopeShorthand(options);
      const store = useStore2(convertedOptions);
      return React.useMemo(
        () => __spreadProps$1(__spreadValues$1(__spreadValues$1(__spreadValues$1(__spreadValues$1(__spreadValues$1(__spreadValues$1({}, withStoreAndOptions(
          atomsOfUseValue,
          getUseValueIndex,
          store,
          convertedOptions
        )), withStoreAndOptions(
          atomsOfGet,
          getGetIndex,
          store,
          convertedOptions
        )), withStoreAndOptions(
          atomsOfUseSet,
          getUseSetIndex,
          store,
          convertedOptions
        )), withStoreAndOptions(
          atomsOfSet,
          getSetIndex,
          store,
          convertedOptions
        )), withStoreAndOptions(
          atomsOfUseState,
          getUseStateIndex,
          store,
          convertedOptions
        )), withStoreAndOptions(
          atomsOfSubscribe,
          getSubscribeIndex,
          store,
          convertedOptions
        )), {
          // store.useValue('key')
          useValue: withKeyAndStoreAndOptions(
            atomsOfUseValue,
            store,
            convertedOptions
          ),
          // store.get('key')
          get: withKeyAndStoreAndOptions(
            atomsOfGet,
            store,
            convertedOptions
          ),
          // store.useSet('key')
          useSet: withKeyAndStoreAndOptions(
            atomsOfUseSet,
            store,
            convertedOptions
          ),
          // store.set('key', ...args)
          set: withKeyAndStoreAndOptions(
            atomsOfSet,
            store,
            convertedOptions
          ),
          // store.useState('key')
          useState: withKeyAndStoreAndOptions(
            atomsOfUseState,
            store,
            convertedOptions
          ),
          // store.subscribe('key', callback)
          subscribe: withKeyAndStoreAndOptions(
            atomsOfSubscribe,
            store,
            convertedOptions
          ),
          // store.useAtomValue(atomConfig)
          useAtomValue: (atomConfig, selector, equalityFnOrDeps, deps) => (
            // eslint-disable-next-line react-compiler/react-compiler
            useAtomValueWithStore(
              atomConfig,
              store,
              convertedOptions,
              selector,
              equalityFnOrDeps,
              deps
            )
          ),
          // store.getAtom(atomConfig)
          getAtom: (atomConfig) => getAtomWithStore(atomConfig, store),
          // store.useSetAtom(atomConfig)
          useSetAtom: (atomConfig) => (
            // eslint-disable-next-line react-compiler/react-compiler
            useSetAtomWithStore(atomConfig, store)
          ),
          // store.setAtom(atomConfig, ...args)
          setAtom: (atomConfig) => setAtomWithStore(atomConfig, store),
          // store.useAtomState(atomConfig)
          useAtomState: (atomConfig) => (
            // eslint-disable-next-line react-compiler/react-compiler
            useAtomStateWithStore(atomConfig, store, convertedOptions)
          ),
          // store.subscribeAtom(atomConfig, callback)
          subscribeAtom: (atomConfig) => subscribeAtomWithStore(atomConfig, store),
          store
        }),
        [store, convertedOptions]
      );
    };
    const useNameState = (key, options) => {
      var _a2;
      const store = (_a2 = useStore2(options)) != null ? _a2 : getDefaultStore();
      return useAtomStateWithStore(atoms[key], store, options);
    };
    const useNameValue = (key, _a2 = {}, deps) => {
      var _b = _a2, {
        equalityFn,
        selector
      } = _b, options = __objRest$1(_b, [
        "equalityFn",
        "selector"
      ]);
      var _a22;
      const store = (_a22 = useStore2(options)) != null ? _a22 : getDefaultStore();
      return useAtomValueWithStore(
        atoms[key],
        store,
        options,
        selector,
        equalityFn != null ? equalityFn : deps,
        equalityFn && deps
      );
    };
    const useNameSet = (key, options) => {
      var _a2;
      const store = (_a2 = useStore2(options)) != null ? _a2 : getDefaultStore();
      return useSetAtomWithStore(atoms[key], store);
    };
    return {
      [providerIndex]: Provider,
      [useStoreIndex]: useStoreApi,
      [storeIndex]: storeApi,
      [`use${capitalizeFirstLetter(name)}State`]: useNameState,
      [`use${capitalizeFirstLetter(name)}Value`]: useNameValue,
      [`use${capitalizeFirstLetter(name)}Set`]: useNameSet,
      name
    };
  };
  function useAtomStoreValue(store, key, selector, equalityFnOrDeps, deps) {
    return store.useValue(key, selector, equalityFnOrDeps, deps);
  }
  function useAtomStoreSet(store, key) {
    return store.useSet(key);
  }
  function useStoreAtomValue(store, atom2, selector, equalityFnOrDeps, deps) {
    return store.useAtomValue(atom2, selector, equalityFnOrDeps, deps);
  }
  const e$1 = Symbol(), t$1 = Symbol(), r$2 = "a", n$1 = "w";
  let o$1 = (e3, t2) => new Proxy(e3, t2);
  const s = Object.getPrototypeOf, c$1 = /* @__PURE__ */ new WeakMap(), l$1 = (e3) => e3 && (c$1.has(e3) ? c$1.get(e3) : s(e3) === Object.prototype || s(e3) === Array.prototype), f = (e3) => "object" == typeof e3 && null !== e3, i = (e3) => {
    if (Array.isArray(e3))
      return Array.from(e3);
    const t2 = Object.getOwnPropertyDescriptors(e3);
    return Object.values(t2).forEach((e4) => {
      e4.configurable = true;
    }), Object.create(s(e3), t2);
  }, u = (e3) => e3[t$1] || e3, a = (s2, c2, f2, p2) => {
    if (!l$1(s2))
      return s2;
    let g = p2 && p2.get(s2);
    if (!g) {
      const e3 = u(s2);
      g = ((e4) => Object.values(Object.getOwnPropertyDescriptors(e4)).some((e5) => !e5.configurable && !e5.writable))(e3) ? [e3, i(e3)] : [e3], null == p2 || p2.set(s2, g);
    }
    const [y, h] = g;
    let w2 = f2 && f2.get(y);
    return w2 && w2[1].f === !!h || (w2 = ((o3, s3) => {
      const c3 = { f: s3 };
      let l2 = false;
      const f3 = (e3, t2) => {
        if (!l2) {
          let s4 = c3[r$2].get(o3);
          if (s4 || (s4 = {}, c3[r$2].set(o3, s4)), e3 === n$1)
            s4[n$1] = true;
          else {
            let r2 = s4[e3];
            r2 || (r2 = /* @__PURE__ */ new Set(), s4[e3] = r2), r2.add(t2);
          }
        }
      }, i2 = { get: (e3, n2) => n2 === t$1 ? o3 : (f3("k", n2), a(Reflect.get(e3, n2), c3[r$2], c3.c, c3.t)), has: (t2, n2) => n2 === e$1 ? (l2 = true, c3[r$2].delete(o3), true) : (f3("h", n2), Reflect.has(t2, n2)), getOwnPropertyDescriptor: (e3, t2) => (f3("o", t2), Reflect.getOwnPropertyDescriptor(e3, t2)), ownKeys: (e3) => (f3(n$1), Reflect.ownKeys(e3)) };
      return s3 && (i2.set = i2.deleteProperty = () => false), [i2, c3];
    })(y, !!h), w2[1].p = o$1(h || y, w2[0]), f2 && f2.set(y, w2)), w2[1][r$2] = c2, w2[1].c = f2, w2[1].t = p2, w2[1].p;
  }, p = (e3, t2, r2, o3, s2 = Object.is) => {
    if (s2(e3, t2))
      return false;
    if (!f(e3) || !f(t2))
      return true;
    const c2 = r2.get(u(e3));
    if (!c2)
      return true;
    if (o3) {
      const r3 = o3.get(e3);
      if (r3 && r3.n === t2)
        return r3.g;
      o3.set(e3, { n: t2, g: false });
    }
    let l2 = null;
    try {
      for (const r3 of c2.h || [])
        if (l2 = Reflect.has(e3, r3) !== Reflect.has(t2, r3), l2)
          return l2;
      if (true === c2[n$1]) {
        if (l2 = ((e4, t3) => {
          const r3 = Reflect.ownKeys(e4), n2 = Reflect.ownKeys(t3);
          return r3.length !== n2.length || r3.some((e5, t4) => e5 !== n2[t4]);
        })(e3, t2), l2)
          return l2;
      } else
        for (const r3 of c2.o || [])
          if (l2 = !!Reflect.getOwnPropertyDescriptor(e3, r3) != !!Reflect.getOwnPropertyDescriptor(t2, r3), l2)
            return l2;
      for (const n2 of c2.k || [])
        if (l2 = p(e3[n2], t2[n2], r2, o3, s2), l2)
          return l2;
      return null === l2 && (l2 = true), l2;
    } finally {
      o3 && o3.set(e3, { n: t2, g: l2 });
    }
  }, w = (e3, t2, r2) => {
    const o3 = [], s2 = /* @__PURE__ */ new WeakSet(), c2 = (e4, l2) => {
      if (s2.has(e4))
        return;
      f(e4) && s2.add(e4);
      const i2 = f(e4) && t2.get(u(e4));
      if (i2) {
        var a2, p2;
        if (null == (a2 = i2.h) || a2.forEach((e5) => {
          const t3 = `:has(${String(e5)})`;
          o3.push(l2 ? [...l2, t3] : [t3]);
        }), true === i2[n$1]) {
          const e5 = ":ownKeys";
          o3.push(l2 ? [...l2, e5] : [e5]);
        } else {
          var g;
          null == (g = i2.o) || g.forEach((e5) => {
            const t3 = `:hasOwn(${String(e5)})`;
            o3.push(l2 ? [...l2, t3] : [t3]);
          });
        }
        null == (p2 = i2.k) || p2.forEach((t3) => {
          r2 && !("value" in (Object.getOwnPropertyDescriptor(e4, t3) || {})) || c2(e4[t3], l2 ? [...l2, t3] : [t3]);
        });
      } else
        l2 && o3.push(l2);
    };
    return c2(e3), o3;
  };
  const useAffectedDebugValue = (state, affected) => {
    const pathList = React.useRef();
    React.useEffect(() => {
      pathList.current = w(state, affected);
    });
    React.useDebugValue(state);
  };
  const createTrackedSelector = (useSelector) => {
    const useTrackedSelector = () => {
      const [, forceUpdate] = React.useReducer((c2) => c2 + 1, 0);
      const affected = /* @__PURE__ */ new WeakMap();
      const lastAffected = React.useRef();
      const prevState = React.useRef();
      const lastState = React.useRef();
      React.useEffect(() => {
        lastAffected.current = affected;
        if (prevState.current !== lastState.current && p(prevState.current, lastState.current, affected, /* @__PURE__ */ new WeakMap())) {
          prevState.current = lastState.current;
          forceUpdate();
        }
      });
      const selector = React.useCallback((nextState) => {
        lastState.current = nextState;
        if (prevState.current && prevState.current !== nextState && lastAffected.current && !p(prevState.current, nextState, lastAffected.current, /* @__PURE__ */ new WeakMap())) {
          return prevState.current;
        }
        prevState.current = nextState;
        return nextState;
      }, []);
      const state = useSelector(selector);
      if (typeof process === "object" && process.env.NODE_ENV !== "production") {
        useAffectedDebugValue(state, affected);
      }
      const proxyCache = React.useMemo(() => /* @__PURE__ */ new WeakMap(), []);
      return a(state, affected, proxyCache);
    };
    return useTrackedSelector;
  };
  const trackedConnections = /* @__PURE__ */ new Map();
  const getTrackedConnectionState = (name) => {
    const api = trackedConnections.get(name);
    if (!api)
      return {};
    return Object.fromEntries(
      Object.entries(api.stores).map(([key, api2]) => [key, api2.getState()])
    );
  };
  const extractConnectionInformation = (store, extensionConnector, options) => {
    if (store === void 0) {
      return {
        type: "untracked",
        connection: extensionConnector.connect(options)
      };
    }
    const existingConnection = trackedConnections.get(options.name);
    if (existingConnection) {
      return { type: "tracked", store, ...existingConnection };
    }
    const newConnection = {
      connection: extensionConnector.connect(options),
      stores: {}
    };
    trackedConnections.set(options.name, newConnection);
    return { type: "tracked", store, ...newConnection };
  };
  const removeStoreFromTrackedConnections = (name, store) => {
    if (store === void 0)
      return;
    const connectionInfo = trackedConnections.get(name);
    if (!connectionInfo)
      return;
    delete connectionInfo.stores[store];
    if (Object.keys(connectionInfo.stores).length === 0) {
      trackedConnections.delete(name);
    }
  };
  const findCallerName = (stack) => {
    var _a2, _b;
    if (!stack)
      return void 0;
    const traceLines = stack.split("\n");
    const apiSetStateLineIndex = traceLines.findIndex(
      (traceLine) => traceLine.includes("api.setState")
    );
    if (apiSetStateLineIndex < 0)
      return void 0;
    const callerLine = ((_a2 = traceLines[apiSetStateLineIndex + 1]) == null ? void 0 : _a2.trim()) || "";
    return (_b = /.+ (.+) .+/.exec(callerLine)) == null ? void 0 : _b[1];
  };
  const devtoolsImpl = (fn, devtoolsOptions = {}) => (set2, get2, api) => {
    const { enabled, anonymousActionType, store, ...options } = devtoolsOptions;
    let extensionConnector;
    try {
      extensionConnector = (enabled != null ? enabled : ({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production") && window.__REDUX_DEVTOOLS_EXTENSION__;
    } catch (e3) {
    }
    if (!extensionConnector) {
      return fn(set2, get2, api);
    }
    const { connection, ...connectionInformation } = extractConnectionInformation(store, extensionConnector, options);
    let isRecording = true;
    api.setState = (state, replace, nameOrAction) => {
      const r2 = set2(state, replace);
      if (!isRecording)
        return r2;
      const inferredActionType = findCallerName(new Error().stack);
      const action = nameOrAction === void 0 ? { type: anonymousActionType || inferredActionType || "anonymous" } : typeof nameOrAction === "string" ? { type: nameOrAction } : nameOrAction;
      if (store === void 0) {
        connection == null ? void 0 : connection.send(action, get2());
        return r2;
      }
      connection == null ? void 0 : connection.send(
        {
          ...action,
          type: `${store}/${action.type}`
        },
        {
          ...getTrackedConnectionState(options.name),
          [store]: api.getState()
        }
      );
      return r2;
    };
    api.devtools = {
      cleanup: () => {
        if (connection && typeof connection.unsubscribe === "function") {
          connection.unsubscribe();
        }
        removeStoreFromTrackedConnections(options.name, store);
      }
    };
    const setStateFromDevtools = (...a2) => {
      const originalIsRecording = isRecording;
      isRecording = false;
      set2(...a2);
      isRecording = originalIsRecording;
    };
    const initialState2 = fn(api.setState, get2, api);
    if (connectionInformation.type === "untracked") {
      connection == null ? void 0 : connection.init(initialState2);
    } else {
      connectionInformation.stores[connectionInformation.store] = api;
      connection == null ? void 0 : connection.init(
        Object.fromEntries(
          Object.entries(connectionInformation.stores).map(([key, store2]) => [
            key,
            key === connectionInformation.store ? initialState2 : store2.getState()
          ])
        )
      );
    }
    if (api.dispatchFromDevtools && typeof api.dispatch === "function") {
      let didWarnAboutReservedActionType = false;
      const originalDispatch = api.dispatch;
      api.dispatch = (...args) => {
        if (({ "BASE_URL": "/", "MODE": "production", "DEV": false, "PROD": true, "SSR": false } ? "production" : void 0) !== "production" && args[0].type === "__setState" && !didWarnAboutReservedActionType) {
          console.warn(
            '[zustand devtools middleware] "__setState" action type is reserved to set state from the devtools. Avoid using it.'
          );
          didWarnAboutReservedActionType = true;
        }
        originalDispatch(...args);
      };
    }
    connection.subscribe((message) => {
      var _a2;
      switch (message.type) {
        case "ACTION":
          if (typeof message.payload !== "string") {
            console.error(
              "[zustand devtools middleware] Unsupported action format"
            );
            return;
          }
          return parseJsonThen(
            message.payload,
            (action) => {
              if (action.type === "__setState") {
                if (store === void 0) {
                  setStateFromDevtools(action.state);
                  return;
                }
                if (Object.keys(action.state).length !== 1) {
                  console.error(
                    `
                    [zustand devtools middleware] Unsupported __setState action format.
                    When using 'store' option in devtools(), the 'state' should have only one key, which is a value of 'store' that was passed in devtools(),
                    and value of this only key should be a state object. Example: { "type": "__setState", "state": { "abc123Store": { "foo": "bar" } } }
                    `
                  );
                }
                const stateFromDevtools = action.state[store];
                if (stateFromDevtools === void 0 || stateFromDevtools === null) {
                  return;
                }
                if (JSON.stringify(api.getState()) !== JSON.stringify(stateFromDevtools)) {
                  setStateFromDevtools(stateFromDevtools);
                }
                return;
              }
              if (!api.dispatchFromDevtools)
                return;
              if (typeof api.dispatch !== "function")
                return;
              api.dispatch(action);
            }
          );
        case "DISPATCH":
          switch (message.payload.type) {
            case "RESET":
              setStateFromDevtools(initialState2);
              if (store === void 0) {
                return connection == null ? void 0 : connection.init(api.getState());
              }
              return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));
            case "COMMIT":
              if (store === void 0) {
                connection == null ? void 0 : connection.init(api.getState());
                return;
              }
              return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));
            case "ROLLBACK":
              return parseJsonThen(message.state, (state) => {
                if (store === void 0) {
                  setStateFromDevtools(state);
                  connection == null ? void 0 : connection.init(api.getState());
                  return;
                }
                setStateFromDevtools(state[store]);
                connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));
              });
            case "JUMP_TO_STATE":
            case "JUMP_TO_ACTION":
              return parseJsonThen(message.state, (state) => {
                if (store === void 0) {
                  setStateFromDevtools(state);
                  return;
                }
                if (JSON.stringify(api.getState()) !== JSON.stringify(state[store])) {
                  setStateFromDevtools(state[store]);
                }
              });
            case "IMPORT_STATE": {
              const { nextLiftedState } = message.payload;
              const lastComputedState = (_a2 = nextLiftedState.computedStates.slice(-1)[0]) == null ? void 0 : _a2.state;
              if (!lastComputedState)
                return;
              if (store === void 0) {
                setStateFromDevtools(lastComputedState);
              } else {
                setStateFromDevtools(lastComputedState[store]);
              }
              connection == null ? void 0 : connection.send(
                null,
                // FIXME no-any
                nextLiftedState
              );
              return;
            }
            case "PAUSE_RECORDING":
              return isRecording = !isRecording;
          }
          return;
      }
    });
    return initialState2;
  };
  const devtools = devtoolsImpl;
  const parseJsonThen = (stringified, fn) => {
    let parsed;
    try {
      parsed = JSON.parse(stringified);
    } catch (e3) {
      console.error(
        "[zustand devtools middleware] Could not parse the received json",
        e3
      );
    }
    if (parsed !== void 0)
      fn(parsed);
  };
  const subscribeWithSelectorImpl = (fn) => (set2, get2, api) => {
    const origSubscribe = api.subscribe;
    api.subscribe = (selector, optListener, options) => {
      let listener = selector;
      if (optListener) {
        const equalityFn = (options == null ? void 0 : options.equalityFn) || Object.is;
        let currentSlice = selector(api.getState());
        listener = (state) => {
          const nextSlice = selector(state);
          if (!equalityFn(currentSlice, nextSlice)) {
            const previousSlice = currentSlice;
            optListener(currentSlice = nextSlice, previousSlice);
          }
        };
        if (options == null ? void 0 : options.fireImmediately) {
          optListener(currentSlice, currentSlice);
        }
      }
      return origSubscribe(listener);
    };
    const initialState2 = fn(set2, get2, api);
    return initialState2;
  };
  const subscribeWithSelector = subscribeWithSelectorImpl;
  function createJSONStorage(getStorage, options) {
    let storage;
    try {
      storage = getStorage();
    } catch (e3) {
      return;
    }
    const persistStorage = {
      getItem: (name) => {
        var _a2;
        const parse2 = (str2) => {
          if (str2 === null) {
            return null;
          }
          return JSON.parse(str2, options == null ? void 0 : options.reviver);
        };
        const str = (_a2 = storage.getItem(name)) != null ? _a2 : null;
        if (str instanceof Promise) {
          return str.then(parse2);
        }
        return parse2(str);
      },
      setItem: (name, newValue) => storage.setItem(name, JSON.stringify(newValue, options == null ? void 0 : options.replacer)),
      removeItem: (name) => storage.removeItem(name)
    };
    return persistStorage;
  }
  const toThenable = (fn) => (input) => {
    try {
      const result = fn(input);
      if (result instanceof Promise) {
        return result;
      }
      return {
        then(onFulfilled) {
          return toThenable(onFulfilled)(result);
        },
        catch(_onRejected) {
          return this;
        }
      };
    } catch (e3) {
      return {
        then(_onFulfilled) {
          return this;
        },
        catch(onRejected) {
          return toThenable(onRejected)(e3);
        }
      };
    }
  };
  const persistImpl = (config, baseOptions) => (set2, get2, api) => {
    let options = {
      storage: createJSONStorage(() => localStorage),
      partialize: (state) => state,
      version: 0,
      merge: (persistedState, currentState) => ({
        ...currentState,
        ...persistedState
      }),
      ...baseOptions
    };
    let hasHydrated = false;
    const hydrationListeners = /* @__PURE__ */ new Set();
    const finishHydrationListeners = /* @__PURE__ */ new Set();
    let storage = options.storage;
    if (!storage) {
      return config(
        (...args) => {
          console.warn(
            `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`
          );
          set2(...args);
        },
        get2,
        api
      );
    }
    const setItem = () => {
      const state = options.partialize({ ...get2() });
      return storage.setItem(options.name, {
        state,
        version: options.version
      });
    };
    const savedSetState = api.setState;
    api.setState = (state, replace) => {
      savedSetState(state, replace);
      void setItem();
    };
    const configResult = config(
      (...args) => {
        set2(...args);
        void setItem();
      },
      get2,
      api
    );
    api.getInitialState = () => configResult;
    let stateFromStorage;
    const hydrate = () => {
      var _a2, _b;
      if (!storage)
        return;
      hasHydrated = false;
      hydrationListeners.forEach((cb) => {
        var _a22;
        return cb((_a22 = get2()) != null ? _a22 : configResult);
      });
      const postRehydrationCallback = ((_b = options.onRehydrateStorage) == null ? void 0 : _b.call(options, (_a2 = get2()) != null ? _a2 : configResult)) || void 0;
      return toThenable(storage.getItem.bind(storage))(options.name).then((deserializedStorageValue) => {
        if (deserializedStorageValue) {
          if (typeof deserializedStorageValue.version === "number" && deserializedStorageValue.version !== options.version) {
            if (options.migrate) {
              const migration = options.migrate(
                deserializedStorageValue.state,
                deserializedStorageValue.version
              );
              if (migration instanceof Promise) {
                return migration.then((result) => [true, result]);
              }
              return [true, migration];
            }
            console.error(
              `State loaded from storage couldn't be migrated since no migrate function was provided`
            );
          } else {
            return [false, deserializedStorageValue.state];
          }
        }
        return [false, void 0];
      }).then((migrationResult) => {
        var _a22;
        const [migrated, migratedState] = migrationResult;
        stateFromStorage = options.merge(
          migratedState,
          (_a22 = get2()) != null ? _a22 : configResult
        );
        set2(stateFromStorage, true);
        if (migrated) {
          return setItem();
        }
      }).then(() => {
        postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);
        stateFromStorage = get2();
        hasHydrated = true;
        finishHydrationListeners.forEach((cb) => cb(stateFromStorage));
      }).catch((e3) => {
        postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e3);
      });
    };
    api.persist = {
      setOptions: (newOptions) => {
        options = {
          ...options,
          ...newOptions
        };
        if (newOptions.storage) {
          storage = newOptions.storage;
        }
      },
      clearStorage: () => {
        storage == null ? void 0 : storage.removeItem(options.name);
      },
      getOptions: () => options,
      rehydrate: () => hydrate(),
      hasHydrated: () => hasHydrated,
      onHydrate: (cb) => {
        hydrationListeners.add(cb);
        return () => {
          hydrationListeners.delete(cb);
        };
      },
      onFinishHydration: (cb) => {
        finishHydrationListeners.add(cb);
        return () => {
          finishHydrationListeners.delete(cb);
        };
      }
    };
    if (!options.skipHydration) {
      hydrate();
    }
    return stateFromStorage || configResult;
  };
  const persist = persistImpl;
  var withSelector = { exports: {} };
  var withSelector_production = {};
  var shim = { exports: {} };
  var useSyncExternalStoreShim_production = {};
  /**
   * @license React
   * use-sync-external-store-shim.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var hasRequiredUseSyncExternalStoreShim_production;
  function requireUseSyncExternalStoreShim_production() {
    if (hasRequiredUseSyncExternalStoreShim_production)
      return useSyncExternalStoreShim_production;
    hasRequiredUseSyncExternalStoreShim_production = 1;
    var React$1 = React;
    function is2(x, y) {
      return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
    }
    var objectIs = "function" === typeof Object.is ? Object.is : is2, useState = React$1.useState, useEffect = React$1.useEffect, useLayoutEffect = React$1.useLayoutEffect, useDebugValue = React$1.useDebugValue;
    function useSyncExternalStore$2(subscribe, getSnapshot) {
      var value = getSnapshot(), _useState = useState({ inst: { value, getSnapshot } }), inst = _useState[0].inst, forceUpdate = _useState[1];
      useLayoutEffect(
        function() {
          inst.value = value;
          inst.getSnapshot = getSnapshot;
          checkIfSnapshotChanged(inst) && forceUpdate({ inst });
        },
        [subscribe, value, getSnapshot]
      );
      useEffect(
        function() {
          checkIfSnapshotChanged(inst) && forceUpdate({ inst });
          return subscribe(function() {
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
          });
        },
        [subscribe]
      );
      useDebugValue(value);
      return value;
    }
    function checkIfSnapshotChanged(inst) {
      var latestGetSnapshot = inst.getSnapshot;
      inst = inst.value;
      try {
        var nextValue = latestGetSnapshot();
        return !objectIs(inst, nextValue);
      } catch (error2) {
        return true;
      }
    }
    function useSyncExternalStore$1(subscribe, getSnapshot) {
      return getSnapshot();
    }
    var shim2 = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? useSyncExternalStore$1 : useSyncExternalStore$2;
    useSyncExternalStoreShim_production.useSyncExternalStore = void 0 !== React$1.useSyncExternalStore ? React$1.useSyncExternalStore : shim2;
    return useSyncExternalStoreShim_production;
  }
  var useSyncExternalStoreShim_development = {};
  /**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var hasRequiredUseSyncExternalStoreShim_development;
  function requireUseSyncExternalStoreShim_development() {
    if (hasRequiredUseSyncExternalStoreShim_development)
      return useSyncExternalStoreShim_development;
    hasRequiredUseSyncExternalStoreShim_development = 1;
    "production" !== process.env.NODE_ENV && function() {
      function is2(x, y) {
        return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
      }
      function useSyncExternalStore$2(subscribe, getSnapshot) {
        didWarnOld18Alpha || void 0 === React$1.startTransition || (didWarnOld18Alpha = true, console.error(
          "You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."
        ));
        var value = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
          var cachedValue = getSnapshot();
          objectIs(value, cachedValue) || (console.error(
            "The result of getSnapshot should be cached to avoid an infinite loop"
          ), didWarnUncachedGetSnapshot = true);
        }
        cachedValue = useState({
          inst: { value, getSnapshot }
        });
        var inst = cachedValue[0].inst, forceUpdate = cachedValue[1];
        useLayoutEffect(
          function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
          },
          [subscribe, value, getSnapshot]
        );
        useEffect(
          function() {
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            return subscribe(function() {
              checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            });
          },
          [subscribe]
        );
        useDebugValue(value);
        return value;
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        inst = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(inst, nextValue);
        } catch (error2) {
          return true;
        }
      }
      function useSyncExternalStore$1(subscribe, getSnapshot) {
        return getSnapshot();
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var React$1 = React, objectIs = "function" === typeof Object.is ? Object.is : is2, useState = React$1.useState, useEffect = React$1.useEffect, useLayoutEffect = React$1.useLayoutEffect, useDebugValue = React$1.useDebugValue, didWarnOld18Alpha = false, didWarnUncachedGetSnapshot = false, shim2 = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? useSyncExternalStore$1 : useSyncExternalStore$2;
      useSyncExternalStoreShim_development.useSyncExternalStore = void 0 !== React$1.useSyncExternalStore ? React$1.useSyncExternalStore : shim2;
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    }();
    return useSyncExternalStoreShim_development;
  }
  var hasRequiredShim;
  function requireShim() {
    if (hasRequiredShim)
      return shim.exports;
    hasRequiredShim = 1;
    if (process.env.NODE_ENV === "production") {
      shim.exports = requireUseSyncExternalStoreShim_production();
    } else {
      shim.exports = requireUseSyncExternalStoreShim_development();
    }
    return shim.exports;
  }
  /**
   * @license React
   * use-sync-external-store-shim/with-selector.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var hasRequiredWithSelector_production;
  function requireWithSelector_production() {
    if (hasRequiredWithSelector_production)
      return withSelector_production;
    hasRequiredWithSelector_production = 1;
    var React$1 = React, shim2 = requireShim();
    function is2(x, y) {
      return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
    }
    var objectIs = "function" === typeof Object.is ? Object.is : is2, useSyncExternalStore = shim2.useSyncExternalStore, useRef = React$1.useRef, useEffect = React$1.useEffect, useMemo = React$1.useMemo, useDebugValue = React$1.useDebugValue;
    withSelector_production.useSyncExternalStoreWithSelector = function(subscribe, getSnapshot, getServerSnapshot, selector, isEqual2) {
      var instRef = useRef(null);
      if (null === instRef.current) {
        var inst = { hasValue: false, value: null };
        instRef.current = inst;
      } else
        inst = instRef.current;
      instRef = useMemo(
        function() {
          function memoizedSelector(nextSnapshot) {
            if (!hasMemo) {
              hasMemo = true;
              memoizedSnapshot = nextSnapshot;
              nextSnapshot = selector(nextSnapshot);
              if (void 0 !== isEqual2 && inst.hasValue) {
                var currentSelection = inst.value;
                if (isEqual2(currentSelection, nextSnapshot))
                  return memoizedSelection = currentSelection;
              }
              return memoizedSelection = nextSnapshot;
            }
            currentSelection = memoizedSelection;
            if (objectIs(memoizedSnapshot, nextSnapshot))
              return currentSelection;
            var nextSelection = selector(nextSnapshot);
            if (void 0 !== isEqual2 && isEqual2(currentSelection, nextSelection))
              return memoizedSnapshot = nextSnapshot, currentSelection;
            memoizedSnapshot = nextSnapshot;
            return memoizedSelection = nextSelection;
          }
          var hasMemo = false, memoizedSnapshot, memoizedSelection, maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;
          return [
            function() {
              return memoizedSelector(getSnapshot());
            },
            null === maybeGetServerSnapshot ? void 0 : function() {
              return memoizedSelector(maybeGetServerSnapshot());
            }
          ];
        },
        [getSnapshot, getServerSnapshot, selector, isEqual2]
      );
      var value = useSyncExternalStore(subscribe, instRef[0], instRef[1]);
      useEffect(
        function() {
          inst.hasValue = true;
          inst.value = value;
        },
        [value]
      );
      useDebugValue(value);
      return value;
    };
    return withSelector_production;
  }
  var withSelector_development = {};
  /**
   * @license React
   * use-sync-external-store-shim/with-selector.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var hasRequiredWithSelector_development;
  function requireWithSelector_development() {
    if (hasRequiredWithSelector_development)
      return withSelector_development;
    hasRequiredWithSelector_development = 1;
    "production" !== process.env.NODE_ENV && function() {
      function is2(x, y) {
        return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var React$1 = React, shim2 = requireShim(), objectIs = "function" === typeof Object.is ? Object.is : is2, useSyncExternalStore = shim2.useSyncExternalStore, useRef = React$1.useRef, useEffect = React$1.useEffect, useMemo = React$1.useMemo, useDebugValue = React$1.useDebugValue;
      withSelector_development.useSyncExternalStoreWithSelector = function(subscribe, getSnapshot, getServerSnapshot, selector, isEqual2) {
        var instRef = useRef(null);
        if (null === instRef.current) {
          var inst = { hasValue: false, value: null };
          instRef.current = inst;
        } else
          inst = instRef.current;
        instRef = useMemo(
          function() {
            function memoizedSelector(nextSnapshot) {
              if (!hasMemo) {
                hasMemo = true;
                memoizedSnapshot = nextSnapshot;
                nextSnapshot = selector(nextSnapshot);
                if (void 0 !== isEqual2 && inst.hasValue) {
                  var currentSelection = inst.value;
                  if (isEqual2(currentSelection, nextSnapshot))
                    return memoizedSelection = currentSelection;
                }
                return memoizedSelection = nextSnapshot;
              }
              currentSelection = memoizedSelection;
              if (objectIs(memoizedSnapshot, nextSnapshot))
                return currentSelection;
              var nextSelection = selector(nextSnapshot);
              if (void 0 !== isEqual2 && isEqual2(currentSelection, nextSelection))
                return memoizedSnapshot = nextSnapshot, currentSelection;
              memoizedSnapshot = nextSnapshot;
              return memoizedSelection = nextSelection;
            }
            var hasMemo = false, memoizedSnapshot, memoizedSelection, maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;
            return [
              function() {
                return memoizedSelector(getSnapshot());
              },
              null === maybeGetServerSnapshot ? void 0 : function() {
                return memoizedSelector(maybeGetServerSnapshot());
              }
            ];
          },
          [getSnapshot, getServerSnapshot, selector, isEqual2]
        );
        var value = useSyncExternalStore(subscribe, instRef[0], instRef[1]);
        useEffect(
          function() {
            inst.hasValue = true;
            inst.value = value;
          },
          [value]
        );
        useDebugValue(value);
        return value;
      };
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    }();
    return withSelector_development;
  }
  if (process.env.NODE_ENV === "production") {
    withSelector.exports = requireWithSelector_production();
  } else {
    withSelector.exports = requireWithSelector_development();
  }
  var withSelectorExports = withSelector.exports;
  const useSyncExternalStoreExports = /* @__PURE__ */ getDefaultExportFromCjs(withSelectorExports);
  const createStoreImpl = (createState) => {
    let state;
    const listeners = /* @__PURE__ */ new Set();
    const setState = (partial, replace) => {
      const nextState = typeof partial === "function" ? partial(state) : partial;
      if (!Object.is(nextState, state)) {
        const previousState = state;
        state = (replace != null ? replace : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
        listeners.forEach((listener) => listener(state, previousState));
      }
    };
    const getState = () => state;
    const getInitialState = () => initialState2;
    const subscribe = (listener) => {
      listeners.add(listener);
      return () => listeners.delete(listener);
    };
    const api = { setState, getState, getInitialState, subscribe };
    const initialState2 = state = createState(setState, getState, api);
    return api;
  };
  const createStore$1 = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;
  const { useSyncExternalStoreWithSelector } = useSyncExternalStoreExports;
  const identity$5 = (arg) => arg;
  function useStoreWithEqualityFn(api, selector = identity$5, equalityFn) {
    const slice = useSyncExternalStoreWithSelector(
      api.subscribe,
      api.getState,
      api.getInitialState,
      selector,
      equalityFn
    );
    React.useDebugValue(slice);
    return slice;
  }
  const createWithEqualityFnImpl = (createState, defaultEqualityFn) => {
    const api = createStore$1(createState);
    const useBoundStoreWithEqualityFn = (selector, equalityFn = defaultEqualityFn) => useStoreWithEqualityFn(api, selector, equalityFn);
    Object.assign(useBoundStoreWithEqualityFn, api);
    return useBoundStoreWithEqualityFn;
  };
  const createWithEqualityFn = (createState, defaultEqualityFn) => createState ? createWithEqualityFnImpl(createState, defaultEqualityFn) : createWithEqualityFnImpl;
  const Operation = {
    Remove: "remove",
    Replace: "replace",
    Add: "add"
  };
  const PROXY_DRAFT = Symbol.for("__MUTATIVE_PROXY_DRAFT__");
  const RAW_RETURN_SYMBOL = Symbol("__MUTATIVE_RAW_RETURN_SYMBOL__");
  const iteratorSymbol = Symbol.iterator;
  const dataTypes = {
    mutable: "mutable",
    immutable: "immutable"
  };
  const internal = {};
  function has$1(target, key) {
    return target instanceof Map ? target.has(key) : Object.prototype.hasOwnProperty.call(target, key);
  }
  function getDescriptor(target, key) {
    if (key in target) {
      let prototype = Reflect.getPrototypeOf(target);
      while (prototype) {
        const descriptor = Reflect.getOwnPropertyDescriptor(prototype, key);
        if (descriptor)
          return descriptor;
        prototype = Reflect.getPrototypeOf(prototype);
      }
    }
    return;
  }
  function isBaseSetInstance(obj) {
    return Object.getPrototypeOf(obj) === Set.prototype;
  }
  function isBaseMapInstance(obj) {
    return Object.getPrototypeOf(obj) === Map.prototype;
  }
  function latest(proxyDraft) {
    var _a2;
    return (_a2 = proxyDraft.copy) !== null && _a2 !== void 0 ? _a2 : proxyDraft.original;
  }
  function isDraft(target) {
    return !!getProxyDraft(target);
  }
  function getProxyDraft(value) {
    if (typeof value !== "object")
      return null;
    return value === null || value === void 0 ? void 0 : value[PROXY_DRAFT];
  }
  function getValue$2(value) {
    var _a2;
    const proxyDraft = getProxyDraft(value);
    return proxyDraft ? (_a2 = proxyDraft.copy) !== null && _a2 !== void 0 ? _a2 : proxyDraft.original : value;
  }
  function isDraftable(value, options) {
    if (!value || typeof value !== "object")
      return false;
    let markResult;
    return Object.getPrototypeOf(value) === Object.prototype || Array.isArray(value) || value instanceof Map || value instanceof Set || !!(options === null || options === void 0 ? void 0 : options.mark) && ((markResult = options.mark(value, dataTypes)) === dataTypes.immutable || typeof markResult === "function");
  }
  function getPath(target, path2 = []) {
    if (Object.hasOwnProperty.call(target, "key")) {
      const parentCopy = target.parent.copy;
      const proxyDraft = getProxyDraft(get$4(parentCopy, target.key));
      if (proxyDraft !== null && (proxyDraft === null || proxyDraft === void 0 ? void 0 : proxyDraft.original) !== target.original) {
        return null;
      }
      const isSet2 = target.parent.type === 3;
      const key = isSet2 ? Array.from(target.parent.setMap.keys()).indexOf(target.key) : target.key;
      if (!(isSet2 && parentCopy.size > key || has$1(parentCopy, key)))
        return null;
      path2.push(key);
    }
    if (target.parent) {
      return getPath(target.parent, path2);
    }
    path2.reverse();
    try {
      resolvePath(target.copy, path2);
    } catch (e3) {
      return null;
    }
    return path2;
  }
  function getType(target) {
    if (Array.isArray(target))
      return 1;
    if (target instanceof Map)
      return 2;
    if (target instanceof Set)
      return 3;
    return 0;
  }
  function get$4(target, key) {
    return getType(target) === 2 ? target.get(key) : target[key];
  }
  function set$2(target, key, value) {
    const type = getType(target);
    if (type === 2) {
      target.set(key, value);
    } else {
      target[key] = value;
    }
  }
  function peek(target, key) {
    const state = getProxyDraft(target);
    const source2 = state ? latest(state) : target;
    return source2[key];
  }
  function isEqual$1(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }
  function revokeProxy(proxyDraft) {
    if (!proxyDraft)
      return;
    while (proxyDraft.finalities.revoke.length > 0) {
      const revoke = proxyDraft.finalities.revoke.pop();
      revoke();
    }
  }
  function escapePath(path2, pathAsArray) {
    return pathAsArray ? path2 : [""].concat(path2).map((_item) => {
      const item = `${_item}`;
      if (item.indexOf("/") === -1 && item.indexOf("~") === -1)
        return item;
      return item.replace(/~/g, "~0").replace(/\//g, "~1");
    }).join("/");
  }
  function resolvePath(base, path2) {
    for (let index = 0; index < path2.length - 1; index += 1) {
      const key = path2[index];
      base = get$4(getType(base) === 3 ? Array.from(base) : base, key);
      if (typeof base !== "object") {
        throw new Error(`Cannot resolve patch at '${path2.join("/")}'.`);
      }
    }
    return base;
  }
  function strictCopy(target) {
    const copy2 = Object.create(Object.getPrototypeOf(target));
    Reflect.ownKeys(target).forEach((key) => {
      let desc = Reflect.getOwnPropertyDescriptor(target, key);
      if (desc.enumerable && desc.configurable && desc.writable) {
        copy2[key] = target[key];
        return;
      }
      if (!desc.writable) {
        desc.writable = true;
        desc.configurable = true;
      }
      if (desc.get || desc.set)
        desc = {
          configurable: true,
          writable: true,
          enumerable: desc.enumerable,
          value: target[key]
        };
      Reflect.defineProperty(copy2, key, desc);
    });
    return copy2;
  }
  const propIsEnum = Object.prototype.propertyIsEnumerable;
  function shallowCopy(original, options) {
    let markResult;
    if (Array.isArray(original)) {
      return Array.prototype.concat.call(original);
    } else if (original instanceof Set) {
      if (!isBaseSetInstance(original)) {
        const SubClass = Object.getPrototypeOf(original).constructor;
        return new SubClass(original.values());
      }
      return Set.prototype.difference ? Set.prototype.difference.call(original, /* @__PURE__ */ new Set()) : new Set(original.values());
    } else if (original instanceof Map) {
      if (!isBaseMapInstance(original)) {
        const SubClass = Object.getPrototypeOf(original).constructor;
        return new SubClass(original);
      }
      return new Map(original);
    } else if ((options === null || options === void 0 ? void 0 : options.mark) && (markResult = options.mark(original, dataTypes), markResult !== void 0) && markResult !== dataTypes.mutable) {
      if (markResult === dataTypes.immutable) {
        return strictCopy(original);
      } else if (typeof markResult === "function") {
        if (options.enablePatches || options.enableAutoFreeze) {
          throw new Error(`You can't use mark and patches or auto freeze together.`);
        }
        return markResult();
      }
      throw new Error(`Unsupported mark result: ${markResult}`);
    } else if (typeof original === "object" && Object.getPrototypeOf(original) === Object.prototype) {
      const copy2 = {};
      Object.keys(original).forEach((key) => {
        copy2[key] = original[key];
      });
      Object.getOwnPropertySymbols(original).forEach((key) => {
        if (propIsEnum.call(original, key)) {
          copy2[key] = original[key];
        }
      });
      return copy2;
    } else {
      throw new Error(`Please check mark() to ensure that it is a stable marker draftable function.`);
    }
  }
  function ensureShallowCopy(target) {
    if (target.copy)
      return;
    target.copy = shallowCopy(target.original, target.options);
  }
  function deepClone(target) {
    if (!isDraftable(target))
      return getValue$2(target);
    if (Array.isArray(target))
      return target.map(deepClone);
    if (target instanceof Map) {
      const iterable = Array.from(target.entries()).map(([k, v]) => [
        k,
        deepClone(v)
      ]);
      if (!isBaseMapInstance(target)) {
        const SubClass = Object.getPrototypeOf(target).constructor;
        return new SubClass(iterable);
      }
      return new Map(iterable);
    }
    if (target instanceof Set) {
      const iterable = Array.from(target).map(deepClone);
      if (!isBaseSetInstance(target)) {
        const SubClass = Object.getPrototypeOf(target).constructor;
        return new SubClass(iterable);
      }
      return new Set(iterable);
    }
    const copy2 = Object.create(Object.getPrototypeOf(target));
    for (const key in target)
      copy2[key] = deepClone(target[key]);
    return copy2;
  }
  function cloneIfNeeded(target) {
    return isDraft(target) ? deepClone(target) : target;
  }
  function markChanged(proxyDraft) {
    var _a2;
    proxyDraft.assignedMap = (_a2 = proxyDraft.assignedMap) !== null && _a2 !== void 0 ? _a2 : /* @__PURE__ */ new Map();
    if (!proxyDraft.operated) {
      proxyDraft.operated = true;
      if (proxyDraft.parent) {
        markChanged(proxyDraft.parent);
      }
    }
  }
  function throwFrozenError() {
    throw new Error("Cannot modify frozen object");
  }
  function deepFreeze$1(target, subKey, updatedValues, stack, keys2) {
    {
      updatedValues = updatedValues !== null && updatedValues !== void 0 ? updatedValues : /* @__PURE__ */ new WeakMap();
      stack = stack !== null && stack !== void 0 ? stack : [];
      keys2 = keys2 !== null && keys2 !== void 0 ? keys2 : [];
      const value = updatedValues.has(target) ? updatedValues.get(target) : target;
      if (stack.length > 0) {
        const index = stack.indexOf(value);
        if (value && typeof value === "object" && index !== -1) {
          if (stack[0] === value) {
            throw new Error(`Forbids circular reference`);
          }
          throw new Error(`Forbids circular reference: ~/${keys2.slice(0, index).map((key, index2) => {
            if (typeof key === "symbol")
              return `[${key.toString()}]`;
            const parent2 = stack[index2];
            if (typeof key === "object" && (parent2 instanceof Map || parent2 instanceof Set))
              return Array.from(parent2.keys()).indexOf(key);
            return key;
          }).join("/")}`);
        }
        stack.push(value);
        keys2.push(subKey);
      } else {
        stack.push(value);
      }
    }
    if (Object.isFrozen(target) || isDraft(target)) {
      {
        stack.pop();
        keys2.pop();
      }
      return;
    }
    const type = getType(target);
    switch (type) {
      case 2:
        for (const [key, value] of target) {
          deepFreeze$1(key, key, updatedValues, stack, keys2);
          deepFreeze$1(value, key, updatedValues, stack, keys2);
        }
        target.set = target.clear = target.delete = throwFrozenError;
        break;
      case 3:
        for (const value of target) {
          deepFreeze$1(value, value, updatedValues, stack, keys2);
        }
        target.add = target.clear = target.delete = throwFrozenError;
        break;
      case 1:
        Object.freeze(target);
        let index = 0;
        for (const value of target) {
          deepFreeze$1(value, index, updatedValues, stack, keys2);
          index += 1;
        }
        break;
      default:
        Object.freeze(target);
        Object.keys(target).forEach((name) => {
          const value = target[name];
          deepFreeze$1(value, name, updatedValues, stack, keys2);
        });
    }
    {
      stack.pop();
      keys2.pop();
    }
  }
  function forEach(target, iter) {
    const type = getType(target);
    if (type === 0) {
      Reflect.ownKeys(target).forEach((key) => {
        iter(key, target[key], target);
      });
    } else if (type === 1) {
      let index = 0;
      for (const entry of target) {
        iter(index, entry, target);
        index += 1;
      }
    } else {
      target.forEach((entry, index) => iter(index, entry, target));
    }
  }
  function handleValue(target, handledSet, options) {
    if (isDraft(target) || !isDraftable(target, options) || handledSet.has(target) || Object.isFrozen(target))
      return;
    const isSet2 = target instanceof Set;
    const setMap = isSet2 ? /* @__PURE__ */ new Map() : void 0;
    handledSet.add(target);
    forEach(target, (key, value) => {
      var _a2;
      if (isDraft(value)) {
        const proxyDraft = getProxyDraft(value);
        ensureShallowCopy(proxyDraft);
        const updatedValue = ((_a2 = proxyDraft.assignedMap) === null || _a2 === void 0 ? void 0 : _a2.size) || proxyDraft.operated ? proxyDraft.copy : proxyDraft.original;
        set$2(isSet2 ? setMap : target, key, updatedValue);
      } else {
        handleValue(value, handledSet, options);
      }
    });
    if (setMap) {
      const set2 = target;
      const values = Array.from(set2);
      set2.clear();
      values.forEach((value) => {
        set2.add(setMap.has(value) ? setMap.get(value) : value);
      });
    }
  }
  function finalizeAssigned(proxyDraft, key) {
    const copy2 = proxyDraft.type === 3 ? proxyDraft.setMap : proxyDraft.copy;
    if (proxyDraft.finalities.revoke.length > 1 && proxyDraft.assignedMap.get(key) && copy2) {
      handleValue(get$4(copy2, key), proxyDraft.finalities.handledSet, proxyDraft.options);
    }
  }
  function finalizeSetValue(target) {
    if (target.type === 3 && target.copy) {
      target.copy.clear();
      target.setMap.forEach((value) => {
        target.copy.add(getValue$2(value));
      });
    }
  }
  function finalizePatches(target, generatePatches2, patches, inversePatches) {
    const shouldFinalize = target.operated && target.assignedMap && target.assignedMap.size > 0 && !target.finalized;
    if (shouldFinalize) {
      if (patches && inversePatches) {
        const basePath = getPath(target);
        if (basePath) {
          generatePatches2(target, basePath, patches, inversePatches);
        }
      }
      target.finalized = true;
    }
  }
  function markFinalization(target, key, value, generatePatches2) {
    const proxyDraft = getProxyDraft(value);
    if (proxyDraft) {
      if (!proxyDraft.callbacks) {
        proxyDraft.callbacks = [];
      }
      proxyDraft.callbacks.push((patches, inversePatches) => {
        var _a2;
        const copy2 = target.type === 3 ? target.setMap : target.copy;
        if (isEqual$1(get$4(copy2, key), value)) {
          let updatedValue = proxyDraft.original;
          if (proxyDraft.copy) {
            updatedValue = proxyDraft.copy;
          }
          finalizeSetValue(target);
          finalizePatches(target, generatePatches2, patches, inversePatches);
          if (target.options.enableAutoFreeze) {
            target.options.updatedValues = (_a2 = target.options.updatedValues) !== null && _a2 !== void 0 ? _a2 : /* @__PURE__ */ new WeakMap();
            target.options.updatedValues.set(updatedValue, proxyDraft.original);
          }
          set$2(copy2, key, updatedValue);
        }
      });
      if (target.options.enableAutoFreeze) {
        if (proxyDraft.finalities !== target.finalities) {
          target.options.enableAutoFreeze = false;
        }
      }
    }
    if (isDraftable(value, target.options)) {
      target.finalities.draft.push(() => {
        const copy2 = target.type === 3 ? target.setMap : target.copy;
        if (isEqual$1(get$4(copy2, key), value)) {
          finalizeAssigned(target, key);
        }
      });
    }
  }
  function generateArrayPatches(proxyState, basePath, patches, inversePatches, pathAsArray) {
    let { original, assignedMap, options } = proxyState;
    let copy2 = proxyState.copy;
    if (copy2.length < original.length) {
      [original, copy2] = [copy2, original];
      [patches, inversePatches] = [inversePatches, patches];
    }
    for (let index = 0; index < original.length; index += 1) {
      if (assignedMap.get(index.toString()) && copy2[index] !== original[index]) {
        const _path = basePath.concat([index]);
        const path2 = escapePath(_path, pathAsArray);
        patches.push({
          op: Operation.Replace,
          path: path2,
          // If it is a draft, it needs to be deep cloned, and it may also be non-draft.
          value: cloneIfNeeded(copy2[index])
        });
        inversePatches.push({
          op: Operation.Replace,
          path: path2,
          // If it is a draft, it needs to be deep cloned, and it may also be non-draft.
          value: cloneIfNeeded(original[index])
        });
      }
    }
    for (let index = original.length; index < copy2.length; index += 1) {
      const _path = basePath.concat([index]);
      const path2 = escapePath(_path, pathAsArray);
      patches.push({
        op: Operation.Add,
        path: path2,
        // If it is a draft, it needs to be deep cloned, and it may also be non-draft.
        value: cloneIfNeeded(copy2[index])
      });
    }
    if (original.length < copy2.length) {
      const { arrayLengthAssignment = true } = options.enablePatches;
      if (arrayLengthAssignment) {
        const _path = basePath.concat(["length"]);
        const path2 = escapePath(_path, pathAsArray);
        inversePatches.push({
          op: Operation.Replace,
          path: path2,
          value: original.length
        });
      } else {
        for (let index = copy2.length; original.length < index; index -= 1) {
          const _path = basePath.concat([index - 1]);
          const path2 = escapePath(_path, pathAsArray);
          inversePatches.push({
            op: Operation.Remove,
            path: path2
          });
        }
      }
    }
  }
  function generatePatchesFromAssigned({ original, copy: copy2, assignedMap }, basePath, patches, inversePatches, pathAsArray) {
    assignedMap.forEach((assignedValue, key) => {
      const originalValue = get$4(original, key);
      const value = cloneIfNeeded(get$4(copy2, key));
      const op = !assignedValue ? Operation.Remove : has$1(original, key) ? Operation.Replace : Operation.Add;
      if (isEqual$1(originalValue, value) && op === Operation.Replace)
        return;
      const _path = basePath.concat(key);
      const path2 = escapePath(_path, pathAsArray);
      patches.push(op === Operation.Remove ? { op, path: path2 } : { op, path: path2, value });
      inversePatches.push(op === Operation.Add ? { op: Operation.Remove, path: path2 } : op === Operation.Remove ? { op: Operation.Add, path: path2, value: originalValue } : { op: Operation.Replace, path: path2, value: originalValue });
    });
  }
  function generateSetPatches({ original, copy: copy2 }, basePath, patches, inversePatches, pathAsArray) {
    let index = 0;
    original.forEach((value) => {
      if (!copy2.has(value)) {
        const _path = basePath.concat([index]);
        const path2 = escapePath(_path, pathAsArray);
        patches.push({
          op: Operation.Remove,
          path: path2,
          value
        });
        inversePatches.unshift({
          op: Operation.Add,
          path: path2,
          value
        });
      }
      index += 1;
    });
    index = 0;
    copy2.forEach((value) => {
      if (!original.has(value)) {
        const _path = basePath.concat([index]);
        const path2 = escapePath(_path, pathAsArray);
        patches.push({
          op: Operation.Add,
          path: path2,
          value
        });
        inversePatches.unshift({
          op: Operation.Remove,
          path: path2,
          value
        });
      }
      index += 1;
    });
  }
  function generatePatches(proxyState, basePath, patches, inversePatches) {
    const { pathAsArray = true } = proxyState.options.enablePatches;
    switch (proxyState.type) {
      case 0:
      case 2:
        return generatePatchesFromAssigned(proxyState, basePath, patches, inversePatches, pathAsArray);
      case 1:
        return generateArrayPatches(proxyState, basePath, patches, inversePatches, pathAsArray);
      case 3:
        return generateSetPatches(proxyState, basePath, patches, inversePatches, pathAsArray);
    }
  }
  let readable = false;
  const checkReadable = (value, options, ignoreCheckDraftable = false) => {
    if (typeof value === "object" && value !== null && (!isDraftable(value, options) || ignoreCheckDraftable) && !readable) {
      throw new Error(`Strict mode: Mutable data cannot be accessed directly, please use 'unsafe(callback)' wrap.`);
    }
  };
  const mapHandler = {
    get size() {
      const current2 = latest(getProxyDraft(this));
      return current2.size;
    },
    has(key) {
      return latest(getProxyDraft(this)).has(key);
    },
    set(key, value) {
      const target = getProxyDraft(this);
      const source2 = latest(target);
      if (!source2.has(key) || !isEqual$1(source2.get(key), value)) {
        ensureShallowCopy(target);
        markChanged(target);
        target.assignedMap.set(key, true);
        target.copy.set(key, value);
        markFinalization(target, key, value, generatePatches);
      }
      return this;
    },
    delete(key) {
      if (!this.has(key)) {
        return false;
      }
      const target = getProxyDraft(this);
      ensureShallowCopy(target);
      markChanged(target);
      if (target.original.has(key)) {
        target.assignedMap.set(key, false);
      } else {
        target.assignedMap.delete(key);
      }
      target.copy.delete(key);
      return true;
    },
    clear() {
      const target = getProxyDraft(this);
      if (!this.size)
        return;
      ensureShallowCopy(target);
      markChanged(target);
      target.assignedMap = /* @__PURE__ */ new Map();
      for (const [key] of target.original) {
        target.assignedMap.set(key, false);
      }
      target.copy.clear();
    },
    forEach(callback, thisArg) {
      const target = getProxyDraft(this);
      latest(target).forEach((_value, _key) => {
        callback.call(thisArg, this.get(_key), _key, this);
      });
    },
    get(key) {
      var _a2, _b;
      const target = getProxyDraft(this);
      const value = latest(target).get(key);
      const mutable = ((_b = (_a2 = target.options).mark) === null || _b === void 0 ? void 0 : _b.call(_a2, value, dataTypes)) === dataTypes.mutable;
      if (target.options.strict) {
        checkReadable(value, target.options, mutable);
      }
      if (mutable) {
        return value;
      }
      if (target.finalized || !isDraftable(value, target.options)) {
        return value;
      }
      if (value !== target.original.get(key)) {
        return value;
      }
      const draft = internal.createDraft({
        original: value,
        parentDraft: target,
        key,
        finalities: target.finalities,
        options: target.options
      });
      ensureShallowCopy(target);
      target.copy.set(key, draft);
      return draft;
    },
    keys() {
      return latest(getProxyDraft(this)).keys();
    },
    values() {
      const iterator = this.keys();
      return {
        [iteratorSymbol]: () => this.values(),
        next: () => {
          const result = iterator.next();
          if (result.done)
            return result;
          const value = this.get(result.value);
          return {
            done: false,
            value
          };
        }
      };
    },
    entries() {
      const iterator = this.keys();
      return {
        [iteratorSymbol]: () => this.entries(),
        next: () => {
          const result = iterator.next();
          if (result.done)
            return result;
          const value = this.get(result.value);
          return {
            done: false,
            value: [result.value, value]
          };
        }
      };
    },
    [iteratorSymbol]() {
      return this.entries();
    }
  };
  const mapHandlerKeys = Reflect.ownKeys(mapHandler);
  const getNextIterator = (target, iterator, { isValuesIterator }) => () => {
    var _a2, _b;
    const result = iterator.next();
    if (result.done)
      return result;
    const key = result.value;
    let value = target.setMap.get(key);
    const currentDraft = getProxyDraft(value);
    const mutable = ((_b = (_a2 = target.options).mark) === null || _b === void 0 ? void 0 : _b.call(_a2, value, dataTypes)) === dataTypes.mutable;
    if (target.options.strict) {
      checkReadable(key, target.options, mutable);
    }
    if (!mutable && !currentDraft && isDraftable(key, target.options) && !target.finalized && target.original.has(key)) {
      const proxy = internal.createDraft({
        original: key,
        parentDraft: target,
        key,
        finalities: target.finalities,
        options: target.options
      });
      target.setMap.set(key, proxy);
      value = proxy;
    } else if (currentDraft) {
      value = currentDraft.proxy;
    }
    return {
      done: false,
      value: isValuesIterator ? value : [value, value]
    };
  };
  const setHandler = {
    get size() {
      const target = getProxyDraft(this);
      return target.setMap.size;
    },
    has(value) {
      const target = getProxyDraft(this);
      if (target.setMap.has(value))
        return true;
      ensureShallowCopy(target);
      const valueProxyDraft = getProxyDraft(value);
      if (valueProxyDraft && target.setMap.has(valueProxyDraft.original))
        return true;
      return false;
    },
    add(value) {
      const target = getProxyDraft(this);
      if (!this.has(value)) {
        ensureShallowCopy(target);
        markChanged(target);
        target.assignedMap.set(value, true);
        target.setMap.set(value, value);
        markFinalization(target, value, value, generatePatches);
      }
      return this;
    },
    delete(value) {
      if (!this.has(value)) {
        return false;
      }
      const target = getProxyDraft(this);
      ensureShallowCopy(target);
      markChanged(target);
      const valueProxyDraft = getProxyDraft(value);
      if (valueProxyDraft && target.setMap.has(valueProxyDraft.original)) {
        target.assignedMap.set(valueProxyDraft.original, false);
        return target.setMap.delete(valueProxyDraft.original);
      }
      if (!valueProxyDraft && target.setMap.has(value)) {
        target.assignedMap.set(value, false);
      } else {
        target.assignedMap.delete(value);
      }
      return target.setMap.delete(value);
    },
    clear() {
      if (!this.size)
        return;
      const target = getProxyDraft(this);
      ensureShallowCopy(target);
      markChanged(target);
      for (const value of target.original) {
        target.assignedMap.set(value, false);
      }
      target.setMap.clear();
    },
    values() {
      const target = getProxyDraft(this);
      ensureShallowCopy(target);
      const iterator = target.setMap.keys();
      return {
        [Symbol.iterator]: () => this.values(),
        next: getNextIterator(target, iterator, { isValuesIterator: true })
      };
    },
    entries() {
      const target = getProxyDraft(this);
      ensureShallowCopy(target);
      const iterator = target.setMap.keys();
      return {
        [Symbol.iterator]: () => this.entries(),
        next: getNextIterator(target, iterator, {
          isValuesIterator: false
        })
      };
    },
    keys() {
      return this.values();
    },
    [iteratorSymbol]() {
      return this.values();
    },
    forEach(callback, thisArg) {
      const iterator = this.values();
      let result = iterator.next();
      while (!result.done) {
        callback.call(thisArg, result.value, result.value, this);
        result = iterator.next();
      }
    }
  };
  if (Set.prototype.difference) {
    Object.assign(setHandler, {
      intersection(other) {
        return Set.prototype.intersection.call(new Set(this.values()), other);
      },
      union(other) {
        return Set.prototype.union.call(new Set(this.values()), other);
      },
      difference(other) {
        return Set.prototype.difference.call(new Set(this.values()), other);
      },
      symmetricDifference(other) {
        return Set.prototype.symmetricDifference.call(new Set(this.values()), other);
      },
      isSubsetOf(other) {
        return Set.prototype.isSubsetOf.call(new Set(this.values()), other);
      },
      isSupersetOf(other) {
        return Set.prototype.isSupersetOf.call(new Set(this.values()), other);
      },
      isDisjointFrom(other) {
        return Set.prototype.isDisjointFrom.call(new Set(this.values()), other);
      }
    });
  }
  const setHandlerKeys = Reflect.ownKeys(setHandler);
  const draftsCache = /* @__PURE__ */ new WeakSet();
  const proxyHandler = {
    get(target, key, receiver) {
      var _a2, _b;
      const copy2 = (_a2 = target.copy) === null || _a2 === void 0 ? void 0 : _a2[key];
      if (copy2 && draftsCache.has(copy2)) {
        return copy2;
      }
      if (key === PROXY_DRAFT)
        return target;
      let markResult;
      if (target.options.mark) {
        const value2 = key === "size" && (target.original instanceof Map || target.original instanceof Set) ? Reflect.get(target.original, key) : Reflect.get(target.original, key, receiver);
        markResult = target.options.mark(value2, dataTypes);
        if (markResult === dataTypes.mutable) {
          if (target.options.strict) {
            checkReadable(value2, target.options, true);
          }
          return value2;
        }
      }
      const source2 = latest(target);
      if (source2 instanceof Map && mapHandlerKeys.includes(key)) {
        if (key === "size") {
          return Object.getOwnPropertyDescriptor(mapHandler, "size").get.call(target.proxy);
        }
        const handle = mapHandler[key];
        if (handle) {
          return handle.bind(target.proxy);
        }
      }
      if (source2 instanceof Set && setHandlerKeys.includes(key)) {
        if (key === "size") {
          return Object.getOwnPropertyDescriptor(setHandler, "size").get.call(target.proxy);
        }
        const handle = setHandler[key];
        if (handle) {
          return handle.bind(target.proxy);
        }
      }
      if (!has$1(source2, key)) {
        const desc = getDescriptor(source2, key);
        return desc ? `value` in desc ? desc.value : (
          // !case: support for getter
          (_b = desc.get) === null || _b === void 0 ? void 0 : _b.call(target.proxy)
        ) : void 0;
      }
      const value = source2[key];
      if (target.options.strict) {
        checkReadable(value, target.options);
      }
      if (target.finalized || !isDraftable(value, target.options)) {
        return value;
      }
      if (value === peek(target.original, key)) {
        ensureShallowCopy(target);
        target.copy[key] = createDraft({
          original: target.original[key],
          parentDraft: target,
          key: target.type === 1 ? Number(key) : key,
          finalities: target.finalities,
          options: target.options
        });
        if (typeof markResult === "function") {
          const subProxyDraft = getProxyDraft(target.copy[key]);
          ensureShallowCopy(subProxyDraft);
          markChanged(subProxyDraft);
          return subProxyDraft.copy;
        }
        return target.copy[key];
      }
      return value;
    },
    set(target, key, value) {
      var _a2;
      if (target.type === 3 || target.type === 2) {
        throw new Error(`Map/Set draft does not support any property assignment.`);
      }
      let _key;
      if (target.type === 1 && key !== "length" && !(Number.isInteger(_key = Number(key)) && _key >= 0 && (key === 0 || _key === 0 || String(_key) === String(key)))) {
        throw new Error(`Only supports setting array indices and the 'length' property.`);
      }
      const desc = getDescriptor(latest(target), key);
      if (desc === null || desc === void 0 ? void 0 : desc.set) {
        desc.set.call(target.proxy, value);
        return true;
      }
      const current2 = peek(latest(target), key);
      const currentProxyDraft = getProxyDraft(current2);
      if (currentProxyDraft && isEqual$1(currentProxyDraft.original, value)) {
        target.copy[key] = value;
        target.assignedMap = (_a2 = target.assignedMap) !== null && _a2 !== void 0 ? _a2 : /* @__PURE__ */ new Map();
        target.assignedMap.set(key, false);
        return true;
      }
      if (isEqual$1(value, current2) && (value !== void 0 || has$1(target.original, key)))
        return true;
      ensureShallowCopy(target);
      markChanged(target);
      if (has$1(target.original, key) && isEqual$1(value, target.original[key])) {
        target.assignedMap.delete(key);
      } else {
        target.assignedMap.set(key, true);
      }
      target.copy[key] = value;
      markFinalization(target, key, value, generatePatches);
      return true;
    },
    has(target, key) {
      return key in latest(target);
    },
    ownKeys(target) {
      return Reflect.ownKeys(latest(target));
    },
    getOwnPropertyDescriptor(target, key) {
      const source2 = latest(target);
      const descriptor = Reflect.getOwnPropertyDescriptor(source2, key);
      if (!descriptor)
        return descriptor;
      return {
        writable: true,
        configurable: target.type !== 1 || key !== "length",
        enumerable: descriptor.enumerable,
        value: source2[key]
      };
    },
    getPrototypeOf(target) {
      return Reflect.getPrototypeOf(target.original);
    },
    setPrototypeOf() {
      throw new Error(`Cannot call 'setPrototypeOf()' on drafts`);
    },
    defineProperty() {
      throw new Error(`Cannot call 'defineProperty()' on drafts`);
    },
    deleteProperty(target, key) {
      var _a2;
      if (target.type === 1) {
        return proxyHandler.set.call(this, target, key, void 0, target.proxy);
      }
      if (peek(target.original, key) !== void 0 || key in target.original) {
        ensureShallowCopy(target);
        markChanged(target);
        target.assignedMap.set(key, false);
      } else {
        target.assignedMap = (_a2 = target.assignedMap) !== null && _a2 !== void 0 ? _a2 : /* @__PURE__ */ new Map();
        target.assignedMap.delete(key);
      }
      if (target.copy)
        delete target.copy[key];
      return true;
    }
  };
  function createDraft(createDraftOptions) {
    const { original, parentDraft, key, finalities, options } = createDraftOptions;
    const type = getType(original);
    const proxyDraft = {
      type,
      finalized: false,
      parent: parentDraft,
      original,
      copy: null,
      proxy: null,
      finalities,
      options,
      // Mapping of draft Set items to their corresponding draft values.
      setMap: type === 3 ? new Map(original.entries()) : void 0
    };
    if (key || "key" in createDraftOptions) {
      proxyDraft.key = key;
    }
    const { proxy, revoke } = Proxy.revocable(type === 1 ? Object.assign([], proxyDraft) : proxyDraft, proxyHandler);
    finalities.revoke.push(revoke);
    draftsCache.add(proxy);
    proxyDraft.proxy = proxy;
    if (parentDraft) {
      const target = parentDraft;
      target.finalities.draft.push((patches, inversePatches) => {
        var _a2, _b;
        const oldProxyDraft = getProxyDraft(proxy);
        let copy2 = target.type === 3 ? target.setMap : target.copy;
        const draft = get$4(copy2, key);
        const proxyDraft2 = getProxyDraft(draft);
        if (proxyDraft2) {
          let updatedValue = proxyDraft2.original;
          if (proxyDraft2.operated) {
            updatedValue = getValue$2(draft);
          }
          finalizeSetValue(proxyDraft2);
          finalizePatches(proxyDraft2, generatePatches, patches, inversePatches);
          if (target.options.enableAutoFreeze) {
            target.options.updatedValues = (_a2 = target.options.updatedValues) !== null && _a2 !== void 0 ? _a2 : /* @__PURE__ */ new WeakMap();
            target.options.updatedValues.set(updatedValue, proxyDraft2.original);
          }
          set$2(copy2, key, updatedValue);
        }
        (_b = oldProxyDraft.callbacks) === null || _b === void 0 ? void 0 : _b.forEach((callback) => {
          callback(patches, inversePatches);
        });
      });
    } else {
      const target = getProxyDraft(proxy);
      target.finalities.draft.push((patches, inversePatches) => {
        finalizeSetValue(target);
        finalizePatches(target, generatePatches, patches, inversePatches);
      });
    }
    return proxy;
  }
  internal.createDraft = createDraft;
  function finalizeDraft(result, returnedValue, patches, inversePatches, enableAutoFreeze) {
    var _a2;
    const proxyDraft = getProxyDraft(result);
    const original = (_a2 = proxyDraft === null || proxyDraft === void 0 ? void 0 : proxyDraft.original) !== null && _a2 !== void 0 ? _a2 : result;
    const hasReturnedValue = !!returnedValue.length;
    if (proxyDraft === null || proxyDraft === void 0 ? void 0 : proxyDraft.operated) {
      while (proxyDraft.finalities.draft.length > 0) {
        const finalize2 = proxyDraft.finalities.draft.pop();
        finalize2(patches, inversePatches);
      }
    }
    const state = hasReturnedValue ? returnedValue[0] : proxyDraft ? proxyDraft.operated ? proxyDraft.copy : proxyDraft.original : result;
    if (proxyDraft)
      revokeProxy(proxyDraft);
    if (enableAutoFreeze) {
      deepFreeze$1(state, state, proxyDraft === null || proxyDraft === void 0 ? void 0 : proxyDraft.options.updatedValues);
    }
    return [
      state,
      patches && hasReturnedValue ? [{ op: Operation.Replace, path: [], value: returnedValue[0] }] : patches,
      inversePatches && hasReturnedValue ? [{ op: Operation.Replace, path: [], value: original }] : inversePatches
    ];
  }
  function draftify(baseState, options) {
    var _a2;
    const finalities = {
      draft: [],
      revoke: [],
      handledSet: /* @__PURE__ */ new WeakSet()
    };
    let patches;
    let inversePatches;
    if (options.enablePatches) {
      patches = [];
      inversePatches = [];
    }
    const isMutable = ((_a2 = options.mark) === null || _a2 === void 0 ? void 0 : _a2.call(options, baseState, dataTypes)) === dataTypes.mutable || !isDraftable(baseState, options);
    const draft = isMutable ? baseState : createDraft({
      original: baseState,
      parentDraft: null,
      finalities,
      options
    });
    return [
      draft,
      (returnedValue = []) => {
        const [finalizedState, finalizedPatches, finalizedInversePatches] = finalizeDraft(draft, returnedValue, patches, inversePatches, options.enableAutoFreeze);
        return options.enablePatches ? [finalizedState, finalizedPatches, finalizedInversePatches] : finalizedState;
      }
    ];
  }
  function handleReturnValue(options) {
    const { rootDraft, value, useRawReturn = false, isRoot = true } = options;
    forEach(value, (key, item, source2) => {
      const proxyDraft = getProxyDraft(item);
      if (proxyDraft && rootDraft && proxyDraft.finalities === rootDraft.finalities) {
        options.isContainDraft = true;
        const currentValue = proxyDraft.original;
        if (source2 instanceof Set) {
          const arr = Array.from(source2);
          source2.clear();
          arr.forEach((_item) => source2.add(key === _item ? currentValue : _item));
        } else {
          set$2(source2, key, currentValue);
        }
      } else if (typeof item === "object" && item !== null) {
        options.value = item;
        options.isRoot = false;
        handleReturnValue(options);
      }
    });
    if (isRoot) {
      if (!options.isContainDraft)
        console.warn(`The return value does not contain any draft, please use 'rawReturn()' to wrap the return value to improve performance.`);
      if (useRawReturn) {
        console.warn(`The return value contains drafts, please don't use 'rawReturn()' to wrap the return value.`);
      }
    }
  }
  function getCurrent(target) {
    var _a2;
    const proxyDraft = getProxyDraft(target);
    if (!isDraftable(target, proxyDraft === null || proxyDraft === void 0 ? void 0 : proxyDraft.options))
      return target;
    const type = getType(target);
    if (proxyDraft && !proxyDraft.operated)
      return proxyDraft.original;
    let currentValue;
    function ensureShallowCopy2() {
      currentValue = type === 2 ? !isBaseMapInstance(target) ? new (Object.getPrototypeOf(target)).constructor(target) : new Map(target) : type === 3 ? Array.from(proxyDraft.setMap.values()) : shallowCopy(target, proxyDraft === null || proxyDraft === void 0 ? void 0 : proxyDraft.options);
    }
    if (proxyDraft) {
      proxyDraft.finalized = true;
      try {
        ensureShallowCopy2();
      } finally {
        proxyDraft.finalized = false;
      }
    } else {
      currentValue = target;
    }
    forEach(currentValue, (key, value) => {
      if (proxyDraft && isEqual$1(get$4(proxyDraft.original, key), value))
        return;
      const newValue = getCurrent(value);
      if (newValue !== value) {
        if (currentValue === target)
          ensureShallowCopy2();
        set$2(currentValue, key, newValue);
      }
    });
    if (type === 3) {
      const value = (_a2 = proxyDraft === null || proxyDraft === void 0 ? void 0 : proxyDraft.original) !== null && _a2 !== void 0 ? _a2 : currentValue;
      return !isBaseSetInstance(value) ? new (Object.getPrototypeOf(value)).constructor(currentValue) : new Set(currentValue);
    }
    return currentValue;
  }
  function current(target) {
    if (!isDraft(target)) {
      throw new Error(`current() is only used for Draft, parameter: ${target}`);
    }
    return getCurrent(target);
  }
  const makeCreator = (arg) => {
    if (arg !== void 0 && Object.prototype.toString.call(arg) !== "[object Object]") {
      throw new Error(`Invalid options: ${String(arg)}, 'options' should be an object.`);
    }
    return function create2(arg0, arg1, arg2) {
      var _a2, _b, _c;
      if (typeof arg0 === "function" && typeof arg1 !== "function") {
        return function(base2, ...args) {
          return create2(base2, (draft2) => arg0.call(this, draft2, ...args), arg1);
        };
      }
      const base = arg0;
      const mutate = arg1;
      let options = arg2;
      if (typeof arg1 !== "function") {
        options = arg1;
      }
      if (options !== void 0 && Object.prototype.toString.call(options) !== "[object Object]") {
        throw new Error(`Invalid options: ${options}, 'options' should be an object.`);
      }
      options = Object.assign(Object.assign({}, arg), options);
      const state = isDraft(base) ? current(base) : base;
      const mark2 = Array.isArray(options.mark) ? (value, types) => {
        for (const mark3 of options.mark) {
          if (typeof mark3 !== "function") {
            throw new Error(`Invalid mark: ${mark3}, 'mark' should be a function.`);
          }
          const result2 = mark3(value, types);
          if (result2) {
            return result2;
          }
        }
        return;
      } : options.mark;
      const enablePatches = (_a2 = options.enablePatches) !== null && _a2 !== void 0 ? _a2 : false;
      const strict = (_b = options.strict) !== null && _b !== void 0 ? _b : false;
      const enableAutoFreeze = (_c = options.enableAutoFreeze) !== null && _c !== void 0 ? _c : false;
      const _options = {
        enableAutoFreeze,
        mark: mark2,
        strict,
        enablePatches
      };
      if (!isDraftable(state, _options) && typeof state === "object" && state !== null) {
        throw new Error(`Invalid base state: create() only supports plain objects, arrays, Set, Map or using mark() to mark the state as immutable.`);
      }
      const [draft, finalize2] = draftify(state, _options);
      if (typeof arg1 !== "function") {
        if (!isDraftable(state, _options)) {
          throw new Error(`Invalid base state: create() only supports plain objects, arrays, Set, Map or using mark() to mark the state as immutable.`);
        }
        return [draft, finalize2];
      }
      let result;
      try {
        result = mutate(draft);
      } catch (error2) {
        revokeProxy(getProxyDraft(draft));
        throw error2;
      }
      const returnValue = (value) => {
        const proxyDraft = getProxyDraft(draft);
        if (!isDraft(value)) {
          if (value !== void 0 && !isEqual$1(value, draft) && (proxyDraft === null || proxyDraft === void 0 ? void 0 : proxyDraft.operated)) {
            throw new Error(`Either the value is returned as a new non-draft value, or only the draft is modified without returning any value.`);
          }
          const rawReturnValue = value === null || value === void 0 ? void 0 : value[RAW_RETURN_SYMBOL];
          if (rawReturnValue) {
            const _value = rawReturnValue[0];
            if (_options.strict && typeof value === "object" && value !== null) {
              handleReturnValue({
                rootDraft: proxyDraft,
                value,
                useRawReturn: true
              });
            }
            return finalize2([_value]);
          }
          if (value !== void 0) {
            if (typeof value === "object" && value !== null) {
              handleReturnValue({ rootDraft: proxyDraft, value });
            }
            return finalize2([value]);
          }
        }
        if (value === draft || value === void 0) {
          return finalize2([]);
        }
        const returnedProxyDraft = getProxyDraft(value);
        if (_options === returnedProxyDraft.options) {
          if (returnedProxyDraft.operated) {
            throw new Error(`Cannot return a modified child draft.`);
          }
          return finalize2([current(value)]);
        }
        return finalize2([value]);
      };
      if (result instanceof Promise) {
        return result.then(returnValue, (error2) => {
          revokeProxy(getProxyDraft(draft));
          throw error2;
        });
      }
      return returnValue(result);
    };
  };
  const create = makeCreator();
  Object.prototype.constructor.toString();
  var __defProp2 = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a2, b) => {
    for (var prop2 in b || (b = {}))
      if (__hasOwnProp.call(b, prop2))
        __defNormalProp2(a2, prop2, b[prop2]);
    if (__getOwnPropSymbols)
      for (var prop2 of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop2))
          __defNormalProp2(a2, prop2, b[prop2]);
      }
    return a2;
  };
  var __spreadProps = (a2, b) => __defProps(a2, __getOwnPropDescs(b));
  var __objRest = (source2, exclude) => {
    var target = {};
    for (var prop2 in source2)
      if (__hasOwnProp.call(source2, prop2) && exclude.indexOf(prop2) < 0)
        target[prop2] = source2[prop2];
    if (source2 != null && __getOwnPropSymbols)
      for (var prop2 of __getOwnPropSymbols(source2)) {
        if (exclude.indexOf(prop2) < 0 && __propIsEnum.call(source2, prop2))
          target[prop2] = source2[prop2];
      }
    return target;
  };
  var immerImpl = (initializer) => (set2, get2, store) => {
    store.setState = (updater, replace, ...a2) => {
      const nextState = typeof updater === "function" ? produce(updater) : updater;
      return set2(
        nextState,
        typeof replace === "boolean" ? replace : true,
        ...a2
      );
    };
    return initializer(store.setState, get2, store);
  };
  var immerMiddleware = immerImpl;
  var mutativeImpl = (initializer, options) => (set2, get2, store) => {
    store.setState = (updater, replace, ...a2) => {
      const nextState = typeof updater === "function" ? create(
        updater,
        options ? __spreadProps(__spreadValues({}, options), { enablePatches: false }) : options
      ) : updater;
      return set2(
        nextState,
        typeof replace === "boolean" ? replace : true,
        ...a2
      );
    };
    return initializer(store.setState, get2, store);
  };
  var mutativeMiddleware = mutativeImpl;
  var getOptions = (option, fallbackEnabled = false) => {
    const isBooleanValue = typeof option === "boolean";
    const _a2 = isBooleanValue ? {} : option || {}, { enabled } = _a2, config = __objRest(_a2, ["enabled"]);
    const isValueProvided = isBooleanValue ? option : enabled;
    return __spreadValues({
      enabled: isValueProvided != null ? isValueProvided : fallbackEnabled
    }, config);
  };
  var extendActions = (builder, api) => {
    const newActions = builder(api);
    const actions = __spreadValues(__spreadValues({}, api.actions), newActions);
    return __spreadProps(__spreadValues({}, api), {
      actions,
      set: (key, ...args) => {
        if (key in actions) {
          const action = actions[key];
          return action(...args);
        }
        return api.set(key, args[0]);
      }
    });
  };
  var identity$4 = (arg) => arg;
  var extendSelectors = (builder, api) => {
    const newSelectors = builder(api);
    const selectors = __spreadValues(__spreadValues({}, api.selectors), newSelectors);
    return __spreadProps(__spreadValues({}, api), {
      get: (key, ...args) => {
        if (key in selectors) {
          const selector = selectors[key];
          return selector(...args);
        }
        return api.get(key);
      },
      subscribe: (key, ...args) => {
        if (key in selectors) {
          let options;
          let selector;
          let listener;
          const lastArg1 = args.at(-1);
          const lastArg2 = args.at(-2);
          const lastArg3 = args.at(-3);
          let argsEndIdx = -1;
          if (typeof lastArg1 === "function") {
            listener = lastArg1;
            selector = typeof lastArg2 === "function" ? lastArg2 : identity$4;
            argsEndIdx = typeof lastArg2 === "function" ? -2 : -1;
          } else {
            options = lastArg1;
            listener = lastArg2;
            selector = lastArg3;
            argsEndIdx = -3;
          }
          return api.subscribe(
            // The key `state` does not matter, as selectors are closures over the `api`
            "state",
            () => selector(
              selectors[key](
                ...args.slice(0, argsEndIdx)
              )
            ),
            listener,
            options
          );
        }
        return api.subscribe(key, ...args);
      },
      selectors,
      useValue: (key, ...args) => {
        if (key in selectors) {
          const selector = selectors[key];
          const lastArg = args.at(-1);
          const equalityFn = typeof lastArg === "function" ? lastArg : void 0;
          const selectorArgs = equalityFn ? args.slice(0, -1) : args;
          return api.useStore(() => selector(...selectorArgs), equalityFn);
        }
        return api.useValue(
          key,
          args[0]
        );
      }
    });
  };
  var storeFactory = (api) => {
    return __spreadProps(__spreadValues({}, api), {
      actions: api.actions || {},
      extendSelectors: (builder) => storeFactory(extendSelectors(builder, api)),
      extendActions: (builder) => storeFactory(extendActions(builder, api))
    });
  };
  var createStore = (initializer, options) => {
    const {
      name,
      devtools: devtoolsOptions,
      immer: immerOptions,
      mutative: mutativeOptions,
      persist: persistOptions,
      isMutativeState
    } = options;
    const middlewares = [];
    const _devtoolsOptionsInternal = getOptions(devtoolsOptions);
    if (_devtoolsOptionsInternal.enabled) {
      middlewares.push(
        (config) => {
          var _a2;
          return devtools(config, __spreadProps(__spreadValues({}, _devtoolsOptionsInternal), {
            name: (_a2 = _devtoolsOptionsInternal == null ? void 0 : _devtoolsOptionsInternal.name) != null ? _a2 : name
          }));
        }
      );
    }
    const _persistOptionsInternal = getOptions(persistOptions);
    if (_persistOptionsInternal.enabled) {
      middlewares.push(
        (config) => {
          var _a2;
          return persist(config, __spreadProps(__spreadValues({}, _persistOptionsInternal), {
            name: (_a2 = _persistOptionsInternal.name) != null ? _a2 : name
          }));
        }
      );
    }
    const _immerOptionsInternal = getOptions(immerOptions);
    if (_immerOptionsInternal.enabled) {
      middlewares.push(
        (config) => immerMiddleware(config)
      );
    }
    const _mutativeOptionsInternal = getOptions(mutativeOptions);
    if (_mutativeOptionsInternal.enabled) {
      middlewares.push(
        (config) => mutativeMiddleware(config, _mutativeOptionsInternal)
      );
    }
    const stateMutators = middlewares.reverse().reduce(
      (y, fn) => fn(y),
      typeof initializer === "function" ? initializer : () => initializer
    );
    const store = createWithEqualityFn(subscribeWithSelector(stateMutators));
    const useTrackedStore2 = createTrackedSelector(store);
    const useTracked2 = (key) => {
      return useTrackedStore2()[key];
    };
    const getFn = (key) => {
      if (key === "state") {
        return store.getState();
      }
      return store.getState()[key];
    };
    const subscribeFn = (key, selector, listener, subscribeOptions) => {
      if (key === "state") {
        return store.subscribe(selector, listener, subscribeOptions);
      }
      let wrappedSelector;
      if (listener) {
        wrappedSelector = (state) => selector(state[key]);
      } else {
        listener = selector;
        wrappedSelector = (state) => state[key];
      }
      return store.subscribe(wrappedSelector, listener, subscribeOptions);
    };
    const isMutative = isMutativeState || _immerOptionsInternal.enabled || _mutativeOptionsInternal.enabled;
    const setFn = (key, value) => {
      var _a2;
      if (key === "state") {
        return store.setState(value);
      }
      const typedKey = key;
      const prevValue = store.getState()[typedKey];
      if (prevValue === value)
        return;
      const actionKey = key.replace(/^\S/, (s2) => s2.toUpperCase());
      const debugLog = name ? `@@${name}/set${actionKey}` : void 0;
      (_a2 = store.setState) == null ? void 0 : _a2.call(
        store,
        isMutative ? (draft) => {
          draft[typedKey] = value;
        } : { [typedKey]: value },
        void 0,
        debugLog
      );
    };
    const useValue = (key, equalityFn) => {
      return store((state) => state[key], equalityFn);
    };
    const useState = (key, equalityFn) => {
      const value = useValue(key, equalityFn);
      return [value, (val) => setFn(key, val)];
    };
    const apiInternal = {
      get: getFn,
      name,
      set: setFn,
      subscribe: subscribeFn,
      store,
      useStore: store,
      useValue,
      useState,
      useTracked: useTracked2,
      useTrackedStore: useTrackedStore2,
      actions: {},
      selectors: {}
    };
    return storeFactory(apiInternal);
  };
  var createZustandStore = createStore;
  function useStoreValue(store, key, ...args) {
    return store.useValue(key, ...args);
  }
  function overArg$2(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  var _overArg = overArg$2;
  var overArg$1 = _overArg;
  var getPrototype$3 = overArg$1(Object.getPrototypeOf, Object);
  var _getPrototype = getPrototype$3;
  var baseGetTag$4 = _baseGetTag, getPrototype$2 = _getPrototype, isObjectLike$7 = isObjectLike_1;
  var objectTag$4 = "[object Object]";
  var funcProto$2 = Function.prototype, objectProto$d = Object.prototype;
  var funcToString$2 = funcProto$2.toString;
  var hasOwnProperty$b = objectProto$d.hasOwnProperty;
  var objectCtorString = funcToString$2.call(Object);
  function isPlainObject$2(value) {
    if (!isObjectLike$7(value) || baseGetTag$4(value) != objectTag$4) {
      return false;
    }
    var proto = getPrototype$2(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty$b.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString$2.call(Ctor) == objectCtorString;
  }
  var isPlainObject_1 = isPlainObject$2;
  const isPlainObject$3 = /* @__PURE__ */ getDefaultExportFromCjs(isPlainObject_1);
  var isArray$d = Array.isArray;
  var isArray_1 = isArray$d;
  var isArray$c = isArray_1;
  function castArray() {
    if (!arguments.length) {
      return [];
    }
    var value = arguments[0];
    return isArray$c(value) ? value : [value];
  }
  var castArray_1 = castArray;
  const castArray4$1 = /* @__PURE__ */ getDefaultExportFromCjs(castArray_1);
  function arrayMap$4(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length, result = Array(length);
    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  var _arrayMap = arrayMap$4;
  function listCacheClear$1() {
    this.__data__ = [];
    this.size = 0;
  }
  var _listCacheClear = listCacheClear$1;
  function eq$6(value, other) {
    return value === other || value !== value && other !== other;
  }
  var eq_1 = eq$6;
  var eq$5 = eq_1;
  function assocIndexOf$4(array, key) {
    var length = array.length;
    while (length--) {
      if (eq$5(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  var _assocIndexOf = assocIndexOf$4;
  var assocIndexOf$3 = _assocIndexOf;
  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;
  function listCacheDelete$1(key) {
    var data = this.__data__, index = assocIndexOf$3(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }
  var _listCacheDelete = listCacheDelete$1;
  var assocIndexOf$2 = _assocIndexOf;
  function listCacheGet$1(key) {
    var data = this.__data__, index = assocIndexOf$2(data, key);
    return index < 0 ? void 0 : data[index][1];
  }
  var _listCacheGet = listCacheGet$1;
  var assocIndexOf$1 = _assocIndexOf;
  function listCacheHas$1(key) {
    return assocIndexOf$1(this.__data__, key) > -1;
  }
  var _listCacheHas = listCacheHas$1;
  var assocIndexOf = _assocIndexOf;
  function listCacheSet$1(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }
  var _listCacheSet = listCacheSet$1;
  var listCacheClear = _listCacheClear, listCacheDelete = _listCacheDelete, listCacheGet = _listCacheGet, listCacheHas = _listCacheHas, listCacheSet = _listCacheSet;
  function ListCache$4(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  ListCache$4.prototype.clear = listCacheClear;
  ListCache$4.prototype["delete"] = listCacheDelete;
  ListCache$4.prototype.get = listCacheGet;
  ListCache$4.prototype.has = listCacheHas;
  ListCache$4.prototype.set = listCacheSet;
  var _ListCache = ListCache$4;
  var ListCache$3 = _ListCache;
  function stackClear$1() {
    this.__data__ = new ListCache$3();
    this.size = 0;
  }
  var _stackClear = stackClear$1;
  function stackDelete$1(key) {
    var data = this.__data__, result = data["delete"](key);
    this.size = data.size;
    return result;
  }
  var _stackDelete = stackDelete$1;
  function stackGet$1(key) {
    return this.__data__.get(key);
  }
  var _stackGet = stackGet$1;
  function stackHas$1(key) {
    return this.__data__.has(key);
  }
  var _stackHas = stackHas$1;
  var baseGetTag$3 = _baseGetTag, isObject$9 = isObject_1;
  var asyncTag = "[object AsyncFunction]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
  function isFunction$5(value) {
    if (!isObject$9(value)) {
      return false;
    }
    var tag = baseGetTag$3(value);
    return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
  }
  var isFunction_1 = isFunction$5;
  var root$6 = _root;
  var coreJsData$1 = root$6["__core-js_shared__"];
  var _coreJsData = coreJsData$1;
  var coreJsData = _coreJsData;
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  function isMasked$1(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  var _isMasked = isMasked$1;
  var funcProto$1 = Function.prototype;
  var funcToString$1 = funcProto$1.toString;
  function toSource$2(func) {
    if (func != null) {
      try {
        return funcToString$1.call(func);
      } catch (e3) {
      }
      try {
        return func + "";
      } catch (e3) {
      }
    }
    return "";
  }
  var _toSource = toSource$2;
  var isFunction$4 = isFunction_1, isMasked = _isMasked, isObject$8 = isObject_1, toSource$1 = _toSource;
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto = Function.prototype, objectProto$c = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty$a = objectProto$c.hasOwnProperty;
  var reIsNative = RegExp(
    "^" + funcToString.call(hasOwnProperty$a).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  );
  function baseIsNative$1(value) {
    if (!isObject$8(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction$4(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource$1(value));
  }
  var _baseIsNative = baseIsNative$1;
  function getValue$1(object, key) {
    return object == null ? void 0 : object[key];
  }
  var _getValue = getValue$1;
  var baseIsNative = _baseIsNative, getValue = _getValue;
  function getNative$7(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : void 0;
  }
  var _getNative = getNative$7;
  var getNative$6 = _getNative, root$5 = _root;
  var Map$4 = getNative$6(root$5, "Map");
  var _Map = Map$4;
  var getNative$5 = _getNative;
  var nativeCreate$4 = getNative$5(Object, "create");
  var _nativeCreate = nativeCreate$4;
  var nativeCreate$3 = _nativeCreate;
  function hashClear$1() {
    this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
    this.size = 0;
  }
  var _hashClear = hashClear$1;
  function hashDelete$1(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }
  var _hashDelete = hashDelete$1;
  var nativeCreate$2 = _nativeCreate;
  var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
  var objectProto$b = Object.prototype;
  var hasOwnProperty$9 = objectProto$b.hasOwnProperty;
  function hashGet$1(key) {
    var data = this.__data__;
    if (nativeCreate$2) {
      var result = data[key];
      return result === HASH_UNDEFINED$2 ? void 0 : result;
    }
    return hasOwnProperty$9.call(data, key) ? data[key] : void 0;
  }
  var _hashGet = hashGet$1;
  var nativeCreate$1 = _nativeCreate;
  var objectProto$a = Object.prototype;
  var hasOwnProperty$8 = objectProto$a.hasOwnProperty;
  function hashHas$1(key) {
    var data = this.__data__;
    return nativeCreate$1 ? data[key] !== void 0 : hasOwnProperty$8.call(data, key);
  }
  var _hashHas = hashHas$1;
  var nativeCreate = _nativeCreate;
  var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
  function hashSet$1(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED$1 : value;
    return this;
  }
  var _hashSet = hashSet$1;
  var hashClear = _hashClear, hashDelete = _hashDelete, hashGet = _hashGet, hashHas = _hashHas, hashSet = _hashSet;
  function Hash$1(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  Hash$1.prototype.clear = hashClear;
  Hash$1.prototype["delete"] = hashDelete;
  Hash$1.prototype.get = hashGet;
  Hash$1.prototype.has = hashHas;
  Hash$1.prototype.set = hashSet;
  var _Hash = Hash$1;
  var Hash = _Hash, ListCache$2 = _ListCache, Map$3 = _Map;
  function mapCacheClear$1() {
    this.size = 0;
    this.__data__ = {
      "hash": new Hash(),
      "map": new (Map$3 || ListCache$2)(),
      "string": new Hash()
    };
  }
  var _mapCacheClear = mapCacheClear$1;
  function isKeyable$1(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  var _isKeyable = isKeyable$1;
  var isKeyable = _isKeyable;
  function getMapData$4(map2, key) {
    var data = map2.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  var _getMapData = getMapData$4;
  var getMapData$3 = _getMapData;
  function mapCacheDelete$1(key) {
    var result = getMapData$3(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
  }
  var _mapCacheDelete = mapCacheDelete$1;
  var getMapData$2 = _getMapData;
  function mapCacheGet$1(key) {
    return getMapData$2(this, key).get(key);
  }
  var _mapCacheGet = mapCacheGet$1;
  var getMapData$1 = _getMapData;
  function mapCacheHas$1(key) {
    return getMapData$1(this, key).has(key);
  }
  var _mapCacheHas = mapCacheHas$1;
  var getMapData = _getMapData;
  function mapCacheSet$1(key, value) {
    var data = getMapData(this, key), size2 = data.size;
    data.set(key, value);
    this.size += data.size == size2 ? 0 : 1;
    return this;
  }
  var _mapCacheSet = mapCacheSet$1;
  var mapCacheClear = _mapCacheClear, mapCacheDelete = _mapCacheDelete, mapCacheGet = _mapCacheGet, mapCacheHas = _mapCacheHas, mapCacheSet = _mapCacheSet;
  function MapCache$3(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  MapCache$3.prototype.clear = mapCacheClear;
  MapCache$3.prototype["delete"] = mapCacheDelete;
  MapCache$3.prototype.get = mapCacheGet;
  MapCache$3.prototype.has = mapCacheHas;
  MapCache$3.prototype.set = mapCacheSet;
  var _MapCache = MapCache$3;
  var ListCache$1 = _ListCache, Map$2 = _Map, MapCache$2 = _MapCache;
  var LARGE_ARRAY_SIZE = 200;
  function stackSet$1(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache$1) {
      var pairs = data.__data__;
      if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache$2(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }
  var _stackSet = stackSet$1;
  var ListCache = _ListCache, stackClear = _stackClear, stackDelete = _stackDelete, stackGet = _stackGet, stackHas = _stackHas, stackSet = _stackSet;
  function Stack$4(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }
  Stack$4.prototype.clear = stackClear;
  Stack$4.prototype["delete"] = stackDelete;
  Stack$4.prototype.get = stackGet;
  Stack$4.prototype.has = stackHas;
  Stack$4.prototype.set = stackSet;
  var _Stack = Stack$4;
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  function setCacheAdd$1(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }
  var _setCacheAdd = setCacheAdd$1;
  function setCacheHas$1(value) {
    return this.__data__.has(value);
  }
  var _setCacheHas = setCacheHas$1;
  var MapCache$1 = _MapCache, setCacheAdd = _setCacheAdd, setCacheHas = _setCacheHas;
  function SetCache$1(values) {
    var index = -1, length = values == null ? 0 : values.length;
    this.__data__ = new MapCache$1();
    while (++index < length) {
      this.add(values[index]);
    }
  }
  SetCache$1.prototype.add = SetCache$1.prototype.push = setCacheAdd;
  SetCache$1.prototype.has = setCacheHas;
  var _SetCache = SetCache$1;
  function arraySome$1(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }
  var _arraySome = arraySome$1;
  function cacheHas$1(cache2, key) {
    return cache2.has(key);
  }
  var _cacheHas = cacheHas$1;
  var SetCache = _SetCache, arraySome = _arraySome, cacheHas = _cacheHas;
  var COMPARE_PARTIAL_FLAG$5 = 1, COMPARE_UNORDERED_FLAG$3 = 2;
  function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : void 0;
    stack.set(array, other);
    stack.set(other, array);
    while (++index < arrLength) {
      var arrValue = array[index], othValue = other[index];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== void 0) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      if (seen) {
        if (!arraySome(other, function(othValue2, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }
    stack["delete"](array);
    stack["delete"](other);
    return result;
  }
  var _equalArrays = equalArrays$2;
  var root$4 = _root;
  var Uint8Array$3 = root$4.Uint8Array;
  var _Uint8Array = Uint8Array$3;
  function mapToArray$1(map2) {
    var index = -1, result = Array(map2.size);
    map2.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }
  var _mapToArray = mapToArray$1;
  function setToArray$1(set2) {
    var index = -1, result = Array(set2.size);
    set2.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }
  var _setToArray = setToArray$1;
  var Symbol$4 = _Symbol, Uint8Array$2 = _Uint8Array, eq$4 = eq_1, equalArrays$1 = _equalArrays, mapToArray = _mapToArray, setToArray = _setToArray;
  var COMPARE_PARTIAL_FLAG$4 = 1, COMPARE_UNORDERED_FLAG$2 = 2;
  var boolTag$3 = "[object Boolean]", dateTag$3 = "[object Date]", errorTag$2 = "[object Error]", mapTag$5 = "[object Map]", numberTag$3 = "[object Number]", regexpTag$3 = "[object RegExp]", setTag$5 = "[object Set]", stringTag$3 = "[object String]", symbolTag$2 = "[object Symbol]";
  var arrayBufferTag$3 = "[object ArrayBuffer]", dataViewTag$4 = "[object DataView]";
  var symbolProto$2 = Symbol$4 ? Symbol$4.prototype : void 0, symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : void 0;
  function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag$4:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;
      case arrayBufferTag$3:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array$2(object), new Uint8Array$2(other))) {
          return false;
        }
        return true;
      case boolTag$3:
      case dateTag$3:
      case numberTag$3:
        return eq$4(+object, +other);
      case errorTag$2:
        return object.name == other.name && object.message == other.message;
      case regexpTag$3:
      case stringTag$3:
        return object == other + "";
      case mapTag$5:
        var convert = mapToArray;
      case setTag$5:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
        convert || (convert = setToArray);
        if (object.size != other.size && !isPartial) {
          return false;
        }
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG$2;
        stack.set(object, other);
        var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack["delete"](object);
        return result;
      case symbolTag$2:
        if (symbolValueOf$1) {
          return symbolValueOf$1.call(object) == symbolValueOf$1.call(other);
        }
    }
    return false;
  }
  var _equalByTag = equalByTag$1;
  function arrayPush$3(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }
  var _arrayPush = arrayPush$3;
  var arrayPush$2 = _arrayPush, isArray$b = isArray_1;
  function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray$b(object) ? result : arrayPush$2(result, symbolsFunc(object));
  }
  var _baseGetAllKeys = baseGetAllKeys$2;
  function arrayFilter$1(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }
  var _arrayFilter = arrayFilter$1;
  function stubArray$2() {
    return [];
  }
  var stubArray_1 = stubArray$2;
  var arrayFilter = _arrayFilter, stubArray$1 = stubArray_1;
  var objectProto$9 = Object.prototype;
  var propertyIsEnumerable$1 = objectProto$9.propertyIsEnumerable;
  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
  var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
      return propertyIsEnumerable$1.call(object, symbol);
    });
  };
  var _getSymbols = getSymbols$3;
  function baseTimes$1(n2, iteratee) {
    var index = -1, result = Array(n2);
    while (++index < n2) {
      result[index] = iteratee(index);
    }
    return result;
  }
  var _baseTimes = baseTimes$1;
  var baseGetTag$2 = _baseGetTag, isObjectLike$6 = isObjectLike_1;
  var argsTag$3 = "[object Arguments]";
  function baseIsArguments$1(value) {
    return isObjectLike$6(value) && baseGetTag$2(value) == argsTag$3;
  }
  var _baseIsArguments = baseIsArguments$1;
  var baseIsArguments = _baseIsArguments, isObjectLike$5 = isObjectLike_1;
  var objectProto$8 = Object.prototype;
  var hasOwnProperty$7 = objectProto$8.hasOwnProperty;
  var propertyIsEnumerable = objectProto$8.propertyIsEnumerable;
  var isArguments$4 = baseIsArguments(function() {
    return arguments;
  }()) ? baseIsArguments : function(value) {
    return isObjectLike$5(value) && hasOwnProperty$7.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
  };
  var isArguments_1 = isArguments$4;
  var isBuffer$4 = { exports: {} };
  function stubFalse() {
    return false;
  }
  var stubFalse_1 = stubFalse;
  isBuffer$4.exports;
  (function(module2, exports3) {
    var root2 = _root, stubFalse2 = stubFalse_1;
    var freeExports = exports3 && !exports3.nodeType && exports3;
    var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root2.Buffer : void 0;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var isBuffer2 = nativeIsBuffer || stubFalse2;
    module2.exports = isBuffer2;
  })(isBuffer$4, isBuffer$4.exports);
  var isBufferExports = isBuffer$4.exports;
  var MAX_SAFE_INTEGER$1 = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  function isIndex$4(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER$1 : length;
    return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  var _isIndex = isIndex$4;
  var MAX_SAFE_INTEGER = 9007199254740991;
  function isLength$3(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  var isLength_1 = isLength$3;
  var baseGetTag$1 = _baseGetTag, isLength$2 = isLength_1, isObjectLike$4 = isObjectLike_1;
  var argsTag$2 = "[object Arguments]", arrayTag$2 = "[object Array]", boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", errorTag$1 = "[object Error]", funcTag$1 = "[object Function]", mapTag$4 = "[object Map]", numberTag$2 = "[object Number]", objectTag$3 = "[object Object]", regexpTag$2 = "[object RegExp]", setTag$4 = "[object Set]", stringTag$2 = "[object String]", weakMapTag$2 = "[object WeakMap]";
  var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$3 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
  var typedArrayTags = {};
  typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
  typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$2] = typedArrayTags[boolTag$2] = typedArrayTags[dataViewTag$3] = typedArrayTags[dateTag$2] = typedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$4] = typedArrayTags[numberTag$2] = typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$2] = typedArrayTags[setTag$4] = typedArrayTags[stringTag$2] = typedArrayTags[weakMapTag$2] = false;
  function baseIsTypedArray$1(value) {
    return isObjectLike$4(value) && isLength$2(value.length) && !!typedArrayTags[baseGetTag$1(value)];
  }
  var _baseIsTypedArray = baseIsTypedArray$1;
  function baseUnary$3(func) {
    return function(value) {
      return func(value);
    };
  }
  var _baseUnary = baseUnary$3;
  var _nodeUtil = { exports: {} };
  _nodeUtil.exports;
  (function(module2, exports3) {
    var freeGlobal2 = _freeGlobal;
    var freeExports = exports3 && !exports3.nodeType && exports3;
    var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal2.process;
    var nodeUtil2 = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e3) {
      }
    }();
    module2.exports = nodeUtil2;
  })(_nodeUtil, _nodeUtil.exports);
  var _nodeUtilExports = _nodeUtil.exports;
  var baseIsTypedArray = _baseIsTypedArray, baseUnary$2 = _baseUnary, nodeUtil$2 = _nodeUtilExports;
  var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;
  var isTypedArray$3 = nodeIsTypedArray ? baseUnary$2(nodeIsTypedArray) : baseIsTypedArray;
  var isTypedArray_1 = isTypedArray$3;
  var baseTimes = _baseTimes, isArguments$3 = isArguments_1, isArray$a = isArray_1, isBuffer$3 = isBufferExports, isIndex$3 = _isIndex, isTypedArray$2 = isTypedArray_1;
  var objectProto$7 = Object.prototype;
  var hasOwnProperty$6 = objectProto$7.hasOwnProperty;
  function arrayLikeKeys$2(value, inherited) {
    var isArr = isArray$a(value), isArg = !isArr && isArguments$3(value), isBuff = !isArr && !isArg && isBuffer$3(value), isType = !isArr && !isArg && !isBuff && isTypedArray$2(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for (var key in value) {
      if ((inherited || hasOwnProperty$6.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
      (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
      isIndex$3(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  var _arrayLikeKeys = arrayLikeKeys$2;
  var objectProto$6 = Object.prototype;
  function isPrototype$3(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$6;
    return value === proto;
  }
  var _isPrototype = isPrototype$3;
  var overArg = _overArg;
  var nativeKeys$1 = overArg(Object.keys, Object);
  var _nativeKeys = nativeKeys$1;
  var isPrototype$2 = _isPrototype, nativeKeys = _nativeKeys;
  var objectProto$5 = Object.prototype;
  var hasOwnProperty$5 = objectProto$5.hasOwnProperty;
  function baseKeys$1(object) {
    if (!isPrototype$2(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$5.call(object, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  var _baseKeys = baseKeys$1;
  var isFunction$3 = isFunction_1, isLength$1 = isLength_1;
  function isArrayLike$6(value) {
    return value != null && isLength$1(value.length) && !isFunction$3(value);
  }
  var isArrayLike_1 = isArrayLike$6;
  var arrayLikeKeys$1 = _arrayLikeKeys, baseKeys = _baseKeys, isArrayLike$5 = isArrayLike_1;
  function keys$5(object) {
    return isArrayLike$5(object) ? arrayLikeKeys$1(object) : baseKeys(object);
  }
  var keys_1 = keys$5;
  var baseGetAllKeys$1 = _baseGetAllKeys, getSymbols$2 = _getSymbols, keys$4 = keys_1;
  function getAllKeys$2(object) {
    return baseGetAllKeys$1(object, keys$4, getSymbols$2);
  }
  var _getAllKeys = getAllKeys$2;
  var getAllKeys$1 = _getAllKeys;
  var COMPARE_PARTIAL_FLAG$3 = 1;
  var objectProto$4 = Object.prototype;
  var hasOwnProperty$4 = objectProto$4.hasOwnProperty;
  function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3, objProps = getAllKeys$1(object), objLength = objProps.length, othProps = getAllKeys$1(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty$4.call(other, key))) {
        return false;
      }
    }
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key], othValue = other[key];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }
      if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == "constructor");
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor, othCtor = other.constructor;
      if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack["delete"](object);
    stack["delete"](other);
    return result;
  }
  var _equalObjects = equalObjects$1;
  var getNative$4 = _getNative, root$3 = _root;
  var DataView$2 = getNative$4(root$3, "DataView");
  var _DataView = DataView$2;
  var getNative$3 = _getNative, root$2 = _root;
  var Promise$2 = getNative$3(root$2, "Promise");
  var _Promise = Promise$2;
  var getNative$2 = _getNative, root$1 = _root;
  var Set$2 = getNative$2(root$1, "Set");
  var _Set = Set$2;
  var getNative$1 = _getNative, root = _root;
  var WeakMap$2 = getNative$1(root, "WeakMap");
  var _WeakMap = WeakMap$2;
  var DataView$1 = _DataView, Map$1 = _Map, Promise$1 = _Promise, Set$1 = _Set, WeakMap$1 = _WeakMap, baseGetTag = _baseGetTag, toSource = _toSource;
  var mapTag$3 = "[object Map]", objectTag$2 = "[object Object]", promiseTag = "[object Promise]", setTag$3 = "[object Set]", weakMapTag$1 = "[object WeakMap]";
  var dataViewTag$2 = "[object DataView]";
  var dataViewCtorString = toSource(DataView$1), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$1), setCtorString = toSource(Set$1), weakMapCtorString = toSource(WeakMap$1);
  var getTag$4 = baseGetTag;
  if (DataView$1 && getTag$4(new DataView$1(new ArrayBuffer(1))) != dataViewTag$2 || Map$1 && getTag$4(new Map$1()) != mapTag$3 || Promise$1 && getTag$4(Promise$1.resolve()) != promiseTag || Set$1 && getTag$4(new Set$1()) != setTag$3 || WeakMap$1 && getTag$4(new WeakMap$1()) != weakMapTag$1) {
    getTag$4 = function(value) {
      var result = baseGetTag(value), Ctor = result == objectTag$2 ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag$2;
          case mapCtorString:
            return mapTag$3;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag$3;
          case weakMapCtorString:
            return weakMapTag$1;
        }
      }
      return result;
    };
  }
  var _getTag = getTag$4;
  var Stack$3 = _Stack, equalArrays = _equalArrays, equalByTag = _equalByTag, equalObjects = _equalObjects, getTag$3 = _getTag, isArray$9 = isArray_1, isBuffer$2 = isBufferExports, isTypedArray$1 = isTypedArray_1;
  var COMPARE_PARTIAL_FLAG$2 = 1;
  var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", objectTag$1 = "[object Object]";
  var objectProto$3 = Object.prototype;
  var hasOwnProperty$3 = objectProto$3.hasOwnProperty;
  function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray$9(object), othIsArr = isArray$9(other), objTag = objIsArr ? arrayTag$1 : getTag$3(object), othTag = othIsArr ? arrayTag$1 : getTag$3(other);
    objTag = objTag == argsTag$1 ? objectTag$1 : objTag;
    othTag = othTag == argsTag$1 ? objectTag$1 : othTag;
    var objIsObj = objTag == objectTag$1, othIsObj = othTag == objectTag$1, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer$2(object)) {
      if (!isBuffer$2(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack$3());
      return objIsArr || isTypedArray$1(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
      var objIsWrapped = objIsObj && hasOwnProperty$3.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty$3.call(other, "__wrapped__");
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack$3());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack$3());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }
  var _baseIsEqualDeep = baseIsEqualDeep$1;
  var baseIsEqualDeep = _baseIsEqualDeep, isObjectLike$3 = isObjectLike_1;
  function baseIsEqual$2(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || !isObjectLike$3(value) && !isObjectLike$3(other)) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$2, stack);
  }
  var _baseIsEqual = baseIsEqual$2;
  var Stack$2 = _Stack, baseIsEqual$1 = _baseIsEqual;
  var COMPARE_PARTIAL_FLAG$1 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
  function baseIsMatch$1(object, source2, matchData, customizer) {
    var index = matchData.length, length = index, noCustomizer = !customizer;
    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0], objValue = object[key], srcValue = data[1];
      if (noCustomizer && data[2]) {
        if (objValue === void 0 && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack$2();
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source2, stack);
        }
        if (!(result === void 0 ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
          return false;
        }
      }
    }
    return true;
  }
  var _baseIsMatch = baseIsMatch$1;
  var isObject$7 = isObject_1;
  function isStrictComparable$2(value) {
    return value === value && !isObject$7(value);
  }
  var _isStrictComparable = isStrictComparable$2;
  var isStrictComparable$1 = _isStrictComparable, keys$3 = keys_1;
  function getMatchData$1(object) {
    var result = keys$3(object), length = result.length;
    while (length--) {
      var key = result[length], value = object[key];
      result[length] = [key, value, isStrictComparable$1(value)];
    }
    return result;
  }
  var _getMatchData = getMatchData$1;
  function matchesStrictComparable$2(key, srcValue) {
    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
    };
  }
  var _matchesStrictComparable = matchesStrictComparable$2;
  var baseIsMatch = _baseIsMatch, getMatchData = _getMatchData, matchesStrictComparable$1 = _matchesStrictComparable;
  function baseMatches$1(source2) {
    var matchData = getMatchData(source2);
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
    }
    return function(object) {
      return object === source2 || baseIsMatch(object, source2, matchData);
    };
  }
  var _baseMatches = baseMatches$1;
  var isArray$8 = isArray_1, isSymbol$2 = isSymbol_1;
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
  function isKey$3(value, object) {
    if (isArray$8(value)) {
      return false;
    }
    var type = typeof value;
    if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol$2(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }
  var _isKey = isKey$3;
  var MapCache = _MapCache;
  var FUNC_ERROR_TEXT$1 = "Expected a function";
  function memoize$1(func, resolver) {
    if (typeof func != "function" || resolver != null && typeof resolver != "function") {
      throw new TypeError(FUNC_ERROR_TEXT$1);
    }
    var memoized = function() {
      var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
      if (cache2.has(key)) {
        return cache2.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache2.set(key, result) || cache2;
      return result;
    };
    memoized.cache = new (memoize$1.Cache || MapCache)();
    return memoized;
  }
  memoize$1.Cache = MapCache;
  var memoize_1 = memoize$1;
  var memoize = memoize_1;
  var MAX_MEMOIZE_SIZE = 500;
  function memoizeCapped$1(func) {
    var result = memoize(func, function(key) {
      if (cache2.size === MAX_MEMOIZE_SIZE) {
        cache2.clear();
      }
      return key;
    });
    var cache2 = result.cache;
    return result;
  }
  var _memoizeCapped = memoizeCapped$1;
  var memoizeCapped = _memoizeCapped;
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath$1 = memoizeCapped(function(string2) {
    var result = [];
    if (string2.charCodeAt(0) === 46) {
      result.push("");
    }
    string2.replace(rePropName, function(match2, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match2);
    });
    return result;
  });
  var _stringToPath = stringToPath$1;
  var Symbol$3 = _Symbol, arrayMap$3 = _arrayMap, isArray$7 = isArray_1, isSymbol$1 = isSymbol_1;
  var INFINITY$1 = 1 / 0;
  var symbolProto$1 = Symbol$3 ? Symbol$3.prototype : void 0, symbolToString = symbolProto$1 ? symbolProto$1.toString : void 0;
  function baseToString$1(value) {
    if (typeof value == "string") {
      return value;
    }
    if (isArray$7(value)) {
      return arrayMap$3(value, baseToString$1) + "";
    }
    if (isSymbol$1(value)) {
      return symbolToString ? symbolToString.call(value) : "";
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY$1 ? "-0" : result;
  }
  var _baseToString = baseToString$1;
  var baseToString = _baseToString;
  function toString$3(value) {
    return value == null ? "" : baseToString(value);
  }
  var toString_1 = toString$3;
  var isArray$6 = isArray_1, isKey$2 = _isKey, stringToPath = _stringToPath, toString$2 = toString_1;
  function castPath$6(value, object) {
    if (isArray$6(value)) {
      return value;
    }
    return isKey$2(value, object) ? [value] : stringToPath(toString$2(value));
  }
  var _castPath = castPath$6;
  var isSymbol = isSymbol_1;
  var INFINITY = 1 / 0;
  function toKey$6(value) {
    if (typeof value == "string" || isSymbol(value)) {
      return value;
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  }
  var _toKey = toKey$6;
  var castPath$5 = _castPath, toKey$5 = _toKey;
  function baseGet$4(object, path2) {
    path2 = castPath$5(path2, object);
    var index = 0, length = path2.length;
    while (object != null && index < length) {
      object = object[toKey$5(path2[index++])];
    }
    return index && index == length ? object : void 0;
  }
  var _baseGet = baseGet$4;
  var baseGet$3 = _baseGet;
  function get$3(object, path2, defaultValue) {
    var result = object == null ? void 0 : baseGet$3(object, path2);
    return result === void 0 ? defaultValue : result;
  }
  var get_1 = get$3;
  function baseHasIn$1(object, key) {
    return object != null && key in Object(object);
  }
  var _baseHasIn = baseHasIn$1;
  var castPath$4 = _castPath, isArguments$2 = isArguments_1, isArray$5 = isArray_1, isIndex$2 = _isIndex, isLength = isLength_1, toKey$4 = _toKey;
  function hasPath$1(object, path2, hasFunc) {
    path2 = castPath$4(path2, object);
    var index = -1, length = path2.length, result = false;
    while (++index < length) {
      var key = toKey$4(path2[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length) {
      return result;
    }
    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex$2(key, length) && (isArray$5(object) || isArguments$2(object));
  }
  var _hasPath = hasPath$1;
  var baseHasIn = _baseHasIn, hasPath = _hasPath;
  function hasIn$2(object, path2) {
    return object != null && hasPath(object, path2, baseHasIn);
  }
  var hasIn_1 = hasIn$2;
  var baseIsEqual = _baseIsEqual, get$2 = get_1, hasIn$1 = hasIn_1, isKey$1 = _isKey, isStrictComparable = _isStrictComparable, matchesStrictComparable = _matchesStrictComparable, toKey$3 = _toKey;
  var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
  function baseMatchesProperty$1(path2, srcValue) {
    if (isKey$1(path2) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey$3(path2), srcValue);
    }
    return function(object) {
      var objValue = get$2(object, path2);
      return objValue === void 0 && objValue === srcValue ? hasIn$1(object, path2) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
  }
  var _baseMatchesProperty = baseMatchesProperty$1;
  function identity$3(value) {
    return value;
  }
  var identity_1 = identity$3;
  function baseProperty$1(key) {
    return function(object) {
      return object == null ? void 0 : object[key];
    };
  }
  var _baseProperty = baseProperty$1;
  var baseGet$2 = _baseGet;
  function basePropertyDeep$1(path2) {
    return function(object) {
      return baseGet$2(object, path2);
    };
  }
  var _basePropertyDeep = basePropertyDeep$1;
  var baseProperty = _baseProperty, basePropertyDeep = _basePropertyDeep, isKey = _isKey, toKey$2 = _toKey;
  function property$1(path2) {
    return isKey(path2) ? baseProperty(toKey$2(path2)) : basePropertyDeep(path2);
  }
  var property_1 = property$1;
  var baseMatches = _baseMatches, baseMatchesProperty = _baseMatchesProperty, identity$2 = identity_1, isArray$4 = isArray_1, property = property_1;
  function baseIteratee$3(value) {
    if (typeof value == "function") {
      return value;
    }
    if (value == null) {
      return identity$2;
    }
    if (typeof value == "object") {
      return isArray$4(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    }
    return property(value);
  }
  var _baseIteratee = baseIteratee$3;
  function createBaseFor$1(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }
  var _createBaseFor = createBaseFor$1;
  var createBaseFor = _createBaseFor;
  var baseFor$2 = createBaseFor();
  var _baseFor = baseFor$2;
  var baseFor$1 = _baseFor, keys$2 = keys_1;
  function baseForOwn$1(object, iteratee) {
    return object && baseFor$1(object, iteratee, keys$2);
  }
  var _baseForOwn = baseForOwn$1;
  var isArrayLike$4 = isArrayLike_1;
  function createBaseEach$1(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike$4(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
      while (fromRight ? index-- : ++index < length) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }
  var _createBaseEach = createBaseEach$1;
  var baseForOwn = _baseForOwn, createBaseEach = _createBaseEach;
  var baseEach$1 = createBaseEach(baseForOwn);
  var _baseEach = baseEach$1;
  var baseEach = _baseEach, isArrayLike$3 = isArrayLike_1;
  function baseMap$1(collection, iteratee) {
    var index = -1, result = isArrayLike$3(collection) ? Array(collection.length) : [];
    baseEach(collection, function(value, key, collection2) {
      result[++index] = iteratee(value, key, collection2);
    });
    return result;
  }
  var _baseMap = baseMap$1;
  var arrayMap$2 = _arrayMap, baseIteratee$2 = _baseIteratee, baseMap = _baseMap, isArray$3 = isArray_1;
  function map(collection, iteratee) {
    var func = isArray$3(collection) ? arrayMap$2 : baseMap;
    return func(collection, baseIteratee$2(iteratee));
  }
  var map_1 = map;
  const map$1 = /* @__PURE__ */ getDefaultExportFromCjs(map_1);
  var ElementApi = {
    ...Element$2
  };
  var PathApi = {
    ...Path,
    child: (path2, index) => path2.concat([index]),
    firstChild: (path2) => PathApi.child(path2, 0),
    lastIndex: (path2) => path2.at(-1) ?? -1,
    next: (path2) => {
      try {
        return Path.next(path2);
      } catch {
        return path2;
      }
    },
    parent: (path2) => {
      try {
        return Path.parent(path2);
      } catch {
        return path2;
      }
    },
    previous: (path2) => {
      if (path2.length === 0)
        return;
      const last2 = path2.at(-1);
      if (last2 <= 0)
        return;
      return path2.slice(0, -1).concat(last2 - 1);
    }
  };
  var NodeExtension = {
    *children(root2, path2, options = {}) {
      const { from, reverse = false, to: to2 } = options;
      const ancestor = NodeApi.ancestor(root2, path2);
      if (!ancestor)
        return;
      const { children } = ancestor;
      let index = reverse ? children.length - 1 : 0;
      const endIndex = to2 ?? (reverse ? 0 : children.length);
      if (from !== void 0) {
        index = from;
      }
      while (reverse ? index >= endIndex : index < endIndex) {
        const child = NodeApi.child(ancestor, index);
        const childPath = path2.concat(index);
        yield [child, childPath];
        index = reverse ? index - 1 : index + 1;
      }
    },
    firstChild(root2, path2) {
      const children = NodeApi.children(root2, path2);
      const firstChild = children.next().value;
      return firstChild;
    },
    firstText(root2, options) {
      const texts = NodeApi.texts(root2, options);
      const firstText = texts.next().value;
      return firstText;
    },
    isEditor: (value) => isEditor(value),
    isLastChild(root2, path2) {
      if (path2.length === 0)
        return false;
      const parent2 = NodeApi.parent(root2, path2);
      if (!parent2)
        return false;
      const index = path2.at(-1);
      return index === parent2.children.length - 1;
    },
    lastChild(root2, path2) {
      const children = NodeApi.children(root2, path2, { reverse: true });
      const lastChild = children.next().value;
      return lastChild;
    }
  };
  var TextApi = Text$1;
  var NodeApi = {
    ...Node$1,
    isAncestor: ElementApi.isAncestor,
    ancestor: (...args) => {
      try {
        return Node$1.ancestor(...args);
      } catch {
      }
    },
    common: (...args) => {
      try {
        return Node$1.common(...args);
      } catch {
      }
    },
    descendant: (...args) => {
      try {
        return Node$1.descendant(...args);
      } catch {
      }
    },
    first: (...args) => {
      try {
        return Node$1.first(...args);
      } catch {
      }
    },
    fragment: (...args) => {
      try {
        return Node$1.fragment(...args);
      } catch {
        return [];
      }
    },
    get: (...args) => {
      try {
        return Node$1.get(...args);
      } catch {
      }
    },
    hasSingleChild: (node2) => {
      if (TextApi.isText(node2))
        return true;
      return node2.children.length === 1 && NodeApi.hasSingleChild(node2.children[0]);
    },
    isDescendant: (node2) => ElementApi.isElement(node2) || TextApi.isText(node2),
    last: (...args) => {
      try {
        return Node$1.last(...args);
      } catch {
      }
    },
    leaf: (...args) => {
      try {
        return Node$1.leaf(...args);
      } catch {
      }
    },
    parent: (...args) => {
      try {
        return Node$1.parent(...args);
      } catch {
      }
    },
    ...NodeExtension
  };
  var LocationApi = {
    ...Location,
    isAt: (value) => LocationApi.isLocation(value) || NodeApi.isNode(value)
  };
  var SpanApi = Span;
  var OperationApi = Operation$1;
  var RangeApi = {
    ...Range,
    contains: (range2, target) => {
      const [targetStart, targetEnd] = RangeApi.edges(target);
      return RangeApi.includes(range2, targetStart) && RangeApi.includes(range2, targetEnd);
    },
    isCollapsed: (range2) => !!range2 && Range.isCollapsed(range2),
    isExpanded: (range2) => !!range2 && Range.isExpanded(range2)
  };
  var PointApi = {
    ...Point,
    get: (at2, { focus: focus2 } = {}) => {
      let point2;
      if (RangeApi.isRange(at2))
        point2 = focus2 ? at2.focus : at2.anchor;
      if (PointApi.isPoint(at2))
        point2 = at2;
      if (PathApi.isPath(at2))
        point2 = { offset: 0, path: at2 };
      return point2;
    }
  };
  var blur = (editor) => DOMEditor.blur(editor);
  var deselectDOM = (editor) => DOMEditor.deselect(editor);
  var findDocumentOrShadowRoot = (editor) => {
    try {
      return DOMEditor.findDocumentOrShadowRoot(editor);
    } catch {
    }
  };
  var findEventRange = (editor, event) => {
    try {
      return DOMEditor.findEventRange(editor, event);
    } catch {
    }
  };
  var findKey$1 = (editor, node2) => {
    try {
      return DOMEditor.findKey(editor, node2);
    } catch {
    }
  };
  var findPath = (editor, node2, options) => {
    const findNodePath = () => {
      const nodeEntry = editor.api.node({
        ...options,
        at: [],
        match: (n2) => n2 === node2
      });
      return nodeEntry == null ? void 0 : nodeEntry[1];
    };
    if (options) {
      return findNodePath();
    }
    try {
      return DOMEditor.findPath(editor, node2);
    } catch {
      return findNodePath();
    }
  };
  var focus = (editor, { at: at2, edge, retries = 5 } = {}) => {
    const reselect = (at22) => {
      editor.tf.withoutNormalizing(() => {
        editor.tf.deselect();
        editor.tf.select(at22);
      });
    };
    if (edge) {
      const target = edge === "startEditor" || edge === "endEditor" ? [] : at2 ?? editor.selection;
      if (target) {
        reselect(
          edge === "start" ? editor.api.start(target) : editor.api.end(target)
        );
      }
    } else if (at2) {
      reselect(at2);
    }
    try {
      DOMEditor.focus(editor, { retries });
    } catch (error2) {
      console.error(error2);
    }
  };
  var getWindow = (editor) => {
    try {
      return DOMEditor.getWindow(editor);
    } catch {
    }
  };
  var hasDOMNode = (editor, target, options) => {
    try {
      return DOMEditor.hasDOMNode(editor, target, options);
    } catch {
    }
    return false;
  };
  var hasEditableTarget = (editor, target) => {
    try {
      return DOMEditor.hasEditableTarget(editor, target);
    } catch {
    }
    return false;
  };
  var hasRange = (editor, range2) => {
    try {
      return DOMEditor.hasRange(editor, range2);
    } catch {
    }
    return false;
  };
  var hasSelectableTarget = (editor, target) => {
    try {
      return DOMEditor.hasSelectableTarget(editor, target);
    } catch {
    }
    return false;
  };
  var hasTarget = (editor, target) => {
    try {
      return DOMEditor.hasTarget(editor, target);
    } catch {
    }
    return false;
  };
  var isComposing = (editor) => DOMEditor.isComposing(editor);
  var isFocused = (editor) => DOMEditor.isFocused(editor);
  var isReadOnly = (editor) => DOMEditor.isReadOnly(editor);
  var isTargetInsideNonReadonlyVoid = (editor, target) => {
    try {
      return DOMEditor.isTargetInsideNonReadonlyVoid(editor, target);
    } catch {
    }
    return false;
  };
  var toDOMNode = (editor, node2) => {
    try {
      return DOMEditor.toDOMNode(editor, node2);
    } catch {
    }
  };
  var toDOMPoint = (editor, point2) => {
    try {
      return DOMEditor.toDOMPoint(editor, point2);
    } catch {
    }
  };
  var toDOMRange = (editor, range2) => {
    try {
      return DOMEditor.toDOMRange(editor, range2);
    } catch {
    }
  };
  var toSlateNode = (editor, domNode) => {
    try {
      return DOMEditor.toSlateNode(editor, domNode);
    } catch {
    }
  };
  var toSlatePoint = (editor, domPoint, options) => {
    try {
      return DOMEditor.toSlatePoint(editor, domPoint, options);
    } catch {
    }
  };
  var toSlateRange = (editor, domRange, options) => {
    try {
      return DOMEditor.toSlateRange(editor, domRange, options);
    } catch {
    }
  };
  var edgeBlocks = (editor, { at: _at, ...options } = {}) => {
    const at2 = _at ?? editor.selection;
    if (!at2)
      return null;
    const [start2, end2] = editor.api.edges(at2 ?? editor.selection);
    const startBlock = editor.api.block({
      at: start2,
      ...options
    });
    if (!startBlock)
      return null;
    const endBlock = editor.api.block({
      at: end2,
      ...options
    });
    if (!endBlock)
      return null;
    return [startBlock, endBlock];
  };
  var block = (editor, { above: above2, highest, ...options } = {}) => {
    var _a2;
    if (highest) {
      const target = options.at ?? editor.selection;
      if (!target)
        return;
      const index = (_a2 = editor.api.path(target)) == null ? void 0 : _a2[0];
      if (index === void 0)
        return;
      return editor.api.node([index]);
    }
    if (above2) {
      return editor.api.above({
        ...options,
        block: true
      });
    }
    return editor.api.node({
      ...options,
      block: true,
      mode: "lowest"
    });
  };
  var blocks = (editor, options) => {
    return [
      ...editor.api.nodes({
        ...options,
        block: true
      })
    ];
  };
  var LEGACY_TRANSFORMS = /* @__PURE__ */ new Set([
    "addMark",
    "apply",
    "blur",
    "collapse",
    "delete",
    "deleteBackward",
    "deleteForward",
    "deleteFragment",
    "deselect",
    "deselectDOM",
    "focus",
    "insertBreak",
    "insertData",
    "insertFragment",
    "insertFragmentData",
    "insertNode",
    "insertNodes",
    "insertSoftBreak",
    "insertText",
    "insertTextData",
    "liftNodes",
    "mergeNodes",
    "move",
    "moveNodes",
    "normalize",
    "normalizeNode",
    "redo",
    "removeMark",
    "removeNodes",
    "select",
    "setFragmentData",
    "setNodes",
    "setPoint",
    "setSelection",
    "setSplittingOnce",
    "splitNodes",
    "undo",
    "unsetNodes",
    "unwrapNodes",
    "withMerging",
    "withNewBatch",
    "withoutMerging",
    "withoutNormalizing",
    "withoutSaving",
    "wrapNodes",
    "writeHistory"
  ]);
  var LEGACY_API = /* @__PURE__ */ new Set([
    "above",
    "after",
    "before",
    "edges",
    "elementReadOnly",
    "end",
    "findDocumentOrShadowRoot",
    "findEventRange",
    "findKey",
    "findPath",
    "first",
    "fragment",
    "getDirtyPaths",
    "getFragment",
    "getMarks",
    "getWindow",
    "hasBlocks",
    "hasDOMNode",
    "hasEditableTarget",
    "hasInlines",
    "hasPath",
    "hasRange",
    "hasSelectableTarget",
    "hasTarget",
    "hasTexts",
    "highestBlock",
    "isBlock",
    "isComposing",
    "isEdge",
    "isElementReadOnly",
    "isEmpty",
    "isEnd",
    "isFocused",
    "isInline",
    "isMerging",
    "isNormalizing",
    "isReadOnly",
    "isSaving",
    "isSelectable",
    "isSplittingOnce",
    "isStart",
    "isTargetInsideNonReadonlyVoid",
    "isVoid",
    "last",
    "leaf",
    "levels",
    "markableVoid",
    // 'marks',
    "next",
    "node",
    "nodes",
    "normalize",
    "onChange",
    "operations",
    "parent",
    "path",
    "pathRef",
    "pathRefs",
    "point",
    "pointRef",
    "pointRefs",
    "positions",
    "previous",
    "range",
    "rangeRef",
    "rangeRefs",
    "selection",
    "setNormalizing",
    "shouldMergeNodesRemovePrevNode",
    "shouldNormalize",
    "start",
    "string",
    "toDOMNode",
    "toDOMPoint",
    "toDOMRange",
    "toSlateNode",
    "toSlatePoint",
    "toSlateRange",
    "unhangRange",
    "void"
  ]);
  var assignLegacyTransforms = (editor, transforms) => {
    if (!transforms)
      return;
    const e3 = editor;
    const legacyTransforms = Object.entries(transforms).reduce(
      (acc, [key, value]) => {
        if (LEGACY_TRANSFORMS.has(key)) {
          acc[key] = value;
        }
        return acc;
      },
      {}
    );
    Object.assign(e3, legacyTransforms);
  };
  var assignLegacyApi = (editor, api) => {
    if (!api)
      return;
    const e3 = editor;
    const legacyApi = Object.entries(api).reduce(
      (acc, [key, value]) => {
        if (LEGACY_API.has(key)) {
          acc[key] = value;
        }
        return acc;
      },
      {}
    );
    Object.assign(e3, legacyApi);
    if (api.marks) {
      e3.getMarks = api.marks;
    }
  };
  var syncLegacyMethods = (editor) => {
    const e3 = editor;
    LEGACY_API.forEach((key) => {
      if (e3[key]) {
        if (key === "getMarks") {
          e3.api.marks = e3.getMarks;
        } else {
          e3.api[key] = e3[key];
        }
      }
    });
    LEGACY_TRANSFORMS.forEach((key) => {
      if (e3[key]) {
        e3.tf[key] = e3[key];
      }
    });
  };
  var createPathRef = (editor, at2, options) => pathRef(editor, at2, options);
  var createPointRef = (editor, point2, options) => pointRef(editor, point2, options);
  var getAt = (editor, at2) => {
    if (at2 && isPlainObject$3(at2) && NodeApi.isNode(at2)) {
      return editor.api.findPath(at2);
    }
    return at2 ?? void 0;
  };
  var getEndPoint = (editor, at2, options = {}) => {
    try {
      if (options.previous) {
        const prevEntry = editor.api.previous({ at: getAt(editor, at2) });
        if (!prevEntry)
          return;
        return end(editor, prevEntry[1]);
      }
      return end(editor, getAt(editor, at2));
    } catch {
    }
  };
  var getLeafNode = (editor, at2, options) => {
    try {
      return leaf$1(editor, getAt(editor, at2), options);
    } catch {
    }
  };
  var getPointAfter = (editor, at2, options) => {
    try {
      return after(editor, getAt(editor, at2), options);
    } catch {
    }
  };
  var getPointBefore = (editor, at2, options) => {
    if (!options || !options.match && !options.matchString) {
      try {
        return before(editor, getAt(editor, at2), options);
      } catch {
      }
      return;
    }
    const unitOffset = !options.unit || options.unit === "offset";
    const matchStrings = options.matchString ? castArray4$1(options.matchString) : [""];
    const matchByRegex = options.matchByRegex ?? false;
    let point2;
    matchStrings.some((matchString) => {
      var _a2, _b;
      let beforeAt = at2;
      let previousBeforePoint = editor.api.point(at2, { edge: "end" });
      const stackLength = matchString.length + 1;
      const stack = Array.from({ length: stackLength });
      let count = 0;
      while (true) {
        const beforePoint = before(
          editor,
          getAt(editor, beforeAt),
          options
        );
        if (!beforePoint) {
          if (options.matchBlockStart) {
            point2 = previousBeforePoint;
          }
          return;
        }
        if (editor.api.isAt({
          at: {
            anchor: beforePoint,
            focus: previousBeforePoint
          },
          blocks: true
        })) {
          if (options.matchBlockStart) {
            point2 = previousBeforePoint;
          }
          return;
        }
        const beforeString = editor.api.string({
          anchor: beforePoint,
          focus: previousBeforePoint
        });
        let beforeStringToMatch = beforeString;
        if (unitOffset && stackLength) {
          stack.unshift({
            point: beforePoint,
            text: beforeString
          });
          stack.pop();
          beforeStringToMatch = map$1(stack.slice(0, -1), "text").join("");
        }
        const isMatched = matchByRegex ? !!matchString.match(beforeStringToMatch) : beforeStringToMatch === matchString;
        if (isMatched || ((_a2 = options.match) == null ? void 0 : _a2.call(options, { at: at2, beforePoint, beforeString: beforeStringToMatch }))) {
          if (options.afterMatch) {
            if (stackLength && unitOffset) {
              point2 = (_b = stack.at(-1)) == null ? void 0 : _b.point;
              return !!point2;
            }
            point2 = previousBeforePoint;
            return true;
          }
          point2 = beforePoint;
          return true;
        }
        previousBeforePoint = beforePoint;
        beforeAt = beforePoint;
        count += 1;
        if (!options.skipInvalid && (!matchString || count >= matchString.length))
          return;
      }
    });
    return point2;
  };
  var getStartPoint = (editor, at2, options = {}) => {
    try {
      if (options.next) {
        const nextEntry = editor.api.next({ at: getAt(editor, at2) });
        if (!nextEntry)
          return;
        return start(editor, nextEntry[1]);
      }
      return start(editor, getAt(editor, at2));
    } catch {
    }
  };
  var getVoidNode = (editor, options) => getVoid(editor, {
    ...options,
    at: getAt(editor, options == null ? void 0 : options.at)
  });
  var isBlock = (editor, value) => ElementApi.isElement(value) && isBlock$1(editor, value);
  function castArray2(value) {
    return Array.isArray(value) ? value : [value];
  }
  var match$2 = (obj, path2, predicate) => {
    if (!predicate)
      return true;
    if (typeof predicate === "object") {
      return Object.entries(predicate).every(([key, value]) => {
        const values = castArray2(value);
        return values.includes(obj[key]);
      });
    }
    return predicate(obj, path2);
  };
  var getMatch = (editor, { id: id2, block: block2, empty, match: matchObjOrFn, text } = {}) => {
    let hasMatch = false;
    let matchFn = () => true;
    if (text !== void 0) {
      hasMatch = true;
      matchFn = combineMatch(matchFn, (n2) => TextApi.isText(n2) === text);
    }
    if (empty !== void 0) {
      hasMatch = true;
      matchFn = combineMatch(matchFn, (n2) => {
        return TextApi.isText(n2) ? n2.text.length > 0 === !empty : editor.api.isEmpty(n2) === empty;
      });
    }
    if (block2 !== void 0) {
      hasMatch = true;
      matchFn = combineMatch(matchFn, (n2) => editor.api.isBlock(n2) === block2);
    }
    if (id2 !== void 0) {
      hasMatch = true;
      matchFn = combineMatch(matchFn, (n2) => {
        return id2 === true && !!n2.id || n2.id === id2;
      });
    }
    if (typeof matchObjOrFn === "object") {
      hasMatch = true;
      matchFn = combineMatch(matchFn, (n2, p2) => match$2(n2, p2, matchObjOrFn));
    } else if (typeof matchObjOrFn === "function") {
      hasMatch = true;
      matchFn = combineMatch(matchFn, matchObjOrFn);
    }
    return hasMatch ? matchFn : void 0;
  };
  var getQueryOptions = (editor, { id: id2, empty, match: match2, text, ...options } = {}) => {
    const { at: at2, block: block2 } = options;
    return {
      ...options,
      at: getAt(editor, at2),
      match: getMatch(editor, { id: id2, block: block2, empty, match: match2, text })
    };
  };
  var combineMatch = (match1, match2) => {
    return (node2, path2) => {
      return match1(node2, path2) && (!match2 || match2(node2, path2));
    };
  };
  function* nodes(editor, options = {}) {
    options = getQueryOptions(editor, options);
    const {
      ignoreNonSelectable = false,
      mode = "all",
      reverse = false,
      universal = false,
      voids = false
    } = options;
    const at2 = getAt(editor, options.at) ?? editor.selection;
    let match2 = getMatch(editor, options);
    if (!match2) {
      match2 = () => true;
    }
    if (!at2) {
      return;
    }
    let from;
    let to2;
    if (SpanApi.isSpan(at2)) {
      from = at2[0];
      to2 = at2[1];
    } else {
      const first2 = editor.api.path(at2, { edge: "start" });
      const last2 = editor.api.path(at2, { edge: "end" });
      from = reverse ? last2 : first2;
      to2 = reverse ? first2 : last2;
      if (!first2 || !last2) {
        return;
      }
    }
    const nodeEntries = NodeApi.nodes(editor, {
      from,
      reverse,
      to: to2,
      pass: ([node2]) => {
        if (!ElementApi.isElement(node2))
          return false;
        if (!voids && (editor.api.isVoid(node2) || editor.api.isElementReadOnly(node2))) {
          return true;
        }
        if (ignoreNonSelectable && !editor.api.isSelectable(node2)) {
          return true;
        }
        return false;
      }
    });
    const matches = [];
    let hit;
    for (const [node2, path2] of nodeEntries) {
      if (ignoreNonSelectable && ElementApi.isElement(node2) && !editor.api.isSelectable(node2)) {
        continue;
      }
      const isLower = hit && PathApi.compare(path2, hit[1]) === 0;
      if (mode === "highest" && isLower) {
        continue;
      }
      if (!match2(node2, path2)) {
        if (universal && !isLower && TextApi.isText(node2)) {
          return;
        } else {
          continue;
        }
      }
      if (mode === "lowest" && isLower) {
        hit = [node2, path2];
        continue;
      }
      const emit = mode === "lowest" ? hit : [node2, path2];
      if (emit) {
        if (universal) {
          matches.push(emit);
        } else {
          yield emit;
        }
      }
      hit = [node2, path2];
    }
    if (mode === "lowest" && hit) {
      if (universal) {
        matches.push(hit);
      } else {
        yield hit;
      }
    }
    if (universal) {
      yield* matches;
    }
  }
  var withoutNormalizing = (editor, fn) => {
    let normalized = false;
    withoutNormalizing$1(editor, () => {
      normalized = !!fn();
    });
    return normalized;
  };
  var select = (editor, target, options = {}) => {
    var _a2;
    const { edge, focus: focus2, next: next2, previous: previous2 } = options;
    if (focus2) {
      editor.tf.focus();
    }
    if (next2 || previous2) {
      const at22 = getAt(editor, target) ?? editor.selection;
      if (!at22)
        return;
      const path2 = editor.api.path(at22);
      if (!path2)
        return;
      const point2 = previous2 ? editor.api.end(path2, { previous: true }) : editor.api.start(path2, { next: true });
      if (!point2)
        return;
      select$1(editor, point2);
      return;
    }
    if (edge) {
      const at22 = getAt(editor, target) ?? editor.selection;
      if (!at22)
        return;
      const path2 = PathApi.isPath(at22) ? at22 : (_a2 = editor.api.node({ at: at22, block: true })) == null ? void 0 : _a2[1];
      if (!path2)
        return;
      const point2 = edge === "end" ? editor.api.end(path2) : editor.api.start(path2);
      if (!point2)
        return;
      select$1(editor, point2);
      return;
    }
    const at2 = getAt(editor, target);
    if (!at2)
      return;
    select$1(editor, at2);
  };
  function castArray4(value) {
    return Array.isArray(value) ? value : [value];
  }
  var queryNode = (entry, { allow, exclude, filter: filter2, level, maxLevel } = {}) => {
    if (!entry)
      return false;
    const [node2, path2] = entry;
    if (level) {
      const levels2 = castArray4(level);
      if (!levels2.includes(path2.length)) {
        return false;
      }
    }
    if (maxLevel && path2.length > maxLevel) {
      return false;
    }
    if (filter2 && !filter2(entry)) {
      return false;
    }
    if (allow) {
      const allows = castArray4(allow);
      if (allows.length > 0 && !allows.includes(node2.type)) {
        return false;
      }
    }
    if (exclude) {
      const excludes = castArray4(exclude);
      if (excludes.length > 0 && excludes.includes(node2.type)) {
        return false;
      }
    }
    return true;
  };
  var descendant = (editor, options) => {
    try {
      const {
        at: at2 = editor.selection,
        match: _match,
        reverse = false,
        voids = false
      } = options;
      if (!at2)
        return;
      let from;
      let to2;
      if (SpanApi.isSpan(at2)) {
        [from, to2] = at2;
      } else if (RangeApi.isRange(at2)) {
        const first2 = editor.api.path(at2, { edge: "start" });
        const last2 = editor.api.path(at2, { edge: "end" });
        from = reverse ? last2 : first2;
        to2 = reverse ? first2 : last2;
      }
      let root2 = [editor, []];
      if (PathApi.isPath(at2)) {
        root2 = editor.api.node(at2);
      }
      const nodeEntries = NodeApi.descendants(root2[0], {
        from,
        reverse,
        to: to2,
        pass: ([n2]) => voids ? false : editor.api.isVoid(n2)
      });
      for (const [node2, path2] of nodeEntries) {
        if (match$2(node2, path2, _match)) {
          return [node2, at2.concat(path2)];
        }
      }
    } catch {
      return void 0;
    }
  };
  var mark = (editor, key) => {
    const marks2 = editor.api.marks();
    return marks2 == null ? void 0 : marks2[key];
  };
  var hasMark = (editor, key) => {
    return !!editor.api.mark(key);
  };
  var isSelected = (editor, target, options = {}) => {
    const { contains = false } = options;
    if (!editor.selection)
      return false;
    const range2 = RangeApi.isRange(target) ? target : editor.api.range(target);
    if (!range2)
      return false;
    if (contains) {
      return RangeApi.contains(editor.selection, range2);
    }
    return !!RangeApi.intersection(editor.selection, range2);
  };
  var isAt = (editor, {
    at: at2 = editor.selection,
    block: block2,
    blocks: blocks2,
    end: end2,
    start: start2,
    text,
    word,
    ...options
  } = {}) => {
    if (!at2)
      return false;
    if (PointApi.isPoint(at2)) {
      if (word && end2) {
        const after2 = editor.api.after(at2);
        if (!after2)
          return true;
        const afterRange = editor.api.range(at2, after2);
        const afterText = editor.api.string(afterRange);
        return /^(?:\s|$)/.test(afterText);
      }
      return false;
    }
    if (RangeApi.isRange(at2)) {
      const [startPoint, endPoint] = RangeApi.edges(at2);
      if (text) {
        return PathApi.equals(startPoint.path, endPoint.path);
      }
      const startBlock = editor.api.block({
        at: startPoint,
        ...options
      });
      const endBlock = editor.api.block({
        at: endPoint,
        ...options
      });
      if (blocks2) {
        if (!startBlock && !endBlock)
          return false;
        if (!startBlock || !endBlock)
          return true;
        return !PathApi.equals(startBlock[1], endBlock[1]);
      }
      if (!startBlock || !endBlock)
        return false;
      if (block2) {
        return PathApi.equals(startBlock[1], endBlock[1]);
      }
      if (start2) {
        return editor.api.isStart(startPoint, startBlock[1]) || RangeApi.isExpanded(at2) && editor.api.isStart(endPoint, startBlock[1]);
      }
      if (end2) {
        return editor.api.isEnd(endPoint, endBlock[1]);
      }
    }
    return false;
  };
  var isEditorEnd = (editor) => {
    if (editor.selection) {
      const point2 = editor.selection.focus;
      const endPoint = editor.api.end([]);
      return endPoint.offset === 0 && editor.api.isEnd(point2, point2) && PathApi.equals(PathApi.next(PathApi.parent(point2.path)), endPoint.path);
    }
    return false;
  };
  var isText = (editor, at2) => {
    var _a2;
    const node2 = (_a2 = editor.api.node(at2)) == null ? void 0 : _a2[0];
    return TextApi.isText(node2);
  };
  var nodesRange = (editor, nodes2) => {
    if (nodes2.length === 0)
      return;
    const firstBlockPath = nodes2[0][1];
    const lastBlockPath = nodes2.at(-1)[1];
    return editor.api.range(firstBlockPath, lastBlockPath);
  };
  function prop$1({
    key,
    defaultValue,
    getProp: getProp2,
    mode = "block",
    nodes: nodes2
  }) {
    if (nodes2.length === 0)
      return defaultValue;
    const getNodeValue = getProp2 ?? ((node2) => {
      return node2[key];
    });
    let value;
    for (const node2 of nodes2) {
      if (mode === "block" || mode === "all") {
        const nodeValue = getNodeValue(node2);
        if (nodeValue !== void 0) {
          if (value === void 0) {
            value = nodeValue;
          } else if (value !== nodeValue) {
            return;
          }
          if (mode === "block")
            continue;
        } else if (mode === "block") {
          return defaultValue;
        }
      }
      if (mode === "text" || mode === "all") {
        const textEntries = Array.from(NodeApi.texts(node2));
        for (const [text] of textEntries) {
          const textValue = getNodeValue(text);
          if (textValue !== void 0) {
            if (value === void 0) {
              value = textValue;
            } else if (value !== textValue) {
              return;
            }
          } else if (mode === "text") {
            return defaultValue;
          }
        }
      }
    }
    return value;
  }
  var t = (t2) => "object" == typeof t2 && null != t2 && 1 === t2.nodeType;
  var e = (t2, e3) => (!e3 || "hidden" !== t2) && ("visible" !== t2 && "clip" !== t2);
  var n = (t2, n2) => {
    if (t2.clientHeight < t2.scrollHeight || t2.clientWidth < t2.scrollWidth) {
      const o3 = getComputedStyle(t2, null);
      return e(o3.overflowY, n2) || e(o3.overflowX, n2) || ((t3) => {
        const e3 = ((t4) => {
          if (!t4.ownerDocument || !t4.ownerDocument.defaultView)
            return null;
          try {
            return t4.ownerDocument.defaultView.frameElement;
          } catch (t5) {
            return null;
          }
        })(t3);
        return !!e3 && (e3.clientHeight < t3.scrollHeight || e3.clientWidth < t3.scrollWidth);
      })(t2);
    }
    return false;
  };
  var o = (t2, e3, n2, o3, l2, r2, i2, s2) => r2 < t2 && i2 > e3 || r2 > t2 && i2 < e3 ? 0 : r2 <= t2 && s2 <= n2 || i2 >= e3 && s2 >= n2 ? r2 - t2 - o3 : i2 > e3 && s2 < n2 || r2 < t2 && s2 > n2 ? i2 - e3 + l2 : 0;
  var l = (t2) => {
    const e3 = t2.parentElement;
    return null == e3 ? t2.getRootNode().host || null : e3;
  };
  var r$1 = (e3, r2) => {
    var i2, s2, d2, h;
    if ("undefined" == typeof document)
      return [];
    const { scrollMode: c2, block: f2, inline: u2, boundary: a2, skipOverflowHiddenElements: g } = r2, p2 = "function" == typeof a2 ? a2 : (t2) => t2 !== a2;
    if (!t(e3))
      throw new TypeError("Invalid target");
    const m = document.scrollingElement || document.documentElement, w2 = [];
    let W = e3;
    for (; t(W) && p2(W); ) {
      if (W = l(W), W === m) {
        w2.push(W);
        break;
      }
      null != W && W === document.body && n(W) && !n(document.documentElement) || null != W && n(W, g) && w2.push(W);
    }
    const b = null != (s2 = null == (i2 = window.visualViewport) ? void 0 : i2.width) ? s2 : innerWidth, H = null != (h = null == (d2 = window.visualViewport) ? void 0 : d2.height) ? h : innerHeight, { scrollX: y, scrollY: M } = window, { height: v, width: E, top: x, right: C, bottom: I, left: R } = e3.getBoundingClientRect(), { top: T, right: B, bottom: F, left: V } = ((t2) => {
      const e4 = window.getComputedStyle(t2);
      return { top: parseFloat(e4.scrollMarginTop) || 0, right: parseFloat(e4.scrollMarginRight) || 0, bottom: parseFloat(e4.scrollMarginBottom) || 0, left: parseFloat(e4.scrollMarginLeft) || 0 };
    })(e3);
    let k = "start" === f2 || "nearest" === f2 ? x - T : "end" === f2 ? I + F : x + v / 2 - T + F, D = "center" === u2 ? R + E / 2 - V + B : "end" === u2 ? C + B : R - V;
    const L = [];
    for (let t2 = 0; t2 < w2.length; t2++) {
      const e4 = w2[t2], { height: l2, width: r3, top: i22, right: s22, bottom: d22, left: h2 } = e4.getBoundingClientRect();
      if ("if-needed" === c2 && x >= 0 && R >= 0 && I <= H && C <= b && (e4 === m && !n(e4) || x >= i22 && I <= d22 && R >= h2 && C <= s22))
        return L;
      const a22 = getComputedStyle(e4), g2 = parseInt(a22.borderLeftWidth, 10), p22 = parseInt(a22.borderTopWidth, 10), W2 = parseInt(a22.borderRightWidth, 10), T2 = parseInt(a22.borderBottomWidth, 10);
      let B2 = 0, F2 = 0;
      const V2 = "offsetWidth" in e4 ? e4.offsetWidth - e4.clientWidth - g2 - W2 : 0, S = "offsetHeight" in e4 ? e4.offsetHeight - e4.clientHeight - p22 - T2 : 0, X = "offsetWidth" in e4 ? 0 === e4.offsetWidth ? 0 : r3 / e4.offsetWidth : 0, Y = "offsetHeight" in e4 ? 0 === e4.offsetHeight ? 0 : l2 / e4.offsetHeight : 0;
      if (m === e4)
        B2 = "start" === f2 ? k : "end" === f2 ? k - H : "nearest" === f2 ? o(M, M + H, H, p22, T2, M + k, M + k + v, v) : k - H / 2, F2 = "start" === u2 ? D : "center" === u2 ? D - b / 2 : "end" === u2 ? D - b : o(y, y + b, b, g2, W2, y + D, y + D + E, E), B2 = Math.max(0, B2 + M), F2 = Math.max(0, F2 + y);
      else {
        B2 = "start" === f2 ? k - i22 - p22 : "end" === f2 ? k - d22 + T2 + S : "nearest" === f2 ? o(i22, d22, l2, p22, T2 + S, k, k + v, v) : k - (i22 + l2 / 2) + S / 2, F2 = "start" === u2 ? D - h2 - g2 : "center" === u2 ? D - (h2 + r3 / 2) + V2 / 2 : "end" === u2 ? D - s22 + W2 + V2 : o(h2, s22, r3, g2, W2 + V2, D, D + E, E);
        const { scrollLeft: t3, scrollTop: n2 } = e4;
        B2 = 0 === Y ? 0 : Math.max(0, Math.min(n2 + B2 / Y, e4.scrollHeight - l2 / Y + S)), F2 = 0 === X ? 0 : Math.max(0, Math.min(t3 + F2 / X, e4.scrollWidth - r3 / X + V2)), k += n2 - B2, D += t3 - F2;
      }
      L.push({ el: e4, top: B2, left: F2 });
    }
    return L;
  };
  var o2 = (t2) => false === t2 ? { block: "end", inline: "nearest" } : ((t3) => t3 === Object(t3) && 0 !== Object.keys(t3).length)(t2) ? t2 : { block: "start", inline: "nearest" };
  function e2(e3, r2) {
    if (!e3.isConnected || !((t2) => {
      let o3 = t2;
      for (; o3 && o3.parentNode; ) {
        if (o3.parentNode === document)
          return true;
        o3 = o3.parentNode instanceof ShadowRoot ? o3.parentNode.host : o3.parentNode;
      }
      return false;
    })(e3))
      return;
    const n2 = ((t2) => {
      const o3 = window.getComputedStyle(t2);
      return { top: parseFloat(o3.scrollMarginTop) || 0, right: parseFloat(o3.scrollMarginRight) || 0, bottom: parseFloat(o3.scrollMarginBottom) || 0, left: parseFloat(o3.scrollMarginLeft) || 0 };
    })(e3);
    if (((t2) => "object" == typeof t2 && "function" == typeof t2.behavior)(r2))
      return r2.behavior(r$1(e3, r2));
    const l2 = "boolean" == typeof r2 || null == r2 ? void 0 : r2.behavior;
    for (const { el: a2, top: i2, left: s2 } of r$1(e3, o2(r2))) {
      const t2 = i2 - n2.top + n2.bottom, o3 = s2 - n2.left + n2.right;
      a2.scroll({ top: t2, left: o3, behavior: l2 });
    }
  }
  var defaultOptions$1 = {
    scrollMode: "if-needed"
  };
  function scrollIntoView(editor, target, options = defaultOptions$1) {
    requestAnimationFrame(() => {
      let domRange;
      if (PointApi.isPoint(target)) {
        const { offset = 0, path: path2 } = target;
        domRange = editor.api.toDOMRange({
          anchor: { offset, path: path2 },
          focus: { offset, path: path2 }
        });
      } else {
        domRange = target;
      }
      if (!domRange)
        return;
      const leafEl = domRange.startContainer.parentElement;
      leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange);
      e2(leafEl, options);
      setTimeout(() => delete leafEl.getBoundingClientRect, 0);
    });
  }
  var some = (editor, options) => {
    return !!editor.api.node(options);
  };
  var above = (editor, options) => {
    try {
      return above$1(editor, getQueryOptions(editor, options));
    } catch {
      return void 0;
    }
  };
  var addMark = (editor, key, value) => addMark$1(editor, key, value);
  var createRangeRef = (editor, range2, options) => rangeRef(editor, range2, options);
  var deleteBackward = (editor, unit = "character") => {
    deleteBackward$1(editor, unit);
  };
  var deleteForward = (editor, unit = "character") => {
    deleteForward$1(editor, unit);
  };
  var deleteFragment = (editor, options) => deleteFragment$1(editor, options);
  var node = (editor, atOrOptions, nodeOptions) => {
    try {
      if (LocationApi.isAt(atOrOptions)) {
        const at2 = getAt(editor, atOrOptions);
        return node$1(editor, at2, nodeOptions);
      }
      const options = atOrOptions;
      const nodeEntries = editor.api.nodes(options);
      return nodeEntries.next().value;
    } catch {
      return void 0;
    }
  };
  var path = (editor, at2, options) => {
    try {
      return path$1(editor, getAt(editor, at2), options);
    } catch {
    }
  };
  var getEdgePoints = (editor, at2) => {
    try {
      return edges(editor, getAt(editor, at2));
    } catch {
    }
  };
  var getEditorString = (editor, at2 = editor.selection, options) => {
    if (!at2)
      return "";
    try {
      return string(editor, getAt(editor, at2), options);
    } catch {
      return "";
    }
  };
  var getFirstNode = (editor, at2) => {
    try {
      return first(editor, getAt(editor, at2));
    } catch {
    }
  };
  var unwrapStructuralNodes = (nodes2, { structuralTypes } = {}) => {
    const unwrap = (nodes3, acc = []) => {
      nodes3.forEach((node2) => {
        if (structuralTypes == null ? void 0 : structuralTypes.includes(node2.type)) {
          return unwrap(node2.children, acc);
        }
        acc.push(node2);
      });
      return acc;
    };
    return unwrap(nodes2);
  };
  var getFragment = (editor, at2, options) => {
    if (at2 === null)
      return [];
    try {
      const result = at2 === void 0 ? getFragment$1(editor) : fragment(editor, getAt(editor, at2));
      if (result.length > 0 && (options == null ? void 0 : options.structuralTypes)) {
        return unwrapStructuralNodes(result, options);
      }
      return result;
    } catch {
      return [];
    }
  };
  var getLevels = (editor, options) => {
    return levels(editor, getQueryOptions(editor, options));
  };
  var getMarks = (editor) => marks(editor);
  var getPathRefs = (editor) => pathRefs(editor);
  var getPoint = (editor, at2, options) => {
    try {
      return point(editor, getAt(editor, at2), options);
    } catch {
    }
  };
  var getPointRefs = (editor) => pointRefs(editor);
  var getPositions = (editor, options) => positions(editor, {
    ...options,
    at: getAt(editor, options == null ? void 0 : options.at)
  });
  var getRangeRefs = (editor) => rangeRefs(editor);
  var hasBlocks = (editor, element) => hasBlocks$1(editor, element);
  var hasInlines = (editor, element) => hasInlines$1(editor, element);
  var hasTexts = (editor, element) => hasTexts$1(editor, element);
  var insertBreak = (editor) => insertBreak$1(editor);
  var insertNode = (editor, node2, options) => editor.tf.insertNodes(node2, options);
  var isEdgePoint = (editor, point2, at2) => isEdge(editor, point2, at2);
  var isEditorNormalizing = (editor) => isNormalizing(editor);
  var isElementReadOnly = (editor, options) => elementReadOnly(editor, options);
  var isEmpty = (editor, target = [], options) => {
    var _a2;
    if (target === null)
      return true;
    if (PathApi.isPath(target) && target.length === 0 || NodeApi.isEditor(target)) {
      return editor.children.length === 1 && isEmpty$1(editor, editor.children[0]);
    }
    if (options == null ? void 0 : options.after) {
      const blockAbove = editor.api.block({ above: true, at: target });
      if (!blockAbove)
        return false;
      const point2 = editor.api.point(target);
      const selectionParentEntry = editor.api.parent(target);
      if (!selectionParentEntry)
        return false;
      const [, selectionParentPath] = selectionParentEntry;
      if (!editor.api.isEnd(point2, selectionParentPath))
        return false;
      const siblingNodes = Array.from(
        NodeApi.children(editor, blockAbove[1], {
          from: PathApi.lastIndex(point2.path) + 1
        })
      ).map(([node2]) => node2);
      if (siblingNodes.length > 0) {
        for (const siblingNode of siblingNodes) {
          if (TextApi.isText(siblingNode) && siblingNode.text) {
            return false;
          }
        }
      } else {
        return editor.api.isEnd(point2, blockAbove[1]);
      }
      return true;
    }
    if (PathApi.isPath(target)) {
      return isEmpty$1(editor, (_a2 = editor.api.node(target)) == null ? void 0 : _a2[0]);
    }
    if (options == null ? void 0 : options.block) {
      const block2 = editor.api.block({ at: target });
      if (!block2)
        return false;
      target = block2[0];
    }
    if (!NodeApi.isNode(target)) {
      const nodes2 = editor.api.nodes({ at: target, ...options });
      for (const node2 of nodes2) {
        if (!isEmpty$1(editor, node2[0])) {
          return false;
        }
      }
      return true;
    }
    return isEmpty$1(editor, target);
  };
  var isEndPoint = (editor, point2, at2) => !!point2 && isEnd(editor, point2, at2);
  var isStartPoint = (editor, point2, at2) => !!point2 && isStart(editor, point2, at2);
  var getNodeAtLevel = (editor, [node2, path2], level) => {
    const levelPath = path2.slice(0, level + 1);
    const entry = editor.api.node(levelPath);
    if (!entry)
      return [node2, path2];
    return entry;
  };
  var last$2 = (editor, at2, options = {}) => {
    try {
      const { level } = options;
      const lastNodeEntry = last$3(
        editor,
        getAt(editor, at2)
      );
      if (lastNodeEntry && typeof level === "number") {
        if (editor.children.length === 0) {
          return;
        }
        return getNodeAtLevel(editor, lastNodeEntry, level);
      }
      return lastNodeEntry;
    } catch {
    }
  };
  var next = (editor, options = {}) => {
    const {
      from = "after",
      mode = from === "child" ? "all" : "lowest",
      voids = false
    } = options;
    let match2 = getMatch(editor, options);
    const at2 = getAt(editor, options.at) ?? editor.selection;
    if (!at2) {
      return;
    }
    let start2;
    if (from === "child" && PathApi.isPath(at2)) {
      const path2 = PathApi.firstChild(at2);
      const fromNode = editor.api.node(path2);
      if (fromNode) {
        start2 = path2;
        match2 = combineMatch((n2, p2) => {
          return !PathApi.isAncestor(p2, at2) && !PathApi.equals(p2, at2);
        }, match2);
      }
    }
    if (!start2) {
      const pointAfterLocation = editor.api.after(at2, { voids });
      if (!pointAfterLocation)
        return;
      start2 = pointAfterLocation.path;
    }
    const [, to2] = editor.api.last([]);
    const span = [start2, to2];
    if (PathApi.isPath(at2) && at2.length === 0) {
      return;
    }
    if (match2 == null) {
      if (PathApi.isPath(at2)) {
        const [parent2] = editor.api.parent(at2);
        match2 = (n2) => parent2.children.includes(n2);
      } else {
        match2 = () => true;
      }
    }
    const [next2] = editor.api.nodes({ at: span, match: match2, mode, voids });
    return next2;
  };
  var normalizeEditor = (editor, options) => normalize$2(editor, options);
  var parent$2 = (editor, at2, options) => {
    try {
      return parent$3(editor, getAt(editor, at2), options);
    } catch {
    }
  };
  var previousBase = (editor, options) => {
    const { from = "after", mode = "lowest", voids = false } = options;
    let match2 = getMatch(editor, options);
    const at2 = getAt(editor, options.at) ?? editor.selection;
    if (!at2) {
      return;
    }
    let start2;
    if (from === "parent" && PathApi.isPath(at2) && at2.length > 1) {
      start2 = at2;
      match2 = combineMatch((n2, p2) => {
        return !PathApi.isAfter(p2, at2) && !PathApi.equals(p2, at2);
      }, match2);
    }
    if (!start2) {
      const pointBeforeLocation = editor.api.before(at2, { voids });
      if (!pointBeforeLocation)
        return;
      start2 = pointBeforeLocation.path;
    }
    const [, to2] = editor.api.first([]);
    const span = [start2, to2];
    if (PathApi.isPath(at2) && at2.length === 0) {
      return;
    }
    if (match2 == null) {
      if (PathApi.isPath(at2)) {
        const [parent2] = editor.api.parent(at2);
        match2 = (n2) => parent2.children.includes(n2);
      } else {
        match2 = () => true;
      }
    }
    const [previous2] = editor.api.nodes({
      at: span,
      match: match2,
      mode,
      reverse: true,
      voids
    });
    return previous2;
  };
  var previous = (editor, options) => {
    const getPrevious = (o3) => {
      try {
        return previousBase(editor, o3);
      } catch {
      }
    };
    if (options == null ? void 0 : options.sibling) {
      const path2 = getQueryOptions(editor, options).at;
      if (!path2)
        return;
      const previousPath = PathApi.previous(path2);
      if (!previousPath)
        return;
      const previousNode = editor.api.node(previousPath);
      return previousNode;
    }
    if (!((options == null ? void 0 : options.id) && (options == null ? void 0 : options.block))) {
      return getPrevious(options);
    }
    const block2 = editor.api.node({
      id: options.id,
      at: []
    });
    if (!block2)
      return;
    return getPrevious({ at: block2[1], block: true });
  };
  var range = (editor, at2, to2, options) => {
    var _a2;
    let from = getAt(editor, at2);
    if (RangeApi.isRange(from) && !to2) {
      return from;
    }
    if (from === "start") {
      const path2 = (_a2 = editor.api.block({ at: to2 })) == null ? void 0 : _a2[1];
      if (!path2)
        return;
      const anchor = editor.api.start(path2);
      if (!anchor)
        return;
      const focus2 = PointApi.get(to2);
      if (!focus2)
        return;
      return { anchor, focus: focus2 };
    }
    if (to2 && from === "before") {
      const anchor = editor.api.before(to2, options == null ? void 0 : options.before);
      from = anchor ?? getAt(editor, to2);
    }
    return range$1(editor, from, getAt(editor, to2));
  };
  var removeEditorMark = (editor, key) => removeMark(editor, key);
  var unhangRange = (editor, range2, options = {}) => {
    const { character, unhang = true, voids } = options;
    if (!RangeApi.isRange(range2))
      return range2;
    if (character) {
      let [start2, end2] = RangeApi.edges(range2);
      if (!PathApi.equals(start2.path, end2.path)) {
        if (end2.offset === 0) {
          const pointAfter = editor.api.after(start2);
          if (pointAfter) {
            end2 = pointAfter;
          }
        } else {
          const pointBefore = editor.api.before(end2);
          if (pointBefore) {
            start2 = pointBefore;
          }
        }
      }
      return { anchor: start2, focus: end2 };
    }
    if (unhang) {
      return unhangRange$1(editor, range2, { voids });
    }
    return range2;
  };
  var addMarks = (editor, marks2, { remove } = {}) => {
    if (!editor.selection)
      return;
    editor.tf.withoutNormalizing(() => {
      editor.tf.removeMarks([
        ...castArray4$1(remove),
        ...Object.keys(marks2)
      ]);
      Object.entries(marks2).forEach(([key, value]) => {
        editor.tf.addMark(key, value);
      });
    });
  };
  var duplicateNodes = (editor, { block: block2, nodes: nodes2, ...options } = {}) => {
    const at2 = getAt(editor, options.at) ?? editor.selection;
    if (!nodes2 || !at2)
      return;
    const entries = nodes2 ?? (block2 ? editor.api.blocks({ at: at2 }) : []);
    if (entries.length === 0)
      return;
    const lastEntry = entries.at(-1);
    const insertPath = PathApi.next(lastEntry[1]);
    const nodesToInsert = entries.map(([node2]) => node2);
    editor.tf.insertNodes(nodesToInsert, {
      at: insertPath,
      ...options
    });
  };
  var removeMarks = (editor, keys2, { at: at2, shouldChange = true, ...options } = {}) => {
    const selection = at2 ?? editor.selection;
    if (!selection)
      return;
    const match2 = (node2, path2) => {
      if (!TextApi.isText(node2)) {
        return false;
      }
      const [parentNode] = editor.api.parent(path2);
      return !editor.api.isVoid(parentNode) || editor.api.markableVoid(parentNode);
    };
    const expandedSelection = RangeApi.isExpanded(selection);
    let markAcceptingVoidSelected = false;
    if (!expandedSelection) {
      const [selectedNode, selectedPath] = editor.api.node(selection);
      if (selectedNode && match2(selectedNode, selectedPath)) {
        const [parentNode] = editor.api.parent(selectedPath);
        markAcceptingVoidSelected = parentNode && editor.api.markableVoid(parentNode);
      }
    }
    if (keys2 && (expandedSelection || markAcceptingVoidSelected)) {
      const props = castArray4$1(keys2);
      editor.tf.unsetNodes(props, {
        at: selection,
        match: match2,
        split: true,
        voids: true,
        ...options
      });
    } else if (!at2) {
      const marks2 = { ...editor.api.marks() };
      if (keys2) {
        castArray4$1(keys2).forEach((k) => {
          delete marks2[k];
        });
        editor.marks = marks2;
      } else {
        editor.marks = {};
      }
      shouldChange && editor.api.onChange();
    }
  };
  var replaceNodes = (editor, nodes2, {
    at: at2,
    children,
    removeNodes: removeOptions,
    ...options
  }) => {
    editor.tf.withoutNormalizing(() => {
      if (children) {
        if (!at2)
          return;
        at2 = getAt(editor, at2);
        const path2 = editor.api.path(at2);
        if (!path2)
          return;
        editor.tf.removeNodes({
          ...removeOptions,
          at: path2,
          children: true
        });
        editor.tf.insertNodes(nodes2, {
          ...options,
          at: path2.concat([0])
        });
      } else {
        editor.tf.removeNodes({ ...removeOptions, at: at2 });
        editor.tf.insertNodes(nodes2, {
          ...options,
          at: at2
        });
      }
    });
  };
  var reset = (editor, options = {}) => {
    var _a2;
    editor.tf.replaceNodes(editor.api.create.value(), {
      at: [],
      children: true,
      ...options
    });
    if (!options.children) {
      editor.operations = [];
      editor.marks = null;
      if ((_a2 = editor.history) == null ? void 0 : _a2.undos) {
        editor.history.undos = [];
        editor.history.redos = [];
      }
    }
  };
  var toggleBlock = (editor, type, {
    defaultType: defaultTypeProp,
    someOptions,
    wrap,
    ...options
  } = {}) => {
    const at2 = options.at ?? editor.selection;
    if (!at2)
      return;
    const isActive = editor.api.some({
      at: at2,
      ...someOptions,
      match: { type }
    });
    if (wrap) {
      if (isActive) {
        editor.tf.unwrapNodes({ at: at2, match: { type } });
      } else {
        editor.tf.wrapNodes({ children: [], type }, { at: at2 });
      }
      return;
    }
    const defaultType = defaultTypeProp ?? editor.api.create.block().type ?? "p";
    if (isActive && type === defaultType)
      return;
    editor.tf.setNodes(
      {
        type: isActive ? defaultType : type
      },
      { at: at2, ...options }
    );
  };
  var toggleMark = (editor, key, { remove } = {}) => {
    if (!editor.selection)
      return;
    editor.tf.withoutNormalizing(() => {
      if (editor.api.hasMark(key)) {
        editor.tf.removeMark(key);
        return;
      }
      editor.tf.removeMarks([...castArray4$1(remove), key]);
      editor.tf.addMark(key, true);
    });
  };
  var collapseSelection = (editor, options) => {
    collapse(editor, options);
  };
  var deleteText = (editor, options) => {
    deleteText$1(editor, {
      ...options,
      at: getAt(editor, options == null ? void 0 : options.at)
    });
  };
  var deselect = (editor) => {
    deselect$1(editor);
  };
  var insertFragment = (editor, fragment2, options) => {
    insertFragment$1(editor, fragment2, {
      ...options,
      at: getAt(editor, options == null ? void 0 : options.at)
    });
  };
  var insertNodes = (editor, nodes2, { nextBlock, removeEmpty, ...options } = {}) => {
    options = getQueryOptions(editor, options);
    editor.tf.withoutNormalizing(() => {
      if (removeEmpty) {
        const blockEntry = editor.api.above({ at: options.at });
        if (blockEntry) {
          const queryNodeOptions = removeEmpty === true ? {
            allow: ["p"]
          } : removeEmpty;
          const { filter: filter2 } = queryNodeOptions;
          queryNodeOptions.filter = ([node2, path2]) => {
            if (NodeApi.string(node2))
              return false;
            const children = node2.children;
            if (children.some((n2) => editor.api.isInline(n2)))
              return false;
            return !filter2 || filter2([node2, path2]);
          };
          if (queryNode(blockEntry, queryNodeOptions)) {
            editor.tf.removeNodes({ at: blockEntry[1] });
            nextBlock = false;
          }
        }
      }
      if (nextBlock) {
        const { at: at2 = editor.selection } = options;
        if (at2) {
          const endPoint = editor.api.end(at2);
          const blockEntry = editor.api.above({
            at: endPoint,
            block: true
          });
          if (blockEntry) {
            options.at = PathApi.next(blockEntry[1]);
          }
        }
      }
      insertNodes$1(editor, nodes2, options);
    });
  };
  var insertText = (editor, text, { marks: marks2 = true, ...options } = {}) => {
    const at2 = getAt(editor, options.at);
    if (at2) {
      Transforms.insertText(editor, text, { ...options, at: at2 });
      return;
    }
    if (editor.selection) {
      if (marks2 && editor.marks) {
        const node2 = { text, ...editor.marks };
        editor.tf.insertNodes(node2, {
          voids: options.voids
        });
        editor.marks = null;
      } else {
        Transforms.insertText(editor, text, options);
      }
    }
  };
  var liftNodes = (editor, options) => {
    return liftNodes$1(editor, getQueryOptions(editor, options));
  };
  var mergeNodes = (editor, options = {}) => {
    options = getQueryOptions(editor, options);
    editor.tf.withoutNormalizing(() => {
      let { at: at2 = editor.selection, match: match2 } = options;
      const {
        hanging = false,
        mergeNode,
        mode = "lowest",
        removeEmptyAncestor,
        voids = false
      } = options;
      if (!at2) {
        return;
      }
      if (match2 == null) {
        if (PathApi.isPath(at2)) {
          const [parent2] = editor.api.parent(at2);
          match2 = (n2) => parent2.children.includes(n2);
        } else {
          match2 = (n2) => editor.api.isBlock(n2);
        }
      }
      if (!hanging && RangeApi.isRange(at2)) {
        at2 = editor.api.unhangRange(at2);
      }
      if (RangeApi.isRange(at2)) {
        if (RangeApi.isCollapsed(at2)) {
          at2 = at2.anchor;
        } else {
          const [, end2] = RangeApi.edges(at2);
          const pointRef2 = editor.api.pointRef(end2);
          editor.tf.delete({ at: at2 });
          at2 = pointRef2.unref();
          if (options.at == null) {
            editor.tf.select(at2);
          }
        }
      }
      const _nodes = editor.api.nodes({ at: at2, match: match2, mode, voids });
      const [current2] = Array.from(_nodes);
      const prev = editor.api.previous({ at: at2, match: match2, mode, voids });
      if (!current2 || !prev) {
        return;
      }
      const [node2, path2] = current2;
      const [prevNode, prevPath] = prev;
      if (path2.length === 0 || prevPath.length === 0) {
        return;
      }
      const newPath = PathApi.next(prevPath);
      const commonPath = PathApi.common(path2, prevPath);
      const isPreviousSibling = PathApi.isSibling(path2, prevPath);
      const _levels = editor.api.levels({ at: path2 });
      const levels2 = new Set(
        Array.from(_levels, ([n2]) => n2).slice(commonPath.length).slice(0, -1)
      );
      const emptyAncestor = editor.api.above({
        at: path2,
        mode: "highest",
        match: (n2) => levels2.has(n2) && ElementApi.isElement(n2) && NodeApi.hasSingleChild(n2)
      });
      const emptyRef = emptyAncestor && editor.api.pathRef(emptyAncestor[1]);
      let properties2;
      let position;
      if (TextApi.isText(node2) && TextApi.isText(prevNode)) {
        const { text, ...rest } = node2;
        position = prevNode.text.length;
        properties2 = rest;
      } else if (ElementApi.isElement(node2) && ElementApi.isElement(prevNode)) {
        const { children, ...rest } = node2;
        position = prevNode.children.length;
        properties2 = rest;
      } else {
        throw new TypeError(
          `Cannot merge the node at path [${path2}] with the previous sibling because it is not the same kind: ${JSON.stringify(
            node2
          )} ${JSON.stringify(prevNode)}`
        );
      }
      if (!isPreviousSibling && // DIFF
      !mergeNode) {
        editor.tf.moveNodes({ at: path2, to: newPath, voids });
      }
      if (emptyRef) {
        if (removeEmptyAncestor) {
          const emptyPath = emptyRef.current;
          emptyPath && removeEmptyAncestor(editor, { at: emptyPath });
        } else {
          editor.tf.removeNodes({ at: emptyRef.current, voids });
        }
      }
      if (mergeNode) {
        mergeNode(editor, { at: path2, to: newPath });
      } else if (ElementApi.isElement(prevNode) && editor.api.isEmpty(prevNode) || TextApi.isText(prevNode) && prevNode.text === "") {
        editor.tf.removeNodes({ at: prevPath, voids });
      } else {
        editor.tf.apply({
          path: newPath,
          position,
          properties: properties2,
          type: "merge_node"
        });
      }
      if (emptyRef) {
        emptyRef.unref();
      }
    });
  };
  var moveNodes = (editor, { children, fromIndex = 0, ...opt }) => {
    const options = getQueryOptions(editor, opt);
    let moved = false;
    if (children) {
      if (!options.at)
        return moved;
      const entry = editor.api.node(options.at);
      if (!entry)
        return moved;
      const [node2, path2] = entry;
      if (!editor.api.isBlock(node2))
        return moved;
      for (let i2 = node2.children.length - 1; i2 >= fromIndex; i2--) {
        const childPath = [...path2, i2];
        const childNode = NodeApi.get(editor, childPath);
        if (!options.match || childNode && options.match(childNode, childPath)) {
          moveNodes$1(editor, {
            ...options,
            at: childPath
          });
          moved = true;
        }
      }
      return moved;
    }
    return moveNodes$1(editor, options);
  };
  var moveSelection$1 = (editor, options) => {
    move(editor, options);
  };
  var removeNodes = (editor, { children, previousEmptyBlock, ...opt } = {}) => {
    const options = getQueryOptions(editor, opt);
    editor.tf.withoutNormalizing(() => {
      if (previousEmptyBlock) {
        const entry = editor.api.block({ at: options.at });
        if (!entry)
          return;
        const prevEntry = editor.api.previous({
          at: entry[1],
          sibling: true
        });
        if (!prevEntry)
          return;
        const [prevNode, prevPath] = prevEntry;
        if (editor.api.isEmpty(prevNode)) {
          editor.tf.removeNodes({ at: prevPath });
        }
        return;
      }
      if (children && options.at) {
        for (const [, childPath] of NodeApi.children(editor, options.at, {
          reverse: true
        })) {
          editor.tf.removeNodes({ ...options, at: childPath });
        }
        return;
      }
      return removeNodes$1(editor, getQueryOptions(editor, options));
    });
  };
  var setNodes = (editor, props, { marks: marks2, ...options } = {}) => {
    if (marks2) {
      let at2 = getAt(editor, options.at) ?? editor.selection;
      if (!at2)
        return;
      if (PathApi.isPath(at2)) {
        at2 = editor.api.range(at2);
      }
      if (!RangeApi.isRange(at2))
        return;
      const match2 = (node2, path2) => {
        if (!TextApi.isText(node2))
          return false;
        const parentEntry = editor.api.parent(path2);
        if (!parentEntry)
          return false;
        const [parentNode] = parentEntry;
        return !editor.api.isVoid(parentNode) || editor.api.markableVoid(parentNode);
      };
      const isExpandedRange = RangeApi.isExpanded(at2);
      let markAcceptingVoidSelected = false;
      if (!isExpandedRange) {
        const selectedEntry = editor.api.node(at2);
        if (!selectedEntry)
          return;
        const [selectedNode, selectedPath] = selectedEntry;
        if (selectedNode && match2(selectedNode, selectedPath)) {
          const parentEntry = editor.api.parent(selectedPath);
          if (!parentEntry)
            return;
          const [parentNode] = parentEntry;
          markAcceptingVoidSelected = parentNode && editor.api.markableVoid(parentNode);
        }
      }
      if (isExpandedRange || markAcceptingVoidSelected) {
        return setNodes$1(
          editor,
          props,
          getQueryOptions(editor, {
            ...options,
            at: at2,
            match: match2,
            split: true,
            voids: true
          })
        );
      }
    }
    return setNodes$1(
      editor,
      props,
      getQueryOptions(editor, options)
    );
  };
  var setPoint = (editor, props, options) => {
    setPoint$1(editor, props, options);
  };
  var setSelection = (editor, props) => {
    setSelection$1(editor, props);
  };
  var splitNodes = (editor, options) => {
    return splitNodes$1(editor, getQueryOptions(editor, options));
  };
  var unsetNodes = (editor, props, options) => {
    return unsetNodes$1(
      editor,
      props,
      getQueryOptions(editor, options)
    );
  };
  var unwrapNodes = (editor, options) => {
    unwrapNodes$1(editor, getQueryOptions(editor, options));
  };
  var wrapNodes = (editor, element, { children, ...opt } = {}) => {
    const options = getQueryOptions(editor, opt);
    if (options.at) {
      options.at = editor.api.unhangRange(options.at, options);
    }
    if (children) {
      const path2 = editor.api.path(options.at);
      if (!path2)
        return;
      const node2 = NodeApi.get(editor, path2);
      if (!(node2 == null ? void 0 : node2.children))
        return;
      editor.tf.withoutNormalizing(() => {
        const firstChildPath = PathApi.firstChild(path2);
        wrapNodes$1(editor, element, {
          ...options,
          at: firstChildPath
        });
        if (node2.children.length > 1) {
          editor.tf.moveNodes({
            at: path2,
            children: true,
            fromIndex: 1,
            to: PathApi.child(firstChildPath, 1)
          });
        }
      });
      return;
    }
    wrapNodes$1(editor, element, options);
  };
  var SAVING = /* @__PURE__ */ new WeakMap();
  var MERGING = /* @__PURE__ */ new WeakMap();
  var SPLITTING_ONCE = /* @__PURE__ */ new WeakMap();
  var HistoryApi = {
    /** Check if a value is a `History` object. */
    isHistory(value) {
      return isPlainObject$5(value) && Array.isArray(value.redos) && Array.isArray(value.undos) && (value.redos.length === 0 || OperationApi.isOperationList(value.redos[0].operations)) && (value.undos.length === 0 || OperationApi.isOperationList(value.undos[0].operations));
    },
    /** Get the merge flag's current value. */
    isMerging(editor) {
      return MERGING.get(editor);
    },
    /** Get the splitting once flag's current value. */
    isSaving(editor) {
      return SAVING.get(editor);
    },
    isSplittingOnce(editor) {
      return SPLITTING_ONCE.get(editor);
    },
    /** Get the saving flag's current value. */
    redo(editor) {
      editor.redo();
    },
    /** Redo to the previous saved state. */
    setSplittingOnce(editor, value) {
      SPLITTING_ONCE.set(editor, value);
    },
    /** Undo to the previous saved state. */
    undo(editor) {
      editor.undo();
    },
    /**
     * Apply a series of changes inside a synchronous `fn`, These operations will
     * be merged into the previous history.
     */
    withMerging(editor, fn) {
      const prev = editor.api.isMerging();
      MERGING.set(editor, true);
      fn();
      MERGING.set(editor, prev);
    },
    /**
     * Apply a series of changes inside a synchronous `fn`, ensuring that the
     * first operation starts a new batch in the history. Subsequent operations
     * will be merged as usual.
     */
    withNewBatch(editor, fn) {
      const prev = editor.api.isMerging();
      MERGING.set(editor, true);
      SPLITTING_ONCE.set(editor, true);
      fn();
      MERGING.set(editor, prev);
      SPLITTING_ONCE.delete(editor);
    },
    /**
     * Apply a series of changes inside a synchronous `fn`, without merging any of
     * the new operations into previous save point in the history.
     */
    withoutMerging(editor, fn) {
      const prev = editor.api.isMerging();
      MERGING.set(editor, false);
      fn();
      MERGING.set(editor, prev);
    },
    /**
     * Apply a series of changes inside a synchronous `fn`, without saving any of
     * their operations into the history.
     */
    withoutSaving(editor, fn) {
      const prev = editor.api.isSaving();
      SAVING.set(editor, false);
      fn();
      SAVING.set(editor, prev);
    }
  };
  var noop$1 = (name, returnValue) => () => {
    console.warn(
      `[OVERRIDE_MISSING] The method editor.${name}() has not been implemented or overridden. This may cause unexpected behavior. Please ensure that all required editor methods are properly defined.`
    );
    return returnValue;
  };
  var createEditor$1 = ({
    children,
    selection
  } = {}) => {
    const editor = createEditor$2();
    if (children) {
      editor.children = children;
    }
    if (selection) {
      editor.selection = selection;
    }
    Object.assign(editor, {
      apply: bindFirst(apply$2, editor),
      isElementReadOnly: editor.isElementReadOnly,
      isInline: editor.isInline,
      isSelectable: editor.isSelectable,
      isVoid: editor.isVoid,
      markableVoid: editor.markableVoid,
      onChange: editor.onChange
    });
    Object.assign(editor, {
      addMark: bindFirst(addMark, editor),
      deleteBackward: bindFirst(deleteBackward, editor),
      deleteForward: bindFirst(deleteForward, editor),
      deleteFragment: bindFirst(deleteFragment, editor),
      getDirtyPaths: bindFirst(getDirtyPaths, editor),
      getFragment: bindFirst(getFragment, editor),
      insertBreak: bindFirst(insertBreak, editor),
      insertFragment: bindFirst(insertFragment, editor),
      insertNode: bindFirst(insertNode, editor),
      insertSoftBreak: bindFirst(insertSoftBreak, editor),
      insertText: bindFirst(insertText, editor),
      normalizeNode: bindFirst(normalizeNode, editor),
      removeMark: bindFirst(removeEditorMark, editor),
      shouldNormalize: bindFirst(shouldNormalize, editor)
    });
    Object.assign(editor, {
      above: bindFirst(above, editor),
      after: bindFirst(getPointAfter, editor),
      before: bindFirst(getPointBefore, editor),
      collapse: bindFirst(collapseSelection, editor),
      delete: bindFirst(deleteText, editor),
      deselect: bindFirst(deselect, editor),
      deselectDOM: bindFirst(deselectDOM, editor),
      edges: bindFirst(getEdgePoints, editor),
      elementReadOnly: bindFirst(isElementReadOnly, editor),
      end: bindFirst(getEndPoint, editor),
      first: bindFirst(getFirstNode, editor),
      fragment: bindFirst(getFragment, editor),
      getMarks: bindFirst(getMarks, editor),
      hasBlocks: bindFirst(hasBlocks, editor),
      hasInlines: bindFirst(hasInlines, editor),
      hasPath: bindFirst(hasPath$2, editor),
      hasTexts: bindFirst(hasTexts, editor),
      insertNodes: bindFirst(insertNodes, editor),
      isBlock: bindFirst(isBlock, editor),
      isEdge: bindFirst(isEdgePoint, editor),
      isEmpty: bindFirst(isEmpty, editor),
      isEnd: bindFirst(isEndPoint, editor),
      isNormalizing: bindFirst(isEditorNormalizing, editor),
      isStart: bindFirst(isStartPoint, editor),
      last: bindFirst(last$2, editor),
      leaf: bindFirst(getLeafNode, editor),
      levels: bindFirst(getLevels, editor),
      liftNodes: bindFirst(liftNodes, editor),
      mergeNodes: bindFirst(mergeNodes, editor),
      move: bindFirst(moveSelection$1, editor),
      moveNodes: bindFirst(moveNodes, editor),
      next: bindFirst(next, editor),
      node: bindFirst(node, editor),
      nodes: bindFirst(nodes, editor),
      normalize: bindFirst(normalizeEditor, editor),
      parent: bindFirst(parent$2, editor),
      path: bindFirst(path, editor),
      pathRef: bindFirst(createPathRef, editor),
      pathRefs: bindFirst(getPathRefs, editor),
      point: bindFirst(getPoint, editor),
      pointRef: bindFirst(createPointRef, editor),
      pointRefs: bindFirst(getPointRefs, editor),
      positions: bindFirst(getPositions, editor),
      previous: bindFirst(previous, editor),
      range: bindFirst(range, editor),
      rangeRef: bindFirst(createRangeRef, editor),
      rangeRefs: bindFirst(getRangeRefs, editor),
      removeNodes: bindFirst(removeNodes, editor),
      select: bindFirst(select, editor),
      setNodes: bindFirst(setNodes, editor),
      setNormalizing: bindFirst(setNormalizing, editor),
      setPoint: bindFirst(setPoint, editor),
      setSelection: bindFirst(setSelection, editor),
      shouldMergeNodesRemovePrevNode: bindFirst(
        shouldMergeNodesRemovePrevNode,
        editor
      ),
      splitNodes: bindFirst(splitNodes, editor),
      start: bindFirst(getStartPoint, editor),
      string: bindFirst(getEditorString, editor),
      unhangRange: bindFirst(unhangRange, editor),
      unsetNodes: bindFirst(unsetNodes, editor),
      unwrapNodes: bindFirst(unwrapNodes, editor),
      void: bindFirst(getVoidNode, editor),
      withoutNormalizing: bindFirst(withoutNormalizing, editor),
      wrapNodes: bindFirst(wrapNodes, editor)
    });
    Object.assign(editor, {
      history: { redos: [], undos: [] },
      redo: noop$1("redo"),
      undo: noop$1("undo"),
      writeHistory: noop$1("writeHistory")
    });
    Object.assign(editor, {
      insertData: noop$1("insertData"),
      insertFragmentData: noop$1("insertFragmentData", false),
      insertTextData: noop$1("insertTextData", false),
      setFragmentData: noop$1("setFragmentData")
    });
    const api = {
      block: bindFirst(block, editor),
      blocks: bindFirst(blocks, editor),
      create: {
        block: (props) => ({ children: [{ text: "" }], type: "p", ...props }),
        value: () => [api.create.block()]
      },
      descendant: bindFirst(descendant, editor),
      edgeBlocks: bindFirst(edgeBlocks, editor),
      findDocumentOrShadowRoot: bindFirst(findDocumentOrShadowRoot, editor),
      findEventRange: bindFirst(findEventRange, editor),
      findKey: bindFirst(findKey$1, editor),
      findPath: bindFirst(findPath, editor),
      getWindow: bindFirst(getWindow, editor),
      hasDOMNode: bindFirst(hasDOMNode, editor),
      hasEditableTarget: bindFirst(hasEditableTarget, editor),
      hasMark: bindFirst(hasMark, editor),
      hasRange: bindFirst(hasRange, editor),
      hasSelectableTarget: bindFirst(hasSelectableTarget, editor),
      hasTarget: bindFirst(hasTarget, editor),
      isAt: bindFirst(isAt, editor),
      isComposing: bindFirst(isComposing, editor),
      isEditorEnd: bindFirst(isEditorEnd, editor),
      isFocused: bindFirst(isFocused, editor),
      isMerging: bindFirst(HistoryApi.isMerging, editor),
      isReadOnly: bindFirst(isReadOnly, editor),
      isSaving: bindFirst(HistoryApi.isSaving, editor),
      isSelected: bindFirst(isSelected, editor),
      isSplittingOnce: bindFirst(HistoryApi.isSplittingOnce, editor),
      isTargetInsideNonReadonlyVoid: bindFirst(
        isTargetInsideNonReadonlyVoid,
        editor
      ),
      isText: bindFirst(isText, editor),
      mark: bindFirst(mark, editor),
      nodesRange: bindFirst(nodesRange, editor),
      prop: prop$1,
      scrollIntoView: bindFirst(scrollIntoView, editor),
      some: bindFirst(some, editor),
      toDOMNode: bindFirst(toDOMNode, editor),
      toDOMPoint: bindFirst(toDOMPoint, editor),
      toDOMRange: bindFirst(toDOMRange, editor),
      toSlateNode: bindFirst(toSlateNode, editor),
      toSlatePoint: bindFirst(toSlatePoint, editor),
      toSlateRange: bindFirst(toSlateRange, editor),
      isCollapsed: () => RangeApi.isCollapsed(editor.selection),
      isExpanded: () => RangeApi.isExpanded(editor.selection),
      shouldNormalizeNode: () => true
    };
    const transforms = {
      addMarks: bindFirst(addMarks, editor),
      blur: bindFirst(blur, editor),
      deselectDOM: bindFirst(deselectDOM, editor),
      duplicateNodes: bindFirst(duplicateNodes, editor),
      focus: bindFirst(focus, editor),
      removeMarks: bindFirst(removeMarks, editor),
      replaceNodes: bindFirst(replaceNodes, editor),
      reset: bindFirst(reset, editor),
      setSplittingOnce: bindFirst(HistoryApi.setSplittingOnce, editor),
      toggleBlock: bindFirst(toggleBlock, editor),
      toggleMark: bindFirst(toggleMark, editor),
      withMerging: bindFirst(HistoryApi.withMerging, editor),
      withNewBatch: bindFirst(HistoryApi.withNewBatch, editor),
      withoutMerging: bindFirst(HistoryApi.withoutMerging, editor),
      withoutSaving: bindFirst(HistoryApi.withoutSaving, editor)
    };
    editor.api = api;
    editor.tf = transforms;
    editor.transforms = transforms;
    syncLegacyMethods(editor);
    return editor;
  };
  var withHistory = (editor) => {
    const e3 = editor;
    const { apply: apply2 } = e3;
    e3.history = { redos: [], undos: [] };
    e3.redo = () => {
      const { history } = e3;
      const { redos } = history;
      if (redos.length > 0) {
        const batch = redos.at(-1);
        if (batch.selectionBefore) {
          e3.tf.setSelection(batch.selectionBefore);
        }
        e3.tf.withoutSaving(() => {
          e3.tf.withoutNormalizing(() => {
            for (const op of batch.operations) {
              e3.apply(op);
            }
          });
        });
        history.redos.pop();
        e3.writeHistory("undos", batch);
      }
    };
    e3.undo = () => {
      const { history } = e3;
      const { undos } = history;
      if (undos.length > 0) {
        const batch = undos.at(-1);
        e3.tf.withoutSaving(() => {
          e3.tf.withoutNormalizing(() => {
            const inverseOps = batch.operations.map(OperationApi.inverse).reverse();
            for (const op of inverseOps) {
              e3.apply(op);
            }
            if (batch.selectionBefore) {
              e3.tf.setSelection(batch.selectionBefore);
            }
          });
        });
        e3.writeHistory("redos", batch);
        history.undos.pop();
      }
    };
    e3.apply = (op) => {
      const { history, operations } = e3;
      const { undos } = history;
      const lastBatch = undos.at(-1);
      const lastOp = lastBatch == null ? void 0 : lastBatch.operations.at(-1);
      let save = e3.api.isSaving();
      let merge2 = e3.api.isMerging();
      if (save == null) {
        save = shouldSave(op);
      }
      if (save) {
        if (merge2 == null) {
          if (lastBatch == null) {
            merge2 = false;
          } else if (operations.length > 0) {
            merge2 = true;
          } else {
            merge2 = shouldMerge(op, lastOp);
          }
        }
        if (e3.api.isSplittingOnce()) {
          merge2 = false;
          e3.tf.setSplittingOnce(void 0);
        }
        if (lastBatch && merge2) {
          lastBatch.operations.push(op);
        } else {
          const batch = {
            operations: [op],
            selectionBefore: e3.selection
          };
          e3.writeHistory("undos", batch);
        }
        while (undos.length > 100) {
          undos.shift();
        }
        history.redos = [];
      }
      apply2(op);
    };
    e3.writeHistory = (stack, batch) => {
      e3.history[stack].push(batch);
    };
    return e3;
  };
  var shouldMerge = (op, prev) => {
    if (prev && op.type === "insert_text" && prev.type === "insert_text" && op.offset === prev.offset + prev.text.length && PathApi.equals(op.path, prev.path)) {
      return true;
    }
    if (prev && op.type === "remove_text" && prev.type === "remove_text" && op.offset + op.text.length === prev.offset && PathApi.equals(op.path, prev.path)) {
      return true;
    }
    return false;
  };
  var shouldSave = (op, _) => {
    if (op.type === "set_selection") {
      return false;
    }
    return true;
  };
  const urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
  let nanoid = (size2 = 21) => {
    let id2 = "";
    let bytes = crypto.getRandomValues(new Uint8Array(size2 |= 0));
    while (size2--) {
      id2 += urlAlphabet[bytes[size2] & 63];
    }
    return id2;
  };
  var getNative = _getNative;
  var defineProperty$2 = function() {
    try {
      var func = getNative(Object, "defineProperty");
      func({}, "", {});
      return func;
    } catch (e3) {
    }
  }();
  var _defineProperty$2 = defineProperty$2;
  var defineProperty$1 = _defineProperty$2;
  function baseAssignValue$3(object, key, value) {
    if (key == "__proto__" && defineProperty$1) {
      defineProperty$1(object, key, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
      });
    } else {
      object[key] = value;
    }
  }
  var _baseAssignValue = baseAssignValue$3;
  var baseAssignValue$2 = _baseAssignValue, eq$3 = eq_1;
  function assignMergeValue$2(object, key, value) {
    if (value !== void 0 && !eq$3(object[key], value) || value === void 0 && !(key in object)) {
      baseAssignValue$2(object, key, value);
    }
  }
  var _assignMergeValue = assignMergeValue$2;
  var _cloneBuffer = { exports: {} };
  _cloneBuffer.exports;
  (function(module2, exports3) {
    var root2 = _root;
    var freeExports = exports3 && !exports3.nodeType && exports3;
    var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root2.Buffer : void 0, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
    function cloneBuffer2(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module2.exports = cloneBuffer2;
  })(_cloneBuffer, _cloneBuffer.exports);
  var _cloneBufferExports = _cloneBuffer.exports;
  var Uint8Array$1 = _Uint8Array;
  function cloneArrayBuffer$3(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
    return result;
  }
  var _cloneArrayBuffer = cloneArrayBuffer$3;
  var cloneArrayBuffer$2 = _cloneArrayBuffer;
  function cloneTypedArray$2(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer$2(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  var _cloneTypedArray = cloneTypedArray$2;
  function copyArray$2(source2, array) {
    var index = -1, length = source2.length;
    array || (array = Array(length));
    while (++index < length) {
      array[index] = source2[index];
    }
    return array;
  }
  var _copyArray = copyArray$2;
  var isObject$6 = isObject_1;
  var objectCreate = Object.create;
  var baseCreate$1 = function() {
    function object() {
    }
    return function(proto) {
      if (!isObject$6(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object();
      object.prototype = void 0;
      return result;
    };
  }();
  var _baseCreate = baseCreate$1;
  var baseCreate = _baseCreate, getPrototype$1 = _getPrototype, isPrototype$1 = _isPrototype;
  function initCloneObject$2(object) {
    return typeof object.constructor == "function" && !isPrototype$1(object) ? baseCreate(getPrototype$1(object)) : {};
  }
  var _initCloneObject = initCloneObject$2;
  var isArrayLike$2 = isArrayLike_1, isObjectLike$2 = isObjectLike_1;
  function isArrayLikeObject$1(value) {
    return isObjectLike$2(value) && isArrayLike$2(value);
  }
  var isArrayLikeObject_1 = isArrayLikeObject$1;
  function safeGet$2(object, key) {
    if (key === "constructor" && typeof object[key] === "function") {
      return;
    }
    if (key == "__proto__") {
      return;
    }
    return object[key];
  }
  var _safeGet = safeGet$2;
  var baseAssignValue$1 = _baseAssignValue, eq$2 = eq_1;
  var objectProto$2 = Object.prototype;
  var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
  function assignValue$3(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty$2.call(object, key) && eq$2(objValue, value)) || value === void 0 && !(key in object)) {
      baseAssignValue$1(object, key, value);
    }
  }
  var _assignValue = assignValue$3;
  var assignValue$2 = _assignValue, baseAssignValue = _baseAssignValue;
  function copyObject$6(source2, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1, length = props.length;
    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source2[key], key, object, source2) : void 0;
      if (newValue === void 0) {
        newValue = source2[key];
      }
      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue$2(object, key, newValue);
      }
    }
    return object;
  }
  var _copyObject = copyObject$6;
  function nativeKeysIn$1(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }
  var _nativeKeysIn = nativeKeysIn$1;
  var isObject$5 = isObject_1, isPrototype = _isPrototype, nativeKeysIn = _nativeKeysIn;
  var objectProto$1 = Object.prototype;
  var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
  function baseKeysIn$1(object) {
    if (!isObject$5(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object), result = [];
    for (var key in object) {
      if (!(key == "constructor" && (isProto || !hasOwnProperty$1.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }
  var _baseKeysIn = baseKeysIn$1;
  var arrayLikeKeys = _arrayLikeKeys, baseKeysIn = _baseKeysIn, isArrayLike$1 = isArrayLike_1;
  function keysIn$5(object) {
    return isArrayLike$1(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }
  var keysIn_1 = keysIn$5;
  var copyObject$5 = _copyObject, keysIn$4 = keysIn_1;
  function toPlainObject$1(value) {
    return copyObject$5(value, keysIn$4(value));
  }
  var toPlainObject_1 = toPlainObject$1;
  var assignMergeValue$1 = _assignMergeValue, cloneBuffer$1 = _cloneBufferExports, cloneTypedArray$1 = _cloneTypedArray, copyArray$1 = _copyArray, initCloneObject$1 = _initCloneObject, isArguments$1 = isArguments_1, isArray$2 = isArray_1, isArrayLikeObject = isArrayLikeObject_1, isBuffer$1 = isBufferExports, isFunction$2 = isFunction_1, isObject$4 = isObject_1, isPlainObject$1 = isPlainObject_1, isTypedArray = isTypedArray_1, safeGet$1 = _safeGet, toPlainObject = toPlainObject_1;
  function baseMergeDeep$1(object, source2, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet$1(object, key), srcValue = safeGet$1(source2, key), stacked = stack.get(srcValue);
    if (stacked) {
      assignMergeValue$1(object, key, stacked);
      return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source2, stack) : void 0;
    var isCommon = newValue === void 0;
    if (isCommon) {
      var isArr = isArray$2(srcValue), isBuff = !isArr && isBuffer$1(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray$2(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject(objValue)) {
          newValue = copyArray$1(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer$1(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray$1(srcValue, true);
        } else {
          newValue = [];
        }
      } else if (isPlainObject$1(srcValue) || isArguments$1(srcValue)) {
        newValue = objValue;
        if (isArguments$1(objValue)) {
          newValue = toPlainObject(objValue);
        } else if (!isObject$4(objValue) || isFunction$2(objValue)) {
          newValue = initCloneObject$1(srcValue);
        }
      } else {
        isCommon = false;
      }
    }
    if (isCommon) {
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack["delete"](srcValue);
    }
    assignMergeValue$1(object, key, newValue);
  }
  var _baseMergeDeep = baseMergeDeep$1;
  var Stack$1 = _Stack, assignMergeValue = _assignMergeValue, baseFor = _baseFor, baseMergeDeep = _baseMergeDeep, isObject$3 = isObject_1, keysIn$3 = keysIn_1, safeGet = _safeGet;
  function baseMerge$2(object, source2, srcIndex, customizer, stack) {
    if (object === source2) {
      return;
    }
    baseFor(source2, function(srcValue, key) {
      stack || (stack = new Stack$1());
      if (isObject$3(srcValue)) {
        baseMergeDeep(object, source2, key, srcIndex, baseMerge$2, customizer, stack);
      } else {
        var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source2, stack) : void 0;
        if (newValue === void 0) {
          newValue = srcValue;
        }
        assignMergeValue(object, key, newValue);
      }
    }, keysIn$3);
  }
  var _baseMerge = baseMerge$2;
  function apply$1(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  var _apply = apply$1;
  var apply = _apply;
  var nativeMax = Math.max;
  function overRest$2(func, start2, transform) {
    start2 = nativeMax(start2 === void 0 ? func.length - 1 : start2, 0);
    return function() {
      var args = arguments, index = -1, length = nativeMax(args.length - start2, 0), array = Array(length);
      while (++index < length) {
        array[index] = args[start2 + index];
      }
      index = -1;
      var otherArgs = Array(start2 + 1);
      while (++index < start2) {
        otherArgs[index] = args[index];
      }
      otherArgs[start2] = transform(array);
      return apply(func, this, otherArgs);
    };
  }
  var _overRest = overRest$2;
  function constant$1(value) {
    return function() {
      return value;
    };
  }
  var constant_1 = constant$1;
  var constant = constant_1, defineProperty = _defineProperty$2, identity$1 = identity_1;
  var baseSetToString$1 = !defineProperty ? identity$1 : function(func, string2) {
    return defineProperty(func, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": constant(string2),
      "writable": true
    });
  };
  var _baseSetToString = baseSetToString$1;
  var HOT_COUNT = 800, HOT_SPAN = 16;
  var nativeNow = Date.now;
  function shortOut$1(func) {
    var count = 0, lastCalled = 0;
    return function() {
      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(void 0, arguments);
    };
  }
  var _shortOut = shortOut$1;
  var baseSetToString = _baseSetToString, shortOut = _shortOut;
  var setToString$2 = shortOut(baseSetToString);
  var _setToString = setToString$2;
  var identity = identity_1, overRest$1 = _overRest, setToString$1 = _setToString;
  function baseRest$1(func, start2) {
    return setToString$1(overRest$1(func, start2, identity), func + "");
  }
  var _baseRest = baseRest$1;
  var eq$1 = eq_1, isArrayLike = isArrayLike_1, isIndex$1 = _isIndex, isObject$2 = isObject_1;
  function isIterateeCall$1(value, index, object) {
    if (!isObject$2(object)) {
      return false;
    }
    var type = typeof index;
    if (type == "number" ? isArrayLike(object) && isIndex$1(index, object.length) : type == "string" && index in object) {
      return eq$1(object[index], value);
    }
    return false;
  }
  var _isIterateeCall = isIterateeCall$1;
  var baseRest = _baseRest, isIterateeCall = _isIterateeCall;
  function createAssigner$2(assigner) {
    return baseRest(function(object, sources) {
      var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard2 = length > 2 ? sources[2] : void 0;
      customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
      if (guard2 && isIterateeCall(sources[0], sources[1], guard2)) {
        customizer = length < 3 ? void 0 : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source2 = sources[index];
        if (source2) {
          assigner(object, source2, index, customizer);
        }
      }
      return object;
    });
  }
  var _createAssigner = createAssigner$2;
  var baseMerge$1 = _baseMerge, createAssigner$1 = _createAssigner;
  var merge = createAssigner$1(function(object, source2, srcIndex) {
    baseMerge$1(object, source2, srcIndex);
  });
  var merge_1 = merge;
  const merge$1 = /* @__PURE__ */ getDefaultExportFromCjs(merge_1);
  var baseMerge = _baseMerge, createAssigner = _createAssigner;
  var mergeWith = createAssigner(function(object, source2, srcIndex, customizer) {
    baseMerge(object, source2, srcIndex, customizer);
  });
  var mergeWith_1 = mergeWith;
  const mergeWith$1 = /* @__PURE__ */ getDefaultExportFromCjs(mergeWith_1);
  var assignValue$1 = _assignValue, castPath$3 = _castPath, isIndex = _isIndex, isObject$1 = isObject_1, toKey$1 = _toKey;
  function baseSet$1(object, path2, value, customizer) {
    if (!isObject$1(object)) {
      return object;
    }
    path2 = castPath$3(path2, object);
    var index = -1, length = path2.length, lastIndex = length - 1, nested = object;
    while (nested != null && ++index < length) {
      var key = toKey$1(path2[index]), newValue = value;
      if (key === "__proto__" || key === "constructor" || key === "prototype") {
        return object;
      }
      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : void 0;
        if (newValue === void 0) {
          newValue = isObject$1(objValue) ? objValue : isIndex(path2[index + 1]) ? [] : {};
        }
      }
      assignValue$1(nested, key, newValue);
      nested = nested[key];
    }
    return object;
  }
  var _baseSet = baseSet$1;
  var baseGet$1 = _baseGet, baseSet = _baseSet, castPath$2 = _castPath;
  function basePickBy$2(object, paths, predicate) {
    var index = -1, length = paths.length, result = {};
    while (++index < length) {
      var path2 = paths[index], value = baseGet$1(object, path2);
      if (predicate(value, path2)) {
        baseSet(result, castPath$2(path2, object), value);
      }
    }
    return result;
  }
  var _basePickBy = basePickBy$2;
  var basePickBy$1 = _basePickBy, hasIn = hasIn_1;
  function basePick$1(object, paths) {
    return basePickBy$1(object, paths, function(value, path2) {
      return hasIn(object, path2);
    });
  }
  var _basePick = basePick$1;
  var Symbol$2 = _Symbol, isArguments = isArguments_1, isArray$1 = isArray_1;
  var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : void 0;
  function isFlattenable$1(value) {
    return isArray$1(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }
  var _isFlattenable = isFlattenable$1;
  var arrayPush$1 = _arrayPush, isFlattenable = _isFlattenable;
  function baseFlatten$1(array, depth, predicate, isStrict, result) {
    var index = -1, length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten$1(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush$1(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }
  var _baseFlatten = baseFlatten$1;
  var baseFlatten = _baseFlatten;
  function flatten$1(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, 1) : [];
  }
  var flatten_1 = flatten$1;
  var flatten = flatten_1, overRest = _overRest, setToString = _setToString;
  function flatRest$2(func) {
    return setToString(overRest(func, void 0, flatten), func + "");
  }
  var _flatRest = flatRest$2;
  var basePick = _basePick, flatRest$1 = _flatRest;
  var pick$1 = flatRest$1(function(object, paths) {
    return object == null ? {} : basePick(object, paths);
  });
  var pick_1 = pick$1;
  const pick$2 = /* @__PURE__ */ getDefaultExportFromCjs(pick_1);
  function arrayReduce$1(array, iteratee, accumulator, initAccum) {
    var index = -1, length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }
  var _arrayReduce = arrayReduce$1;
  function basePropertyOf$1(object) {
    return function(key) {
      return object == null ? void 0 : object[key];
    };
  }
  var _basePropertyOf = basePropertyOf$1;
  var basePropertyOf = _basePropertyOf;
  var deburredLetters = {
    // Latin-1 Supplement block.
    "À": "A",
    "Á": "A",
    "Â": "A",
    "Ã": "A",
    "Ä": "A",
    "Å": "A",
    "à": "a",
    "á": "a",
    "â": "a",
    "ã": "a",
    "ä": "a",
    "å": "a",
    "Ç": "C",
    "ç": "c",
    "Ð": "D",
    "ð": "d",
    "È": "E",
    "É": "E",
    "Ê": "E",
    "Ë": "E",
    "è": "e",
    "é": "e",
    "ê": "e",
    "ë": "e",
    "Ì": "I",
    "Í": "I",
    "Î": "I",
    "Ï": "I",
    "ì": "i",
    "í": "i",
    "î": "i",
    "ï": "i",
    "Ñ": "N",
    "ñ": "n",
    "Ò": "O",
    "Ó": "O",
    "Ô": "O",
    "Õ": "O",
    "Ö": "O",
    "Ø": "O",
    "ò": "o",
    "ó": "o",
    "ô": "o",
    "õ": "o",
    "ö": "o",
    "ø": "o",
    "Ù": "U",
    "Ú": "U",
    "Û": "U",
    "Ü": "U",
    "ù": "u",
    "ú": "u",
    "û": "u",
    "ü": "u",
    "Ý": "Y",
    "ý": "y",
    "ÿ": "y",
    "Æ": "Ae",
    "æ": "ae",
    "Þ": "Th",
    "þ": "th",
    "ß": "ss",
    // Latin Extended-A block.
    "Ā": "A",
    "Ă": "A",
    "Ą": "A",
    "ā": "a",
    "ă": "a",
    "ą": "a",
    "Ć": "C",
    "Ĉ": "C",
    "Ċ": "C",
    "Č": "C",
    "ć": "c",
    "ĉ": "c",
    "ċ": "c",
    "č": "c",
    "Ď": "D",
    "Đ": "D",
    "ď": "d",
    "đ": "d",
    "Ē": "E",
    "Ĕ": "E",
    "Ė": "E",
    "Ę": "E",
    "Ě": "E",
    "ē": "e",
    "ĕ": "e",
    "ė": "e",
    "ę": "e",
    "ě": "e",
    "Ĝ": "G",
    "Ğ": "G",
    "Ġ": "G",
    "Ģ": "G",
    "ĝ": "g",
    "ğ": "g",
    "ġ": "g",
    "ģ": "g",
    "Ĥ": "H",
    "Ħ": "H",
    "ĥ": "h",
    "ħ": "h",
    "Ĩ": "I",
    "Ī": "I",
    "Ĭ": "I",
    "Į": "I",
    "İ": "I",
    "ĩ": "i",
    "ī": "i",
    "ĭ": "i",
    "į": "i",
    "ı": "i",
    "Ĵ": "J",
    "ĵ": "j",
    "Ķ": "K",
    "ķ": "k",
    "ĸ": "k",
    "Ĺ": "L",
    "Ļ": "L",
    "Ľ": "L",
    "Ŀ": "L",
    "Ł": "L",
    "ĺ": "l",
    "ļ": "l",
    "ľ": "l",
    "ŀ": "l",
    "ł": "l",
    "Ń": "N",
    "Ņ": "N",
    "Ň": "N",
    "Ŋ": "N",
    "ń": "n",
    "ņ": "n",
    "ň": "n",
    "ŋ": "n",
    "Ō": "O",
    "Ŏ": "O",
    "Ő": "O",
    "ō": "o",
    "ŏ": "o",
    "ő": "o",
    "Ŕ": "R",
    "Ŗ": "R",
    "Ř": "R",
    "ŕ": "r",
    "ŗ": "r",
    "ř": "r",
    "Ś": "S",
    "Ŝ": "S",
    "Ş": "S",
    "Š": "S",
    "ś": "s",
    "ŝ": "s",
    "ş": "s",
    "š": "s",
    "Ţ": "T",
    "Ť": "T",
    "Ŧ": "T",
    "ţ": "t",
    "ť": "t",
    "ŧ": "t",
    "Ũ": "U",
    "Ū": "U",
    "Ŭ": "U",
    "Ů": "U",
    "Ű": "U",
    "Ų": "U",
    "ũ": "u",
    "ū": "u",
    "ŭ": "u",
    "ů": "u",
    "ű": "u",
    "ų": "u",
    "Ŵ": "W",
    "ŵ": "w",
    "Ŷ": "Y",
    "ŷ": "y",
    "Ÿ": "Y",
    "Ź": "Z",
    "Ż": "Z",
    "Ž": "Z",
    "ź": "z",
    "ż": "z",
    "ž": "z",
    "Ĳ": "IJ",
    "ĳ": "ij",
    "Œ": "Oe",
    "œ": "oe",
    "ŉ": "'n",
    "ſ": "s"
  };
  var deburrLetter$1 = basePropertyOf(deburredLetters);
  var _deburrLetter = deburrLetter$1;
  var deburrLetter = _deburrLetter, toString$1 = toString_1;
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
  var rsComboMarksRange$1 = "\\u0300-\\u036f", reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$1 = "\\u20d0-\\u20ff", rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
  var rsCombo$1 = "[" + rsComboRange$1 + "]";
  var reComboMark = RegExp(rsCombo$1, "g");
  function deburr$1(string2) {
    string2 = toString$1(string2);
    return string2 && string2.replace(reLatin, deburrLetter).replace(reComboMark, "");
  }
  var deburr_1 = deburr$1;
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
  function asciiWords$1(string2) {
    return string2.match(reAsciiWord) || [];
  }
  var _asciiWords = asciiWords$1;
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
  function hasUnicodeWord$1(string2) {
    return reHasUnicodeWord.test(string2);
  }
  var _hasUnicodeWord = hasUnicodeWord$1;
  var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
  var rsApos$1 = "['’]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
  var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos$1 + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos$1 + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
  var reUnicodeWord = RegExp([
    rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
    rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
    rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
    rsUpper + "+" + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join("|"), "g");
  function unicodeWords$1(string2) {
    return string2.match(reUnicodeWord) || [];
  }
  var _unicodeWords = unicodeWords$1;
  var asciiWords = _asciiWords, hasUnicodeWord = _hasUnicodeWord, toString = toString_1, unicodeWords = _unicodeWords;
  function words$2(string2, pattern, guard2) {
    string2 = toString(string2);
    pattern = guard2 ? void 0 : pattern;
    if (pattern === void 0) {
      return hasUnicodeWord(string2) ? unicodeWords(string2) : asciiWords(string2);
    }
    return string2.match(pattern) || [];
  }
  var words_1 = words$2;
  var arrayReduce = _arrayReduce, deburr = deburr_1, words$1 = words_1;
  var rsApos = "['’]";
  var reApos = RegExp(rsApos, "g");
  function createCompounder$1(callback) {
    return function(string2) {
      return arrayReduce(words$1(deburr(string2).replace(reApos, "")), callback, "");
    };
  }
  var _createCompounder = createCompounder$1;
  var createCompounder = _createCompounder;
  var kebabCase = createCompounder(function(result, word, index) {
    return result + (index ? "-" : "") + word.toLowerCase();
  });
  var kebabCase_1 = kebabCase;
  const kebabCase$1 = /* @__PURE__ */ getDefaultExportFromCjs(kebabCase_1);
  function isUndefined(value) {
    return value === void 0;
  }
  var isUndefined_1 = isUndefined;
  const isUndefined$1 = /* @__PURE__ */ getDefaultExportFromCjs(isUndefined_1);
  var FUNC_ERROR_TEXT = "Expected a function";
  function negate$1(predicate) {
    if (typeof predicate != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    return function() {
      var args = arguments;
      switch (args.length) {
        case 0:
          return !predicate.call(this);
        case 1:
          return !predicate.call(this, args[0]);
        case 2:
          return !predicate.call(this, args[0], args[1]);
        case 3:
          return !predicate.call(this, args[0], args[1], args[2]);
      }
      return !predicate.apply(this, args);
    };
  }
  var negate_1 = negate$1;
  var arrayPush = _arrayPush, getPrototype = _getPrototype, getSymbols$1 = _getSymbols, stubArray = stubArray_1;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object) {
    var result = [];
    while (object) {
      arrayPush(result, getSymbols$1(object));
      object = getPrototype(object);
    }
    return result;
  };
  var _getSymbolsIn = getSymbolsIn$2;
  var baseGetAllKeys = _baseGetAllKeys, getSymbolsIn$1 = _getSymbolsIn, keysIn$2 = keysIn_1;
  function getAllKeysIn$3(object) {
    return baseGetAllKeys(object, keysIn$2, getSymbolsIn$1);
  }
  var _getAllKeysIn = getAllKeysIn$3;
  var arrayMap$1 = _arrayMap, baseIteratee$1 = _baseIteratee, basePickBy = _basePickBy, getAllKeysIn$2 = _getAllKeysIn;
  function pickBy$1(object, predicate) {
    if (object == null) {
      return {};
    }
    var props = arrayMap$1(getAllKeysIn$2(object), function(prop2) {
      return [prop2];
    });
    predicate = baseIteratee$1(predicate);
    return basePickBy(object, props, function(value, path2) {
      return predicate(value, path2[0]);
    });
  }
  var pickBy_1 = pickBy$1;
  var baseIteratee = _baseIteratee, negate = negate_1, pickBy = pickBy_1;
  function omitBy(object, predicate) {
    return pickBy(object, negate(baseIteratee(predicate)));
  }
  var omitBy_1 = omitBy;
  const omitBy$1 = /* @__PURE__ */ getDefaultExportFromCjs(omitBy_1);
  function _typeof$1(o3) {
    "@babel/helpers - typeof";
    return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o4) {
      return typeof o4;
    } : function(o4) {
      return o4 && "function" == typeof Symbol && o4.constructor === Symbol && o4 !== Symbol.prototype ? "symbol" : typeof o4;
    }, _typeof$1(o3);
  }
  function _toPrimitive$1(input, hint) {
    if (_typeof$1(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof$1(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey$1(arg) {
    var key = _toPrimitive$1(arg, "string");
    return _typeof$1(key) === "symbol" ? key : String(key);
  }
  function _defineProperty$1(obj, key, value) {
    key = _toPropertyKey$1(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var ANCHOR = /* @__PURE__ */ new WeakMap();
  var FOCUS = /* @__PURE__ */ new WeakMap();
  class Token {
  }
  class AnchorToken extends Token {
    constructor() {
      var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      super();
      _defineProperty$1(this, "offset", void 0);
      _defineProperty$1(this, "path", void 0);
      var {
        offset,
        path: path2
      } = props;
      this.offset = offset;
      this.path = path2;
    }
  }
  class FocusToken extends Token {
    constructor() {
      var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      super();
      _defineProperty$1(this, "offset", void 0);
      _defineProperty$1(this, "path", void 0);
      var {
        offset,
        path: path2
      } = props;
      this.offset = offset;
      this.path = path2;
    }
  }
  var addAnchorToken = (text, token) => {
    var offset = text.text.length;
    ANCHOR.set(text, [offset, token]);
  };
  var getAnchorOffset = (text) => {
    return ANCHOR.get(text);
  };
  var addFocusToken = (text, token) => {
    var offset = text.text.length;
    FOCUS.set(text, [offset, token]);
  };
  var getFocusOffset = (text) => {
    return FOCUS.get(text);
  };
  function ownKeys$1(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$1(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$1(Object(t2), true).forEach(function(r3) {
        _defineProperty$1(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$1(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var STRINGS = /* @__PURE__ */ new WeakSet();
  var resolveDescendants = (children) => {
    var nodes2 = [];
    var addChild = (child2) => {
      if (child2 == null) {
        return;
      }
      var prev = nodes2[nodes2.length - 1];
      if (typeof child2 === "string") {
        var text = {
          text: child2
        };
        STRINGS.add(text);
        child2 = text;
      }
      if (Text$1.isText(child2)) {
        var c2 = child2;
        if (Text$1.isText(prev) && STRINGS.has(prev) && STRINGS.has(c2) && Text$1.equals(prev, c2, {
          loose: true
        })) {
          prev.text += c2.text;
        } else {
          nodes2.push(c2);
        }
      } else if (Element$2.isElement(child2)) {
        nodes2.push(child2);
      } else if (child2 instanceof Token) {
        var n2 = nodes2[nodes2.length - 1];
        if (!Text$1.isText(n2)) {
          addChild("");
          n2 = nodes2[nodes2.length - 1];
        }
        if (child2 instanceof AnchorToken) {
          addAnchorToken(n2, child2);
        } else if (child2 instanceof FocusToken) {
          addFocusToken(n2, child2);
        }
      } else {
        throw new Error("Unexpected hyperscript child object: ".concat(child2));
      }
    };
    for (var child of children.flat(Infinity)) {
      addChild(child);
    }
    return nodes2;
  };
  function createAnchor(tagName, attributes, children) {
    return new AnchorToken(attributes);
  }
  function createCursor(tagName, attributes, children) {
    return [new AnchorToken(attributes), new FocusToken(attributes)];
  }
  function createElement(tagName, attributes, children) {
    return _objectSpread$1(_objectSpread$1({}, attributes), {}, {
      children: resolveDescendants(children)
    });
  }
  function createFocus(tagName, attributes, children) {
    return new FocusToken(attributes);
  }
  function createFragment(tagName, attributes, children) {
    return resolveDescendants(children);
  }
  function createSelection(tagName, attributes, children) {
    var anchor = children.find((c2) => c2 instanceof AnchorToken);
    var focus2 = children.find((c2) => c2 instanceof FocusToken);
    if (!anchor || anchor.offset == null || anchor.path == null) {
      throw new Error("The <selection> hyperscript tag must have an <anchor> tag as a child with `path` and `offset` attributes defined.");
    }
    if (!focus2 || focus2.offset == null || focus2.path == null) {
      throw new Error("The <selection> hyperscript tag must have a <focus> tag as a child with `path` and `offset` attributes defined.");
    }
    return _objectSpread$1({
      anchor: {
        offset: anchor.offset,
        path: anchor.path
      },
      focus: {
        offset: focus2.offset,
        path: focus2.path
      }
    }, attributes);
  }
  function createText(tagName, attributes, children) {
    var nodes2 = resolveDescendants(children);
    if (nodes2.length > 1) {
      throw new Error("The <text> hyperscript tag must only contain a single node's worth of children.");
    }
    var [node2] = nodes2;
    if (node2 == null) {
      node2 = {
        text: ""
      };
    }
    if (!Text$1.isText(node2)) {
      throw new Error("\n    The <text> hyperscript tag can only contain text content as children.");
    }
    STRINGS.delete(node2);
    Object.assign(node2, attributes);
    return node2;
  }
  var createEditor = (makeEditor) => (tagName, attributes, children) => {
    var otherChildren = [];
    var selectionChild;
    for (var child of children) {
      if (Range.isRange(child)) {
        selectionChild = child;
      } else {
        otherChildren.push(child);
      }
    }
    var descendants = resolveDescendants(otherChildren);
    var selection = {};
    var editor = makeEditor();
    Object.assign(editor, attributes);
    editor.children = descendants;
    for (var [node2, path2] of Node$1.texts(editor)) {
      var anchor = getAnchorOffset(node2);
      var focus2 = getFocusOffset(node2);
      if (anchor != null) {
        var [offset] = anchor;
        selection.anchor = {
          path: path2,
          offset
        };
      }
      if (focus2 != null) {
        var [_offset] = focus2;
        selection.focus = {
          path: path2,
          offset: _offset
        };
      }
    }
    if (selection.anchor && !selection.focus) {
      throw new Error("Slate hyperscript ranges must have both `<anchor />` and `<focus />` defined if one is defined, but you only defined `<anchor />`. For collapsed selections, use `<cursor />` instead.");
    }
    if (!selection.anchor && selection.focus) {
      throw new Error("Slate hyperscript ranges must have both `<anchor />` and `<focus />` defined if one is defined, but you only defined `<focus />`. For collapsed selections, use `<cursor />` instead.");
    }
    if (selectionChild != null) {
      editor.selection = selectionChild;
    } else if (Range.isRange(selection)) {
      editor.selection = selection;
    }
    return editor;
  };
  function ownKeys$2(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread$2(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys$2(Object(t2), true).forEach(function(r3) {
        _defineProperty$1(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$2(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  var DEFAULT_CREATORS = {
    anchor: createAnchor,
    cursor: createCursor,
    editor: createEditor(createEditor$2),
    element: createElement,
    focus: createFocus,
    fragment: createFragment,
    selection: createSelection,
    text: createText
  };
  var createHyperscript = function createHyperscript2() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var {
      elements = {}
    } = options;
    var elementCreators = normalizeElements(elements);
    var creators = _objectSpread$2(_objectSpread$2(_objectSpread$2({}, DEFAULT_CREATORS), elementCreators), options.creators);
    var jsx2 = createFactory(creators);
    return jsx2;
  };
  var createFactory = (creators) => {
    var jsx2 = function jsx3(tagName, attributes) {
      for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        children[_key - 2] = arguments[_key];
      }
      var creator = creators[tagName];
      if (!creator) {
        throw new Error("No hyperscript creator found for tag: <".concat(tagName, ">"));
      }
      if (attributes == null) {
        attributes = {};
      }
      if (!isPlainObject$5(attributes)) {
        children = [attributes].concat(children);
        attributes = {};
      }
      children = children.filter((child) => Boolean(child)).flat();
      var ret = creator(tagName, attributes, children);
      return ret;
    };
    return jsx2;
  };
  var normalizeElements = (elements) => {
    var creators = {};
    var _loop = function _loop2() {
      var props = elements[tagName];
      if (typeof props !== "object") {
        throw new Error("Properties specified for a hyperscript shorthand should be an object, but for the custom element <".concat(tagName, ">  tag you passed: ").concat(props));
      }
      creators[tagName] = (tagName2, attributes, children) => {
        return createElement("element", _objectSpread$2(_objectSpread$2({}, props), attributes), children);
      };
    };
    for (var tagName in elements) {
      _loop();
    }
    return creators;
  };
  var jsx = createHyperscript();
  function arrayEach$1(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length;
    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  var _arrayEach = arrayEach$1;
  var copyObject$4 = _copyObject, keys$1 = keys_1;
  function baseAssign$1(object, source2) {
    return object && copyObject$4(source2, keys$1(source2), object);
  }
  var _baseAssign = baseAssign$1;
  var copyObject$3 = _copyObject, keysIn$1 = keysIn_1;
  function baseAssignIn$1(object, source2) {
    return object && copyObject$3(source2, keysIn$1(source2), object);
  }
  var _baseAssignIn = baseAssignIn$1;
  var copyObject$2 = _copyObject, getSymbols = _getSymbols;
  function copySymbols$1(source2, object) {
    return copyObject$2(source2, getSymbols(source2), object);
  }
  var _copySymbols = copySymbols$1;
  var copyObject$1 = _copyObject, getSymbolsIn = _getSymbolsIn;
  function copySymbolsIn$1(source2, object) {
    return copyObject$1(source2, getSymbolsIn(source2), object);
  }
  var _copySymbolsIn = copySymbolsIn$1;
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function initCloneArray$1(array) {
    var length = array.length, result = new array.constructor(length);
    if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }
  var _initCloneArray = initCloneArray$1;
  var cloneArrayBuffer$1 = _cloneArrayBuffer;
  function cloneDataView$1(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer$1(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }
  var _cloneDataView = cloneDataView$1;
  var reFlags = /\w*$/;
  function cloneRegExp$1(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }
  var _cloneRegExp = cloneRegExp$1;
  var Symbol$1 = _Symbol;
  var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
  function cloneSymbol$1(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }
  var _cloneSymbol = cloneSymbol$1;
  var cloneArrayBuffer = _cloneArrayBuffer, cloneDataView = _cloneDataView, cloneRegExp = _cloneRegExp, cloneSymbol = _cloneSymbol, cloneTypedArray = _cloneTypedArray;
  var boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", mapTag$2 = "[object Map]", numberTag$1 = "[object Number]", regexpTag$1 = "[object RegExp]", setTag$2 = "[object Set]", stringTag$1 = "[object String]", symbolTag$1 = "[object Symbol]";
  var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
  function initCloneByTag$1(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag$1:
        return cloneArrayBuffer(object);
      case boolTag$1:
      case dateTag$1:
        return new Ctor(+object);
      case dataViewTag$1:
        return cloneDataView(object, isDeep);
      case float32Tag$1:
      case float64Tag$1:
      case int8Tag$1:
      case int16Tag$1:
      case int32Tag$1:
      case uint8Tag$1:
      case uint8ClampedTag$1:
      case uint16Tag$1:
      case uint32Tag$1:
        return cloneTypedArray(object, isDeep);
      case mapTag$2:
        return new Ctor();
      case numberTag$1:
      case stringTag$1:
        return new Ctor(object);
      case regexpTag$1:
        return cloneRegExp(object);
      case setTag$2:
        return new Ctor();
      case symbolTag$1:
        return cloneSymbol(object);
    }
  }
  var _initCloneByTag = initCloneByTag$1;
  var getTag$2 = _getTag, isObjectLike$1 = isObjectLike_1;
  var mapTag$1 = "[object Map]";
  function baseIsMap$1(value) {
    return isObjectLike$1(value) && getTag$2(value) == mapTag$1;
  }
  var _baseIsMap = baseIsMap$1;
  var baseIsMap = _baseIsMap, baseUnary$1 = _baseUnary, nodeUtil$1 = _nodeUtilExports;
  var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;
  var isMap$1 = nodeIsMap ? baseUnary$1(nodeIsMap) : baseIsMap;
  var isMap_1 = isMap$1;
  var getTag$1 = _getTag, isObjectLike = isObjectLike_1;
  var setTag$1 = "[object Set]";
  function baseIsSet$1(value) {
    return isObjectLike(value) && getTag$1(value) == setTag$1;
  }
  var _baseIsSet = baseIsSet$1;
  var baseIsSet = _baseIsSet, baseUnary = _baseUnary, nodeUtil = _nodeUtilExports;
  var nodeIsSet = nodeUtil && nodeUtil.isSet;
  var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
  var isSet_1 = isSet$1;
  var Stack = _Stack, arrayEach = _arrayEach, assignValue = _assignValue, baseAssign = _baseAssign, baseAssignIn = _baseAssignIn, cloneBuffer = _cloneBufferExports, copyArray = _copyArray, copySymbols = _copySymbols, copySymbolsIn = _copySymbolsIn, getAllKeys = _getAllKeys, getAllKeysIn$1 = _getAllKeysIn, getTag = _getTag, initCloneArray = _initCloneArray, initCloneByTag = _initCloneByTag, initCloneObject = _initCloneObject, isArray = isArray_1, isBuffer = isBufferExports, isMap = isMap_1, isObject = isObject_1, isSet = isSet_1, keys = keys_1, keysIn = keysIn_1;
  var CLONE_DEEP_FLAG$2 = 1, CLONE_FLAT_FLAG$1 = 2, CLONE_SYMBOLS_FLAG$2 = 4;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
  function baseClone$2(value, bitmask, customizer, key, object, stack) {
    var result, isDeep = bitmask & CLONE_DEEP_FLAG$2, isFlat = bitmask & CLONE_FLAT_FLAG$1, isFull = bitmask & CLONE_SYMBOLS_FLAG$2;
    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== void 0) {
      return result;
    }
    if (!isObject(value)) {
      return value;
    }
    var isArr = isArray(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
      if (isBuffer(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag == objectTag || tag == argsTag || isFunc && !object) {
        result = isFlat || isFunc ? {} : initCloneObject(value);
        if (!isDeep) {
          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = initCloneByTag(value, tag, isDeep);
      }
    }
    stack || (stack = new Stack());
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);
    if (isSet(value)) {
      value.forEach(function(subValue) {
        result.add(baseClone$2(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap(value)) {
      value.forEach(function(subValue, key2) {
        result.set(key2, baseClone$2(subValue, bitmask, customizer, key2, value, stack));
      });
    }
    var keysFunc = isFull ? isFlat ? getAllKeysIn$1 : getAllKeys : isFlat ? keysIn : keys;
    var props = isArr ? void 0 : keysFunc(value);
    arrayEach(props || value, function(subValue, key2) {
      if (props) {
        key2 = subValue;
        subValue = value[key2];
      }
      assignValue(result, key2, baseClone$2(subValue, bitmask, customizer, key2, value, stack));
    });
    return result;
  }
  var _baseClone = baseClone$2;
  function last$1(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : void 0;
  }
  var last_1 = last$1;
  function baseSlice$1(array, start2, end2) {
    var index = -1, length = array.length;
    if (start2 < 0) {
      start2 = -start2 > length ? 0 : length + start2;
    }
    end2 = end2 > length ? length : end2;
    if (end2 < 0) {
      end2 += length;
    }
    length = start2 > end2 ? 0 : end2 - start2 >>> 0;
    start2 >>>= 0;
    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start2];
    }
    return result;
  }
  var _baseSlice = baseSlice$1;
  var baseGet = _baseGet, baseSlice = _baseSlice;
  function parent$1(object, path2) {
    return path2.length < 2 ? object : baseGet(object, baseSlice(path2, 0, -1));
  }
  var _parent = parent$1;
  var castPath$1 = _castPath, last = last_1, parent = _parent, toKey = _toKey;
  function baseUnset$1(object, path2) {
    path2 = castPath$1(path2, object);
    object = parent(object, path2);
    return object == null || delete object[toKey(last(path2))];
  }
  var _baseUnset = baseUnset$1;
  var isPlainObject = isPlainObject_1;
  function customOmitClone$1(value) {
    return isPlainObject(value) ? void 0 : value;
  }
  var _customOmitClone = customOmitClone$1;
  var arrayMap = _arrayMap, baseClone$1 = _baseClone, baseUnset = _baseUnset, castPath = _castPath, copyObject = _copyObject, customOmitClone = _customOmitClone, flatRest = _flatRest, getAllKeysIn = _getAllKeysIn;
  var CLONE_DEEP_FLAG$1 = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG$1 = 4;
  var omit = flatRest(function(object, paths) {
    var result = {};
    if (object == null) {
      return result;
    }
    var isDeep = false;
    paths = arrayMap(paths, function(path2) {
      path2 = castPath(path2, object);
      isDeep || (isDeep = path2.length > 1);
      return path2;
    });
    copyObject(object, getAllKeysIn(object), result);
    if (isDeep) {
      result = baseClone$1(result, CLONE_DEEP_FLAG$1 | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG$1, customOmitClone);
    }
    var length = paths.length;
    while (length--) {
      baseUnset(result, paths[length]);
    }
    return result;
  });
  var omit_1 = omit;
  const omit$1 = /* @__PURE__ */ getDefaultExportFromCjs(omit_1);
  var has = Object.prototype.hasOwnProperty;
  function find$1(iter, tar, key) {
    for (key of iter.keys()) {
      if (dequal(key, tar))
        return key;
    }
  }
  function dequal(foo, bar) {
    var ctor, len, tmp;
    if (foo === bar)
      return true;
    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
      if (ctor === Date)
        return foo.getTime() === bar.getTime();
      if (ctor === RegExp)
        return foo.toString() === bar.toString();
      if (ctor === Array) {
        if ((len = foo.length) === bar.length) {
          while (len-- && dequal(foo[len], bar[len]))
            ;
        }
        return len === -1;
      }
      if (ctor === Set) {
        if (foo.size !== bar.size) {
          return false;
        }
        for (len of foo) {
          tmp = len;
          if (tmp && typeof tmp === "object") {
            tmp = find$1(bar, tmp);
            if (!tmp)
              return false;
          }
          if (!bar.has(tmp))
            return false;
        }
        return true;
      }
      if (ctor === Map) {
        if (foo.size !== bar.size) {
          return false;
        }
        for (len of foo) {
          tmp = len[0];
          if (tmp && typeof tmp === "object") {
            tmp = find$1(bar, tmp);
            if (!tmp)
              return false;
          }
          if (!dequal(len[1], bar.get(tmp))) {
            return false;
          }
        }
        return true;
      }
      if (ctor === ArrayBuffer) {
        foo = new Uint8Array(foo);
        bar = new Uint8Array(bar);
      } else if (ctor === DataView) {
        if ((len = foo.byteLength) === bar.byteLength) {
          while (len-- && foo.getInt8(len) === bar.getInt8(len))
            ;
        }
        return len === -1;
      }
      if (ArrayBuffer.isView(foo)) {
        if ((len = foo.byteLength) === bar.byteLength) {
          while (len-- && foo[len] === bar[len])
            ;
        }
        return len === -1;
      }
      if (!ctor || typeof foo === "object") {
        len = 0;
        for (ctor in foo) {
          if (has.call(foo, ctor) && ++len && !has.call(bar, ctor))
            return false;
          if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor]))
            return false;
        }
        return Object.keys(bar).length === len;
      }
    }
    return foo !== foo && bar !== bar;
  }
  function useDeepCompareMemoize(dependencies) {
    const dependenciesRef = React.useRef(dependencies);
    const signalRef = React.useRef(0);
    if (!dequal(dependencies, dependenciesRef.current)) {
      dependenciesRef.current = dependencies;
      signalRef.current += 1;
    }
    return React.useMemo(() => dependenciesRef.current, [signalRef.current]);
  }
  function useDeepCompareMemo(factory, dependencies) {
    return React.useMemo(factory, useDeepCompareMemoize(dependencies));
  }
  var createSlotComponent = (element) => React.forwardRef(({ as, asChild = false, ...props }, ref) => {
    const Comp = asChild ? reactSlot.Slot : as || element;
    return /* @__PURE__ */ React.createElement(Comp, { ref, ...props });
  });
  createSlotComponent("div");
  React.memo(
    ({ children }) => {
      return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
    }
  );
  createSlotComponent("span");
  var setRef = (ref, value) => {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref !== null && ref !== void 0) {
      ref.current = value;
    }
  };
  var composeRefs = (...refs) => (node2) => refs.forEach((ref) => setRef(ref, node2));
  var useComposedRef = (...refs) => {
    return React.useCallback(composeRefs(...refs), refs);
  };
  var createPrimitiveComponent = (element) => {
    const Comp = createSlotComponent(element);
    return ({
      propsHook,
      stateHook
    } = {}) => {
      return React.forwardRef(
        ({
          asChild,
          className: classNameProp,
          getClassName,
          options,
          state: stateProp,
          ...props
        }, ref) => {
          var _a2;
          const state = isDefined(stateProp) ? stateProp : stateHook ? stateHook(options) : void 0;
          const {
            hidden,
            props: hookProps,
            ref: hookRef
          } = propsHook ? propsHook(state) : { hidden: false, props: {}, ref: null };
          const _ref = useComposedRef(ref, hookRef);
          const className = isDefined(hookProps == null ? void 0 : hookProps.className) || isDefined(classNameProp) ? clsx.clsx(hookProps == null ? void 0 : hookProps.className, classNameProp) : void 0;
          const style = (hookProps == null ? void 0 : hookProps.style) || props.style ? { ...hookProps == null ? void 0 : hookProps.style, ...props.style } : void 0;
          if (!asChild && hidden)
            return null;
          return /* @__PURE__ */ React.createElement(
            Comp,
            {
              ref: _ref,
              asChild,
              ...hookProps,
              className,
              style,
              ...props,
              ...((_a2 = props.setProps) == null ? void 0 : _a2.call(props, hookProps ?? {})) ?? {}
            }
          );
        }
      );
    };
  };
  var CAN_USE_DOM = typeof window !== "undefined" && ((_a = window.document) == null ? void 0 : _a.createElement) !== void 0;
  CAN_USE_DOM ? React.useLayoutEffect : React.useEffect;
  function useMemoizedSelector(selector, deps, equalityFn = (a2, b) => a2 === b) {
    const [memoizedValue, setMemoizedValue] = React.useState(() => selector());
    const previousValueRef = React.useRef(memoizedValue);
    React.useEffect(() => {
      const newValue = selector();
      if (!equalityFn(previousValueRef.current, newValue)) {
        setMemoizedValue(newValue);
        previousValueRef.current = newValue;
      }
    }, deps);
    return memoizedValue;
  }
  var canUsePassiveEvents = () => {
    if (typeof window === "undefined" || typeof window.addEventListener !== "function")
      return false;
    let passive = false;
    const options = Object.defineProperty({}, "passive", {
      get() {
        passive = true;
      }
    });
    const noop2 = () => null;
    window.addEventListener("test", noop2, options);
    window.removeEventListener("test", noop2, options);
    return passive;
  };
  var DEFAULT_IGNORE_CLASS = "ignore-onclickoutside";
  var checkClass = (el, cl) => {
    var _a2;
    return (_a2 = el.classList) == null ? void 0 : _a2.contains(cl);
  };
  var hasIgnoreClass = (e3, ignoreClass) => {
    let el = e3.target || e3;
    while (el) {
      if (Array.isArray(ignoreClass)) {
        if (ignoreClass.some((c2) => checkClass(el, c2)))
          return true;
      } else if (checkClass(el, ignoreClass)) {
        return true;
      }
      el = el.parentElement;
    }
    return false;
  };
  var clickedOnScrollbar = (e3) => document.documentElement.clientWidth <= e3.clientX || document.documentElement.clientHeight <= e3.clientY;
  var getEventOptions = (type) => type.includes("touch") && canUsePassiveEvents() ? { passive: true } : false;
  var useOnClickOutside = (callback, {
    detectIFrame = true,
    disabled,
    eventTypes = ["mousedown", "touchstart"],
    excludeScrollbar,
    ignoreClass = DEFAULT_IGNORE_CLASS,
    refs: refsOpt
  } = {}) => {
    const [refsState, setRefsState] = React.useState([]);
    const callbackRef = React.useRef(callback);
    callbackRef.current = callback;
    const ref = React.useCallback(
      (el) => setRefsState((prevState) => [...prevState, { current: el }]),
      []
    );
    React.useEffect(
      () => {
        if (!(refsOpt == null ? void 0 : refsOpt.length) && refsState.length === 0)
          return;
        const getEls = () => {
          const els = [];
          (refsOpt || refsState).forEach(
            ({ current: current2 }) => current2 && els.push(current2)
          );
          return els;
        };
        const handler = (e3) => {
          if (!hasIgnoreClass(e3, ignoreClass) && !(excludeScrollbar && clickedOnScrollbar(e3)) && getEls().every((el) => !el.contains(e3.target)))
            callbackRef.current(e3);
        };
        const blurHandler = (e3) => (
          // On firefox the iframe becomes document.activeElement in the next event loop
          setTimeout(() => {
            const { activeElement } = document;
            if ((activeElement == null ? void 0 : activeElement.tagName) === "IFRAME" && !hasIgnoreClass(activeElement, ignoreClass) && !getEls().includes(activeElement))
              callbackRef.current(e3);
          }, 0)
        );
        const removeEventListener = () => {
          eventTypes.forEach(
            (type) => document.removeEventListener(
              type,
              handler,
              getEventOptions(type)
            )
          );
          if (detectIFrame)
            window.removeEventListener("blur", blurHandler);
        };
        if (disabled) {
          removeEventListener();
          return;
        }
        eventTypes.forEach(
          (type) => document.addEventListener(type, handler, getEventOptions(type))
        );
        if (detectIFrame)
          window.addEventListener("blur", blurHandler);
        return () => removeEventListener();
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [
        refsState,
        ignoreClass,
        excludeScrollbar,
        disabled,
        detectIFrame,
        // eslint-disable-next-line react-hooks/exhaustive-deps
        JSON.stringify(eventTypes)
      ]
    );
    return ref;
  };
  var useStableFn = (fn, deps = []) => {
    const fnRef = React.useRef(fn);
    fnRef.current = fn;
    return React.useCallback((...args) => fnRef.current(...args), deps);
  };
  function withRef(renderFunction) {
    return React.forwardRef(renderFunction);
  }
  globalThis && globalThis.__rest || function(s2, e3) {
    var t2 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
        t2[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
        if (e3.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
          t2[p2[i2]] = s2[p2[i2]];
      }
    return t2;
  };
  const id = (x) => x;
  const Left = (value) => ({
    _tag: "Left",
    value
  });
  const Right = (value) => ({
    _tag: "Right",
    value
  });
  const either$3 = (mapLeft, mapRight, e3) => e3._tag === "Left" ? mapLeft(e3.value) : mapRight(e3.value);
  const profunctorFn = {
    dimap: (f2, g, fn) => (x) => g(fn(f2(x))),
    first: (f2) => ([x, y]) => [f2(x), y],
    right: (f2) => (e3) => e3._tag === "Left" ? e3 : Right(f2(e3.value)),
    wander: (f2) => (xs) => xs.map(f2)
  };
  const monoidFirst = {
    empty: () => void 0,
    foldMap: (f2, xs) => {
      for (let i2 = 0; i2 < xs.length; i2++) {
        const x = f2(xs[i2]);
        if (x != void 0)
          return x;
      }
      return void 0;
    }
  };
  const monoidArray = {
    empty: () => [],
    foldMap: (f2, xs) => {
      let acc = [];
      xs.forEach((x) => {
        acc = acc.concat(f2(x));
      });
      return acc;
    }
  };
  const profunctorConst = (monoid) => ({
    dimap: (f2, _g, toF) => (x) => toF(f2(x)),
    first: (toF) => ([x, _y]) => toF(x),
    right: (toF) => (e3) => e3._tag === "Left" ? monoid.empty() : toF(e3.value),
    wander: (toF) => (xs) => monoid.foldMap(toF, xs)
  });
  const compositionType = {
    Equivalence: {
      Equivalence: "Equivalence",
      Iso: "Iso",
      Lens: "Lens",
      Prism: "Prism",
      Traversal: "Traversal",
      Getter: "Getter",
      AffineFold: "AffineFold",
      Fold: "Fold",
      Setter: "Setter"
    },
    Iso: {
      Equivalence: "Iso",
      Iso: "Iso",
      Lens: "Lens",
      Prism: "Prism",
      Traversal: "Traversal",
      Getter: "Getter",
      AffineFold: "AffineFold",
      Fold: "Fold",
      Setter: "Setter"
    },
    Lens: {
      Equivalence: "Lens",
      Iso: "Lens",
      Lens: "Lens",
      Prism: "Prism",
      Traversal: "Traversal",
      Getter: "Getter",
      AffineFold: "AffineFold",
      Fold: "Fold",
      Setter: "Setter"
    },
    Prism: {
      Equivalence: "Prism",
      Iso: "Prism",
      Lens: "Prism",
      Prism: "Prism",
      Traversal: "Traversal",
      Getter: "AffineFold",
      AffineFold: "AffineFold",
      Fold: "Fold",
      Setter: "Setter"
    },
    Traversal: {
      Equivalence: "Traversal",
      Iso: "Traversal",
      Lens: "Traversal",
      Prism: "Traversal",
      Traversal: "Traversal",
      Getter: "Fold",
      AffineFold: "Fold",
      Fold: "Fold",
      Setter: "Setter"
    },
    Getter: {
      Equivalence: "Getter",
      Iso: "Getter",
      Lens: "Getter",
      Prism: "AffineFold",
      Traversal: "Fold",
      Getter: "Getter",
      AffineFold: "AffineFold",
      Fold: "Fold",
      Setter: void 0
    },
    AffineFold: {
      Equivalence: "AffineFold",
      Iso: "AffineFold",
      Lens: "AffineFold",
      Prism: "AffineFold",
      Traversal: "Fold",
      Getter: "AffineFold",
      AffineFold: "AffineFold",
      Fold: "Fold",
      Setter: void 0
    },
    Fold: {
      Equivalence: "Fold",
      Iso: "Fold",
      Lens: "Fold",
      Prism: "Fold",
      Traversal: "Fold",
      Getter: "Fold",
      AffineFold: "Fold",
      Fold: "Fold",
      Setter: void 0
    },
    Setter: {
      Equivalence: void 0,
      Iso: void 0,
      Lens: void 0,
      Prism: void 0,
      Traversal: void 0,
      Getter: void 0,
      AffineFold: void 0,
      Fold: void 0,
      Setter: void 0
    }
  };
  const withTag = (tag, optic2) => {
    const result = optic2;
    result._tag = tag;
    return result;
  };
  const removable = (optic2) => {
    optic2._removable = true;
    return optic2;
  };
  function compose(optic1, optic2, optic3) {
    switch (arguments.length) {
      case 2: {
        const next2 = (P, optic4) => optic1(P, optic2(P, optic4));
        next2._tag = compositionType[optic1._tag][optic2._tag];
        next2._removable = optic2._removable || false;
        return next2;
      }
      default: {
        const tag1 = compositionType[optic1._tag][optic2._tag];
        const next2 = (P, optic4) => optic1(P, optic2(P, optic3(P, optic4)));
        next2._tag = compositionType[tag1][optic3._tag];
        next2._removable = optic3._removable || false;
        return next2;
      }
    }
  }
  const eq = /* @__PURE__ */ withTag("Equivalence", (_P, optic2) => optic2);
  const iso = (there, back) => withTag("Iso", (P, optic2) => P.dimap(there, back, optic2));
  const lens = (view, update) => withTag("Lens", (P, optic2) => P.dimap((x) => [view(x), x], update, P.first(optic2)));
  const prism = (match2, build) => withTag("Prism", (P, optic2) => P.dimap(match2, (x) => either$3(id, build, x), P.right(optic2)));
  const elems = /* @__PURE__ */ withTag("Traversal", (P, optic2) => P.dimap(id, id, P.wander(optic2)));
  const to = (fn) => withTag("Getter", (P, optic2) => P.dimap(fn, id, optic2));
  const modify$1 = (optic2, fn, source2) => optic2(profunctorFn, fn)(source2);
  const set$1 = (optic2, value, source2) => optic2(profunctorFn, () => value)(source2);
  const get$1 = (optic2, source2) => optic2(profunctorConst({}), id)(source2);
  const preview$1 = (optic2, source2) => optic2(profunctorConst(monoidFirst), id)(source2);
  const collect$1 = (optic2, source2) => optic2(profunctorConst(monoidArray), (x) => [x])(source2);
  const indexed = /* @__PURE__ */ iso((value) => value.map((v, k) => [k, v]), (value) => {
    const sorted = [...value].sort((a2, b) => a2[0] - b[0]);
    const result = [];
    for (let i2 = 0; i2 < sorted.length; ++i2) {
      if (i2 === sorted.length - 1 || sorted[i2][0] !== sorted[i2 + 1][0]) {
        result.push(sorted[i2][1]);
      }
    }
    return result;
  });
  const prop = (key) => lens((source2) => source2[key], ([value, source2]) => Object.assign(Object.assign({}, source2), { [key]: value }));
  const pick = (keys2) => lens((source2) => {
    const value = {};
    for (const key of keys2) {
      value[key] = source2[key];
    }
    return value;
  }, ([value, source2]) => {
    const result = Object.assign({}, source2);
    for (const key of keys2) {
      delete result[key];
    }
    return Object.assign(result, value);
  });
  const nth = (n2) => lens((value) => value[n2], ([value, source2]) => {
    const result = source2.slice();
    result[n2] = value;
    return result;
  });
  const fst = /* @__PURE__ */ nth(0);
  const when = (pred) => prism((x) => pred(x) ? Right(x) : Left(x), id);
  const noMatch = /* @__PURE__ */ Symbol("__no_match__");
  const mustMatch = /* @__PURE__ */ when((source2) => source2 !== noMatch);
  const removeMe = /* @__PURE__ */ Symbol("__remove_me__");
  const at = (i2) => removable(compose(lens((source2) => 0 <= i2 && i2 < source2.length ? source2[i2] : noMatch, ([value, source2]) => {
    if (value === noMatch) {
      return source2;
    }
    if (value === removeMe) {
      if (typeof source2 === "string") {
        return source2.substring(0, i2) + source2.substring(i2 + 1);
      } else {
        return [...source2.slice(0, i2), ...source2.slice(i2 + 1)];
      }
    }
    if (typeof source2 === "string") {
      if (i2 === 0) {
        return value + source2.substring(1);
      }
      if (i2 === source2.length) {
        return source2.substring(0, i2 - 1) + value;
      }
      return source2.substring(0, i2) + value + source2.substring(i2 + 1);
    } else {
      const result = source2.slice();
      result[i2] = value;
      return result;
    }
  }), mustMatch));
  const optional$1 = /* @__PURE__ */ prism((source2) => source2 === void 0 ? Left(void 0) : Right(source2), id);
  const guard = (fn) => prism((source2) => fn(source2) ? Right(source2) : Left(source2), id);
  const find = (predicate) => removable(compose(lens((source2) => {
    const index = source2.findIndex(predicate);
    if (index === -1) {
      return [noMatch, -1];
    }
    return [source2[index], index];
  }, ([[value, index], source2]) => {
    if (value === noMatch) {
      return source2;
    }
    if (value === removeMe) {
      return [...source2.slice(0, index), ...source2.slice(index + 1)];
    }
    const result = source2.slice();
    result[index] = value;
    return result;
  }), fst, mustMatch));
  const filter = (predicate) => compose(lens((source2) => {
    const indexes = source2.map((item, index) => predicate(item) ? index : null).filter((index) => index != null);
    return [indexes.map((index) => source2[index]), indexes];
  }, ([[values, indexes], source2]) => {
    const sn = source2.length, vn = values.length;
    let si = 0, ii = 0, vi = 0;
    const result = [];
    while (si < sn) {
      if (indexes[ii] === si) {
        ++ii;
        if (vi < vn) {
          result.push(values[vi]);
          ++vi;
        }
      } else {
        result.push(source2[si]);
      }
      ++si;
    }
    while (vi < vn) {
      result.push(values[vi++]);
    }
    return result;
  }), fst);
  const valueOr = (defaultValue) => lens((source2) => source2 === void 0 ? defaultValue : source2, ([value, _source]) => value);
  const partsOf = (traversal) => compose(lens((source2) => {
    const value = collect$1(traversal, source2);
    return [value, value.length];
  }, ([[value, originalLength], source2]) => {
    if (value.length !== originalLength) {
      throw new Error("cannot add/remove elements through partsOf");
    }
    let i2 = 0;
    return modify$1(traversal, () => value[i2++], source2);
  }), fst);
  const reread = (fn) => lens((source2) => fn(source2), ([value, _]) => value);
  const rewrite = (fn) => lens((source2) => source2, ([value, _]) => fn(value));
  const prependTo = /* @__PURE__ */ lens((_source) => void 0, ([value, source2]) => {
    if (value === void 0)
      return source2;
    return [value, ...source2];
  });
  const appendTo = /* @__PURE__ */ lens((_source) => void 0, ([value, source2]) => {
    if (value === void 0)
      return source2;
    return [...source2, value];
  });
  const chars = /* @__PURE__ */ compose(iso((s2) => s2.split(""), (a2) => a2.join("")), elems);
  const words = /* @__PURE__ */ compose(iso((s2) => s2.split(/\b/), (a2) => a2.join("")), elems, when((s2) => !/\s+/.test(s2)));
  class Optic {
    constructor(_ref) {
      this._ref = _ref;
    }
    get _tag() {
      return this._ref._tag;
    }
    get _removable() {
      return this._ref._removable;
    }
    compose(other) {
      return new Optic(compose(this._ref, other._ref));
    }
    iso(there, back) {
      return new Optic(compose(this._ref, iso(there, back)));
    }
    lens(view, set2) {
      return new Optic(compose(this._ref, lens(view, ([value, source2]) => set2(source2, value))));
    }
    indexed() {
      return new Optic(compose(this._ref, indexed));
    }
    prop(key) {
      return new Optic(compose(this._ref, prop(key)));
    }
    path(...keys2) {
      if (keys2.length === 1) {
        keys2 = keys2[0].split(".");
      }
      return new Optic(keys2.reduce((ref, key) => compose(ref, prop(key)), this._ref));
    }
    pick(keys2) {
      return new Optic(compose(this._ref, pick(keys2)));
    }
    nth(n2) {
      return new Optic(compose(this._ref, nth(n2)));
    }
    filter(predicate) {
      return new Optic(compose(this._ref, filter(predicate)));
    }
    valueOr(defaultValue) {
      return new Optic(compose(this._ref, valueOr(defaultValue)));
    }
    partsOf(traversalOrFn) {
      const traversal = typeof traversalOrFn === "function" ? traversalOrFn(optic$1) : traversalOrFn;
      return new Optic(compose(this._ref, partsOf(traversal._ref)));
    }
    reread(fn) {
      return new Optic(compose(this._ref, reread(fn)));
    }
    rewrite(fn) {
      return new Optic(compose(this._ref, rewrite(fn)));
    }
    optional() {
      return new Optic(compose(this._ref, optional$1));
    }
    guard_() {
      return (fn) => this.guard(fn);
    }
    guard(fn) {
      return new Optic(compose(this._ref, guard(fn)));
    }
    at(i2) {
      return new Optic(compose(this._ref, at(i2)));
    }
    head() {
      return new Optic(compose(this._ref, at(0)));
    }
    index(i2) {
      return new Optic(compose(this._ref, at(i2)));
    }
    find(predicate) {
      return new Optic(compose(this._ref, find(predicate)));
    }
    elems() {
      return new Optic(compose(this._ref, elems));
    }
    to(fn) {
      return new Optic(compose(this._ref, to(fn)));
    }
    when(predicate) {
      return new Optic(compose(this._ref, when(predicate)));
    }
    chars() {
      return new Optic(compose(this._ref, chars));
    }
    words() {
      return new Optic(compose(this._ref, words));
    }
    prependTo() {
      return new Optic(compose(this._ref, prependTo));
    }
    appendTo() {
      return new Optic(compose(this._ref, appendTo));
    }
  }
  const optic$1 = /* @__PURE__ */ new Optic(eq);
  function optic() {
    return optic$1;
  }
  function get(optic2) {
    return (source2) => get$1(optic2._ref, source2);
  }
  function preview(optic2) {
    return (source2) => preview$1(optic2._ref, source2);
  }
  function collect(optic2) {
    return (source2) => collect$1(optic2._ref, source2);
  }
  function modify(optic2) {
    return (f2) => (source2) => modify$1(optic2._ref, f2, source2);
  }
  function set(optic2) {
    return (value) => (source2) => set$1(optic2._ref, value, source2);
  }
  const getCached = (c2, m, k) => (m.has(k) ? m : m.set(k, c2())).get(k);
  const cache1 = /* @__PURE__ */ new WeakMap();
  const memo2 = (create2, dep1, dep2) => {
    const cache2 = getCached(() => /* @__PURE__ */ new WeakMap(), cache1, dep1);
    return getCached(create2, cache2, dep2);
  };
  const isFunction$1 = (x) => typeof x === "function";
  function focusAtom(baseAtom, callback) {
    return memo2(() => {
      const focus2 = callback(optic());
      const derivedAtom = atom((get2) => {
        const base = get2(baseAtom);
        return base instanceof Promise ? base.then((v) => getValueUsingOptic(focus2, v)) : getValueUsingOptic(focus2, base);
      }, (get2, set$12, update) => {
        const newValueProducer = isFunction$1(update) ? modify(focus2)(update) : set(focus2)(update);
        const base = get2(baseAtom);
        return set$12(baseAtom, base instanceof Promise ? base.then(newValueProducer) : newValueProducer(base));
      });
      return derivedAtom;
    }, baseAtom, callback);
  }
  const getValueUsingOptic = (focus2, bigValue) => {
    if (focus2._tag === "Traversal") {
      const values = collect(focus2)(bigValue);
      return values;
    }
    if (focus2._tag === "Prism") {
      const value2 = preview(focus2)(bigValue);
      return value2;
    }
    const value = get(focus2)(bigValue);
    return value;
  };
  function isFunction(value) {
    return typeof value === "function";
  }
  function mergePlugins(basePlugin, ...sourcePlugins) {
    return mergeWith$1(
      {},
      basePlugin,
      ...sourcePlugins,
      (objValue, srcValue, key) => {
        if (Array.isArray(srcValue)) {
          return srcValue;
        }
        if (key === "options") {
          return { ...objValue, ...srcValue };
        }
      }
    );
  }
  function createSlatePlugin(config = {}) {
    let baseConfig;
    let initialExtension;
    if (isFunction(config)) {
      baseConfig = { key: "" };
      initialExtension = (editor) => config(editor);
    } else {
      baseConfig = config;
    }
    const key = baseConfig.key ?? "";
    const plugin = mergePlugins(
      {
        key,
        __apiExtensions: [],
        __configuration: null,
        __extensions: initialExtension ? [initialExtension] : [],
        __selectorExtensions: [],
        api: {},
        dependencies: [],
        editor: {},
        handlers: {},
        inject: {},
        node: { type: key },
        options: {},
        override: {},
        parser: {},
        parsers: {},
        plugins: [],
        priority: 100,
        render: {},
        shortcuts: {},
        transforms: {}
      },
      config
    );
    if (plugin.node.isLeaf && !isDefined(plugin.node.isDecoration)) {
      plugin.node.isDecoration = true;
    }
    plugin.configure = (config2) => {
      const newPlugin = { ...plugin };
      newPlugin.__configuration = (ctx) => isFunction(config2) ? config2(ctx) : config2;
      return createSlatePlugin(newPlugin);
    };
    plugin.configurePlugin = (p2, config2) => {
      const newPlugin = { ...plugin };
      const configureNestedPlugin = (plugins2) => {
        let found = false;
        const updatedPlugins = plugins2.map((nestedPlugin) => {
          if (nestedPlugin.key === p2.key) {
            found = true;
            return createSlatePlugin({
              ...nestedPlugin,
              __configuration: (ctx) => isFunction(config2) ? config2(ctx) : config2
            });
          }
          if (nestedPlugin.plugins && nestedPlugin.plugins.length > 0) {
            const result2 = configureNestedPlugin(nestedPlugin.plugins);
            if (result2.found) {
              found = true;
              return { ...nestedPlugin, plugins: result2.plugins };
            }
          }
          return nestedPlugin;
        });
        return { found, plugins: updatedPlugins };
      };
      const result = configureNestedPlugin(newPlugin.plugins);
      newPlugin.plugins = result.plugins;
      return createSlatePlugin(newPlugin);
    };
    plugin.extendEditorApi = (extension) => {
      const newPlugin = { ...plugin };
      newPlugin.__apiExtensions = [
        ...newPlugin.__apiExtensions,
        { extension, isPluginSpecific: false }
      ];
      return createSlatePlugin(newPlugin);
    };
    plugin.extendSelectors = (extension) => {
      const newPlugin = { ...plugin };
      newPlugin.__selectorExtensions = [
        ...newPlugin.__selectorExtensions,
        extension
      ];
      return createSlatePlugin(newPlugin);
    };
    plugin.extendApi = (extension) => {
      const newPlugin = { ...plugin };
      newPlugin.__apiExtensions = [
        ...newPlugin.__apiExtensions,
        { extension, isPluginSpecific: true }
      ];
      return createSlatePlugin(newPlugin);
    };
    plugin.extendEditorTransforms = (extension) => {
      const newPlugin = { ...plugin };
      newPlugin.__apiExtensions = [
        ...newPlugin.__apiExtensions,
        { extension, isPluginSpecific: false, isTransform: true }
      ];
      return createSlatePlugin(newPlugin);
    };
    plugin.extendTransforms = (extension) => {
      const newPlugin = { ...plugin };
      newPlugin.__apiExtensions = [
        ...newPlugin.__apiExtensions,
        { extension, isPluginSpecific: true, isTransform: true }
      ];
      return createSlatePlugin(newPlugin);
    };
    plugin.overrideEditor = (extension) => {
      const newPlugin = { ...plugin };
      newPlugin.__apiExtensions = [
        ...newPlugin.__apiExtensions,
        {
          extension,
          isOverride: true,
          isPluginSpecific: false,
          isTransform: true
        }
      ];
      return createSlatePlugin(newPlugin);
    };
    plugin.extend = (extendConfig) => {
      let newPlugin = { ...plugin };
      if (isFunction(extendConfig)) {
        newPlugin.__extensions = [
          ...newPlugin.__extensions,
          extendConfig
        ];
      } else {
        newPlugin = mergePlugins(newPlugin, extendConfig);
      }
      return createSlatePlugin(newPlugin);
    };
    plugin.clone = () => mergePlugins(plugin);
    plugin.extendPlugin = (p2, extendConfig) => {
      const newPlugin = { ...plugin };
      const extendNestedPlugin = (plugins2) => {
        let found = false;
        const updatedPlugins = plugins2.map((nestedPlugin) => {
          if (nestedPlugin.key === p2.key) {
            found = true;
            return createSlatePlugin({
              ...nestedPlugin,
              __extensions: [
                ...nestedPlugin.__extensions,
                (ctx) => isFunction(extendConfig) ? extendConfig(ctx) : extendConfig
              ]
            });
          }
          if (nestedPlugin.plugins && nestedPlugin.plugins.length > 0) {
            const result2 = extendNestedPlugin(nestedPlugin.plugins);
            if (result2.found) {
              found = true;
              return { ...nestedPlugin, plugins: result2.plugins };
            }
          }
          return nestedPlugin;
        });
        return { found, plugins: updatedPlugins };
      };
      const result = extendNestedPlugin(newPlugin.plugins);
      newPlugin.plugins = result.plugins;
      if (!result.found) {
        newPlugin.plugins.push(
          createSlatePlugin({
            key: p2.key,
            __extensions: [
              (ctx) => isFunction(extendConfig) ? extendConfig(ctx) : extendConfig
            ]
          })
        );
      }
      return createSlatePlugin(newPlugin);
    };
    return plugin;
  }
  function createTSlatePlugin(config = {}) {
    return createSlatePlugin(config);
  }
  function getEditorPlugin(editor, p2) {
    const plugin = editor.getPlugin(p2);
    return {
      api: editor.api,
      editor,
      plugin,
      setOption: (keyOrOptions, value) => editor.setOption(plugin, keyOrOptions, value),
      setOptions: (options) => editor.setOptions(plugin, options),
      tf: editor.transforms,
      type: plugin.node.type,
      getOption: (key, ...args) => editor.getOption(plugin, key, ...args),
      getOptions: () => editor.getOptions(plugin)
    };
  }
  var resolvePlugin = (editor, _plugin) => {
    var _a2, _b, _c, _d;
    let plugin = mergePlugins({}, _plugin);
    plugin.__resolved = true;
    if (plugin.__configuration) {
      const configResult = plugin.__configuration(
        getEditorPlugin(editor, plugin)
      );
      plugin = mergePlugins(plugin, configResult);
      delete plugin.__configuration;
    }
    if (plugin.__extensions && plugin.__extensions.length > 0) {
      plugin.__extensions.forEach((extension) => {
        plugin = mergePlugins(
          plugin,
          extension(getEditorPlugin(editor, plugin))
        );
      });
      plugin.__extensions = [];
    }
    const targetPluginToInject = (_a2 = plugin.inject) == null ? void 0 : _a2.targetPluginToInject;
    const targetPlugins = (_b = plugin.inject) == null ? void 0 : _b.targetPlugins;
    if (targetPluginToInject && targetPlugins && targetPlugins.length > 0) {
      plugin.inject = plugin.inject || {};
      plugin.inject.plugins = merge$1(
        {},
        plugin.inject.plugins,
        Object.fromEntries(
          targetPlugins.map((targetPlugin) => {
            const injectedPlugin = targetPluginToInject({
              ...getEditorPlugin(editor, plugin),
              targetPlugin
            });
            return [targetPlugin, injectedPlugin];
          })
        )
      );
    }
    if ((_c = plugin.node) == null ? void 0 : _c.component) {
      plugin.render.node = plugin.node.component;
    }
    if ((_d = plugin.render) == null ? void 0 : _d.node) {
      plugin.node.component = plugin.render.node;
    }
    validatePlugin(editor, plugin);
    return plugin;
  };
  var validatePlugin = (editor, plugin) => {
    if (!plugin.__extensions) {
      editor.api.debug.error(
        `Invalid plugin '${plugin.key}', you should use createSlatePlugin.`,
        "USE_CREATE_PLUGIN"
      );
    }
    if (plugin.node.isElement && plugin.node.isLeaf) {
      editor.api.debug.error(
        `Plugin ${plugin.key} cannot be both an element and a leaf.`,
        "PLUGIN_NODE_TYPE"
      );
    }
  };
  function getSlatePlugin(editor, p2) {
    let plugin = p2;
    const editorPlugin = editor.plugins[p2.key];
    if (!editorPlugin) {
      if (!plugin.node) {
        plugin = createSlatePlugin(plugin);
      }
      return plugin.__resolved ? plugin : resolvePlugin(editor, plugin);
    }
    return editorPlugin;
  }
  function getPluginType(editor, plugin) {
    const p2 = editor.getPlugin(plugin);
    return p2.node.type ?? p2.key ?? "";
  }
  var resolvePlugins = (editor, plugins2 = []) => {
    editor.pluginList = [];
    editor.plugins = {};
    editor.shortcuts = {};
    const resolvedPlugins = resolveAndSortPlugins(editor, plugins2);
    applyPluginsToEditor(editor, resolvedPlugins);
    resolvePluginOverrides(editor);
    resolvePluginStores(editor);
    editor.pluginList.forEach((plugin) => {
      if (plugin.extendEditor) {
        editor = plugin.extendEditor(getEditorPlugin(editor, plugin));
        syncLegacyMethods(editor);
      }
      resolvePluginMethods(editor, plugin);
    });
    resolvePluginShortcuts(editor);
    return editor;
  };
  var resolvePluginStores = (editor) => {
    editor.pluginList.forEach((plugin) => {
      let store = createZustandStore(plugin.options, {
        mutative: true,
        name: plugin.key
      });
      if (plugin.__selectorExtensions && plugin.__selectorExtensions.length > 0) {
        plugin.__selectorExtensions.forEach((extension) => {
          const extendedOptions = extension(getEditorPlugin(editor, plugin));
          store = store.extendSelectors(() => extendedOptions);
        });
      }
      plugin.optionsStore = store;
    });
  };
  var resolvePluginMethods = (editor, plugin) => {
    Object.entries(plugin.api).forEach(([apiKey, apiFunction]) => {
      editor.api[apiKey] = apiFunction;
    });
    if (plugin.__apiExtensions && plugin.__apiExtensions.length > 0) {
      plugin.__apiExtensions.forEach(
        ({ extension, isOverride, isPluginSpecific, isTransform }) => {
          const newExtensions = extension(getEditorPlugin(editor, plugin));
          if (isOverride) {
            if (newExtensions.api) {
              merge$1(editor.api, newExtensions.api);
              merge$1(plugin.api, newExtensions.api);
              assignLegacyApi(editor, editor.api);
            }
            if (newExtensions.transforms) {
              merge$1(editor.transforms, newExtensions.transforms);
              merge$1(plugin.transforms, newExtensions.transforms);
              assignLegacyTransforms(editor, newExtensions.transforms);
            }
          } else if (isTransform) {
            if (isPluginSpecific) {
              if (!editor.transforms[plugin.key]) {
                editor.transforms[plugin.key] = {};
              }
              if (!plugin.transforms[plugin.key]) {
                plugin.transforms[plugin.key] = {};
              }
              merge$1(editor.transforms[plugin.key], newExtensions);
              merge$1(plugin.transforms[plugin.key], newExtensions);
            } else {
              merge$1(editor.transforms, newExtensions);
              merge$1(plugin.transforms, newExtensions);
              assignLegacyTransforms(editor, newExtensions);
            }
          } else {
            if (isPluginSpecific) {
              if (!editor.api[plugin.key]) {
                editor.api[plugin.key] = {};
              }
              if (!plugin.api[plugin.key]) {
                plugin.api[plugin.key] = {};
              }
              merge$1(editor.api[plugin.key], newExtensions);
              merge$1(plugin.api[plugin.key], newExtensions);
            } else {
              merge$1(editor.api, newExtensions);
              merge$1(plugin.api, newExtensions);
              assignLegacyApi(editor, editor.api);
            }
          }
        }
      );
      delete plugin.__apiExtensions;
    }
  };
  var resolvePluginShortcuts = (editor) => {
    const shortcutsByPriority = [];
    editor.pluginList.forEach((plugin) => {
      Object.entries(plugin.shortcuts).forEach(([key, hotkey]) => {
        if (hotkey === null) {
          const index = shortcutsByPriority.findIndex((item) => item.key === key);
          if (index !== -1) {
            shortcutsByPriority.splice(index, 1);
          }
        } else {
          const priority = hotkey.priority ?? plugin.priority;
          const existingIndex = shortcutsByPriority.findIndex(
            (item) => item.key === key
          );
          if (existingIndex === -1 || priority >= shortcutsByPriority[existingIndex].priority) {
            if (existingIndex !== -1) {
              shortcutsByPriority.splice(existingIndex, 1);
            }
            shortcutsByPriority.push({ key, hotkey, priority });
          }
        }
      });
    });
    shortcutsByPriority.sort((a2, b) => b.hotkey.priority - a2.hotkey.priority);
    editor.shortcuts = Object.fromEntries(
      shortcutsByPriority.map(({ key, hotkey }) => {
        const { priority, ...hotkeyWithoutPriority } = hotkey;
        return [key, hotkeyWithoutPriority];
      })
    );
  };
  var flattenAndResolvePlugins = (editor, plugins2) => {
    const pluginMap = /* @__PURE__ */ new Map();
    const processPlugin = (plugin) => {
      const resolvedPlugin = resolvePlugin(editor, plugin);
      const existingPlugin = pluginMap.get(resolvedPlugin.key);
      if (existingPlugin) {
        pluginMap.set(
          resolvedPlugin.key,
          mergePlugins(existingPlugin, resolvedPlugin)
        );
      } else {
        pluginMap.set(resolvedPlugin.key, resolvedPlugin);
      }
      if (resolvedPlugin.plugins && resolvedPlugin.plugins.length > 0) {
        resolvedPlugin.plugins.forEach(processPlugin);
      }
    };
    plugins2.forEach(processPlugin);
    return pluginMap;
  };
  var resolveAndSortPlugins = (editor, plugins2) => {
    const pluginMap = flattenAndResolvePlugins(editor, plugins2);
    const enabledPlugins = Array.from(pluginMap.values()).filter(
      (plugin) => plugin.enabled !== false
    );
    enabledPlugins.sort((a2, b) => b.priority - a2.priority);
    const orderedPlugins = [];
    const visited = /* @__PURE__ */ new Set();
    const visit = (plugin) => {
      var _a2;
      if (visited.has(plugin.key))
        return;
      visited.add(plugin.key);
      (_a2 = plugin.dependencies) == null ? void 0 : _a2.forEach((depKey) => {
        const depPlugin = pluginMap.get(depKey);
        if (depPlugin) {
          visit(depPlugin);
        } else {
          editor.api.debug.warn(
            `Plugin "${plugin.key}" depends on missing plugin "${depKey}"`,
            "PLUGIN_DEPENDENCY_MISSING"
          );
        }
      });
      orderedPlugins.push(plugin);
    };
    enabledPlugins.forEach(visit);
    return orderedPlugins;
  };
  var applyPluginsToEditor = (editor, plugins2) => {
    editor.pluginList = plugins2;
    editor.plugins = Object.fromEntries(
      plugins2.map((plugin) => [plugin.key, plugin])
    );
  };
  var resolvePluginOverrides = (editor) => {
    const applyOverrides = (plugins2) => {
      let overriddenPlugins = [...plugins2];
      const enabledOverrides = {};
      const componentOverrides = {};
      const pluginOverrides = {};
      for (const plugin of plugins2) {
        if (plugin.override.enabled) {
          Object.assign(enabledOverrides, plugin.override.enabled);
        }
        if (plugin.override.components) {
          Object.entries(plugin.override.components).forEach(
            ([key, component]) => {
              if (!componentOverrides[key] || plugin.priority > componentOverrides[key].priority) {
                componentOverrides[key] = {
                  component,
                  priority: plugin.priority
                };
              }
            }
          );
        }
        if (plugin.override.plugins) {
          Object.entries(plugin.override.plugins).forEach(([key, value]) => {
            pluginOverrides[key] = mergePlugins(pluginOverrides[key], value);
            if (value.enabled !== void 0) {
              enabledOverrides[key] = value.enabled;
            }
          });
        }
      }
      overriddenPlugins = overriddenPlugins.map((p2) => {
        let updatedPlugin = { ...p2 };
        if (pluginOverrides[p2.key]) {
          updatedPlugin = mergePlugins(updatedPlugin, pluginOverrides[p2.key]);
        }
        if (componentOverrides[p2.key] && (!p2.render.node && !p2.node.component || componentOverrides[p2.key].priority > p2.priority)) {
          updatedPlugin.render.node = componentOverrides[p2.key].component;
          updatedPlugin.node.component = componentOverrides[p2.key].component;
        }
        const enabled = enabledOverrides[p2.key] ?? updatedPlugin.enabled;
        if (isDefined(enabled)) {
          updatedPlugin.enabled = enabled;
        }
        return updatedPlugin;
      });
      return overriddenPlugins.filter((p2) => p2.enabled !== false).map((plugin) => ({
        ...plugin,
        plugins: applyOverrides(plugin.plugins || [])
      }));
    };
    editor.pluginList = applyOverrides(editor.pluginList);
    editor.plugins = Object.fromEntries(
      editor.pluginList.map((plugin) => [plugin.key, plugin])
    );
  };
  var AstPlugin = createSlatePlugin({
    key: "ast",
    parser: {
      format: "application/x-slate-fragment",
      deserialize: ({ data }) => {
        const decoded = decodeURIComponent(window.atob(data));
        let parsed;
        try {
          parsed = JSON.parse(decoded);
        } catch {
        }
        return parsed;
      }
    }
  });
  var withPlateHistory = ({ editor }) => withHistory(editor);
  var HistoryPlugin = createSlatePlugin({
    key: "history",
    extendEditor: withPlateHistory
  });
  var withInlineVoid = ({
    api: { isInline, isSelectable, isVoid, markableVoid },
    editor
  }) => {
    const voidTypes = [];
    const inlineTypes = [];
    const markableVoidTypes = [];
    const nonSelectableTypes = [];
    editor.pluginList.forEach((plugin) => {
      if (plugin.node.isInline) {
        inlineTypes.push(plugin.node.type);
      }
      if (plugin.node.isVoid) {
        voidTypes.push(plugin.node.type);
      }
      if (plugin.node.isMarkableVoid) {
        markableVoidTypes.push(plugin.node.type);
      }
      if (plugin.node.isSelectable === false) {
        nonSelectableTypes.push(plugin.node.type);
      }
    });
    return {
      api: {
        isInline(element) {
          return inlineTypes.includes(element.type) ? true : isInline(element);
        },
        isSelectable(element) {
          return nonSelectableTypes.includes(element.type) ? false : isSelectable(element);
        },
        isVoid(element) {
          return voidTypes.includes(element.type) ? true : isVoid(element);
        },
        markableVoid(element) {
          return markableVoidTypes.includes(element.type) ? true : markableVoid(element);
        }
      }
    };
  };
  var InlineVoidPlugin = createSlatePlugin({
    key: "inlineVoid"
  }).overrideEditor(withInlineVoid);
  var pipeInsertFragment = (editor, injectedPlugins, { fragment: fragment2, ...options }) => {
    editor.tf.withoutNormalizing(() => {
      injectedPlugins.some((p2) => {
        var _a2, _b;
        return ((_b = (_a2 = p2.parser) == null ? void 0 : _a2.preInsert) == null ? void 0 : _b.call(_a2, {
          ...getEditorPlugin(editor, p2),
          fragment: fragment2,
          ...options
        })) === true;
      });
      editor.tf.insertFragment(fragment2);
    });
  };
  var pipeTransformData = (editor, plugins2, { data, dataTransfer }) => {
    plugins2.forEach((p2) => {
      var _a2;
      const transformData = (_a2 = p2.parser) == null ? void 0 : _a2.transformData;
      if (!transformData)
        return;
      data = transformData({
        ...getEditorPlugin(editor, p2),
        data,
        dataTransfer
      });
    });
    return data;
  };
  var pipeTransformFragment = (editor, plugins2, { fragment: fragment2, ...options }) => {
    plugins2.forEach((p2) => {
      var _a2;
      const transformFragment = (_a2 = p2.parser) == null ? void 0 : _a2.transformFragment;
      if (!transformFragment)
        return;
      fragment2 = transformFragment({
        fragment: fragment2,
        ...options,
        ...getEditorPlugin(editor, p2)
      });
    });
    return fragment2;
  };
  var applyDeepToNodes = ({
    apply: apply2,
    node: node2,
    path: path2 = [],
    query,
    source: source2
  }) => {
    const entry = [node2, path2];
    if (queryNode(entry, query)) {
      if (typeof source2 === "function") {
        apply2(node2, source2());
      } else {
        apply2(node2, source2);
      }
    }
    if (!NodeApi.isAncestor(node2))
      return;
    node2.children.forEach((child, index) => {
      applyDeepToNodes({
        apply: apply2,
        node: child,
        path: path2.concat([index]),
        query,
        source: source2
      });
    });
  };
  var getKeysByTypes = (editor, types) => {
    return Object.values(editor.plugins).filter((plugin) => types.includes(plugin.node.type)).map((plugin) => plugin.key);
  };
  var getKeyByType = (editor, type) => {
    const plugin = Object.values(editor.plugins).find(
      (plugin2) => plugin2.node.type === type
    );
    return (plugin == null ? void 0 : plugin.key) ?? type;
  };
  var getInjectMatch = (editor, plugin) => {
    return (node2, path2) => {
      const {
        inject: {
          excludeBelowPlugins,
          excludePlugins,
          isBlock: _isBlock,
          isElement: _isElement,
          isLeaf,
          maxLevel,
          targetPlugins
        }
      } = plugin;
      const element = ElementApi.isElement(node2) ? node2 : void 0;
      if (_isElement && !element)
        return false;
      if (_isBlock && (!element || !editor.api.isBlock(element)))
        return false;
      if (isLeaf && element)
        return false;
      if (element == null ? void 0 : element.type) {
        if (excludePlugins == null ? void 0 : excludePlugins.includes(getKeyByType(editor, element.type))) {
          return false;
        }
        if (targetPlugins && !targetPlugins.includes(getKeyByType(editor, element.type))) {
          return false;
        }
      }
      if (excludeBelowPlugins || maxLevel) {
        if (maxLevel && path2.length > maxLevel) {
          return false;
        }
        if (excludeBelowPlugins) {
          const excludeTypes = getKeysByTypes(editor, excludeBelowPlugins);
          const isBelow = editor.api.above({
            at: path2,
            match: (n2) => ElementApi.isElement(n2) && excludeTypes.includes(n2.type)
          });
          if (isBelow)
            return false;
        }
      }
      return true;
    };
  };
  var getInjectedPlugins = (editor, plugin) => {
    const injectedPlugins = [];
    [...editor.pluginList].reverse().forEach((p2) => {
      var _a2;
      const injectedPlugin = (_a2 = p2.inject.plugins) == null ? void 0 : _a2[plugin.key];
      if (injectedPlugin)
        injectedPlugins.push(injectedPlugin);
    });
    return [plugin, ...injectedPlugins];
  };
  var getNodeDataAttributeKeys = (node2) => {
    return Object.keys(node2).filter(
      (key) => typeof node2[key] !== "object" && (!TextApi.isText(node2) || key !== "text")
    ).map((key) => keyToDataAttribute(key));
  };
  var keyToDataAttribute = (key) => {
    return `data-slate-${kebabCase$1(key)}`;
  };
  var pluginInjectNodeProps = (editor, plugin, nodeProps, getElementPath) => {
    const {
      key,
      inject: { nodeProps: injectNodeProps }
    } = plugin;
    const { element, text } = nodeProps;
    const node2 = element ?? text;
    if (!node2)
      return;
    if (!injectNodeProps)
      return;
    const {
      classNames: classNames2,
      defaultNodeValue,
      nodeKey = key,
      query,
      styleKey = nodeKey,
      transformClassName,
      transformNodeValue,
      transformProps,
      transformStyle,
      validNodeValues
    } = injectNodeProps;
    const injectMatch = getInjectMatch(editor, plugin);
    if (!injectMatch(node2, getElementPath(node2)))
      return;
    const queryResult = query == null ? void 0 : query({
      ...injectNodeProps,
      ...getEditorPlugin(editor, plugin),
      nodeProps
    });
    if (query && !queryResult) {
      return;
    }
    const nodeValue = node2[nodeKey];
    if (!transformProps && (!isDefined(nodeValue) || validNodeValues && !validNodeValues.includes(nodeValue) || nodeValue === defaultNodeValue)) {
      return;
    }
    const transformOptions = {
      ...nodeProps,
      ...getEditorPlugin(editor, plugin),
      nodeValue
    };
    const value = (transformNodeValue == null ? void 0 : transformNodeValue(transformOptions)) ?? nodeValue;
    transformOptions.value = value;
    let newProps = {};
    if (element && nodeKey) {
      newProps.className = `slate-${nodeKey}-${nodeValue}`;
    }
    if ((classNames2 == null ? void 0 : classNames2[nodeValue]) || transformClassName) {
      newProps.className = (transformClassName == null ? void 0 : transformClassName(transformOptions)) ?? (classNames2 == null ? void 0 : classNames2[value]);
    }
    if (styleKey) {
      newProps.style = (transformStyle == null ? void 0 : transformStyle(transformOptions)) ?? {
        [styleKey]: value
      };
    }
    if (transformProps) {
      newProps = transformProps({ ...transformOptions, props: newProps }) ?? newProps;
    }
    return newProps;
  };
  var pipeInjectNodeProps = (editor, nodeProps, getElementPath) => {
    editor.pluginList.forEach((plugin) => {
      if (plugin.inject.nodeProps) {
        const newAttributes = pluginInjectNodeProps(
          editor,
          plugin,
          nodeProps,
          getElementPath
        );
        if (!newAttributes)
          return;
        const attributes = nodeProps.attributes;
        nodeProps.attributes = {
          ...attributes,
          ...newAttributes,
          className: clsx(attributes == null ? void 0 : attributes.className, newAttributes.className) || void 0,
          style: {
            ...attributes == null ? void 0 : attributes.style,
            ...newAttributes.style
          }
        };
      }
    });
    return nodeProps;
  };
  var pipeDecorate = (editor, decorateProp) => {
    const relevantPlugins = editor.pluginList.filter((plugin) => plugin.decorate);
    if (relevantPlugins.length === 0 && !decorateProp)
      return;
    return (entry) => {
      let ranges = [];
      const addRanges = (newRanges) => {
        if (newRanges == null ? void 0 : newRanges.length)
          ranges = [...ranges, ...newRanges];
      };
      relevantPlugins.forEach((plugin) => {
        addRanges(
          plugin.decorate({
            ...getEditorPlugin(editor, plugin),
            entry
          })
        );
      });
      if (decorateProp) {
        addRanges(
          decorateProp({
            editor,
            entry
          })
        );
      }
      return ranges;
    };
  };
  var isSlateVoid = (element) => {
    return element.dataset.slateVoid === "true";
  };
  var isSlateElement = (element) => {
    return element.dataset.slateNode === "element";
  };
  var isSlateText = (element) => {
    return element.dataset.slateNode === "text";
  };
  var isSlateString = (element) => {
    return element.dataset.slateString === "true";
  };
  var isSlateLeaf = (element) => {
    return element.dataset.slateLeaf === "true";
  };
  var isSlateNode = (element) => {
    return isSlateLeaf(element) || isSlateElement(element) || isSlateVoid(element) || isSlateString(element) || isSlateText(element);
  };
  var isSlatePluginNode = (element, pluginKey) => {
    return element.classList.contains(`slate-${pluginKey}`);
  };
  var getPluginNodeProps = ({
    attributes: nodeAttributes,
    node: node2,
    plugin,
    props
  }) => {
    const newProps = { ...props, attributes: { ...props.attributes } };
    if (plugin == null ? void 0 : plugin.node.props) {
      const pluginNodeProps = (typeof plugin.node.props === "function" ? plugin.node.props(newProps) : plugin.node.props) ?? {};
      newProps.attributes = {
        ...newProps.attributes,
        ...pluginNodeProps
      };
    }
    if (nodeAttributes && plugin) {
      newProps.attributes = {
        ...newProps.attributes,
        ...pick$2(
          nodeAttributes,
          ...plugin.node.dangerouslyAllowAttributes ?? [],
          [...node2 ? getNodeDataAttributeKeys(node2) : []]
        )
      };
    }
    Object.keys(newProps.attributes).forEach((key) => {
      var _a2, _b;
      if (((_a2 = newProps.attributes) == null ? void 0 : _a2[key]) === void 0) {
        (_b = newProps.attributes) == null ? true : delete _b[key];
      }
    });
    return newProps;
  };
  var getSlateClass = (type) => type ? `slate-${type}` : "";
  var mergeDeepToNodes = (options) => {
    applyDeepToNodes({ ...options, apply: merge$1 });
  };
  var PlateError = class extends Error {
    constructor(message, type = "DEFAULT") {
      super(`[${type}] ${message}`);
      this.type = type;
      this.name = "PlateError";
    }
  };
  var DebugPlugin = createTSlatePlugin({
    key: "debug",
    options: {
      isProduction: process.env.NODE_ENV === "production",
      logger: {
        error: (message, type, details) => console.error(`${type ? `[${type}] ` : ""}${message}`, details),
        info: (message, type, details) => console.info(`${type ? `[${type}] ` : ""}${message}`, details),
        log: (message, type, details) => console.log(`${type ? `[${type}] ` : ""}${message}`, details),
        warn: (message, type, details) => console.warn(`${type ? `[${type}] ` : ""}${message}`, details)
      },
      logLevel: process.env.NODE_ENV === "production" ? "error" : "log",
      throwErrors: true
    }
  }).extendEditorApi(({ getOptions: getOptions2 }) => {
    const logLevels = ["error", "warn", "info", "log"];
    const log2 = (level, message, type, details) => {
      var _a2, _b;
      if (process.env.NODE_ENV === "production")
        return;
      const options = getOptions2();
      if (options.isProduction && level === "log")
        return;
      if (logLevels.indexOf(level) <= logLevels.indexOf(options.logLevel)) {
        if (level === "error" && options.throwErrors) {
          throw new PlateError(message, type);
        } else {
          (_b = (_a2 = options.logger)[level]) == null ? void 0 : _b.call(_a2, message, type, details);
        }
      }
    };
    return {
      debug: {
        error: (message, type, details) => log2("error", message, type, details),
        info: (message, type, details) => log2("info", message, type, details),
        log: (message, type, details) => log2("log", message, type, details),
        warn: (message, type, details) => log2("warn", message, type, details)
      }
    };
  });
  var withScrolling = (editor, fn, options) => {
    const prevOptions = editor.getOptions(DOMPlugin);
    const prevAutoScroll = AUTO_SCROLL.get(editor) ?? false;
    if (options) {
      const ops = {
        ...prevOptions,
        ...omitBy$1(options, isUndefined$1)
      };
      editor.setOptions(DOMPlugin, ops);
    }
    AUTO_SCROLL.set(editor, true);
    fn();
    AUTO_SCROLL.set(editor, prevAutoScroll);
    editor.setOptions(DOMPlugin, prevOptions);
  };
  var AUTO_SCROLL = /* @__PURE__ */ new WeakMap();
  var DOMPlugin = createTSlatePlugin({
    key: "dom",
    options: {
      scrollMode: "last",
      scrollOperations: {
        insert_node: true,
        insert_text: true
      },
      scrollOptions: {
        scrollMode: "if-needed"
      }
    }
  }).extendEditorApi(({ editor }) => ({
    isScrolling: () => {
      return AUTO_SCROLL.get(editor) ?? false;
    }
  })).extendEditorTransforms(({ editor }) => ({
    withScrolling: bindFirst(withScrolling, editor)
  })).overrideEditor(({ api, editor, getOption, tf: { apply: apply2 } }) => ({
    transforms: {
      apply(operation) {
        if (api.isScrolling()) {
          apply2(operation);
          const scrollOperations = getOption("scrollOperations");
          if (!scrollOperations[operation.type])
            return;
          const matched = editor.operations.filter(
            (op) => !!scrollOperations[op.type]
          );
          if (matched.length === 0)
            return;
          const mode = getOption("scrollMode");
          const targetOp = mode === "first" ? matched[0] : matched.at(-1);
          if (!targetOp)
            return;
          const { offset, path: path2 } = targetOp.path ? targetOp : {};
          if (!path2)
            return;
          const scrollOptions = getOption("scrollOptions");
          const scrollTarget = {
            offset: offset ?? 0,
            path: path2
          };
          api.scrollIntoView(scrollTarget, scrollOptions);
          return;
        }
        return apply2(operation);
      }
    }
  }));
  var isHtmlElement = (node2) => node2.nodeType === Node.ELEMENT_NODE;
  var isHtmlText = (node2) => node2.nodeType === Node.TEXT_NODE;
  var inlineTagNames = /* @__PURE__ */ new Set([
    "A",
    "ABBR",
    "ACRONYM",
    "B",
    "BDI",
    "BDO",
    "BIG",
    "BR",
    "BUTTON",
    "CANVAS",
    "CITE",
    "CODE",
    "CONTENT",
    "DATA",
    "DEL",
    "DFN",
    "EM",
    "EMBED",
    "FONT",
    "I",
    "IFRAME",
    "IMG",
    "IMG",
    "INPUT",
    "INS",
    "KBD",
    "LABEL",
    "MAP",
    "MARK",
    "MARQUEE",
    "math",
    "MENUITEM",
    "METER",
    "NOBR",
    "OBJECT",
    "OUTPUT",
    "PICTURE",
    "PORTAL",
    "PROGRESS",
    "Q",
    "S",
    "SAMP",
    "SELECT",
    "SHADOW",
    "SMALL",
    "SOURCE",
    "SPAN",
    "STRIKE",
    "STRONG",
    "SUB",
    "SUP",
    "svg",
    "TEXTAREA",
    "TIME",
    "TRACK",
    "TT",
    "U",
    "VAR",
    "VIDEO",
    "WBR"
  ]);
  var isHtmlInlineElement = (node2) => {
    if (!isHtmlElement(node2))
      return false;
    const element = node2;
    const tagNameIsInline = inlineTagNames.has(element.tagName);
    const displayProperty = element.style.display.split(" ")[0];
    if (displayProperty === "") {
      return tagNameIsInline;
    }
    if (displayProperty.startsWith("inline")) {
      return true;
    }
    if (displayProperty === "inherit" && element.parentElement) {
      return isHtmlInlineElement(element.parentElement);
    }
    if (["contents", "initial", "none", "revert", "revert-layer", "unset"].includes(
      displayProperty
    )) {
      return tagNameIsInline;
    }
    return false;
  };
  var isHtmlBlockElement = (node2) => {
    if (!isHtmlElement(node2))
      return false;
    const element = node2;
    return !isHtmlInlineElement(element);
  };
  var collapseString = (text, {
    shouldCollapseWhiteSpace = true,
    trimEnd = "collapse",
    trimStart = "collapse",
    whiteSpaceIncludesNewlines = true
  } = {}) => {
    if (trimStart === "all") {
      text = text.replace(/^\s+/, "");
    }
    if (trimEnd === "single-newline") {
      text = text.replace(/\n$/, "");
    }
    if (shouldCollapseWhiteSpace) {
      if (whiteSpaceIncludesNewlines) {
        text = text.replaceAll(/\s+/g, " ");
      } else {
        text = text.replaceAll(/[^\S\n\r]+/g, " ");
        text = text.replaceAll(/^[^\S\n\r]+/gm, "");
        text = text.replaceAll(/[^\S\n\r]+$/gm, "");
      }
    }
    return text;
  };
  var isLastNonEmptyTextOfInlineFormattingContext = (initialText) => {
    let currentNode = initialText;
    while (true) {
      if (currentNode.nextSibling) {
        currentNode = currentNode.nextSibling;
      } else {
        currentNode = currentNode.parentElement;
        if (currentNode && isHtmlBlockElement(currentNode)) {
          return true;
        }
        currentNode = (currentNode == null ? void 0 : currentNode.nextSibling) || null;
      }
      if (!currentNode) {
        return true;
      }
      if (isHtmlBlockElement(currentNode)) {
        return true;
      }
      if ((currentNode.textContent || "").length > 0) {
        return false;
      }
    }
  };
  var upsertInlineFormattingContext = (state) => {
    if (state.inlineFormattingContext) {
      state.inlineFormattingContext.atStart = false;
    } else {
      state.inlineFormattingContext = {
        atStart: true,
        lastHasTrailingWhiteSpace: false
      };
    }
  };
  var endInlineFormattingContext = (state) => {
    state.inlineFormattingContext = null;
  };
  var collapseWhiteSpaceText = (text, state) => {
    const textContent = text.textContent || "";
    const isWhiteSpaceOnly = textContent.trim() === "";
    if (state.inlineFormattingContext || !isWhiteSpaceOnly) {
      upsertInlineFormattingContext(state);
    }
    const { whiteSpaceRule } = state;
    const trimStart = (() => {
      if (whiteSpaceRule !== "normal")
        return "collapse";
      if (!state.inlineFormattingContext || state.inlineFormattingContext.atStart || state.inlineFormattingContext.lastHasTrailingWhiteSpace)
        return "all";
      return "collapse";
    })();
    const trimEnd = (() => {
      if (whiteSpaceRule === "normal")
        return "collapse";
      if (isLastNonEmptyTextOfInlineFormattingContext(text))
        return "single-newline";
      return "collapse";
    })();
    const shouldCollapseWhiteSpace = {
      normal: true,
      pre: false,
      "pre-line": true
    }[whiteSpaceRule];
    const whiteSpaceIncludesNewlines = whiteSpaceRule !== "pre-line";
    const collapsedTextContent = collapseString(textContent || "", {
      shouldCollapseWhiteSpace,
      trimEnd,
      trimStart,
      whiteSpaceIncludesNewlines
    });
    if (state.inlineFormattingContext && shouldCollapseWhiteSpace) {
      state.inlineFormattingContext.lastHasTrailingWhiteSpace = collapsedTextContent.endsWith(" ");
    }
    text.textContent = collapsedTextContent;
  };
  var collapseWhiteSpaceNode = (node2, state) => {
    if (isHtmlElement(node2)) {
      collapseWhiteSpaceElement(node2, state);
      return;
    }
    if (isHtmlText(node2)) {
      collapseWhiteSpaceText(node2, state);
      return;
    }
    collapseWhiteSpaceChildren(node2, state);
  };
  var collapseWhiteSpaceChildren = (node2, state) => {
    const childNodes = Array.from(node2.childNodes);
    for (const childNode of childNodes) {
      collapseWhiteSpaceNode(childNode, state);
    }
  };
  var inferWhiteSpaceRule = (element) => {
    const whiteSpaceProperty = element.style.whiteSpace;
    switch (whiteSpaceProperty) {
      case "break-spaces":
      case "pre":
      case "pre-wrap": {
        return "pre";
      }
      case "normal":
      case "nowrap": {
        return "normal";
      }
      case "pre-line": {
        return "pre-line";
      }
    }
    if (element.tagName === "PRE") {
      return "pre";
    }
    if (whiteSpaceProperty === "initial") {
      return "normal";
    }
    return null;
  };
  var collapseWhiteSpaceElement = (element, state) => {
    const isInlineElement = isHtmlInlineElement(element);
    const previousWhiteSpaceRule = state.whiteSpaceRule;
    const inferredWhiteSpaceRule = inferWhiteSpaceRule(element);
    if (inferredWhiteSpaceRule) {
      state.whiteSpaceRule = inferredWhiteSpaceRule;
    }
    if (!isInlineElement) {
      endInlineFormattingContext(state);
    }
    collapseWhiteSpaceChildren(element, state);
    if (!isInlineElement) {
      endInlineFormattingContext(state);
    }
    state.whiteSpaceRule = previousWhiteSpaceRule;
  };
  var collapseWhiteSpace = (element) => {
    const clonedElement = element.cloneNode(true);
    const state = {
      inlineFormattingContext: null,
      whiteSpaceRule: "normal"
    };
    collapseWhiteSpaceElement(clonedElement, state);
    return clonedElement;
  };
  var deserializeHtmlNodeChildren = (editor, node2, isSlateParent = false) => {
    return Array.from(node2.childNodes).flatMap((child) => {
      if (child.nodeType === 1 && !isSlateNode(child) && isSlateParent) {
        return deserializeHtmlNodeChildren(
          editor,
          child,
          isSlateParent
        );
      }
      return deserializeHtmlNode(editor)(child);
    });
  };
  var htmlBodyToFragment = (editor, element) => {
    if (element.nodeName === "BODY") {
      return jsx(
        "fragment",
        {},
        deserializeHtmlNodeChildren(editor, element)
      );
    }
  };
  var htmlBrToNewLine = (node2) => {
    if (node2.nodeName === "BR") {
      return "\n";
    }
  };
  var getDefaultNodeProps = ({
    element,
    type
  }) => {
    if (!isSlatePluginNode(element, type) && !isSlateLeaf(element))
      return;
    const dataAttributes = {};
    Object.entries(element.dataset).forEach(([key, value]) => {
      if (key.startsWith("slate") && value && // Ignore slate default attributes
      !["slateInline", "slateLeaf", "slateNode", "slateVoid"].includes(key)) {
        const attributeKey = key.slice(5).charAt(0).toLowerCase() + key.slice(6);
        if (value === void 0)
          return;
        let parsedValue = value;
        if (value === "true")
          parsedValue = true;
        else if (value === "false")
          parsedValue = false;
        else if (!Number.isNaN(Number(value)))
          parsedValue = Number(value);
        dataAttributes[attributeKey] = parsedValue;
      }
    });
    if (Object.keys(dataAttributes).length > 0) {
      return dataAttributes;
    }
  };
  var getDataNodeProps = ({
    editor,
    element,
    plugin
  }) => {
    var _a2, _b, _c, _d;
    const toNodeProps = (_b = (_a2 = plugin.parsers.html) == null ? void 0 : _a2.deserializer) == null ? void 0 : _b.toNodeProps;
    const disableDefaultNodeProps = ((_d = (_c = plugin.parsers.html) == null ? void 0 : _c.deserializer) == null ? void 0 : _d.disableDefaultNodeProps) ?? false;
    const defaultNodeProps = disableDefaultNodeProps ? {} : getDefaultNodeProps({
      ...getEditorPlugin(editor, plugin),
      element
    });
    if (!toNodeProps)
      return defaultNodeProps;
    const customNodeProps = toNodeProps({
      ...getEditorPlugin(editor, plugin),
      element
    }) ?? {};
    return {
      ...defaultNodeProps,
      ...customNodeProps
    };
  };
  var getDeserializedWithStaticRules = (plugin) => {
    var _a2, _b;
    let deserializer = (_b = (_a2 = plugin.parsers) == null ? void 0 : _a2.html) == null ? void 0 : _b.deserializer;
    const rules2 = (deserializer == null ? void 0 : deserializer.rules) ?? [];
    const hasSlateRule = rules2.some(
      (rule) => {
        var _a3;
        return (_a3 = rule.validClassName) == null ? void 0 : _a3.includes(`slate-${plugin.key}`);
      }
    );
    const staticRules = hasSlateRule ? rules2 : [
      {
        validClassName: `slate-${plugin.key}`,
        validNodeName: "*"
      },
      ...rules2
    ];
    if (!deserializer)
      deserializer = { rules: staticRules };
    deserializer.rules = staticRules;
    return deserializer;
  };
  var pluginDeserializeHtml = (editor, plugin, {
    deserializeLeaf,
    element: el
  }) => {
    const {
      node: { isElement: isElementRoot, isLeaf: isLeafRoot }
    } = plugin;
    const deserializer = getDeserializedWithStaticRules(plugin);
    if (!deserializer)
      return;
    const {
      attributeNames,
      isElement: isElementRule,
      isLeaf: isLeafRule,
      query,
      rules: rules2
    } = deserializer;
    let { parse: parse2 } = deserializer;
    const isElement2 = isElementRule || isElementRoot;
    const isLeaf = isLeafRule || isLeafRoot;
    if (!deserializeLeaf && !isElement2) {
      return;
    }
    if (deserializeLeaf && !isLeaf) {
      return;
    }
    if (rules2) {
      const isValid = rules2.some(
        ({ validAttribute, validClassName, validNodeName = "*", validStyle }) => {
          var _a2;
          if (validNodeName) {
            const validNodeNames = castArray4$1(validNodeName);
            if (validNodeNames.length > 0 && !validNodeNames.includes(el.nodeName) && validNodeName !== "*")
              return false;
          }
          if (validClassName && !el.classList.contains(validClassName))
            return false;
          if (validStyle) {
            for (const [key, value] of Object.entries(validStyle)) {
              const values = castArray4$1(value);
              if (!values.includes(el.style[key]) && value !== "*")
                return;
              if (value === "*" && !el.style[key])
                return;
              const defaultNodeValue = (_a2 = plugin.inject.nodeProps) == null ? void 0 : _a2.defaultNodeValue;
              if (defaultNodeValue && defaultNodeValue === el.style[key]) {
                return false;
              }
            }
          }
          if (validAttribute) {
            if (typeof validAttribute === "string") {
              if (!el.getAttributeNames().includes(validAttribute))
                return false;
            } else {
              for (const [attributeName, attributeValue] of Object.entries(
                validAttribute
              )) {
                const attributeValues = castArray4$1(attributeValue);
                const elAttribute = el.getAttribute(attributeName);
                if (!isDefined(elAttribute) || !attributeValues.includes(elAttribute))
                  return false;
              }
            }
          }
          return true;
        }
      );
      if (!isValid)
        return;
    }
    if (query && !query({ ...getEditorPlugin(editor, plugin), element: el })) {
      return;
    }
    if (!parse2)
      if (isElement2) {
        parse2 = ({ type }) => ({ type });
      } else if (isLeaf) {
        parse2 = ({ type }) => ({ [type]: true });
      } else {
        return;
      }
    const parsedNode = (() => {
      if (isSlateNode(el)) {
        return {};
      }
      return parse2({
        ...getEditorPlugin(editor, plugin),
        element: el,
        node: {}
      }) ?? {};
    })();
    const dataNodeProps = getDataNodeProps({
      editor,
      element: el,
      plugin
    });
    let node2 = {
      ...parsedNode,
      ...dataNodeProps
    };
    if (Object.keys(node2).length === 0)
      return;
    const injectedPlugins = getInjectedPlugins(editor, plugin);
    injectedPlugins.forEach((injectedPlugin) => {
      var _a2, _b, _c, _d;
      const res = (_d = (_c = (_b = (_a2 = injectedPlugin.parsers) == null ? void 0 : _a2.html) == null ? void 0 : _b.deserializer) == null ? void 0 : _c.parse) == null ? void 0 : _d.call(_c, {
        ...getEditorPlugin(editor, plugin),
        element: el,
        node: node2
      });
      if (res && !isSlateNode(el)) {
        node2 = {
          ...node2,
          ...res
        };
      }
    });
    if (attributeNames) {
      const elementAttributes = {};
      const elementAttributeNames = el.getAttributeNames();
      for (const elementAttributeName of elementAttributeNames) {
        if (attributeNames.includes(elementAttributeName)) {
          elementAttributes[elementAttributeName] = el.getAttribute(elementAttributeName);
        }
      }
      if (Object.keys(elementAttributes).length > 0) {
        node2.attributes = elementAttributes;
      }
    }
    return { ...deserializer, node: node2 };
  };
  var pipeDeserializeHtmlElement = (editor, element) => {
    let result;
    [...editor.pluginList].reverse().some((plugin) => {
      result = pluginDeserializeHtml(editor, plugin, { element });
      return !!result;
    });
    return result;
  };
  var htmlElementToElement = (editor, element, isSlate = false) => {
    const deserialized = pipeDeserializeHtmlElement(editor, element);
    if (deserialized) {
      const { node: node2, withoutChildren } = deserialized;
      let descendants = node2.children ?? deserializeHtmlNodeChildren(editor, element, isSlate);
      if (descendants.length === 0 || withoutChildren || isSlateVoid(element)) {
        descendants = [{ text: "" }];
      }
      return jsx("element", node2, descendants);
    }
  };
  var pipeDeserializeHtmlLeaf = (editor, element) => {
    let node2 = {};
    [...editor.pluginList].reverse().forEach((plugin) => {
      const deserialized = pluginDeserializeHtml(editor, plugin, {
        deserializeLeaf: true,
        element
      });
      if (!deserialized)
        return;
      node2 = { ...node2, ...deserialized.node };
    });
    return node2;
  };
  var htmlElementToLeaf = (editor, element) => {
    const node2 = pipeDeserializeHtmlLeaf(editor, element);
    return deserializeHtmlNodeChildren(editor, element).reduce(
      (arr, child) => {
        if (!child)
          return arr;
        if (ElementApi.isElement(child)) {
          if (Object.keys(node2).length > 0) {
            mergeDeepToNodes({
              node: child,
              query: {
                filter: ([n2]) => TextApi.isText(n2)
              },
              source: node2
            });
          }
          arr.push(child);
        } else {
          const attributes = { ...node2 };
          if (TextApi.isText(child) && child.text) {
            Object.keys(attributes).forEach((key) => {
              if (attributes[key] && child[key]) {
                attributes[key] = child[key];
              }
            });
          }
          arr.push(jsx("text", attributes, child));
        }
        return arr;
      },
      []
    );
  };
  var htmlTextNodeToString = (node2) => {
    var _a2;
    if (isHtmlText(node2)) {
      if ((_a2 = node2.parentElement) == null ? void 0 : _a2.dataset.platePreventDeserialization)
        return "";
      return node2.textContent || "";
    }
  };
  var deserializeHtmlNode = (editor) => (node2) => {
    const textNode = htmlTextNodeToString(node2);
    if (textNode)
      return textNode;
    if (!isHtmlElement(node2))
      return null;
    const breakLine = htmlBrToNewLine(node2);
    if (breakLine)
      return breakLine;
    const fragment2 = htmlBodyToFragment(editor, node2);
    if (fragment2)
      return fragment2;
    const element = htmlElementToElement(
      editor,
      node2,
      isSlateNode(node2)
    );
    if (element)
      return element;
    return htmlElementToLeaf(editor, node2);
  };
  var deserializeHtmlElement = (editor, element) => {
    return deserializeHtmlNode(editor)(element);
  };
  var htmlStringToDOMNode = (rawHtml) => {
    const node2 = document.createElement("body");
    node2.innerHTML = rawHtml;
    return node2;
  };
  var deserializeHtml = (editor, {
    collapseWhiteSpace: shouldCollapseWhiteSpace = true,
    defaultElementPlugin,
    element
  }) => {
    if (typeof element === "string") {
      element = htmlStringToDOMNode(element);
    }
    if (shouldCollapseWhiteSpace) {
      element = collapseWhiteSpace(element);
    }
    const fragment2 = deserializeHtmlElement(editor, element);
    return normalizeDescendantsToDocumentFragment(editor, {
      defaultElementPlugin,
      descendants: fragment2
    });
  };
  var parseHtmlDocument = (html) => {
    return new DOMParser().parseFromString(html, "text/html");
  };
  var HtmlPlugin = createSlatePlugin({
    key: "html"
  }).extendApi(({ editor }) => ({
    deserialize: bindFirst(deserializeHtml, editor)
  })).extend({
    parser: {
      format: "text/html",
      deserialize: ({ api, data }) => {
        const document2 = parseHtmlDocument(data);
        return api.html.deserialize({
          element: document2.body
        });
      }
    }
  });
  var LengthPlugin = createTSlatePlugin({
    key: "length"
  }).overrideEditor(({ editor, getOptions: getOptions2, tf: { apply: apply2 } }) => ({
    transforms: {
      apply(operation) {
        editor.tf.withoutNormalizing(() => {
          apply2(operation);
          const options = getOptions2();
          if (options.maxLength) {
            const length = editor.api.string([]).length;
            if (length > options.maxLength) {
              const overflowLength = length - options.maxLength;
              editor.tf.delete({
                distance: overflowLength,
                reverse: true,
                unit: "character"
              });
            }
          }
        });
      }
    }
  }));
  var BaseParagraphPlugin = createSlatePlugin({
    key: "p",
    node: {
      isElement: true
    },
    parsers: {
      html: {
        deserializer: {
          rules: [
            {
              validNodeName: "P"
            }
          ],
          query: ({ element }) => element.style.fontFamily !== "Consolas"
        }
      }
    }
  });
  var pipeNormalizeInitialValue = (editor) => {
    editor.pluginList.forEach((p2) => {
      var _a2;
      (_a2 = p2.normalizeInitialValue) == null ? void 0 : _a2.call(p2, {
        ...getEditorPlugin(editor, p2),
        value: editor.children
      });
    });
  };
  var SlateExtensionPlugin = createSlatePlugin({
    key: "slateExtension"
  }).overrideEditor(
    ({
      editor,
      tf: { apply: apply2, deleteBackward: deleteBackward2, deleteForward: deleteForward2, deleteFragment: deleteFragment2 }
    }) => {
      const resetMarks = () => {
        if (editor.api.isAt({ start: true })) {
          editor.tf.removeMarks();
        }
      };
      return {
        api: {
          create: {
            block: (node2) => ({
              children: [{ text: "" }],
              type: editor.getType(BaseParagraphPlugin),
              ...node2
            })
          }
        },
        transforms: {
          apply(operation) {
            if (operation.type === "set_selection") {
              const { properties: properties2 } = operation;
              editor.prevSelection = properties2;
              apply2(operation);
              editor.currentKeyboardEvent = null;
              return;
            }
            apply2(operation);
          },
          deleteBackward(unit) {
            deleteBackward2(unit);
            resetMarks();
          },
          deleteForward(unit) {
            deleteForward2(unit);
            resetMarks();
          },
          deleteFragment(options) {
            deleteFragment2(options);
            resetMarks();
          }
        }
      };
    }
  ).extendEditorTransforms(({ editor }) => ({
    /**
     * Initialize the editor value, selection and normalization. Set `value` to
     * `null` to skip children initialization.
     */
    async init({
      autoSelect,
      selection,
      shouldNormalizeEditor,
      value
    }) {
      var _a2;
      if (value !== null) {
        if (typeof value === "string") {
          editor.children = editor.api.html.deserialize({
            element: value
          });
        } else if (typeof value === "function") {
          editor.children = await value(editor);
        } else if (value) {
          editor.children = value;
        }
        if (!editor.children || ((_a2 = editor.children) == null ? void 0 : _a2.length) === 0) {
          editor.children = editor.api.create.value();
        }
      }
      if (selection) {
        editor.selection = selection;
      } else if (autoSelect) {
        const edge = autoSelect === "start" ? "start" : "end";
        const target = edge === "start" ? editor.api.start([]) : editor.api.end([]);
        editor.tf.select(target);
      }
      if (editor.children.length > 0) {
        pipeNormalizeInitialValue(editor);
      }
      if (shouldNormalizeEditor) {
        editor.tf.normalize({ force: true });
      }
    },
    setValue: (value) => {
      let children = value;
      if (typeof value === "string") {
        children = editor.api.html.deserialize({
          element: value
        });
      } else if (!value || value.length === 0) {
        children = editor.api.create.value();
      }
      editor.tf.replaceNodes(children, {
        at: [],
        children: true
      });
    }
  }));
  var isInlineNode = (editor) => (node2) => TextApi.isText(node2) || ElementApi.isElement(node2) && editor.api.isInline(node2);
  var makeBlockLazy = (type) => () => ({
    children: [],
    type
  });
  var hasDifferentChildNodes = (descendants, isInline) => {
    return descendants.some((descendant2, index, arr) => {
      const prevDescendant = arr[index - 1];
      if (index !== 0) {
        return isInline(descendant2) !== isInline(prevDescendant);
      }
      return false;
    });
  };
  var normalizeDifferentNodeTypes = (descendants, isInline, makeDefaultBlock) => {
    const hasDifferentNodes = hasDifferentChildNodes(descendants, isInline);
    const { fragment: fragment2 } = descendants.reduce(
      (memo4, node2) => {
        if (hasDifferentNodes && isInline(node2)) {
          let block2 = memo4.precedingBlock;
          if (!block2) {
            block2 = makeDefaultBlock();
            memo4.precedingBlock = block2;
            memo4.fragment.push(block2);
          }
          block2.children.push(node2);
        } else {
          memo4.fragment.push(node2);
          memo4.precedingBlock = null;
        }
        return memo4;
      },
      {
        fragment: [],
        precedingBlock: null
      }
    );
    return fragment2;
  };
  var normalizeEmptyChildren = (descendants) => {
    if (descendants.length === 0) {
      return [{ text: "" }];
    }
    return descendants;
  };
  var normalize$1 = (descendants, isInline, makeDefaultBlock) => {
    descendants = normalizeEmptyChildren(descendants);
    descendants = normalizeDifferentNodeTypes(
      descendants,
      isInline,
      makeDefaultBlock
    );
    descendants = descendants.map((node2) => {
      if (ElementApi.isElement(node2)) {
        return {
          ...node2,
          children: normalize$1(
            node2.children,
            isInline,
            makeDefaultBlock
          )
        };
      }
      return node2;
    });
    return descendants;
  };
  var normalizeDescendantsToDocumentFragment = (editor, {
    defaultElementPlugin = BaseParagraphPlugin,
    descendants
  }) => {
    const isInline = isInlineNode(editor);
    const defaultType = editor.getType(defaultElementPlugin);
    const makeDefaultBlock = makeBlockLazy(defaultType);
    return normalize$1(descendants, isInline, makeDefaultBlock);
  };
  var pipeInsertDataQuery = (editor, plugins2, { data, dataTransfer }) => plugins2.every((p2) => {
    var _a2;
    const query = (_a2 = p2.parser) == null ? void 0 : _a2.query;
    return !query || query({
      ...getEditorPlugin(editor, p2),
      data,
      dataTransfer
    });
  });
  var ParserPlugin = createSlatePlugin({
    key: "parser"
  }).overrideEditor(({ editor, tf: { insertData } }) => ({
    transforms: {
      insertData(dataTransfer) {
        const inserted = [...editor.pluginList].reverse().some((plugin) => {
          const parser = plugin.parser;
          if (!parser)
            return false;
          const injectedPlugins = getInjectedPlugins(editor, plugin);
          const { deserialize, format: format2, mimeTypes } = parser;
          if (!format2)
            return false;
          const formats = Array.isArray(format2) ? format2 : [format2];
          const mimeTypeList = mimeTypes || formats.map((fmt) => fmt.includes("/") ? fmt : `text/${fmt}`);
          for (const mimeType of mimeTypeList) {
            let data = dataTransfer.getData(mimeType);
            if (!data)
              continue;
            if (!pipeInsertDataQuery(editor, injectedPlugins, {
              data,
              dataTransfer
            })) {
              continue;
            }
            data = pipeTransformData(editor, injectedPlugins, {
              data,
              dataTransfer
            });
            let fragment2 = deserialize == null ? void 0 : deserialize({
              ...getEditorPlugin(editor, plugin),
              data,
              dataTransfer
            });
            if (!(fragment2 == null ? void 0 : fragment2.length))
              continue;
            fragment2 = pipeTransformFragment(editor, injectedPlugins, {
              data,
              dataTransfer,
              fragment: fragment2
            });
            if (fragment2.length === 0)
              continue;
            pipeInsertFragment(editor, injectedPlugins, {
              data,
              dataTransfer,
              fragment: fragment2
            });
            return true;
          }
          return false;
        });
        if (inserted)
          return;
        insertData(dataTransfer);
      }
    }
  }));
  var getCorePlugins = ({
    maxLength,
    plugins: plugins2 = []
  }) => {
    let corePlugins = [
      DebugPlugin,
      SlateExtensionPlugin,
      DOMPlugin,
      HistoryPlugin,
      InlineVoidPlugin,
      ParserPlugin,
      maxLength ? LengthPlugin.configure({
        options: { maxLength }
      }) : LengthPlugin,
      HtmlPlugin,
      AstPlugin,
      BaseParagraphPlugin
    ];
    const customPluginsMap = new Map(
      plugins2.map((plugin) => [plugin.key, plugin])
    );
    corePlugins = corePlugins.map((corePlugin) => {
      const customPlugin = customPluginsMap.get(corePlugin.key);
      if (customPlugin) {
        const index = plugins2.findIndex((p2) => p2.key === corePlugin.key);
        if (index !== -1) {
          plugins2.splice(index, 1);
        }
        return customPlugin;
      }
      return corePlugin;
    });
    return corePlugins;
  };
  var withSlate = (e3, {
    id: id2,
    autoSelect,
    maxLength,
    plugins: plugins2 = [],
    rootPlugin,
    selection,
    shouldNormalizeEditor,
    skipInitialization,
    value,
    ...pluginConfig
  } = {}) => {
    const editor = e3;
    editor.id = id2 ?? editor.id ?? nanoid();
    editor.key = editor.key ?? nanoid();
    editor.isFallback = false;
    editor.prevSelection = null;
    editor.currentKeyboardEvent = null;
    editor.getApi = () => editor.api;
    editor.getTransforms = () => editor.transforms;
    editor.getPlugin = (plugin) => getSlatePlugin(editor, plugin);
    editor.getType = (plugin) => getPluginType(editor, plugin);
    editor.getInjectProps = (plugin) => {
      var _a2;
      return ((_a2 = editor.getPlugin(plugin).inject) == null ? void 0 : _a2.nodeProps) ?? {};
    };
    editor.getOptionsStore = (plugin) => {
      return editor.getPlugin(plugin).optionsStore;
    };
    editor.getOptions = (plugin) => {
      const store = editor.getOptionsStore(plugin);
      if (!store)
        return editor.getPlugin(plugin).options;
      return editor.getOptionsStore(plugin).get("state");
    };
    editor.getOption = (plugin, key, ...args) => {
      const store = editor.getOptionsStore(plugin);
      if (!store)
        return editor.getPlugin(plugin).options[key];
      if (!(key in store.get("state")) && !(key in store.selectors)) {
        editor.api.debug.error(
          `editor.getOption: ${key} option is not defined in plugin ${plugin.key}.`,
          "OPTION_UNDEFINED"
        );
        return;
      }
      return store.get(key, ...args);
    };
    editor.setOption = (plugin, key, ...args) => {
      const store = editor.getOptionsStore(plugin);
      if (!store)
        return;
      if (!(key in store.get("state"))) {
        editor.api.debug.error(
          `editor.setOption: ${key} option is not defined in plugin ${plugin.key}.`,
          "OPTION_UNDEFINED"
        );
        return;
      }
      store.set(key, ...args);
    };
    editor.setOptions = (plugin, options) => {
      const store = editor.getOptionsStore(plugin);
      if (!store)
        return;
      if (typeof options === "object") {
        store.set("state", (draft) => {
          Object.assign(draft, options);
        });
      } else if (typeof options === "function") {
        store.set("state", options);
      }
    };
    const corePlugins = getCorePlugins({
      maxLength,
      plugins: plugins2
    });
    let rootPluginInstance = createSlatePlugin({
      key: "root",
      priority: 1e4,
      ...pluginConfig,
      plugins: [...corePlugins, ...plugins2]
    });
    if (rootPlugin) {
      rootPluginInstance = rootPlugin(rootPluginInstance);
    }
    resolvePlugins(editor, [rootPluginInstance]);
    const normalizeNode2 = editor.tf.normalizeNode;
    editor.tf.normalizeNode = (...args) => {
      if (!editor.api.shouldNormalizeNode(args[0])) {
        return;
      }
      return normalizeNode2(...args);
    };
    editor.normalizeNode = editor.tf.normalizeNode;
    if (!skipInitialization) {
      void editor.tf.init({
        autoSelect,
        selection,
        shouldNormalizeEditor,
        value
      });
    }
    return editor;
  };
  var methodsToWrap = [
    "configure",
    "configurePlugin",
    "extendEditorApi",
    "extendSelectors",
    "extendApi",
    "extendEditorTransforms",
    "extendTransforms",
    "overrideEditor",
    "extend",
    "extendPlugin"
  ];
  function toPlatePlugin(basePlugin, extendConfig) {
    const plugin = { ...basePlugin };
    methodsToWrap.forEach((method) => {
      const originalMethod = plugin[method];
      plugin[method] = (...args) => {
        const slatePlugin = originalMethod(...args);
        return toPlatePlugin(slatePlugin);
      };
    });
    plugin.withComponent = (component) => {
      return plugin.extend({
        node: { component },
        render: { node: component }
      });
    };
    if (!extendConfig)
      return plugin;
    const extendedPlugin = plugin.extend(extendConfig);
    return extendedPlugin;
  }
  function toTPlatePlugin(basePlugin, extendConfig) {
    return toPlatePlugin(basePlugin, extendConfig);
  }
  var createPlatePlugin = (config = {}) => {
    const plugin = createSlatePlugin(config);
    return toPlatePlugin(plugin);
  };
  function createTPlatePlugin(config = {}) {
    return createPlatePlugin(config);
  }
  function getEditorPlugin2(editor, plugin) {
    return getEditorPlugin(editor, plugin);
  }
  var SlateReactExtensionPlugin = toPlatePlugin(SlateExtensionPlugin, {
    handlers: {
      onKeyDown: ({ editor, event }) => {
        event.persist();
        editor.currentKeyboardEvent = event;
      }
    }
  }).extendEditorApi(({ editor }) => ({
    redecorate: () => {
      editor.api.debug.warn(
        `The method editor.api.redecorate() has not been overridden. This may cause unexpected behavior. Please ensure that all required editor methods are properly defined.`,
        "OVERRIDE_MISSING"
      );
    }
  })).overrideEditor(({ editor, tf: { normalizeNode: normalizeNode2 } }) => ({
    transforms: {
      normalizeNode(entry, options) {
        if (isDefined(entry[0]._memo)) {
          editor.tf.unsetNodes("_memo", { at: entry[1] });
          return;
        }
        normalizeNode2(entry, options);
      }
    }
  }));
  var EventEditorStore = createZustandStore(
    {
      blur: null,
      focus: null,
      last: null
    },
    {
      mutative: true,
      name: "event-editor"
    }
  );
  var { useValue: useEventEditorValue } = EventEditorStore;
  var FOCUS_EDITOR_EVENT = "focus-editor-event";
  var BLUR_EDITOR_EVENT = "blur-editor-event";
  var EventEditorPlugin = createPlatePlugin({
    key: "eventEditor",
    handlers: {
      onBlur: ({ editor }) => {
        const focus2 = EventEditorStore.get("focus");
        if (focus2 === editor.id) {
          EventEditorStore.set("focus", null);
        }
        EventEditorStore.set("blur", editor.id);
        document.dispatchEvent(
          new CustomEvent(BLUR_EDITOR_EVENT, {
            detail: { id: editor.id }
          })
        );
      },
      onFocus: ({ editor }) => {
        EventEditorStore.set("focus", editor.id);
        document.dispatchEvent(
          new CustomEvent(FOCUS_EDITOR_EVENT, {
            detail: { id: editor.id }
          })
        );
      }
    }
  });
  var ParagraphPlugin = toPlatePlugin(
    BaseParagraphPlugin,
    ({ editor, type }) => ({
      shortcuts: {
        toggleParagraph: {
          keys: [
            [Key.Mod, Key.Alt, "0"],
            [Key.Mod, Key.Shift, "0"]
          ],
          preventDefault: true,
          handler: () => {
            editor.tf.toggleBlock(type);
          }
        }
      }
    })
  );
  var withPlateReact = ({ editor }) => {
    return withReact(editor);
  };
  var ReactPlugin = toPlatePlugin(DOMPlugin, {
    key: "dom",
    extendEditor: withPlateReact
  }).extendEditorTransforms(({ editor }) => {
    const { reset: reset2 } = editor.tf;
    return {
      reset(options) {
        const isFocused2 = editor.api.isFocused();
        reset2(options);
        if (isFocused2) {
          editor.tf.focus({ edge: "startEditor" });
        }
      }
    };
  });
  var getPlateCorePlugins = () => [
    SlateReactExtensionPlugin,
    ReactPlugin,
    EventEditorPlugin,
    ParagraphPlugin
  ];
  var withPlate = (e3, { plugins: plugins2 = [], ...options } = {}) => {
    var _a2;
    const editor = withSlate(e3, {
      ...options,
      override: {
        ...options.override,
        components: {
          ...options.components,
          ...(_a2 = options.override) == null ? void 0 : _a2.components
        }
      },
      plugins: [...getPlateCorePlugins(), ...plugins2]
    });
    return editor;
  };
  var createPlateEditor = ({
    editor = createEditor$1(),
    ...options
  } = {}) => {
    return withPlate(editor, options);
  };
  var createPlateFallbackEditor = (options = {}) => {
    const editor = createPlateEditor(options);
    editor.isFallback = true;
    editor.apply = () => {
      throw new Error(
        "Cannot apply operations on the fallback editor. The fallback editor is used when a hook that depends on the Plate store was unable to locate a valid store. If you are using PlateController, use `useEditorMounted(id?: string)` or `!editor.isFallback` to ensure that a valid Plate store is available before attempting to call operations on the editor."
      );
    };
    return editor;
  };
  var DOM_HANDLERS = [
    // Clipboard Events
    "onCopy",
    "onCopyCapture",
    "onCut",
    "onCutCapture",
    "onPaste",
    "onPasteCapture",
    // Composition Events
    "onCompositionEnd",
    "onCompositionEndCapture",
    "onCompositionStart",
    "onCompositionStartCapture",
    "onCompositionUpdate",
    "onCompositionUpdateCapture",
    // Focus Events
    "onFocus",
    "onFocusCapture",
    "onBlur",
    "onBlurCapture",
    // Form Events
    "onDOMBeforeInput",
    "onBeforeInput",
    "onBeforeInputCapture",
    "onInput",
    "onInputCapture",
    "onReset",
    "onResetCapture",
    "onSubmit",
    "onSubmitCapture",
    "onInvalid",
    "onInvalidCapture",
    // Image Events
    "onLoad",
    "onLoadCapture",
    // Keyboard Events
    "onKeyDown",
    "onKeyDownCapture",
    "onKeyPress",
    "onKeyPressCapture",
    "onKeyUp",
    "onKeyUpCapture",
    // Media Events
    "onAbort",
    "onAbortCapture",
    "onCanPlay",
    "onCanPlayCapture",
    "onCanPlayThrough",
    "onCanPlayThroughCapture",
    "onDurationChange",
    "onDurationChangeCapture",
    "onEmptied",
    "onEmptiedCapture",
    "onEncrypted",
    "onEncryptedCapture",
    "onEnded",
    "onEndedCapture",
    "onLoadedData",
    "onLoadedDataCapture",
    "onLoadedMetadata",
    "onLoadedMetadataCapture",
    "onLoadStart",
    "onLoadStartCapture",
    "onPause",
    "onPauseCapture",
    "onPlay",
    "onPlayCapture",
    "onPlaying",
    "onPlayingCapture",
    "onProgress",
    "onProgressCapture",
    "onRateChange",
    "onRateChangeCapture",
    "onSeeked",
    "onSeekedCapture",
    "onSeeking",
    "onSeekingCapture",
    "onStalled",
    "onStalledCapture",
    "onSuspend",
    "onSuspendCapture",
    "onTimeUpdate",
    "onTimeUpdateCapture",
    "onVolumeChange",
    "onVolumeChangeCapture",
    "onWaiting",
    "onWaitingCapture",
    // MouseEvents
    "onAuxClick",
    "onAuxClickCapture",
    "onClick",
    "onClickCapture",
    "onContextMenu",
    "onContextMenuCapture",
    "onDoubleClick",
    "onDoubleClickCapture",
    "onDrag",
    "onDragCapture",
    "onDragEnd",
    "onDragEndCapture",
    "onDragEnter",
    "onDragEnterCapture",
    "onDragExit",
    "onDragExitCapture",
    "onDragLeave",
    "onDragLeaveCapture",
    "onDragOver",
    "onDragOverCapture",
    "onDragStart",
    "onDragStartCapture",
    "onDrop",
    "onDropCapture",
    "onMouseDown",
    "onMouseDownCapture",
    "onMouseEnter",
    "onMouseLeave",
    "onMouseMove",
    "onMouseMoveCapture",
    "onMouseOut",
    "onMouseOutCapture",
    "onMouseOver",
    "onMouseOverCapture",
    "onMouseUp",
    "onMouseUpCapture",
    // Selection Events
    "onSelect",
    "onSelectCapture",
    // Touch Events
    "onTouchCancel",
    "onTouchCancelCapture",
    "onTouchEnd",
    "onTouchEndCapture",
    "onTouchMove",
    "onTouchMoveCapture",
    "onTouchStart",
    "onTouchStartCapture",
    // Pointer Events
    "onPointerDown",
    "onPointerDownCapture",
    "onPointerMove",
    "onPointerUp",
    "onPointerUpCapture",
    "onPointerCancel",
    "onPointerCancelCapture",
    "onPointerEnter",
    "onPointerLeave",
    "onPointerOver",
    "onPointerOverCapture",
    "onPointerOut",
    "onPointerOutCapture",
    "onGotPointerCapture",
    "onGotPointerCaptureCapture",
    "onLostPointerCapture",
    "onLostPointerCaptureCapture",
    // UI Events
    "onScroll",
    "onScrollCapture",
    // Wheel Events
    "onWheel",
    "onWheelCapture",
    // Animation Events
    "onAnimationStart",
    "onAnimationStartCapture",
    "onAnimationEnd",
    "onAnimationEndCapture",
    "onAnimationIteration",
    "onAnimationIterationCapture",
    // Transition Events
    "onTransitionEnd",
    "onTransitionEndCapture"
  ];
  var getRenderNodeProps = ({
    attributes: nodeAttributes,
    editor,
    plugin,
    props
  }) => {
    var _a2, _b;
    let newProps = {
      ...props,
      ...plugin ? getEditorPlugin2(editor, plugin) : {},
      editor
    };
    const { className } = props;
    const pluginProps = getPluginNodeProps({
      attributes: nodeAttributes,
      plugin,
      props: newProps
    });
    newProps = {
      ...pluginProps,
      attributes: {
        ...pluginProps.attributes,
        className: clsx.clsx(
          getSlateClass(plugin == null ? void 0 : plugin.node.type),
          (_a2 = pluginProps.attributes) == null ? void 0 : _a2.className,
          className
        ) || void 0
      }
    };
    newProps = pipeInjectNodeProps(
      editor,
      newProps,
      (node2) => editor.api.findPath(node2)
    );
    if (((_b = newProps.attributes) == null ? void 0 : _b.style) && Object.keys(newProps.attributes.style).length === 0) {
      delete newProps.attributes.style;
    }
    return newProps;
  };
  var convertDomEventToSyntheticEvent = (domEvent) => {
    let propagationStopped = false;
    return {
      ...domEvent,
      bubbles: domEvent.bubbles,
      cancelable: domEvent.cancelable,
      currentTarget: domEvent.currentTarget,
      defaultPrevented: domEvent.defaultPrevented,
      eventPhase: domEvent.eventPhase,
      isTrusted: domEvent.isTrusted,
      nativeEvent: domEvent,
      target: domEvent.target,
      timeStamp: domEvent.timeStamp,
      type: domEvent.type,
      isDefaultPrevented: () => domEvent.defaultPrevented,
      isPropagationStopped: () => propagationStopped,
      persist: () => {
        throw new Error(
          "persist is not implemented for synthetic events created using convertDomEventToSyntheticEvent"
        );
      },
      preventDefault: () => domEvent.preventDefault(),
      stopPropagation: () => {
        propagationStopped = true;
        domEvent.stopPropagation();
      }
    };
  };
  var isEventHandled = (event, handler) => {
    if (!handler) {
      return false;
    }
    const shouldTreatEventAsHandled = handler(event);
    if (shouldTreatEventAsHandled != null) {
      return shouldTreatEventAsHandled;
    }
    return event.isPropagationStopped();
  };
  var pipeHandler = (editor, {
    editableProps,
    handlerKey
  }) => {
    const propsHandler = editableProps == null ? void 0 : editableProps[handlerKey];
    const relevantPlugins = editor.pluginList.filter(
      (plugin) => {
        var _a2;
        return (_a2 = plugin.handlers) == null ? void 0 : _a2[handlerKey];
      }
    );
    if (relevantPlugins.length === 0 && !propsHandler)
      return;
    return (event) => {
      const isDomEvent = event instanceof Event;
      const handledEvent = isDomEvent ? convertDomEventToSyntheticEvent(event) : event;
      const eventIsHandled = relevantPlugins.some((plugin) => {
        const pluginHandler = plugin.handlers[handlerKey];
        const shouldTreatEventAsHandled = pluginHandler({
          ...getEditorPlugin2(editor, plugin),
          event: handledEvent
        });
        if (shouldTreatEventAsHandled != null) {
          return shouldTreatEventAsHandled;
        }
        return false;
      });
      if (eventIsHandled)
        return true;
      return isEventHandled(handledEvent, propsHandler);
    };
  };
  var pipeOnChange = (editor, value) => {
    return editor.pluginList.some((plugin) => {
      const handler = plugin.handlers.onChange;
      if (!handler) {
        return false;
      }
      const shouldTreatEventAsHandled = handler({
        ...getEditorPlugin2(editor, plugin),
        value
      });
      if (shouldTreatEventAsHandled != null) {
        return shouldTreatEventAsHandled;
      }
      return false;
    });
  };
  var useNodeAttributes = (props, ref) => {
    return {
      ...props.attributes,
      className: clsx.clsx(props.attributes.className, props.className) || void 0,
      ref: useComposedRef(ref, props.attributes.ref),
      style: { ...props.attributes.style, ...props.style }
    };
  };
  var PlateElement = React.forwardRef(function PlateElement2({ as: Tag2 = "div", children, ...props }, ref) {
    var _a2;
    const attributes = useNodeAttributes(props, ref);
    const mounted = useEditorMounted();
    const block2 = React.useMemo(
      () => mounted && !!props.element.id && !!props.editor.api.isBlock(props.element),
      [props.element, props.editor, mounted]
    );
    const belowRootComponents = React.useMemo(
      () => {
        var _a3;
        return (_a3 = props.editor) == null ? void 0 : _a3.pluginList.map((plugin) => plugin.render.belowRootNodes).filter(Boolean);
      },
      [(_a2 = props.editor) == null ? void 0 : _a2.pluginList]
    );
    return /* @__PURE__ */ React.createElement(
      Tag2,
      {
        "data-slate-node": "element",
        "data-slate-inline": attributes["data-slate-inline"],
        "data-block-id": block2 ? props.element.id : void 0,
        ...attributes,
        style: {
          position: "relative",
          ...attributes == null ? void 0 : attributes.style
        }
      },
      children,
      belowRootComponents == null ? void 0 : belowRootComponents.map((Component, index) => /* @__PURE__ */ React.createElement(Component, { key: index, ...props }))
    );
  });
  var PlateText = React.forwardRef(({ as: Tag2 = "span", children, ...props }, ref) => {
    const attributes = useNodeAttributes(props, ref);
    return /* @__PURE__ */ React.createElement(Tag2, { ...attributes }, children);
  });
  var PlateLeaf = React.forwardRef(({ as: Tag2 = "span", children, ...props }, ref) => {
    const attributes = useNodeAttributes(props, ref);
    return /* @__PURE__ */ React.createElement(Tag2, { ...attributes }, children);
  });
  var pluginRenderLeaf = (editor, plugin) => function render(props) {
    const {
      render: { leaf: leafComponent, node: node2 }
    } = plugin;
    const { children, leaf: leaf2 } = props;
    if (leaf2[plugin.node.type ?? plugin.key]) {
      const Leaf2 = leafComponent ?? node2 ?? PlateLeaf;
      const ctxProps = getRenderNodeProps({
        attributes: leaf2.attributes,
        editor,
        plugin,
        props
      });
      return /* @__PURE__ */ React.createElement(Leaf2, { ...ctxProps }, children);
    }
    return children;
  };
  var pipeRenderLeaf = (editor, renderLeafProp) => {
    const renderLeafs = [];
    const leafPropsPlugins = [];
    editor.pluginList.forEach((plugin) => {
      if (plugin.node.isLeaf && (plugin.node.isDecoration === true || plugin.render.leaf)) {
        renderLeafs.push(pluginRenderLeaf(editor, plugin));
      }
      if (plugin.node.leafProps) {
        leafPropsPlugins.push(plugin);
      }
    });
    return function render({ attributes, ...props }) {
      renderLeafs.forEach((renderLeaf) => {
        const newChildren = renderLeaf(props);
        if (newChildren !== void 0) {
          props.children = newChildren;
        }
      });
      leafPropsPlugins.forEach((plugin) => {
        if (props.leaf[plugin.node.type ?? plugin.key]) {
          const pluginLeafProps = typeof plugin.node.leafProps === "function" ? plugin.node.leafProps(props) : plugin.node.leafProps ?? {};
          if (pluginLeafProps.className) {
            pluginLeafProps.className = clsx(
              props.className,
              pluginLeafProps.className
            );
          }
          attributes = {
            ...attributes,
            ...pluginLeafProps
          };
        }
      });
      if (renderLeafProp) {
        return renderLeafProp({ attributes, ...props });
      }
      const ctxProps = getRenderNodeProps({
        editor,
        props: { attributes, ...props }
      });
      return /* @__PURE__ */ React.createElement(PlateLeaf, { ...ctxProps }, props.children);
    };
  };
  var pluginRenderText = (editor, plugin) => function render(nodeProps) {
    const {
      render: { node: node2 }
    } = plugin;
    const { children, text } = nodeProps;
    if (text[plugin.node.type ?? plugin.key]) {
      const Text2 = node2 ?? PlateText;
      const ctxProps = getRenderNodeProps({
        attributes: nodeProps.attributes,
        editor,
        plugin,
        props: nodeProps
      });
      return /* @__PURE__ */ React.createElement(Text2, { ...ctxProps }, children);
    }
    return children;
  };
  var pipeRenderText = (editor, renderTextProp) => {
    const renderTexts = [];
    const textPropsPlugins = [];
    editor.pluginList.forEach((plugin) => {
      if (plugin.node.isLeaf && plugin.node.isDecoration === false) {
        renderTexts.push(pluginRenderText(editor, plugin));
      }
      if (plugin.node.textProps) {
        textPropsPlugins.push(plugin);
      }
    });
    return function render({ attributes, ...props }) {
      renderTexts.forEach((renderText) => {
        const newChildren = renderText(props);
        if (newChildren !== void 0) {
          props.children = newChildren;
        }
      });
      textPropsPlugins.forEach((plugin) => {
        if (props.text[plugin.node.type ?? plugin.key]) {
          const pluginTextProps = typeof plugin.node.textProps === "function" ? plugin.node.textProps(props) : plugin.node.textProps ?? {};
          if (pluginTextProps.className) {
            pluginTextProps.className = clsx(
              props.className,
              pluginTextProps.className
            );
          }
          attributes = {
            ...attributes,
            ...pluginTextProps
          };
        }
      });
      if (renderTextProp) {
        return renderTextProp({ attributes, ...props });
      }
      const ctxProps = getRenderNodeProps({
        editor,
        props: { attributes, ...props }
      });
      return /* @__PURE__ */ React.createElement(PlateText, { ...ctxProps }, props.children);
    };
  };
  var useEditableProps = ({
    disabled,
    readOnly: readOnlyProp,
    ...editableProps
  } = {}) => {
    const { id: id2 } = editableProps;
    const editor = useEditorRef(id2);
    const store = usePlateStore(id2);
    const versionDecorate = useAtomStoreValue(store, "versionDecorate");
    const storeReadOnly = useAtomStoreValue(store, "readOnly");
    const storeDecorate = useAtomStoreValue(store, "decorate");
    const storeRenderLeaf = useAtomStoreValue(store, "renderLeaf");
    const storeRenderElement = useAtomStoreValue(store, "renderElement");
    const storeRenderText = useAtomStoreValue(store, "renderText");
    const decorateMemo = React.useMemo(() => {
      return pipeDecorate(
        editor,
        storeDecorate ?? (editableProps == null ? void 0 : editableProps.decorate)
      );
    }, [editableProps == null ? void 0 : editableProps.decorate, editor, storeDecorate]);
    const decorate = React.useMemo(() => {
      if (!versionDecorate || !decorateMemo)
        return;
      return (entry) => decorateMemo(entry);
    }, [decorateMemo, versionDecorate]);
    const renderElement = React.useMemo(() => {
      return pipeRenderElement(
        editor,
        storeRenderElement ?? (editableProps == null ? void 0 : editableProps.renderElement)
      );
    }, [editableProps == null ? void 0 : editableProps.renderElement, editor, storeRenderElement]);
    const renderLeaf = React.useMemo(() => {
      return pipeRenderLeaf(editor, storeRenderLeaf ?? (editableProps == null ? void 0 : editableProps.renderLeaf));
    }, [editableProps == null ? void 0 : editableProps.renderLeaf, editor, storeRenderLeaf]);
    const renderText = React.useMemo(() => {
      return pipeRenderText(editor, storeRenderText ?? (editableProps == null ? void 0 : editableProps.renderText));
    }, [editableProps == null ? void 0 : editableProps.renderText, editor, storeRenderText]);
    const props = useDeepCompareMemo(() => {
      const _props = {
        decorate,
        renderElement,
        renderLeaf,
        renderText
      };
      DOM_HANDLERS.forEach((handlerKey) => {
        const handler = pipeHandler(editor, { editableProps, handlerKey });
        if (handler) {
          _props[handlerKey] = handler;
        }
      });
      return _props;
    }, [decorate, editableProps, renderElement, renderLeaf, renderText]);
    const readOnly = storeReadOnly || readOnlyProp || disabled;
    return useDeepCompareMemo(
      () => ({
        ...omit$1(editableProps, [
          ...DOM_HANDLERS,
          "renderElement",
          "renderLeaf",
          "renderText",
          "decorate"
        ]),
        ...props,
        "aria-disabled": disabled,
        className: clsx(
          "slate-editor",
          "ignore-click-outside/toolbar",
          editableProps.className
        ),
        "data-readonly": readOnly,
        readOnly
      }),
      [editableProps, props, readOnly]
    );
  };
  var useNodePath = (node2) => {
    const editor = useEditorRef();
    return useMemoizedSelector(
      () => {
        return editor.api.findPath(node2);
      },
      [editor, node2],
      (a2, b) => {
        return !!a2 && !!b && PathApi.equals(a2, b);
      }
    );
  };
  var useSlateProps = ({
    id: id2
  }) => {
    const editor = useEditorRef(id2);
    const store = usePlateStore(id2);
    const onChangeProp = useAtomStoreValue(store, "onChange");
    const onValueChangeProp = useAtomStoreValue(store, "onValueChange");
    const onSelectionChangeProp = useAtomStoreValue(store, "onSelectionChange");
    const updateVersionEditor = useIncrementVersion("versionEditor", id2);
    const updateVersionSelection = useIncrementVersion("versionSelection", id2);
    const updateVersionValue = useIncrementVersion("versionValue", id2);
    const onChange = React.useCallback(
      (newValue) => {
        updateVersionEditor();
        const eventIsHandled = pipeOnChange(editor, newValue);
        if (!eventIsHandled) {
          onChangeProp == null ? void 0 : onChangeProp({ editor, value: newValue });
        }
      },
      [editor, onChangeProp, updateVersionEditor]
    );
    const onValueChange = React.useMemo(
      () => (value) => {
        updateVersionValue();
        onValueChangeProp == null ? void 0 : onValueChangeProp({ editor, value });
      },
      [editor, onValueChangeProp, updateVersionValue]
    );
    const onSelectionChange = React.useMemo(
      () => (selection) => {
        updateVersionSelection();
        onSelectionChangeProp == null ? void 0 : onSelectionChangeProp({ editor, selection });
      },
      [editor, onSelectionChangeProp, updateVersionSelection]
    );
    return React.useMemo(() => {
      return {
        key: editor.key,
        editor,
        initialValue: editor.children,
        value: editor.children,
        onChange,
        onSelectionChange,
        onValueChange
      };
    }, [editor, onChange, onSelectionChange, onValueChange]);
  };
  var SCOPE_ELEMENT = "element";
  var initialState$1 = {
    element: null,
    entry: null,
    path: null
  };
  var { ElementProvider, elementStore, useElementStore } = createAtomStore(
    initialState$1,
    { name: "element", suppressWarnings: true }
  );
  function ElementContent({ editor, plugin, ...props }) {
    var _a2;
    const element = useElement();
    const { children: _children } = props;
    const key = plugin.key;
    const Element2 = ((_a2 = plugin.render) == null ? void 0 : _a2.node) ?? PlateElement;
    const aboveNodes = editor.pluginList.flatMap(
      (o3) => {
        var _a3;
        return ((_a3 = o3.render) == null ? void 0 : _a3.aboveNodes) ?? [];
      }
    );
    const belowNodes = editor.pluginList.flatMap(
      (o3) => {
        var _a3;
        return ((_a3 = o3.render) == null ? void 0 : _a3.belowNodes) ?? [];
      }
    );
    props = getRenderNodeProps({
      attributes: element.attributes,
      editor,
      plugin,
      props
    });
    let children = _children;
    belowNodes.forEach((withHOC2) => {
      const hoc = withHOC2({ ...props, key });
      if (hoc) {
        children = hoc({ ...props, children });
      }
    });
    let component = /* @__PURE__ */ React.createElement(Element2, { ...props }, children);
    aboveNodes.forEach((withHOC2) => {
      const hoc = withHOC2({ ...props, key });
      if (hoc) {
        component = hoc({ ...props, children: component });
      }
    });
    return component;
  }
  var pluginRenderElement = (editor, plugin) => function render(props) {
    const { element, path: path2 } = props;
    if (element.type === plugin.node.type) {
      return /* @__PURE__ */ React.createElement(
        ElementProvider,
        {
          element,
          entry: [element, path2],
          path: path2,
          scope: plugin.key
        },
        /* @__PURE__ */ React.createElement(ElementContent, { editor, plugin, ...props })
      );
    }
  };
  var pipeRenderElement = (editor, renderElementProp) => {
    const renderElements = [];
    editor.pluginList.forEach((plugin) => {
      if (plugin.node.isElement) {
        renderElements.push(pluginRenderElement(editor, plugin));
      }
    });
    return function render(props) {
      let element;
      const path2 = useNodePath(props.element);
      renderElements.some((renderElement) => {
        element = renderElement({ ...props, path: path2 });
        return !!element;
      });
      if (element)
        return element;
      if (renderElementProp) {
        return renderElementProp({ ...props, path: path2 });
      }
      const ctxProps = getRenderNodeProps({
        editor,
        props: { ...props, path: path2 }
      });
      return /* @__PURE__ */ React.createElement(
        ElementProvider,
        {
          element: ctxProps.element,
          entry: [ctxProps.element, path2],
          path: path2,
          scope: ctxProps.element.type ?? "default"
        },
        /* @__PURE__ */ React.createElement(PlateElement, { ...ctxProps }, props.children)
      );
    };
  };
  var {
    PlateControllerProvider: PlateController,
    plateControllerStore,
    usePlateControllerStore: _usePlateControllerStore
  } = createAtomStore(
    {
      activeId: atom(null),
      editorStores: atom({}),
      primaryEditorIds: atom([])
    },
    {
      name: "plateController"
    }
  );
  var usePlateControllerLocalStore = (options) => _usePlateControllerStore({
    scope: typeof options === "string" ? options : void 0,
    warnIfNoStore: false,
    ...typeof options === "object" ? options : {}
  });
  var usePlateControllerExists = () => !!usePlateControllerLocalStore().store;
  var usePlateControllerStore = (idProp) => {
    const storeAtom = React.useMemo(
      () => atom((get2) => {
        const editorStores = get2(plateControllerStore.atom.editorStores);
        const forId = (id2) => {
          if (!id2)
            return null;
          return editorStores[id2] ?? null;
        };
        if (idProp)
          return forId(idProp);
        const lookupOrder = [
          get2(plateControllerStore.atom.activeId),
          ...get2(plateControllerStore.atom.primaryEditorIds)
        ];
        for (const id2 of lookupOrder) {
          const store = forId(id2);
          if (store)
            return store;
        }
        return null;
      }),
      [idProp]
    );
    return useStoreAtomValue(usePlateControllerLocalStore(), storeAtom);
  };
  var createPlateStore = ({
    id: id2,
    containerRef = { current: null },
    decorate = null,
    editor,
    isMounted = false,
    primary = true,
    readOnly = null,
    renderElement = null,
    renderLeaf = null,
    renderText = null,
    scrollRef = { current: null },
    versionDecorate = 1,
    versionEditor = 1,
    versionSelection = 1,
    versionValue = 1,
    onChange = null,
    onSelectionChange = null,
    onValueChange = null,
    ...state
  } = {}) => createAtomStore(
    {
      containerRef,
      decorate,
      editor,
      isMounted,
      primary,
      readOnly,
      renderElement,
      renderLeaf,
      renderText,
      scrollRef,
      versionDecorate,
      versionEditor,
      versionSelection,
      versionValue,
      onChange,
      onSelectionChange,
      onValueChange,
      ...state
    },
    {
      name: "plate",
      suppressWarnings: true,
      extend: (atoms) => ({
        trackedEditor: atom((get2) => ({
          editor: get2(atoms.editor),
          version: get2(atoms.versionEditor)
        })),
        trackedSelection: atom((get2) => ({
          selection: get2(atoms.editor).selection,
          version: get2(atoms.versionSelection)
        })),
        trackedValue: atom((get2) => ({
          value: get2(atoms.editor).children,
          version: get2(atoms.versionValue)
        }))
      })
    }
  );
  var {
    PlateProvider: PlateStoreProvider,
    plateStore,
    usePlateSet: usePlateLocalSet,
    usePlateState: usePlateLocalState,
    usePlateStore: usePlateLocalStore,
    usePlateValue: usePlateLocalValue
  } = createPlateStore();
  var usePlateStore = (id2) => {
    const localStore = usePlateLocalStore({ scope: id2, warnIfNoStore: false }) ?? null;
    const [localStoreExists] = React.useState(!!localStore.store);
    const store = localStoreExists ? localStore : (
      // eslint-disable-next-line react-hooks/rules-of-hooks
      usePlateControllerStore(id2)
    );
    const plateControllerExists = usePlateControllerExists();
    const fallbackStore = React.useMemo(createPlateStore, []).usePlateStore();
    if (!store) {
      if (plateControllerExists) {
        return fallbackStore;
      }
      throw new Error(
        `Plate hooks must be used inside a Plate or PlateController`
      );
    }
    return store;
  };
  var useEditorId = () => useAtomStoreValue(usePlateStore(), "editor").id;
  var useEditorContainerRef = (id2) => {
    return useAtomStoreValue(usePlateStore(id2), "containerRef");
  };
  var useEditorMounted = (id2) => {
    return !!useAtomStoreValue(usePlateStore(id2), "isMounted");
  };
  var useEditorReadOnly = (id2) => {
    return !!useAtomStoreValue(usePlateStore(id2), "readOnly");
  };
  var useEditorRef = (id2) => {
    const store = usePlateStore(id2);
    const editor = useAtomStoreValue(store, "editor") ?? createPlateFallbackEditor();
    editor.store = store;
    return editor;
  };
  var useEditorSelection = (id2) => usePlateStore(id2).useTrackedSelectionValue().selection;
  var useEditorState = (id2) => {
    return usePlateStore(id2).useTrackedEditorValue().editor;
  };
  var useEditorVersion = (id2) => {
    return useAtomStoreValue(usePlateStore(id2), "versionEditor");
  };
  var useIncrementVersion = (key, id2) => {
    const previousVersionRef = React.useRef(1);
    const store = usePlateStore(id2);
    const setVersionDecorate = useAtomStoreSet(store, "versionDecorate");
    const setVersionSelection = useAtomStoreSet(store, "versionSelection");
    const setVersionValue = useAtomStoreSet(store, "versionValue");
    const setVersionEditor = useAtomStoreSet(store, "versionEditor");
    return React.useCallback(() => {
      const nextVersion = previousVersionRef.current + 1;
      switch (key) {
        case "versionDecorate": {
          setVersionDecorate(nextVersion);
          break;
        }
        case "versionEditor": {
          setVersionEditor(nextVersion);
          break;
        }
        case "versionSelection": {
          setVersionSelection(nextVersion);
          break;
        }
        case "versionValue": {
          setVersionValue(nextVersion);
          break;
        }
      }
      previousVersionRef.current = nextVersion;
    }, [
      key,
      setVersionDecorate,
      setVersionEditor,
      setVersionSelection,
      setVersionValue
    ]);
  };
  var useRedecorate = (id2) => {
    const updateDecorate = useIncrementVersion("versionDecorate", id2);
    return React.useCallback(() => {
      updateDecorate();
    }, [updateDecorate]);
  };
  function useEditorPlugin(p2, id2) {
    const editor = useEditorRef(id2);
    return React.useMemo(
      () => ({
        ...getEditorPlugin2(editor, p2),
        store: editor.store
      }),
      [editor, p2]
    );
  }
  var useEditorSelector = (selector, deps, { id: id2, equalityFn = (a2, b) => a2 === b } = {}) => {
    const selectorAtom = React.useMemo(
      () => selectAtom(
        plateStore.atom.trackedEditor,
        ({ editor }, prev) => selector(editor, prev),
        equalityFn
      ),
      // eslint-disable-next-line react-hooks/exhaustive-deps
      deps
    );
    return useStoreAtomValue(usePlateStore(id2), selectorAtom);
  };
  function usePluginOption(plugin, key, ...args) {
    const editor = useEditorRef();
    return useEditorPluginOption(editor, plugin, key, ...args);
  }
  function useEditorPluginOption(editor, plugin, key, ...args) {
    const store = editor.getOptionsStore(plugin);
    if (!store) {
      return void 0;
    }
    if (!(key in store.get("state")) && !(key in store.selectors)) {
      editor.api.debug.error(
        `usePluginOption: ${key} option is not defined in plugin ${plugin.key}`,
        "OPTION_UNDEFINED"
      );
      return void 0;
    }
    return useStoreValue(store, key, ...args);
  }
  var useElement = (pluginKey = SCOPE_ELEMENT) => {
    const editor = useEditorRef();
    const value = useAtomStoreValue(useElementStore(pluginKey), "element");
    if (!value) {
      editor.api.debug.warn(
        `useElement(${pluginKey}) hook must be used inside the node component's context`,
        "USE_ELEMENT_CONTEXT"
      );
      return {};
    }
    return value;
  };
  var useElementSelector = (selector, deps, {
    key,
    equalityFn = (a2, b) => a2 === b
  } = {}) => {
    const selectorAtom = React.useMemo(
      () => selectAtom(
        elementStore.atom.entry,
        (entry, prev) => selector(entry, prev),
        equalityFn
      ),
      // eslint-disable-next-line react-hooks/exhaustive-deps
      deps
    );
    return useStoreAtomValue(useElementStore(key), selectorAtom);
  };
  var usePath = (pluginKey) => {
    const editor = useEditorRef();
    const value = useAtomStoreValue(useElementStore(pluginKey), "path");
    if (!value) {
      editor.api.debug.warn(
        `usePath(${pluginKey}) hook must be used inside the node component's context`,
        "USE_ELEMENT_CONTEXT"
      );
      return void 0;
    }
    return value;
  };
  function EditorHotkeysEffect({
    id: id2,
    editableRef
  }) {
    const editor = useEditorRef(id2);
    return /* @__PURE__ */ React.createElement(React.Fragment, null, Object.entries(editor.shortcuts).map(([hotkeyString, hotkeyConfig]) => {
      if (!hotkeyConfig || !isDefined(hotkeyConfig.keys) || !hotkeyConfig.handler) {
        return null;
      }
      return /* @__PURE__ */ React.createElement(
        HotkeyEffect,
        {
          id: id2,
          key: hotkeyString,
          editableRef,
          hotkeyConfig
        }
      );
    }));
  }
  function HotkeyEffect({
    id: id2,
    editableRef,
    hotkeyConfig
  }) {
    const editor = useEditorRef(id2);
    const { keys: keys2, handler, ...options } = hotkeyConfig;
    const setHotkeyRef = useHotkeys(
      keys2,
      (event, eventDetails) => {
        handler({
          editor,
          event,
          eventDetails
        });
      },
      {
        enableOnContentEditable: true,
        ...options
      },
      []
    );
    React.useEffect(() => {
      if (editableRef.current) {
        setHotkeyRef(editableRef.current);
      }
    }, [setHotkeyRef, editableRef]);
    return null;
  }
  var EditorMethodsEffect = ({ id: id2 }) => {
    const editor = useEditorRef(id2);
    const redecorate = useRedecorate(id2);
    React.useEffect(() => {
      editor.api.redecorate = redecorate;
    }, [editor, redecorate]);
    return null;
  };
  function EditorRefPluginEffect({
    id: id2,
    plugin
  }) {
    var _a2;
    const editor = useEditorRef(id2);
    (_a2 = plugin.useHooks) == null ? void 0 : _a2.call(plugin, getEditorPlugin2(editor, plugin));
    return null;
  }
  function EditorRefEffect({ id: id2 }) {
    const store = usePlateStore(id2);
    const editor = useAtomStoreValue(store, "editor");
    const setIsMounted = useAtomStoreSet(store, "isMounted");
    React.useEffect(() => {
      setIsMounted(true);
      return () => {
        setIsMounted(false);
      };
    }, [setIsMounted]);
    return /* @__PURE__ */ React.createElement(React.Fragment, null, editor.pluginList.map((plugin) => /* @__PURE__ */ React.createElement(EditorRefPluginEffect, { id: id2, key: plugin.key, plugin })));
  }
  React.memo(() => {
    return null;
  });
  function checkPlateInstances() {
    globalThis.__PLATE_INSTANCES__ = (globalThis.__PLATE_INSTANCES__ || 0) + 1;
  }
  checkPlateInstances();
  function usePlateInstancesWarn(disabled) {
    React.useEffect(() => {
      if (!disabled && globalThis.__PLATE_INSTANCES__ && globalThis.__PLATE_INSTANCES__ > 1) {
        console.warn(
          "Detected multiple @udecode/plate-core instances!\nChoose only one of these packages in your dependencies:\n- @udecode/plate\n- @udecode/plate-core\n- @udecode/plate\n\n"
        );
      }
    }, [disabled]);
  }
  function PlateInner({
    children,
    containerRef,
    decorate,
    editor,
    primary,
    readOnly,
    renderElement,
    renderLeaf,
    scrollRef,
    onChange,
    onSelectionChange,
    onValueChange
  }) {
    return /* @__PURE__ */ React.createElement(
      PlateStoreProvider,
      {
        readOnly,
        onChange,
        onSelectionChange,
        onValueChange,
        containerRef,
        decorate,
        editor,
        primary,
        renderElement,
        renderLeaf,
        scope: editor.id,
        scrollRef
      },
      children
    );
  }
  function Plate(props) {
    const id2 = React.useId();
    const containerRef = React.useRef(null);
    const scrollRef = React.useRef(null);
    usePlateInstancesWarn(props.suppressInstanceWarning);
    if (!props.editor)
      return null;
    props.editor.uid = "e-" + id2.replaceAll(":", "");
    return /* @__PURE__ */ React.createElement(
      PlateInner,
      {
        key: props.editor.key,
        containerRef,
        scrollRef,
        ...props
      }
    );
  }
  var PlateContainer = ({
    children,
    ...props
  }) => {
    const editor = useEditorRef();
    const containerRef = useEditorContainerRef();
    let afterContainer = null;
    let beforeContainer = null;
    const mainContainer = /* @__PURE__ */ React.createElement("div", { id: editor.uid, ref: containerRef, ...props }, children);
    editor.pluginList.forEach((plugin) => {
      const {
        render: {
          afterContainer: AfterContainer,
          beforeContainer: BeforeContainer
        } = {}
      } = plugin;
      if (AfterContainer) {
        afterContainer = /* @__PURE__ */ React.createElement(React.Fragment, null, afterContainer, /* @__PURE__ */ React.createElement(AfterContainer, { ...props }));
      }
      if (BeforeContainer) {
        beforeContainer = /* @__PURE__ */ React.createElement(React.Fragment, null, beforeContainer, /* @__PURE__ */ React.createElement(BeforeContainer, { ...props }));
      }
    });
    return /* @__PURE__ */ React.createElement(React.Fragment, null, beforeContainer, mainContainer, afterContainer);
  };
  PlateContainer.displayName = "PlateContainer";
  var PlateControllerEffect = ({
    id: idProp
  }) => {
    const idFromStore = useEditorId();
    const id2 = idProp ?? idFromStore;
    const currentStoreAtom = React.useMemo(
      () => focusAtom(
        plateControllerStore.atom.editorStores,
        (optic2) => optic2.prop(id2)
      ),
      [id2]
    );
    const setCurrentStore = useStableFn(
      usePlateControllerLocalStore().setAtom(currentStoreAtom),
      [currentStoreAtom]
    );
    const setPrimaryEditorIds = useStableFn(
      useAtomStoreSet(usePlateControllerLocalStore(), "primaryEditorIds")
    );
    const setActiveId = useStableFn(
      useAtomStoreSet(usePlateControllerLocalStore(), "activeId")
    );
    const store = usePlateStore(id2);
    const primary = useAtomStoreValue(store, "primary");
    const focused = useFocused();
    React.useEffect(() => {
      setCurrentStore(store ?? null);
      return () => {
        setCurrentStore(null);
        setActiveId((activeId) => activeId === id2 ? null : activeId);
      };
    }, [store, setCurrentStore, setActiveId, id2]);
    React.useEffect(() => {
      if (primary) {
        setPrimaryEditorIds((ids) => [...ids, id2]);
        return () => {
          setPrimaryEditorIds((ids) => ids.filter((i2) => i2 !== id2));
        };
      }
    }, [id2, primary, setPrimaryEditorIds]);
    React.useEffect(() => {
      if (id2 && focused) {
        setActiveId(id2);
      }
    }, [id2, focused, setActiveId]);
    return null;
  };
  function PlateSlate({
    id: id2,
    children
  }) {
    var _a2;
    const slateProps = useSlateProps({ id: id2 });
    const editor = useEditorRef(id2);
    let aboveSlate = /* @__PURE__ */ React.createElement(Slate, { ...slateProps }, children);
    (_a2 = editor.pluginList) == null ? void 0 : _a2.forEach((plugin) => {
      const {
        render: { aboveSlate: AboveSlate }
      } = plugin;
      if (AboveSlate)
        aboveSlate = /* @__PURE__ */ React.createElement(AboveSlate, null, aboveSlate);
    });
    return aboveSlate;
  }
  var PlateContent = React.forwardRef(
    ({ autoFocusOnEditable, renderEditable, ...props }, ref) => {
      const { id: id2 } = props;
      const editor = useEditorRef(id2);
      if (!editor) {
        throw new Error(
          "Editor not found. Please ensure that PlateContent is rendered below Plate."
        );
      }
      const editableProps = useEditableProps(props);
      const editableRef = React.useRef(null);
      const combinedRef = useComposedRef(ref, editableRef);
      const editable = /* @__PURE__ */ React.createElement(Editable, { ref: combinedRef, ...editableProps });
      let afterEditable = null;
      let beforeEditable = null;
      editor.pluginList.forEach((plugin) => {
        const {
          render: {
            afterEditable: AfterEditable,
            beforeEditable: BeforeEditable
          }
        } = plugin;
        if (AfterEditable) {
          afterEditable = /* @__PURE__ */ React.createElement(React.Fragment, null, afterEditable, /* @__PURE__ */ React.createElement(AfterEditable, { ...editableProps }));
        }
        if (BeforeEditable) {
          beforeEditable = /* @__PURE__ */ React.createElement(React.Fragment, null, beforeEditable, /* @__PURE__ */ React.createElement(BeforeEditable, { ...editableProps }));
        }
      });
      let aboveEditable = /* @__PURE__ */ React.createElement(React.Fragment, null, renderEditable ? renderEditable(editable) : editable, /* @__PURE__ */ React.createElement(EditorMethodsEffect, { id: id2 }), /* @__PURE__ */ React.createElement(EditorHotkeysEffect, { id: id2, editableRef }), /* @__PURE__ */ React.createElement(EditorRefEffect, { id: id2 }), /* @__PURE__ */ React.createElement(PlateControllerEffect, { id: id2 }));
      editor.pluginList.forEach((plugin) => {
        const {
          render: { aboveEditable: AboveEditable }
        } = plugin;
        if (AboveEditable)
          aboveEditable = /* @__PURE__ */ React.createElement(AboveEditable, null, aboveEditable);
      });
      const readOnly = props.readOnly ?? false;
      const prevReadOnly = React.useRef(readOnly);
      React.useEffect(() => {
        if (autoFocusOnEditable && prevReadOnly.current && !readOnly) {
          editor.tf.focus({ edge: "endEditor" });
        }
        prevReadOnly.current = readOnly;
      }, [autoFocusOnEditable, editor, readOnly]);
      return /* @__PURE__ */ React.createElement(PlateSlate, { id: id2 }, beforeEditable, aboveEditable, afterEditable);
    }
  );
  PlateContent.displayName = "PlateContent";
  function usePlateEditor(options = {}, deps = []) {
    return React.useMemo(
      () => {
        if (options.enabled === false)
          return null;
        const editor = createPlateEditor(options);
        return editor;
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [options.id, options.enabled, ...deps]
    );
  }
  var withHOC = (HOC, Component, hocProps, hocRef) => React.forwardRef((props, componentRef) => /* @__PURE__ */ React.createElement(HOC, { ...hocProps, ref: hocRef }, /* @__PURE__ */ React.createElement(Component, { ...props, ref: componentRef })));
  var useFormInputProps = (options) => {
    if (!options)
      return { props: {} };
    const { preventDefaultOnEnterKeydown } = options;
    const handleEnterKeydownCapture = (e3) => {
      if (e3.key === "Enter" || e3.keyCode === 13) {
        e3.preventDefault();
      }
    };
    return {
      props: {
        onKeyDownCapture: preventDefaultOnEnterKeydown ? (e3) => handleEnterKeydownCapture(e3) : void 0
      }
    };
  };
  var useMarkToolbarButtonState = ({
    clear,
    nodeType
  }) => {
    const pressed = useEditorSelector(
      (editor) => editor.api.hasMark(nodeType),
      [nodeType]
    );
    return {
      clear,
      nodeType,
      pressed
    };
  };
  var useMarkToolbarButton = (state) => {
    const editor = useEditorRef();
    return {
      props: {
        pressed: state.pressed,
        onClick: () => {
          editor.tf.toggleMark(state.nodeType, { remove: state.clear });
          editor.tf.focus();
        },
        onMouseDown: (e3) => {
          e3.preventDefault();
        }
      }
    };
  };
  var useRemoveNodeButton = ({ element }) => {
    const editor = useEditorRef();
    return {
      props: {
        onClick: () => {
          const path2 = editor.api.findPath(element);
          editor.tf.removeNodes({ at: path2 });
        },
        onMouseDown: (e3) => {
          e3.preventDefault();
        }
      }
    };
  };
  var BaseBoldPlugin = plate.createSlatePlugin({
    key: "bold",
    node: { isLeaf: true },
    parsers: {
      html: {
        deserializer: {
          rules: [
            { validNodeName: ["STRONG", "B"] },
            {
              validStyle: {
                fontWeight: ["600", "700", "bold"]
              }
            }
          ],
          query: ({ element }) => !plate.someHtmlElement(
            element,
            (node2) => node2.style.fontWeight === "normal"
          )
        }
      }
    }
  });
  var BaseCodePlugin = plate.createSlatePlugin({
    key: "code",
    node: { isLeaf: true },
    parsers: {
      html: {
        deserializer: {
          rules: [
            { validNodeName: ["CODE"] },
            { validStyle: { fontFamily: "Consolas" } }
          ],
          query({ element }) {
            const blockAbove = plate.findHtmlParentElement(element, "P");
            if ((blockAbove == null ? void 0 : blockAbove.style.fontFamily) === "Consolas")
              return false;
            return !plate.findHtmlParentElement(element, "PRE");
          }
        }
      }
    }
  });
  var BaseItalicPlugin = plate.createSlatePlugin({
    key: "italic",
    node: { isLeaf: true },
    parsers: {
      html: {
        deserializer: {
          rules: [
            { validNodeName: ["EM", "I"] },
            { validStyle: { fontStyle: "italic" } }
          ],
          query: ({ element }) => !plate.someHtmlElement(
            element,
            (node2) => node2.style.fontStyle === "normal"
          )
        }
      }
    }
  });
  var BaseStrikethroughPlugin = plate.createSlatePlugin({
    key: "strikethrough",
    node: { isLeaf: true },
    parsers: {
      html: {
        deserializer: {
          rules: [
            { validNodeName: ["S", "DEL", "STRIKE"] },
            { validStyle: { textDecoration: "line-through" } }
          ],
          query: ({ element }) => !plate.someHtmlElement(
            element,
            (node2) => node2.style.textDecoration === "none"
          )
        }
      }
    }
  });
  var BaseSubscriptPlugin = plate.createSlatePlugin({
    key: "subscript",
    node: { isLeaf: true },
    parsers: {
      html: {
        deserializer: {
          rules: [
            { validNodeName: ["SUB"] },
            { validStyle: { verticalAlign: "sub" } }
          ]
        }
      }
    }
  });
  var BaseSuperscriptPlugin = plate.createSlatePlugin({
    key: "superscript",
    node: { isLeaf: true },
    parsers: {
      html: {
        deserializer: {
          rules: [
            { validNodeName: ["SUP"] },
            { validStyle: { verticalAlign: "super" } }
          ]
        }
      }
    }
  });
  var BaseUnderlinePlugin = plate.createSlatePlugin({
    key: "underline",
    node: { isLeaf: true },
    parsers: {
      html: {
        deserializer: {
          rules: [
            { validNodeName: ["U"] },
            { validStyle: { textDecoration: ["underline"] } }
          ],
          query: ({ element }) => !plate.someHtmlElement(
            element,
            (node2) => node2.style.textDecoration === "none"
          )
        }
      }
    }
  });
  var BaseBasicMarksPlugin = plate.createSlatePlugin({
    key: "basicMarks",
    plugins: [
      BaseBoldPlugin,
      BaseCodePlugin,
      BaseItalicPlugin,
      BaseStrikethroughPlugin,
      BaseSubscriptPlugin,
      BaseSuperscriptPlugin,
      BaseUnderlinePlugin
    ]
  });
  var BoldPlugin = toPlatePlugin(BaseBoldPlugin, ({ editor, type }) => ({
    shortcuts: {
      toggleBold: {
        keys: [[Key.Mod, "b"]],
        preventDefault: true,
        handler: () => {
          editor.tf.toggleMark(type);
        }
      }
    }
  }));
  var CodePlugin = toPlatePlugin(BaseCodePlugin, ({ editor, type }) => ({
    shortcuts: {
      toggleCode: {
        keys: [[Key.Mod, "e"]],
        preventDefault: true,
        handler: () => {
          editor.tf.toggleMark(type);
        }
      }
    }
  }));
  var ItalicPlugin = toPlatePlugin(
    BaseItalicPlugin,
    ({ editor, type }) => ({
      shortcuts: {
        toggleItalic: {
          keys: [[Key.Mod, "i"]],
          preventDefault: true,
          handler: () => {
            editor.tf.toggleMark(type);
          }
        }
      }
    })
  );
  var StrikethroughPlugin = toPlatePlugin(
    BaseStrikethroughPlugin,
    ({ editor, type }) => ({
      shortcuts: {
        toggleStrikethrough: {
          keys: [[Key.Mod, Key.Shift, "x"]],
          preventDefault: true,
          handler: () => {
            editor.tf.toggleMark(type);
          }
        }
      }
    })
  );
  var SuperscriptPlugin = toPlatePlugin(
    BaseSuperscriptPlugin,
    ({ editor, type }) => ({
      shortcuts: {
        toggleSuperscript: {
          keys: [[Key.Mod, "period"]],
          preventDefault: true,
          handler: () => {
            editor.tf.toggleMark(type, {
              remove: editor.getType(SubscriptPlugin)
            });
          }
        }
      }
    })
  );
  var SubscriptPlugin = toPlatePlugin(
    BaseSubscriptPlugin,
    ({ editor, type }) => ({
      shortcuts: {
        toggleSubscript: {
          keys: [[Key.Mod, "comma"]],
          preventDefault: true,
          handler: () => {
            editor.tf.toggleMark(type, {
              remove: editor.getType(SuperscriptPlugin)
            });
          }
        }
      }
    })
  );
  var UnderlinePlugin = toPlatePlugin(
    BaseUnderlinePlugin,
    ({ editor, type }) => ({
      shortcuts: {
        toggleUnderline: {
          keys: [[Key.Mod, "u"]],
          preventDefault: true,
          handler: () => {
            editor.tf.toggleMark(type);
          }
        }
      }
    })
  );
  var BasicMarksPlugin = toPlatePlugin(BaseBasicMarksPlugin, {
    plugins: [
      BoldPlugin,
      CodePlugin,
      ItalicPlugin,
      StrikethroughPlugin,
      SubscriptPlugin,
      SuperscriptPlugin,
      UnderlinePlugin
    ]
  });
  var BaseSkipMarkPlugin = plate.createTSlatePlugin({
    key: "skip-mark",
    options: {
      query: {
        allow: []
      }
    }
  }).overrideEditor(({ editor, getOption, tf: { insertText: insertText2 } }) => ({
    transforms: {
      insertText(text, options) {
        var _a2;
        if (plate.RangeApi.isExpanded(editor.selection))
          return insertText2(text, options);
        const allow = getOption("query").allow;
        const textNode = editor.api.node({
          mode: "lowest",
          match: (node2) => {
            if (plate.TextApi.isText(node2)) {
              return allow.some((key) => !!node2[key]);
            }
          }
        });
        if (!textNode)
          return insertText2(text, options);
        const nextPoint = editor.api.start(textNode[1], { next: true });
        const nextNode = nextPoint && editor.api.node({
          at: nextPoint,
          mode: "lowest",
          match: (node2) => {
            if (plate.TextApi.isText(node2)) {
              return allow.some((key) => !!node2[key]);
            }
          }
        });
        const isBetweenSameMarks = nextNode && allow.findIndex((key) => !!textNode[0][key]) === allow.findIndex((key) => !!nextNode[0][key]);
        if (!isBetweenSameMarks && editor.api.isEnd((_a2 = editor.selection) == null ? void 0 : _a2.focus, textNode[1])) {
          editor.tf.removeMarks(allow);
          insertText2(text, options);
          return;
        }
        return insertText2(text, options);
      }
    }
  }));
  toPlatePlugin(BaseSkipMarkPlugin);
  var withBlockquote = ({
    api: { shouldMergeNodesRemovePrevNode: shouldMergeNodesRemovePrevNode2 }
  }) => ({
    api: {
      shouldMergeNodesRemovePrevNode(prevNodeEntry, curNodeEntry) {
        const prevNode = prevNodeEntry[0];
        if (prevNode.type === BaseBlockquotePlugin.key)
          return false;
        return shouldMergeNodesRemovePrevNode2(prevNodeEntry, curNodeEntry);
      }
    }
  });
  var BaseBlockquotePlugin = plate.createSlatePlugin({
    key: "blockquote",
    node: { isElement: true },
    parsers: {
      html: {
        deserializer: {
          rules: [
            {
              validNodeName: "BLOCKQUOTE"
            }
          ]
        }
      }
    }
  }).overrideEditor(withBlockquote);
  var BlockquotePlugin = toPlatePlugin(
    BaseBlockquotePlugin,
    ({ editor, type }) => ({
      shortcuts: {
        toggleBlockquote: {
          keys: [[Key.Mod, Key.Shift, "period"]],
          preventDefault: true,
          handler: () => {
            editor.tf.toggleBlock(type);
          }
        }
      }
    })
  );
  var htmlDeserializerCodeBlock = {
    rules: [
      {
        validNodeName: "PRE"
      },
      {
        validNodeName: "P",
        validStyle: {
          fontFamily: "Consolas"
        }
      }
    ],
    parse: ({ element }) => {
      var _a2, _b;
      const languageSelectorText = ((_a2 = [...element.childNodes].find(
        (node2) => node2.nodeName === "SELECT"
      )) == null ? void 0 : _a2.textContent) || "";
      const textContent = ((_b = element.textContent) == null ? void 0 : _b.replace(languageSelectorText, "")) || "";
      let lines = textContent.split("\n");
      if (!(lines == null ? void 0 : lines.length)) {
        lines = [textContent];
      }
      const codeLines = lines.map((line) => ({
        children: [{ text: line }],
        type: BaseCodeLinePlugin.key
      }));
      return {
        children: codeLines,
        type: BaseCodeBlockPlugin.key
      };
    }
  };
  var CODE_LINE_TO_DECORATIONS = /* @__PURE__ */ new WeakMap();
  function getHighlightNodes(result) {
    return result.value || result.children || [];
  }
  function parseNodes(nodes2, className = []) {
    return nodes2.flatMap((node2) => {
      const classes = [
        ...className,
        ...node2.properties ? node2.properties.className : []
      ];
      if (node2.children) {
        return parseNodes(node2.children, classes);
      }
      return { classes, text: node2.value };
    });
  }
  function normalizeTokens(tokens) {
    const lines = [[]];
    let currentLine = lines[0];
    for (const token of tokens) {
      const tokenLines = token.text.split("\n");
      for (let i2 = 0; i2 < tokenLines.length; i2++) {
        const content = tokenLines[i2];
        if (content) {
          currentLine.push({ classes: token.classes, content });
        }
        if (i2 < tokenLines.length - 1) {
          lines.push([]);
          currentLine = lines.at(-1);
        }
      }
    }
    return lines;
  }
  function codeBlockToDecorations(editor, [block2, blockPath]) {
    const { defaultLanguage, ...options } = editor.getOptions(BaseCodeBlockPlugin);
    const lowlight = options.lowlight;
    const text = block2.children.map((line) => plate.NodeApi.string(line)).join("\n");
    const language = block2.lang;
    const effectiveLanguage = language || defaultLanguage;
    let highlighted;
    try {
      if (!effectiveLanguage || effectiveLanguage === "plaintext") {
        highlighted = { value: [] };
      } else if (effectiveLanguage === "auto") {
        highlighted = lowlight.highlightAuto(text);
      } else {
        highlighted = lowlight.highlight(effectiveLanguage, text);
      }
    } catch (error2) {
      const availableLanguages = lowlight.listLanguages();
      const isLanguageRegistered = effectiveLanguage && availableLanguages.includes(effectiveLanguage);
      if (isLanguageRegistered) {
        editor.api.debug.error(error2, "CODE_HIGHLIGHT");
        highlighted = { value: [] };
      } else {
        editor.api.debug.warn(
          `Language "${effectiveLanguage}" is not registered. Falling back to plaintext`
        );
        highlighted = { value: [] };
      }
    }
    const tokens = parseNodes(getHighlightNodes(highlighted));
    const normalizedTokens = normalizeTokens(tokens);
    const blockChildren = block2.children;
    const nodeToDecorations = /* @__PURE__ */ new Map();
    const numLines = Math.min(normalizedTokens.length, blockChildren.length);
    for (let index = 0; index < numLines; index++) {
      const lineTokens = normalizedTokens[index];
      const element = blockChildren[index];
      if (!nodeToDecorations.has(element)) {
        nodeToDecorations.set(element, []);
      }
      let start2 = 0;
      for (const token of lineTokens) {
        const length = token.content.length;
        if (!length)
          continue;
        const end2 = start2 + length;
        const decoration = {
          anchor: {
            offset: start2,
            path: [...blockPath, index, 0]
          },
          [BaseCodeSyntaxPlugin.key]: true,
          className: token.classes.join(" "),
          focus: {
            offset: end2,
            path: [...blockPath, index, 0]
          }
        };
        nodeToDecorations.get(element).push(decoration);
        start2 = end2;
      }
    }
    return nodeToDecorations;
  }
  function setCodeBlockToDecorations(editor, [block2, blockPath]) {
    const decorations = codeBlockToDecorations(editor, [block2, blockPath]);
    for (const [node2, decs] of decorations.entries()) {
      CODE_LINE_TO_DECORATIONS.set(node2, decs);
    }
  }
  function resetCodeBlockDecorations(codeBlock) {
    codeBlock.children.forEach((line) => {
      CODE_LINE_TO_DECORATIONS.delete(line);
    });
  }
  var getCodeLineEntry = (editor, { at: at2 = editor.selection } = {}) => {
    if (at2 && editor.api.some({
      at: at2,
      match: { type: editor.getType(BaseCodeLinePlugin) }
    })) {
      const selectionParent = editor.api.parent(at2);
      if (!selectionParent)
        return;
      const [, parentPath] = selectionParent;
      const codeLine = editor.api.above({
        at: at2,
        match: { type: editor.getType(BaseCodeLinePlugin) }
      }) || editor.api.parent(parentPath);
      if (!codeLine)
        return;
      const [codeLineNode, codeLinePath] = codeLine;
      if (plate.ElementApi.isElement(codeLineNode) && codeLineNode.type !== editor.getType(BaseCodeLinePlugin))
        return;
      const codeBlock = editor.api.parent(codeLinePath);
      if (!codeBlock)
        return;
      return {
        codeBlock,
        codeLine
      };
    }
  };
  var getIndentDepth = (editor, { codeLine }) => {
    const [, codeLinePath] = codeLine;
    const text = editor.api.string(codeLinePath);
    return text.search(/\S|$/);
  };
  var deleteStartSpace = (editor, { codeLine }) => {
    const [, codeLinePath] = codeLine;
    const codeLineStart = editor.api.start(codeLinePath);
    const codeLineEnd = codeLineStart && editor.api.after(codeLineStart);
    const spaceRange = codeLineEnd && editor.api.range(codeLineStart, codeLineEnd);
    const spaceText = editor.api.string(spaceRange);
    if (/\s/.test(spaceText)) {
      editor.tf.delete({ at: spaceRange });
      return true;
    }
    return false;
  };
  var indentCodeLine = (editor, { codeLine, indentDepth = 2 }) => {
    var _a2;
    const [, codeLinePath] = codeLine;
    const codeLineStart = editor.api.start(codeLinePath);
    const indent = " ".repeat(indentDepth);
    if (!editor.api.isExpanded()) {
      const cursor = (_a2 = editor.selection) == null ? void 0 : _a2.anchor;
      const range2 = editor.api.range(codeLineStart, cursor);
      const text = editor.api.string(range2);
      if (/\S/.test(text)) {
        editor.tf.insertText(indent, { at: editor.selection });
        return;
      }
    }
    editor.tf.insertText(indent, { at: codeLineStart });
  };
  var outdentCodeLine = (editor, { codeBlock, codeLine }) => {
    const deleted = deleteStartSpace(editor, { codeBlock, codeLine });
    deleted && deleteStartSpace(editor, { codeBlock, codeLine });
  };
  var withInsertDataCodeBlock = ({
    editor,
    tf: { insertData },
    type: codeBlockType
  }) => ({
    transforms: {
      insertData(data) {
        const text = data.getData("text/plain");
        const vscodeDataString = data.getData("vscode-editor-data");
        const codeLineType = editor.getType(BaseCodeLinePlugin);
        if (vscodeDataString) {
          try {
            const vscodeData = JSON.parse(vscodeDataString);
            const lines = text.split("\n");
            const [blockAbove2] = editor.api.block() ?? [];
            const isInCodeBlock = blockAbove2 && [codeBlockType, codeLineType].includes(blockAbove2 == null ? void 0 : blockAbove2.type);
            if (isInCodeBlock) {
              if (lines[0]) {
                editor.tf.insertText(lines[0]);
              }
              if (lines.length > 1) {
                const nodes2 = lines.slice(1).map((line) => ({
                  children: [{ text: line }],
                  type: codeLineType
                }));
                editor.tf.insertNodes(nodes2);
              }
            } else {
              const node2 = {
                children: lines.map((line) => ({
                  children: [{ text: line }],
                  type: codeLineType
                })),
                lang: vscodeData == null ? void 0 : vscodeData.mode,
                type: codeBlockType
              };
              editor.tf.insertNodes(node2, {
                select: true
              });
            }
            return;
          } catch (error2) {
          }
        }
        const [blockAbove] = editor.api.block() ?? [];
        if (blockAbove && [codeBlockType, codeLineType].includes(blockAbove == null ? void 0 : blockAbove.type) && (text == null ? void 0 : text.includes("\n"))) {
          const lines = text.split("\n");
          if (lines[0]) {
            editor.tf.insertText(lines[0]);
          }
          if (lines.length > 1) {
            const nodes2 = lines.slice(1).map((line) => ({
              children: [{ text: line }],
              type: codeLineType
            }));
            editor.tf.insertNodes(nodes2);
          }
          return;
        }
        insertData(data);
      }
    }
  });
  function extractCodeLinesFromCodeBlock(node2) {
    return node2.children;
  }
  var withInsertFragmentCodeBlock = ({
    editor,
    tf: { insertFragment: insertFragment2 },
    type: codeBlockType
  }) => ({
    transforms: {
      insertFragment(fragment2) {
        const [blockAbove] = editor.api.block() ?? [];
        const codeLineType = editor.getType(BaseCodeLinePlugin);
        function convertNodeToCodeLine(node2) {
          return {
            children: [{ text: plate.NodeApi.string(node2) }],
            type: codeLineType
          };
        }
        if (blockAbove && [codeBlockType, codeLineType].includes(blockAbove == null ? void 0 : blockAbove.type)) {
          return insertFragment2(
            fragment2.flatMap((node2) => {
              const element = node2;
              return element.type === codeBlockType ? extractCodeLinesFromCodeBlock(element) : convertNodeToCodeLine(element);
            })
          );
        }
        return insertFragment2(fragment2);
      }
    }
  });
  var withNormalizeCodeBlock = ({
    editor,
    tf: { normalizeNode: normalizeNode2 }
  }) => ({
    transforms: {
      normalizeNode([node2, path2]) {
        normalizeNode2([node2, path2]);
        if (!plate.ElementApi.isElement(node2)) {
          return;
        }
        const codeBlockType = editor.getType(BaseCodeBlockPlugin);
        const codeLineType = editor.getType(BaseCodeLinePlugin);
        const isCodeBlockRoot = node2.type === codeBlockType;
        if (isCodeBlockRoot) {
          const nonCodeLine = Array.from(plate.NodeApi.children(editor, path2)).find(
            ([child]) => child.type !== codeLineType
          );
          if (nonCodeLine) {
            editor.tf.setNodes({ type: codeLineType }, { at: nonCodeLine[1] });
          }
        }
      }
    }
  });
  var withCodeBlock = (ctx) => {
    const {
      editor,
      tf: { insertBreak: insertBreak2 }
    } = ctx;
    const insertBreakCodeBlock = () => {
      if (!editor.selection)
        return;
      const res = getCodeLineEntry(editor, {});
      if (!res)
        return;
      const { codeBlock, codeLine } = res;
      const indentDepth = getIndentDepth(editor, {
        codeBlock,
        codeLine
      });
      insertBreak2();
      indentCodeLine(editor, {
        codeBlock,
        codeLine,
        indentDepth
      });
      return true;
    };
    return {
      transforms: {
        insertBreak() {
          if (insertBreakCodeBlock())
            return;
          insertBreak2();
        },
        ...withInsertDataCodeBlock(ctx).transforms,
        ...withInsertFragmentCodeBlock(ctx).transforms,
        ...withNormalizeCodeBlock(ctx).transforms
      }
    };
  };
  var BaseCodeLinePlugin = plate.createTSlatePlugin({
    key: "code_line",
    node: { isElement: true }
  });
  var BaseCodeSyntaxPlugin = plate.createSlatePlugin({
    key: "code_syntax",
    node: { isLeaf: true }
  });
  var BaseCodeBlockPlugin = plate.createTSlatePlugin({
    key: "code_block",
    inject: {
      plugins: {
        [plate.HtmlPlugin.key]: {
          parser: {
            query: ({ editor }) => !editor.api.some({
              match: { type: editor.getType(BaseCodeLinePlugin) }
            })
          }
        }
      }
    },
    node: { isElement: true },
    options: {
      defaultLanguage: null,
      lowlight: null
    },
    parsers: { html: { deserializer: htmlDeserializerCodeBlock } },
    plugins: [BaseCodeLinePlugin, BaseCodeSyntaxPlugin],
    decorate: ({ editor, entry: [node2, path2], getOptions: getOptions2, type }) => {
      if (!getOptions2().lowlight)
        return [];
      const codeLineType = editor.getType(BaseCodeLinePlugin);
      if (node2.type === type && !CODE_LINE_TO_DECORATIONS.get(node2.children[0])) {
        setCodeBlockToDecorations(editor, [node2, path2]);
      }
      if (node2.type === codeLineType) {
        return CODE_LINE_TO_DECORATIONS.get(node2) || [];
      }
      return [];
    }
  }).overrideEditor(
    ({ editor, getOptions: getOptions2, tf: { apply: apply2, normalizeNode: normalizeNode2 }, type }) => ({
      transforms: {
        apply(operation) {
          var _a2;
          if (getOptions2().lowlight && operation.type === "set_node") {
            const entry = editor.api.node(operation.path);
            if ((entry == null ? void 0 : entry[0].type) === type && ((_a2 = operation.newProperties) == null ? void 0 : _a2.lang)) {
              resetCodeBlockDecorations(entry[0]);
            }
          }
          apply2(operation);
        },
        normalizeNode(entry, options) {
          const [node2] = entry;
          if (getOptions2().lowlight && node2.type === type) {
            setCodeBlockToDecorations(
              editor,
              entry
            );
          }
          normalizeNode2(entry, options);
        }
      }
    })
  ).overrideEditor(withCodeBlock);
  var onKeyDownCodeBlock = ({ editor, event }) => {
    if (event.defaultPrevented)
      return;
    const isTab = plate.Hotkeys.isTab(editor, event);
    const isUntab = plate.Hotkeys.isUntab(editor, event);
    if (isTab || isUntab) {
      const _codeLines = editor.api.nodes({
        match: { type: editor.getType(BaseCodeLinePlugin) }
      });
      const codeLines = Array.from(_codeLines);
      if (codeLines.length > 0) {
        event.preventDefault();
        const [, firstLinePath] = codeLines[0];
        const codeBlock = editor.api.parent(firstLinePath);
        if (!codeBlock)
          return;
        editor.tf.withoutNormalizing(() => {
          for (const codeLine of codeLines) {
            if (isUntab) {
              outdentCodeLine(editor, { codeBlock, codeLine });
            }
            if (isTab) {
              indentCodeLine(editor, { codeBlock, codeLine });
            }
          }
        });
      }
    }
    if (plate.isHotkey("mod+a", event)) {
      const res = getCodeLineEntry(editor, {});
      if (!res)
        return;
      const { codeBlock } = res;
      const [, codeBlockPath] = codeBlock;
      if (editor.api.isAt({ end: true }) && editor.api.isAt({ start: true }))
        return;
      editor.tf.select(codeBlockPath);
      event.preventDefault();
      event.stopPropagation();
    }
  };
  var CodeSyntaxPlugin = toPlatePlugin(BaseCodeSyntaxPlugin);
  var CodeLinePlugin = toPlatePlugin(BaseCodeLinePlugin);
  var CodeBlockPlugin = toPlatePlugin(BaseCodeBlockPlugin, {
    handlers: {
      onKeyDown: onKeyDownCodeBlock
    },
    plugins: [CodeLinePlugin, CodeSyntaxPlugin]
  }).extend(({ editor, plugin }) => ({
    shortcuts: {
      toggleCodeBlock: {
        keys: [[Key.Mod, Key.Alt, "8"]],
        preventDefault: true,
        handler: () => {
          editor.tf.toggleBlock(editor.getType(plugin));
        }
      }
    }
  }));
  var BaseHorizontalRulePlugin = plate.createSlatePlugin({
    key: "hr",
    node: { isElement: true, isVoid: true },
    parsers: {
      html: {
        deserializer: {
          rules: [
            {
              validNodeName: "HR"
            }
          ]
        }
      }
    }
  });
  var HorizontalRulePlugin = toPlatePlugin(BaseHorizontalRulePlugin);
  var withNormalizeTypes = ({
    editor,
    getOptions: getOptions2,
    tf: { normalizeNode: normalizeNode2 }
  }) => ({
    transforms: {
      normalizeNode([currentNode, currentPath]) {
        const { rules: rules2, onError } = getOptions2();
        if (currentPath.length === 0) {
          const endCurrentNormalizationPass = rules2.some(
            ({ path: path2, strictType, type }) => {
              const node2 = plate.NodeApi.get(editor, path2);
              if (node2) {
                if (strictType && plate.ElementApi.isElement(node2) && node2.type !== strictType) {
                  const { children, ...props } = editor.api.create.block({
                    type: strictType
                  });
                  editor.tf.setNodes(props, {
                    at: path2
                  });
                  return true;
                }
              } else {
                try {
                  editor.tf.insertNodes(
                    editor.api.create.block({ type: strictType ?? type }),
                    { at: path2 }
                  );
                  return true;
                } catch (error2) {
                  onError == null ? void 0 : onError(error2);
                }
              }
              return false;
            }
          );
          if (endCurrentNormalizationPass) {
            return;
          }
        }
        return normalizeNode2([currentNode, currentPath]);
      }
    }
  });
  plate.createTSlatePlugin({
    key: "normalizeTypes",
    options: {
      rules: []
    }
  }).overrideEditor(withNormalizeTypes);
  var withRemoveEmptyNodes = ({
    editor,
    getOptions: getOptions2,
    tf: { normalizeNode: normalizeNode2 }
  }) => ({
    transforms: {
      normalizeNode([node2, path2]) {
        const types = castArray4$1(getOptions2().types ?? []);
        if (plate.ElementApi.isElement(node2) && node2.type && types.includes(node2.type) && plate.NodeApi.string(node2) === "") {
          editor.tf.removeNodes({ at: path2 });
          return;
        }
        normalizeNode2([node2, path2]);
      }
    }
  });
  var RemoveEmptyNodesPlugin = plate.createTSlatePlugin({
    key: "removeEmptyNodes"
  }).overrideEditor(withRemoveEmptyNodes);
  var getLinkAttributes = (editor, link) => {
    const { allowedSchemes, dangerouslySkipSanitization, defaultLinkAttributes } = editor.getOptions({ key: "a" });
    const attributes = { ...defaultLinkAttributes };
    const href = dangerouslySkipSanitization ? link.url : plate.sanitizeUrl(link.url, { allowedSchemes }) || void 0;
    if (href !== void 0) {
      attributes.href = href;
    }
    if ("target" in link && link.target !== void 0) {
      attributes.target = link.target;
    }
    return attributes;
  };
  var createLinkNode = (editor, { children, target, text = "", url }) => {
    const type = editor.getType(BaseLinkPlugin);
    return {
      children: children ?? [{ text }],
      target,
      type,
      url
    };
  };
  var encodeUrlIfNeeded$1 = (url) => {
    try {
      const isEncoded = url !== decodeURIComponent(url);
      return isEncoded ? url : encodeURI(url);
    } catch (error2) {
      if (error2 instanceof URIError) {
        return url;
      }
      throw error2;
    }
  };
  var safeDecodeUrl = (url) => {
    try {
      return decodeURI(url);
    } catch (error2) {
      if (error2 instanceof URIError) {
        return url;
      }
      throw error2;
    }
  };
  var validateUrl = (editor, url) => {
    const { allowedSchemes, dangerouslySkipSanitization, isUrl: isUrl2 } = editor.getOptions(BaseLinkPlugin);
    if (url.startsWith("/") || url.startsWith("#")) {
      return true;
    }
    if (isUrl2 && !isUrl2(url))
      return false;
    if (!dangerouslySkipSanitization && !plate.sanitizeUrl(url, {
      allowedSchemes,
      permitInvalid: true
    }))
      return false;
    return true;
  };
  var insertLink = (editor, createLinkNodeOptions, options) => {
    editor.tf.insertNodes(
      [createLinkNode(editor, createLinkNodeOptions)],
      options
    );
  };
  var unwrapLink = (editor, options) => {
    return editor.tf.withoutNormalizing(() => {
      var _a2, _b, _c, _d, _e, _f;
      if (options == null ? void 0 : options.split) {
        const linkAboveAnchor = editor.api.above({
          at: (_a2 = editor.selection) == null ? void 0 : _a2.anchor,
          match: { type: editor.getType(BaseLinkPlugin) }
        });
        if (linkAboveAnchor) {
          editor.tf.splitNodes({
            at: (_b = editor.selection) == null ? void 0 : _b.anchor,
            match: (n2) => plate.ElementApi.isElement(n2) && n2.type === editor.getType(BaseLinkPlugin)
          });
          unwrapLink(editor, {
            at: (_c = editor.selection) == null ? void 0 : _c.anchor
          });
          return true;
        }
        const linkAboveFocus = editor.api.above({
          at: (_d = editor.selection) == null ? void 0 : _d.focus,
          match: { type: editor.getType(BaseLinkPlugin) }
        });
        if (linkAboveFocus) {
          editor.tf.splitNodes({
            at: (_e = editor.selection) == null ? void 0 : _e.focus,
            match: (n2) => plate.ElementApi.isElement(n2) && n2.type === editor.getType(BaseLinkPlugin)
          });
          unwrapLink(editor, {
            at: (_f = editor.selection) == null ? void 0 : _f.focus
          });
          return true;
        }
      }
      editor.tf.unwrapNodes({
        match: { type: editor.getType(BaseLinkPlugin) },
        ...options
      });
    });
  };
  var upsertLinkText = (editor, { text }) => {
    const newLink = editor.api.above({
      match: { type: editor.getType(BaseLinkPlugin) }
    });
    if (newLink) {
      const [newLinkNode, newLinkPath] = newLink;
      if ((text == null ? void 0 : text.length) && text !== editor.api.string(newLinkPath)) {
        const firstText = newLinkNode.children[0];
        editor.tf.replaceNodes(
          { ...firstText, text },
          {
            at: newLinkPath,
            children: true,
            select: true
          }
        );
      }
    }
  };
  var wrapLink = (editor, { target, url, ...options }) => {
    editor.tf.wrapNodes(
      {
        children: [],
        target,
        type: editor.getType(BaseLinkPlugin),
        url
      },
      { split: true, ...options }
    );
  };
  var upsertLink = (editor, {
    insertNodesOptions,
    insertTextInLink,
    skipValidation = false,
    target,
    text,
    url
  }) => {
    var _a2, _b, _c;
    const at2 = editor.selection;
    if (!at2)
      return;
    const linkAbove = editor.api.above({
      at: at2,
      match: { type: editor.getType(BaseLinkPlugin) }
    });
    if (insertTextInLink && linkAbove) {
      editor.tf.insertText(url);
      return true;
    }
    if (!skipValidation && !validateUrl(editor, url))
      return;
    if (plate.isDefined(text) && text.length === 0) {
      text = url;
    }
    if (linkAbove) {
      if (url !== ((_a2 = linkAbove[0]) == null ? void 0 : _a2.url) || target !== ((_b = linkAbove[0]) == null ? void 0 : _b.target)) {
        editor.tf.setNodes(
          { target, url },
          {
            at: linkAbove[1]
          }
        );
      }
      upsertLinkText(editor, { target, text, url });
      return true;
    }
    const linkEntry = editor.api.node({
      at: at2,
      match: { type: editor.getType(BaseLinkPlugin) }
    });
    const [linkNode, linkPath] = linkEntry ?? [];
    let shouldReplaceText = false;
    if (linkPath && (text == null ? void 0 : text.length)) {
      const linkText = editor.api.string(linkPath);
      if (text !== linkText) {
        shouldReplaceText = true;
      }
    }
    if (plate.RangeApi.isExpanded(at2)) {
      if (linkAbove) {
        unwrapLink(editor, {
          at: linkAbove[1]
        });
      } else {
        unwrapLink(editor, {
          split: true
        });
      }
      wrapLink(editor, {
        target,
        url
      });
      upsertLinkText(editor, { target, text, url });
      return true;
    }
    if (shouldReplaceText) {
      editor.tf.removeNodes({
        at: linkPath
      });
    }
    const props = plate.NodeApi.extractProps(linkNode ?? {});
    const path2 = (_c = editor.selection) == null ? void 0 : _c.focus.path;
    if (!path2)
      return;
    const leaf2 = plate.NodeApi.leaf(editor, path2);
    if (!(text == null ? void 0 : text.length)) {
      text = url;
    }
    insertLink(
      editor,
      {
        ...props,
        children: [
          {
            ...leaf2,
            text
          }
        ],
        target,
        url
      },
      insertNodesOptions
    );
    return true;
  };
  var withLink = ({
    editor,
    getOptions: getOptions2,
    tf: { apply: apply2, insertBreak: insertBreak2, insertData, insertText: insertText2, normalizeNode: normalizeNode2 },
    type
  }) => {
    const wrapLink2 = () => {
      const { getUrlHref, isUrl: isUrl2, rangeBeforeOptions } = getOptions2();
      editor.tf.withoutNormalizing(() => {
        const selection = editor.selection;
        let beforeWordRange = editor.api.range("before", selection, {
          before: rangeBeforeOptions
        });
        if (!beforeWordRange) {
          beforeWordRange = editor.api.range("start", editor.selection);
        }
        if (!beforeWordRange)
          return;
        const hasLink = editor.api.some({
          at: beforeWordRange,
          match: { type }
        });
        if (hasLink)
          return;
        let beforeWordText = editor.api.string(beforeWordRange);
        beforeWordText = (getUrlHref == null ? void 0 : getUrlHref(beforeWordText)) ?? beforeWordText;
        if (!isUrl2(beforeWordText))
          return;
        editor.tf.select(beforeWordRange);
        upsertLink(editor, {
          url: beforeWordText
        });
        editor.tf.collapse({ edge: "end" });
      });
    };
    return {
      transforms: {
        apply(operation) {
          if (operation.type === "set_selection") {
            const range2 = operation.newProperties;
            if ((range2 == null ? void 0 : range2.focus) && range2.anchor && plate.RangeApi.isCollapsed(range2)) {
              const entry = editor.api.above({
                at: range2,
                match: { type }
              });
              if (entry) {
                const [, path2] = entry;
                let newPoint;
                if (editor.api.isStart(range2.focus, path2)) {
                  newPoint = editor.api.end(path2, { previous: true });
                }
                if (editor.api.isEnd(range2.focus, path2)) {
                  newPoint = editor.api.start(path2, { next: true });
                }
                if (newPoint) {
                  operation.newProperties = {
                    anchor: newPoint,
                    focus: newPoint
                  };
                }
              }
            }
          }
          apply2(operation);
        },
        insertBreak() {
          if (!editor.api.isCollapsed())
            return insertBreak2();
          wrapLink2();
          insertBreak2();
        },
        insertData(data) {
          const { getUrlHref, keepSelectedTextOnPaste } = getOptions2();
          const text = data.getData("text/plain");
          const textHref = getUrlHref == null ? void 0 : getUrlHref(text);
          if (text) {
            const value = textHref || text;
            const inserted = upsertLink(editor, {
              insertTextInLink: true,
              text: keepSelectedTextOnPaste ? void 0 : value,
              url: value
            });
            if (inserted)
              return;
          }
          insertData(data);
        },
        insertText(text, options) {
          if (text === " " && editor.api.isCollapsed()) {
            wrapLink2();
          }
          insertText2(text, options);
        },
        normalizeNode([node2, path2]) {
          if (node2.type === type) {
            const range2 = editor.selection;
            if (range2 && editor.api.isCollapsed() && editor.api.isEnd(range2.focus, path2)) {
              const nextPoint = editor.api.start(path2, { next: true });
              if (nextPoint) {
                editor.tf.select(nextPoint);
              } else {
                const nextPath = plate.PathApi.next(path2);
                editor.tf.insertNodes({ text: "" }, { at: nextPath });
                editor.tf.select(nextPath);
              }
            }
          }
          normalizeNode2([node2, path2]);
        }
      }
    };
  };
  var BaseLinkPlugin = plate.createTSlatePlugin({
    key: "a",
    node: {
      dangerouslyAllowAttributes: ["target"],
      isElement: true,
      isInline: true,
      props: ({ editor, element }) => getLinkAttributes(editor, element)
    },
    options: {
      allowedSchemes: ["http", "https", "mailto", "tel"],
      dangerouslySkipSanitization: false,
      defaultLinkAttributes: {},
      isUrl: plate.isUrl,
      keepSelectedTextOnPaste: true,
      rangeBeforeOptions: {
        afterMatch: true,
        matchBlockStart: true,
        matchString: " ",
        skipInvalid: true
      }
    },
    parsers: {
      html: {
        deserializer: {
          rules: [
            {
              validNodeName: "A"
            }
          ],
          parse: ({ editor, element, type }) => {
            const url = element.getAttribute("href");
            if (url && validateUrl(editor, url)) {
              return {
                target: element.getAttribute("target") || "_blank",
                type,
                url
              };
            }
          }
        }
      }
    }
  }).overrideEditor(withLink).overrideEditor(
    ({ editor, type }) => withRemoveEmptyNodes(
      plate.getEditorPlugin(
        editor,
        RemoveEmptyNodesPlugin.configure({
          options: { types: type }
        })
      )
    )
  );
  var LinkPlugin = toTPlatePlugin(BaseLinkPlugin, {
    options: {
      isEditing: false,
      mode: "",
      mouseDown: false,
      newTab: false,
      openEditorId: null,
      text: "",
      triggerFloatingLinkHotkeys: "meta+k, ctrl+k",
      updated: false,
      url: ""
    }
  }).extendEditorApi(({ editor }) => ({
    link: {
      getAttributes: plate.bindFirst(getLinkAttributes, editor)
    }
  })).extendEditorApi(({ setOptions }) => ({
    floatingLink: {
      hide: () => {
        setOptions({
          isEditing: false,
          mode: "",
          mouseDown: false,
          newTab: false,
          openEditorId: null,
          text: "",
          updated: false,
          url: ""
        });
      },
      reset: () => {
        setOptions({
          isEditing: false,
          mode: "",
          mouseDown: false,
          newTab: false,
          text: "",
          updated: false,
          url: ""
        });
      },
      show: (mode, editorId) => {
        setOptions({
          isEditing: false,
          mode,
          openEditorId: editorId
        });
      }
    }
  })).extendSelectors(({ getOptions: getOptions2 }) => ({
    isOpen: (editorId) => getOptions2().openEditorId === editorId
  }));
  var useLink = ({ element }) => {
    const editor = useEditorRef();
    return {
      props: {
        ...getLinkAttributes(editor, element),
        // quick fix: hovering <a> with href loses the editor focus
        onMouseOver: (e3) => {
          e3.stopPropagation();
        }
      }
    };
  };
  var useLinkToolbarButtonState = () => {
    const pressed = useEditorSelector(
      (editor) => !!(editor == null ? void 0 : editor.selection) && editor.api.some({
        match: { type: editor.getType(LinkPlugin) }
      }),
      []
    );
    return {
      pressed
    };
  };
  var useLinkToolbarButton = (state) => {
    const editor = useEditorRef();
    return {
      props: {
        pressed: state.pressed,
        onClick: () => {
          editor.tf.focus();
          triggerFloatingLink(editor, { focused: true });
        },
        onMouseDown: (e3) => {
          e3.preventDefault();
        }
      }
    };
  };
  var useFloatingLinkNewTabInputState = () => {
    const { getOptions: getOptions2 } = useEditorPlugin(LinkPlugin);
    const updated = usePluginOption(LinkPlugin, "updated");
    const ref = React.useRef(null);
    const [checked, setChecked] = React.useState(getOptions2().newTab);
    React.useEffect(() => {
      if (ref.current && updated) {
        setTimeout(() => {
          var _a2;
          (_a2 = ref.current) == null ? void 0 : _a2.focus();
        }, 0);
      }
    }, [updated]);
    return {
      checked,
      ref,
      setChecked
    };
  };
  var useFloatingLinkNewTabInput = ({
    checked,
    ref,
    setChecked
  }) => {
    const { setOption } = useEditorPlugin(LinkPlugin);
    const onChange = React.useCallback(
      (e3) => {
        setChecked(e3.target.checked);
        setOption("newTab", e3.target.checked);
      },
      [setOption, setChecked]
    );
    return {
      props: {
        checked,
        type: "checkbox",
        onChange
      },
      ref
    };
  };
  createPrimitiveComponent("input")({
    propsHook: useFloatingLinkNewTabInput,
    stateHook: useFloatingLinkNewTabInputState
  });
  var useFloatingLinkUrlInputState = () => {
    const { getOptions: getOptions2 } = useEditorPlugin(LinkPlugin);
    const updated = usePluginOption(LinkPlugin, "updated");
    const ref = React.useRef(null);
    const focused = React.useRef(false);
    React.useEffect(() => {
      if (ref.current && updated) {
        setTimeout(() => {
          const input = ref.current;
          if (!input)
            return;
          if (focused.current)
            return;
          focused.current = true;
          const url = getOptions2().url;
          input.focus();
          input.value = url ? safeDecodeUrl(url) : "";
        }, 0);
      }
    }, [getOptions2, updated]);
    return {
      ref
    };
  };
  var useFloatingLinkUrlInput = (state) => {
    const { getOptions: getOptions2, setOption } = useEditorPlugin(LinkPlugin);
    const onChange = React.useCallback(
      (e3) => {
        const url = encodeUrlIfNeeded$1(e3.target.value);
        setOption("url", url);
      },
      [setOption]
    );
    return {
      props: {
        defaultValue: getOptions2().url,
        onChange
      },
      ref: state.ref
    };
  };
  var FloatingLinkUrlInput = createPrimitiveComponent("input")({
    propsHook: useFloatingLinkUrlInput,
    stateHook: useFloatingLinkUrlInputState
  });
  var useLinkOpenButtonState = () => {
    const editor = useEditorRef();
    const selection = useEditorSelection();
    const entry = React.useMemo(
      () => editor.api.node({
        match: { type: editor.getType(LinkPlugin) }
      }),
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [editor, selection]
    );
    if (!entry) {
      return {};
    }
    const [element] = entry;
    return {
      element
    };
  };
  var useLinkOpenButton = ({ element }) => {
    const editor = useEditorRef();
    if (!element) {
      return {
        props: {}
      };
    }
    const linkAttributes = getLinkAttributes(editor, element);
    return {
      props: {
        ...linkAttributes,
        "aria-label": "Open link in a new tab",
        target: "_blank",
        onMouseOver: (e3) => {
          e3.stopPropagation();
        }
      }
    };
  };
  createPrimitiveComponent("a")({
    propsHook: useLinkOpenButton,
    stateHook: useLinkOpenButtonState
  });
  var triggerFloatingLinkEdit = (editor) => {
    const { setOption } = plate.getEditorPlugin(editor, LinkPlugin);
    const entry = editor.api.node({
      match: { type: editor.getType(LinkPlugin) }
    });
    if (!entry)
      return;
    const [link, path2] = entry;
    let text = editor.api.string(path2);
    setOption("url", link.url);
    setOption("newTab", link.target === "_blank");
    if (text === link.url) {
      text = "";
    }
    setOption("text", text);
    setOption("isEditing", true);
    return true;
  };
  var submitFloatingLink = (editor) => {
    if (!editor.selection)
      return;
    const { api, getOptions: getOptions2 } = plate.getEditorPlugin(editor, LinkPlugin);
    const {
      forceSubmit,
      newTab,
      text,
      transformInput,
      url: inputUrl
    } = getOptions2();
    const url = transformInput ? transformInput(inputUrl) ?? "" : inputUrl;
    if (!forceSubmit && !validateUrl(editor, url))
      return;
    const target = newTab ? "_blank" : void 0;
    api.floatingLink.hide();
    upsertLink(editor, {
      skipValidation: true,
      target,
      text,
      url
    });
    setTimeout(() => {
      editor.tf.focus({ at: editor.selection });
    }, 0);
    return true;
  };
  var useFloatingLinkEnter = () => {
    const editor = useEditorRef();
    const open2 = usePluginOption(LinkPlugin, "isOpen", editor.id);
    useHotkeys(
      "*",
      (e3) => {
        if (e3.key !== "Enter")
          return;
        if (submitFloatingLink(editor)) {
          e3.preventDefault();
        }
      },
      {
        enabled: open2,
        enableOnFormTags: ["INPUT"]
      },
      []
    );
  };
  var useFloatingLinkEscape = () => {
    const { api, editor, getOptions: getOptions2 } = useEditorPlugin(LinkPlugin);
    const open2 = usePluginOption(LinkPlugin, "isOpen", editor.id);
    useHotkeys(
      "escape",
      (e3) => {
        const { isEditing, mode } = getOptions2();
        if (!mode)
          return;
        e3.preventDefault();
        if (mode === "edit" && isEditing) {
          api.floatingLink.show("edit", editor.id);
          editor.tf.focus({ at: editor.selection });
          return;
        }
        if (mode === "insert") {
          editor.tf.focus({ at: editor.selection });
        }
        api.floatingLink.hide();
      },
      {
        enabled: open2,
        enableOnContentEditable: true,
        enableOnFormTags: ["INPUT"]
      },
      []
    );
  };
  var useVirtualFloatingLink = ({
    editorId,
    ...floatingOptions
  }) => {
    const { setOption } = useEditorPlugin(LinkPlugin);
    return plateFloating.useVirtualFloating({
      onOpenChange: (open2) => setOption("openEditorId", open2 ? editorId : null),
      ...floatingOptions
    });
  };
  var useFloatingLinkEditState = ({
    floatingOptions
  } = {}) => {
    const { editor, getOptions: getOptions2, type } = useEditorPlugin(LinkPlugin);
    const { triggerFloatingLinkHotkeys } = getOptions2();
    const readOnly = useEditorReadOnly();
    const isEditing = usePluginOption(LinkPlugin, "isEditing");
    const version2 = useEditorVersion();
    const mode = usePluginOption(LinkPlugin, "mode");
    const open2 = usePluginOption(LinkPlugin, "isOpen", editor.id);
    const getBoundingClientRect = React.useCallback(() => {
      const entry = editor.api.above({
        match: { type }
      });
      if (entry) {
        const [, path2] = entry;
        return plateFloating.getRangeBoundingClientRect(editor, {
          anchor: editor.api.start(path2),
          focus: editor.api.end(path2)
        });
      }
      return plateFloating.getDOMSelectionBoundingClientRect();
    }, [editor, type]);
    const isOpen = open2 && mode === "edit";
    const floating = useVirtualFloatingLink({
      editorId: editor.id,
      getBoundingClientRect,
      open: isOpen,
      ...floatingOptions
    });
    return {
      editor,
      floating,
      isEditing,
      isOpen,
      readOnly,
      triggerFloatingLinkHotkeys,
      versionEditor: version2
    };
  };
  var useFloatingLinkEdit = ({
    editor,
    floating,
    triggerFloatingLinkHotkeys,
    versionEditor
  }) => {
    const { api, getOptions: getOptions2 } = useEditorPlugin(LinkPlugin);
    React.useEffect(() => {
      if (editor.selection && editor.api.some({
        match: { type: editor.getType(LinkPlugin) }
      })) {
        api.floatingLink.show("edit", editor.id);
        floating.update();
        return;
      }
      if (getOptions2().mode === "edit") {
        api.floatingLink.hide();
      }
    }, [editor, versionEditor, floating.update]);
    useHotkeys(
      triggerFloatingLinkHotkeys,
      (e3) => {
        if (getOptions2().mode === "edit" && triggerFloatingLinkEdit(editor)) {
          e3.preventDefault();
        }
      },
      {
        enableOnContentEditable: true
      },
      []
    );
    useFloatingLinkEnter();
    useFloatingLinkEscape();
    const clickOutsideRef = useOnClickOutside(() => {
      if (!getOptions2().isEditing)
        return;
      api.floatingLink.hide();
    });
    return {
      editButtonProps: {
        onClick: () => {
          triggerFloatingLinkEdit(editor);
        }
      },
      props: {
        style: {
          ...floating.style,
          zIndex: 50
        }
      },
      ref: useComposedRef(
        floating.refs.setFloating,
        clickOutsideRef
      ),
      unlinkButtonProps: {
        onClick: () => {
          unwrapLink(editor);
        },
        onMouseDown: (e3) => {
          e3.preventDefault();
        }
      }
    };
  };
  var triggerFloatingLinkInsert = (editor, {
    focused
  } = {}) => {
    const { api, getOptions: getOptions2, setOption, type } = plate.getEditorPlugin(
      editor,
      LinkPlugin
    );
    const { mode } = getOptions2();
    if (mode)
      return;
    if (!focused)
      return;
    if (editor.api.isAt({ blocks: true }))
      return;
    const hasLink = editor.api.some({
      match: { type }
    });
    if (hasLink)
      return;
    setOption("text", editor.api.string(editor.selection));
    api.floatingLink.show("insert", editor.id);
    return true;
  };
  var useFloatingLinkInsertState = ({
    floatingOptions
  } = {}) => {
    const { editor, getOptions: getOptions2 } = useEditorPlugin(LinkPlugin);
    const { triggerFloatingLinkHotkeys } = getOptions2();
    const readOnly = useEditorReadOnly();
    const focused = useFocused();
    const mode = usePluginOption(LinkPlugin, "mode");
    const isOpen = usePluginOption(LinkPlugin, "isOpen", editor.id);
    const floating = useVirtualFloatingLink({
      editorId: editor.id,
      getBoundingClientRect: plateFloating.getDOMSelectionBoundingClientRect,
      open: isOpen && mode === "insert",
      whileElementsMounted: () => () => {
      },
      ...floatingOptions
    });
    return {
      floating,
      focused,
      isOpen,
      readOnly,
      triggerFloatingLinkHotkeys
    };
  };
  var useFloatingLinkInsert = ({
    floating,
    focused,
    isOpen,
    readOnly,
    triggerFloatingLinkHotkeys
  }) => {
    const { api, editor, getOptions: getOptions2, setOption } = useEditorPlugin(LinkPlugin);
    const onChange = React.useCallback(
      (e3) => {
        setOption("text", e3.target.value);
      },
      [setOption]
    );
    const ref = useOnClickOutside(
      () => {
        if (getOptions2().mode === "insert") {
          api.floatingLink.hide();
          editor.tf.focus({ at: editor.selection });
        }
      },
      {
        disabled: !isOpen
      }
    );
    React.useEffect(() => {
      if (isOpen) {
        floating.update();
        setOption("updated", true);
      } else {
        setOption("updated", false);
      }
    }, [isOpen, floating.update]);
    useHotkeys(
      triggerFloatingLinkHotkeys,
      (e3) => {
        if (triggerFloatingLinkInsert(editor, { focused })) {
          e3.preventDefault();
        }
      },
      {
        enableOnContentEditable: true
      },
      [focused]
    );
    useFloatingLinkEscape();
    const { text, updated } = getOptions2();
    const updatedValue = React.useCallback(
      (el) => {
        if (el && updated) {
          el.value = getOptions2().text;
        }
      },
      [getOptions2, updated]
    );
    return {
      hidden: readOnly || !isOpen,
      props: {
        style: {
          ...floating.style,
          zIndex: 50
        }
      },
      ref: useComposedRef(floating.refs.setFloating, ref),
      textInputProps: {
        defaultValue: text,
        ref: updatedValue,
        onChange
      }
    };
  };
  var triggerFloatingLink = (editor, {
    focused
  } = {}) => {
    const { getOptions: getOptions2 } = plate.getEditorPlugin(editor, LinkPlugin);
    if (getOptions2().mode === "edit") {
      triggerFloatingLinkEdit(editor);
      return;
    }
    triggerFloatingLinkInsert(editor, {
      focused
    });
  };
  var BaseResetNodePlugin = plate.createTSlatePlugin({
    key: "resetNode",
    options: {
      rules: []
    }
  }).overrideEditor(
    ({ editor, getOptions: getOptions2, tf: { deleteBackward: deleteBackward2, deleteFragment: deleteFragment2 } }) => ({
      transforms: {
        deleteBackward(unit) {
          if (!getOptions2().disableFirstBlockReset) {
            const { selection } = editor;
            if (selection && editor.api.isCollapsed()) {
              const start2 = editor.api.start([]);
              if (plate.PointApi.equals(selection.anchor, start2)) {
                const node2 = plate.NodeApi.get(editor, [0]);
                const { children, ...props } = editor.api.create.block({}, [0]);
                editor.tf.withoutNormalizing(() => {
                  const { id: id2, ...nodeProps } = plate.NodeApi.extractProps(node2);
                  editor.tf.unsetNodes(Object.keys(nodeProps), { at: [0] });
                  editor.tf.setNodes(props, { at: [0] });
                });
                return;
              }
            }
          }
          deleteBackward2(unit);
        },
        deleteFragment(direction2) {
          const deleteFragmentPlugin = () => {
            const { selection } = editor;
            if (!selection)
              return;
            if (plate.RangeApi.equals(selection, editor.api.range([]))) {
              editor.tf.reset({
                children: true,
                select: true
              });
              return true;
            }
          };
          if (!getOptions2().disableEditorReset && deleteFragmentPlugin())
            return;
          deleteFragment2(direction2);
        }
      }
    })
  );
  var SIMULATE_BACKSPACE = {
    key: "",
    which: 8
  };
  var onKeyDownResetNode = ({
    editor,
    event,
    getOptions: getOptions2
  }) => {
    const { rules: rules2 = [] } = getOptions2();
    if (event.defaultPrevented)
      return;
    let reset2;
    if (!editor.selection)
      return;
    if (editor.api.isCollapsed()) {
      rules2.forEach(({ defaultType, hotkey, predicate, types, onReset }) => {
        var _a2;
        if (hotkey && plate.isHotkey(hotkey, event) && predicate(editor) && editor.api.some({ match: { type: types } })) {
          (_a2 = event.preventDefault) == null ? void 0 : _a2.call(event);
          editor.tf.setNodes({ type: defaultType });
          if (onReset) {
            onReset(editor);
          }
          reset2 = true;
        }
      });
    }
    return reset2;
  };
  var ResetNodePlugin = toTPlatePlugin(
    BaseResetNodePlugin,
    {
      handlers: {
        onKeyDown: onKeyDownResetNode
      }
    }
  );
  var isListNested = (editor, listPath) => {
    var _a2;
    const listParentNode = (_a2 = editor.api.parent(listPath)) == null ? void 0 : _a2[0];
    return (listParentNode == null ? void 0 : listParentNode.type) === editor.getType(BaseListItemPlugin);
  };
  var getListTypes = (editor) => {
    return [
      editor.getType(BaseNumberedListPlugin),
      editor.getType(BaseBulletedListPlugin)
    ];
  };
  var getHighestEmptyList = (editor, {
    diffListPath,
    liPath
  }) => {
    const list = editor.api.above({
      at: liPath,
      match: { type: getListTypes(editor) }
    });
    if (!list)
      return;
    const [listNode, listPath] = list;
    if (!diffListPath || !plate.PathApi.equals(listPath, diffListPath)) {
      if (listNode.children.length < 2) {
        const liParent = editor.api.above({
          at: listPath,
          match: { type: editor.getType(BaseListItemPlugin) }
        });
        if (liParent) {
          return getHighestEmptyList(editor, { diffListPath, liPath: liParent[1] }) || listPath;
        }
      }
      return liPath;
    }
  };
  var getListItemEntry = (editor, { at: at2 = editor.selection } = {}) => {
    const liType = editor.getType(BaseListItemPlugin);
    let _at;
    if (plate.RangeApi.isRange(at2) && !plate.RangeApi.isCollapsed(at2)) {
      _at = at2.focus.path;
    } else if (plate.RangeApi.isRange(at2)) {
      _at = at2.anchor.path;
    } else {
      _at = at2;
    }
    if (_at) {
      const node2 = plate.NodeApi.get(editor, _at);
      if (node2) {
        const listItem = editor.api.above({
          at: _at,
          match: { type: liType }
        });
        if (listItem) {
          const list = editor.api.parent(listItem[1]);
          return { list, listItem };
        }
      }
    }
  };
  var getListRoot = (editor, at2 = editor.selection) => {
    if (!at2)
      return;
    const parentList = editor.api.above({
      at: at2,
      match: {
        type: [
          editor.getType(BaseBulletedListPlugin),
          editor.getType(BaseNumberedListPlugin)
        ]
      }
    });
    if (parentList) {
      const [, parentListPath] = parentList;
      return getListRoot(editor, parentListPath) ?? parentList;
    }
  };
  var withTodoList = ({
    editor,
    getOptions: getOptions2,
    tf: { insertBreak: insertBreak2 }
  }) => ({
    transforms: {
      insertBreak() {
        const insertBreakTodoList = () => {
          if (!editor.selection)
            return;
          const res = getTodoListItemEntry(editor);
          if (res) {
            const inserted = insertTodoListItem(editor, getOptions2());
            if (inserted)
              return true;
          }
        };
        if (insertBreakTodoList())
          return;
        insertBreak2();
      }
    }
  });
  var BaseTodoListPlugin = plate.createTSlatePlugin({
    key: "action_item",
    node: { isElement: true }
  }).overrideEditor(withTodoList);
  var getTodoListItemEntry = (editor, { at: at2 = editor.selection } = {}) => {
    const todoType = editor.getType(BaseTodoListPlugin);
    let _at;
    if (plate.RangeApi.isRange(at2) && !plate.RangeApi.isCollapsed(at2)) {
      _at = at2.focus.path;
    } else if (plate.RangeApi.isRange(at2)) {
      _at = at2.anchor.path;
    } else {
      _at = at2;
    }
    if (_at) {
      const node2 = plate.NodeApi.get(editor, _at);
      if (node2) {
        const listItem = editor.api.above({
          at: _at,
          match: { type: todoType }
        });
        if (listItem) {
          const list = editor.api.parent(listItem[1]);
          return { list, listItem };
        }
      }
    }
  };
  var hasListChild = (editor, node2) => node2.children.some((n2) => plate.match(n2, [], { type: getListTypes(editor) }));
  var isAcrossListItems = (editor, at2 = editor.selection) => {
    if (!at2 || plate.RangeApi.isCollapsed(at2)) {
      return false;
    }
    const isAcrossBlocks = editor.api.isAt({ at: at2, blocks: true });
    if (!isAcrossBlocks)
      return false;
    return editor.api.some({
      at: at2,
      match: { type: editor.getType(BaseListItemPlugin) }
    });
  };
  var isListRoot = (editor, node2) => plate.ElementApi.isElement(node2) && getListTypes(editor).includes(node2.type);
  var moveListItemDown = (editor, { list, listItem }) => {
    let moved = false;
    const [listNode] = list;
    const [, listItemPath] = listItem;
    const previousListItemPath = plate.PathApi.previous(listItemPath);
    if (!previousListItemPath) {
      return;
    }
    const previousSiblingItem = editor.api.node(previousListItemPath);
    if (previousSiblingItem) {
      const [previousNode, previousPath] = previousSiblingItem;
      const sublist = previousNode.children.find(
        (n2) => plate.match(n2, [], { type: getListTypes(editor) })
      );
      const newPath = previousPath.concat(
        sublist ? [1, sublist.children.length] : [1]
      );
      editor.tf.withoutNormalizing(() => {
        if (!sublist) {
          editor.tf.wrapNodes(
            { children: [], type: listNode.type },
            { at: listItemPath }
          );
        }
        editor.tf.moveNodes({
          at: listItemPath,
          to: newPath
        });
        moved = true;
      });
    }
    return moved;
  };
  var moveListItemsToList = (editor, {
    deleteFromList = true,
    fromList,
    fromListItem,
    fromStartIndex,
    to: _to,
    toList,
    toListIndex = null
  }) => {
    let fromListPath;
    let moved = false;
    editor.tf.withoutNormalizing(() => {
      var _a2;
      if (fromListItem) {
        const fromListItemSublist = editor.api.descendant({
          at: fromListItem[1],
          match: {
            type: getListTypes(editor)
          }
        });
        if (!fromListItemSublist)
          return;
        fromListPath = fromListItemSublist == null ? void 0 : fromListItemSublist[1];
      } else if (fromList) {
        fromListPath = fromList[1];
      } else {
        return;
      }
      let to2 = null;
      if (_to)
        to2 = _to;
      if (toList) {
        if (toListIndex === null) {
          const lastChildPath = (_a2 = plate.NodeApi.lastChild(editor, toList[1])) == null ? void 0 : _a2[1];
          to2 = lastChildPath ? plate.PathApi.next(lastChildPath) : toList[1].concat([0]);
        } else {
          to2 = toList[1].concat([toListIndex]);
        }
      }
      if (!to2)
        return;
      moved = editor.tf.moveNodes({
        at: fromListPath,
        children: true,
        fromIndex: fromStartIndex,
        to: to2
      });
      if (deleteFromList) {
        editor.tf.delete({ at: fromListPath });
      }
    });
    return moved;
  };
  var unwrapList = (editor, { at: at2 } = {}) => {
    const ancestorListTypeCheck = () => {
      if (editor.api.above({ at: at2, match: { type: getListTypes(editor) } })) {
        return true;
      }
      if (!at2 && editor.selection) {
        const commonNode = plate.NodeApi.common(
          editor,
          editor.selection.anchor.path,
          editor.selection.focus.path
        );
        if (plate.ElementApi.isElement(commonNode[0]) && getListTypes(editor).includes(commonNode[0].type)) {
          return true;
        }
      }
      return false;
    };
    editor.tf.withoutNormalizing(() => {
      do {
        editor.tf.unwrapNodes({
          at: at2,
          match: { type: editor.getType(BaseListItemPlugin) },
          split: true
        });
        editor.tf.unwrapNodes({
          at: at2,
          match: {
            type: [
              editor.getType(BaseBulletedListPlugin),
              editor.getType(BaseNumberedListPlugin)
            ]
          },
          split: true
        });
      } while (ancestorListTypeCheck());
    });
  };
  var moveListItemUp = (editor, { list, listItem }) => {
    const move2 = () => {
      const [listNode, listPath] = list;
      const [liNode, liPath] = listItem;
      const liParent = editor.api.above({
        at: listPath,
        match: { type: editor.getType(BaseListItemPlugin) }
      });
      if (!liParent) {
        let toListPath2;
        try {
          toListPath2 = plate.PathApi.next(listPath);
        } catch (error2) {
          return;
        }
        const condA = hasListChild(editor, liNode);
        const condB = !plate.NodeApi.isLastChild(editor, liPath);
        if (condA || condB) {
          editor.tf.insertNodes(
            {
              children: [],
              type: listNode.type
            },
            { at: toListPath2 }
          );
        }
        if (condA) {
          const toListNode = plate.NodeApi.get(editor, toListPath2);
          if (!toListNode)
            return;
          moveListItemsToList(editor, {
            fromListItem: listItem,
            toList: [toListNode, toListPath2]
          });
        }
        if (condB) {
          const toListNode = plate.NodeApi.get(editor, toListPath2);
          if (!toListNode)
            return;
          moveListItemsToList(editor, {
            deleteFromList: false,
            fromList: list,
            fromStartIndex: liPath.at(-1) + 1,
            toList: [toListNode, toListPath2]
          });
        }
        unwrapList(editor, { at: liPath.concat(0) });
        return true;
      }
      const [, liParentPath] = liParent;
      const toListPath = liPath.concat([1]);
      if (!plate.NodeApi.isLastChild(editor, liPath)) {
        if (!hasListChild(editor, liNode)) {
          editor.tf.insertNodes(
            {
              children: [],
              type: listNode.type
            },
            { at: toListPath }
          );
        }
        const toListNode = plate.NodeApi.get(editor, toListPath);
        if (!toListNode)
          return;
        moveListItemsToList(editor, {
          deleteFromList: false,
          fromListItem: liParent,
          fromStartIndex: liPath.at(-1) + 1,
          toList: [toListNode, toListPath]
        });
      }
      const movedUpLiPath = plate.PathApi.next(liParentPath);
      editor.tf.moveNodes({
        at: liPath,
        to: movedUpLiPath
      });
      return true;
    };
    let moved = false;
    editor.tf.withoutNormalizing(() => {
      moved = move2();
    });
    return moved;
  };
  var removeFirstListItem = (editor, {
    list,
    listItem
  }) => {
    const [, listPath] = list;
    if (!isListNested(editor, listPath)) {
      moveListItemUp(editor, { list, listItem });
      return true;
    }
    return false;
  };
  var moveListItems = (editor, {
    at: at2 = editor.selection ?? void 0,
    enableResetOnShiftTab,
    increase = true
  } = {}) => {
    const _nodes = editor.api.nodes({
      at: at2,
      match: {
        type: editor.getType(BaseListItemContentPlugin)
      }
    });
    const lics = Array.from(_nodes);
    if (lics.length === 0)
      return;
    const highestLicPaths = [];
    const highestLicPathRefs = [];
    lics.forEach((lic) => {
      const licPath = lic[1];
      const liPath = plate.PathApi.parent(licPath);
      const isAncestor = highestLicPaths.some((path2) => {
        const highestLiPath = plate.PathApi.parent(path2);
        return plate.PathApi.isAncestor(highestLiPath, liPath);
      });
      if (!isAncestor) {
        highestLicPaths.push(licPath);
        highestLicPathRefs.push(editor.api.pathRef(licPath));
      }
    });
    const licPathRefsToMove = increase ? highestLicPathRefs : highestLicPathRefs.reverse();
    return editor.tf.withoutNormalizing(() => {
      let moved = false;
      licPathRefsToMove.forEach((licPathRef) => {
        const licPath = licPathRef.unref();
        if (!licPath)
          return;
        const listItem = editor.api.parent(licPath);
        if (!listItem)
          return;
        const parentList = editor.api.parent(listItem[1]);
        if (!parentList)
          return;
        let _moved;
        if (increase) {
          _moved = moveListItemDown(editor, {
            list: parentList,
            listItem
          });
        } else if (isListNested(editor, parentList[1])) {
          _moved = moveListItemUp(editor, {
            list: parentList,
            listItem
          });
        } else if (enableResetOnShiftTab) {
          _moved = removeFirstListItem(editor, {
            list: parentList,
            listItem
          });
        }
        moved = _moved || moved;
      });
      return moved;
    });
  };
  var insertListItem = (editor) => {
    const liType = editor.getType(BaseListItemPlugin);
    const licType = editor.getType(BaseListItemContentPlugin);
    if (!editor.selection) {
      return false;
    }
    const licEntry = editor.api.above({ match: { type: licType } });
    if (!licEntry)
      return false;
    const [, paragraphPath] = licEntry;
    const listItemEntry = editor.api.parent(paragraphPath);
    if (!listItemEntry)
      return false;
    const [listItemNode, listItemPath] = listItemEntry;
    if (listItemNode.type !== liType)
      return false;
    let success = false;
    editor.tf.withoutNormalizing(() => {
      if (!editor.api.isCollapsed()) {
        editor.tf.delete();
      }
      const isStart2 = editor.api.isStart(editor.selection.focus, paragraphPath);
      const isEnd2 = editor.api.isEmpty(editor.selection, { after: true });
      const nextParagraphPath = plate.PathApi.next(paragraphPath);
      const nextListItemPath = plate.PathApi.next(listItemPath);
      if (isStart2) {
        editor.tf.insertNodes(
          {
            children: [{ children: [{ text: "" }], type: licType }],
            type: liType
          },
          { at: listItemPath }
        );
        success = true;
        return;
      }
      if (isEnd2) {
        const marks2 = editor.api.marks() || {};
        editor.tf.insertNodes(
          {
            children: [{ children: [{ text: "", ...marks2 }], type: licType }],
            type: liType
          },
          { at: nextListItemPath }
        );
        editor.tf.select(nextListItemPath);
      } else {
        editor.tf.withoutNormalizing(() => {
          editor.tf.splitNodes();
          editor.tf.wrapNodes(
            {
              children: [],
              type: liType
            },
            { at: nextParagraphPath }
          );
          editor.tf.moveNodes({
            at: nextParagraphPath,
            to: nextListItemPath
          });
          editor.tf.select(nextListItemPath);
          editor.tf.collapse({
            edge: "start"
          });
        });
      }
      if (listItemNode.children.length > 1) {
        editor.tf.moveNodes({
          at: nextParagraphPath,
          to: nextListItemPath.concat(1)
        });
      }
      success = true;
    });
    return success;
  };
  var insertTodoListItem = (editor, {
    inheritCheckStateOnLineEndBreak = false,
    inheritCheckStateOnLineStartBreak = false
  }) => {
    const todoType = editor.getType(BaseTodoListPlugin);
    if (!editor.selection) {
      return false;
    }
    const todoEntry = editor.api.above({ match: { type: todoType } });
    if (!todoEntry)
      return false;
    const [todo, paragraphPath] = todoEntry;
    let success = false;
    editor.tf.withoutNormalizing(() => {
      if (!editor.api.isCollapsed()) {
        editor.tf.delete();
      }
      const isStart2 = editor.api.isStart(editor.selection.focus, paragraphPath);
      const isEnd2 = editor.api.isEmpty(editor.selection, { after: true });
      const nextParagraphPath = plate.PathApi.next(paragraphPath);
      if (isStart2) {
        editor.tf.insertNodes(
          {
            checked: inheritCheckStateOnLineStartBreak ? todo.checked : false,
            children: [{ text: "" }],
            type: todoType
          },
          { at: paragraphPath }
        );
        success = true;
        return;
      }
      if (isEnd2) {
        const marks2 = editor.api.marks() || {};
        editor.tf.insertNodes(
          {
            checked: inheritCheckStateOnLineEndBreak ? todo.checked : false,
            children: [{ text: "", ...marks2 }],
            type: todoType
          },
          { at: nextParagraphPath }
        );
        editor.tf.select(nextParagraphPath);
      } else {
        editor.tf.withoutNormalizing(() => {
          editor.tf.splitNodes();
        });
      }
      success = true;
    });
    return success;
  };
  var moveListItemSublistItemsToListItemSublist = (editor, {
    fromListItem,
    start: start2,
    toListItem
  }) => {
    const [, fromListItemPath] = fromListItem;
    const [, toListItemPath] = toListItem;
    let moved = false;
    editor.tf.withoutNormalizing(() => {
      const fromListItemSublist = editor.api.descendant({
        at: fromListItemPath,
        match: {
          type: getListTypes(editor)
        }
      });
      if (!fromListItemSublist)
        return;
      const [, fromListItemSublistPath] = fromListItemSublist;
      const toListItemSublist = editor.api.descendant({
        at: toListItemPath,
        match: {
          type: getListTypes(editor)
        }
      });
      let to2;
      if (!toListItemSublist) {
        const fromList = editor.api.parent(fromListItemPath);
        if (!fromList)
          return;
        const [fromListNode] = fromList;
        const fromListType = fromListNode.type;
        const toListItemSublistPath = toListItemPath.concat([1]);
        editor.tf.insertNodes(
          { children: [], type: fromListType },
          { at: toListItemSublistPath }
        );
        to2 = toListItemSublistPath.concat([0]);
      } else if (start2) {
        const [, toListItemSublistPath] = toListItemSublist;
        to2 = toListItemSublistPath.concat([0]);
      } else {
        to2 = plate.PathApi.next(plate.NodeApi.lastChild(editor, toListItemSublist[1])[1]);
      }
      moved = editor.tf.moveNodes({
        at: fromListItemSublistPath,
        children: true,
        to: to2
      });
      editor.tf.delete({ at: fromListItemSublistPath });
    });
    return moved;
  };
  var removeListItem = (editor, { list, listItem, reverse = true }) => {
    const [liNode, liPath] = listItem;
    if (editor.api.isExpanded() || !hasListChild(editor, liNode)) {
      return false;
    }
    const previousLiPath = plate.PathApi.previous(liPath);
    let success = false;
    editor.tf.withoutNormalizing(() => {
      if (previousLiPath) {
        const previousLi = editor.api.node(previousLiPath);
        if (!previousLi)
          return;
        let tempLiPath = plate.PathApi.next(liPath);
        editor.tf.insertNodes(
          {
            children: [
              {
                children: [{ text: "" }],
                type: editor.getType(BaseListItemContentPlugin)
              }
            ],
            type: editor.getType(BaseListItemPlugin)
          },
          { at: tempLiPath }
        );
        const tempLi = editor.api.node(tempLiPath);
        if (!tempLi)
          return;
        const tempLiPathRef = editor.api.pathRef(tempLi[1]);
        moveListItemSublistItemsToListItemSublist(editor, {
          fromListItem: listItem,
          toListItem: tempLi
        });
        plate.deleteMerge(editor, {
          reverse
        });
        tempLiPath = tempLiPathRef.unref();
        moveListItemSublistItemsToListItemSublist(editor, {
          fromListItem: [tempLi[0], tempLiPath],
          toListItem: previousLi
        });
        editor.tf.removeNodes({ at: tempLiPath });
        success = true;
        return;
      }
      moveListItemsToList(editor, {
        fromListItem: listItem,
        toList: list,
        toListIndex: 1
      });
    });
    return success;
  };
  var toggleList = (editor, { type }) => editor.tf.withoutNormalizing(() => {
    if (!editor.selection) {
      return;
    }
    const { validLiChildrenTypes } = editor.getOptions(BaseListPlugin);
    if (editor.api.isCollapsed() || !editor.api.isAt({ blocks: true })) {
      const res = getListItemEntry(editor);
      if (res) {
        const { list } = res;
        if (list[0].type === type) {
          unwrapList(editor);
        } else {
          editor.tf.setNodes(
            { type },
            {
              at: editor.selection,
              mode: "lowest",
              match: (n2) => plate.ElementApi.isElement(n2) && getListTypes(editor).includes(n2.type)
            }
          );
        }
      } else {
        const list = { children: [], type };
        editor.tf.wrapNodes(list);
        const _nodes = editor.api.nodes({
          match: { type: editor.getType(plate.BaseParagraphPlugin) }
        });
        const nodes2 = Array.from(_nodes);
        const blockAbove = editor.api.block({
          match: { type: validLiChildrenTypes }
        });
        if (!blockAbove) {
          editor.tf.setNodes({
            type: editor.getType(BaseListItemContentPlugin)
          });
        }
        const listItem = {
          children: [],
          type: editor.getType(BaseListItemPlugin)
        };
        for (const [, path2] of nodes2) {
          editor.tf.wrapNodes(listItem, {
            at: path2
          });
        }
      }
    } else {
      const [startPoint, endPoint] = plate.RangeApi.edges(editor.selection);
      const commonEntry = plate.NodeApi.common(
        editor,
        startPoint.path,
        endPoint.path
      );
      if (getListTypes(editor).includes(commonEntry[0].type) || commonEntry[0].type === editor.getType(BaseListItemPlugin)) {
        if (commonEntry[0].type === type) {
          unwrapList(editor);
        } else {
          const startList = editor.api.node({
            at: plate.RangeApi.start(editor.selection),
            match: { type: getListTypes(editor) },
            mode: "lowest"
          });
          const endList = editor.api.node({
            at: plate.RangeApi.end(editor.selection),
            match: { type: getListTypes(editor) },
            mode: "lowest"
          });
          const rangeLength = Math.min(
            startList[1].length,
            endList[1].length
          );
          editor.tf.setNodes(
            { type },
            {
              at: editor.selection,
              mode: "all",
              match: (n2, path2) => plate.ElementApi.isElement(n2) && getListTypes(editor).includes(n2.type) && path2.length >= rangeLength
            }
          );
        }
      } else {
        const rootPathLength = commonEntry[1].length;
        const _nodes = editor.api.nodes({
          mode: "all"
        });
        const nodes2 = Array.from(_nodes).filter(
          ([, path2]) => path2.length === rootPathLength + 1
        );
        nodes2.forEach((n2) => {
          if (getListTypes(editor).includes(n2[0].type)) {
            editor.tf.setNodes(
              { type },
              {
                at: n2[1],
                mode: "all",
                match: (_n) => plate.ElementApi.isElement(_n) && getListTypes(editor).includes(_n.type)
              }
            );
          } else {
            if (!(validLiChildrenTypes == null ? void 0 : validLiChildrenTypes.includes(n2[0].type))) {
              editor.tf.setNodes(
                { type: editor.getType(BaseListItemContentPlugin) },
                { at: n2[1] }
              );
            }
            const listItem = {
              children: [],
              type: editor.getType(BaseListItemPlugin)
            };
            editor.tf.wrapNodes(listItem, {
              at: n2[1]
            });
            const list = { children: [], type };
            editor.tf.wrapNodes(list, { at: n2[1] });
          }
        });
      }
    }
  });
  var toggleBulletedList = (editor) => toggleList(editor, { type: editor.getType(BaseBulletedListPlugin) });
  var toggleNumberedList = (editor) => toggleList(editor, { type: editor.getType(BaseNumberedListPlugin) });
  var BaseBulletedListPlugin = plate.createSlatePlugin({
    key: "ul",
    node: { isElement: true },
    parsers: {
      html: {
        deserializer: {
          rules: [
            {
              validNodeName: "UL"
            }
          ]
        }
      }
    }
  });
  var BaseNumberedListPlugin = plate.createSlatePlugin({
    key: "ol",
    node: { isElement: true },
    parsers: { html: { deserializer: { rules: [{ validNodeName: "OL" }] } } }
  });
  var BaseListItemPlugin = plate.createSlatePlugin({
    key: "li",
    inject: {
      plugins: {
        [plate.HtmlPlugin.key]: {
          parser: {
            preInsert: ({ editor, type }) => {
              return editor.api.some({ match: { type } });
            }
          }
        }
      }
    },
    node: { isElement: true },
    parsers: { html: { deserializer: { rules: [{ validNodeName: "LI" }] } } }
  });
  var BaseListItemContentPlugin = plate.createSlatePlugin({
    key: "lic",
    node: { isElement: true }
  });
  var BaseListPlugin = plate.createTSlatePlugin({
    key: "list",
    // TODO react
    // extendEditor: withList,
    plugins: [
      BaseBulletedListPlugin,
      BaseNumberedListPlugin,
      BaseListItemPlugin,
      BaseListItemContentPlugin
    ]
  }).extendEditorTransforms(({ editor }) => ({
    toggle: {
      bulletedList: plate.bindFirst(toggleBulletedList, editor),
      list: plate.bindFirst(toggleList, editor),
      numberedList: plate.bindFirst(toggleNumberedList, editor)
    }
  }));
  var selectionIsNotInAListHandler = (editor) => {
    const pointAfterSelection = editor.api.after(editor.selection.focus);
    if (pointAfterSelection) {
      const nextSiblingListRes = getListItemEntry(editor, {
        at: pointAfterSelection
      });
      if (nextSiblingListRes) {
        const { listItem } = nextSiblingListRes;
        const parentBlockEntity = editor.api.block({
          at: editor.selection.anchor
        });
        if (!editor.api.string(parentBlockEntity[1])) {
          editor.tf.removeNodes();
          return true;
        }
        if (hasListChild(editor, listItem[0])) {
          const sublistRes = getListItemEntry(editor, {
            at: [...listItem[1], 1, 0, 0]
          });
          moveListItemUp(editor, sublistRes);
        }
      }
    }
    return false;
  };
  var selectionIsInAListHandler = (editor, res, defaultDelete, unit = "character") => {
    const { listItem } = res;
    if (!hasListChild(editor, listItem[0])) {
      const liType = editor.getType(BaseListItemPlugin);
      const _nodes = editor.api.nodes({
        at: listItem[1],
        mode: "lowest",
        match: (node2, path2) => {
          var _a2;
          if (path2.length === 0) {
            return false;
          }
          const isNodeLi = node2.type === liType;
          const isSiblingOfNodeLi = ((_a2 = plate.NodeApi.get(editor, plate.PathApi.next(path2))) == null ? void 0 : _a2.type) === liType;
          return isNodeLi && isSiblingOfNodeLi;
        }
      });
      const liWithSiblings = Array.from(_nodes, (entry) => entry[1])[0];
      if (!liWithSiblings) {
        const pointAfterListItem2 = editor.api.after(listItem[1]);
        if (pointAfterListItem2) {
          const nextSiblingListRes = getListItemEntry(editor, {
            at: pointAfterListItem2
          });
          if (nextSiblingListRes) {
            const listRoot = getListRoot(editor, listItem[1]);
            moveListItemsToList(editor, {
              deleteFromList: true,
              fromList: nextSiblingListRes.list,
              toList: listRoot
            });
            return true;
          }
        }
        return false;
      }
      const siblingListItem = editor.api.node(
        plate.PathApi.next(liWithSiblings)
      );
      if (!siblingListItem)
        return false;
      const siblingList = editor.api.parent(siblingListItem[1]);
      if (siblingList && removeListItem(editor, {
        list: siblingList,
        listItem: siblingListItem,
        reverse: false
      })) {
        return true;
      }
      const pointAfterListItem = editor.api.after(editor.selection.focus);
      if (!pointAfterListItem || !isAcrossListItems(editor, {
        anchor: editor.selection.anchor,
        focus: pointAfterListItem
      })) {
        return false;
      }
      const licType = editor.getType(BaseListItemContentPlugin);
      const _licNodes = editor.api.nodes({
        at: pointAfterListItem.path,
        mode: "lowest",
        match: (node2) => node2.type === licType
      });
      const nextSelectableLic = [..._licNodes][0];
      if (nextSelectableLic[0].children.length < 2)
        return false;
      defaultDelete(unit);
      const leftoverListItem = editor.api.node(
        plate.PathApi.parent(nextSelectableLic[1])
      );
      if (leftoverListItem && leftoverListItem[0].children.length === 0) {
        editor.tf.removeNodes({ at: leftoverListItem[1] });
      }
      return true;
    }
    const nestedList = editor.api.node(
      plate.PathApi.next([...listItem[1], 0])
    );
    if (!nestedList)
      return false;
    const nestedListItem = Array.from(
      plate.NodeApi.children(editor, nestedList[1])
    )[0];
    if (removeFirstListItem(editor, {
      list: nestedList,
      listItem: nestedListItem
    })) {
      return true;
    }
    if (removeListItem(editor, {
      list: nestedList,
      listItem: nestedListItem
    })) {
      return true;
    }
    return false;
  };
  var withDeleteForwardList = ({
    editor,
    tf: { deleteForward: deleteForward2 }
  }) => ({
    transforms: {
      deleteForward(unit) {
        const deleteForwardList = () => {
          let skipDefaultDelete = false;
          if (!(editor == null ? void 0 : editor.selection)) {
            return skipDefaultDelete;
          }
          if (!editor.api.isAt({ end: true })) {
            return skipDefaultDelete;
          }
          editor.tf.withoutNormalizing(() => {
            const res = getListItemEntry(editor, {});
            if (!res) {
              skipDefaultDelete = selectionIsNotInAListHandler(editor);
              return;
            }
            skipDefaultDelete = selectionIsInAListHandler(
              editor,
              res,
              deleteForward2,
              unit
            );
          });
          return skipDefaultDelete;
        };
        if (deleteForwardList())
          return;
        deleteForward2(unit);
      }
    }
  });
  var getLiStart = (editor) => {
    const start2 = editor.api.start(editor.selection);
    return editor.api.above({
      at: start2,
      match: { type: editor.getType(BaseListItemPlugin) }
    });
  };
  var withDeleteFragmentList = ({
    editor,
    tf: { deleteFragment: deleteFragment2 }
  }) => ({
    transforms: {
      deleteFragment(direction2) {
        const deleteFragmentList = () => {
          let deleted = false;
          editor.tf.withoutNormalizing(() => {
            if (!isAcrossListItems(editor))
              return;
            const end2 = editor.api.end(editor.selection);
            const liEnd = editor.api.above({
              at: end2,
              match: { type: editor.getType(BaseListItemPlugin) }
            });
            const liEndCanBeDeleted = liEnd && !hasListChild(editor, liEnd[0]);
            const liEndPathRef = liEndCanBeDeleted ? editor.api.pathRef(liEnd[1]) : void 0;
            if (!getLiStart(editor) || !liEnd) {
              deleted = false;
              return;
            }
            plate.deleteMerge(editor);
            const liStart = getLiStart(editor);
            if (liEndPathRef) {
              const liEndPath = liEndPathRef.unref();
              const listStart = liStart && editor.api.parent(liStart[1]);
              const deletePath = getHighestEmptyList(editor, {
                diffListPath: listStart == null ? void 0 : listStart[1],
                liPath: liEndPath
              });
              if (deletePath) {
                editor.tf.removeNodes({ at: deletePath });
              }
              deleted = true;
            }
          });
          return deleted;
        };
        if (deleteFragmentList())
          return;
        deleteFragment2(direction2);
      }
    }
  });
  var withInsertFragmentList = ({
    editor,
    tf: { insertFragment: insertFragment2 }
  }) => {
    const listItemType = editor.getType(BaseListItemPlugin);
    const listItemContentType = editor.getType(BaseListItemContentPlugin);
    const getFirstAncestorOfType = (root2, entry, type) => {
      let ancestor = plate.PathApi.parent(entry[1]);
      while (plate.NodeApi.get(root2, ancestor).type !== type) {
        ancestor = plate.PathApi.parent(ancestor);
      }
      return [plate.NodeApi.get(root2, ancestor), ancestor];
    };
    const findListItemsWithContent = (first2) => {
      let prev = null;
      let node2 = first2;
      while (isListRoot(editor, node2) || node2.type === listItemType && node2.children[0].type !== listItemContentType) {
        prev = node2;
        [node2] = node2.children;
      }
      return prev ? prev.children : [node2];
    };
    const trimList = (listRoot) => {
      if (!isListRoot(editor, listRoot)) {
        return [listRoot];
      }
      const _texts = plate.NodeApi.texts(listRoot);
      const textEntries = Array.from(_texts);
      const commonAncestorEntry = textEntries.reduce(
        (commonAncestor, textEntry) => plate.PathApi.isAncestor(commonAncestor[1], textEntry[1]) ? commonAncestor : plate.NodeApi.common(listRoot, textEntry[1], commonAncestor[1]),
        // any list item would do, we grab the first one
        getFirstAncestorOfType(listRoot, textEntries[0], listItemType)
      );
      const [first2, ...rest] = isListRoot(
        editor,
        commonAncestorEntry[0]
      ) ? commonAncestorEntry[0].children : [commonAncestorEntry[0]];
      return [...findListItemsWithContent(first2), ...rest];
    };
    const wrapNodeIntoListItem = (node2) => {
      return node2.type === listItemType ? node2 : {
        children: [node2],
        type: listItemType
      };
    };
    const isSingleLic = (fragment2) => {
      const isFragmentOnlyListRoot = fragment2.length === 1 && isListRoot(editor, fragment2[0]);
      return isFragmentOnlyListRoot && [...plate.NodeApi.nodes({ children: fragment2 })].filter(
        (entry) => plate.ElementApi.isElement(entry[0])
      ).filter(([node2]) => node2.type === listItemContentType).length === 1;
    };
    const getTextAndListItemNodes = (fragment2, liEntry, licEntry) => {
      const [, liPath] = liEntry;
      const [licNode, licPath] = licEntry;
      const isEmptyNode = !plate.NodeApi.string(licNode);
      const [first2, ...rest] = fragment2.flatMap(trimList).map(wrapNodeIntoListItem);
      let textNode;
      let listItemNodes;
      if (isListRoot(editor, fragment2[0])) {
        if (isSingleLic(fragment2)) {
          textNode = first2;
          listItemNodes = rest;
        } else if (isEmptyNode) {
          const li = plate.NodeApi.get(editor, liPath);
          const [, ...currentSublists] = li.children;
          const [newLic, ...newSublists] = first2.children;
          editor.tf.insertNodes(newLic, {
            at: plate.PathApi.next(licPath),
            select: true
          });
          editor.tf.removeNodes({
            at: licPath
          });
          if (newSublists == null ? void 0 : newSublists.length) {
            if (currentSublists == null ? void 0 : currentSublists.length) {
              const path2 = [...liPath, 1, 0];
              editor.tf.insertNodes(newSublists[0].children, {
                at: path2,
                select: true
              });
            } else {
              editor.tf.insertNodes(newSublists, {
                at: plate.PathApi.next(licPath),
                select: true
              });
            }
          }
          textNode = { text: "" };
          listItemNodes = rest;
        } else {
          textNode = { text: "" };
          listItemNodes = [first2, ...rest];
        }
      } else {
        textNode = first2;
        listItemNodes = rest;
      }
      return { listItemNodes, textNode };
    };
    return {
      transforms: {
        insertFragment(fragment2) {
          let liEntry = editor.api.node({
            match: { type: listItemType },
            mode: "lowest"
          });
          if (!liEntry) {
            return insertFragment2(
              isListRoot(editor, fragment2[0]) ? [{ text: "" }, ...fragment2] : fragment2
            );
          }
          insertFragment2([{ text: "" }]);
          liEntry = editor.api.node({
            match: { type: listItemType },
            mode: "lowest"
          });
          if (!liEntry) {
            return insertFragment2(
              isListRoot(editor, fragment2[0]) ? [{ text: "" }, ...fragment2] : fragment2
            );
          }
          const licEntry = editor.api.node({
            match: { type: listItemContentType },
            mode: "lowest"
          });
          if (!licEntry) {
            return insertFragment2(
              isListRoot(editor, fragment2[0]) ? [{ text: "" }, ...fragment2] : fragment2
            );
          }
          const { listItemNodes, textNode } = getTextAndListItemNodes(
            fragment2,
            liEntry,
            licEntry
          );
          insertFragment2([textNode]);
          const [, liPath] = liEntry;
          return editor.tf.insertNodes(listItemNodes, {
            at: plate.PathApi.next(liPath),
            select: true
          });
        }
      }
    };
  };
  var getDeepInlineChildren = (editor, {
    children
  }) => {
    const inlineChildren = [];
    for (const child of children) {
      if (editor.api.isBlock(child[0])) {
        inlineChildren.push(
          ...getDeepInlineChildren(editor, {
            children: Array.from(plate.NodeApi.children(editor, child[1]))
          })
        );
      } else {
        inlineChildren.push(child);
      }
    }
    return inlineChildren;
  };
  var normalizeListItem = (editor, {
    listItem,
    validLiChildrenTypes = []
  }) => {
    let changed = false;
    const allValidLiChildrenTypes = /* @__PURE__ */ new Set([
      editor.getType(BaseBulletedListPlugin),
      editor.getType(BaseListItemContentPlugin),
      editor.getType(BaseNumberedListPlugin),
      ...validLiChildrenTypes
    ]);
    const [, liPath] = listItem;
    const liChildren = Array.from(
      plate.NodeApi.children(editor, listItem[1])
    );
    const invalidLiChildrenPathRefs = liChildren.filter(([child]) => !allValidLiChildrenTypes.has(child.type)).map(([, childPath]) => editor.api.pathRef(childPath));
    const firstLiChild = liChildren[0];
    const [firstLiChildNode, firstLiChildPath] = firstLiChild ?? [];
    if (!firstLiChild || !editor.api.isBlock(firstLiChildNode)) {
      editor.tf.insertNodes(
        editor.api.create.block({
          type: editor.getType(BaseListItemContentPlugin)
        }),
        {
          at: liPath.concat([0])
        }
      );
      return true;
    }
    if (editor.api.isBlock(firstLiChildNode) && !plate.match(firstLiChildNode, [], {
      type: editor.getType(BaseListItemContentPlugin)
    })) {
      if (plate.match(firstLiChildNode, [], {
        type: getListTypes(editor)
      })) {
        const parent2 = editor.api.parent(listItem[1]);
        const sublist = firstLiChild;
        const children = Array.from(
          plate.NodeApi.children(editor, firstLiChild[1])
        ).reverse();
        children.forEach((c2) => {
          moveListItemUp(editor, {
            list: sublist,
            listItem: c2
          });
        });
        editor.tf.removeNodes({ at: [...parent2[1], 0] });
        return true;
      }
      if (validLiChildrenTypes.includes(firstLiChildNode.type)) {
        return true;
      }
      editor.tf.setNodes(
        {
          type: editor.getType(BaseListItemContentPlugin)
        },
        {
          at: firstLiChildPath
        }
      );
      changed = true;
    }
    const licChildren = Array.from(plate.NodeApi.children(editor, firstLiChild[1]));
    if (licChildren.length > 0) {
      const blockPathRefs = [];
      const inlineChildren = [];
      for (const licChild of licChildren) {
        if (!editor.api.isBlock(licChild[0])) {
          break;
        }
        blockPathRefs.push(editor.api.pathRef(licChild[1]));
        inlineChildren.push(
          ...getDeepInlineChildren(editor, {
            children: Array.from(plate.NodeApi.children(editor, licChild[1]))
          })
        );
      }
      const to2 = plate.PathApi.next(licChildren.at(-1)[1]);
      inlineChildren.reverse().forEach(([, path2]) => {
        editor.tf.moveNodes({
          at: path2,
          to: to2
        });
      });
      blockPathRefs.forEach((pathRef2) => {
        const path2 = pathRef2.unref();
        path2 && editor.tf.removeNodes({
          at: path2
        });
      });
      if (blockPathRefs.length > 0) {
        changed = true;
      }
    }
    if (changed)
      return true;
    invalidLiChildrenPathRefs.reverse().forEach((ref) => {
      const path2 = ref.unref();
      path2 && editor.tf.moveNodes({
        at: path2,
        to: firstLiChildPath.concat([0])
      });
    });
    return invalidLiChildrenPathRefs.length > 0;
  };
  var normalizeNestedList = (editor, { nestedListItem }) => {
    const [, path2] = nestedListItem;
    const parentNode = editor.api.parent(path2);
    const hasParentList = parentNode && plate.match(parentNode[0], [], { type: getListTypes(editor) });
    if (!hasParentList) {
      return false;
    }
    const previousListItemPath = plate.PathApi.previous(path2);
    if (!previousListItemPath) {
      return false;
    }
    const previousSiblingItem = editor.api.node(previousListItemPath);
    if (previousSiblingItem) {
      const [, previousPath] = previousSiblingItem;
      const newPath = previousPath.concat([1]);
      editor.tf.moveNodes({
        at: path2,
        to: newPath
      });
      return true;
    }
  };
  var withNormalizeList = ({
    editor,
    getOptions: getOptions2,
    tf: { normalizeNode: normalizeNode2 }
  }) => ({
    transforms: {
      normalizeNode([node2, path2]) {
        var _a2;
        const liType = editor.getType(BaseListItemPlugin);
        const licType = editor.getType(BaseListItemContentPlugin);
        const defaultType = editor.getType(plate.BaseParagraphPlugin);
        if (!plate.ElementApi.isElement(node2)) {
          return normalizeNode2([node2, path2]);
        }
        if (isListRoot(editor, node2)) {
          const nonLiChild = Array.from(plate.NodeApi.children(editor, path2)).find(
            ([child]) => child.type !== liType
          );
          if (nonLiChild) {
            return editor.tf.wrapNodes(
              { children: [], type: liType },
              { at: nonLiChild[1] }
            );
          }
        }
        if (plate.match(node2, [], { type: getListTypes(editor) })) {
          if (node2.children.length === 0 || !node2.children.some((item) => item.type === liType)) {
            return editor.tf.removeNodes({ at: path2 });
          }
          const nextPath = plate.PathApi.next(path2);
          const nextNode = plate.NodeApi.get(editor, nextPath);
          if ((nextNode == null ? void 0 : nextNode.type) === node2.type) {
            moveListItemsToList(editor, {
              deleteFromList: true,
              fromList: [nextNode, nextPath],
              toList: [node2, path2]
            });
          }
          const prevPath = plate.PathApi.previous(path2);
          const prevNode = plate.NodeApi.get(editor, prevPath);
          if ((prevNode == null ? void 0 : prevNode.type) === node2.type) {
            editor.tf.normalizeNode([prevNode, prevPath]);
            return;
          }
          if (normalizeNestedList(editor, { nestedListItem: [node2, path2] })) {
            return;
          }
        }
        if (node2.type === editor.getType(BaseListItemPlugin) && normalizeListItem(editor, {
          listItem: [node2, path2],
          validLiChildrenTypes: getOptions2().validLiChildrenTypes
        })) {
          return;
        }
        if (node2.type === licType && licType !== defaultType && ((_a2 = editor.api.parent(path2)) == null ? void 0 : _a2[0].type) !== liType) {
          editor.tf.setNodes({ type: defaultType }, { at: path2 });
          return;
        }
        normalizeNode2([node2, path2]);
      }
    }
  });
  var onKeyDownList = ({
    editor,
    event,
    getOptions: getOptions2
  }) => {
    if (event.defaultPrevented)
      return;
    const isTab = plate.Hotkeys.isTab(editor, event);
    const isUntab = plate.Hotkeys.isUntab(editor, event);
    let workRange = editor.selection;
    if (editor.selection && (isTab || isUntab)) {
      const { selection } = editor;
      if (!editor.api.isCollapsed()) {
        const { anchor, focus: focus2 } = plate.RangeApi.isBackward(selection) ? { anchor: { ...selection.focus }, focus: { ...selection.anchor } } : { anchor: { ...selection.anchor }, focus: { ...selection.focus } };
        const unhangRange2 = editor.api.unhangRange({ anchor, focus: focus2 });
        if (unhangRange2) {
          workRange = unhangRange2;
          editor.tf.select(unhangRange2);
        }
      }
      const listSelected = editor.api.some({
        match: { type: editor.getType(BaseListItemPlugin) }
      });
      if (workRange && listSelected) {
        event.preventDefault();
        moveListItems(editor, {
          at: workRange,
          enableResetOnShiftTab: getOptions2().enableResetOnShiftTab,
          increase: isTab
        });
        return true;
      }
    }
  };
  var withDeleteBackwardList = ({
    editor,
    tf: { deleteBackward: deleteBackward2 }
  }) => ({
    transforms: {
      deleteBackward(unit) {
        const deleteBackwardList = () => {
          const res = getListItemEntry(editor, {});
          let moved = false;
          if (res) {
            const { list, listItem } = res;
            if (editor.api.isAt({
              start: true,
              match: (node2) => node2.type === editor.getType(BaseListItemPlugin)
            })) {
              editor.tf.withoutNormalizing(() => {
                moved = removeFirstListItem(editor, { list, listItem });
                if (moved)
                  return true;
                moved = removeListItem(editor, { list, listItem });
                if (moved)
                  return true;
                if (!plate.PathApi.hasPrevious(listItem[1]) && !isListNested(editor, list[1])) {
                  onKeyDownResetNode({
                    ...getEditorPlugin2(
                      editor,
                      plateResetNode.BaseResetNodePlugin.configure({
                        options: {
                          rules: [
                            {
                              defaultType: editor.getType(plate.BaseParagraphPlugin),
                              hotkey: "backspace",
                              types: [editor.getType(BaseListItemPlugin)],
                              predicate: () => editor.api.isAt({ start: true }),
                              onReset: (e3) => unwrapList(e3)
                            }
                          ]
                        }
                      })
                    ),
                    event: SIMULATE_BACKSPACE
                  });
                  moved = true;
                  return;
                }
                const pointBeforeListItem = editor.api.before(
                  editor.selection.focus
                );
                let currentLic;
                let hasMultipleChildren = false;
                if (pointBeforeListItem && isAcrossListItems(editor, {
                  anchor: editor.selection.anchor,
                  focus: pointBeforeListItem
                })) {
                  const licType = editor.getType(BaseListItemContentPlugin);
                  const _licNodes = editor.api.nodes({
                    at: listItem[1],
                    mode: "lowest",
                    match: (node2) => node2.type === licType
                  });
                  currentLic = [..._licNodes][0];
                  hasMultipleChildren = currentLic[0].children.length > 1;
                }
                plate.deleteMerge(editor, {
                  reverse: true,
                  unit
                });
                moved = true;
                if (!currentLic || !hasMultipleChildren)
                  return;
                const leftoverListItem = editor.api.node(
                  plate.PathApi.parent(currentLic[1])
                );
                if (leftoverListItem && leftoverListItem[0].children.length === 0) {
                  editor.tf.removeNodes({ at: leftoverListItem[1] });
                }
              });
            }
          }
          return moved;
        };
        if (deleteBackwardList())
          return;
        deleteBackward2(unit);
      }
    }
  });
  var withInsertBreakList = ({
    editor,
    tf: { insertBreak: insertBreak2 }
  }) => ({
    transforms: {
      insertBreak() {
        const insertBreakList = () => {
          if (!editor.selection)
            return;
          const res = getListItemEntry(editor, {});
          let moved;
          if (res) {
            const { list, listItem } = res;
            if (editor.api.isEmpty(editor.selection, { block: true })) {
              moved = moveListItemUp(editor, {
                list,
                listItem
              });
              if (moved)
                return true;
            }
          }
          const didReset = onKeyDownResetNode({
            ...getEditorPlugin2(
              editor,
              plate.createTSlatePlugin({
                options: {
                  rules: [
                    {
                      defaultType: editor.getType(plate.BaseParagraphPlugin),
                      types: [editor.getType(BaseListItemPlugin)],
                      predicate: () => !moved && editor.api.isEmpty(editor.selection, { block: true }),
                      onReset: (_editor) => unwrapList(_editor)
                    }
                  ]
                }
              })
            ),
            event: SIMULATE_BACKSPACE
          });
          if (didReset)
            return true;
          if (!moved) {
            const inserted = insertListItem(editor);
            if (inserted)
              return true;
          }
        };
        if (insertBreakList())
          return;
        insertBreak2();
      }
    }
  });
  var withList = (ctx) => ({
    transforms: {
      ...withInsertBreakList(ctx).transforms,
      ...withDeleteBackwardList(ctx).transforms,
      ...withDeleteForwardList(ctx).transforms,
      ...withDeleteFragmentList(ctx).transforms,
      ...withInsertFragmentList(ctx).transforms,
      ...withNormalizeList(ctx).transforms
    }
  });
  var BulletedListPlugin = toPlatePlugin(BaseBulletedListPlugin, {
    dependencies: ["list"],
    handlers: {
      onKeyDown: onKeyDownList
    }
  });
  var NumberedListPlugin = toPlatePlugin(BaseNumberedListPlugin, {
    dependencies: ["list"],
    handlers: {
      onKeyDown: onKeyDownList
    }
  });
  var ListItemContentPlugin = toPlatePlugin(BaseListItemContentPlugin);
  var ListItemPlugin = toPlatePlugin(BaseListItemPlugin);
  var ListPlugin = toPlatePlugin(BaseListPlugin, {
    plugins: [
      BulletedListPlugin,
      NumberedListPlugin,
      ListItemPlugin,
      ListItemContentPlugin
    ]
  }).overrideEditor(withList).extend(({ editor }) => ({
    shortcuts: {
      toggleBulletedList: {
        keys: [[Key.Mod, Key.Alt, "5"]],
        preventDefault: true,
        handler: () => {
          editor.getTransforms(ListPlugin).toggle.bulletedList();
        }
      },
      toggleNumberedList: {
        keys: [[Key.Mod, Key.Alt, "6"]],
        preventDefault: true,
        handler: () => {
          editor.getTransforms(ListPlugin).toggle.numberedList();
        }
      }
    }
  }));
  var TodoListPlugin = toTPlatePlugin(
    BaseTodoListPlugin,
    ({ editor, type }) => ({
      shortcuts: {
        toggleTodoList: {
          keys: [
            [Key.Mod, Key.Alt, "4"],
            [Key.Mod, Key.Shift, "4"]
          ],
          preventDefault: true,
          handler: () => {
            editor.tf.toggleBlock(type);
          }
        }
      }
    })
  );
  var useListToolbarButtonState = ({
    nodeType = BaseBulletedListPlugin.key
  } = {}) => {
    const pressed = useEditorSelector(
      (editor) => !!editor.selection && editor.api.some({ match: { type: editor.getType({ key: nodeType }) } }),
      [nodeType]
    );
    return {
      nodeType,
      pressed
    };
  };
  var useListToolbarButton = (state) => {
    const editor = useEditorRef();
    const tf = editor.getTransforms(ListPlugin);
    return {
      props: {
        pressed: state.pressed,
        onClick: () => {
          tf.toggle.list({ type: state.nodeType });
        },
        onMouseDown: (e3) => {
          e3.preventDefault();
        }
      }
    };
  };
  var BaseSlashInputPlugin = plate.createSlatePlugin({
    key: "slash_input",
    node: { isElement: true, isInline: true, isVoid: true }
  });
  var BaseSlashPlugin = plate.createTSlatePlugin({
    key: "slash_command",
    options: {
      trigger: "/",
      triggerPreviousCharPattern: /^\s?$/,
      createComboboxInput: () => ({
        children: [{ text: "" }],
        type: BaseSlashInputPlugin.key
      })
    },
    plugins: [BaseSlashInputPlugin]
  }).overrideEditor(plateCombobox.withTriggerCombobox);
  var SlashInputPlugin = toPlatePlugin(BaseSlashInputPlugin);
  var SlashPlugin = toPlatePlugin(BaseSlashPlugin);
  var baseClone = _baseClone;
  var CLONE_DEEP_FLAG = 1, CLONE_SYMBOLS_FLAG = 4;
  function cloneDeep(value) {
    return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
  }
  var cloneDeep_1 = cloneDeep;
  const cloneDeep6 = /* @__PURE__ */ getDefaultExportFromCjs(cloneDeep_1);
  var getEmptyCellNode = (editor, { children, header, row } = {}) => {
    header = header ?? (row ? row.children.every(
      (c2) => c2.type === editor.getType(BaseTableCellHeaderPlugin)
    ) : false);
    return {
      children: children ?? [editor.api.create.block()],
      type: header ? editor.getType(BaseTableCellHeaderPlugin) : editor.getType(BaseTableCellPlugin)
    };
  };
  var getEmptyRowNode = (editor, { colCount = 1, ...cellOptions } = {}) => {
    const { api } = editor.getPlugin({ key: "table" });
    return {
      children: Array.from({ length: colCount }).fill(colCount).map(() => api.create.tableCell(cellOptions)),
      type: editor.getType(BaseTableRowPlugin)
    };
  };
  var getEmptyTableNode = (editor, {
    colCount,
    header,
    rowCount = 0,
    ...cellOptions
  } = {}) => {
    const { api } = editor.getPlugin({ key: "table" });
    const rows = Array.from({ length: rowCount }).fill(rowCount).map(
      (_, index) => api.create.tableRow({
        colCount,
        ...cellOptions,
        header: header && index === 0
      })
    );
    return {
      children: rows,
      type: editor.getType(BaseTablePlugin)
    };
  };
  var KEY_SHIFT_EDGES = {
    "shift+down": "bottom",
    "shift+left": "left",
    "shift+right": "right",
    "shift+up": "top"
  };
  function computeCellIndices(editor, {
    all,
    cellNode,
    tableNode
  }) {
    var _a2, _b;
    const { api, getOptions: getOptions2, setOption } = plate.getEditorPlugin(editor, {
      key: "table"
    });
    if (!tableNode) {
      if (!cellNode)
        return;
      tableNode = (_a2 = editor.api.above({
        at: cellNode,
        match: { type: editor.getType(BaseTablePlugin) }
      })) == null ? void 0 : _a2[0];
      if (!tableNode)
        return;
    }
    const { _cellIndices: prevIndices } = getOptions2();
    const cellIndices = { ...prevIndices };
    let hasIndicesChanged = false;
    const skipCells = [];
    let targetIndices;
    for (let rowIndex = 0; rowIndex < tableNode.children.length; rowIndex++) {
      const row = tableNode.children[rowIndex];
      let colIndex = 0;
      for (const cellElement of row.children) {
        while ((_b = skipCells[rowIndex]) == null ? void 0 : _b[colIndex]) {
          colIndex++;
        }
        const currentIndices = { col: colIndex, row: rowIndex };
        const prevIndicesForCell = prevIndices[cellElement.id];
        if ((prevIndicesForCell == null ? void 0 : prevIndicesForCell.col) !== currentIndices.col || (prevIndicesForCell == null ? void 0 : prevIndicesForCell.row) !== currentIndices.row) {
          hasIndicesChanged = true;
        }
        cellIndices[cellElement.id] = currentIndices;
        if (cellElement.id === (cellNode == null ? void 0 : cellNode.id)) {
          targetIndices = currentIndices;
          if (!all)
            break;
        }
        const colSpan = api.table.getColSpan(cellElement);
        const rowSpan = api.table.getRowSpan(cellElement);
        for (let r2 = 0; r2 < rowSpan; r2++) {
          skipCells[rowIndex + r2] = skipCells[rowIndex + r2] || [];
          for (let c2 = 0; c2 < colSpan; c2++) {
            skipCells[rowIndex + r2][colIndex + c2] = true;
          }
        }
        colIndex += colSpan;
      }
    }
    if (hasIndicesChanged) {
      setOption("_cellIndices", cellIndices);
    }
    return targetIndices;
  }
  var getCellIndices = (editor, element) => {
    const { getOption } = plate.getEditorPlugin(editor, {
      key: "table"
    });
    let indices = getOption("cellIndices", element.id);
    if (!indices) {
      indices = computeCellIndices(editor, {
        cellNode: element
      });
      if (!indices) {
        editor.api.debug.warn(
          "No cell indices found for element. Make sure all table cells have an id.",
          "TABLE_CELL_INDICES"
        );
      }
    }
    return indices ?? { col: 0, row: 0 };
  };
  var getCellRowIndexByPath = (cellPath) => {
    const index = cellPath.at(-2);
    if (index === void 0)
      throw new Error(`can not get rowIndex of path ${cellPath}`);
    return index;
  };
  var getCellTypes = (editor) => plate.getPluginTypes(editor, [BaseTableCellPlugin, BaseTableCellHeaderPlugin]);
  var normalizeInitialValueTable = ({
    editor,
    type
  }) => {
    const tables = editor.api.nodes({
      at: [],
      match: { type }
    });
    for (const [table] of tables) {
      computeCellIndices(editor, {
        tableNode: table
      });
    }
  };
  var getColSpan = (cellElem) => {
    var _a2;
    return cellElem.colSpan || Number((_a2 = cellElem.attributes) == null ? void 0 : _a2.colspan) || 1;
  };
  var getRowSpan = (cellElem) => {
    var _a2;
    return cellElem.rowSpan || Number((_a2 = cellElem.attributes) == null ? void 0 : _a2.rowspan) || 1;
  };
  var getCellIndicesWithSpans = ({ col, row }, endCell) => {
    return {
      col: col + getColSpan(endCell) - 1,
      row: row + getRowSpan(endCell) - 1
    };
  };
  var findCellByIndexes = (editor, table, searchRowIndex, searchColIndex) => {
    const allCells = table.children.flatMap(
      (current2) => current2.children
    );
    const foundCell = allCells.find((cellNode) => {
      const indices = getCellIndices(editor, cellNode);
      const { col: _startColIndex, row: _startRowIndex } = indices;
      const { col: _endColIndex, row: _endRowIndex } = getCellIndicesWithSpans(
        indices,
        cellNode
      );
      if (searchColIndex >= _startColIndex && searchColIndex <= _endColIndex && searchRowIndex >= _startRowIndex && searchRowIndex <= _endRowIndex) {
        return true;
      }
      return false;
    });
    return foundCell;
  };
  var getTableMergeGridByRange = (editor, { at: at2, format: format2 }) => {
    var _a2;
    const { api, type } = plate.getEditorPlugin(editor, BaseTablePlugin);
    const startCellEntry = editor.api.node({
      at: at2.anchor.path,
      match: { type: getCellTypes(editor) }
    });
    const endCellEntry = editor.api.node({
      at: at2.focus.path,
      match: { type: getCellTypes(editor) }
    });
    const startCell = startCellEntry[0];
    const endCell = endCellEntry[0];
    const startCellPath = at2.anchor.path;
    const tablePath = startCellPath.slice(0, -2);
    const tableEntry = editor.api.node({
      at: tablePath,
      match: { type }
    });
    const realTable = tableEntry[0];
    const { col: _startColIndex, row: _startRowIndex } = getCellIndicesWithSpans(
      getCellIndices(editor, startCell),
      startCell
    );
    const { col: _endColIndex, row: _endRowIndex } = getCellIndicesWithSpans(
      getCellIndices(editor, endCell),
      endCell
    );
    let startRowIndex = Math.min(_startRowIndex, _endRowIndex);
    let endRowIndex = Math.max(_startRowIndex, _endRowIndex);
    let startColIndex = Math.min(_startColIndex, _endColIndex);
    let endColIndex = Math.max(_startColIndex, _endColIndex);
    const relativeRowIndex = endRowIndex - startRowIndex;
    const relativeColIndex = endColIndex - startColIndex;
    let table = api.create.table({
      children: [],
      colCount: relativeColIndex + 1,
      rowCount: relativeRowIndex + 1
    });
    let cellEntries = [];
    let cellsSet = /* @__PURE__ */ new WeakSet();
    let rowIndex = startRowIndex;
    let colIndex = startColIndex;
    while (true) {
      const cell = findCellByIndexes(editor, realTable, rowIndex, colIndex);
      if (!cell) {
        break;
      }
      const indicies = getCellIndices(editor, cell);
      const { col: cellColWithSpan, row: cellRowWithSpan } = getCellIndicesWithSpans(indicies, cell);
      const { col: cellCol, row: cellRow } = indicies;
      const hasOverflowTop = cellRow < startRowIndex;
      const hasOverflowBottom = cellRowWithSpan > endRowIndex;
      const hasOverflowLeft = cellCol < startColIndex;
      const hasOverflowRight = cellColWithSpan > endColIndex;
      if (hasOverflowTop || hasOverflowBottom || hasOverflowLeft || hasOverflowRight) {
        cellsSet = /* @__PURE__ */ new WeakSet();
        cellEntries = [];
        startRowIndex = Math.min(startRowIndex, cellRow);
        endRowIndex = Math.max(endRowIndex, cellRowWithSpan);
        startColIndex = Math.min(startColIndex, cellCol);
        endColIndex = Math.max(endColIndex, cellColWithSpan);
        rowIndex = startRowIndex;
        colIndex = startColIndex;
        const newRelativeRowIndex = endRowIndex - startRowIndex;
        const newRelativeColIndex = endColIndex - startColIndex;
        table = api.create.table({
          children: [],
          colCount: newRelativeColIndex + 1,
          rowCount: newRelativeRowIndex + 1
        });
        continue;
      }
      if (!cellsSet.has(cell)) {
        cellsSet.add(cell);
        const rows = table.children[rowIndex - startRowIndex].children;
        rows[colIndex - startColIndex] = cell;
        const cellPath = editor.api.findPath(cell);
        cellEntries.push([cell, cellPath]);
      }
      if (colIndex + 1 <= endColIndex) {
        colIndex = colIndex + 1;
      } else if (rowIndex + 1 <= endRowIndex) {
        colIndex = startColIndex;
        rowIndex = rowIndex + 1;
      } else {
        break;
      }
    }
    const formatType = format2 || "table";
    if (formatType === "cell") {
      return cellEntries;
    }
    (_a2 = table.children) == null ? void 0 : _a2.forEach((rowEl) => {
      var _a3;
      const rowElement = rowEl;
      const filteredChildren = (_a3 = rowElement.children) == null ? void 0 : _a3.filter((cellEl) => {
        const cellElement = cellEl;
        return api.table.getCellChildren(cellElement).length > 0;
      });
      rowElement.children = filteredChildren;
    });
    if (formatType === "table") {
      return [[table, tablePath]];
    }
    return {
      cellEntries,
      tableEntries: [[table, tablePath]]
    };
  };
  var getTableGridByRange = (editor, { at: at2, format: format2 = "table" }) => {
    const { api } = editor.getPlugin({ key: "table" });
    const { disableMerge } = editor.getOptions(BaseTablePlugin);
    if (!disableMerge) {
      return getTableMergeGridByRange(editor, { at: at2, format: format2 });
    }
    const startCellPath = at2.anchor.path;
    const endCellPath = at2.focus.path;
    const _startRowIndex = startCellPath.at(-2);
    const _endRowIndex = endCellPath.at(-2);
    const _startColIndex = startCellPath.at(-1);
    const _endColIndex = endCellPath.at(-1);
    const startRowIndex = Math.min(_startRowIndex, _endRowIndex);
    const endRowIndex = Math.max(_startRowIndex, _endRowIndex);
    const startColIndex = Math.min(_startColIndex, _endColIndex);
    const endColIndex = Math.max(_startColIndex, _endColIndex);
    const tablePath = startCellPath.slice(0, -2);
    const relativeRowIndex = endRowIndex - startRowIndex;
    const relativeColIndex = endColIndex - startColIndex;
    const table = api.create.table({
      children: [],
      colCount: relativeColIndex + 1,
      rowCount: relativeRowIndex + 1
    });
    let rowIndex = startRowIndex;
    let colIndex = startColIndex;
    const cellEntries = [];
    while (true) {
      const cellPath = tablePath.concat([rowIndex, colIndex]);
      const cell = plate.NodeApi.get(editor, cellPath);
      if (!cell)
        break;
      const rows = table.children[rowIndex - startRowIndex].children;
      rows[colIndex - startColIndex] = cell;
      cellEntries.push([cell, cellPath]);
      if (colIndex + 1 <= endColIndex) {
        colIndex += 1;
      } else if (rowIndex + 1 <= endRowIndex) {
        colIndex = startColIndex;
        rowIndex += 1;
      } else {
        break;
      }
    }
    if (format2 === "cell") {
      return cellEntries;
    }
    return [[table, tablePath]];
  };
  var getTableGridAbove = (editor, { format: format2 = "table", ...options } = {}) => {
    const { api } = editor.getPlugin({ key: "table" });
    const edges2 = editor.api.edgeBlocks({
      match: {
        type: getCellTypes(editor)
      },
      ...options
    });
    if (edges2) {
      const [start2, end2] = edges2;
      if (!plate.PathApi.equals(start2[1], end2[1])) {
        return getTableGridByRange(editor, {
          at: {
            anchor: {
              offset: 0,
              path: start2[1]
            },
            focus: {
              offset: 0,
              path: end2[1]
            }
          },
          format: format2
        });
      }
      if (format2 === "table") {
        const table = api.create.table({ rowCount: 1 });
        table.children[0].children = [start2[0]];
        return [[table, start2[1].slice(0, -2)]];
      }
      return [start2];
    }
    return [];
  };
  var moveSelectionFromCell = (editor, {
    at: at2,
    edge,
    fromOneCell,
    reverse
  } = {}) => {
    if (edge) {
      const cellEntries = getTableGridAbove(editor, { at: at2, format: "cell" });
      const minCell = fromOneCell ? 0 : 1;
      if (cellEntries.length > minCell) {
        const [, firstCellPath] = cellEntries[0];
        const [, lastCellPath] = cellEntries.at(-1);
        const anchorPath = [...firstCellPath];
        const focusPath = [...lastCellPath];
        switch (edge) {
          case "bottom": {
            focusPath[focusPath.length - 2] += 1;
            break;
          }
          case "left": {
            anchorPath[anchorPath.length - 1] -= 1;
            break;
          }
          case "right": {
            focusPath[focusPath.length - 1] += 1;
            break;
          }
          case "top": {
            anchorPath[anchorPath.length - 2] -= 1;
            break;
          }
        }
        if (plate.NodeApi.has(editor, anchorPath) && plate.NodeApi.has(editor, focusPath)) {
          editor.tf.select({
            anchor: editor.api.start(anchorPath),
            focus: editor.api.start(focusPath)
          });
        }
        return true;
      }
      return;
    }
    const cellEntry = editor.api.block({
      at: at2,
      match: { type: getCellTypes(editor) }
    });
    if (cellEntry) {
      const [, cellPath] = cellEntry;
      const nextCellPath = [...cellPath];
      const offset = reverse ? -1 : 1;
      nextCellPath[nextCellPath.length - 2] += offset;
      if (plate.NodeApi.has(editor, nextCellPath)) {
        editor.tf.select(editor.api.start(nextCellPath));
      } else {
        const tablePath = cellPath.slice(0, -2);
        if (reverse) {
          editor.tf.withoutNormalizing(() => {
            editor.tf.select(editor.api.start(tablePath));
            editor.tf.move({ reverse: true });
          });
        } else {
          editor.tf.withoutNormalizing(() => {
            editor.tf.select(editor.api.end(tablePath));
            editor.tf.move();
          });
        }
      }
      return true;
    }
  };
  var overrideSelectionFromCell = (editor, newSelection) => {
    var _a2;
    let hotkey;
    if (!editor.currentKeyboardEvent || !["up", "down", "shift+up", "shift+right", "shift+down", "shift+left"].some(
      (key) => {
        const valid = plate.isHotkey(key, editor.currentKeyboardEvent);
        if (valid)
          hotkey = key;
        return valid;
      }
    ) || !((_a2 = editor.selection) == null ? void 0 : _a2.focus) || !(newSelection == null ? void 0 : newSelection.focus) || !editor.api.isAt({
      at: {
        anchor: editor.selection.focus,
        focus: newSelection.focus
      },
      blocks: true,
      match: { type: getCellTypes(editor) }
    })) {
      return;
    }
    if (!hotkey)
      return;
    const edge = KEY_SHIFT_EDGES[hotkey];
    if (edge && !editor.api.isAt({ block: true, match: { type: getCellTypes(editor) } })) {
      return;
    }
    const prevSelection = editor.selection;
    const reverse = ["shift+up", "up"].includes(hotkey);
    setTimeout(() => {
      moveSelectionFromCell(editor, {
        at: prevSelection,
        edge,
        fromOneCell: true,
        reverse
      });
    }, 0);
  };
  var withApplyTable = ({
    editor,
    getOptions: getOptions2,
    tf: { apply: apply2 },
    type: tableType
  }) => ({
    transforms: {
      apply(op) {
        var _a2, _b;
        if (op.type === "set_selection" && op.newProperties) {
          const newSelection = {
            ...editor.selection,
            ...op.newProperties
          };
          if (plate.RangeApi.isRange(newSelection) && editor.api.isAt({
            at: newSelection,
            blocks: true,
            match: (n2) => n2.type === tableType
          })) {
            const anchorEntry = editor.api.block({
              at: newSelection.anchor,
              match: (n2) => n2.type === tableType
            });
            if (anchorEntry) {
              const [, anchorPath] = anchorEntry;
              const isBackward = plate.RangeApi.isBackward(newSelection);
              if (isBackward) {
                op.newProperties.focus = editor.api.start(anchorPath);
              } else {
                const pointBefore = editor.api.before(anchorPath);
                if (pointBefore) {
                  op.newProperties.focus = editor.api.end(anchorPath);
                }
              }
            } else {
              const focusEntry = editor.api.block({
                at: newSelection.focus,
                match: (n2) => n2.type === tableType
              });
              if (focusEntry) {
                const [, focusPath] = focusEntry;
                const isBackward = plate.RangeApi.isBackward(newSelection);
                if (isBackward) {
                  const startPoint = editor.api.start(focusPath);
                  const pointBefore = editor.api.before(startPoint);
                  op.newProperties.focus = pointBefore ?? startPoint;
                } else {
                  op.newProperties.focus = editor.api.end(focusPath);
                }
              }
            }
          }
          overrideSelectionFromCell(editor, newSelection);
        }
        const opType = op.type === "remove_node" ? op.node.type : op.type === "move_node" ? (_a2 = editor.api.node(op.path)) == null ? void 0 : _a2[0].type : void 0;
        const isTableOperation = (op.type === "remove_node" || op.type === "move_node") && opType && [
          editor.getType(BaseTableRowPlugin),
          tableType,
          ...getCellTypes(editor)
        ].includes(opType);
        if (isTableOperation && op.type === "remove_node") {
          const cells = [
            ...editor.api.nodes({
              at: op.path,
              match: { type: getCellTypes(editor) }
            })
          ];
          const cellIndices = getOptions2()._cellIndices;
          cells.forEach(([cell]) => {
            delete cellIndices[cell.id];
          });
        }
        apply2(op);
        let table;
        if (isTableOperation && // There is no new indices when moving/removing a table
        opType !== tableType) {
          table = (_b = editor.api.node({
            at: op.type === "move_node" ? op.newPath : op.path,
            match: { type: tableType }
          })) == null ? void 0 : _b[0];
          if (table) {
            computeCellIndices(editor, {
              tableNode: table
            });
          }
        }
      }
    }
  });
  var preventDeleteTableCell = (editor, {
    reverse,
    unit
  }) => {
    const { selection } = editor;
    const getNextPoint = reverse ? editor.api.after : editor.api.before;
    if (editor.api.isCollapsed()) {
      const cellEntry = editor.api.block({
        match: { type: getCellTypes(editor) }
      });
      if (cellEntry) {
        const [, cellPath] = cellEntry;
        const start2 = reverse ? editor.api.end(cellPath) : editor.api.start(cellPath);
        if (selection && plate.PointApi.equals(selection.anchor, start2)) {
          return true;
        }
      } else {
        const nextPoint = getNextPoint(selection, { unit });
        const nextCellEntry = editor.api.block({
          at: nextPoint,
          match: { type: getCellTypes(editor) }
        });
        if (nextCellEntry) {
          editor.tf.move({ reverse: !reverse });
          return true;
        }
      }
    }
  };
  var withDeleteTable = ({
    editor,
    tf: { deleteBackward: deleteBackward2, deleteForward: deleteForward2, deleteFragment: deleteFragment2 },
    type
  }) => ({
    transforms: {
      deleteBackward(unit) {
        if (preventDeleteTableCell(editor, { unit }))
          return;
        deleteBackward2(unit);
      },
      deleteForward(unit) {
        if (preventDeleteTableCell(editor, {
          reverse: true,
          unit
        }))
          return;
        deleteForward2(unit);
      },
      deleteFragment(direction2) {
        if (editor.api.isAt({ block: true, match: (n2) => n2.type === type })) {
          const cellEntries = getTableGridAbove(editor, { format: "cell" });
          if (cellEntries.length > 1) {
            editor.tf.withoutNormalizing(() => {
              cellEntries.forEach(([, cellPath]) => {
                editor.tf.replaceNodes(editor.api.create.block(), {
                  at: cellPath,
                  children: true
                });
              });
              editor.tf.select({
                anchor: editor.api.start(cellEntries[0][1]),
                focus: editor.api.end(cellEntries.at(-1)[1])
              });
            });
            return;
          }
        }
        deleteFragment2(direction2);
      }
    }
  });
  var withGetFragmentTable = ({
    api,
    api: { getFragment: getFragment2 },
    editor,
    type
  }) => ({
    api: {
      getFragment() {
        const fragment2 = getFragment2();
        const newFragment = [];
        fragment2.forEach((node2) => {
          if (node2.type === type) {
            const rows = node2.children;
            const rowCount = rows.length;
            if (!rowCount)
              return;
            const colCount = rows[0].children.length;
            const hasOneCell = rowCount <= 1 && colCount <= 1;
            if (hasOneCell) {
              const cell = rows[0];
              const cellChildren = api.table.getCellChildren(cell);
              newFragment.push(...cellChildren[0].children);
              return;
            } else {
              const subTable = getTableGridAbove(editor);
              if (subTable.length > 0) {
                newFragment.push(subTable[0][0]);
                return;
              }
            }
          }
          newFragment.push(node2);
        });
        return newFragment;
      }
    }
  });
  var withInsertFragmentTable = ({
    api,
    editor,
    getOptions: getOptions2,
    tf: { insert, insertFragment: insertFragment2 },
    type
  }) => ({
    transforms: {
      insertFragment(fragment2) {
        var _a2, _b, _c;
        const insertedTable = fragment2.find(
          (n2) => n2.type === type
        );
        if (!insertedTable) {
          const tableEntry = getTableAbove(editor, {
            at: (_a2 = editor.selection) == null ? void 0 : _a2.anchor
          });
          if (tableEntry) {
            const cellEntries = getTableGridAbove(editor, {
              format: "cell"
            });
            if (cellEntries.length > 1) {
              cellEntries.forEach((cellEntry) => {
                if (cellEntry) {
                  const [, cellPath] = cellEntry;
                  editor.tf.replaceNodes(cloneDeep6(fragment2), {
                    at: cellPath,
                    children: true
                  });
                }
              });
              editor.tf.select({
                anchor: editor.api.start(cellEntries[0][1]),
                focus: editor.api.end(cellEntries.at(-1)[1])
              });
              return;
            }
          }
        }
        if (insertedTable) {
          const tableEntry = getTableAbove(editor, {
            at: (_b = editor.selection) == null ? void 0 : _b.anchor
          });
          if (tableEntry) {
            const [cellEntry] = getTableGridAbove(editor, {
              at: (_c = editor.selection) == null ? void 0 : _c.anchor,
              format: "cell"
            });
            if (cellEntry) {
              editor.tf.withoutNormalizing(() => {
                const [, startCellPath] = cellEntry;
                const cellPath = [...startCellPath];
                const startColIndex = cellPath.at(-1);
                let lastCellPath = null;
                let initRow = true;
                const insertedRows = insertedTable.children;
                insertedRows.forEach((row) => {
                  cellPath[cellPath.length - 1] = startColIndex;
                  if (!initRow) {
                    const fromRow = cellPath.slice(0, -1);
                    cellPath[cellPath.length - 2] += 1;
                    if (!plate.NodeApi.has(editor, cellPath)) {
                      if (getOptions2().disableExpandOnInsert) {
                        return;
                      } else {
                        insert.tableRow({
                          fromRow
                        });
                      }
                    }
                  }
                  initRow = false;
                  const insertedCells = row.children;
                  let initCell = true;
                  insertedCells.forEach((cell) => {
                    if (!initCell) {
                      const fromCell = [...cellPath];
                      cellPath[cellPath.length - 1] += 1;
                      if (!plate.NodeApi.has(editor, cellPath)) {
                        if (getOptions2().disableExpandOnInsert) {
                          return;
                        } else {
                          insert.tableColumn({
                            fromCell
                          });
                        }
                      }
                    }
                    initCell = false;
                    const cellChildren = api.table.getCellChildren(
                      cell
                    );
                    editor.tf.replaceNodes(cloneDeep6(cellChildren), {
                      at: cellPath,
                      children: true
                    });
                    lastCellPath = [...cellPath];
                  });
                });
                if (lastCellPath) {
                  editor.tf.select({
                    anchor: editor.api.start(startCellPath),
                    focus: editor.api.end(lastCellPath)
                  });
                }
              });
              return;
            }
          } else if (fragment2.length === 1 && fragment2[0].type === BaseTablePlugin.key) {
            editor.tf.insertNodes(fragment2[0]);
            return;
          }
        }
        insertFragment2(fragment2);
      }
    }
  });
  var getCellInNextTableRow = (editor, currentRowPath) => {
    var _a2;
    const nextRow = editor.api.node(plate.PathApi.next(currentRowPath));
    if (!nextRow)
      return;
    const [nextRowNode, nextRowPath] = nextRow;
    const nextCell = (_a2 = nextRowNode == null ? void 0 : nextRowNode.children) == null ? void 0 : _a2[0];
    const nextCellPath = nextRowPath.concat(0);
    if (nextCell && nextCellPath) {
      return editor.api.node(nextCellPath);
    }
  };
  var getCellInPreviousTableRow = (editor, currentRowPath) => {
    var _a2;
    const prevPath = plate.PathApi.previous(currentRowPath);
    if (!prevPath)
      return;
    const previousRow = editor.api.node(prevPath);
    if (!previousRow)
      return;
    const [previousRowNode, previousRowPath] = previousRow;
    const previousCell = (_a2 = previousRowNode == null ? void 0 : previousRowNode.children) == null ? void 0 : _a2[previousRowNode.children.length - 1];
    const previousCellPath = previousRowPath.concat(
      previousRowNode.children.length - 1
    );
    if (previousCell && previousCellPath) {
      return editor.api.node(previousCellPath);
    }
  };
  var getLeftTableCell = (editor, {
    at: cellPath
  } = {}) => {
    var _a2;
    if (!cellPath) {
      cellPath = (_a2 = editor.api.node({
        match: { type: getCellTypes(editor) }
      })) == null ? void 0 : _a2[1];
      if (!cellPath)
        return;
    }
    const cellIndex = cellPath.at(-1);
    if (!cellIndex)
      return;
    const prevCellPath = plate.PathApi.previous(cellPath);
    return editor.api.node(prevCellPath);
  };
  var getNextTableCell = (editor, currentCell, currentPath, currentRow) => {
    const cell = editor.api.node(plate.PathApi.next(currentPath));
    if (cell)
      return cell;
    const [, currentRowPath] = currentRow;
    return getCellInNextTableRow(editor, currentRowPath);
  };
  var getPreviousTableCell = (editor, currentCell, currentPath, currentRow) => {
    const prevPath = plate.PathApi.previous(currentPath);
    if (!prevPath) {
      const [, currentRowPath] = currentRow;
      return getCellInPreviousTableRow(editor, currentRowPath);
    }
    const cell = editor.api.node(prevPath);
    if (cell)
      return cell;
  };
  function getSelectedCellsBoundingBox(editor, cells) {
    let minRow = Infinity;
    let maxRow = -Infinity;
    let minCol = Infinity;
    let maxCol = -Infinity;
    for (const cell of cells) {
      const { col, row } = getCellIndices(editor, cell);
      const cSpan = getColSpan(cell);
      const rSpan = getRowSpan(cell);
      const endRow = row + rSpan - 1;
      const endCol = col + cSpan - 1;
      if (row < minRow)
        minRow = row;
      if (endRow > maxRow)
        maxRow = endRow;
      if (col < minCol)
        minCol = col;
      if (endCol > maxCol)
        maxCol = endCol;
    }
    return { maxCol, maxRow, minCol, minRow };
  }
  var getTopTableCell = (editor, {
    at: cellPath
  } = {}) => {
    var _a2;
    if (!cellPath) {
      cellPath = (_a2 = editor.api.node({
        match: { type: getCellTypes(editor) }
      })) == null ? void 0 : _a2[1];
      if (!cellPath)
        return;
    }
    const cellIndex = cellPath.at(-1);
    const rowIndex = cellPath.at(-2);
    if (rowIndex === 0)
      return;
    const cellAbovePath = [
      ...plate.PathApi.parent(plate.PathApi.parent(cellPath)),
      rowIndex - 1,
      cellIndex
    ];
    return editor.api.node(cellAbovePath);
  };
  var getSelectedCellsBorders = (editor, selectedCells, options = {}) => {
    var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
    const { select: select2 = { none: true, outer: true, side: true } } = options;
    if (!selectedCells || selectedCells.length === 0) {
      const cell = editor.api.block({ match: { type: getCellTypes(editor) } });
      if (cell) {
        selectedCells = [cell[0]];
      } else {
        return {
          bottom: true,
          left: true,
          none: false,
          outer: true,
          right: true,
          top: true
        };
      }
    }
    const cells = selectedCells.map((cell) => cell);
    const { maxCol, maxRow, minCol, minRow } = getSelectedCellsBoundingBox(
      editor,
      cells
    );
    let hasAnyBorder = false;
    let allOuterBordersSet = true;
    const borderStates = {
      bottom: false,
      left: false,
      right: false,
      top: false
    };
    for (const cell of cells) {
      const { col, row } = getCellIndices(editor, cell);
      const cellPath = editor.api.findPath(cell);
      const cSpan = getColSpan(cell);
      const rSpan = getRowSpan(cell);
      const isFirstRow = row === 0;
      const isFirstCell = col === 0;
      if (!cellPath)
        continue;
      if (select2.none && !hasAnyBorder) {
        if (isFirstRow && (((_b = (_a2 = cell.borders) == null ? void 0 : _a2.top) == null ? void 0 : _b.size) ?? 1) > 0)
          hasAnyBorder = true;
        if (isFirstCell && (((_d = (_c = cell.borders) == null ? void 0 : _c.left) == null ? void 0 : _d.size) ?? 1) > 0)
          hasAnyBorder = true;
        if ((((_f = (_e = cell.borders) == null ? void 0 : _e.bottom) == null ? void 0 : _f.size) ?? 1) > 0)
          hasAnyBorder = true;
        if ((((_h = (_g = cell.borders) == null ? void 0 : _g.right) == null ? void 0 : _h.size) ?? 1) > 0)
          hasAnyBorder = true;
        if (!hasAnyBorder) {
          if (!isFirstRow) {
            const cellAboveEntry = getTopTableCell(editor, { at: cellPath });
            if (cellAboveEntry && (((_j = (_i = cellAboveEntry[0].borders) == null ? void 0 : _i.bottom) == null ? void 0 : _j.size) ?? 1) > 0) {
              hasAnyBorder = true;
            }
          }
          if (!isFirstCell) {
            const prevCellEntry = getLeftTableCell(editor, { at: cellPath });
            if (prevCellEntry && (((_l = (_k = prevCellEntry[0].borders) == null ? void 0 : _k.right) == null ? void 0 : _l.size) ?? 1) > 0) {
              hasAnyBorder = true;
            }
          }
        }
      }
      if (select2.side || select2.outer) {
        for (let rr = row; rr < row + rSpan; rr++) {
          for (let cc = col; cc < col + cSpan; cc++) {
            if (rr === minRow) {
              if (isFirstRow) {
                if ((((_n = (_m = cell.borders) == null ? void 0 : _m.top) == null ? void 0 : _n.size) ?? 1) < 1) {
                  borderStates.top = false;
                  if (select2.outer)
                    allOuterBordersSet = false;
                } else if (!borderStates.top) {
                  borderStates.top = true;
                }
              } else {
                const cellAboveEntry = getTopTableCell(editor, { at: cellPath });
                if (cellAboveEntry) {
                  const [cellAbove] = cellAboveEntry;
                  if ((((_p = (_o = cellAbove.borders) == null ? void 0 : _o.bottom) == null ? void 0 : _p.size) ?? 1) < 1) {
                    borderStates.top = false;
                    if (select2.outer)
                      allOuterBordersSet = false;
                  } else if (!borderStates.top) {
                    borderStates.top = true;
                  }
                }
              }
            }
            if (rr === maxRow) {
              if ((((_r = (_q = cell.borders) == null ? void 0 : _q.bottom) == null ? void 0 : _r.size) ?? 1) < 1) {
                borderStates.bottom = false;
                if (select2.outer)
                  allOuterBordersSet = false;
              } else if (!borderStates.bottom) {
                borderStates.bottom = true;
              }
            }
            if (cc === minCol) {
              if (isFirstCell) {
                if ((((_t = (_s = cell.borders) == null ? void 0 : _s.left) == null ? void 0 : _t.size) ?? 1) < 1) {
                  borderStates.left = false;
                  if (select2.outer)
                    allOuterBordersSet = false;
                } else if (!borderStates.left) {
                  borderStates.left = true;
                }
              } else {
                const prevCellEntry = getLeftTableCell(editor, { at: cellPath });
                if (prevCellEntry) {
                  const [prevCell] = prevCellEntry;
                  if ((((_v = (_u = prevCell.borders) == null ? void 0 : _u.right) == null ? void 0 : _v.size) ?? 1) < 1) {
                    borderStates.left = false;
                    if (select2.outer)
                      allOuterBordersSet = false;
                  } else if (!borderStates.left) {
                    borderStates.left = true;
                  }
                }
              }
            }
            if (cc === maxCol) {
              if ((((_x = (_w = cell.borders) == null ? void 0 : _w.right) == null ? void 0 : _x.size) ?? 1) < 1) {
                borderStates.right = false;
                if (select2.outer)
                  allOuterBordersSet = false;
              } else if (!borderStates.right) {
                borderStates.right = true;
              }
            }
          }
        }
      }
    }
    return {
      ...select2.side ? borderStates : { bottom: true, left: true, right: true, top: true },
      none: select2.none ? !hasAnyBorder : false,
      outer: select2.outer ? allOuterBordersSet : true
    };
  };
  function isSelectedCellBorder(editor, cells, side) {
    const { maxCol, maxRow, minCol, minRow } = getSelectedCellsBoundingBox(
      editor,
      cells
    );
    return cells.every((cell) => {
      var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
      const { col, row } = getCellIndices(editor, cell);
      const cSpan = getColSpan(cell);
      const rSpan = getRowSpan(cell);
      const cellPath = editor.api.findPath(cell);
      if (!cellPath)
        return true;
      for (let rr = row; rr < row + rSpan; rr++) {
        for (let cc = col; cc < col + cSpan; cc++) {
          if (side === "top" && rr === minRow) {
            const isFirstRow = row === 0;
            if (isFirstRow) {
              return (((_b = (_a2 = cell.borders) == null ? void 0 : _a2.top) == null ? void 0 : _b.size) ?? 1) >= 1;
            }
            const cellAboveEntry = getTopTableCell(editor, { at: cellPath });
            if (!cellAboveEntry)
              return true;
            const [cellAboveNode] = cellAboveEntry;
            return (((_d = (_c = cellAboveNode.borders) == null ? void 0 : _c.bottom) == null ? void 0 : _d.size) ?? 1) >= 1;
          }
          if (side === "bottom" && rr === maxRow) {
            return (((_f = (_e = cell.borders) == null ? void 0 : _e.bottom) == null ? void 0 : _f.size) ?? 1) >= 1;
          }
          if (side === "left" && cc === minCol) {
            const isFirstCell = col === 0;
            if (isFirstCell) {
              return (((_h = (_g = cell.borders) == null ? void 0 : _g.left) == null ? void 0 : _h.size) ?? 1) >= 1;
            }
            const prevCellEntry = getLeftTableCell(editor, { at: cellPath });
            if (!prevCellEntry)
              return true;
            const [prevCellNode] = prevCellEntry;
            return (((_j = (_i = prevCellNode.borders) == null ? void 0 : _i.right) == null ? void 0 : _j.size) ?? 1) >= 1;
          }
          if (side === "right" && cc === maxCol) {
            return (((_l = (_k = cell.borders) == null ? void 0 : _k.right) == null ? void 0 : _l.size) ?? 1) >= 1;
          }
        }
      }
      return true;
    });
  }
  var getTableAbove = (editor, options) => editor.api.block({
    above: true,
    match: {
      type: editor.getType(BaseTablePlugin)
    },
    ...options
  });
  var getTableCellBorders = (editor, {
    cellIndices,
    defaultBorder = {
      size: 1
    },
    element
  }) => {
    var _a2;
    const cellPath = editor.api.findPath(element);
    const [rowNode, rowPath] = editor.api.parent(cellPath) ?? [];
    if (!rowNode || !rowPath) {
      return {
        bottom: defaultBorder,
        right: defaultBorder
      };
    }
    const [tableNode] = editor.api.parent(rowPath);
    const { col } = cellIndices ?? getCellIndices(editor, element);
    const isFirstCell = col === 0;
    const isFirstRow = ((_a2 = tableNode.children) == null ? void 0 : _a2[0]) === rowNode;
    const getBorder = (dir) => {
      var _a3;
      const border = (_a3 = element.borders) == null ? void 0 : _a3[dir];
      return {
        color: (border == null ? void 0 : border.color) ?? defaultBorder.color,
        size: (border == null ? void 0 : border.size) ?? defaultBorder.size,
        style: (border == null ? void 0 : border.style) ?? defaultBorder.style
      };
    };
    return {
      bottom: getBorder("bottom"),
      left: isFirstCell ? getBorder("left") : void 0,
      right: getBorder("right"),
      top: isFirstRow ? getBorder("top") : void 0
    };
  };
  var getTableCellSize = (editor, {
    cellIndices,
    colSizes,
    element,
    rowSize
  }) => {
    const { api } = plate.getEditorPlugin(editor, {
      key: "table"
    });
    const path2 = editor.api.findPath(element);
    if (!rowSize) {
      const [rowElement] = editor.api.parent(path2) ?? [];
      if (!rowElement)
        return { minHeight: 0, width: 0 };
      rowSize = rowElement.size;
    }
    if (!colSizes) {
      const [, rowPath] = editor.api.parent(path2);
      const [tableNode] = editor.api.parent(rowPath);
      colSizes = getTableOverriddenColSizes(tableNode);
    }
    const colSpan = api.table.getColSpan(element);
    const { col } = cellIndices ?? getCellIndices(editor, element);
    const width = (colSizes ?? []).slice(col, col + colSpan).reduce((total, w2) => total + (w2 || 0), 0);
    return { minHeight: rowSize, width };
  };
  var getTableColumnCount = (tableNode) => {
    var _a2, _b;
    if ((_b = (_a2 = tableNode.children) == null ? void 0 : _a2[0]) == null ? void 0 : _b.children) {
      return tableNode.children[0].children.map(
        (element) => {
          var _a3;
          return element.colSpan || ((_a3 = element == null ? void 0 : element.attributes) == null ? void 0 : _a3.colspan) || 1;
        }
      ).reduce((total, num) => Number(total) + Number(num));
    }
    return 0;
  };
  var getTableEntries = (editor, { at: at2 = editor.selection } = {}) => {
    if (!at2)
      return;
    const cellEntry = editor.api.node({
      at: at2,
      match: {
        type: getCellTypes(editor)
      }
    });
    if (!cellEntry)
      return;
    const [, cellPath] = cellEntry;
    const rowEntry = editor.api.above({
      at: cellPath,
      match: { type: editor.getType(BaseTableRowPlugin) }
    });
    if (!rowEntry)
      return;
    const [, rowPath] = rowEntry;
    const tableEntry = editor.api.above({
      at: rowPath,
      match: { type: editor.getType(BaseTablePlugin) }
    });
    if (!tableEntry)
      return;
    return {
      cell: cellEntry,
      row: rowEntry,
      table: tableEntry
    };
  };
  var getTableOverriddenColSizes = (tableNode, colSizeOverrides) => {
    const colCount = getTableColumnCount(tableNode);
    const colSizes = (tableNode.colSizes ? [...tableNode.colSizes] : Array.from({ length: colCount }).fill(0)).map((size2, index) => {
      var _a2;
      return ((_a2 = colSizeOverrides == null ? void 0 : colSizeOverrides.get) == null ? void 0 : _a2.call(colSizeOverrides, index)) ?? size2;
    });
    return colSizes;
  };
  var withInsertTextTable = ({
    editor,
    tf: { insertText: insertText2 }
  }) => ({
    transforms: {
      insertText(text, options) {
        var _a2;
        if (editor.api.isExpanded()) {
          const entry = getTableAbove(editor, {
            at: (_a2 = editor.selection) == null ? void 0 : _a2.anchor
          });
          if (entry) {
            const cellEntries = getTableGridAbove(editor, {
              format: "cell"
            });
            if (cellEntries.length > 1) {
              editor.tf.collapse({
                edge: "focus"
              });
            }
          }
        }
        insertText2(text, options);
      }
    }
  });
  var withMarkTable = ({
    api: { marks: marks2 },
    editor,
    tf: { addMark: addMark2, removeMark: removeMark2 }
  }) => ({
    api: {
      marks() {
        const { selection } = editor;
        if (!selection || editor.api.isCollapsed())
          return marks2();
        const matchesCell = getTableGridAbove(editor, { format: "cell" });
        if (matchesCell.length === 0)
          return marks2();
        const totalMarks = {};
        matchesCell.forEach(([_cell, cellPath]) => {
          const textNodeEntry = editor.api.nodes({
            at: cellPath,
            match: (n2) => plate.TextApi.isText(n2)
          });
          Array.from(textNodeEntry, (item) => item[0]).forEach((item) => {
            const keys2 = Object.keys(item);
            if (keys2.length === 1)
              return;
            keys2.splice(keys2.indexOf("text"), 1);
            keys2.forEach((k) => {
              totalMarks[k] = item[k];
            });
          });
        });
        return totalMarks;
      }
    },
    transforms: {
      addMark(key, value) {
        const { selection } = editor;
        if (!selection || editor.api.isCollapsed())
          return addMark2(key, value);
        const matchesCell = getTableGridAbove(editor, { format: "cell" });
        if (matchesCell.length <= 1)
          return addMark2(key, value);
        matchesCell.forEach(([_cell, cellPath]) => {
          editor.tf.setNodes(
            {
              [key]: value
            },
            {
              at: cellPath,
              split: true,
              voids: true,
              match: (n2) => plate.TextApi.isText(n2)
            }
          );
        });
      },
      removeMark(key) {
        const { selection } = editor;
        if (!selection || editor.api.isCollapsed())
          return removeMark2(key);
        const matchesCell = getTableGridAbove(editor, { format: "cell" });
        if (matchesCell.length === 0)
          return removeMark2(key);
        matchesCell.forEach(([_cell, cellPath]) => {
          editor.tf.unsetNodes(key, {
            at: cellPath,
            split: true,
            voids: true,
            match: (n2) => plate.TextApi.isText(n2)
          });
        });
      }
    }
  });
  var withNormalizeTable = ({
    editor,
    getOption,
    getOptions: getOptions2,
    tf: { normalizeNode: normalizeNode2 },
    type
  }) => ({
    transforms: {
      normalizeNode([n2, path2]) {
        var _a2, _b;
        const { enableUnsetSingleColSize, initialTableWidth } = getOptions2();
        if (plate.ElementApi.isElement(n2)) {
          if (n2.type === type) {
            const node2 = n2;
            if (!node2.children.some(
              (child) => plate.ElementApi.isElement(child) && child.type === editor.getType(BaseTableRowPlugin)
            )) {
              editor.tf.removeNodes({ at: path2 });
              return;
            }
            if (node2.colSizes && node2.colSizes.length > 0 && enableUnsetSingleColSize && getTableColumnCount(node2) < 2) {
              editor.tf.unsetNodes("colSizes", {
                at: path2
              });
              return;
            }
            const tableEntry = editor.api.block({
              above: true,
              at: path2,
              match: { type }
            });
            if (tableEntry) {
              editor.tf.unwrapNodes({
                at: path2
              });
              return;
            }
            if (initialTableWidth) {
              const tableNode = node2;
              const colCount = (_b = (_a2 = tableNode.children[0]) == null ? void 0 : _a2.children) == null ? void 0 : _b.length;
              if (colCount) {
                const colSizes = [];
                if (!tableNode.colSizes) {
                  for (let i2 = 0; i2 < colCount; i2++) {
                    colSizes.push(initialTableWidth / colCount);
                  }
                } else if (tableNode.colSizes.some((size2) => !size2)) {
                  tableNode.colSizes.forEach((colSize) => {
                    colSizes.push(colSize || initialTableWidth / colCount);
                  });
                }
                if (colSizes.length > 0) {
                  editor.tf.setNodes({ colSizes }, { at: path2 });
                  return;
                }
              }
            }
          }
          if (n2.type === editor.getType(BaseTableRowPlugin)) {
            const parentEntry = editor.api.parent(path2);
            if ((parentEntry == null ? void 0 : parentEntry[0].type) !== type) {
              editor.tf.unwrapNodes({
                at: path2
              });
              return;
            }
          }
          if (getCellTypes(editor).includes(n2.type)) {
            const node2 = n2;
            const cellIndices = getOption("cellIndices", node2.id);
            if (node2.id && !cellIndices) {
              computeCellIndices(editor, {
                all: true,
                cellNode: node2
              });
            }
            const { children } = node2;
            const parentEntry = editor.api.parent(path2);
            if ((parentEntry == null ? void 0 : parentEntry[0].type) !== editor.getType(BaseTableRowPlugin)) {
              editor.tf.unwrapNodes({
                at: path2
              });
              return;
            }
            if (plate.TextApi.isText(children[0])) {
              editor.tf.wrapNodes(editor.api.create.block({}, path2), {
                at: path2,
                children: true
              });
              return;
            }
          }
        }
        normalizeNode2([n2, path2]);
      }
    }
  });
  var withSetFragmentDataTable = ({
    api,
    editor,
    plugin,
    tf: { setFragmentData }
  }) => ({
    transforms: {
      setFragmentData(data, originEvent) {
        var _a2;
        const tableEntry = (_a2 = getTableGridAbove(editor, {
          format: "table"
        })) == null ? void 0 : _a2[0];
        const selectedCellEntries = getTableGridAbove(editor, {
          format: "cell"
        });
        const initialSelection = editor.selection;
        if (!tableEntry || !initialSelection) {
          setFragmentData(data, originEvent);
          return;
        }
        const [tableNode, tablePath] = tableEntry;
        const tableRows = tableNode.children;
        tableNode.children = tableNode.children.filter(
          (v) => v.children.length > 0
        );
        let textCsv = "";
        let textTsv = "";
        const divElement = document.createElement("div");
        const tableElement = document.createElement("table");
        if (tableEntry && initialSelection && selectedCellEntries.length === 1 && (originEvent === "copy" || originEvent === "cut")) {
          setFragmentData(data);
          return;
        }
        editor.tf.withoutNormalizing(() => {
          tableRows.forEach((row) => {
            const rowCells = row.children;
            const cellStrings = [];
            const rowElement = row.type === editor.getType(BaseTableCellHeaderPlugin) ? document.createElement("th") : document.createElement("tr");
            rowCells.forEach((cell) => {
              data.clearData();
              const cellPath = editor.api.findPath(cell);
              editor.tf.select({
                anchor: editor.api.start(cellPath),
                focus: editor.api.end(cellPath)
              });
              setFragmentData(data);
              cellStrings.push(data.getData("text/plain"));
              const cellElement = document.createElement("td");
              const colSpan = api.table.getColSpan(cell);
              cellElement.colSpan = colSpan;
              const rowSpan = api.table.getRowSpan(cell);
              cellElement.rowSpan = rowSpan;
              cellElement.innerHTML = data.getData("text/html");
              rowElement.append(cellElement);
            });
            tableElement.append(rowElement);
            textCsv += `${cellStrings.join(",")}
`;
            textTsv += `${cellStrings.join("	")}
`;
          });
          const _tableEntry = editor.api.node({
            at: tablePath,
            match: { type: BaseTablePlugin.key }
          });
          if (_tableEntry != null && _tableEntry.length > 0) {
            const realTable = _tableEntry[0];
            if (realTable.attributes != null) {
              Object.entries(realTable.attributes).forEach(([key, value]) => {
                var _a3;
                if (value != null && ((_a3 = plugin.node.dangerouslyAllowAttributes) == null ? void 0 : _a3.includes(key))) {
                  tableElement.setAttribute(key, String(value));
                }
              });
            }
          }
          editor.tf.select(initialSelection);
          divElement.append(tableElement);
        });
        data.setData("text/csv", textCsv);
        data.setData("text/tsv", textTsv);
        data.setData("text/plain", textTsv);
        data.setData("text/html", divElement.innerHTML);
        const selectedFragmentStr = JSON.stringify([tableNode]);
        const encodedFragment = window.btoa(
          encodeURIComponent(selectedFragmentStr)
        );
        data.setData("application/x-slate-fragment", encodedFragment);
      }
    }
  });
  var withTable = (ctx) => {
    const mark2 = withMarkTable(ctx);
    return {
      api: {
        // getFragment
        ...withGetFragmentTable(ctx).api,
        ...mark2.api
      },
      transforms: {
        // normalize
        ...withNormalizeTable(ctx).transforms,
        // delete
        ...withDeleteTable(ctx).transforms,
        // insertFragment
        ...withInsertFragmentTable(ctx).transforms,
        // insertText
        ...withInsertTextTable(ctx).transforms,
        // apply
        ...withApplyTable(ctx).transforms,
        // setFragmentData
        ...withSetFragmentDataTable(ctx).transforms,
        // addMark, removeMark
        ...mark2.transforms
      }
    };
  };
  var deleteColumnWhenExpanded = (editor, tableEntry) => {
    const [start2, end2] = plate.RangeApi.edges(editor.selection);
    const firstRow = plate.NodeApi.child(tableEntry[0], 0);
    const lastRow = plate.NodeApi.child(
      tableEntry[0],
      tableEntry[0].children.length - 1
    );
    const firstSelectionRow = editor.api.above({
      at: start2,
      match: (n2) => n2.type === BaseTableRowPlugin.key
    });
    const lastSelectionRow = editor.api.above({
      at: end2,
      match: (n2) => n2.type === BaseTableRowPlugin.key
    });
    if (!firstSelectionRow || !lastSelectionRow)
      return;
    if (firstRow.id === firstSelectionRow[0].id && lastSelectionRow[0].id === lastRow.id)
      deleteSelection(editor);
  };
  var deleteSelection = (editor) => {
    const cells = getTableGridAbove(editor, {
      format: "cell"
    });
    const pathRefs2 = [];
    cells.forEach(([_cell, cellPath]) => {
      pathRefs2.push(editor.api.pathRef(cellPath));
    });
    pathRefs2.forEach((pathRef2) => {
      editor.tf.removeNodes({ at: pathRef2.unref() });
    });
  };
  var deleteColumn = (editor) => {
    const { getOptions: getOptions2, type } = plate.getEditorPlugin(editor, {
      key: "table"
    });
    const { disableMerge } = getOptions2();
    const tableEntry = editor.api.above({
      match: { type }
    });
    if (!tableEntry)
      return;
    editor.tf.withoutNormalizing(() => {
      if (!disableMerge) {
        deleteTableMergeColumn(editor);
        return;
      }
      if (editor.api.isExpanded())
        return deleteColumnWhenExpanded(editor, tableEntry);
      const tdEntry = editor.api.above({
        match: { type: getCellTypes(editor) }
      });
      const trEntry = editor.api.above({
        match: { type: editor.getType(BaseTableRowPlugin) }
      });
      if (tdEntry && trEntry && tableEntry && // Cannot delete the last cell
      trEntry[0].children.length > 1) {
        const [tableNode, tablePath] = tableEntry;
        const tdPath = tdEntry[1];
        const colIndex = tdPath.at(-1);
        const pathToDelete = tdPath.slice();
        const replacePathPos = pathToDelete.length - 2;
        tableNode.children.forEach((row, rowIdx) => {
          pathToDelete[replacePathPos] = rowIdx;
          if (row.children.length === 1 || colIndex > row.children.length - 1)
            return;
          editor.tf.removeNodes({ at: pathToDelete });
        });
        const { colSizes } = tableNode;
        if (colSizes) {
          const newColSizes = [...colSizes];
          newColSizes.splice(colIndex, 1);
          editor.tf.setNodes(
            { colSizes: newColSizes },
            { at: tablePath }
          );
        }
      }
    });
  };
  var deleteRowWhenExpanded = (editor, [table, tablePath]) => {
    const { api } = plate.getEditorPlugin(editor, BaseTablePlugin);
    const columnCount = getTableMergedColumnCount(table);
    const cells = getTableGridAbove(editor, {
      format: "cell"
    });
    const firsRowIndex = getCellRowIndexByPath(cells[0][1]);
    if (firsRowIndex === null)
      return;
    let acrossColumn = 0;
    let lastRowIndex = -1;
    let rowSpanCarry = 0;
    let acrossRow = 0;
    cells.forEach(([cell, cellPath]) => {
      if (cellPath.at(-2) === firsRowIndex) {
        acrossColumn += cell.colSpan ?? 1;
      }
      const currentRowIndex = getCellRowIndexByPath(cellPath);
      if (lastRowIndex !== currentRowIndex) {
        if (rowSpanCarry !== 0) {
          rowSpanCarry--;
          return;
        }
        const rowSpan = api.table.getRowSpan(cell);
        rowSpanCarry = rowSpan && rowSpan > 1 ? rowSpan - 1 : 0;
        acrossRow += rowSpan ?? 1;
      }
      lastRowIndex = currentRowIndex;
    });
    if (acrossColumn === columnCount) {
      const pathRefs2 = [];
      for (let i2 = firsRowIndex; i2 < firsRowIndex + acrossRow; i2++) {
        const removedPath = tablePath.concat(i2);
        pathRefs2.push(editor.api.pathRef(removedPath));
      }
      pathRefs2.forEach((item) => {
        editor.tf.removeNodes({ at: item.unref() });
      });
    }
  };
  var deleteTableMergeRow = (editor) => {
    var _a2, _b;
    const { api, tf, type } = plate.getEditorPlugin(editor, {
      key: "table"
    });
    if (editor.api.some({
      match: { type }
    })) {
      const currentTableItem = editor.api.above({
        match: { type }
      });
      if (!currentTableItem)
        return;
      if (editor.api.isExpanded())
        return deleteRowWhenExpanded(editor, currentTableItem);
      const table = currentTableItem[0];
      const selectedCellEntry = editor.api.above({
        match: { type: getCellTypes(editor) }
      });
      if (!selectedCellEntry)
        return;
      const selectedCell = selectedCellEntry[0];
      const { row: deletingRowIndex } = getCellIndices(editor, selectedCell);
      const rowsDeleteNumber = api.table.getRowSpan(selectedCell);
      const endingRowIndex = deletingRowIndex + rowsDeleteNumber - 1;
      const colNumber = getTableColumnCount(table);
      const affectedCellsSet = /* @__PURE__ */ new Set();
      Array.from({ length: colNumber }, (_, i2) => i2).forEach((cI) => {
        return Array.from({ length: rowsDeleteNumber }, (_, i2) => i2).forEach(
          (rI) => {
            const rowIndex = deletingRowIndex + rI;
            const found = findCellByIndexes(editor, table, rowIndex, cI);
            affectedCellsSet.add(found);
          }
        );
      });
      const affectedCells = Array.from(affectedCellsSet);
      const { moveToNextRowCells, squizeRowSpanCells } = affectedCells.reduce(
        (acc, cur) => {
          if (!cur)
            return acc;
          const currentCell = cur;
          const { row: curRowIndex } = getCellIndices(editor, currentCell);
          const curRowSpan = api.table.getRowSpan(currentCell);
          if (curRowIndex < deletingRowIndex && curRowSpan > 1) {
            acc.squizeRowSpanCells.push(currentCell);
          } else if (curRowSpan > 1 && curRowIndex + curRowSpan - 1 > endingRowIndex) {
            acc.moveToNextRowCells.push(currentCell);
          }
          return acc;
        },
        { moveToNextRowCells: [], squizeRowSpanCells: [] }
      );
      const nextRowIndex = deletingRowIndex + rowsDeleteNumber;
      const nextRow = table.children[nextRowIndex];
      if (nextRow === void 0 && deletingRowIndex === 0) {
        tf.remove.table();
        return;
      }
      if (nextRow) {
        for (let index = 0; index < moveToNextRowCells.length; index++) {
          const curRowCell = moveToNextRowCells[index];
          const { col: curRowCellColIndex, row: curRowCellRowIndex } = getCellIndices(editor, curRowCell);
          const curRowCellRowSpan = api.table.getRowSpan(curRowCell);
          const startingCellIndex = nextRow.children.findIndex((curC) => {
            const cell = curC;
            const { col: curColIndex } = getCellIndices(editor, cell);
            return curColIndex >= curRowCellColIndex;
          });
          if (startingCellIndex === -1) {
            const startingCell2 = nextRow.children.at(-1);
            const startingCellPath2 = editor.api.findPath(startingCell2);
            const tablePath2 = startingCellPath2.slice(0, -2);
            const colPath2 = startingCellPath2.at(-1) + index + 1;
            const nextRowStartCellPath2 = [...tablePath2, nextRowIndex, colPath2];
            const rowsNumberAffected2 = endingRowIndex - curRowCellRowIndex + 1;
            const rowSpan2 = curRowCellRowSpan - rowsNumberAffected2;
            const newCell2 = cloneDeep6({ ...curRowCell, rowSpan: rowSpan2 });
            if ((_a2 = newCell2.attributes) == null ? void 0 : _a2.rowspan) {
              newCell2.attributes.rowspan = rowSpan2.toString();
            }
            editor.tf.insertNodes(newCell2, {
              at: nextRowStartCellPath2
            });
            continue;
          }
          const startingCell = nextRow.children[startingCellIndex];
          const { col: startingColIndex } = getCellIndices(editor, startingCell);
          let incrementBy = index;
          if (startingColIndex < curRowCellColIndex) {
            incrementBy += 1;
          }
          const startingCellPath = editor.api.findPath(startingCell);
          const tablePath = startingCellPath.slice(0, -2);
          const colPath = startingCellPath.at(-1);
          const nextRowStartCellPath = [
            ...tablePath,
            nextRowIndex,
            colPath + incrementBy
          ];
          const rowsNumberAffected = endingRowIndex - curRowCellRowIndex + 1;
          const rowSpan = curRowCellRowSpan - rowsNumberAffected;
          const newCell = cloneDeep6({ ...curRowCell, rowSpan });
          if ((_b = newCell.attributes) == null ? void 0 : _b.rowspan) {
            newCell.attributes.rowspan = rowSpan.toString();
          }
          editor.tf.insertNodes(newCell, {
            at: nextRowStartCellPath
          });
        }
      }
      squizeRowSpanCells.forEach((cur) => {
        var _a3;
        const curRowCell = cur;
        const { row: curRowCellRowIndex } = getCellIndices(editor, curRowCell);
        const curRowCellRowSpan = api.table.getRowSpan(curRowCell);
        const curCellPath = editor.api.findPath(curRowCell);
        const curCellEndingRowIndex = Math.min(
          curRowCellRowIndex + curRowCellRowSpan - 1,
          endingRowIndex
        );
        const rowsNumberAffected = curCellEndingRowIndex - deletingRowIndex + 1;
        const rowSpan = curRowCellRowSpan - rowsNumberAffected;
        const newCell = cloneDeep6({ ...curRowCell, rowSpan });
        if ((_a3 = newCell.attributes) == null ? void 0 : _a3.rowspan) {
          newCell.attributes.rowspan = rowSpan.toString();
        }
        editor.tf.setNodes(newCell, { at: curCellPath });
      });
      const rowToDelete = table.children[deletingRowIndex];
      const rowPath = editor.api.findPath(rowToDelete);
      Array.from({ length: rowsDeleteNumber }).forEach(() => {
        editor.tf.removeNodes({
          at: rowPath
        });
      });
    }
  };
  var deleteRow = (editor) => {
    const { getOptions: getOptions2, type } = plate.getEditorPlugin(editor, {
      key: "table"
    });
    const { disableMerge } = getOptions2();
    if (!disableMerge) {
      return deleteTableMergeRow(editor);
    }
    if (editor.api.some({
      match: { type }
    })) {
      const currentTableItem = editor.api.above({
        match: { type }
      });
      if (!currentTableItem)
        return;
      if (editor.api.isExpanded())
        return deleteRowWhenExpanded(editor, currentTableItem);
      const currentRowItem = editor.api.above({
        match: { type: editor.getType(BaseTableRowPlugin) }
      });
      if (currentRowItem && currentTableItem && // Cannot delete the last row
      currentTableItem[0].children.length > 1) {
        editor.tf.removeNodes({
          at: currentRowItem[1]
        });
      }
    }
  };
  var deleteTable = (editor) => {
    if (editor.api.some({
      match: { type: editor.getType(BaseTablePlugin) }
    })) {
      const tableItem = editor.api.above({
        match: { type: editor.getType(BaseTablePlugin) }
      });
      if (tableItem) {
        editor.tf.removeNodes({
          at: tableItem[1]
        });
      }
    }
  };
  var insertTable = (editor, { colCount = 2, header, rowCount = 2 } = {}, { select: shouldSelect, ...options } = {}) => {
    const { api } = editor.getPlugin({ key: "table" });
    const type = editor.getType(BaseTablePlugin);
    editor.tf.withoutNormalizing(() => {
      const newTable = api.create.table({
        colCount,
        header,
        rowCount
      });
      if (!options.at) {
        const currentTableEntry = editor.api.block({
          match: { type }
        });
        if (currentTableEntry) {
          const [, tablePath] = currentTableEntry;
          const insertPath = plate.PathApi.next(tablePath);
          editor.tf.insertNodes(newTable, {
            at: insertPath,
            ...options
          });
          if (editor.selection) {
            editor.tf.select(editor.api.start(insertPath));
          }
          return;
        }
      }
      editor.tf.insertNodes(newTable, {
        nextBlock: !options.at,
        select: shouldSelect,
        ...options
      });
      if (shouldSelect) {
        const tableEntry = editor.api.node({
          at: options.at,
          match: { type }
        });
        if (!tableEntry)
          return;
        editor.tf.select(editor.api.start(tableEntry[1]));
      }
    });
  };
  var getCellPath = (editor, tableEntry, curRowIndex, curColIndex) => {
    const [tableNode, tablePath] = tableEntry;
    const rowElem = tableNode.children[curRowIndex];
    const foundColIndex = rowElem.children.findIndex((c2) => {
      const cE = c2;
      const { col: colIndex } = getCellIndices(editor, cE);
      return colIndex === curColIndex;
    });
    return tablePath.concat([curRowIndex, foundColIndex]);
  };
  var insertTableMergeColumn = (editor, {
    at: at2,
    before: before2,
    fromCell,
    header,
    select: shouldSelect
  } = {}) => {
    const { api, getOptions: getOptions2, type } = plate.getEditorPlugin(editor, BaseTablePlugin);
    const { initialTableWidth, minColumnWidth } = getOptions2();
    if (at2 && !fromCell) {
      const table = plate.NodeApi.get(editor, at2);
      if ((table == null ? void 0 : table.type) === editor.getType(BaseTablePlugin)) {
        fromCell = plate.NodeApi.lastChild(editor, at2.concat([0]))[1];
        at2 = void 0;
      }
    }
    const cellEntry = fromCell ? editor.api.node({
      at: fromCell,
      match: { type: getCellTypes(editor) }
    }) : editor.api.block({
      match: { type: getCellTypes(editor) }
    });
    if (!cellEntry)
      return;
    const [, cellPath] = cellEntry;
    const cell = cellEntry[0];
    const tableEntry = editor.api.block({
      above: true,
      at: cellPath,
      match: { type }
    });
    if (!tableEntry)
      return;
    const [tableNode, tablePath] = tableEntry;
    const { col: cellColIndex } = getCellIndices(editor, cell);
    const cellColSpan = api.table.getColSpan(cell);
    let nextColIndex;
    let checkingColIndex;
    if (plate.PathApi.isPath(at2)) {
      nextColIndex = cellColIndex;
      checkingColIndex = cellColIndex - 1;
    } else {
      nextColIndex = before2 ? cellColIndex : cellColIndex + cellColSpan;
      checkingColIndex = before2 ? cellColIndex : cellColIndex + cellColSpan - 1;
    }
    const rowNumber = tableNode.children.length;
    const firstCol = nextColIndex <= 0;
    let placementCorrection = before2 ? 0 : 1;
    if (firstCol) {
      checkingColIndex = 0;
      placementCorrection = 0;
    }
    const affectedCellsSet = /* @__PURE__ */ new Set();
    Array.from({ length: rowNumber }, (_, i2) => i2).forEach((rI) => {
      const found = findCellByIndexes(editor, tableNode, rI, checkingColIndex);
      if (found) {
        affectedCellsSet.add(found);
      }
    });
    const affectedCells = Array.from(affectedCellsSet);
    affectedCells.forEach((curCell) => {
      var _a2;
      const { col: curColIndex, row: curRowIndex } = getCellIndices(
        editor,
        curCell
      );
      const curRowSpan = api.table.getRowSpan(curCell);
      const curColSpan = api.table.getColSpan(curCell);
      const currentCellPath = getCellPath(
        editor,
        tableEntry,
        curRowIndex,
        curColIndex
      );
      const endCurI = curColIndex + curColSpan - 1;
      if (endCurI >= nextColIndex && !firstCol && !before2) {
        const colSpan = curColSpan + 1;
        const newCell = cloneDeep6({ ...curCell, colSpan });
        if ((_a2 = newCell.attributes) == null ? void 0 : _a2.colspan) {
          newCell.attributes.colspan = colSpan.toString();
        }
        editor.tf.setNodes(newCell, { at: currentCellPath });
      } else {
        const curRowPath = currentCellPath.slice(0, -1);
        const curColPath = currentCellPath.at(-1);
        const placementPath = [
          ...curRowPath,
          before2 ? curColPath : curColPath + placementCorrection
        ];
        const row = editor.api.parent(currentCellPath);
        const rowElement = row[0];
        const emptyCell = {
          ...api.create.tableCell({ header, row: rowElement }),
          colSpan: 1,
          rowSpan: curRowSpan
        };
        editor.tf.insertNodes(emptyCell, {
          at: placementPath,
          select: shouldSelect
        });
      }
    });
    editor.tf.withoutNormalizing(() => {
      const { colSizes } = tableNode;
      if (colSizes) {
        let newColSizes = [
          ...colSizes.slice(0, nextColIndex),
          0,
          ...colSizes.slice(nextColIndex)
        ];
        if (initialTableWidth) {
          newColSizes[nextColIndex] = colSizes[nextColIndex] ?? colSizes[nextColIndex - 1] ?? initialTableWidth / colSizes.length;
          const oldTotal = colSizes.reduce((a2, b) => a2 + b, 0);
          const newTotal = newColSizes.reduce((a2, b) => a2 + b, 0);
          const maxTotal = Math.max(oldTotal, initialTableWidth);
          if (newTotal > maxTotal) {
            const factor = maxTotal / newTotal;
            newColSizes = newColSizes.map(
              (size2) => Math.max(minColumnWidth ?? 0, Math.floor(size2 * factor))
            );
          }
        }
        editor.tf.setNodes(
          {
            colSizes: newColSizes
          },
          {
            at: tablePath
          }
        );
      }
    });
  };
  var insertTableColumn = (editor, options = {}) => {
    const { api, getOptions: getOptions2, type } = plate.getEditorPlugin(editor, BaseTablePlugin);
    const { disableMerge, initialTableWidth, minColumnWidth } = getOptions2();
    if (!disableMerge) {
      return insertTableMergeColumn(editor, options);
    }
    const { before: before2, header, select: shouldSelect } = options;
    let { at: at2, fromCell } = options;
    if (at2 && !fromCell) {
      const table = plate.NodeApi.get(editor, at2);
      if ((table == null ? void 0 : table.type) === editor.getType(BaseTablePlugin)) {
        fromCell = plate.NodeApi.lastChild(editor, at2.concat([0]))[1];
        at2 = void 0;
      }
    }
    const cellEntry = editor.api.block({
      at: fromCell,
      match: { type: getCellTypes(editor) }
    });
    if (!cellEntry)
      return;
    const [, cellPath] = cellEntry;
    const tableEntry = editor.api.block({
      above: true,
      at: cellPath,
      match: { type }
    });
    if (!tableEntry)
      return;
    const [tableNode, tablePath] = tableEntry;
    let nextCellPath;
    let nextColIndex;
    if (plate.PathApi.isPath(at2)) {
      nextCellPath = at2;
      nextColIndex = at2.at(-1);
    } else {
      nextCellPath = before2 ? cellPath : plate.PathApi.next(cellPath);
      nextColIndex = before2 ? cellPath.at(-1) : cellPath.at(-1) + 1;
    }
    const currentRowIndex = cellPath.at(-2);
    editor.tf.withoutNormalizing(() => {
      tableNode.children.forEach((row, rowIndex) => {
        const insertCellPath = [...nextCellPath];
        if (plate.PathApi.isPath(at2)) {
          insertCellPath[at2.length - 2] = rowIndex;
        } else {
          insertCellPath[cellPath.length - 2] = rowIndex;
        }
        const isHeaderRow = header === void 0 ? row.children.every(
          (c2) => c2.type === editor.getType(BaseTableCellHeaderPlugin)
        ) : header;
        editor.tf.insertNodes(
          api.create.tableCell({
            header: isHeaderRow
          }),
          {
            at: insertCellPath,
            select: shouldSelect && rowIndex === currentRowIndex
          }
        );
      });
      const { colSizes } = tableNode;
      if (colSizes) {
        let newColSizes = [
          ...colSizes.slice(0, nextColIndex),
          0,
          ...colSizes.slice(nextColIndex)
        ];
        if (initialTableWidth) {
          newColSizes[nextColIndex] = colSizes[nextColIndex] ?? colSizes[nextColIndex - 1] ?? initialTableWidth / colSizes.length;
          const oldTotal = colSizes.reduce((a2, b) => a2 + b, 0);
          const newTotal = newColSizes.reduce((a2, b) => a2 + b, 0);
          const maxTotal = Math.max(oldTotal, initialTableWidth);
          if (newTotal > maxTotal) {
            const factor = maxTotal / newTotal;
            newColSizes = newColSizes.map(
              (size2) => Math.max(minColumnWidth ?? 0, Math.floor(size2 * factor))
            );
          }
        }
        editor.tf.setNodes(
          {
            colSizes: newColSizes
          },
          {
            at: tablePath
          }
        );
      }
    });
  };
  var insertTableMergeRow = (editor, {
    at: at2,
    before: before2,
    fromRow,
    header,
    select: shouldSelect
  } = {}) => {
    const { api, type } = plate.getEditorPlugin(editor, BaseTablePlugin);
    if (at2 && !fromRow) {
      const table = plate.NodeApi.get(editor, at2);
      if ((table == null ? void 0 : table.type) === editor.getType(BaseTablePlugin)) {
        fromRow = plate.NodeApi.lastChild(editor, at2)[1];
        at2 = void 0;
      }
    }
    const trEntry = editor.api.block({
      at: fromRow,
      match: { type: editor.getType(BaseTableRowPlugin) }
    });
    if (!trEntry)
      return;
    const [, trPath] = trEntry;
    const tableEntry = editor.api.block({
      above: true,
      at: trPath,
      match: { type }
    });
    if (!tableEntry)
      return;
    const tableNode = tableEntry[0];
    const cellEntry = editor.api.node({
      at: fromRow,
      match: { type: getCellTypes(editor) }
    });
    if (!cellEntry)
      return;
    const [cellNode, cellPath] = cellEntry;
    const cellElement = cellNode;
    const cellRowSpan = api.table.getRowSpan(cellElement);
    const { row: cellRowIndex } = getCellIndices(editor, cellElement);
    const rowPath = cellPath.at(-2);
    const tablePath = cellPath.slice(0, -2);
    let nextRowIndex;
    let checkingRowIndex;
    let nextRowPath;
    if (plate.PathApi.isPath(at2)) {
      nextRowIndex = at2.at(-1);
      checkingRowIndex = cellRowIndex - 1;
      nextRowPath = at2;
    } else {
      nextRowIndex = before2 ? cellRowIndex : cellRowIndex + cellRowSpan;
      checkingRowIndex = before2 ? cellRowIndex - 1 : cellRowIndex + cellRowSpan - 1;
      nextRowPath = [...tablePath, before2 ? rowPath : rowPath + cellRowSpan];
    }
    const firstRow = nextRowIndex === 0;
    if (firstRow) {
      checkingRowIndex = 0;
    }
    const colCount = getTableColumnCount(tableNode);
    const affectedCellsSet = /* @__PURE__ */ new Set();
    Array.from({ length: colCount }, (_, i2) => i2).forEach((cI) => {
      const found = findCellByIndexes(editor, tableNode, checkingRowIndex, cI);
      if (found) {
        affectedCellsSet.add(found);
      }
    });
    const affectedCells = Array.from(affectedCellsSet);
    const newRowChildren = [];
    affectedCells.forEach((cur) => {
      var _a2;
      if (!cur)
        return;
      const curCell = cur;
      const { col: curColIndex, row: curRowIndex } = getCellIndices(
        editor,
        curCell
      );
      const curRowSpan = api.table.getRowSpan(curCell);
      const curColSpan = api.table.getColSpan(curCell);
      const currentCellPath = getCellPath(
        editor,
        tableEntry,
        curRowIndex,
        curColIndex
      );
      const endCurI = curRowIndex + curRowSpan - 1;
      if (endCurI >= nextRowIndex && !firstRow) {
        const rowSpan = curRowSpan + 1;
        const newCell = cloneDeep6({ ...curCell, rowSpan });
        if ((_a2 = newCell.attributes) == null ? void 0 : _a2.rowspan) {
          newCell.attributes.rowspan = rowSpan.toString();
        }
        editor.tf.setNodes(newCell, { at: currentCellPath });
      } else {
        const row = editor.api.parent(currentCellPath);
        const rowElement = row[0];
        const emptyCell = api.create.tableCell({ header, row: rowElement });
        newRowChildren.push({
          ...emptyCell,
          colSpan: curColSpan,
          rowSpan: 1
        });
      }
    });
    editor.tf.withoutNormalizing(() => {
      editor.tf.insertNodes(
        {
          children: newRowChildren,
          type: editor.getType(BaseTableRowPlugin)
        },
        {
          at: nextRowPath,
          select: false
        }
      );
      if (shouldSelect) {
        const cellEntry2 = editor.api.node({
          at: nextRowPath,
          match: { type: getCellTypes(editor) }
        });
        if (cellEntry2) {
          const [, nextCellPath] = cellEntry2;
          editor.tf.select(nextCellPath);
        }
      }
    });
  };
  var insertTableRow = (editor, options = {}) => {
    const { api, getOptions: getOptions2, type } = plate.getEditorPlugin(editor, BaseTablePlugin);
    const { disableMerge } = getOptions2();
    if (!disableMerge) {
      return insertTableMergeRow(editor, options);
    }
    const { before: before2, header, select: shouldSelect } = options;
    let { at: at2, fromRow } = options;
    if (at2 && !fromRow) {
      const table = plate.NodeApi.get(editor, at2);
      if ((table == null ? void 0 : table.type) === editor.getType(BaseTablePlugin)) {
        fromRow = plate.NodeApi.lastChild(editor, at2)[1];
        at2 = void 0;
      }
    }
    const trEntry = editor.api.block({
      at: fromRow,
      match: { type: editor.getType(BaseTableRowPlugin) }
    });
    if (!trEntry)
      return;
    const [trNode, trPath] = trEntry;
    const tableEntry = editor.api.block({
      above: true,
      at: trPath,
      match: { type }
    });
    if (!tableEntry)
      return;
    const getEmptyRowNode2 = () => ({
      children: trNode.children.map((_, i2) => {
        const hasSingleRow = tableEntry[0].children.length === 1;
        const isHeaderColumn = !hasSingleRow && tableEntry[0].children.every(
          (n2) => n2.children[i2].type === editor.getType(BaseTableCellHeaderPlugin)
        );
        return api.create.tableCell({
          header: header ?? isHeaderColumn
        });
      }),
      type: editor.getType(BaseTableRowPlugin)
    });
    editor.tf.withoutNormalizing(() => {
      editor.tf.insertNodes(getEmptyRowNode2(), {
        at: plate.PathApi.isPath(at2) ? at2 : before2 ? trPath : plate.PathApi.next(trPath)
      });
    });
    if (shouldSelect) {
      const cellEntry = editor.api.block({
        match: { type: getCellTypes(editor) }
      });
      if (!cellEntry)
        return;
      const [, nextCellPath] = cellEntry;
      if (plate.PathApi.isPath(at2)) {
        nextCellPath[nextCellPath.length - 2] = at2.at(-2);
      } else {
        nextCellPath[nextCellPath.length - 2] = before2 ? nextCellPath.at(-2) : nextCellPath.at(-2) + 1;
      }
      editor.tf.select(nextCellPath);
    }
  };
  var setBorderSize = (editor, size2, {
    at: at2,
    border = "all"
  } = {}) => {
    const cellEntry = editor.api.node({
      at: at2,
      match: { type: getCellTypes(editor) }
    });
    if (!cellEntry)
      return;
    const [cellNode, cellPath] = cellEntry;
    const cellIndex = cellPath.at(-1);
    const rowIndex = cellPath.at(-2);
    const borderStyle = {
      size: size2
    };
    const setNodesOptions = {
      match: (n2) => plate.ElementApi.isElement(n2) && getCellTypes(editor).includes(n2.type)
    };
    if (border === "top") {
      const isFirstRow = rowIndex === 0;
      if (isFirstRow) {
        const newBorders2 = {
          ...cellNode.borders,
          top: borderStyle
        };
        editor.tf.setNodes(
          { borders: newBorders2 },
          {
            at: cellPath,
            ...setNodesOptions
          }
        );
        return;
      }
      const cellAboveEntry = getTopTableCell(editor, { at: cellPath });
      if (!cellAboveEntry)
        return;
      const [cellAboveNode, cellAbovePath] = cellAboveEntry;
      const newBorders = {
        ...cellAboveNode.borders,
        bottom: borderStyle
      };
      editor.tf.setNodes(
        { borders: newBorders },
        {
          at: cellAbovePath,
          ...setNodesOptions
        }
      );
    } else if (border === "bottom") {
      const newBorders = {
        ...cellNode.borders,
        bottom: borderStyle
      };
      editor.tf.setNodes(
        { borders: newBorders },
        {
          at: cellPath,
          ...setNodesOptions
        }
      );
    }
    if (border === "left") {
      const isFirstCell = cellIndex === 0;
      if (isFirstCell) {
        const newBorders2 = {
          ...cellNode.borders,
          left: borderStyle
        };
        editor.tf.setNodes(
          { borders: newBorders2 },
          {
            at: cellPath,
            ...setNodesOptions
          }
        );
        return;
      }
      const prevCellEntry = getLeftTableCell(editor, { at: cellPath });
      if (!prevCellEntry)
        return;
      const [prevCellNode, prevCellPath] = prevCellEntry;
      const newBorders = {
        ...prevCellNode.borders,
        right: borderStyle
      };
      editor.tf.setNodes(
        { borders: newBorders },
        {
          at: prevCellPath,
          ...setNodesOptions
        }
      );
    } else if (border === "right") {
      const newBorders = {
        ...cellNode.borders,
        right: borderStyle
      };
      editor.tf.setNodes(
        { borders: newBorders },
        {
          at: cellPath,
          ...setNodesOptions
        }
      );
    }
    if (border === "all") {
      editor.tf.withoutNormalizing(() => {
        setBorderSize(editor, size2, { at: at2, border: "top" });
        setBorderSize(editor, size2, { at: at2, border: "bottom" });
        setBorderSize(editor, size2, { at: at2, border: "left" });
        setBorderSize(editor, size2, { at: at2, border: "right" });
      });
    }
  };
  var deleteTableMergeColumn = (editor) => {
    const type = editor.getType(BaseTablePlugin);
    const tableEntry = editor.api.above({
      match: { type }
    });
    if (!tableEntry)
      return;
    editor.tf.withoutNormalizing(() => {
      const { api } = plate.getEditorPlugin(editor, BaseTablePlugin);
      if (editor.api.isExpanded()) {
        return deleteColumnWhenExpanded(editor, tableEntry);
      }
      const table = tableEntry[0];
      const selectedCellEntry = editor.api.above({
        match: {
          type: getCellTypes(editor)
        }
      });
      if (!selectedCellEntry)
        return;
      const selectedCell = selectedCellEntry[0];
      const { col: deletingColIndex } = getCellIndices(editor, selectedCell);
      const colsDeleteNumber = api.table.getColSpan(selectedCell);
      const endingColIndex = deletingColIndex + colsDeleteNumber - 1;
      const rowNumber = table.children.length;
      const affectedCellsSet = /* @__PURE__ */ new Set();
      Array.from({ length: rowNumber }, (_, i2) => i2).forEach((rI) => {
        return Array.from({ length: colsDeleteNumber }, (_, i2) => i2).forEach(
          (cI) => {
            const colIndex = deletingColIndex + cI;
            const found = findCellByIndexes(editor, table, rI, colIndex);
            if (found) {
              affectedCellsSet.add(found);
            }
          }
        );
      });
      const affectedCells = Array.from(affectedCellsSet);
      const { squizeColSpanCells } = affectedCells.reduce(
        (acc, cur) => {
          if (!cur)
            return acc;
          const currentCell = cur;
          const { col: curColIndex } = getCellIndices(editor, currentCell);
          const curColSpan = api.table.getColSpan(currentCell);
          if (curColIndex < deletingColIndex && curColSpan > 1) {
            acc.squizeColSpanCells.push(currentCell);
          } else if (curColSpan > 1 && curColIndex + curColSpan - 1 > endingColIndex) {
            acc.squizeColSpanCells.push(currentCell);
          }
          return acc;
        },
        { squizeColSpanCells: [] }
      );
      squizeColSpanCells.forEach((cur) => {
        var _a2;
        const curCell = cur;
        const { col: curColIndex, row: curColRowIndex } = getCellIndices(
          editor,
          curCell
        );
        const curColSpan = api.table.getColSpan(curCell);
        const curCellPath = getCellPath(
          editor,
          tableEntry,
          curColRowIndex,
          curColIndex
        );
        const curCellEndingColIndex = Math.min(
          curColIndex + curColSpan - 1,
          endingColIndex
        );
        const colsNumberAffected = curCellEndingColIndex - deletingColIndex + 1;
        const colSpan = curColSpan - colsNumberAffected;
        const newCell = cloneDeep6({ ...curCell, colSpan });
        if ((_a2 = newCell.attributes) == null ? void 0 : _a2.colspan) {
          newCell.attributes.colspan = colSpan.toString();
        }
        editor.tf.setNodes(newCell, { at: curCellPath });
      });
      const trEntry = editor.api.above({
        match: { type: editor.getType(BaseTableRowPlugin) }
      });
      if (selectedCell && trEntry && tableEntry && // Cannot delete the last cell
      trEntry[0].children.length > 1) {
        const [tableNode, tablePath] = tableEntry;
        const paths = [];
        affectedCells.forEach((cur) => {
          const curCell = cur;
          const { col: curColIndex, row: curRowIndex } = getCellIndices(
            editor,
            curCell
          );
          if (!squizeColSpanCells.includes(curCell) && curColIndex >= deletingColIndex && curColIndex <= endingColIndex) {
            const cellPath = getCellPath(
              editor,
              tableEntry,
              curRowIndex,
              curColIndex
            );
            if (!paths[curRowIndex]) {
              paths[curRowIndex] = [];
            }
            paths[curRowIndex].push(cellPath);
          }
        });
        paths.forEach((cellPaths) => {
          const pathToDelete = cellPaths[0];
          cellPaths.forEach(() => {
            editor.tf.removeNodes({
              at: pathToDelete
            });
          });
        });
        const { colSizes } = tableNode;
        if (colSizes) {
          const newColSizes = [...colSizes];
          newColSizes.splice(deletingColIndex, 1);
          editor.tf.setNodes(
            { colSizes: newColSizes },
            { at: tablePath }
          );
        }
      }
    });
  };
  var getTableMergedColumnCount = (tableNode) => {
    var _a2, _b, _c;
    return (_c = (_b = (_a2 = tableNode.children) == null ? void 0 : _a2[0]) == null ? void 0 : _b.children) == null ? void 0 : _c.reduce(
      (prev, cur) => prev + (getColSpan(cur) ?? 1),
      0
    );
  };
  var allEqual = (arr) => arr.every((val) => val === arr[0]);
  var isTableRectangular = (table) => {
    var _a2;
    const arr = [];
    (_a2 = table == null ? void 0 : table.children) == null ? void 0 : _a2.forEach((row, rI) => {
      var _a3;
      const rowEl = row;
      (_a3 = rowEl.children) == null ? void 0 : _a3.forEach((cell) => {
        const cellElem = cell;
        Array.from({
          length: getRowSpan(cellElem) || 1
        }).forEach((_, i2) => {
          if (!arr[rI + i2]) {
            arr[rI + i2] = 0;
          }
          arr[rI + i2] += getColSpan(cellElem);
        });
      });
    });
    return allEqual(arr);
  };
  var mergeTableCells = (editor) => {
    const { api } = plate.getEditorPlugin(editor, BaseTablePlugin);
    const cellEntries = getTableGridAbove(editor, {
      format: "cell"
    });
    editor.tf.withoutNormalizing(() => {
      let colSpan = 0;
      for (const entry of cellEntries) {
        const [cell, path2] = entry;
        const rowIndex = path2.at(-2);
        if (rowIndex === cellEntries[0][1].at(-2)) {
          const cellColSpan = api.table.getColSpan(cell);
          colSpan += cellColSpan;
        }
      }
      let rowSpan = 0;
      const { col } = getCellIndices(editor, cellEntries[0][0]);
      cellEntries.forEach((entry) => {
        const cell = entry[0];
        const { col: curCol } = getCellIndices(editor, cell);
        if (col === curCol) {
          rowSpan += api.table.getRowSpan(cell);
        }
      });
      const mergingCellChildren = [];
      for (const cellEntry of cellEntries) {
        const [el] = cellEntry;
        const cellChildren = api.table.getCellChildren(el);
        if (cellChildren.length !== 1 || !editor.api.isEmpty(cellChildren[0])) {
          mergingCellChildren.push(...cloneDeep6(cellChildren));
        }
      }
      const cols = {};
      cellEntries.forEach(([_entry, path2]) => {
        const rowIndex = path2.at(-2);
        if (cols[rowIndex]) {
          cols[rowIndex].push(path2);
        } else {
          cols[rowIndex] = [path2];
        }
      });
      Object.values(cols).forEach((paths) => {
        paths == null ? void 0 : paths.forEach(() => {
          editor.tf.removeNodes({ at: paths[0] });
        });
      });
      const mergedCell = {
        ...api.create.tableCell({
          children: mergingCellChildren,
          header: cellEntries[0][0].type === editor.getType(BaseTableCellHeaderPlugin)
        }),
        colSpan,
        rowSpan
      };
      editor.tf.insertNodes(mergedCell, { at: cellEntries[0][1] });
    });
    editor.tf.select(editor.api.end(cellEntries[0][1]));
  };
  var splitTableCell = (editor) => {
    const { api } = plate.getEditorPlugin(editor, BaseTablePlugin);
    const tableRowType = editor.getType(BaseTableRowPlugin);
    const cellEntries = getTableGridAbove(editor, { format: "cell" });
    const [[cellElem, path2]] = cellEntries;
    editor.tf.withoutNormalizing(() => {
      const createEmptyCell = (children) => {
        return {
          ...api.create.tableCell({
            children,
            header: cellElem.type === editor.getType(BaseTableCellHeaderPlugin)
          }),
          colSpan: 1,
          rowSpan: 1
        };
      };
      const tablePath = path2.slice(0, -2);
      const cellPath = path2.slice(-2);
      const [rowPath, colPath] = cellPath;
      const colSpan = api.table.getColSpan(cellElem);
      const rowSpan = api.table.getRowSpan(cellElem);
      const colPaths = [];
      for (let i2 = 0; i2 < colSpan; i2++) {
        colPaths.push(colPath + i2);
      }
      const { col } = getCellIndices(editor, cellElem);
      editor.tf.removeNodes({ at: path2 });
      const getClosestColPathForRow = (row, targetCol) => {
        const rowEntry = editor.api.node({
          at: [...tablePath, row],
          match: { type: tableRowType }
        });
        if (!rowEntry) {
          return 0;
        }
        const rowEl = rowEntry[0];
        let closestColPath = [];
        let smallestDiff = Number.POSITIVE_INFINITY;
        let isDirectionLeft = false;
        rowEl.children.forEach((cell) => {
          const cellElement = cell;
          const { col: cellCol } = getCellIndices(editor, cellElement);
          const diff2 = Math.abs(cellCol - targetCol);
          if (diff2 < smallestDiff) {
            smallestDiff = diff2;
            closestColPath = editor.api.findPath(cellElement);
            isDirectionLeft = cellCol < targetCol;
          }
        });
        if (closestColPath.length > 0) {
          const lastIndex = closestColPath.at(-1);
          if (isDirectionLeft) {
            return lastIndex + 1;
          }
          return lastIndex;
        }
        return 1;
      };
      for (let i2 = 0; i2 < rowSpan; i2++) {
        const currentRowPath = rowPath + i2;
        const pathForNextRows = getClosestColPathForRow(currentRowPath, col);
        const newRowChildren = [];
        const _rowPath = [...tablePath, currentRowPath];
        const rowEntry = editor.api.node({
          at: _rowPath,
          match: { type: tableRowType }
        });
        for (let j = 0; j < colPaths.length; j++) {
          const cellChildren = api.table.getCellChildren(cellElem);
          const cellToInsert = i2 === 0 && j === 0 ? createEmptyCell(cellChildren) : createEmptyCell();
          if (rowEntry) {
            const currentColPath = i2 === 0 ? colPaths[j] : pathForNextRows;
            const pathForNewCell = [...tablePath, currentRowPath, currentColPath];
            editor.tf.insertNodes(cellToInsert, { at: pathForNewCell });
          } else {
            newRowChildren.push(cellToInsert);
          }
        }
        if (!rowEntry) {
          editor.tf.insertNodes(
            {
              children: newRowChildren,
              type: editor.getType(BaseTableRowPlugin)
            },
            { at: _rowPath }
          );
        }
      }
    });
    editor.tf.select(editor.api.end(path2));
  };
  var parse$3 = ({ element, type }) => {
    const background = element.style.background || element.style.backgroundColor;
    if (background) {
      return {
        background,
        type
      };
    }
    return { type };
  };
  var BaseTableRowPlugin = plate.createSlatePlugin({
    key: "tr",
    node: { isElement: true },
    parsers: {
      html: {
        deserializer: {
          rules: [{ validNodeName: "TR" }]
        }
      }
    }
  });
  var BaseTableCellPlugin = plate.createSlatePlugin({
    key: "td",
    node: {
      dangerouslyAllowAttributes: ["colspan", "rowspan"],
      isElement: true,
      props: ({ element }) => {
        var _a2, _b;
        return {
          colSpan: (_a2 = element == null ? void 0 : element.attributes) == null ? void 0 : _a2.colspan,
          rowSpan: (_b = element == null ? void 0 : element.attributes) == null ? void 0 : _b.rowspan
        };
      }
    },
    parsers: {
      html: {
        deserializer: {
          attributeNames: ["rowspan", "colspan"],
          parse: parse$3,
          rules: [{ validNodeName: "TD" }]
        }
      }
    }
  });
  var BaseTableCellHeaderPlugin = plate.createSlatePlugin({
    key: "th",
    node: {
      dangerouslyAllowAttributes: ["colspan", "rowspan"],
      isElement: true,
      props: ({ element }) => {
        var _a2, _b;
        return {
          colSpan: (_a2 = element == null ? void 0 : element.attributes) == null ? void 0 : _a2.colspan,
          rowSpan: (_b = element == null ? void 0 : element.attributes) == null ? void 0 : _b.rowspan
        };
      }
    },
    parsers: {
      html: {
        deserializer: {
          attributeNames: ["rowspan", "colspan"],
          parse: parse$3,
          rules: [{ validNodeName: "TH" }]
        }
      }
    }
  });
  var BaseTablePlugin = plate.createTSlatePlugin({
    key: "table",
    // dependencies: [NodeIdPlugin.key],
    node: {
      isElement: true
    },
    normalizeInitialValue: normalizeInitialValueTable,
    options: {
      _cellIndices: {},
      disableMerge: false,
      minColumnWidth: 48,
      selectedCells: null,
      selectedTables: null
    },
    parsers: {
      html: {
        deserializer: {
          rules: [{ validNodeName: "TABLE" }]
        }
      }
    },
    plugins: [BaseTableRowPlugin, BaseTableCellPlugin, BaseTableCellHeaderPlugin]
  }).extendSelectors(({ getOptions: getOptions2 }) => ({
    cellIndices: (id2) => getOptions2()._cellIndices[id2]
  })).extendEditorApi(({ editor }) => ({
    create: {
      table: plate.bindFirst(getEmptyTableNode, editor),
      tableCell: plate.bindFirst(getEmptyCellNode, editor),
      tableRow: plate.bindFirst(getEmptyRowNode, editor)
    },
    table: {
      getCellBorders: plate.bindFirst(getTableCellBorders, editor),
      getCellSize: plate.bindFirst(getTableCellSize, editor),
      getColSpan,
      getRowSpan,
      getCellChildren: (cell) => cell.children
    }
  })).extendEditorTransforms(({ editor }) => ({
    insert: {
      table: plate.bindFirst(insertTable, editor),
      tableColumn: plate.bindFirst(insertTableColumn, editor),
      tableRow: plate.bindFirst(insertTableRow, editor)
    },
    remove: {
      table: plate.bindFirst(deleteTable, editor),
      tableColumn: plate.bindFirst(deleteColumn, editor),
      tableRow: plate.bindFirst(deleteRow, editor)
    },
    table: {
      merge: plate.bindFirst(mergeTableCells, editor),
      split: plate.bindFirst(splitTableCell, editor)
    }
  })).overrideEditor(withTable);
  var onKeyDownTable = ({
    editor,
    event,
    type
  }) => {
    if (event.defaultPrevented)
      return;
    const compositeKeyCode = 229;
    if (
      // This exception only occurs when IME composition is triggered, and can be identified by this keycode
      event.which === compositeKeyCode && editor.selection && editor.api.isExpanded()
    ) {
      const tdEntries = Array.from(
        editor.api.nodes({
          at: editor.selection,
          match: { type: getCellTypes(editor) }
        })
      );
      if (tdEntries.length > 1) {
        editor.tf.collapse({
          edge: "end"
        });
        return;
      }
    }
    const isKeyDown = {
      "shift+down": plate.isHotkey("shift+down", event),
      "shift+left": plate.isHotkey("shift+left", event),
      "shift+right": plate.isHotkey("shift+right", event),
      "shift+up": plate.isHotkey("shift+up", event)
    };
    Object.keys(isKeyDown).forEach((key) => {
      if (isKeyDown[key] && // if many cells are selected
      moveSelectionFromCell(editor, {
        edge: KEY_SHIFT_EDGES[key],
        reverse: key === "shift+up"
      })) {
        event.preventDefault();
        event.stopPropagation();
      }
    });
    const isTab = plate.Hotkeys.isTab(editor, event);
    const isUntab = plate.Hotkeys.isUntab(editor, event);
    if (isTab || isUntab) {
      const entries = getTableEntries(editor);
      if (!entries)
        return;
      const { cell, row } = entries;
      const [, cellPath] = cell;
      if (isUntab) {
        const previousCell = getPreviousTableCell(editor, cell, cellPath, row);
        if (previousCell) {
          const [, previousCellPath] = previousCell;
          editor.tf.select(previousCellPath);
        }
      } else if (isTab) {
        const nextCell = getNextTableCell(editor, cell, cellPath, row);
        if (nextCell) {
          const [, nextCellPath] = nextCell;
          editor.tf.select(nextCellPath);
        }
      }
      event.preventDefault();
      event.stopPropagation();
    }
    if (plate.isHotkey("mod+a", event)) {
      const res = editor.api.above({ match: { type } });
      if (!res)
        return;
      const [, tablePath] = res;
      editor.tf.select(tablePath);
      event.preventDefault();
      event.stopPropagation();
    }
  };
  var TableRowPlugin = toPlatePlugin(BaseTableRowPlugin);
  var TableCellPlugin = toPlatePlugin(BaseTableCellPlugin);
  var TableCellHeaderPlugin = toPlatePlugin(BaseTableCellHeaderPlugin);
  var TablePlugin = toPlatePlugin(BaseTablePlugin, {
    handlers: {
      onKeyDown: onKeyDownTable
    },
    plugins: [TableRowPlugin, TableCellPlugin, TableCellHeaderPlugin]
  });
  function setCellBorderSize(editor, cell, directions, size2) {
    const at2 = editor.api.findPath(cell);
    if (!at2)
      return;
    if (directions === "all") {
      setBorderSize(editor, size2, { at: at2, border: "all" });
    } else {
      for (const dir of directions) {
        setBorderSize(editor, size2, { at: at2, border: dir });
      }
    }
  }
  function setSelectedCellsBorder(editor, {
    border,
    cells
  }) {
    if (cells.length === 0)
      return;
    if (border === "none") {
      const { none: allNone } = getSelectedCellsBorders(editor, cells);
      const newSize2 = allNone ? 1 : 0;
      for (const cell of cells) {
        const cellPath = editor.api.findPath(cell);
        if (!cellPath)
          continue;
        const { col, row } = getCellIndices(editor, cell);
        const edges2 = [];
        if (row === 0)
          edges2.push("top");
        if (col === 0)
          edges2.push("left");
        edges2.push("bottom", "right");
        if (row > 0) {
          const cellAboveEntry = getTopTableCell(editor, { at: cellPath });
          if (cellAboveEntry) {
            const [cellAbove] = cellAboveEntry;
            setCellBorderSize(editor, cellAbove, ["bottom"], newSize2);
          }
        }
        if (col > 0) {
          const prevCellEntry = getLeftTableCell(editor, { at: cellPath });
          if (prevCellEntry) {
            const [prevCell] = prevCellEntry;
            setCellBorderSize(editor, prevCell, ["right"], newSize2);
          }
        }
        if (edges2.length > 0) {
          setCellBorderSize(editor, cell, edges2, newSize2);
        }
      }
      return;
    }
    if (border === "outer") {
      const { outer: allOut } = getSelectedCellsBorders(editor, cells);
      const newSize2 = allOut ? 0 : 1;
      const { maxCol: maxCol2, maxRow: maxRow2, minCol: minCol2, minRow: minRow2 } = getSelectedCellsBoundingBox(
        editor,
        cells
      );
      for (const cell of cells) {
        const { col, row } = getCellIndices(editor, cell);
        const cSpan = getColSpan(cell);
        const rSpan = getRowSpan(cell);
        for (let rr = row; rr < row + rSpan; rr++) {
          for (let cc = col; cc < col + cSpan; cc++) {
            const edges2 = [];
            if (rr === minRow2)
              edges2.push("top");
            if (rr === maxRow2)
              edges2.push("bottom");
            if (cc === minCol2)
              edges2.push("left");
            if (cc === maxCol2)
              edges2.push("right");
            if (edges2.length > 0) {
              setCellBorderSize(editor, cell, edges2, newSize2);
            }
          }
        }
      }
      return;
    }
    const allSet = isSelectedCellBorder(editor, cells, border);
    const newSize = allSet ? 0 : 1;
    const { maxCol, maxRow, minCol, minRow } = getSelectedCellsBoundingBox(
      editor,
      cells
    );
    for (const cell of cells) {
      const { col, row } = getCellIndices(editor, cell);
      const cSpan = getColSpan(cell);
      const rSpan = getRowSpan(cell);
      const cellPath = editor.api.findPath(cell);
      if (!cellPath)
        continue;
      const edges2 = [];
      if (border === "top" && row === minRow) {
        const isFirstRow = row === 0;
        if (isFirstRow) {
          edges2.push("top");
        } else {
          const cellAboveEntry = getTopTableCell(editor, { at: cellPath });
          if (cellAboveEntry) {
            const [cellAbove] = cellAboveEntry;
            setCellBorderSize(editor, cellAbove, ["bottom"], newSize);
          }
        }
      }
      if (border === "bottom" && row + rSpan - 1 === maxRow) {
        edges2.push("bottom");
      }
      if (border === "left" && col === minCol) {
        const isFirstCell = col === 0;
        if (isFirstCell) {
          edges2.push("left");
        } else {
          const prevCellEntry = getLeftTableCell(editor, { at: cellPath });
          if (prevCellEntry) {
            const [prevCell] = prevCellEntry;
            setCellBorderSize(editor, prevCell, ["right"], newSize);
          }
        }
      }
      if (border === "right" && col + cSpan - 1 === maxCol) {
        edges2.push("right");
      }
      if (edges2.length > 0) {
        setCellBorderSize(editor, cell, edges2, newSize);
      }
    }
  }
  var getOnSelectTableBorderFactory = (editor, selectedCells) => (border) => () => {
    if (!selectedCells || selectedCells.length === 0) {
      const cell = editor.api.block({ match: { type: getCellTypes(editor) } });
      if (cell) {
        selectedCells = [cell[0]];
      } else {
        return;
      }
    }
    const cellElems = selectedCells.map((v) => v);
    setSelectedCellsBorder(editor, { border, cells: cellElems });
  };
  var useIsCellSelected = (element) => {
    const selectedCells = usePluginOption(TablePlugin, "selectedCells");
    return !!(selectedCells == null ? void 0 : selectedCells.includes(element));
  };
  var useTableBordersDropdownMenuContentState = ({
    element: el
  } = {}) => {
    const { editor } = useEditorPlugin(TablePlugin);
    const element = useElement() ?? el;
    const selectedCells = usePluginOption(TablePlugin, "selectedCells");
    const borderStates = useEditorSelector(
      (editor2) => getSelectedCellsBorders(editor2, selectedCells),
      [selectedCells, element]
    );
    return {
      getOnSelectTableBorder: getOnSelectTableBorderFactory(
        editor,
        selectedCells
      ),
      hasBottomBorder: borderStates.bottom,
      hasLeftBorder: borderStates.left,
      hasNoBorders: borderStates.none,
      hasOuterBorders: borderStates.outer,
      hasRightBorder: borderStates.right,
      hasTopBorder: borderStates.top
    };
  };
  var useCellIndices = () => {
    const { editor } = useEditorPlugin(TablePlugin);
    const element = useElement();
    const cellIndices = usePluginOption(TablePlugin, "cellIndices", element.id);
    return React.useMemo(() => {
      if (!cellIndices) {
        return computeCellIndices(editor, {
          cellNode: element
        }) ?? { col: 0, row: 0 };
      }
      return cellIndices ?? { col: 0, row: 0 };
    }, [cellIndices, editor, element]);
  };
  function useTableCellBorders({
    element: el
  } = {}) {
    const { editor } = useEditorPlugin(TablePlugin);
    const element = useElement() ?? el;
    const cellIndices = useCellIndices();
    return React.useMemo(() => {
      return getTableCellBorders(editor, { cellIndices, element });
    }, [editor, element, cellIndices]);
  }
  var {
    TableProvider,
    tableStore,
    useTableSet,
    useTableState,
    useTableStore,
    useTableValue
  } = createAtomStore(
    {
      colSizeOverrides: atom(/* @__PURE__ */ new Map()),
      marginLeftOverride: null,
      rowSizeOverrides: atom(/* @__PURE__ */ new Map())
    },
    { name: "table" }
  );
  var useSelectedCells = () => {
    const readOnly = useReadOnly();
    const selected = useSelected();
    const editor = useEditorRef();
    const { setOption } = useEditorPlugin(TablePlugin);
    const selectedCells = usePluginOption(TablePlugin, "selectedCells");
    React.useEffect(() => {
      if (!selected || readOnly) {
        setOption("selectedCells", null);
        setOption("selectedTables", null);
      }
    }, [selected, editor, readOnly, setOption]);
    React.useEffect(() => {
      if (readOnly)
        return;
      const tableEntries = getTableGridAbove(editor, { format: "table" });
      const cellEntries = getTableGridAbove(editor, { format: "cell" });
      if ((cellEntries == null ? void 0 : cellEntries.length) > 1) {
        const cells = cellEntries.map((entry) => entry[0]);
        const tables = tableEntries.map((entry) => entry[0]);
        if (JSON.stringify(cells) !== JSON.stringify(selectedCells)) {
          setOption("selectedCells", cells);
          setOption("selectedTables", tables);
        }
      } else if (selectedCells) {
        setOption("selectedCells", null);
        setOption("selectedTables", null);
      }
    }, [editor, editor.selection, readOnly, selectedCells, setOption]);
  };
  var useTableColSizes = ({
    disableOverrides = false,
    transformColSizes
  } = {}) => {
    const colSizeOverrides = useTableValue("colSizeOverrides");
    const overriddenColSizes = useElementSelector(
      ([tableNode]) => {
        const colSizes = getTableOverriddenColSizes(
          tableNode,
          disableOverrides ? void 0 : colSizeOverrides
        );
        if (transformColSizes) {
          return transformColSizes(colSizes);
        }
        return colSizes;
      },
      [disableOverrides, colSizeOverrides, transformColSizes],
      {
        key: TablePlugin.key,
        equalityFn: (a2, b) => !!a2 && !!b && plate.PathApi.equals(a2, b)
      }
    );
    return overriddenColSizes;
  };
  var useTableElement = () => {
    const { editor, getOptions: getOptions2 } = useEditorPlugin(TablePlugin);
    const { disableMarginLeft } = getOptions2();
    const element = useElement();
    const selectedCells = usePluginOption(TablePlugin, "selectedCells");
    const marginLeftOverride = useTableValue("marginLeftOverride");
    const marginLeft = disableMarginLeft ? 0 : marginLeftOverride ?? element.marginLeft ?? 0;
    useSelectedCells();
    return {
      isSelectingCell: !!selectedCells,
      marginLeft,
      props: {
        onMouseDown: () => {
          if (selectedCells) {
            editor.tf.collapse();
          }
        }
      }
    };
  };
  function useTableCellSize({
    element: el
  } = {}) {
    const { api } = useEditorPlugin(TablePlugin);
    const element = useElement() ?? el;
    const colSizes = useTableColSizes();
    const cellIndices = useCellIndices();
    const rowSize = useElementSelector(
      ([node2]) => node2.size,
      [],
      {
        key: TableRowPlugin.key
      }
    );
    return React.useMemo(
      () => api.table.getCellSize({ cellIndices, colSizes, element, rowSize }),
      [api.table, cellIndices, colSizes, element, rowSize]
    );
  }
  var useTableCellElement = () => {
    var _a2;
    const { api, setOption } = useEditorPlugin(TablePlugin);
    const element = useElement();
    const isCellSelected = useIsCellSelected(element);
    const selectedCells = usePluginOption(TablePlugin, "selectedCells");
    React.useEffect(() => {
      if (selectedCells == null ? void 0 : selectedCells.some((v) => v.id === element.id && element !== v)) {
        setOption(
          "selectedCells",
          selectedCells.map((v) => v.id === element.id ? element : v)
        );
      }
    }, [element]);
    const rowSizeOverrides = useTableValue("rowSizeOverrides");
    const { minHeight, width } = useTableCellSize({ element });
    const borders = useTableCellBorders({ element });
    const { col, row } = useCellIndices();
    const colSpan = api.table.getColSpan(element);
    const rowSpan = api.table.getRowSpan(element);
    const endingRowIndex = row + rowSpan - 1;
    const endingColIndex = col + colSpan - 1;
    return {
      borders,
      colIndex: endingColIndex,
      colSpan,
      isSelectingCell: !!selectedCells,
      minHeight: ((_a2 = rowSizeOverrides.get) == null ? void 0 : _a2.call(rowSizeOverrides, endingRowIndex)) ?? minHeight,
      rowIndex: endingRowIndex,
      selected: isCellSelected,
      width
    };
  };
  var useTableMergeState = () => {
    const { api, getOptions: getOptions2 } = useEditorPlugin(TablePlugin);
    const { disableMerge } = getOptions2();
    if (disableMerge)
      return { canMerge: false, canSplit: false };
    const readOnly = useReadOnly();
    const someTable = useEditorSelector(
      (editor) => editor.api.some({ match: { type: TablePlugin.key } }),
      []
    );
    const selectionExpanded = useEditorSelector(
      (editor) => editor.api.isExpanded(),
      []
    );
    const collapsed = !readOnly && someTable && !selectionExpanded;
    const selectedTables = usePluginOption(TablePlugin, "selectedTables");
    const selectedTable = selectedTables == null ? void 0 : selectedTables[0];
    const selectedCellEntries = useEditorSelector(
      (editor) => getTableGridAbove(editor, {
        format: "cell"
      }),
      []
    );
    if (!selectedCellEntries)
      return { canMerge: false, canSplit: false };
    const canMerge = !readOnly && someTable && selectionExpanded && selectedCellEntries.length > 1 && isTableRectangular(selectedTable);
    const canSplit = collapsed && selectedCellEntries.length === 1 && (api.table.getColSpan(selectedCellEntries[0][0]) > 1 || api.table.getRowSpan(selectedCellEntries[0][0]) > 1);
    return { canMerge, canSplit };
  };
  const BlockquoteElement = cn$2.withRef(
    ({ children, className, ...props }, ref) => {
      return /* @__PURE__ */ React.createElement(
        PlateElement,
        {
          ref,
          as: "blockquote",
          className: cn$2.cn(
            className,
            "my-1 border-l-2 border-gray-200 pl-6 not-tina-prose text-gray-500"
          ),
          ...props
        },
        children
      );
    }
  );
  const buttonVariants$1 = classVarianceAuthority.cva(
    "inline-flex items-center justify-center whitespace-nowrap rounded text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
    {
      defaultVariants: {
        size: "default",
        variant: "default"
      },
      variants: {
        isMenu: {
          true: "h-auto w-full cursor-pointer justify-start"
        },
        size: {
          default: "h-10 px-4 py-2",
          icon: "size-10",
          lg: "h-11 rounded px-8",
          none: "",
          sm: "h-9 rounded px-3",
          sms: "size-9 rounded px-0",
          xs: "h-8 rounded px-3"
        },
        variant: {
          default: "bg-primary text-primary-foreground hover:bg-primary/90",
          destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
          ghost: "hover:bg-accent hover:text-accent-foreground",
          inlineLink: "text-base text-primary underline underline-offset-4",
          link: "text-primary underline-offset-4 hover:underline",
          outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
          secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80"
        }
      }
    }
  );
  const Button$2 = cn$2.withRef(({ asChild = false, className, isMenu, size: size2, variant, ...props }, ref) => {
    const Comp = asChild ? reactSlot.Slot : "button";
    return /* @__PURE__ */ React__namespace.createElement(
      Comp,
      {
        className: cn$2.cn(buttonVariants$1({ className, isMenu, size: size2, variant })),
        ref,
        contentEditable: false,
        type: "button",
        ...props
      }
    );
  });
  const DialogPortal = DialogPrimitive__namespace.Portal;
  const DialogOverlay = cn$2.withCn(
    DialogPrimitive__namespace.Overlay,
    "fixed inset-0 z-50 bg-black/80 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:animate-in data-[state=open]:fade-in-0"
  );
  cn$2.withRef(
    ({ children, className, ...props }, ref) => /* @__PURE__ */ React__namespace.createElement(DialogPortal, null, /* @__PURE__ */ React__namespace.createElement(DialogOverlay, null), /* @__PURE__ */ React__namespace.createElement(
      DialogPrimitive__namespace.Content,
      {
        ref,
        className: cn$2.cn(
          "data-[state=closed]:slide-out-to-left-1/2 data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-48% data-[state=closed]:slide-out-to-top-48% fixed top-1/2 left-1/2 z-50 grid w-full max-w-lg -translate-x-1/2 -translate-y-1/2 gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95 sm:rounded-lg",
          className
        ),
        ...props
      },
      children,
      /* @__PURE__ */ React__namespace.createElement(DialogPrimitive__namespace.Close, { className: "absolute top-4 right-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:ring-2 focus:ring-ring focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground" }, /* @__PURE__ */ React__namespace.createElement(lucideReact.X, { className: "size-4" }), /* @__PURE__ */ React__namespace.createElement("span", { className: "sr-only" }, "Close"))
    ))
  );
  cn$2.withCn(
    cn$2.createPrimitiveElement("div"),
    "flex flex-col space-y-1.5 text-center sm:text-left"
  );
  cn$2.withCn(
    cn$2.createPrimitiveElement("div"),
    "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2"
  );
  cn$2.withCn(
    DialogPrimitive__namespace.Title,
    "text-lg leading-none font-semibold tracking-tight"
  );
  cn$2.withCn(
    DialogPrimitive__namespace.Description,
    "text-sm text-muted-foreground"
  );
  const inputVariants$1 = classVarianceAuthority.cva(
    "flex w-full rounded bg-transparent text-sm file:border-0 file:bg-background file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50",
    {
      defaultVariants: {
        h: "md",
        variant: "default"
      },
      variants: {
        h: {
          md: "h-10 px-3 py-2",
          sm: "h-9 px-3 py-2"
        },
        variant: {
          default: "border border-input ring-offset-background focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
          ghost: "border-none focus-visible:ring-transparent"
        }
      }
    }
  );
  cn$2.withVariants("input", inputVariants$1, ["variant", "h"]);
  const commandVariants = classVarianceAuthority.cva(
    "flex size-full flex-col rounded-md bg-popover text-popover-foreground focus-visible:outline-hidden",
    {
      defaultVariants: {
        variant: "default"
      },
      variants: {
        variant: {
          combobox: "overflow-visible bg-transparent has-data-readonly:w-fit",
          default: "overflow-hidden"
        }
      }
    }
  );
  const Command$1 = cn$2.withVariants(cmdk.Command, commandVariants, [
    "variant"
  ]);
  const CommandInput$1 = cn$2.withRef(
    ({ className, ...props }, ref) => /* @__PURE__ */ React__namespace.createElement(
      "div",
      {
        className: "flex items-center border-b border-gray-200 px-3",
        "cmdk-input-wrapper": ""
      },
      /* @__PURE__ */ React__namespace.createElement(lucideReact.Search, { className: "mr-2 size-4 shrink-0 opacity-50" }),
      /* @__PURE__ */ React__namespace.createElement(
        cmdk.Command.Input,
        {
          ref,
          className: cn$2.cn(
            "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-hidden placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50 focus:outline-none",
            className
          ),
          ...props
        }
      )
    )
  );
  cn$2.withVariants(
    cmdk.Command.Input,
    inputVariants$1,
    ["variant"]
  );
  const CommandList$1 = cn$2.withCn(
    cmdk.Command.List,
    "max-h-[500px] overflow-x-hidden overflow-y-auto"
  );
  const CommandEmpty$1 = cn$2.withCn(
    cmdk.Command.Empty,
    "py-6 text-center text-sm"
  );
  const CommandGroup$1 = cn$2.withCn(
    cmdk.Command.Group,
    "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground"
  );
  cn$2.withCn(
    cmdk.Command.Separator,
    "-mx-1 h-px bg-border"
  );
  const CommandItem$1 = cn$2.withCn(
    cmdk.Command.Item,
    "relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0"
  );
  cn$2.withCn(
    cn$2.createPrimitiveElement("span"),
    "ml-auto text-xs tracking-widest text-muted-foreground"
  );
  const Popover$2 = PopoverPrimitive__namespace.Root;
  const PopoverTrigger$1 = PopoverPrimitive__namespace.Trigger;
  const popoverVariants$1 = classVarianceAuthority.cva(
    "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-hidden print:hidden",
    {
      defaultVariants: {
        animate: true
      },
      variants: {
        animate: {
          true: "data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95"
        }
      }
    }
  );
  const PopoverContent$1 = cn$2.withRef(({ align = "center", animate, className, sideOffset = 4, ...props }, ref) => /* @__PURE__ */ React__namespace.createElement(PopoverPrimitive__namespace.Portal, null, /* @__PURE__ */ React__namespace.createElement(
    PopoverPrimitive__namespace.Content,
    {
      ref,
      className: cn$2.cn(popoverVariants$1({ animate }), className),
      align,
      sideOffset,
      ...props
    }
  )));
  const languages = [
    // Base languages
    { label: "Plain Text", value: "plaintext" },
    { label: "Arduino", value: "arduino" },
    { label: "Bash", value: "bash" },
    { label: "C", value: "c" },
    { label: "C++", value: "cpp" },
    { label: "C#", value: "csharp" },
    { label: "CSS", value: "css" },
    { label: "Diff", value: "diff" },
    { label: "Go", value: "go" },
    { label: "GraphQL", value: "graphql" },
    { label: "INI", value: "ini" },
    { label: "Java", value: "java" },
    { label: "JavaScript", value: "javascript" },
    { label: "JSON", value: "json" },
    { label: "Kotlin", value: "kotlin" },
    { label: "Less", value: "less" },
    { label: "Lua", value: "lua" },
    { label: "Makefile", value: "makefile" },
    { label: "Mermaid", value: "mermaid" },
    { label: "Markdown", value: "markdown" },
    { label: "Objective-C", value: "objectivec" },
    { label: "Perl", value: "perl" },
    { label: "PHP", value: "php" },
    { label: "PHP Template", value: "php-template" },
    { label: "Python", value: "python" },
    { label: "Python REPL", value: "python-repl" },
    { label: "R", value: "r" },
    { label: "Ruby", value: "ruby" },
    { label: "Rust", value: "rust" },
    { label: "SCSS", value: "scss" },
    { label: "Shell", value: "shell" },
    { label: "SQL", value: "sql" },
    { label: "Swift", value: "swift" },
    { label: "TypeScript", value: "ts" },
    { label: "VB.Net", value: "vbnet" },
    { label: "WebAssembly", value: "wasm" },
    { label: "XML", value: "xml" },
    { label: "YAML", value: "yaml" },
    // Additional important languages
    { label: "ASCIIDoc", value: "asciidoc" },
    { label: "Clojure", value: "clojure" },
    { label: "CMake", value: "cmake" },
    { label: "Dart", value: "dart" },
    { label: "Django", value: "django" },
    { label: "Dockerfile", value: "dockerfile" },
    { label: "Elixir", value: "elixir" },
    { label: "Elm", value: "elm" },
    { label: "Erlang", value: "erlang" },
    { label: "Gradle", value: "gradle" },
    { label: "Groovy", value: "groovy" },
    { label: "Handlebars", value: "handlebars" },
    { label: "Haskell", value: "haskell" },
    { label: "HTML", value: "htmlbars" },
    { label: "Julia", value: "julia" },
    { label: "LaTeX", value: "latex" },
    { label: "MATLAB", value: "matlab" },
    { label: "NGINX", value: "nginx" },
    { label: "Nix", value: "nix" },
    { label: "OCaml", value: "ocaml" },
    { label: "PowerShell", value: "powershell" },
    { label: "Protocol Buffers", value: "protobuf" },
    { label: "Scala", value: "scala" },
    { label: "Verilog", value: "verilog" },
    { label: "VHDL", value: "vhdl" }
  ];
  function CodeBlockCombobox({
    onLanguageChange
  }) {
    var _a2;
    const [open2, setOpen] = React.useState(false);
    const readOnly = useReadOnly();
    const element = useElement();
    const value = element.lang || "plaintext";
    const [searchValue, setSearchValue] = React.useState("");
    const items2 = React.useMemo(
      () => languages.filter(
        (language) => !searchValue || language.label.toLowerCase().includes(searchValue.toLowerCase())
      ),
      [searchValue]
    );
    if (readOnly)
      return null;
    return /* @__PURE__ */ React.createElement(Popover$2, { open: open2, onOpenChange: setOpen }, /* @__PURE__ */ React.createElement(PopoverTrigger$1, { asChild: true, tabIndex: -1 }, /* @__PURE__ */ React.createElement(
      Button$2,
      {
        tabIndex: -1,
        size: "xs",
        className: cn$2.cn(
          "h-6 justify-between gap-1 px-2 text-xs text-muted-foreground select-none",
          "hover:bg-[#E2E8F0] bg-[#F1F5F9] text-[#64748B] hover:text-[#0F172A]",
          open2 && "bg-[#E2E8F0] text-[#0F172A]"
        ),
        "aria-expanded": open2,
        role: "combobox"
      },
      ((_a2 = languages.find((language) => language.value === value)) == null ? void 0 : _a2.label) ?? "Plain Text",
      /* @__PURE__ */ React.createElement(lucideReact.ChevronDown, { className: "size-4" })
    )), /* @__PURE__ */ React.createElement(
      PopoverContent$1,
      {
        className: "w-[200px] p-0 z-[10000]",
        onCloseAutoFocus: () => setSearchValue("")
      },
      /* @__PURE__ */ React.createElement(Command$1, { shouldFilter: false }, /* @__PURE__ */ React.createElement(
        CommandInput$1,
        {
          tabIndex: -1,
          className: "h-9",
          value: searchValue,
          onValueChange: (value2) => setSearchValue(value2),
          placeholder: "Search language..."
        }
      ), /* @__PURE__ */ React.createElement(CommandEmpty$1, null, "No language found."), /* @__PURE__ */ React.createElement(CommandList$1, { className: "h-48 overflow-y-auto" }, /* @__PURE__ */ React.createElement(CommandGroup$1, null, items2.map((language) => /* @__PURE__ */ React.createElement(
        CommandItem$1,
        {
          key: language.label,
          className: "cursor-pointer rounded-md",
          value: language.value,
          onSelect: (value2) => {
            onLanguageChange(value2);
            setSearchValue(value2);
            setOpen(false);
          }
        },
        /* @__PURE__ */ React.createElement(
          lucideReact.Check,
          {
            className: cn$2.cn(
              value === language.value ? "opacity-100" : "opacity-0"
            )
          }
        ),
        language.label
      )))))
    ));
  }
  const MermaidElementWithRef = ({ config }) => {
    const mermaidRef = React.useRef(null);
    React.useEffect(() => {
      if (mermaidRef.current) {
        mermaid.initialize({ startOnLoad: true });
        mermaid.init();
      }
    }, [config]);
    return /* @__PURE__ */ React.createElement("div", { contentEditable: false, className: "border-border border-b pt-10" }, /* @__PURE__ */ React.createElement("div", { ref: mermaidRef }, /* @__PURE__ */ React.createElement("pre", { className: "mermaid not-tina-prose" }, config)));
  };
  function ErrorMessage$1({ error: error2 }) {
    if (!error2)
      return null;
    return /* @__PURE__ */ React.createElement(
      "div",
      {
        contentEditable: false,
        className: "mt-2 flex items-start rounded-md border border-red-300 bg-red-50 p-3 shadow-sm",
        role: "alert"
      },
      /* @__PURE__ */ React.createElement("div", { className: "flex-shrink-0" }, /* @__PURE__ */ React.createElement(lucideReact.AlertTriangle, { className: "h-5 w-5 text-red-400", "aria-hidden": "true" })),
      /* @__PURE__ */ React.createElement("div", { className: "ml-3 flex-1" }, /* @__PURE__ */ React.createElement("pre", { className: "m-0 font-mono text-sm text-red-700 whitespace-pre-wrap break-words" }, error2))
    );
  }
  function codeLineToString(content) {
    return (content.children || []).map(
      (line) => (line.children || []).map((textNode) => textNode.text).join("")
    ).join("\n");
  }
  const CodeBlockElement = cn$2.withRef(
    ({ children, className, ...props }, ref) => {
      const { editor, element } = props;
      const [isEditing, setIsEditing] = React.useState(true);
      const [codeBlockError, setCodeBlockError] = React.useState(null);
      React.useEffect(() => {
        if (element.lang !== "mermaid") {
          return;
        }
        if (mermaid.parse(codeLineToString(element))) {
          setCodeBlockError(null);
        }
      }, [element.children]);
      mermaid.parseError = (err) => {
        setCodeBlockError(
          String(err.message) || "An error occurred while parsing the diagram."
        );
      };
      return /* @__PURE__ */ React.createElement(
        PlateElement,
        {
          ref,
          className: cn$2.cn(className, "py-1 not-tina-prose"),
          ...props
        },
        /* @__PURE__ */ React.createElement("style", null, `
          .tina-code-block .hljs-comment,
          .tina-code-block .hljs-code,
          .tina-code-block .hljs-formula { color: #6a737d; }
          .tina-code-block .hljs-keyword,
          .tina-code-block .hljs-doctag,
          .tina-code-block .hljs-template-tag,
          .tina-code-block .hljs-template-variable,
          .tina-code-block .hljs-type,
          .tina-code-block .hljs-variable.language_ { color: #d73a49; }
          .tina-code-block .hljs-title,
          .tina-code-block .hljs-title.class_,
          .tina-code-block .hljs-title.class_.inherited__,
          .tina-code-block .hljs-title.function_ { color: #6f42c1; }
          .tina-code-block .hljs-attr,
          .tina-code-block .hljs-attribute,
          .tina-code-block .hljs-literal,
          .tina-code-block .hljs-meta,
          .tina-code-block .hljs-number,
          .tina-code-block .hljs-operator,
          .tina-code-block .hljs-selector-attr,
          .tina-code-block .hljs-selector-class,
          .tina-code-block .hljs-selector-id,
          .tina-code-block .hljs-variable { color: #005cc5; }
          .tina-code-block .hljs-regexp,
          .tina-code-block .hljs-string,
          .tina-code-block .hljs-meta_.hljs-string { color: #0366d6; }
          .tina-code-block .hljs-built_in,
          .tina-code-block .hljs-symbol { color: #e36209; }
          .tina-code-block .hljs-name,
          .tina-code-block .hljs-quote,
          .tina-code-block .hljs-selector-tag,
          .tina-code-block .hljs-selector-pseudo { color: #22863a; }
          .tina-code-block .hljs-emphasis { font-style: italic; }
          .tina-code-block .hljs-strong { font-weight: bold; }
          .tina-code-block .hljs-section { font-weight: bold; color: #005cc5; }
          .tina-code-block .hljs-bullet { color: #735c0f; }
          .tina-code-block .hljs-addition { background: #f0fff4; color: #22863a; }
          .tina-code-block .hljs-deletion { background: #ffeef0; color: #b31d28; }
          .slate-code_line > span:last-child {margin-right: 1rem;}
        `),
        /* @__PURE__ */ React.createElement("div", { className: "relative rounded-md bg-[#F1F5F9] shadow-sm" }, isEditing ? /* @__PURE__ */ React.createElement(
          "pre",
          {
            spellCheck: false,
            className: "overflow-x-auto p-4 pt-12 font-mono text-sm leading-[normal] [tab-size:2] print:break-inside-avoid my-2 tina-code-block"
          },
          /* @__PURE__ */ React.createElement("code", null, children),
          /* @__PURE__ */ React.createElement(ErrorMessage$1, { error: codeBlockError })
        ) : /* @__PURE__ */ React.createElement(
          MermaidElementWithRef,
          {
            config: codeLineToString(element)
          }
        ), /* @__PURE__ */ React.createElement("div", { className: "absolute top-0 py-1 pr-1 rounded-t-md z-10 flex w-full justify-end gap-0.5 select-none border-b border-[#CBD5E1] bg-[#F1F5F9]" }, plateCodeBlock.isLangSupported(element.lang) && /* @__PURE__ */ React.createElement(
          Button$2,
          {
            tabIndex: -1,
            size: "icon",
            variant: "ghost",
            className: "size-6 text-xs",
            onClick: () => plateCodeBlock.formatCodeBlock(editor, { element }),
            title: "Format code"
          },
          /* @__PURE__ */ React.createElement(lucideReact.BracesIcon, { className: "!size-3.5 text-muted-foreground" })
        ), element.lang === "mermaid" && /* @__PURE__ */ React.createElement(
          Button$2,
          {
            tabIndex: -1,
            size: "xs",
            className: cn$2.cn(
              "h-6 justify-between gap-1 px-2 text-xs text-muted-foreground select-none",
              "hover:bg-[#E2E8F0] bg-[#F1F5F9] text-[#64748B] hover:text-[#0F172A]"
            ),
            onClick: () => setIsEditing(!isEditing)
          },
          isEditing ? "Preview" : "Edit"
        ), /* @__PURE__ */ React.createElement(
          CodeBlockCombobox,
          {
            onLanguageChange: (lang) => {
              setCodeBlockError(null);
              editor.tf.setNodes(
                { lang },
                { at: element }
              );
            }
          }
        )))
      );
    }
  );
  function CodeLeaf(props) {
    return /* @__PURE__ */ React.createElement(
      PlateLeaf,
      {
        ...props,
        as: "code",
        className: "rounded-md bg-muted px-[0.3em] py-[0.2em] font-mono text-sm whitespace-pre-wrap"
      },
      props.children
    );
  }
  const CodeLineElement = cn$2.withRef((props, ref) => /* @__PURE__ */ React.createElement(PlateElement, { ref, ...props }));
  function CodeSyntaxLeaf(props) {
    const tokenClassName = props.leaf.className;
    return /* @__PURE__ */ React.createElement(PlateLeaf, { className: tokenClassName, ...props });
  }
  function HrElement(props) {
    const readOnly = useReadOnly();
    const selected = useSelected();
    const focused = useFocused();
    return /* @__PURE__ */ React__namespace.createElement(PlateElement, { ...props }, /* @__PURE__ */ React__namespace.createElement("div", { contentEditable: false }, /* @__PURE__ */ React__namespace.createElement(
      "hr",
      {
        className: cn$2.cn(
          "mt-1 mb-2 h-0.5 rounded-sm border-none bg-gray-600 bg-clip-content mx-[10%] caret-transparent",
          selected && focused && "ring-2 ring-ring ring-offset-2",
          !readOnly && "cursor-pointer"
        )
      }
    )), props.children);
  }
  function LinkElement(props) {
    const { props: linkProps } = useLink({ element: props.element });
    const editor = useEditorRef();
    const isInCodeBlock = editor == null ? void 0 : editor.api.above({
      match: { type: editor.getType(CodeBlockPlugin) }
    });
    if (isInCodeBlock) {
      return /* @__PURE__ */ React__namespace.createElement(
        "code",
        {
          ...props.attributes,
          className: "rounded-md bg-muted px-[0.3em] py-[0.2em] font-mono text-sm whitespace-pre-wrap"
        },
        props.children
      );
    }
    return /* @__PURE__ */ React__namespace.createElement(
      PlateElement,
      {
        ...props,
        as: "a",
        className: "font-small underline underline-offset-2 text-blue-500 hover:text-blue-600 transition-color ease-out duration-150",
        attributes: {
          ...props.attributes,
          ...linkProps
        }
      },
      props.children
    );
  }
  const listVariants = classVarianceAuthority.cva("m-0 ps-6", {
    variants: {
      variant: {
        ol: "list-decimal",
        ul: "list-disc [&_ul]:list-[circle] [&_ul_ul]:list-[square]"
      }
    }
  });
  const ListElementVariants = cn$2.withVariants(PlateElement, listVariants, [
    "variant"
  ]);
  const ListElement = cn$2.withRef(
    ({ children, variant = "ul", ...props }, ref) => {
      return /* @__PURE__ */ React.createElement(ListElementVariants, { ref, as: variant, variant, ...props }, children);
    }
  );
  const ParagraphElement = withRef(
    ({ children, className, ...props }, ref) => {
      return /* @__PURE__ */ React.createElement(
        PlateElement,
        {
          ref,
          className: cn$2.cn(className, "m-0 px-0 py-1"),
          ...props
        },
        children
      );
    }
  );
  const RawMarkdown = () => {
    return /* @__PURE__ */ React.createElement(
      "svg",
      {
        stroke: "currentColor",
        fill: "currentColor",
        strokeWidth: 0,
        role: "img",
        className: "h-5 w-5",
        viewBox: "0 0 24 24",
        height: "1em",
        width: "1em",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ React.createElement("title", null),
      /* @__PURE__ */ React.createElement("path", { d: "M22.27 19.385H1.73A1.73 1.73 0 010 17.655V6.345a1.73 1.73 0 011.73-1.73h20.54A1.73 1.73 0 0124 6.345v11.308a1.73 1.73 0 01-1.73 1.731zM5.769 15.923v-4.5l2.308 2.885 2.307-2.885v4.5h2.308V8.078h-2.308l-2.307 2.885-2.308-2.885H3.46v7.847zM21.232 12h-2.309V8.077h-2.307V12h-2.308l3.461 4.039z" })
    );
  };
  const MermaidIcon = () => /* @__PURE__ */ React.createElement(
    "svg",
    {
      width: "100%",
      height: "100%",
      viewBox: "0 0 491 491",
      version: "1.1",
      xmlns: "http://www.w3.org/2000/svg",
      fillRule: "evenodd",
      clipRule: "evenodd",
      strokeLinejoin: "round",
      strokeMiterlimit: 2
    },
    /* @__PURE__ */ React.createElement("path", { d: "M490.16,84.61C490.16,37.912 452.248,0 405.55,0L84.61,0C37.912,0 0,37.912 0,84.61L0,405.55C0,452.248 37.912,490.16 84.61,490.16L405.55,490.16C452.248,490.16 490.16,452.248 490.16,405.55L490.16,84.61Z" }),
    /* @__PURE__ */ React.createElement(
      "path",
      {
        d: "M407.48,111.18C335.587,108.103 269.573,152.338 245.08,220C220.587,152.338 154.573,108.103 82.68,111.18C80.285,168.229 107.577,222.632 154.74,254.82C178.908,271.419 193.35,298.951 193.27,328.27L193.27,379.13L296.9,379.13L296.9,328.27C296.816,298.953 311.255,271.42 335.42,254.82C382.596,222.644 409.892,168.233 407.48,111.18Z",
        fill: "white",
        fillRule: "nonzero"
      }
    )
  );
  const borderAll = (props) => /* @__PURE__ */ React.createElement(
    "svg",
    {
      viewBox: "0 0 24 24",
      height: "48",
      width: "48",
      focusable: "false",
      role: "img",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React.createElement("path", { d: "M3 6a3 3 0 0 1 3-3h12a3 3 0 0 1 3 3v12a3 3 0 0 1-3 3H6a3 3 0 0 1-3-3V6zm10 13h5a1 1 0 0 0 1-1v-5h-6v6zm-2-6H5v5a1 1 0 0 0 1 1h5v-6zm2-2h6V6a1 1 0 0 0-1-1h-5v6zm-2-6H6a1 1 0 0 0-1 1v5h6V5z" })
  );
  const borderBottom = (props) => /* @__PURE__ */ React.createElement(
    "svg",
    {
      viewBox: "0 0 24 24",
      height: "48",
      width: "48",
      focusable: "false",
      role: "img",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React.createElement("path", { d: "M13 5a1 1 0 1 0 0-2h-2a1 1 0 1 0 0 2h2zm-8 6a1 1 0 1 0-2 0v2a1 1 0 1 0 2 0v-2zm-2 7a1 1 0 1 1 2 0 1 1 0 0 0 1 1h12a1 1 0 0 0 1-1 1 1 0 1 1 2 0 3 3 0 0 1-3 3H6a3 3 0 0 1-3-3zm17-8a1 1 0 0 0-1 1v2a1 1 0 1 0 2 0v-2a1 1 0 0 0-1-1zM7 4a1 1 0 0 0-1-1 3 3 0 0 0-3 3 1 1 0 0 0 2 0 1 1 0 0 1 1-1 1 1 0 0 0 1-1zm11-1a1 1 0 1 0 0 2 1 1 0 0 1 1 1 1 1 0 1 0 2 0 3 3 0 0 0-3-3z" })
  );
  const borderLeft = (props) => /* @__PURE__ */ React.createElement(
    "svg",
    {
      viewBox: "0 0 24 24",
      height: "48",
      width: "48",
      focusable: "false",
      role: "img",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React.createElement("path", { d: "M6 21a1 1 0 1 0 0-2 1 1 0 0 1-1-1V6a1 1 0 0 1 1-1 1 1 0 0 0 0-2 3 3 0 0 0-3 3v12a3 3 0 0 0 3 3zm7-16a1 1 0 1 0 0-2h-2a1 1 0 1 0 0 2h2zm6 6a1 1 0 1 1 2 0v2a1 1 0 1 1-2 0v-2zm-5 9a1 1 0 0 1-1 1h-2a1 1 0 1 1 0-2h2a1 1 0 0 1 1 1zm4-17a1 1 0 1 0 0 2 1 1 0 0 1 1 1 1 1 0 1 0 2 0 3 3 0 0 0-3-3zm-1 17a1 1 0 0 0 1 1 3 3 0 0 0 3-3 1 1 0 1 0-2 0 1 1 0 0 1-1 1 1 1 0 0 0-1 1z" })
  );
  const borderNone = (props) => /* @__PURE__ */ React.createElement(
    "svg",
    {
      viewBox: "0 0 24 24",
      height: "48",
      width: "48",
      focusable: "false",
      role: "img",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React.createElement("path", { d: "M14 4a1 1 0 0 1-1 1h-2a1 1 0 1 1 0-2h2a1 1 0 0 1 1 1zm-9 7a1 1 0 1 0-2 0v2a1 1 0 1 0 2 0v-2zm14 0a1 1 0 1 1 2 0v2a1 1 0 1 1-2 0v-2zm-6 10a1 1 0 1 0 0-2h-2a1 1 0 1 0 0 2h2zM7 4a1 1 0 0 0-1-1 3 3 0 0 0-3 3 1 1 0 0 0 2 0 1 1 0 0 1 1-1 1 1 0 0 0 1-1zm11-1a1 1 0 1 0 0 2 1 1 0 0 1 1 1 1 1 0 1 0 2 0 3 3 0 0 0-3-3zM7 20a1 1 0 0 1-1 1 3 3 0 0 1-3-3 1 1 0 1 1 2 0 1 1 0 0 0 1 1 1 1 0 0 1 1 1zm11 1a1 1 0 1 1 0-2 1 1 0 0 0 1-1 1 1 0 1 1 2 0 3 3 0 0 1-3 3z" })
  );
  const borderRight = (props) => /* @__PURE__ */ React.createElement(
    "svg",
    {
      viewBox: "0 0 24 24",
      height: "48",
      width: "48",
      focusable: "false",
      role: "img",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React.createElement("path", { d: "M13 5a1 1 0 1 0 0-2h-2a1 1 0 1 0 0 2h2zm-8 6a1 1 0 1 0-2 0v2a1 1 0 1 0 2 0v-2zm9 9a1 1 0 0 1-1 1h-2a1 1 0 1 1 0-2h2a1 1 0 0 1 1 1zM6 3a1 1 0 0 1 0 2 1 1 0 0 0-1 1 1 1 0 0 1-2 0 3 3 0 0 1 3-3zm1 17a1 1 0 0 1-1 1 3 3 0 0 1-3-3 1 1 0 1 1 2 0 1 1 0 0 0 1 1 1 1 0 0 1 1 1zm11 1a1 1 0 1 1 0-2 1 1 0 0 0 1-1V6a1 1 0 0 0-1-1 1 1 0 1 1 0-2 3 3 0 0 1 3 3v12a3 3 0 0 1-3 3z" })
  );
  const borderTop = (props) => /* @__PURE__ */ React.createElement(
    "svg",
    {
      viewBox: "0 0 24 24",
      height: "48",
      width: "48",
      focusable: "false",
      role: "img",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React.createElement("path", { d: "M3 6a1 1 0 0 0 2 0 1 1 0 0 1 1-1h12a1 1 0 0 1 1 1 1 1 0 1 0 2 0 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3zm2 5a1 1 0 1 0-2 0v2a1 1 0 1 0 2 0v-2zm14 0a1 1 0 1 1 2 0v2a1 1 0 1 1-2 0v-2zm-5 9a1 1 0 0 1-1 1h-2a1 1 0 1 1 0-2h2a1 1 0 0 1 1 1zm-8 1a1 1 0 1 0 0-2 1 1 0 0 1-1-1 1 1 0 1 0-2 0 3 3 0 0 0 3 3zm11-1a1 1 0 0 0 1 1 3 3 0 0 0 3-3 1 1 0 1 0-2 0 1 1 0 0 1-1 1 1 1 0 0 0-1 1z" })
  );
  classVarianceAuthority.cva("", {
    variants: {
      variant: {
        toolbar: "size-5",
        menuItem: "mr-2 size-5"
      },
      size: {
        sm: "mr-2 size-4",
        md: "mr-2 size-6"
      }
    },
    defaultVariants: {}
  });
  const DoubleColumnOutlined = (props) => /* @__PURE__ */ React.createElement(
    "svg",
    {
      fill: "none",
      height: "16",
      viewBox: "0 0 16 16",
      width: "16",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React.createElement(
      "path",
      {
        clipRule: "evenodd",
        d: "M8.5 3H13V13H8.5V3ZM7.5 2H8.5H13C13.5523 2 14 2.44772 14 3V13C14 13.5523 13.5523 14 13 14H8.5H7.5H3C2.44772 14 2 13.5523 2 13V3C2 2.44772 2.44772 2 3 2H7.5ZM7.5 13H3L3 3H7.5V13Z",
        fill: "#595E6F",
        fillRule: "evenodd"
      }
    )
  );
  const ThreeColumnOutlined = (props) => /* @__PURE__ */ React.createElement(
    "svg",
    {
      fill: "none",
      height: "16",
      viewBox: "0 0 16 16",
      width: "16",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React.createElement(
      "path",
      {
        clipRule: "evenodd",
        d: "M9.25 3H6.75V13H9.25V3ZM9.25 2H6.75H5.75H3C2.44772 2 2 2.44772 2 3V13C2 13.5523 2.44772 14 3 14H5.75H6.75H9.25H10.25H13C13.5523 14 14 13.5523 14 13V3C14 2.44772 13.5523 2 13 2H10.25H9.25ZM10.25 3V13H13V3H10.25ZM3 13H5.75V3H3L3 13Z",
        fill: "#4C5161",
        fillRule: "evenodd"
      }
    )
  );
  const RightSideDoubleColumnOutlined = (props) => /* @__PURE__ */ React.createElement(
    "svg",
    {
      fill: "none",
      height: "16",
      viewBox: "0 0 16 16",
      width: "16",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React.createElement(
      "path",
      {
        clipRule: "evenodd",
        d: "M11.25 3H13V13H11.25V3ZM10.25 2H11.25H13C13.5523 2 14 2.44772 14 3V13C14 13.5523 13.5523 14 13 14H11.25H10.25H3C2.44772 14 2 13.5523 2 13V3C2 2.44772 2.44772 2 3 2H10.25ZM10.25 13H3L3 3H10.25V13Z",
        fill: "#595E6F",
        fillRule: "evenodd"
      }
    )
  );
  const LeftSideDoubleColumnOutlined = (props) => /* @__PURE__ */ React.createElement(
    "svg",
    {
      fill: "none",
      height: "16",
      viewBox: "0 0 16 16",
      width: "16",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React.createElement(
      "path",
      {
        clipRule: "evenodd",
        d: "M5.75 3H13V13H5.75V3ZM4.75 2H5.75H13C13.5523 2 14 2.44772 14 3V13C14 13.5523 13.5523 14 13 14H5.75H4.75H3C2.44772 14 2 13.5523 2 13V3C2 2.44772 2.44772 2 3 2H4.75ZM4.75 13H3L3 3H4.75V13Z",
        fill: "#595E6F",
        fillRule: "evenodd"
      }
    )
  );
  const DoubleSideDoubleColumnOutlined = (props) => /* @__PURE__ */ React.createElement(
    "svg",
    {
      fill: "none",
      height: "16",
      viewBox: "0 0 16 16",
      width: "16",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ React.createElement(
      "path",
      {
        clipRule: "evenodd",
        d: "M10.25 3H5.75V13H10.25V3ZM10.25 2H5.75H4.75H3C2.44772 2 2 2.44772 2 3V13C2 13.5523 2.44772 14 3 14H4.75H5.75H10.25H11.25H13C13.5523 14 14 13.5523 14 13V3C14 2.44772 13.5523 2 13 2H11.25H10.25ZM11.25 3V13H13V3H11.25ZM3 13H4.75V3H3L3 13Z",
        fill: "#595E6F",
        fillRule: "evenodd"
      }
    )
  );
  const Overflow = (props) => /* @__PURE__ */ React.createElement(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      className: "h-5 w-5",
      fill: "none",
      viewBox: "0 0 24 24",
      stroke: "currentColor",
      ...props
    },
    /* @__PURE__ */ React.createElement(
      "path",
      {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: 2,
        d: "M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"
      }
    )
  );
  const Icons = {
    add: lucideReact.Plus,
    alignCenter: lucideReact.AlignCenter,
    alignJustify: lucideReact.AlignJustify,
    alignLeft: lucideReact.AlignLeft,
    alignRight: lucideReact.AlignRight,
    arrowDown: lucideReact.ChevronDown,
    bg: lucideReact.PaintBucket,
    blockquote: lucideReact.Quote,
    // bold: Bold,
    overflow: Overflow,
    borderAll,
    borderBottom,
    borderLeft,
    borderNone,
    borderRight,
    borderTop,
    check: lucideReact.Check,
    chevronRight: lucideReact.ChevronRight,
    chevronsUpDown: lucideReact.ChevronsUpDown,
    clear: lucideReact.X,
    close: lucideReact.X,
    // code: Code2,
    paint: lucideReact.PaintBucket,
    codeblock: lucideReact.FileCode,
    color: lucideReact.Baseline,
    column: lucideReact.RectangleVertical,
    combine: lucideReact.Combine,
    ungroup: lucideReact.Ungroup,
    comment: lucideReact.MessageSquare,
    commentAdd: lucideReact.MessageSquarePlus,
    delete: lucideReact.Trash,
    dragHandle: lucideReact.GripVertical,
    editing: lucideReact.Edit2,
    emoji: lucideReact.Smile,
    externalLink: lucideReact.ExternalLink,
    h1: lucideReact.Heading1,
    h2: lucideReact.Heading2,
    h3: lucideReact.Heading3,
    h4: lucideReact.Heading4,
    h5: lucideReact.Heading5,
    h6: lucideReact.Heading6,
    // image: Image,
    indent: lucideReact.Indent,
    // italic: Italic,
    kbd: lucideReact.Keyboard,
    lineHeight: lucideReact.WrapText,
    // link: Link2,
    minus: lucideReact.Minus,
    mermaid: MermaidIcon,
    more: lucideReact.MoreHorizontal,
    // ol: ListOrdered,
    outdent: lucideReact.Outdent,
    paragraph: lucideReact.Pilcrow,
    refresh: lucideReact.RotateCcw,
    row: lucideReact.RectangleHorizontal,
    search: lucideReact.Search,
    settings: lucideReact.Settings,
    strikethrough: lucideReact.Strikethrough,
    subscript: lucideReact.Subscript,
    superscript: lucideReact.Superscript,
    table: lucideReact.Table,
    text: lucideReact.Text,
    trash: lucideReact.Trash,
    // ul: List,
    underline: lucideReact.Underline,
    unlink: lucideReact.Link2Off,
    viewing: lucideReact.Eye,
    doubleColumn: DoubleColumnOutlined,
    doubleSideDoubleColumn: DoubleSideDoubleColumnOutlined,
    threeColumn: ThreeColumnOutlined,
    leftSideDoubleColumn: LeftSideDoubleColumnOutlined,
    rightSideDoubleColumn: RightSideDoubleColumnOutlined,
    horizontalRule: lucideReact.SeparatorHorizontal,
    heading: HeadingIcon,
    link: LinkIcon,
    quote: QuoteIcon,
    image: ImageIcon,
    ul: UnorderedListIcon,
    ol: OrderedListIcon,
    code: CodeIcon,
    codeBlock: CodeBlockIcon,
    bold: BoldIcon,
    italic: ItalicIcon,
    raw: RawMarkdown,
    // www
    gitHub: (props) => /* @__PURE__ */ React.createElement("svg", { viewBox: "0 0 438.549 438.549", ...props }, /* @__PURE__ */ React.createElement(
      "path",
      {
        fill: "currentColor",
        d: "M409.132 114.573c-19.608-33.596-46.205-60.194-79.798-79.8-33.598-19.607-70.277-29.408-110.063-29.408-39.781 0-76.472 9.804-110.063 29.408-33.596 19.605-60.192 46.204-79.8 79.8C9.803 148.168 0 184.854 0 224.63c0 47.78 13.94 90.745 41.827 128.906 27.884 38.164 63.906 64.572 108.063 79.227 5.14.954 8.945.283 11.419-1.996 2.475-2.282 3.711-5.14 3.711-8.562 0-.571-.049-5.708-.144-15.417a2549.81 2549.81 0 01-.144-25.406l-6.567 1.136c-4.187.767-9.469 1.092-15.846 1-6.374-.089-12.991-.757-19.842-1.999-6.854-1.231-13.229-4.086-19.13-8.559-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-.951-2.568-2.098-3.711-3.429-1.142-1.331-1.997-2.663-2.568-3.997-.572-1.335-.098-2.43 1.427-3.289 1.525-.859 4.281-1.276 8.28-1.276l5.708.853c3.807.763 8.516 3.042 14.133 6.851 5.614 3.806 10.229 8.754 13.846 14.842 4.38 7.806 9.657 13.754 15.846 17.847 6.184 4.093 12.419 6.136 18.699 6.136 6.28 0 11.704-.476 16.274-1.423 4.565-.952 8.848-2.383 12.847-4.285 1.713-12.758 6.377-22.559 13.988-29.41-10.848-1.14-20.601-2.857-29.264-5.14-8.658-2.286-17.605-5.996-26.835-11.14-9.235-5.137-16.896-11.516-22.985-19.126-6.09-7.614-11.088-17.61-14.987-29.979-3.901-12.374-5.852-26.648-5.852-42.826 0-23.035 7.52-42.637 22.557-58.817-7.044-17.318-6.379-36.732 1.997-58.24 5.52-1.715 13.706-.428 24.554 3.853 10.85 4.283 18.794 7.952 23.84 10.994 5.046 3.041 9.089 5.618 12.135 7.708 17.705-4.947 35.976-7.421 54.818-7.421s37.117 2.474 54.823 7.421l10.849-6.849c7.419-4.57 16.18-8.758 26.262-12.565 10.088-3.805 17.802-4.853 23.134-3.138 8.562 21.509 9.325 40.922 2.279 58.24 15.036 16.18 22.559 35.787 22.559 58.817 0 16.178-1.958 30.497-5.853 42.966-3.9 12.471-8.941 22.457-15.125 29.979-6.191 7.521-13.901 13.85-23.131 18.986-9.232 5.14-18.182 8.85-26.84 11.136-8.662 2.286-18.415 4.004-29.263 5.146 9.894 8.562 14.842 22.077 14.842 40.539v60.237c0 3.422 1.19 6.279 3.572 8.562 2.379 2.279 6.136 2.95 11.276 1.995 44.163-14.653 80.185-41.062 108.068-79.226 27.88-38.161 41.825-81.126 41.825-128.906-.01-39.771-9.818-76.454-29.414-110.049z"
      }
    )),
    logo: (props) => /* @__PURE__ */ React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", ...props }, /* @__PURE__ */ React.createElement(
      "path",
      {
        fill: "currentColor",
        d: "M11.572 0c-.176 0-.31.001-.358.007a19.76 19.76 0 0 1-.364.033C7.443.346 4.25 2.185 2.228 5.012a11.875 11.875 0 0 0-2.119 5.243c-.096.659-.108.854-.108 1.747s.012 1.089.108 1.748c.652 4.506 3.86 8.292 8.209 9.695.779.25 1.6.422 2.534.525.363.04 1.935.04 2.299 0 1.611-.178 2.977-.577 4.323-1.264.207-.106.247-.134.219-.158-.02-.013-.9-1.193-1.955-2.62l-1.919-2.592-2.404-3.558a338.739 338.739 0 0 0-2.422-3.556c-.009-.002-.018 1.579-.023 3.51-.007 3.38-.01 3.515-.052 3.595a.426.426 0 0 1-.206.214c-.075.037-.14.044-.495.044H7.81l-.108-.068a.438.438 0 0 1-.157-.171l-.05-.106.006-4.703.007-4.705.072-.092a.645.645 0 0 1 .174-.143c.096-.047.134-.051.54-.051.478 0 .558.018.682.154.035.038 1.337 1.999 2.895 4.361a10760.433 10760.433 0 0 0 4.735 7.17l1.9 2.879.096-.063a12.317 12.317 0 0 0 2.466-2.163 11.944 11.944 0 0 0 2.824-6.134c.096-.66.108-.854.108-1.748 0-.893-.012-1.088-.108-1.747-.652-4.506-3.859-8.292-8.208-9.695a12.597 12.597 0 0 0-2.499-.523A33.119 33.119 0 0 0 11.573 0zm4.069 7.217c.347 0 .408.005.486.047a.473.473 0 0 1 .237.277c.018.06.023 1.365.018 4.304l-.006 4.218-.744-1.14-.746-1.14v-3.066c0-1.982.01-3.097.023-3.15a.478.478 0 0 1 .233-.296c.096-.05.13-.054.5-.054z"
      }
    )),
    moon: lucideReact.Moon,
    sun: lucideReact.SunMedium,
    twitter: lucideReact.Twitter
  };
  function UnorderedListIcon(props) {
    const title = props.title || "format list bulleted";
    return /* @__PURE__ */ React.createElement(
      "svg",
      {
        className: "h-5 w-5",
        height: "24",
        width: "24",
        viewBox: "0 0 24 24",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ React.createElement("title", null, title),
      /* @__PURE__ */ React.createElement("g", { fill: "none" }, /* @__PURE__ */ React.createElement("path", { d: "M7 5h14v2H7V5z", fill: "currentColor" }), /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M4 7.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z",
          fill: "currentColor"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M7 11h14v2H7v-2zm0 6h14v2H7v-2zm-3 2.5c.82 0 1.5-.68 1.5-1.5s-.67-1.5-1.5-1.5-1.5.68-1.5 1.5.68 1.5 1.5 1.5z",
          fill: "currentColor"
        }
      ), /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M4 13.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z",
          fill: "currentColor"
        }
      ))
    );
  }
  function HeadingIcon(props) {
    const title = props.title || "format size";
    return /* @__PURE__ */ React.createElement(
      "svg",
      {
        height: "24",
        width: "24",
        className: "h-5 w-5",
        viewBox: "0 0 24 24",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ React.createElement("title", null, title),
      /* @__PURE__ */ React.createElement("g", { fill: "none" }, /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M9 4v3h5v12h3V7h5V4H9zm-6 8h3v7h3v-7h3V9H3v3z",
          fill: "currentColor"
        }
      ))
    );
  }
  function OrderedListIcon(props) {
    const title = props.title || "format list numbered";
    return /* @__PURE__ */ React.createElement(
      "svg",
      {
        className: "h-5 w-5",
        height: "24",
        width: "24",
        viewBox: "0 0 24 24",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ React.createElement("title", null, title),
      /* @__PURE__ */ React.createElement("g", { fill: "none" }, /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z",
          fill: "currentColor"
        }
      ))
    );
  }
  function QuoteIcon(props) {
    const title = props.title || "format quote";
    return /* @__PURE__ */ React.createElement(
      "svg",
      {
        height: "24",
        className: "h-5 w-5",
        width: "24",
        viewBox: "0 0 24 24",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ React.createElement("title", null, title),
      /* @__PURE__ */ React.createElement("g", { fill: "none" }, /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M6 17h3l2-4V7H5v6h3l-2 4zm8 0h3l2-4V7h-6v6h3l-2 4z",
          fill: "currentColor"
        }
      ))
    );
  }
  function LinkIcon(props) {
    const title = props.title || "insert link";
    return /* @__PURE__ */ React.createElement(
      "svg",
      {
        height: "24",
        className: "h-5 w-5",
        width: "24",
        viewBox: "0 0 24 24",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ React.createElement("title", null, title),
      /* @__PURE__ */ React.createElement("g", { fill: "none" }, /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1 0 1.71-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z",
          fill: "currentColor"
        }
      ))
    );
  }
  function CodeIcon(props) {
    const title = props.title || "code";
    return /* @__PURE__ */ React.createElement(
      "svg",
      {
        className: "h-5 w-5",
        height: "24",
        width: "24",
        viewBox: "0 0 24 24",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ React.createElement("title", null, title),
      /* @__PURE__ */ React.createElement("g", { fill: "none" }, /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z",
          fill: "currentColor"
        }
      ))
    );
  }
  function CodeBlockIcon(props) {
    const title = props.title || "code-block";
    return /* @__PURE__ */ React.createElement(
      "svg",
      {
        className: "h-5 w-5",
        stroke: "currentColor",
        fill: "currentColor",
        strokeWidth: 0,
        viewBox: "0 0 16 16",
        height: "1em",
        width: "1em",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ React.createElement("title", null, title),
      /* @__PURE__ */ React.createElement("path", { d: "M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z" }),
      /* @__PURE__ */ React.createElement("path", { d: "M6.854 4.646a.5.5 0 0 1 0 .708L4.207 8l2.647 2.646a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 0 1 .708 0zm2.292 0a.5.5 0 0 0 0 .708L11.793 8l-2.647 2.646a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708 0z" })
    );
  }
  function ImageIcon(props) {
    const title = props.title || "image";
    return /* @__PURE__ */ React.createElement(
      "svg",
      {
        className: "h-5 w-5",
        height: "24",
        width: "24",
        viewBox: "0 0 24 24",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ React.createElement("title", null, title),
      /* @__PURE__ */ React.createElement("g", { fill: "none" }, /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M19 5v14H5V5h14zm0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4.86 8.86l-3 3.87L9 13.14 6 17h12l-3.86-5.14z",
          fill: "currentColor"
        }
      ))
    );
  }
  function BoldIcon(props) {
    const title = props.title || "format bold";
    return /* @__PURE__ */ React.createElement(
      "svg",
      {
        className: "h-5 w-5",
        height: "24",
        width: "24",
        viewBox: "0 0 24 24",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ React.createElement("title", null, title),
      /* @__PURE__ */ React.createElement("g", { fill: "none" }, /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z",
          fill: "currentColor"
        }
      ))
    );
  }
  function ItalicIcon(props) {
    const title = props.title || "format italic";
    return /* @__PURE__ */ React.createElement(
      "svg",
      {
        className: "h-5 w-5",
        height: "24",
        width: "24",
        viewBox: "0 0 24 24",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ React.createElement("title", null, title),
      /* @__PURE__ */ React.createElement("g", { fill: "none" }, /* @__PURE__ */ React.createElement(
        "path",
        {
          d: "M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4h-8z",
          fill: "currentColor"
        }
      ))
    );
  }
  function PlusIcon({ className = "" }) {
    return /* @__PURE__ */ React.createElement(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        className: `h-4 w-4 ${className}`,
        viewBox: "0 0 20 20",
        fill: "currentColor"
      },
      /* @__PURE__ */ React.createElement(
        "path",
        {
          fillRule: "evenodd",
          d: "M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z",
          clipRule: "evenodd"
        }
      )
    );
  }
  var useComboboxInput = ({
    autoFocus = true,
    cancelInputOnArrowLeftRight = true,
    cancelInputOnBackspace = true,
    cancelInputOnBlur = true,
    cancelInputOnDeselect = true,
    cancelInputOnEscape = true,
    cursorState,
    forwardUndoRedoToEditor = true,
    ref,
    onCancelInput
  }) => {
    const editor = useEditorRef();
    const element = useElement();
    const selected = useSelected();
    const cursorAtStart = (cursorState == null ? void 0 : cursorState.atStart) ?? false;
    const cursorAtEnd = (cursorState == null ? void 0 : cursorState.atEnd) ?? false;
    const removeInput = React.useCallback(
      (shouldFocusEditor = false) => {
        const path2 = editor.api.findPath(element);
        if (!path2)
          return;
        editor.tf.removeNodes({ at: path2 });
        if (shouldFocusEditor) {
          editor.tf.focus();
        }
      },
      [editor, element]
    );
    const cancelInput = React.useCallback(
      (cause = "manual", shouldFocusEditor = false) => {
        removeInput(shouldFocusEditor);
        onCancelInput == null ? void 0 : onCancelInput(cause);
      },
      [onCancelInput, removeInput]
    );
    React.useEffect(() => {
      var _a2;
      if (autoFocus) {
        (_a2 = ref.current) == null ? void 0 : _a2.focus();
      }
    }, [autoFocus, ref]);
    const previousSelected = React.useRef(selected);
    React.useEffect(() => {
      if (previousSelected.current && !selected && cancelInputOnDeselect) {
        cancelInput("deselect");
      }
      previousSelected.current = selected;
    }, [selected, cancelInputOnDeselect, cancelInput]);
    return {
      cancelInput,
      props: {
        onBlur: () => {
          if (cancelInputOnBlur) {
            cancelInput("blur");
          }
        },
        onKeyDown: (event) => {
          if (cancelInputOnEscape && plate.isHotkey("escape", event)) {
            cancelInput("escape", true);
          }
          if (cancelInputOnBackspace && cursorAtStart && plate.isHotkey("backspace", event)) {
            cancelInput("backspace", true);
          }
          if (cancelInputOnArrowLeftRight && cursorAtStart && plate.isHotkey("arrowleft", event)) {
            cancelInput("arrowLeft", true);
          }
          if (cancelInputOnArrowLeftRight && cursorAtEnd && plate.isHotkey("arrowright", event)) {
            cancelInput("arrowRight", true);
          }
          const isUndo = plate.Hotkeys.isUndo(event) && editor.history.undos.length > 0;
          const isRedo = plate.Hotkeys.isRedo(event) && editor.history.redos.length > 0;
          if (forwardUndoRedoToEditor && (isUndo || isRedo)) {
            event.preventDefault();
            editor[isUndo ? "undo" : "redo"]();
            editor.tf.focus();
          }
        }
      },
      removeInput
    };
  };
  var useHTMLInputCursorState = (ref) => {
    const [atStart, setAtStart] = React.useState(false);
    const [atEnd, setAtEnd] = React.useState(false);
    const recomputeCursorState = React.useCallback(() => {
      setTimeout(() => {
        if (!ref.current)
          return;
        const { selectionEnd, selectionStart, value } = ref.current;
        setAtStart(selectionStart === 0);
        setAtEnd(selectionEnd === value.length);
      });
    }, [ref]);
    React.useEffect(() => {
      recomputeCursorState();
      const input = ref.current;
      if (!input)
        return;
      input.addEventListener("input", recomputeCursorState);
      input.addEventListener("selectionchange", recomputeCursorState);
      input.addEventListener("keydown", recomputeCursorState);
      input.addEventListener("pointerdown", recomputeCursorState);
      input.addEventListener("pointerup", recomputeCursorState);
      return () => {
        input.removeEventListener("input", recomputeCursorState);
        input.removeEventListener("selectionchange", recomputeCursorState);
        input.removeEventListener("keydown", recomputeCursorState);
        input.removeEventListener("pointerdown", recomputeCursorState);
        input.removeEventListener("pointerup", recomputeCursorState);
      };
    }, [recomputeCursorState, ref]);
    return React.useMemo(
      () => ({
        atEnd,
        atStart
      }),
      [atStart, atEnd]
    );
  };
  const InlineComboboxContext = React.createContext(
    null
  );
  const defaultFilter = ({ keywords: keywords2 = [], value }, search) => [value, ...keywords2].some((keyword) => plateCombobox.filterWords(keyword, search));
  const InlineCombobox = ({
    children,
    element,
    filter: filter2 = defaultFilter,
    hideWhenNoValue = false,
    setValue: setValueProp,
    showTrigger = true,
    trigger: trigger2,
    value: valueProp
  }) => {
    const editor = useEditorRef();
    const inputRef = React.useRef(null);
    const cursorState = useHTMLInputCursorState(inputRef);
    const [valueState, setValueState] = React.useState("");
    const hasValueProp = valueProp !== void 0;
    const value = hasValueProp ? valueProp : valueState;
    const setValue = React.useCallback(
      (newValue) => {
        setValueProp == null ? void 0 : setValueProp(newValue);
        if (!hasValueProp) {
          setValueState(newValue);
        }
      },
      [setValueProp, hasValueProp]
    );
    const [insertPoint, setInsertPoint] = React.useState(null);
    React.useEffect(() => {
      const path2 = editor.api.findPath(element);
      if (!path2)
        return;
      const point2 = editor.api.before(path2);
      if (!point2)
        return;
      const pointRef2 = editor.api.pointRef(point2);
      setInsertPoint(pointRef2);
      return () => {
        pointRef2.unref();
      };
    }, [editor, element]);
    const { props: inputProps, removeInput } = useComboboxInput({
      cancelInputOnBlur: true,
      cursorState,
      onCancelInput: (cause) => {
        if (cause !== "backspace") {
          editor.tf.insertText(trigger2 + value, {
            at: (insertPoint == null ? void 0 : insertPoint.current) ?? void 0
          });
        }
        if (cause === "arrowLeft" || cause === "arrowRight") {
          editor.tf.move({
            distance: 1,
            reverse: cause === "arrowLeft"
          });
        }
      },
      ref: inputRef
    });
    const [hasEmpty, setHasEmpty] = React.useState(false);
    const contextValue = React.useMemo(
      () => ({
        filter: filter2,
        inputProps,
        inputRef,
        removeInput,
        setHasEmpty,
        showTrigger,
        trigger: trigger2
      }),
      [
        trigger2,
        showTrigger,
        filter2,
        inputRef,
        inputProps,
        removeInput,
        setHasEmpty
      ]
    );
    const store = react.useComboboxStore({
      setValue: (newValue) => React.startTransition(() => setValue(newValue))
    });
    const items2 = store.useState("items");
    React.useEffect(() => {
      if (!store.getState().activeId) {
        store.setActiveId(store.first());
      }
    }, [items2, store]);
    return /* @__PURE__ */ React.createElement("span", { contentEditable: false }, /* @__PURE__ */ React.createElement(
      react.ComboboxProvider,
      {
        open: (items2.length > 0 || hasEmpty) && (!hideWhenNoValue || value.length > 0),
        store
      },
      /* @__PURE__ */ React.createElement(InlineComboboxContext.Provider, { value: contextValue }, children)
    ));
  };
  const InlineComboboxInput = React.forwardRef(({ className, ...props }, propRef) => {
    const {
      inputProps,
      inputRef: contextRef,
      showTrigger,
      trigger: trigger2
    } = React.useContext(InlineComboboxContext);
    const store = react.useComboboxContext();
    const value = store.useState("value");
    const ref = useComposedRef(propRef, contextRef);
    return /* @__PURE__ */ React.createElement(React.Fragment, null, showTrigger && trigger2, /* @__PURE__ */ React.createElement("span", { className: "relative min-h-[1lh]" }, /* @__PURE__ */ React.createElement(
      "span",
      {
        "aria-hidden": "true",
        className: "invisible overflow-hidden text-nowrap"
      },
      value || "​"
    ), /* @__PURE__ */ React.createElement(
      react.Combobox,
      {
        autoSelect: true,
        className: cn$2.cn(
          "absolute left-0 top-0 size-full bg-transparent outline-none",
          className
        ),
        ref,
        value,
        ...inputProps,
        ...props
      }
    )));
  });
  InlineComboboxInput.displayName = "InlineComboboxInput";
  const InlineComboboxContent = ({
    className,
    ...props
  }) => {
    return /* @__PURE__ */ React.createElement(react.Portal, null, /* @__PURE__ */ React.createElement(
      react.ComboboxPopover,
      {
        className: cn$2.cn(
          "z-[9999999] max-h-[288px] w-[300px] overflow-y-auto rounded bg-white shadow-md",
          className
        ),
        ...props
      }
    ));
  };
  const comboboxItemVariants = classVarianceAuthority.cva(
    "relative flex h-9 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none",
    {
      defaultVariants: {
        interactive: true
      },
      variants: {
        interactive: {
          false: "",
          true: "cursor-pointer transition-colors hover:bg-blue-500 hover:text-black data-[active-item=true]:bg-orange-400 data-[active-item=true]:text-black"
        }
      }
    }
  );
  const InlineComboboxItem = ({
    className,
    keywords: keywords2,
    onClick,
    ...props
  }) => {
    const { value } = props;
    const { filter: filter2, removeInput } = React.useContext(InlineComboboxContext);
    const store = react.useComboboxContext();
    const search = filter2 && store.useState("value");
    const visible = React.useMemo(
      () => !filter2 || filter2({ keywords: keywords2, value }, search),
      [filter2, value, keywords2, search]
    );
    if (!visible)
      return null;
    return /* @__PURE__ */ React.createElement(
      react.ComboboxItem,
      {
        className: cn$2.cn(comboboxItemVariants(), className),
        onClick: (event) => {
          removeInput(true);
          onClick == null ? void 0 : onClick(event);
        },
        ...props
      }
    );
  };
  const InlineComboboxEmpty = ({
    children,
    className
  }) => {
    const { setHasEmpty } = React.useContext(InlineComboboxContext);
    const store = react.useComboboxContext();
    const items2 = store.useState("items");
    React.useEffect(() => {
      setHasEmpty(true);
      return () => {
        setHasEmpty(false);
      };
    }, [setHasEmpty]);
    if (items2.length > 0)
      return null;
    return /* @__PURE__ */ React.createElement(
      "div",
      {
        className: cn$2.cn(comboboxItemVariants({ interactive: false }), className)
      },
      children
    );
  };
  const rules = [
    {
      icon: Icons.h1,
      onSelect: (editor) => {
        editor.tf.toggleBlock(plateHeading.HEADING_KEYS.h1);
      },
      value: "Heading 1"
    },
    {
      icon: Icons.h2,
      onSelect: (editor) => {
        editor.tf.toggleBlock(plateHeading.HEADING_KEYS.h2);
      },
      value: "Heading 2"
    },
    {
      icon: Icons.h3,
      onSelect: (editor) => {
        editor.tf.toggleBlock(plateHeading.HEADING_KEYS.h3);
      },
      value: "Heading 3"
    },
    {
      icon: Icons.ul,
      keywords: ["ul", "unordered list"],
      onSelect: (editor) => {
        plateList.toggleList(editor, { type: BulletedListPlugin.key });
      },
      value: "Bulleted list"
    },
    {
      icon: Icons.ol,
      keywords: ["ol", "ordered list"],
      onSelect: (editor) => {
        plateList.toggleList(editor, { type: NumberedListPlugin.key });
      },
      value: "Numbered list"
    }
  ];
  const SlashInputElement = cn$2.withRef(
    ({ className, ...props }, ref) => {
      const { children, editor, element } = props;
      return /* @__PURE__ */ React.createElement(
        PlateElement,
        {
          as: "span",
          "data-slate-value": element.value,
          ref,
          ...props
        },
        /* @__PURE__ */ React.createElement(InlineCombobox, { element, trigger: "/" }, /* @__PURE__ */ React.createElement(InlineComboboxInput, null), /* @__PURE__ */ React.createElement(InlineComboboxContent, null, /* @__PURE__ */ React.createElement(InlineComboboxEmpty, null, "No matching commands found"), rules.map(({ icon: Icon, keywords: keywords2, onSelect, value }) => /* @__PURE__ */ React.createElement(
          InlineComboboxItem,
          {
            key: value,
            keywords: keywords2,
            onClick: () => onSelect(editor),
            value
          },
          /* @__PURE__ */ React.createElement(Icon, { "aria-hidden": true, className: "mr-2 size-4" }),
          value
        )))),
        children
      );
    }
  );
  var toggleSelection = function() {
    var selection = document.getSelection();
    if (!selection.rangeCount) {
      return function() {
      };
    }
    var active = document.activeElement;
    var ranges = [];
    for (var i2 = 0; i2 < selection.rangeCount; i2++) {
      ranges.push(selection.getRangeAt(i2));
    }
    switch (active.tagName.toUpperCase()) {
      case "INPUT":
      case "TEXTAREA":
        active.blur();
        break;
      default:
        active = null;
        break;
    }
    selection.removeAllRanges();
    return function() {
      selection.type === "Caret" && selection.removeAllRanges();
      if (!selection.rangeCount) {
        ranges.forEach(function(range2) {
          selection.addRange(range2);
        });
      }
      active && active.focus();
    };
  };
  var deselectCurrent = toggleSelection;
  var clipboardToIE11Formatting = {
    "text/plain": "Text",
    "text/html": "Url",
    "default": "Text"
  };
  var defaultMessage = "Copy to clipboard: #{key}, Enter";
  function format$2(message) {
    var copyKey = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
    return message.replace(/#{\s*key\s*}/g, copyKey);
  }
  function copy(text, options) {
    var debug2, message, reselectPrevious, range2, selection, mark2, success = false;
    if (!options) {
      options = {};
    }
    debug2 = options.debug || false;
    try {
      reselectPrevious = deselectCurrent();
      range2 = document.createRange();
      selection = document.getSelection();
      mark2 = document.createElement("span");
      mark2.textContent = text;
      mark2.ariaHidden = "true";
      mark2.style.all = "unset";
      mark2.style.position = "fixed";
      mark2.style.top = 0;
      mark2.style.clip = "rect(0, 0, 0, 0)";
      mark2.style.whiteSpace = "pre";
      mark2.style.webkitUserSelect = "text";
      mark2.style.MozUserSelect = "text";
      mark2.style.msUserSelect = "text";
      mark2.style.userSelect = "text";
      mark2.addEventListener("copy", function(e3) {
        e3.stopPropagation();
        if (options.format) {
          e3.preventDefault();
          if (typeof e3.clipboardData === "undefined") {
            debug2 && console.warn("unable to use e.clipboardData");
            debug2 && console.warn("trying IE specific stuff");
            window.clipboardData.clearData();
            var format2 = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
            window.clipboardData.setData(format2, text);
          } else {
            e3.clipboardData.clearData();
            e3.clipboardData.setData(options.format, text);
          }
        }
        if (options.onCopy) {
          e3.preventDefault();
          options.onCopy(e3.clipboardData);
        }
      });
      document.body.appendChild(mark2);
      range2.selectNodeContents(mark2);
      selection.addRange(range2);
      var successful = document.execCommand("copy");
      if (!successful) {
        throw new Error("copy command was unsuccessful");
      }
      success = true;
    } catch (err) {
      debug2 && console.error("unable to copy using execCommand: ", err);
      debug2 && console.warn("trying IE specific stuff");
      try {
        window.clipboardData.setData(options.format || "text", text);
        options.onCopy && options.onCopy(window.clipboardData);
        success = true;
      } catch (err2) {
        debug2 && console.error("unable to copy using clipboardData: ", err2);
        debug2 && console.error("falling back to prompt");
        message = format$2("message" in options ? options.message : defaultMessage);
        window.prompt(message, text);
      }
    } finally {
      if (selection) {
        if (typeof selection.removeRange == "function") {
          selection.removeRange(range2);
        } else {
          selection.removeAllRanges();
        }
      }
      if (mark2) {
        document.body.removeChild(mark2);
      }
      reselectPrevious();
    }
    return success;
  }
  var copyToClipboard = copy;
  const copyToClipboard$1 = /* @__PURE__ */ getDefaultExportFromCjs(copyToClipboard);
  var BLOCK_CONTEXT_MENU_ID = "context";
  var BlockMenuPlugin = createTPlatePlugin({
    key: "blockMenu",
    options: {
      openId: null,
      position: {
        x: -1e4,
        y: -1e4
      }
    }
  }).extendApi(
    ({ setOption, setOptions }) => ({
      hide: () => {
        setOptions({
          openId: null,
          position: {
            x: -1e4,
            y: -1e4
          }
        });
      },
      show: (id2, position) => {
        if (position) {
          setOptions({
            openId: id2,
            position
          });
        } else {
          setOption("openId", id2);
        }
      }
    })
  ).extendApi(
    ({ api, editor }) => ({
      showContextMenu: (blockId, position) => {
        var _a2;
        (_a2 = editor.getApi({ key: "blockSelection" }).blockSelection) == null ? void 0 : _a2.set(blockId);
        api.blockMenu.show(BLOCK_CONTEXT_MENU_ID, position);
      }
    })
  ).extend(({ api }) => ({
    handlers: {
      onMouseDown: ({ event, getOptions: getOptions2 }) => {
        if (event.button === 0 && getOptions2().openId) {
          event.preventDefault();
          api.blockMenu.hide();
        }
        if (event.button === 2)
          event.preventDefault();
      }
    }
  }));
  var selectBlocks = (editor, at2) => {
    const blockSelection = editor.getApi(BlockSelectionPlugin).blockSelection.getNodes();
    const entry = editor.api.node(at2);
    if (!entry)
      return;
    const [element, path2] = entry;
    const selectedBlocks = blockSelection.length > 0 ? blockSelection : editor.api.blocks({
      mode: "lowest",
      match: (_, p2) => p2.length === path2.length
    });
    const ids = selectedBlocks.map((block2) => block2[0].id);
    editor.getApi(BlockSelectionPlugin).blockSelection.set(ids.includes(element.id) ? ids : [element.id]);
  };
  var useBlockSelectable = () => {
    const element = useElement();
    const path2 = usePath();
    const { api, editor, getOption, getOptions: getOptions2, setOption } = useEditorPlugin({
      key: "blockSelection"
    });
    const id2 = element == null ? void 0 : element.id;
    return {
      props: api.blockSelection.isSelectable(element, path2) ? {
        className: "slate-selectable",
        onContextMenu: (event) => {
          var _a2, _b;
          if (!element)
            return;
          const { enableContextMenu } = getOptions2();
          if (!enableContextMenu)
            return;
          if ((_a2 = editor.selection) == null ? void 0 : _a2.focus) {
            const nodeEntry = editor.api.above();
            if (nodeEntry && plate.PathApi.isCommon(path2, nodeEntry[1])) {
              const id22 = nodeEntry[0].id;
              const isSelected2 = getOption("isSelected", id22);
              const isOpenAlways = ((_b = event.target.dataset) == null ? void 0 : _b.plateOpenContextMenu) === "true";
              if (!isSelected2 && !editor.api.isVoid(nodeEntry[0]) && !isOpenAlways) {
                return event.stopPropagation();
              }
            }
          }
          if (id2) {
            if (event == null ? void 0 : event.shiftKey) {
              api.blockSelection.add(id2);
            } else {
              const selectedIds = getOption("selectedIds");
              const clickAlreadySelected = selectedIds == null ? void 0 : selectedIds.has(id2);
              if (!clickAlreadySelected) {
                setOption("selectedIds", /* @__PURE__ */ new Set([id2]));
              }
            }
          }
        }
      } : {}
    };
  };
  var useBlockSelected = (_id) => {
    const { id: id2 } = useElement();
    const isBlockSelected = usePluginOption(
      BlockSelectionPlugin,
      "isSelected",
      _id ?? id2
    );
    return isBlockSelected;
  };
  var getRemoveCursorHandler = (id2) => ({ api }) => {
    api.cursorOverlay.removeCursor(id2);
  };
  createTPlatePlugin({
    key: "cursorOverlay",
    options: { cursors: {} }
  }).extendApi(
    ({ editor, plugin }) => ({
      addCursor: (id2, cursor) => {
        const newCursors = { ...editor.getOptions(plugin).cursors };
        newCursors[id2] = {
          id: id2,
          ...cursor
        };
        editor.setOption(plugin, "cursors", newCursors);
      },
      removeCursor: (id2) => {
        const newCursors = { ...editor.getOptions(plugin).cursors };
        if (!newCursors[id2])
          return;
        delete newCursors[id2];
        editor.setOption(plugin, "cursors", newCursors);
      }
    })
  ).overrideEditor(({ api, editor, getOptions: getOptions2, tf: { setSelection: setSelection2 } }) => ({
    transforms: {
      setSelection(props) {
        var _a2;
        if ((_a2 = getOptions2().cursors) == null ? void 0 : _a2.selection) {
          setTimeout(() => {
            api.cursorOverlay.addCursor("selection", {
              selection: editor.selection
            });
          }, 0);
        }
        setSelection2(props);
      }
    }
  })).extend(() => ({
    handlers: {
      onBlur: ({ api, editor, event }) => {
        var _a2;
        if (!editor.selection)
          return;
        const relatedTarget = event.relatedTarget;
        const enabled = ((_a2 = relatedTarget == null ? void 0 : relatedTarget.dataset) == null ? void 0 : _a2.plateFocus) === "true";
        if (!enabled)
          return;
        api.cursorOverlay.addCursor("selection", {
          selection: editor.selection
        });
      },
      onDragEnd: getRemoveCursorHandler("drag"),
      onDragLeave: getRemoveCursorHandler("drag"),
      onDragOver: ({ api, editor, event }) => {
        var _a2;
        if (!editor.plugins.dnd || editor.getOptions({ key: "dnd" }).isDragging) {
          return;
        }
        const types = ((_a2 = event.dataTransfer) == null ? void 0 : _a2.types) || [];
        if (types.some((type) => type.startsWith("Files")))
          return;
        const range2 = editor.api.findEventRange(event);
        if (!range2)
          return;
        api.cursorOverlay.addCursor("drag", {
          selection: range2
        });
      },
      onDrop: getRemoveCursorHandler("drag"),
      onFocus: getRemoveCursorHandler("selection")
    },
    useHooks: ({ api, setOption }) => {
      const isSelecting2 = usePluginOption(BlockSelectionPlugin, "isSelecting");
      React.useEffect(() => {
        if (isSelecting2) {
          setTimeout(() => {
            api.cursorOverlay.removeCursor("selection");
          }, 0);
        }
      }, [isSelecting2, setOption, api.cursorOverlay]);
    }
  }));
  var extractSelectableIds = (els) => {
    return els.map((v) => v.dataset.blockId).filter(Boolean);
  };
  var querySelectorSelectable = (id2) => {
    return document.querySelector(`.slate-selectable[data-block-id="${id2}"]`);
  };
  var EventTarget = class {
    constructor() {
      __publicField(this, "_listeners", /* @__PURE__ */ new Map());
      __publicField(this, "emit", this.dispatchEvent);
      __publicField(this, "off", this.removeEventListener);
      __publicField(this, "on", this.addEventListener);
    }
    addEventListener(event, cb) {
      const set2 = this._listeners.get(event) ?? /* @__PURE__ */ new Set();
      this._listeners.set(event, set2);
      set2.add(cb);
      return this;
    }
    // Let's also support on, off and emit like node
    dispatchEvent(event, ...data) {
      let ok = true;
      for (const cb of this._listeners.get(event) ?? []) {
        ok = cb(...data) !== false && ok;
      }
      return ok;
    }
    removeEventListener(event, cb) {
      var _a2;
      (_a2 = this._listeners.get(event)) == null ? void 0 : _a2.delete(cb);
      return this;
    }
    unbindAllListeners() {
      this._listeners.clear();
    }
  };
  var unitify = (val, unit = "px") => {
    return typeof val === "number" ? val + unit : val;
  };
  function css$1({ style }, attr, val) {
    if (typeof attr === "object") {
      for (const [key, value] of Object.entries(attr)) {
        value !== void 0 && (style[key] = unitify(value));
      }
    } else if (val !== void 0) {
      style[attr] = unitify(val);
    }
  }
  var eventListener = (method) => (items2, events2, fn, options = {}) => {
    if (items2 instanceof HTMLCollection || items2 instanceof NodeList) {
      items2 = Array.from(items2);
    } else if (!Array.isArray(items2)) {
      items2 = [items2];
    }
    if (!Array.isArray(events2)) {
      events2 = [events2];
    }
    for (const el of items2) {
      if (el) {
        for (const ev of events2) {
          el[method](ev, fn, { capture: false, ...options });
        }
      }
    }
    return [items2, events2, fn, options];
  };
  var on$1 = eventListener("addEventListener");
  var off$1 = eventListener("removeEventListener");
  var simplifyEvent = (evt) => {
    var _a2;
    const { clientX, clientY, target } = ((_a2 = evt.touches) == null ? void 0 : _a2[0]) ?? evt;
    return { target, x: clientX, y: clientY };
  };
  function intersectsScroll(a2, b, _ = "touch", container) {
    const containerRect = container.getBoundingClientRect();
    const scrollLeft = container.scrollLeft;
    const scrollTop = container.scrollTop;
    return a2.right >= b.left - containerRect.left && a2.left + containerRect.left <= b.right + scrollLeft && // 94 is container to top
    a2.bottom - scrollTop >= b.top - containerRect.top && a2.top <= b.bottom - containerRect.top + scrollTop;
  }
  function selectAll(selector, doc = document) {
    const list = Array.isArray(selector) ? selector : [selector];
    let nodes2 = [];
    for (let i2 = 0, l2 = list.length; i2 < l2; i2++) {
      const item = list[i2];
      if (typeof item === "string") {
        nodes2 = nodes2.concat(Array.from(doc.querySelectorAll(item)));
      } else if (item instanceof Element) {
        nodes2.push(item);
      }
    }
    return nodes2;
  }
  var isTouchDevice = () => matchMedia("(hover: none), (pointer: coarse)").matches;
  var isSafariBrowser = () => "safari" in window;
  var frames = (fn) => {
    let previousArgs;
    let frameId = -1;
    let lock = false;
    return {
      cancel() {
        cancelAnimationFrame(frameId);
        lock = false;
      },
      next(...args) {
        previousArgs = args;
        if (!lock) {
          lock = true;
          frameId = requestAnimationFrame(() => {
            fn(...previousArgs);
            lock = false;
          });
        }
      }
    };
  };
  function shouldTrigger(event, triggers) {
    for (const trigger2 of triggers) {
      if (typeof trigger2 === "number") {
        return event.button === trigger2;
      }
      if (typeof trigger2 === "object") {
        const reqButtonIsPressed = trigger2.button === event.button;
        const allReqModifiersArePressed = trigger2.modifiers.every((modifier) => {
          switch (modifier) {
            case "alt": {
              return event.altKey;
            }
            case "ctrl": {
              return event.ctrlKey || event.metaKey;
            }
            case "shift": {
              return event.shiftKey;
            }
          }
        });
        return reqButtonIsPressed && allReqModifiersArePressed;
      }
    }
    return false;
  }
  var { abs, ceil, max, min } = Math;
  var SelectionArea = class extends EventTarget {
    constructor(opt) {
      var _a2, _b, _c, _d, _e;
      super();
      // Area element and clipping element
      __publicField(this, "_area");
      __publicField(this, "_areaClientLocation", { x1: 0, x2: 0, y1: 0, y2: 0 });
      // Dynamically constructed area rect
      __publicField(this, "_areaLocation", { x1: 0, x2: 0, y1: 0, y2: 0 });
      // Caches the position of the selection-area
      __publicField(this, "_areaRect", new DOMRect());
      __publicField(this, "_container");
      __publicField(this, "_containerRect");
      __publicField(this, "_frame");
      __publicField(this, "_initScrollDelta", { x: 0, y: 0 });
      __publicField(this, "_latestElement");
      // Options
      __publicField(this, "_options");
      // Is getting set on movement.
      __publicField(this, "_scrollAvailable", true);
      // The scroll distance of scrollElement (body or html) relative to the initial scroll position
      __publicField(this, "_scrollDelta", { x: 0, y: 0 });
      // If a single click is being performed.
      __publicField(this, "_scrollingActive", false);
      __publicField(this, "_scrollSpeed", { x: 0, y: 0 });
      __publicField(this, "_selectables", []);
      // Selection store
      __publicField(this, "_selection", {
        changed: {
          added: [],
          // Added elements since last selection
          removed: []
          // Removed elements since last selection
        },
        selected: [],
        stored: [],
        touched: []
      });
      // It's a single-click until the user dragged the mouse.
      __publicField(this, "_singleClick", true);
      __publicField(this, "wheelTimer", null);
      __publicField(this, "disable", this._bindStartEvents.bind(this, false));
      __publicField(this, "enable", this._bindStartEvents);
      this._options = {
        boundaries: ["html"],
        container: "body",
        document: window.document,
        selectables: [],
        selectionAreaClass: "selection-area",
        startAreas: ["html"],
        ...opt,
        behaviour: {
          // TODO: not implemented
          intersect: "touch",
          overlap: "invert",
          triggers: [0],
          ...opt.behaviour,
          scrolling: {
            manualSpeed: 750,
            speedDivider: 0.7,
            ...(_a2 = opt.behaviour) == null ? void 0 : _a2.scrolling,
            startScrollMargins: {
              x: 20,
              y: 40,
              ...(_c = (_b = opt.behaviour) == null ? void 0 : _b.scrolling) == null ? void 0 : _c.startScrollMargins
            }
          },
          startThreshold: ((_d = opt.behaviour) == null ? void 0 : _d.startThreshold) ? typeof opt.behaviour.startThreshold === "number" ? opt.behaviour.startThreshold : { x: 4, y: 4, ...opt.behaviour.startThreshold } : { x: 4, y: 4 }
        },
        features: {
          range: true,
          touch: true,
          ...opt.features,
          singleTap: {
            allow: true,
            intersect: "native",
            ...(_e = opt.features) == null ? void 0 : _e.singleTap
          }
        }
      };
      for (const key of Object.getOwnPropertyNames(Object.getPrototypeOf(this))) {
        if (typeof this[key] === "function") {
          this[key] = this[key].bind(this);
        }
      }
      const { document: document2, selectionAreaClass } = this._options;
      this._area = document2.createElement("div");
      this._area.classList.add(selectionAreaClass);
      css$1(this._area, {
        left: 0,
        position: "absolute",
        top: 0,
        willChange: "top, left, bottom, right, width, height"
      });
      this._frame = frames((evt) => {
        this._recalculateSelectionAreaRect();
        this._updateElementSelection();
        this._emitEvent("move", evt);
        this._redrawSelectionArea();
      });
      this.enable();
    }
    _bindStartEvents(activate = true) {
      const { document: document2, features } = this._options;
      const fn = activate ? on$1 : off$1;
      fn(document2, "mousedown", this._onTapStart);
      features.touch && fn(document2, "touchstart", this._onTapStart, {
        passive: false
      });
    }
    _delayedTapMove(evt) {
      const {
        behaviour: { startThreshold },
        document: document2
      } = this._options;
      const { x1, y1 } = this._areaLocation;
      const { x1: clientX, y1: clientY } = this._areaClientLocation;
      const { x, y } = simplifyEvent(evt);
      if (
        // Single number for both coordinates
        typeof startThreshold === "number" && abs(x + y - (clientX + clientY)) >= startThreshold || // Different x and y threshold
        typeof startThreshold === "object" && abs(x - x1) >= startThreshold.x || abs(y - y1) >= startThreshold.y
      ) {
        off$1(document2, ["mousemove", "touchmove"], this._delayedTapMove, {
          passive: false
        });
        if (this._emitEvent("beforedrag", evt) === false) {
          off$1(document2, ["mouseup", "touchcancel", "touchend"], this._onTapStop);
          return;
        }
        on$1(document2, ["mousemove", "touchmove"], this._onTapMove, {
          passive: false
        });
        css$1(this._area, "display", "block");
        this._container.append(this._area);
        this.resolveSelectables();
        this._singleClick = false;
        on$1(this._container, "wheel", this._manualScroll, { passive: true });
        this._setupSelectionArea();
        this._emitEvent("start", evt);
        this._onTapMove(evt);
      }
      this._handleMoveEvent(evt);
    }
    _emitEvent(name, evt) {
      return this.emit(name, {
        event: evt,
        selection: this,
        store: this._selection
      });
    }
    _handleMoveEvent(evt) {
      const { features } = this._options;
      if (features.touch && isTouchDevice() || this._scrollAvailable && isSafariBrowser()) {
        evt.preventDefault();
      }
    }
    _keepSelection() {
      const { _options, _selection } = this;
      const { changed, selected, stored, touched } = _selection;
      const addedElements = selected.filter((el) => !stored.includes(el));
      switch (_options.behaviour.overlap) {
        case "drop": {
          _selection.stored = [
            ...addedElements,
            ...stored.filter((el) => !touched.includes(el))
            // Elements not touched
          ];
          break;
        }
        case "invert": {
          _selection.stored = [
            ...addedElements,
            ...stored.filter((el) => !changed.removed.includes(el))
            // Elements not removed from selection
          ];
          break;
        }
        case "keep": {
          _selection.stored = [
            ...stored,
            ...selected.filter((el) => !stored.includes(el))
            // Newly added
          ];
          break;
        }
      }
    }
    _manualScroll(evt) {
      this.wheelTimer && clearTimeout(this.wheelTimer);
      const { x, y } = simplifyEvent(evt);
      this.wheelTimer = setTimeout(() => {
        this._areaClientLocation.x2 = x;
        this._areaClientLocation.y2 = y;
        const Ry = y - this._containerRect.top;
        const Rx = x - this._containerRect.left;
        this._areaLocation.x2 = Rx + this._container.scrollLeft;
        this._areaLocation.y2 = Ry + this._container.scrollTop;
        this._frame.next(null);
      }, 100);
    }
    _onScroll(evt) {
      const { document: document2 } = this._options;
      this.wheelTimer && clearTimeout(this.wheelTimer);
      const { x, y } = simplifyEvent(evt);
      this.wheelTimer = setTimeout(() => {
        this._areaClientLocation.x2 = x;
        this._areaClientLocation.y2 = y;
        const deltaY = y - this._containerRect.top + this._container.scrollTop + document2.scrollingElement.scrollTop - this._initScrollDelta.y;
        const deltaX = x - this._containerRect.left + this._container.scrollLeft + document2.scrollingElement.scrollLeft;
        this._scrollDelta.y = document2.scrollingElement.scrollTop - this._initScrollDelta.y;
        this._scrollDelta.x = document2.scrollingElement.scrollLeft - this._initScrollDelta.x;
        this._areaLocation.y2 = deltaY;
        this._areaLocation.x2 = deltaX;
        this._frame.next(null);
      }, 100);
    }
    _onSingleTap(evt) {
      const {
        range: range2,
        singleTap: { intersect }
      } = this._options.features;
      const e3 = simplifyEvent(evt);
      let target;
      if (intersect === "native") {
        target = e3.target;
      } else if (intersect === "touch") {
        this.resolveSelectables();
        const { x, y } = e3;
        target = this._selectables.find((v) => {
          const { bottom, left, right, top } = v.getBoundingClientRect();
          return x < right && x > left && y < bottom && y > top;
        });
      }
      if (!target) {
        return;
      }
      this.resolveSelectables();
      while (!this._selectables.includes(target)) {
        if (!target.parentElement) {
          return;
        }
        target = target.parentElement;
      }
      const { stored } = this._selection;
      this._emitEvent("start", evt);
      if (evt.shiftKey && range2 && this._latestElement) {
        const reference = this._latestElement;
        const [preceding, following] = reference.compareDocumentPosition(target) & 4 ? [target, reference] : [reference, target];
        const rangeItems = [
          ...this._selectables.filter(
            (el) => el.compareDocumentPosition(preceding) & 4 && el.compareDocumentPosition(following) & 2
          ),
          preceding,
          following
        ];
        this.select(rangeItems);
        this._latestElement = reference;
      } else if (stored.includes(target) && (stored.length === 1 || evt.ctrlKey || stored.every((v) => this._selection.stored.includes(v)))) {
        this.deselect(target);
      } else {
        this.select(target);
        this._latestElement = target;
      }
    }
    _onTapMove(evt) {
      const { x, y } = simplifyEvent(evt);
      const {
        _areaClientLocation,
        _areaLocation,
        _frame,
        _options,
        _scrollSpeed
      } = this;
      const { speedDivider } = _options.behaviour.scrolling;
      const Ry = y - this._containerRect.top;
      const Rx = x - this._containerRect.left;
      if (this._scrollAvailable && !this._scrollingActive && (_scrollSpeed.y || _scrollSpeed.x)) {
        this._scrollingActive = true;
        const scroll = () => {
          if (!_scrollSpeed.x && !_scrollSpeed.y) {
            this._scrollingActive = false;
            return;
          }
          if (_scrollSpeed.y) {
            this._container.scrollTop += ceil(_scrollSpeed.y / speedDivider);
            _areaLocation.y2 = Ry;
          }
          if (_scrollSpeed.x) {
            this._container.scrollLeft += ceil(_scrollSpeed.x / speedDivider);
            _areaLocation.x2 = Rx;
          }
          _frame.next(evt);
          requestAnimationFrame(scroll);
        };
        requestAnimationFrame(scroll);
      } else {
        _areaLocation.x2 = Rx + this._container.scrollLeft + this._scrollDelta.x;
        _areaLocation.y2 = Ry + this._container.scrollTop + this._scrollDelta.y;
        _areaClientLocation.x2 = x;
        _areaClientLocation.y2 = y;
        _frame.next(evt);
      }
      this._handleMoveEvent(evt);
    }
    _onTapStart(evt, silent = false) {
      const { container, document: document2 } = this._options;
      const { target, x, y } = simplifyEvent(evt);
      this._container = selectAll(container, document2)[0];
      if (!this._container)
        return;
      if (this._container.contains(target) && target.dataset.slateEditor !== "true" && target.dataset.plateSelectable !== "true")
        return;
      this._containerRect = this._container.getBoundingClientRect();
      const Rx = x - this._containerRect.left + this._container.scrollLeft;
      const Ry = y - this._containerRect.top + this._container.scrollTop;
      const { _options } = this;
      if (evt instanceof MouseEvent && !shouldTrigger(evt, _options.behaviour.triggers)) {
        return;
      }
      const startAreas = selectAll(_options.startAreas, _options.document);
      const resolvedBoundaries = selectAll(
        _options.boundaries,
        _options.document
      );
      const evtPath = evt.composedPath();
      if (!this._container || // eslint-disable-next-line unicorn/prefer-array-some
      !startAreas.find((el) => evtPath.includes(el)) || // eslint-disable-next-line unicorn/prefer-array-some
      !resolvedBoundaries.find((el) => evtPath.includes(el))) {
        return;
      }
      if (!silent && this._emitEvent("beforestart", evt) === false) {
        return;
      }
      this._areaLocation = { x1: Rx, x2: 0, y1: Ry, y2: 0 };
      this._areaClientLocation = { x1: x, x2: 0, y1: y, y2: 0 };
      const scrollElement = document2.scrollingElement ?? document2.body;
      this._initScrollDelta = {
        x: scrollElement.scrollLeft,
        y: scrollElement.scrollTop
      };
      this._singleClick = true;
      this.clearSelection(false, true);
      on$1(document2, ["touchmove", "mousemove"], this._delayedTapMove, {
        passive: false
      });
      on$1(document2, ["mouseup", "touchcancel", "touchend"], this._onTapStop);
      on$1(document2, "wheel", this._onScroll, { passive: false });
    }
    _onTapStop(evt, silent) {
      var _a2;
      const { document: document2, features } = this._options;
      const { _singleClick } = this;
      off$1(document2, ["mousemove", "touchmove"], this._delayedTapMove);
      off$1(document2, ["touchmove", "mousemove"], this._onTapMove);
      off$1(document2, ["mouseup", "touchcancel", "touchend"], this._onTapStop);
      off$1(document2, "wheel", this._onScroll);
      this._keepSelection();
      if (evt && _singleClick && features.singleTap.allow) {
        this._onSingleTap(evt);
      } else if (!_singleClick && !silent) {
        this._updateElementSelection();
        this._emitEvent("stop", evt);
      }
      this._scrollSpeed.x = 0;
      this._scrollSpeed.y = 0;
      this._scrollDelta.x = 0;
      this._scrollDelta.y = 0;
      off$1(this._container, "wheel", this._manualScroll, { passive: true });
      this._area.remove();
      (_a2 = this._frame) == null ? void 0 : _a2.cancel();
      css$1(this._area, "display", "none");
    }
    _recalculateSelectionAreaRect() {
      const {
        _areaClientLocation,
        _areaLocation,
        _areaRect,
        _container,
        _containerRect,
        _scrollSpeed
      } = this;
      const {
        clientHeight,
        clientWidth,
        scrollHeight,
        scrollLeft,
        scrollTop,
        scrollWidth
      } = _container;
      const { x1, y1 } = _areaLocation;
      let { x2, y2 } = _areaLocation;
      const {
        behaviour: {
          scrolling: { startScrollMargins }
        }
      } = this._options;
      if (_areaClientLocation.x2 + this._scrollDelta.x < _containerRect.left + startScrollMargins.x) {
        _scrollSpeed.x = scrollLeft ? -abs(
          _containerRect.left - _areaClientLocation.x2 - this._scrollDelta.x
        ) : 0;
        x2 = max(x2, this._container.scrollLeft);
      } else if (_areaClientLocation.x2 + this._scrollDelta.x > _containerRect.right - startScrollMargins.x) {
        _scrollSpeed.x = scrollWidth - scrollLeft - clientWidth ? abs(
          _containerRect.left + this._container.clientWidth - _areaClientLocation.x2 - this._scrollDelta.x
        ) : 0;
        x2 = clientWidth + scrollLeft;
      } else {
        _scrollSpeed.x = 0;
      }
      if (_areaClientLocation.y2 + this._scrollDelta.y < _containerRect.top + startScrollMargins.y) {
        _scrollSpeed.y = scrollTop ? -abs(
          _containerRect.top - _areaClientLocation.y2 - this._scrollDelta.y + startScrollMargins.y
        ) : 0;
        y2 = max(y2, this._container.scrollTop);
      } else if (_areaClientLocation.y2 + this._scrollDelta.y > _containerRect.bottom - startScrollMargins.y) {
        _scrollSpeed.y = scrollHeight - scrollTop - clientHeight ? abs(
          _areaClientLocation.y2 + this._scrollDelta.y - (_containerRect.top + this._container.clientHeight - startScrollMargins.y)
        ) : 0;
        y2 = clientHeight + scrollTop;
      } else {
        _scrollSpeed.y = 0;
      }
      const x3 = min(x1, x2);
      const y3 = min(y1, y2);
      const x4 = max(x1, x2);
      const y4 = max(y1, y2);
      _areaRect.x = x3;
      _areaRect.y = y3;
      _areaRect.width = x4 - x3;
      _areaRect.height = y4 - y3;
    }
    _redrawSelectionArea() {
      const { height, width, x, y } = this._areaRect;
      const { style } = this._area;
      style.left = `${x}px`;
      style.top = `${y}px`;
      style.width = `${width}px`;
      style.height = `${height}px`;
    }
    _setupSelectionArea() {
    }
    _updateElementSelection() {
      const { _areaRect, _options, _selectables, _selection } = this;
      const { selected, stored, touched } = _selection;
      const { intersect, overlap } = _options.behaviour;
      const invert = overlap === "invert";
      const newlyTouched = [];
      const added = [];
      const removed = [];
      for (let i2 = 0; i2 < _selectables.length; i2++) {
        const node2 = _selectables[i2];
        if (intersectsScroll(
          _areaRect,
          node2.getBoundingClientRect(),
          intersect,
          this._container
        )) {
          if (!selected.includes(node2)) {
            if (invert && stored.includes(node2)) {
              removed.push(node2);
              continue;
            } else {
              added.push(node2);
            }
          } else if (stored.includes(node2) && !touched.includes(node2)) {
            touched.push(node2);
          }
          newlyTouched.push(node2);
        }
      }
      if (invert) {
        added.push(...stored.filter((v) => !selected.includes(v)));
      }
      const keep = overlap === "keep";
      for (let i2 = 0; i2 < selected.length; i2++) {
        const node2 = selected[i2];
        if (!newlyTouched.includes(node2) && !// Check if user wants to keep previously selected elements, e.g.
        // not make them part of the current selection as soon as they're touched.
        (keep && stored.includes(node2))) {
          removed.push(node2);
        }
      }
      _selection.selected = newlyTouched;
      _selection.changed = { added, removed };
      this._latestElement = void 0;
    }
    /**
     * Cancel the current selection process.
     *
     * @param keepEvent {boolean} true to fire a stop event after cancel.
     */
    cancel(keepEvent = false) {
      this._onTapStop(null, !keepEvent);
    }
    /**
     * Same as deselect, but for all elements currently selected.
     *
     * @param includeStored If the store should also get cleared
     * @param quiet If move / stop events should be fired
     */
    clearSelection(includeStored = true, quiet = false) {
      const { changed, selected, stored } = this._selection;
      changed.added = [];
      changed.removed.push(...selected, ...includeStored ? stored : []);
      if (!quiet) {
        this._emitEvent("move", null);
        this._emitEvent("stop", null);
      }
      this._selection = {
        changed: { added: [], removed: [] },
        selected: [],
        stored: includeStored ? [] : stored,
        touched: []
      };
    }
    /**
     * Removes a particular element from the selection.
     *
     * @param query - CSS Query, can be an array of queries
     * @param quiet - If this should not trigger the move event
     */
    deselect(query, quiet = false) {
      const { changed, selected, stored } = this._selection;
      const elements = selectAll(query, this._options.document).filter(
        (el) => selected.includes(el) || stored.includes(el)
      );
      if (elements.length === 0) {
        return;
      }
      this._selection.stored = stored.filter((el) => !elements.includes(el));
      this._selection.selected = selected.filter((el) => !elements.includes(el));
      this._selection.changed.added = [];
      this._selection.changed.removed.push(
        ...elements.filter((el) => !changed.removed.includes(el))
      );
      this._latestElement = void 0;
      if (!quiet) {
        this._emitEvent("move", null);
        this._emitEvent("stop", null);
      }
    }
    /** Unbinds all events and removes the area-element. */
    destroy() {
      this.cancel();
      this.disable();
      super.unbindAllListeners();
    }
    /** @returns {Array} Selected elements */
    getSelection() {
      return this._selection.stored;
    }
    /** @returns {HTMLElement} The selection area element */
    getSelectionArea() {
      return this._area;
    }
    /**
     * Can be used if during a selection elements have been added. Will update
     * everything which can be selected.
     */
    resolveSelectables() {
      this._selectables = selectAll(
        this._options.selectables,
        this._options.document
      );
    }
    /**
     * Adds elements to the selection
     *
     * @param query - CSS Query, can be an array of queries
     * @param quiet - If this should not trigger the move event
     */
    select(query, quiet = false) {
      const { changed, selected, stored } = this._selection;
      const elements = selectAll(query, this._options.document).filter(
        (el) => !selected.includes(el) && !stored.includes(el)
      );
      stored.push(...elements);
      selected.push(...elements);
      changed.added.push(...elements);
      changed.removed = [];
      this._latestElement = void 0;
      if (!quiet) {
        this._emitEvent("move", null);
        this._emitEvent("stop", null);
      }
      return elements;
    }
    /**
     * Manually triggers the start of a selection
     *
     * @param evt A MouseEvent / TouchEvent -like object
     * @param silent If beforestart should be fired,
     */
    trigger(evt, silent = true) {
      this._onTapStart(evt, silent);
    }
  };
  var useSelectionArea = () => {
    const { api, editor, getOptions: getOptions2, setOption } = useEditorPlugin(BlockSelectionPlugin);
    const { areaOptions } = getOptions2();
    const areaRef = React.useRef({
      ids: /* @__PURE__ */ new Set()
    });
    const onStart = () => {
      if (editor.api.isFocused()) {
        editor.tf.blur();
      }
      if (editor.selection) {
        editor.tf.deselect();
      }
      setOption("isSelectionAreaVisible", true);
    };
    React.useEffect(() => {
      const selection = new SelectionArea({
        boundaries: `#${editor.uid}`,
        container: `#${editor.uid}`,
        document: window.document,
        selectables: `#${editor.uid} .slate-selectable`,
        selectionAreaClass: "slate-selection-area",
        ...areaOptions
      }).on("beforestart", () => {
        setOption("isSelecting", false);
      }).on("start", ({ event }) => {
        onStart();
        if (!(event == null ? void 0 : event.shiftKey)) {
          selection.clearSelection();
          api.blockSelection.clear();
        }
      }).on("move", ({ store: { changed } }) => {
        if (!getOptions2().isSelectionAreaVisible) {
          onStart();
        }
        if (changed.added.length === 0 && changed.removed.length === 0)
          return;
        const next2 = new Set(getOptions2().selectedIds);
        extractSelectableIds(changed.removed).forEach((id2) => {
          next2.delete(id2);
          areaRef.current.ids.delete(id2);
        });
        const added = new Set(extractSelectableIds(changed.added));
        added.forEach((id2) => {
          const block2 = editor.api.block({
            at: [],
            match: (n2) => !!n2.id && n2.id === id2
          });
          if (!block2)
            return;
          if (block2[1].length === 1) {
            next2.add(id2);
            areaRef.current.ids.add(id2);
            return;
          }
          const hasAncestor = editor.api.block({
            above: true,
            at: block2[1],
            match: (n2) => !!n2.id && areaRef.current.ids.has(n2.id)
          });
          if (!hasAncestor) {
            next2.add(id2);
            areaRef.current.ids.add(id2);
          }
        });
        setOption("selectedIds", next2);
      }).on("stop", () => {
        areaRef.current = {
          ids: /* @__PURE__ */ new Set()
        };
        setOption("isSelectionAreaVisible", false);
      });
      return () => selection.destroy();
    }, []);
  };
  var copySelectedBlocks = (editor) => {
    const { selectedIds } = editor.getOptions(BlockSelectionPlugin);
    const selectedEntries = editor.getApi(BlockSelectionPlugin).blockSelection.getNodes();
    const selectedFragment = selectedEntries.map(([node2]) => node2);
    copyToClipboard$1(" ", {
      onCopy: (dataTransfer) => {
        const data = dataTransfer;
        if (!data)
          return;
        let textPlain = "";
        const div = document.createElement("div");
        editor.tf.withoutNormalizing(() => {
          selectedEntries.forEach(([, path2]) => {
            editor.tf.select({
              anchor: editor.api.start(path2),
              focus: editor.api.end(path2)
            });
            editor.tf.setFragmentData(data);
            textPlain += `${data.getData("text/plain")}
`;
            const divChild = document.createElement("div");
            divChild.innerHTML = data.getData("text/html");
            div.append(divChild);
          });
          editor.tf.deselect();
          editor.setOption(BlockSelectionPlugin, "selectedIds", selectedIds);
        });
        data.setData("text/plain", textPlain);
        data.setData("text/html", div.innerHTML);
        const selectedFragmentStr = JSON.stringify(selectedFragment);
        const encodedFragment = window.btoa(
          encodeURIComponent(selectedFragmentStr)
        );
        data.setData("application/x-slate-fragment", encodedFragment);
      }
    });
  };
  var selectInsertedBlocks = (editor) => {
    const { setOption } = plate.getEditorPlugin(editor, BlockSelectionPlugin);
    const ids = /* @__PURE__ */ new Set();
    editor.operations.forEach((op) => {
      if (op.type === "insert_node" && op.node.id && editor.api.isBlock(op.node)) {
        ids.add(op.node.id);
      }
    });
    setOption("selectedIds", ids);
  };
  var pasteSelectedBlocks = (editor, e3) => {
    const { api } = plate.getEditorPlugin(editor, BlockSelectionPlugin);
    const entries = api.blockSelection.getNodes();
    if (entries.length > 0) {
      const entry = entries.at(-1);
      const [node2, path2] = entry;
      if (!editor.api.isEmpty(node2)) {
        const at2 = plate.PathApi.next(path2);
        editor.tf.insertNodes(editor.api.create.block({}, at2), {
          at: at2,
          select: true
        });
      }
      editor.tf.insertData(e3.clipboardData);
      selectInsertedBlocks(editor);
    }
  };
  var BlockSelectionAfterEditable = () => {
    const editor = useEditorRef();
    const { api, getOption, getOptions: getOptions2, setOption } = useEditorPlugin({ key: "blockSelection" });
    const isSelectingSome = usePluginOption(
      BlockSelectionPlugin,
      "isSelectingSome"
    );
    const selectedIds = usePluginOption(BlockSelectionPlugin, "selectedIds");
    useSelectionArea();
    const inputRef = React.useRef(null);
    const [isMounted, setIsMounted] = React.useState(false);
    React.useEffect(() => {
      setIsMounted(true);
      setOption("shadowInputRef", inputRef);
      return () => {
        setIsMounted(false);
      };
    }, [setOption]);
    React.useEffect(() => {
      if (!isSelectingSome) {
        setOption("anchorId", null);
      }
    }, [isSelectingSome, setOption]);
    React.useEffect(() => {
      if (isSelectingSome && inputRef.current) {
        inputRef.current.focus({ preventScroll: true });
      } else if (inputRef.current) {
        inputRef.current.blur();
      }
    }, [isSelectingSome]);
    const handleKeyDown = React.useCallback(
      (e3) => {
        var _a2, _b;
        const isReadonly = editor.api.isReadOnly();
        (_b = (_a2 = getOptions2()).onKeyDownSelecting) == null ? void 0 : _b.call(_a2, e3.nativeEvent);
        if (!getOption("isSelectingSome"))
          return;
        if (plate.isHotkey("shift+up")(e3)) {
          e3.preventDefault();
          e3.stopPropagation();
          api.blockSelection.shiftSelection("up");
          return;
        }
        if (plate.isHotkey("shift+down")(e3)) {
          e3.preventDefault();
          e3.stopPropagation();
          api.blockSelection.shiftSelection("down");
          return;
        }
        if (plate.isHotkey("escape")(e3)) {
          api.blockSelection.deselect();
          return;
        }
        if (plate.isHotkey("mod+z")(e3)) {
          editor.undo();
          selectInsertedBlocks(editor);
          return;
        }
        if (plate.isHotkey("mod+a")(e3)) {
          api.blockSelection.selectAll();
          return;
        }
        if (plate.isHotkey("mod+shift+z")(e3)) {
          editor.redo();
          selectInsertedBlocks(editor);
          return;
        }
        if (!getOption("isSelectingSome"))
          return;
        if (plate.isHotkey("enter")(e3)) {
          const entry = editor.api.node({
            at: [],
            block: true,
            match: (n2) => !!n2.id && (selectedIds == null ? void 0 : selectedIds.has(n2.id))
          });
          if (entry) {
            const [, path2] = entry;
            editor.tf.focus({ at: path2, edge: "end" });
            e3.preventDefault();
          }
          return;
        }
        if (plate.isHotkey(["backspace", "delete"])(e3) && !isReadonly) {
          e3.preventDefault();
          editor.tf.withoutNormalizing(() => {
            const entries = [
              ...editor.api.nodes({
                at: [],
                match: (n2) => !!n2.id && (selectedIds == null ? void 0 : selectedIds.has(n2.id))
              })
            ];
            for (const [, path2] of [...entries].reverse()) {
              editor.tf.removeNodes({
                at: path2
              });
            }
            const entry = entries[0];
            if (entry) {
              if (editor.children.length === 0) {
                editor.tf.focus();
              } else {
                const prevPath = plate.isHotkey("backspace")(e3) ? plate.PathApi.previous(entry[1]) : entry[1];
                if (prevPath) {
                  const prevEntry = editor.api.block({ at: prevPath });
                  if (prevEntry) {
                    setOption(
                      "selectedIds",
                      /* @__PURE__ */ new Set([prevEntry[0].id])
                    );
                  }
                }
              }
            }
          });
          return;
        }
        if (plate.isHotkey("up")(e3)) {
          e3.preventDefault();
          e3.stopPropagation();
          api.blockSelection.moveSelection("up");
          return;
        }
        if (plate.isHotkey("down")(e3)) {
          e3.preventDefault();
          e3.stopPropagation();
          api.blockSelection.moveSelection("down");
          return;
        }
      },
      [editor, getOptions2, getOption, api.blockSelection, selectedIds, setOption]
    );
    const handleCopy = React.useCallback(
      (e3) => {
        e3.preventDefault();
        if (getOption("isSelectingSome")) {
          copySelectedBlocks(editor);
        }
      },
      [editor, getOption]
    );
    const handleCut = React.useCallback(
      (e3) => {
        e3.preventDefault();
        if (getOption("isSelectingSome")) {
          copySelectedBlocks(editor);
          if (!editor.api.isReadOnly()) {
            const entries = [
              ...editor.api.nodes({
                at: [],
                match: (n2) => selectedIds == null ? void 0 : selectedIds.has(n2.id)
              })
            ];
            if (entries.length > 0) {
              editor.tf.withoutNormalizing(() => {
                for (const [, path2] of [...entries].reverse()) {
                  editor.tf.removeNodes({
                    at: path2
                  });
                }
              });
              const prevEntry = editor.api.block({ at: entries[0][1] });
              if (prevEntry) {
                setOption("selectedIds", /* @__PURE__ */ new Set([prevEntry[0].id]));
              }
            }
          }
        }
      },
      [getOption, editor, selectedIds, setOption]
    );
    const handlePaste = React.useCallback(
      (e3) => {
        e3.preventDefault();
        if (!editor.api.isReadOnly()) {
          pasteSelectedBlocks(editor, e3.nativeEvent);
        }
      },
      [editor]
    );
    if (!isMounted || typeof window === "undefined") {
      return null;
    }
    return ReactDOM.createPortal(
      /* @__PURE__ */ React.createElement(
        "input",
        {
          ref: inputRef,
          className: "slate-shadow-input",
          style: {
            left: "-300px",
            opacity: 0,
            position: "fixed",
            top: "-300px",
            zIndex: 999
          },
          onCopy: handleCopy,
          onCut: handleCut,
          onKeyDown: handleKeyDown,
          onPaste: handlePaste
        }
      ),
      document.body
    );
  };
  var moveSelection = (editor, direction2) => {
    const { api, setOption } = getEditorPlugin2(editor, BlockSelectionPlugin);
    const blocks2 = api.blockSelection.getNodes();
    if (blocks2.length === 0)
      return;
    if (direction2 === "up") {
      const [, topPath] = blocks2[0];
      const prevEntry = editor.api.previous({
        at: topPath,
        from: "parent",
        match: api.blockSelection.isSelectable
      });
      if (prevEntry) {
        const [prevNode] = prevEntry;
        setOption("anchorId", prevNode.id);
        api.blockSelection.set(prevNode.id);
      } else {
        api.blockSelection.set(blocks2[0][0].id);
      }
    } else {
      const [, bottomPath] = blocks2.at(-1);
      const nextEntry = editor.api.next({
        at: bottomPath,
        from: "child",
        match: api.blockSelection.isSelectable
      });
      if (nextEntry) {
        const [nextNode] = nextEntry;
        setOption("anchorId", nextNode.id);
        api.blockSelection.set(nextNode.id);
      } else {
        api.blockSelection.set(blocks2.at(-1)[0].id);
      }
    }
  };
  var setSelectedIds = (editor, {
    added,
    ids,
    removed
  }) => {
    const { getOptions: getOptions2, setOption } = plate.getEditorPlugin(
      editor,
      { key: "blockSelection" }
    );
    if (ids) {
      setOption("selectedIds", new Set(ids));
    }
    if (added || removed) {
      const { selectedIds: prev } = getOptions2();
      const next2 = new Set(prev);
      if (added) {
        extractSelectableIds(added).forEach((id2) => id2 && next2.add(id2));
      }
      if (removed) {
        extractSelectableIds(removed).forEach((id2) => id2 && next2.delete(id2));
      }
      setOption("selectedIds", next2);
    }
    setOption("isSelecting", true);
  };
  var addSelectedRow = (editor, id2, options = {}) => {
    const { api, getOptions: getOptions2, setOption } = plate.getEditorPlugin(
      editor,
      { key: "blockSelection" }
    );
    const { clear = true, delay } = options;
    const element = querySelectorSelectable(id2);
    if (!element)
      return;
    if (!getOptions2().selectedIds.has(id2) && clear) {
      setOption("selectedIds", /* @__PURE__ */ new Set());
    }
    api.blockSelection.setSelectedIds({
      added: [element],
      removed: []
    });
    if (delay) {
      setTimeout(() => {
        api.blockSelection.setSelectedIds({
          added: [],
          removed: [element]
        });
      }, delay);
    }
  };
  var shiftSelection = (editor, direction2) => {
    const { api, getOption, getOptions: getOptions2, setOption } = getEditorPlugin2(
      editor,
      BlockSelectionPlugin
    );
    const blocks2 = api.blockSelection.getNodes();
    if (blocks2.length === 0)
      return;
    const [topNode, topPath] = blocks2[0];
    const [bottomNode, bottomPath] = blocks2.at(-1);
    let anchorId = getOptions2().anchorId;
    if (!anchorId) {
      anchorId = direction2 === "up" ? bottomNode.id : topNode.id;
      setOption("anchorId", anchorId);
    }
    const anchorIndex = blocks2.findIndex(([node2]) => node2.id === anchorId);
    if (anchorIndex === -1) {
      setOption("anchorId", bottomNode.id);
      return;
    }
    const anchorIsTop = anchorIndex === 0;
    const anchorIsBottom = anchorIndex === blocks2.length - 1;
    const newSelected = new Set(getOption("selectedIds"));
    if (direction2 === "down") {
      if (anchorIsTop) {
        const belowEntry = editor.api.next({
          at: bottomPath,
          mode: "highest",
          match: (n2, p2) => api.blockSelection.isSelectable(n2, p2) && !plate.PathApi.isAncestor(p2, bottomPath)
        });
        if (!belowEntry)
          return;
        const [belowNode] = belowEntry;
        newSelected.add(belowNode.id);
      } else {
        if (topNode.id && topNode.id !== anchorId) {
          newSelected.delete(topNode.id);
        }
      }
    } else {
      if (anchorIsBottom) {
        const aboveEntry = editor.api.previous({
          at: topPath,
          from: "parent",
          match: api.blockSelection.isSelectable
        });
        if (!aboveEntry)
          return;
        const [aboveNode, abovePath] = aboveEntry;
        if (plate.PathApi.isAncestor(abovePath, topPath)) {
          newSelected.forEach((id2) => {
            const entry = editor.api.node({ id: id2, at: abovePath });
            if (!entry)
              return;
            if (plate.PathApi.isDescendant(entry[1], abovePath)) {
              newSelected.delete(id2);
              if (id2 === anchorId) {
                anchorId = aboveNode.id;
                setOption("anchorId", anchorId);
              }
            }
          });
        }
        newSelected.add(aboveNode.id);
      } else {
        if (bottomNode.id && bottomNode.id !== anchorId) {
          newSelected.delete(bottomNode.id);
        }
      }
    }
    newSelected.add(anchorId);
    setOption("selectedIds", newSelected);
  };
  var onKeyDownSelection = ({
    api,
    editor,
    event
  }) => {
    if (plate.isHotkey("mod+a", event)) {
      if (event.defaultPrevented)
        return;
      const ancestorNode = editor.api.block({ highest: true });
      if (!ancestorNode)
        return;
      const [, path2] = ancestorNode;
      if (editor.api.isAt({ block: true, end: true, start: true })) {
        return api.blockSelection.selectAll();
      }
      if (!editor.api.isAt({ block: true })) {
        return api.blockSelection.selectAll();
      }
      editor.tf.select(path2);
      event.preventDefault();
      event.stopPropagation();
    }
    if (plate.isHotkey("escape", event)) {
      if (event.defaultPrevented)
        return;
      const ancestorNode = editor.api.block({ highest: true });
      const id2 = ancestorNode == null ? void 0 : ancestorNode[0].id;
      api.blockSelection.set(id2);
      event.preventDefault();
      event.stopPropagation();
    }
  };
  var duplicateBlockSelectionNodes = (editor) => {
    const blocks2 = editor.getApi(BlockSelectionPlugin).blockSelection.getNodes();
    const lastBlock = blocks2.at(-1);
    if (!lastBlock)
      return;
    editor.tf.duplicateNodes({
      at: lastBlock[1],
      nextBlock: true,
      nodes: blocks2
    });
    const path2 = plate.PathApi.next(lastBlock[1]);
    const ids = blocks2.map((_, index) => {
      const targetPath = [path2[0] + index];
      const targetNode = editor.api.node(targetPath);
      return targetNode == null ? void 0 : targetNode[0].id;
    }).filter(Boolean);
    setTimeout(() => {
      editor.setOption(BlockSelectionPlugin, "selectedIds", new Set(ids));
    }, 0);
  };
  var insertBlocksAndSelect = (editor, nodes2, { at: at2 }) => {
    editor.tf.insertNodes(nodes2, { at: at2 });
    const insertedNodes = [plate.NodeApi.get(editor, at2)];
    let count = 1;
    while (count < nodes2.length) {
      at2 = plate.PathApi.next(at2);
      const nextNode = plate.NodeApi.get(editor, at2);
      insertedNodes.push(nextNode);
      count++;
    }
    setTimeout(() => {
      editor.setOption(
        BlockSelectionPlugin,
        "selectedIds",
        new Set(insertedNodes.map((n2) => n2.id))
      );
    }, 0);
  };
  var removeBlockSelectionNodes = (editor) => {
    const selectedIds = editor.getOption(BlockSelectionPlugin, "selectedIds");
    if (!selectedIds)
      return;
    editor.tf.removeNodes({
      at: [],
      block: true,
      match: (n2) => !!n2.id && selectedIds.has(n2.id)
    });
  };
  var selectBlockSelectionNodes = (editor) => {
    editor.tf.select(
      editor.api.nodesRange(
        editor.getApi(BlockSelectionPlugin).blockSelection.getNodes()
      )
    );
    editor.getApi(BlockSelectionPlugin).blockSelection.clear();
  };
  var setBlockSelectionNodes = (editor, props, options) => {
    editor.tf.withoutNormalizing(() => {
      const blocks2 = editor.getApi(BlockSelectionPlugin).blockSelection.getNodes();
      blocks2.forEach(([, path2]) => {
        editor.tf.setNodes(props, {
          ...options,
          at: path2
        });
      });
    });
  };
  var setBlockSelectionIndent = (editor, indent, options) => {
    const api = editor.getApi(BlockSelectionPlugin);
    editor.tf.withoutNormalizing(() => {
      const blocks2 = api.blockSelection.getNodes();
      blocks2.forEach(([node2, path2]) => {
        const prevIndent = node2.indent ?? 0;
        const currentIndent = prevIndent + indent;
        editor.tf.setNodes(
          { indent: Math.max(currentIndent, 0) },
          {
            ...options,
            at: path2
          }
        );
      });
    });
  };
  var setBlockSelectionTexts = (editor, props, options) => {
    setBlockSelectionNodes(editor, props, {
      mode: "lowest",
      ...options
    });
  };
  var BlockSelectionPlugin = createTPlatePlugin({
    key: "blockSelection",
    handlers: {
      onKeyDown: onKeyDownSelection,
      onMouseDown: ({ api, editor, event, getOptions: getOptions2 }) => {
        const target = event.target;
        if (
          // deprecated
          target.dataset.platePreventUnselect || target.dataset.platePreventDeselect
        )
          return;
        if (event.button === 0 && getOptions2().selectedIds.size > 0 && !editor.getOption(BlockMenuPlugin, "openId")) {
          api.blockSelection.deselect();
        }
      }
    },
    inject: {
      isBlock: true,
      nodeProps: {
        transformProps: () => {
          return useBlockSelectable().props;
        }
      }
    },
    options: {
      anchorId: null,
      areaOptions: {
        features: {
          singleTap: {
            allow: false
          }
        }
      },
      enableContextMenu: false,
      isSelecting: false,
      isSelectionAreaVisible: false,
      selectedIds: /* @__PURE__ */ new Set(),
      shadowInputRef: { current: null },
      isSelectable: () => true
    },
    plugins: [BlockMenuPlugin],
    render: {
      afterEditable: BlockSelectionAfterEditable
    }
  }).extend(() => ({
    inject: {}
  })).extendSelectors(({ getOptions: getOptions2 }) => ({
    isSelected: (id2) => !!id2 && getOptions2().selectedIds.has(id2),
    isSelectingSome: () => getOptions2().selectedIds.size > 0
  })).extendApi(
    ({ editor, getOption, getOptions: getOptions2, setOption }) => ({
      moveSelection: plate.bindFirst(moveSelection, editor),
      setSelectedIds: plate.bindFirst(setSelectedIds, editor),
      shiftSelection: plate.bindFirst(shiftSelection, editor),
      add: (id2) => {
        const next2 = new Set(getOptions2().selectedIds);
        if (Array.isArray(id2)) {
          id2.forEach((i2) => next2.add(i2));
        } else {
          next2.add(id2);
        }
        setOption("selectedIds", next2);
      },
      clear: () => {
        setOption("selectedIds", /* @__PURE__ */ new Set());
      },
      delete: (id2) => {
        const next2 = new Set(getOptions2().selectedIds);
        if (Array.isArray(id2)) {
          id2.forEach((i2) => next2.delete(i2));
        } else {
          next2.delete(id2);
        }
        setOption("selectedIds", next2);
      },
      deselect: () => {
        setOption("selectedIds", /* @__PURE__ */ new Set());
        setOption("isSelecting", false);
      },
      focus: () => {
        const shadowInputRef = getOption("shadowInputRef");
        if (shadowInputRef == null ? void 0 : shadowInputRef.current) {
          shadowInputRef.current.focus({ preventScroll: true });
        }
      },
      getNodes: () => {
        const selectedIds = getOption("selectedIds");
        return editor.api.blocks({
          at: [],
          match: (n2) => !!n2.id && (selectedIds == null ? void 0 : selectedIds.has(n2.id))
        });
      },
      has: (id2) => {
        if (Array.isArray(id2)) {
          return id2.every((i2) => getOptions2().selectedIds.has(i2));
        }
        return getOptions2().selectedIds.has(id2);
      },
      isSelectable: (element, path2) => !!element.id && editor.api.isBlock(element) && getOptions2().isSelectable(element, path2),
      resetSelectedIds: () => {
        setOption("selectedIds", /* @__PURE__ */ new Set());
      },
      set: (id2) => {
        setOption("selectedIds", new Set(Array.isArray(id2) ? id2 : [id2]));
      },
      unselect: () => {
        setOption("selectedIds", /* @__PURE__ */ new Set());
        setOption("isSelecting", false);
      }
    })
  ).extendApi(
    ({ api, editor, setOption }) => ({
      addSelectedRow: plate.bindFirst(addSelectedRow, editor),
      selectAll: () => {
        const ids = api.blocks({
          at: [],
          mode: "highest",
          match: (n2, p2) => !!n2.id && api.blockSelection.isSelectable(n2, p2)
        }).map((n2) => n2[0].id);
        setOption("selectedIds", new Set(ids));
        api.blockSelection.focus();
      }
    })
  ).extendTransforms(({ editor }) => ({
    /** Duplicate selected blocks */
    duplicate: plate.bindFirst(duplicateBlockSelectionNodes, editor),
    /** Insert blocks and select */
    insertBlocksAndSelect: plate.bindFirst(insertBlocksAndSelect, editor),
    /** Remove selected blocks */
    removeNodes: plate.bindFirst(removeBlockSelectionNodes, editor),
    /** Set selection based on block selection */
    select: plate.bindFirst(selectBlockSelectionNodes, editor),
    /**
     * Selects blocks in the editor based on the provided block ID.
     *
     * Uses block selection if any blocks are selected, otherwise falls back to
     * editor selection. If the provided block ID is already in the current
     * selection, maintains the existing selection. Otherwise, clears the
     * current selection and selects only the specified block.
     */
    selectBlocks: plate.bindFirst(selectBlocks, editor),
    /** Set block indent */
    setIndent: plate.bindFirst(setBlockSelectionIndent, editor),
    /** Set nodes on selected blocks */
    setNodes: plate.bindFirst(setBlockSelectionNodes, editor),
    /** Set texts on selected blocks */
    setTexts: plate.bindFirst(setBlockSelectionTexts, editor)
  })).overrideEditor(({ api, editor, getOptions: getOptions2, tf: { setSelection: setSelection2 } }) => ({
    transforms: {
      setSelection(props) {
        if (getOptions2().selectedIds.size > 0 && !editor.getOption(BlockMenuPlugin, "openId")) {
          api.blockSelection.deselect();
        }
        setSelection2(props);
      }
    }
  }));
  const blockSelectionVariants = classVarianceAuthority.cva(
    "pointer-events-none absolute inset-0 z-1 bg-brand/[.13] transition-opacity",
    {
      defaultVariants: {
        active: true
      },
      variants: {
        active: {
          false: "opacity-0",
          true: "opacity-100"
        }
      }
    }
  );
  const TableCellElement = cn$2.withRef(({ children, className, isHeader, style, ...props }, ref) => {
    const { api } = useEditorPlugin(TablePlugin);
    const element = props.element;
    const rowId = useElementSelector(([node2]) => node2.id, [], {
      key: TableRowPlugin.key
    });
    const isSelectingRow = useBlockSelected(rowId);
    const { borders, minHeight, selected, width } = useTableCellElement();
    return /* @__PURE__ */ React.createElement(
      PlateElement,
      {
        ref,
        as: isHeader ? "th" : "td",
        attributes: () => ({
          ...props.attributes,
          colSpan: api.table.getColSpan(element),
          rowSpan: api.table.getRowSpan(element)
        }),
        className: cn$2.cn(
          "relative h-full overflow-visible border border-gray-200 bg-background p-0",
          element.background ? "bg-[--cellBackground]" : "bg-background",
          cn$2.cn(
            isHeader && "text-left [&_>_*]:m-0",
            "before:size-full",
            selected && "before:z-10 before:bg-muted",
            "before:absolute before:box-border before:select-none before:content-['']"
          ),
          className
        ),
        style: {
          "--cellBackground": element.background,
          maxWidth: width || 240,
          minWidth: width || 120,
          ...style
        },
        ...props
      },
      /* @__PURE__ */ React.createElement(
        "div",
        {
          className: "relative z-20 box-border h-full px-3 py-2",
          style: { minHeight }
        },
        children
      ),
      isSelectingRow && /* @__PURE__ */ React.createElement("div", { className: blockSelectionVariants(), contentEditable: false })
    );
  });
  const TableCellHeaderElement = cn$2.withProps(TableCellElement, {
    isHeader: true
  });
  const DropdownMenu$1 = DropdownMenuPrimitive__namespace.Root;
  const DropdownMenuTrigger$1 = DropdownMenuPrimitive__namespace.Trigger;
  const DropdownMenuGroup = DropdownMenuPrimitive__namespace.Group;
  const DropdownMenuPortal = DropdownMenuPrimitive__namespace.Portal;
  const DropdownMenuSub = DropdownMenuPrimitive__namespace.Sub;
  const DropdownMenuRadioGroup = DropdownMenuPrimitive__namespace.RadioGroup;
  const DropdownMenuSubTrigger = cn$2.withRef(({ children, className, inset, ...props }, ref) => /* @__PURE__ */ React.createElement(
    DropdownMenuPrimitive__namespace.SubTrigger,
    {
      className: cn$2.cn(
        "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
        "data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        inset && "pl-8",
        className
      ),
      ref,
      ...props
    },
    children,
    /* @__PURE__ */ React.createElement(Icons.chevronRight, { className: "ml-auto size-4" })
  ));
  const DropdownMenuSubContent = cn$2.withCn(
    DropdownMenuPrimitive__namespace.SubContent,
    "z-[99999] min-w-32 overflow-hidden rounded border bg-white p-1 text-black shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2"
  );
  const DropdownMenuContentVariants = cn$2.withProps(DropdownMenuPrimitive__namespace.Content, {
    className: cn$2.cn(
      "z-[99999] min-w-32 overflow-hidden rounded border bg-white p-1 text-black shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2"
    ),
    sideOffset: 4
  });
  const DropdownMenuContent$1 = cn$2.withRef(({ ...props }, ref) => /* @__PURE__ */ React.createElement(DropdownMenuPrimitive__namespace.Portal, null, /* @__PURE__ */ React.createElement(DropdownMenuContentVariants, { ref, ...props })));
  const menuItemVariants = classVarianceAuthority.cva(
    cn$2.cn(
      "relative flex h-9 cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors",
      "focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50"
    ),
    {
      variants: {
        inset: {
          true: "pl-8"
        }
      }
    }
  );
  const DropdownMenuItem$1 = cn$2.withVariants(
    DropdownMenuPrimitive__namespace.Item,
    menuItemVariants,
    ["inset"]
  );
  const DropdownMenuCheckboxItem = cn$2.withRef(({ children, className, ...props }, ref) => /* @__PURE__ */ React.createElement(
    DropdownMenuPrimitive__namespace.CheckboxItem,
    {
      className: cn$2.cn(
        "relative flex select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        "cursor-pointer",
        className
      ),
      ref,
      ...props
    },
    /* @__PURE__ */ React.createElement("span", { className: "absolute left-2 flex size-3.5 items-center justify-center" }, /* @__PURE__ */ React.createElement(DropdownMenuPrimitive__namespace.ItemIndicator, null, /* @__PURE__ */ React.createElement(Icons.check, { className: "size-4" }))),
    children
  ));
  const DropdownMenuRadioItem = cn$2.withRef(({ children, className, hideIcon, ...props }, ref) => /* @__PURE__ */ React.createElement(
    DropdownMenuPrimitive__namespace.RadioItem,
    {
      className: cn$2.cn(
        "relative flex select-none items-center rounded-sm pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        "h-9 cursor-pointer px-2 data-[state=checked]:bg-accent data-[state=checked]:text-accent-foreground",
        className
      ),
      ref,
      ...props
    },
    !hideIcon && /* @__PURE__ */ React.createElement("span", { className: "absolute right-2 flex size-3.5 items-center justify-center" }, /* @__PURE__ */ React.createElement(DropdownMenuPrimitive__namespace.ItemIndicator, null, /* @__PURE__ */ React.createElement(Icons.check, { className: "size-4" }))),
    children
  ));
  const dropdownMenuLabelVariants = classVarianceAuthority.cva(
    cn$2.cn("select-none px-2 py-1.5 text-sm font-semibold"),
    {
      variants: {
        inset: {
          true: "pl-8"
        }
      }
    }
  );
  const DropdownMenuLabel = cn$2.withVariants(
    DropdownMenuPrimitive__namespace.Label,
    dropdownMenuLabelVariants,
    ["inset"]
  );
  const DropdownMenuSeparator = cn$2.withCn(
    DropdownMenuPrimitive__namespace.Separator,
    "-mx-1 my-1 h-px bg-muted"
  );
  cn$2.withCn(
    cn$2.createPrimitiveElement("span"),
    "ml-auto text-xs tracking-widest opacity-60"
  );
  const useOpenState = () => {
    const [open2, setOpen] = React.useState(false);
    const onOpenChange = React.useCallback(
      (_value = !open2) => {
        setOpen(_value);
      },
      [open2]
    );
    return {
      onOpenChange,
      open: open2
    };
  };
  const separatorVariants = classVarianceAuthority.cva("shrink-0 bg-border", {
    defaultVariants: {
      orientation: "horizontal"
    },
    variants: {
      orientation: {
        horizontal: "h-px w-full",
        vertical: "h-full w-px"
      }
    }
  });
  const Separator = cn$2.withVariants(
    cn$2.withProps(SeparatorPrimitive__namespace.Root, {
      decorative: true,
      orientation: "horizontal"
    }),
    separatorVariants
  );
  const TooltipProvider$1 = TooltipPrimitive__namespace.Provider;
  const Tooltip$1 = TooltipPrimitive__namespace.Root;
  const TooltipTrigger$1 = TooltipPrimitive__namespace.Trigger;
  const TooltipPortal = TooltipPrimitive__namespace.Portal;
  const TooltipContent$1 = cn$2.withCn(
    cn$2.withProps(TooltipPrimitive__namespace.Content, {
      sideOffset: 4
    }),
    "z-[9999] overflow-hidden rounded border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md"
  );
  function withTooltip(Component) {
    return React.forwardRef(function ExtendComponent({ tooltip, tooltipContentProps, tooltipProps, ...props }, ref) {
      const [mounted, setMounted] = React.useState(false);
      React.useEffect(() => {
        setMounted(true);
      }, []);
      const component = /* @__PURE__ */ React.createElement(Component, { ref, ...props });
      if (tooltip && mounted) {
        return /* @__PURE__ */ React.createElement(Tooltip$1, { ...tooltipProps }, /* @__PURE__ */ React.createElement(TooltipTrigger$1, { asChild: true }, component), /* @__PURE__ */ React.createElement(TooltipPortal, null, /* @__PURE__ */ React.createElement(TooltipContent$1, { ...tooltipContentProps }, tooltip)));
      }
      return component;
    });
  }
  const Toolbar = cn$2.withCn(
    ToolbarPrimitive__namespace.Root,
    "relative flex select-none items-center gap-1 bg-background"
  );
  const ToolbarToggleGroup = cn$2.withCn(
    ToolbarPrimitive__namespace.ToolbarToggleGroup,
    "flex items-center"
  );
  cn$2.withCn(
    ToolbarPrimitive__namespace.Link,
    "font-medium underline underline-offset-4"
  );
  cn$2.withCn(
    ToolbarPrimitive__namespace.Separator,
    "my-1 w-px shrink-0 bg-border"
  );
  const toolbarButtonVariants = classVarianceAuthority.cva(
    cn$2.cn(
      "inline-flex items-center justify-center rounded text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
      "[&_svg:not([data-icon])]:size-5"
    ),
    {
      defaultVariants: {
        size: "sm",
        variant: "default"
      },
      variants: {
        size: {
          default: "h-10 px-3",
          lg: "h-11 px-5",
          sm: "h-9 px-2"
        },
        variant: {
          default: "bg-transparent hover:bg-muted hover:text-muted-foreground aria-checked:bg-accent aria-checked:text-accent-foreground",
          outline: "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground"
        }
      }
    }
  );
  const ToolbarButton = withTooltip(
    // eslint-disable-next-line react/display-name
    React__namespace.forwardRef(
      ({
        children,
        className,
        isDropdown = true,
        showArrow,
        pressed,
        size: size2,
        variant,
        ...props
      }, ref) => {
        return typeof pressed === "boolean" ? /* @__PURE__ */ React__namespace.createElement(
          ToolbarToggleGroup,
          {
            disabled: props.disabled,
            type: "single",
            value: "single"
          },
          /* @__PURE__ */ React__namespace.createElement(
            ToolbarToggleItem,
            {
              className: cn$2.cn(
                toolbarButtonVariants({
                  size: size2,
                  variant
                }),
                isDropdown && "my-1 justify-between",
                className
              ),
              ref,
              value: pressed ? "single" : "",
              ...props
            },
            isDropdown && showArrow ? /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("div", { className: "flex flex-1" }, children), /* @__PURE__ */ React__namespace.createElement("div", null, /* @__PURE__ */ React__namespace.createElement(Icons.arrowDown, { className: "ml-0.5 size-4", "data-icon": true }))) : children
          )
        ) : /* @__PURE__ */ React__namespace.createElement(
          ToolbarPrimitive__namespace.Button,
          {
            className: cn$2.cn(
              toolbarButtonVariants({
                size: size2,
                variant
              }),
              isDropdown && "pr-1",
              className
            ),
            ref,
            ...props
          },
          children
        );
      }
    )
  );
  ToolbarButton.displayName = "ToolbarButton";
  const ToolbarToggleItem = cn$2.withVariants(
    ToolbarPrimitive__namespace.ToggleItem,
    toolbarButtonVariants,
    ["variant", "size"]
  );
  const ToolbarGroup = cn$2.withRef(({ children, className, noSeparator }, ref) => {
    const childArr = React__namespace.Children.map(children, (c2) => c2);
    if (!childArr || childArr.length === 0)
      return null;
    return /* @__PURE__ */ React__namespace.createElement("div", { className: cn$2.cn("flex", className), ref }, !noSeparator && /* @__PURE__ */ React__namespace.createElement("div", { className: "h-full py-1" }, /* @__PURE__ */ React__namespace.createElement(Separator, { orientation: "vertical" })), /* @__PURE__ */ React__namespace.createElement("div", { className: "mx-1 flex items-center gap-1" }, children));
  });
  const TableElement = withHOC(
    TableProvider,
    cn$2.withRef(({ children, className, ...props }, ref) => {
      const readOnly = useReadOnly();
      const isSelectionAreaVisible = usePluginOption(
        BlockSelectionPlugin,
        "isSelectionAreaVisible"
      );
      const hasControls = !readOnly && !isSelectionAreaVisible;
      const selected = useSelected();
      const {
        isSelectingCell,
        marginLeft,
        props: tableProps
      } = useTableElement();
      const content = /* @__PURE__ */ React.createElement(
        PlateElement,
        {
          ref,
          className: cn$2.cn(
            className,
            "overflow-x-auto py-2",
            hasControls && "*:data-[slot=block-selection]:left-2"
          ),
          style: { paddingLeft: marginLeft },
          ...props
        },
        /* @__PURE__ */ React.createElement("div", { className: "group/table relative w-fit" }, /* @__PURE__ */ React.createElement(
          "table",
          {
            className: cn$2.cn(
              "mr-0 table h-px border-collapse border border-gray-200 not-tina-prose my-2",
              isSelectingCell && "selection:bg-transparent"
            ),
            ...tableProps
          },
          /* @__PURE__ */ React.createElement("tbody", { className: "min-w-full" }, children)
        ))
      );
      if (readOnly || !selected) {
        return content;
      }
      return /* @__PURE__ */ React.createElement(TableFloatingToolbar, null, content);
    })
  );
  const TableFloatingToolbar = cn$2.withRef(
    ({ children, ...props }, ref) => {
      const { tf } = useEditorPlugin(TablePlugin);
      const element = useElement();
      const { props: buttonProps } = useRemoveNodeButton({ element });
      const collapsed = useEditorSelector(
        (editor) => !editor.api.isExpanded(),
        []
      );
      const { canMerge, canSplit } = useTableMergeState();
      return /* @__PURE__ */ React.createElement(Popover$2, { open: canMerge || canSplit || collapsed, modal: false }, /* @__PURE__ */ React.createElement(PopoverPrimitive.PopoverAnchor, { asChild: true }, children), /* @__PURE__ */ React.createElement(
        PopoverContent$1,
        {
          ref,
          asChild: true,
          onOpenAutoFocus: (e3) => e3.preventDefault(),
          contentEditable: false,
          ...props
        },
        /* @__PURE__ */ React.createElement(
          Toolbar,
          {
            className: "scrollbar-hide flex w-auto max-w-[80vw] flex-row overflow-x-auto rounded-md border bg-popover p-1 shadow-md print:hidden",
            contentEditable: false
          },
          /* @__PURE__ */ React.createElement(ToolbarGroup, null, /* @__PURE__ */ React.createElement(ColorDropdownMenu, { tooltip: "Background color" }, /* @__PURE__ */ React.createElement(lucideReact.PaintBucketIcon, null)), canMerge && /* @__PURE__ */ React.createElement(
            ToolbarButton,
            {
              onClick: () => tf.table.merge(),
              onMouseDown: (e3) => e3.preventDefault(),
              tooltip: "Merge cells"
            },
            /* @__PURE__ */ React.createElement(lucideReact.CombineIcon, null)
          ), canSplit && /* @__PURE__ */ React.createElement(
            ToolbarButton,
            {
              onClick: () => tf.table.split(),
              onMouseDown: (e3) => e3.preventDefault(),
              tooltip: "Split cell"
            },
            /* @__PURE__ */ React.createElement(lucideReact.SquareSplitHorizontalIcon, null)
          ), /* @__PURE__ */ React.createElement(DropdownMenu$1, { modal: false }, /* @__PURE__ */ React.createElement(DropdownMenuTrigger$1, { asChild: true }, /* @__PURE__ */ React.createElement(ToolbarButton, { tooltip: "Cell borders" }, /* @__PURE__ */ React.createElement(lucideReact.Grid2X2Icon, null))), /* @__PURE__ */ React.createElement(DropdownMenuPortal, null, /* @__PURE__ */ React.createElement(TableBordersDropdownMenuContent, null))), collapsed && /* @__PURE__ */ React.createElement(ToolbarGroup, null, /* @__PURE__ */ React.createElement(ToolbarButton, { tooltip: "Delete table", ...buttonProps }, /* @__PURE__ */ React.createElement(lucideReact.Trash2Icon, null)))),
          collapsed && /* @__PURE__ */ React.createElement(ToolbarGroup, null, /* @__PURE__ */ React.createElement(
            ToolbarButton,
            {
              onClick: () => {
                tf.insert.tableRow({ before: true });
              },
              onMouseDown: (e3) => e3.preventDefault(),
              tooltip: "Insert row before"
            },
            /* @__PURE__ */ React.createElement(lucideReact.ArrowUp, null)
          ), /* @__PURE__ */ React.createElement(
            ToolbarButton,
            {
              onClick: () => {
                tf.insert.tableRow();
              },
              onMouseDown: (e3) => e3.preventDefault(),
              tooltip: "Insert row after"
            },
            /* @__PURE__ */ React.createElement(lucideReact.ArrowDown, null)
          ), /* @__PURE__ */ React.createElement(
            ToolbarButton,
            {
              onClick: () => {
                tf.remove.tableRow();
              },
              onMouseDown: (e3) => e3.preventDefault(),
              tooltip: "Delete row"
            },
            /* @__PURE__ */ React.createElement(lucideReact.XIcon, null)
          )),
          collapsed && /* @__PURE__ */ React.createElement(ToolbarGroup, null, /* @__PURE__ */ React.createElement(
            ToolbarButton,
            {
              onClick: () => {
                tf.insert.tableColumn({ before: true });
              },
              onMouseDown: (e3) => e3.preventDefault(),
              tooltip: "Insert column before"
            },
            /* @__PURE__ */ React.createElement(lucideReact.ArrowLeft, null)
          ), /* @__PURE__ */ React.createElement(
            ToolbarButton,
            {
              onClick: () => {
                tf.insert.tableColumn();
              },
              onMouseDown: (e3) => e3.preventDefault(),
              tooltip: "Insert column after"
            },
            /* @__PURE__ */ React.createElement(lucideReact.ArrowRight, null)
          ), /* @__PURE__ */ React.createElement(
            ToolbarButton,
            {
              onClick: () => {
                tf.remove.tableColumn();
              },
              onMouseDown: (e3) => e3.preventDefault(),
              tooltip: "Delete column"
            },
            /* @__PURE__ */ React.createElement(lucideReact.XIcon, null)
          ))
        )
      ));
    }
  );
  const TableBordersDropdownMenuContent = cn$2.withRef((props, ref) => {
    const editor = useEditorRef();
    const {
      getOnSelectTableBorder,
      hasBottomBorder,
      hasLeftBorder,
      hasNoBorders,
      hasOuterBorders,
      hasRightBorder,
      hasTopBorder
    } = useTableBordersDropdownMenuContentState();
    return /* @__PURE__ */ React.createElement(
      DropdownMenuContent$1,
      {
        ref,
        className: cn$2.cn("min-w-[220px]"),
        onCloseAutoFocus: (e3) => {
          e3.preventDefault();
          editor.tf.focus();
        },
        align: "start",
        side: "right",
        sideOffset: 0,
        ...props
      },
      /* @__PURE__ */ React.createElement(DropdownMenuGroup, null, /* @__PURE__ */ React.createElement(
        DropdownMenuCheckboxItem,
        {
          checked: hasTopBorder,
          onCheckedChange: getOnSelectTableBorder("top")
        },
        /* @__PURE__ */ React.createElement("div", null, "Top Border")
      ), /* @__PURE__ */ React.createElement(
        DropdownMenuCheckboxItem,
        {
          checked: hasRightBorder,
          onCheckedChange: getOnSelectTableBorder("right")
        },
        /* @__PURE__ */ React.createElement("div", null, "Right Border")
      ), /* @__PURE__ */ React.createElement(
        DropdownMenuCheckboxItem,
        {
          checked: hasBottomBorder,
          onCheckedChange: getOnSelectTableBorder("bottom")
        },
        /* @__PURE__ */ React.createElement("div", null, "Bottom Border")
      ), /* @__PURE__ */ React.createElement(
        DropdownMenuCheckboxItem,
        {
          checked: hasLeftBorder,
          onCheckedChange: getOnSelectTableBorder("left")
        },
        /* @__PURE__ */ React.createElement("div", null, "Left Border")
      )),
      /* @__PURE__ */ React.createElement(DropdownMenuGroup, null, /* @__PURE__ */ React.createElement(
        DropdownMenuCheckboxItem,
        {
          checked: hasNoBorders,
          onCheckedChange: getOnSelectTableBorder("none")
        },
        /* @__PURE__ */ React.createElement("div", null, "No Border")
      ), /* @__PURE__ */ React.createElement(
        DropdownMenuCheckboxItem,
        {
          checked: hasOuterBorders,
          onCheckedChange: getOnSelectTableBorder("outer")
        },
        /* @__PURE__ */ React.createElement("div", null, "Outside Borders")
      ))
    );
  });
  function ColorDropdownMenu({ children, tooltip }) {
    const [open2, setOpen] = React.useState(false);
    const editor = useEditorRef();
    const selectedCells = usePluginOption(TablePlugin, "selectedCells");
    React.useCallback(
      (color) => {
        setOpen(false);
        plateTable.setCellBackground(editor, { color, selectedCells: selectedCells ?? [] });
      },
      [selectedCells, editor]
    );
    const onClearColor = React.useCallback(() => {
      setOpen(false);
      plateTable.setCellBackground(editor, {
        color: null,
        selectedCells: selectedCells ?? []
      });
    }, [selectedCells, editor]);
    return /* @__PURE__ */ React.createElement(DropdownMenu$1, { open: open2, onOpenChange: setOpen, modal: false }, /* @__PURE__ */ React.createElement(DropdownMenuTrigger$1, { asChild: true }, /* @__PURE__ */ React.createElement(ToolbarButton, { tooltip }, children)), /* @__PURE__ */ React.createElement(DropdownMenuContent$1, { align: "start" }, /* @__PURE__ */ React.createElement(DropdownMenuGroup, null, /* @__PURE__ */ React.createElement(DropdownMenuItem$1, { className: "p-2", onClick: onClearColor }, /* @__PURE__ */ React.createElement(lucideReact.EraserIcon, null), /* @__PURE__ */ React.createElement("span", null, "Clear")))));
  }
  const TableRowElement = cn$2.withRef(
    ({ children, className, ...props }, ref) => {
      const selected = useSelected();
      return /* @__PURE__ */ React.createElement(
        PlateElement,
        {
          as: "tr",
          className: cn$2.cn(className, "group/row"),
          "data-selected": selected ? "true" : void 0,
          ...props
        },
        children
      );
    }
  );
  function classNames$1(...classes) {
    return classes.filter(Boolean).join(" ");
  }
  const uuid = () => {
    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(
      /[018]/g,
      (c2) => (c2 ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c2 / 4).toString(16)
    );
  };
  const blockClasses = "mt-0.5";
  const headerClasses = "font-normal";
  const Components = () => {
    return {
      [SlashInputPlugin.key]: SlashInputElement,
      [plateHeading.HEADING_KEYS.h1]: ({
        attributes,
        editor,
        element,
        className,
        ...props
      }) => /* @__PURE__ */ React.createElement(
        "h1",
        {
          ...attributes,
          ...props,
          className: classNames$1(
            headerClasses,
            blockClasses,
            className,
            "text-4xl mb-4 last:mb-0 mt-6 first:mt-0 font-libre-baskerville"
          )
        }
      ),
      [plateHeading.HEADING_KEYS.h2]: ({
        attributes,
        editor,
        element,
        className,
        ...props
      }) => /* @__PURE__ */ React.createElement(
        "h2",
        {
          ...attributes,
          ...props,
          className: classNames$1(
            headerClasses,
            blockClasses,
            className,
            "text-3xl mb-4 last:mb-0 mt-6 first:mt-0 font-libre-baskerville"
          )
        }
      ),
      [plateHeading.HEADING_KEYS.h3]: ({
        attributes,
        editor,
        element,
        className,
        ...props
      }) => /* @__PURE__ */ React.createElement(
        "h3",
        {
          ...attributes,
          ...props,
          className: classNames$1(
            headerClasses,
            blockClasses,
            className,
            "text-2xl mb-4 last:mb-0 mt-6 first:mt-0 font-libre-baskerville"
          )
        }
      ),
      [plateHeading.HEADING_KEYS.h4]: ({
        attributes,
        editor,
        element,
        className,
        ...props
      }) => /* @__PURE__ */ React.createElement(
        "h4",
        {
          ...attributes,
          ...props,
          className: classNames$1(
            headerClasses,
            blockClasses,
            className,
            "text-xl mb-4 last:mb-0 mt-6 first:mt-0 font-libre-baskerville"
          )
        }
      ),
      /** Tailwind prose doesn't style h5 and h6 elements */
      [plateHeading.HEADING_KEYS.h5]: ({
        attributes,
        editor,
        element,
        className,
        ...props
      }) => /* @__PURE__ */ React.createElement(
        "h5",
        {
          ...attributes,
          ...props,
          className: classNames$1(
            headerClasses,
            blockClasses,
            className,
            "text-lg mb-4 last:mb-0 mt-6 first:mt-0"
          ),
          style: { fontFamily: "'Libre Baskerville', serif", fontWeight: "400" }
        }
      ),
      [plateHeading.HEADING_KEYS.h6]: ({
        attributes,
        editor,
        element,
        className,
        ...props
      }) => /* @__PURE__ */ React.createElement(
        "h6",
        {
          ...attributes,
          ...props,
          className: classNames$1(
            headerClasses,
            blockClasses,
            className,
            "text-base mb-4 last:mb-0 mt-6 first:mt-0"
          ),
          style: { fontFamily: "'Libre Baskerville', serif", fontWeight: "400" }
        }
      ),
      [ParagraphPlugin.key]: ParagraphElement,
      [BlockquotePlugin.key]: BlockquoteElement,
      [CodeBlockPlugin.key]: CodeBlockElement,
      [CodeLinePlugin.key]: CodeLineElement,
      [CodeSyntaxPlugin.key]: CodeSyntaxLeaf,
      html: ({ attributes, editor, element, children, className }) => {
        return /* @__PURE__ */ React.createElement(
          "div",
          {
            ...attributes,
            className: classNames$1(
              "font-mono text-sm bg-green-100 cursor-not-allowed mb-4",
              className
            )
          },
          children,
          element.value
        );
      },
      html_inline: ({ attributes, editor, element, children, className }) => {
        return /* @__PURE__ */ React.createElement(
          "span",
          {
            ...attributes,
            className: classNames$1(
              "font-mono bg-green-100 cursor-not-allowed",
              className
            )
          },
          children,
          element.value
        );
      },
      [BulletedListPlugin.key]: cn$2.withProps(ListElement, { variant: "ul" }),
      [NumberedListPlugin.key]: cn$2.withProps(ListElement, { variant: "ol" }),
      [ListItemPlugin.key]: cn$2.withProps(PlateElement, { as: "li" }),
      [LinkPlugin.key]: LinkElement,
      [CodePlugin.key]: CodeLeaf,
      [UnderlinePlugin.key]: cn$2.withProps(PlateLeaf, { as: "u" }),
      [StrikethroughPlugin.key]: cn$2.withProps(PlateLeaf, { as: "s" }),
      [ItalicPlugin.key]: cn$2.withProps(PlateLeaf, { as: "em" }),
      [BoldPlugin.key]: cn$2.withProps(PlateLeaf, { as: "strong" }),
      [HorizontalRulePlugin.key]: HrElement,
      [TableCellHeaderPlugin.key]: TableCellHeaderElement,
      [TableCellPlugin.key]: TableCellElement,
      [TablePlugin.key]: TableElement,
      [TableRowPlugin.key]: TableRowElement
    };
  };
  class Form {
    constructor({
      id: id2,
      label,
      fields,
      actions,
      buttons,
      global: global2,
      reset: reset2,
      loadInitialValues,
      onChange,
      queries,
      ...options
    }) {
      this.global = null;
      this.loading = false;
      this.subscribe = (cb, options2) => {
        return this.finalForm.subscribe(cb, options2);
      };
      this.handleSubmit = async (values, form, cb) => {
        var _a2;
        try {
          const valOverride = await ((_a2 = this.beforeSubmit) == null ? void 0 : _a2.call(this, values));
          if (valOverride) {
            for (const [key, value] of Object.entries(valOverride)) {
              form.change(key, value);
            }
          }
          const response = await this.onSubmit(valOverride || values, form, cb);
          form.initialize(values);
          return response;
        } catch (error2) {
          return { [finalForm.FORM_ERROR]: error2 };
        }
      };
      this.submit = () => {
        return this.finalForm.submit();
      };
      const initialValues = options.initialValues || {};
      this.__type = options.__type || "form";
      this.id = id2;
      this.label = label;
      this.global = global2;
      this.fields = fields || [];
      this.onSubmit = options.onSubmit;
      this.queries = queries || [];
      this.crudType = options.crudType || "update";
      this.relativePath = options.relativePath || id2;
      this.path = options.path || id2;
      this.finalForm = finalForm.createForm({
        ...options,
        initialValues,
        onSubmit: this.handleSubmit,
        mutators: {
          ...arrayMutators,
          setFieldData,
          ...options.mutators
        }
      });
      this._reset = reset2;
      this.actions = actions || [];
      this.buttons = buttons || {
        save: "Save",
        reset: "Reset"
      };
      this.updateFields(this.fields);
      if (loadInitialValues) {
        this.loading = true;
        loadInitialValues().then((initialValues2) => {
          this.updateInitialValues(initialValues2);
        }).finally(() => {
          this.loading = false;
        });
      }
      if (onChange) {
        let firstUpdate = true;
        this.subscribe(
          (formState) => {
            if (firstUpdate) {
              firstUpdate = false;
            } else {
              onChange(formState);
            }
          },
          { values: true, ...(options == null ? void 0 : options.extraSubscribeValues) || {} }
        );
      }
    }
    /**
     * A unique identifier for Forms.
     *
     * @deprecated use id instead
     */
    get name() {
      return void 0;
    }
    /**
     * Returns the current values of the form.
     *
     * if the form is still loading it returns `undefined`.
     */
    get values() {
      if (this.loading) {
        return void 0;
      }
      return this.finalForm.getState().values || this.initialValues;
    }
    /**
     * The values the form was initialized with.
     */
    get initialValues() {
      return this.finalForm.getState().initialValues;
    }
    get pristine() {
      return this.finalForm.getState().pristine;
    }
    get dirty() {
      return this.finalForm.getState().dirty;
    }
    get submitting() {
      return this.finalForm.getState().submitting;
    }
    get valid() {
      return this.finalForm.getState().valid;
    }
    /**
     * Resets the values back to the initial values the form was initialized with.
     * Or empties all the values if the form was not initialized.
     */
    async reset() {
      if (this._reset) {
        await this._reset();
      }
      this.finalForm.reset();
    }
    /**
     * @deprecated Unnecessary indirection
     */
    updateFields(fields) {
      this.fields = fields;
    }
    /**
     * Changes the value of the given field.
     *
     * @param name
     * @param value
     */
    change(name, value) {
      return this.finalForm.change(name, value);
    }
    get mutators() {
      return this.finalForm.mutators;
    }
    addQuery(queryId) {
      this.queries = [...this.queries.filter((id2) => id2 !== queryId), queryId];
    }
    removeQuery(queryId) {
      this.queries = this.queries.filter((id2) => id2 !== queryId);
    }
    /**
     * Updates multiple fields in the form.
     *
     * The updates are batched so that it only triggers one `onChange` event.
     *
     * In order to prevent disruptions to the user's editing experience this
     * function will _not_ update the value of any field that is currently
     * being edited.
     *
     * @param values
     */
    updateValues(values) {
      this.finalForm.batch(() => {
        const activePath = this.finalForm.getState().active;
        if (!activePath) {
          updateEverything(this.finalForm, values);
        } else {
          updateSelectively(this.finalForm, values);
        }
      });
    }
    /**
     * Replaces the initialValues of the form without deleting the current values.
     *
     * This function is helpful when the initialValues are loaded asynchronously.
     *
     * @param initialValues
     */
    updateInitialValues(initialValues) {
      this.finalForm.batch(() => {
        const values = this.values || {};
        this.finalForm.initialize(initialValues);
        const activePath = this.finalForm.getState().active;
        if (!activePath) {
          updateEverything(this.finalForm, values);
        } else {
          updateSelectively(this.finalForm, values);
        }
      });
    }
    /**
     * Based on field's name this function will
     * return an array of fields for the give form along
     * with the path that it was found at top nearest
     * object-like group
     *
     * So if you have a field named blocks.3.title
     * It will return the fields from the 3rd "block"
     * along with the path it was found at
     * fields: [{type: 'string', name: 'title'}, ... other fields]
     * activePath: ['blocks', '3']
     */
    getActiveField(fieldName) {
      if (!fieldName) {
        return this;
      }
      const result = this.getFieldGroup({
        formOrObjectField: this,
        values: this.finalForm.getState().values,
        namePathIndex: 0,
        namePath: fieldName.split(".")
      });
      return result;
    }
    getFieldGroup({
      formOrObjectField,
      values = {},
      namePathIndex,
      namePath
    }) {
      const name = namePath[namePathIndex];
      const field = formOrObjectField.fields.find((field2) => field2.name === name);
      const value = values[name];
      const isLastItem = namePathIndex === namePath.length - 1;
      if (!field) {
        return {
          ...formOrObjectField,
          fields: formOrObjectField.fields.map((field2) => {
            return {
              ...field2,
              name: [...namePath, field2.name].join(".")
            };
          })
        };
      } else {
        if (field.type === "object") {
          if (field.templates) {
            if (field.list) {
              if (isLastItem) {
                return formOrObjectField;
              } else {
                const namePathIndexForListItem = namePathIndex + 1;
                const index = namePath[namePathIndexForListItem];
                const listItemValue = value[index];
                const template = field.templates[listItemValue._template];
                const templateName = [
                  ...namePath.slice(0, namePathIndexForListItem),
                  index
                ].join(".");
                const isLastItem2 = namePathIndexForListItem === namePath.length - 1;
                if (!isLastItem2) {
                  return this.getFieldGroup({
                    formOrObjectField: template,
                    values: listItemValue,
                    namePath,
                    namePathIndex: namePathIndex + 2
                  });
                }
                if (!template) {
                  console.error({ field, value });
                  throw new Error(
                    `Expected template value for field ${field.name}`
                  );
                }
                return {
                  ...template,
                  name: templateName,
                  fields: template.fields.map((field2) => {
                    return {
                      ...field2,
                      name: [templateName, field2.name].join(".")
                    };
                  })
                };
              }
            }
          } else {
            if (field.list) {
              const namePathIndexForListItem = namePathIndex + 1;
              const index = namePath[namePathIndexForListItem];
              const listItemValue = value[index];
              const fieldName = [
                ...namePath.slice(0, namePathIndexForListItem),
                index
              ].join(".");
              const isLastItem2 = namePathIndexForListItem === namePath.length - 1;
              if (!isLastItem2) {
                if (field.fields) {
                  return this.getFieldGroup({
                    formOrObjectField: field,
                    values: listItemValue,
                    namePath,
                    namePathIndex: namePathIndex + 2
                  });
                }
              }
              return {
                ...field,
                name: fieldName,
                fields: field.fields.map((field2) => {
                  return {
                    ...field2,
                    name: [fieldName, field2.name].join(".")
                  };
                })
              };
            } else {
              const fieldName = [...namePath.slice(0, namePathIndex + 1)].join(
                "."
              );
              const isLastItem2 = namePathIndex === namePath.length - 1;
              if (!isLastItem2) {
                return this.getFieldGroup({
                  formOrObjectField: field,
                  values: value,
                  namePath,
                  namePathIndex: namePathIndex + 1
                });
              }
              return {
                ...field,
                name: fieldName,
                fields: field.fields.map((field2) => {
                  return {
                    ...field2,
                    name: [fieldName, field2.name].join(".")
                  };
                })
              };
            }
          }
        } else if (field.type === "rich-text") {
          if (isLastItem) {
            return {
              ...formOrObjectField,
              fields: formOrObjectField.fields.map((field2) => {
                return {
                  ...field2,
                  name: [...namePath.slice(0, namePathIndex), field2.name].join(
                    "."
                  )
                };
              })
            };
          } else {
            const childrenIndex = namePath.findIndex(
              (value2) => value2 === "children"
            );
            const propsIndex = namePath.slice(childrenIndex).findIndex((value2) => value2 === "props") + childrenIndex;
            const itemName = namePath.slice(childrenIndex, propsIndex).join(".");
            const item = finalForm.getIn(value, itemName);
            const props = item.props;
            const templateString = item.name;
            const currentPathIndex = namePathIndex + Math.max(propsIndex, 3);
            const isLastItem2 = currentPathIndex + 1 === namePath.length;
            const template = field.templates.find(
              (t2) => t2.name === templateString
            );
            const templateName = namePath.slice(0, currentPathIndex + 2).join(".");
            if ((item == null ? void 0 : item.type) === "img") {
              const imageName = namePath.slice(0, currentPathIndex + 2).join(".");
              return {
                ...formOrObjectField,
                // name: [formOrObjectField.name, 'img'].join('.'),
                name: [imageName].join("."),
                fields: [
                  {
                    type: "image",
                    // label: 'URL',
                    name: [templateName, "url"].join("."),
                    component: "image"
                  },
                  {
                    type: "string",
                    label: "Alt",
                    name: [templateName.replace(/\.props$/, ""), "alt"].join("."),
                    component: "text"
                  },
                  {
                    type: "string",
                    label: "Caption",
                    name: [templateName.replace(/\.props$/, ""), "caption"].join(
                      "."
                    ),
                    component: "text"
                  }
                ]
              };
            }
            if (!isLastItem2) {
              return this.getFieldGroup({
                formOrObjectField: template,
                values: props,
                namePath,
                namePathIndex: namePathIndex + Math.max(4, childrenIndex + propsIndex)
              });
            }
            if (!template) {
              throw new Error(`Expected template value for field ${item.name}`);
            }
            return {
              ...template,
              name: templateName,
              fields: template.fields.map((field2) => {
                return {
                  ...field2,
                  name: [templateName, field2.name].join(".")
                };
              })
            };
          }
        } else {
          const fieldName = [...namePath.slice(0, namePathIndex)].join(".");
          if (!fieldName) {
            return formOrObjectField;
          }
          return {
            ...formOrObjectField,
            name: fieldName,
            fields: formOrObjectField.fields.map((field2) => {
              return {
                ...field2,
                name: [fieldName, field2.name].join(".")
              };
            })
          };
        }
      }
    }
  }
  function updateEverything(form, values) {
    Object.entries(values).forEach(([path2, value]) => {
      form.change(path2, value);
    });
  }
  function updateSelectively(form, values, prefix) {
    const activePath = form.getState().active;
    Object.entries(values).forEach(([name, value]) => {
      const path2 = prefix ? `${prefix}.${name}` : name;
      if (typeof value === "object") {
        if (typeof activePath === "string" && activePath.startsWith(path2)) {
          updateSelectively(form, value, path2);
        } else {
          form.change(path2, value);
        }
      } else if (path2 !== activePath) {
        form.change(path2, value);
      }
    });
  }
  function usePlugins(plugins2) {
    const cms = useCMS$1();
    let pluginArray;
    if (Array.isArray(plugins2)) {
      pluginArray = plugins2;
    } else {
      pluginArray = [plugins2];
    }
    React__namespace.useEffect(() => {
      pluginArray.forEach((plugin) => {
        if (plugin) {
          cms.plugins.add(plugin);
        }
      });
      return () => {
        pluginArray.forEach((plugin) => {
          if (plugin) {
            cms.plugins.remove(plugin);
          }
        });
      };
    }, [cms.plugins, ...pluginArray]);
  }
  function useSubscribable(subscribable, cb) {
    const [, s2] = React__namespace.useState(0);
    React__namespace.useEffect(() => {
      return subscribable.subscribe(() => {
        s2((x) => x + 1);
        if (cb)
          cb();
      });
    });
  }
  function FieldsBuilder({
    form,
    fields,
    activeFieldName,
    padding = false
  }) {
    const cms = useCMS$1();
    const [fieldPlugins, setFieldPlugins] = React__namespace.useState([]);
    const updateFieldPlugins = React__namespace.useCallback(() => {
      const fieldPlugins2 = cms.plugins.getType("field").all();
      setFieldPlugins(fieldPlugins2);
    }, [setFieldPlugins]);
    React__namespace.useEffect(() => updateFieldPlugins(), []);
    useEventSubscription("plugin:add:field", () => updateFieldPlugins(), []);
    return /* @__PURE__ */ React__namespace.createElement(FieldsGroup, { padding }, fields.map((field, index) => {
      return /* @__PURE__ */ React__namespace.createElement(
        InnerField,
        {
          key: field.name,
          field,
          activeFieldName,
          form,
          fieldPlugins,
          index
        }
      );
    }));
  }
  const InnerField = ({
    field,
    form,
    fieldPlugins,
    index,
    activeFieldName
  }) => {
    React__namespace.useEffect(() => {
      form.mutators.setFieldData(field.name, {
        tinaField: field
      });
    }, [form, field]);
    if (field.component === null)
      return null;
    const plugin = fieldPlugins.find(
      (plugin2) => plugin2.name === field.component
    );
    let type;
    if (plugin && plugin.type) {
      type = plugin.type;
    }
    const parse2 = getProp("parse", field, plugin);
    const validate = getProp("validate", field, plugin);
    let format2 = field.format;
    if (!format2 && plugin && plugin.format) {
      format2 = plugin.format;
    }
    let isActiveField = field.name === activeFieldName;
    if (field.list && field.type === "string") {
      if (activeFieldName) {
        const activeFieldNameArray = activeFieldName.split(".");
        const activeFieldNameWithoutIndex = activeFieldNameArray.slice(0, activeFieldNameArray.length - 1).join(".");
        if (field.name === activeFieldNameWithoutIndex) {
          isActiveField = true;
        }
      }
    }
    return /* @__PURE__ */ React__namespace.createElement(
      reactFinalForm.Field,
      {
        name: field.name,
        key: field.name,
        isEqual: (a2, b) => isEqual(field, a2, b),
        type,
        parse: parse2 ? (value, name) => parse2(value, name, field) : void 0,
        format: format2 ? (value, name) => format2(value, name, field) : void 0,
        validate: (value, values, meta) => {
          if (validate) {
            return validate(value, values, meta, field);
          }
        }
      },
      (fieldProps) => {
        if (typeof field.component !== "string" && field.component !== null) {
          return /* @__PURE__ */ React__namespace.createElement(
            field.component,
            {
              ...fieldProps,
              form: form.finalForm,
              tinaForm: form,
              field: { ...field, experimental_focusIntent: isActiveField }
            }
          );
        }
        if (plugin) {
          return /* @__PURE__ */ React__namespace.createElement(
            plugin.Component,
            {
              ...fieldProps,
              experimental_focusIntent: isActiveField,
              form: form.finalForm,
              tinaForm: form,
              field: { ...field, experimental_focusIntent: isActiveField },
              index
            }
          );
        }
        return /* @__PURE__ */ React__namespace.createElement("p", null, "Unrecognized field type");
      }
    );
  };
  const FieldsGroup = ({
    padding,
    children
  }) => {
    return /* @__PURE__ */ React__namespace.createElement(
      "div",
      {
        className: `relative block w-full h-full whitespace-nowrap overflow-x-visible ${padding ? `pb-5` : ``}`
      },
      children
    );
  };
  function getProp(name, field, plugin) {
    let prop2 = field[name];
    if (!prop2 && plugin && plugin[name]) {
      prop2 = plugin[name];
    }
    return prop2;
  }
  const isEqual = (field, a2, b) => {
    const replacer = (key, value) => {
      if (key === "id") {
        return void 0;
      }
      return value;
    };
    if (field.type === "rich-text") {
      return JSON.stringify(a2, replacer) === JSON.stringify(b, replacer);
    }
    return a2 === b;
  };
  const FF = reactFinalForm.Form;
  const FormLegacy = ({ form, children }) => {
    const [i2, setI] = React__namespace.useState(0);
    React__namespace.useEffect(() => {
      setI((i22) => i22 + 1);
    }, [form]);
    return /* @__PURE__ */ React__namespace.createElement(FF, { form: form.finalForm, key: `${i2}: ${form.id}` }, children);
  };
  const EditingContext = React__namespace.createContext(false);
  function TinaForm({ form, children }) {
    const [isEditing, setIsEditing] = React.useState(false);
    if (!form) {
      return /* @__PURE__ */ React__namespace.createElement(EditingContext.Provider, { value: isEditing }, children({ isEditing, setIsEditing }));
    }
    return /* @__PURE__ */ React__namespace.createElement(EditingContext.Provider, { value: isEditing }, /* @__PURE__ */ React__namespace.createElement(FormLegacy, { form }, () => {
      return children({ isEditing, setIsEditing });
    }));
  }
  function TinaField({
    Component,
    children,
    ...fieldProps
  }) {
    const isEditing = React.useContext(EditingContext);
    if (!isEditing)
      return children || null;
    return /* @__PURE__ */ React__namespace.createElement(reactFinalForm.Field, { ...fieldProps }, ({ input, meta }) => {
      return /* @__PURE__ */ React__namespace.createElement(Component, { input, meta, ...fieldProps });
    });
  }
  TinaField.propTypes = {
    name: PropTypes.string,
    type: PropTypes.string,
    Component: PropTypes.any.isRequired,
    children: PropTypes.any
  };
  var DefaultContext = {
    color: void 0,
    size: void 0,
    className: void 0,
    style: void 0,
    attr: void 0
  };
  var IconContext = React.createContext && /* @__PURE__ */ React.createContext(DefaultContext);
  var _excluded = ["attr", "size", "title"];
  function _objectWithoutProperties(source2, excluded) {
    if (source2 == null)
      return {};
    var target = _objectWithoutPropertiesLoose(source2, excluded);
    var key, i2;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
      for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
        key = sourceSymbolKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source2, key))
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose(source2, excluded) {
    if (source2 == null)
      return {};
    var target = {};
    for (var key in source2) {
      if (Object.prototype.hasOwnProperty.call(source2, key)) {
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source2[key];
      }
    }
    return target;
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source2 = arguments[i2];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function ownKeys(e3, r2) {
    var t2 = Object.keys(e3);
    if (Object.getOwnPropertySymbols) {
      var o3 = Object.getOwnPropertySymbols(e3);
      r2 && (o3 = o3.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
      })), t2.push.apply(t2, o3);
    }
    return t2;
  }
  function _objectSpread(e3) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys(Object(t2), true).forEach(function(r3) {
        _defineProperty(e3, r3, t2[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys(Object(t2)).forEach(function(r3) {
        Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
      });
    }
    return e3;
  }
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey(t2) {
    var i2 = _toPrimitive(t2, "string");
    return "symbol" == typeof i2 ? i2 : i2 + "";
  }
  function _toPrimitive(t2, r2) {
    if ("object" != typeof t2 || !t2)
      return t2;
    var e3 = t2[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i2 = e3.call(t2, r2 || "default");
      if ("object" != typeof i2)
        return i2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t2);
  }
  function Tree2Element(tree) {
    return tree && tree.map((node2, i2) => /* @__PURE__ */ React.createElement(node2.tag, _objectSpread({
      key: i2
    }, node2.attr), Tree2Element(node2.child)));
  }
  function GenIcon(data) {
    return (props) => /* @__PURE__ */ React.createElement(IconBase, _extends({
      attr: _objectSpread({}, data.attr)
    }, props), Tree2Element(data.child));
  }
  function IconBase(props) {
    var elem = (conf) => {
      var {
        attr,
        size: size2,
        title
      } = props, svgProps = _objectWithoutProperties(props, _excluded);
      var computedSize = size2 || conf.size || "1em";
      var className;
      if (conf.className)
        className = conf.className;
      if (props.className)
        className = (className ? className + " " : "") + props.className;
      return /* @__PURE__ */ React.createElement("svg", _extends({
        stroke: "currentColor",
        fill: "currentColor",
        strokeWidth: "0"
      }, conf.attr, attr, svgProps, {
        className,
        style: _objectSpread(_objectSpread({
          color: props.color || conf.color
        }, conf.style), props.style),
        height: computedSize,
        width: computedSize,
        xmlns: "http://www.w3.org/2000/svg"
      }), title && /* @__PURE__ */ React.createElement("title", null, title), props.children);
    };
    return IconContext !== void 0 ? /* @__PURE__ */ React.createElement(IconContext.Consumer, null, (conf) => elem(conf)) : elem(DefaultContext);
  }
  function BiArrowBack(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M21 11H6.414l5.293-5.293-1.414-1.414L2.586 12l7.707 7.707 1.414-1.414L6.414 13H21z" }, "child": [] }] })(props);
  }
  function BiArrowToBottom(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M6 18h12v2H6zm5-14v8.586L6.707 8.293 5.293 9.707 12 16.414l6.707-6.707-1.414-1.414L13 12.586V4z" }, "child": [] }] })(props);
  }
  function BiCheckCircle(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.514 2 12 2zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8z" }, "child": [] }, { "tag": "path", "attr": { "d": "M9.999 13.587 7.7 11.292l-1.412 1.416 3.713 3.705 6.706-6.706-1.414-1.414z" }, "child": [] }] })(props);
  }
  function BiCheck(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "m10 15.586-3.293-3.293-1.414 1.414L10 18.414l9.707-9.707-1.414-1.414z" }, "child": [] }] })(props);
  }
  function BiChevronDown(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M16.293 9.293 12 13.586 7.707 9.293l-1.414 1.414L12 16.414l5.707-5.707z" }, "child": [] }] })(props);
  }
  function BiCloudUpload(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M13 19v-4h3l-4-5-4 5h3v4z" }, "child": [] }, { "tag": "path", "attr": { "d": "M7 19h2v-2H7c-1.654 0-3-1.346-3-3 0-1.404 1.199-2.756 2.673-3.015l.581-.102.192-.558C8.149 8.274 9.895 7 12 7c2.757 0 5 2.243 5 5v1h1c1.103 0 2 .897 2 2s-.897 2-2 2h-3v2h3c2.206 0 4-1.794 4-4a4.01 4.01 0 0 0-3.056-3.888C18.507 7.67 15.56 5 12 5 9.244 5 6.85 6.611 5.757 9.15 3.609 9.792 2 11.82 2 14c0 2.757 2.243 5 5 5z" }, "child": [] }] })(props);
  }
  function BiCopyAlt(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M20 2H10c-1.103 0-2 .897-2 2v4H4c-1.103 0-2 .897-2 2v10c0 1.103.897 2 2 2h10c1.103 0 2-.897 2-2v-4h4c1.103 0 2-.897 2-2V4c0-1.103-.897-2-2-2zM4 20V10h10l.002 10H4zm16-6h-4v-4c0-1.103-.897-2-2-2h-4V4h10v10z" }, "child": [] }, { "tag": "path", "attr": { "d": "M6 12h6v2H6zm0 4h6v2H6z" }, "child": [] }] })(props);
  }
  function BiCopy(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M20 2H10c-1.103 0-2 .897-2 2v4H4c-1.103 0-2 .897-2 2v10c0 1.103.897 2 2 2h10c1.103 0 2-.897 2-2v-4h4c1.103 0 2-.897 2-2V4c0-1.103-.897-2-2-2zM4 20V10h10l.002 10H4zm16-6h-4v-4c0-1.103-.897-2-2-2h-4V4h10v10z" }, "child": [] }] })(props);
  }
  function BiEdit(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "m7 17.013 4.413-.015 9.632-9.54c.378-.378.586-.88.586-1.414s-.208-1.036-.586-1.414l-1.586-1.586c-.756-.756-2.075-.752-2.825-.003L7 12.583v4.43zM18.045 4.458l1.589 1.583-1.597 1.582-1.586-1.585 1.594-1.58zM9 13.417l6.03-5.973 1.586 1.586-6.029 5.971L9 15.006v-1.589z" }, "child": [] }, { "tag": "path", "attr": { "d": "M5 21h14c1.103 0 2-.897 2-2v-8.668l-2 2V19H8.158c-.026 0-.053.01-.079.01-.033 0-.066-.009-.1-.01H5V5h6.847l2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2z" }, "child": [] }] })(props);
  }
  function BiError(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M11.001 10h2v5h-2zM11 16h2v2h-2z" }, "child": [] }, { "tag": "path", "attr": { "d": "M13.768 4.2C13.42 3.545 12.742 3.138 12 3.138s-1.42.407-1.768 1.063L2.894 18.064a1.986 1.986 0 0 0 .054 1.968A1.984 1.984 0 0 0 4.661 21h14.678c.708 0 1.349-.362 1.714-.968a1.989 1.989 0 0 0 .054-1.968L13.768 4.2zM4.661 19 12 5.137 19.344 19H4.661z" }, "child": [] }] })(props);
  }
  function BiExit(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M19.002 3h-14c-1.103 0-2 .897-2 2v4h2V5h14v14h-14v-4h-2v4c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2V5c0-1.103-.898-2-2-2z" }, "child": [] }, { "tag": "path", "attr": { "d": "m11 16 5-4-5-4v3.001H3v2h8z" }, "child": [] }] })(props);
  }
  function BiFileBlank(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M19.937 8.68c-.011-.032-.02-.063-.033-.094a.997.997 0 0 0-.196-.293l-6-6a.997.997 0 0 0-.293-.196c-.03-.014-.062-.022-.094-.033a.991.991 0 0 0-.259-.051C13.04 2.011 13.021 2 13 2H6c-1.103 0-2 .897-2 2v16c0 1.103.897 2 2 2h12c1.103 0 2-.897 2-2V9c0-.021-.011-.04-.013-.062a.99.99 0 0 0-.05-.258zM16.586 8H14V5.414L16.586 8zM6 20V4h6v5a1 1 0 0 0 1 1h5l.002 10H6z" }, "child": [] }] })(props);
  }
  function BiFile(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M19.903 8.586a.997.997 0 0 0-.196-.293l-6-6a.997.997 0 0 0-.293-.196c-.03-.014-.062-.022-.094-.033a.991.991 0 0 0-.259-.051C13.04 2.011 13.021 2 13 2H6c-1.103 0-2 .897-2 2v16c0 1.103.897 2 2 2h12c1.103 0 2-.897 2-2V9c0-.021-.011-.04-.013-.062a.952.952 0 0 0-.051-.259c-.01-.032-.019-.063-.033-.093zM16.586 8H14V5.414L16.586 8zM6 20V4h6v5a1 1 0 0 0 1 1h5l.002 10H6z" }, "child": [] }, { "tag": "path", "attr": { "d": "M8 12h8v2H8zm0 4h8v2H8zm0-8h2v2H8z" }, "child": [] }] })(props);
  }
  function BiFolder(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M20 5h-8.586L9.707 3.293A.997.997 0 0 0 9 3H4c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h16c1.103 0 2-.897 2-2V7c0-1.103-.897-2-2-2zM4 19V7h16l.002 12H4z" }, "child": [] }] })(props);
  }
  function BiGitBranch(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M17.5 4C15.57 4 14 5.57 14 7.5c0 1.554 1.025 2.859 2.43 3.315-.146.932-.547 1.7-1.23 2.323-1.946 1.773-5.527 1.935-7.2 1.907V8.837c1.44-.434 2.5-1.757 2.5-3.337C10.5 3.57 8.93 2 7 2S3.5 3.57 3.5 5.5c0 1.58 1.06 2.903 2.5 3.337v6.326c-1.44.434-2.5 1.757-2.5 3.337C3.5 20.43 5.07 22 7 22s3.5-1.57 3.5-3.5c0-.551-.14-1.065-.367-1.529 2.06-.186 4.657-.757 6.409-2.35 1.097-.997 1.731-2.264 1.904-3.768C19.915 10.438 21 9.1 21 7.5 21 5.57 19.43 4 17.5 4zm-12 1.5C5.5 4.673 6.173 4 7 4s1.5.673 1.5 1.5S7.827 7 7 7s-1.5-.673-1.5-1.5zM7 20c-.827 0-1.5-.673-1.5-1.5a1.5 1.5 0 0 1 1.482-1.498l.13.01A1.495 1.495 0 0 1 7 20zM17.5 9c-.827 0-1.5-.673-1.5-1.5S16.673 6 17.5 6s1.5.673 1.5 1.5S18.327 9 17.5 9z" }, "child": [] }] })(props);
  }
  function BiGitRepoForked(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M5.559 8.855c.166 1.183.789 3.207 3.087 4.079C11 13.829 11 14.534 11 15v.163c-1.44.434-2.5 1.757-2.5 3.337 0 1.93 1.57 3.5 3.5 3.5s3.5-1.57 3.5-3.5c0-1.58-1.06-2.903-2.5-3.337V15c0-.466 0-1.171 2.354-2.065 2.298-.872 2.921-2.896 3.087-4.079C19.912 8.441 21 7.102 21 5.5 21 3.57 19.43 2 17.5 2S14 3.57 14 5.5c0 1.552 1.022 2.855 2.424 3.313-.146.735-.565 1.791-1.778 2.252-1.192.452-2.053.953-2.646 1.536-.593-.583-1.453-1.084-2.646-1.536-1.213-.461-1.633-1.517-1.778-2.252C8.978 8.355 10 7.052 10 5.5 10 3.57 8.43 2 6.5 2S3 3.57 3 5.5c0 1.602 1.088 2.941 2.559 3.355zM17.5 4c.827 0 1.5.673 1.5 1.5S18.327 7 17.5 7 16 6.327 16 5.5 16.673 4 17.5 4zm-4 14.5c0 .827-.673 1.5-1.5 1.5s-1.5-.673-1.5-1.5.673-1.5 1.5-1.5 1.5.673 1.5 1.5zM6.5 4C7.327 4 8 4.673 8 5.5S7.327 7 6.5 7 5 6.327 5 5.5 5.673 4 6.5 4z" }, "child": [] }] })(props);
  }
  function BiGridAlt(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M10 3H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zM9 9H5V5h4v4zm5 2h6a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1h-6a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1zm1-6h4v4h-4V5zM3 20a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v6zm2-5h4v4H5v-4zm8 5a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-6a1 1 0 0 0-1-1h-6a1 1 0 0 0-1 1v6zm2-5h4v4h-4v-4z" }, "child": [] }] })(props);
  }
  function BiInfoCircle(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.514 2 12 2zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8z" }, "child": [] }, { "tag": "path", "attr": { "d": "M11 11h2v6h-2zm0-4h2v2h-2z" }, "child": [] }] })(props);
  }
  function BiLeftArrowAlt(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M12.707 17.293 8.414 13H18v-2H8.414l4.293-4.293-1.414-1.414L4.586 12l6.707 6.707z" }, "child": [] }] })(props);
  }
  function BiLinkExternal(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "m13 3 3.293 3.293-7 7 1.414 1.414 7-7L21 11V3z" }, "child": [] }, { "tag": "path", "attr": { "d": "M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z" }, "child": [] }] })(props);
  }
  function BiListUl(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M4 6h2v2H4zm0 5h2v2H4zm0 5h2v2H4zm16-8V6H8.023v2H18.8zM8 11h12v2H8zm0 5h12v2H8z" }, "child": [] }] })(props);
  }
  function BiLoaderAlt(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M12 22c5.421 0 10-4.579 10-10h-2c0 4.337-3.663 8-8 8s-8-3.663-8-8c0-4.336 3.663-8 8-8V2C6.579 2 2 6.58 2 12c0 5.421 4.579 10 10 10z" }, "child": [] }] })(props);
  }
  function BiLockAlt(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M12 2C9.243 2 7 4.243 7 7v3H6c-1.103 0-2 .897-2 2v8c0 1.103.897 2 2 2h12c1.103 0 2-.897 2-2v-8c0-1.103-.897-2-2-2h-1V7c0-2.757-2.243-5-5-5zm6 10 .002 8H6v-8h12zm-9-2V7c0-1.654 1.346-3 3-3s3 1.346 3 3v3H9z" }, "child": [] }] })(props);
  }
  function BiLock(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M12 2C9.243 2 7 4.243 7 7v2H6c-1.103 0-2 .897-2 2v9c0 1.103.897 2 2 2h12c1.103 0 2-.897 2-2v-9c0-1.103-.897-2-2-2h-1V7c0-2.757-2.243-5-5-5zM9 7c0-1.654 1.346-3 3-3s3 1.346 3 3v2H9V7zm9.002 13H13v-2.278c.595-.347 1-.985 1-1.722 0-1.103-.897-2-2-2s-2 .897-2 2c0 .736.405 1.375 1 1.722V20H6v-9h12l.002 9z" }, "child": [] }] })(props);
  }
  function BiMenu(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M4 6h16v2H4zm0 5h16v2H4zm0 5h16v2H4z" }, "child": [] }] })(props);
  }
  function BiMovie(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M20 3H4c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h16c1.103 0 2-.897 2-2V5c0-1.103-.897-2-2-2zm.001 6c-.001 0-.001 0 0 0h-.466l-2.667-4H20l.001 4zM9.535 9 6.868 5h2.597l2.667 4H9.535zm5 0-2.667-4h2.597l2.667 4h-2.597zM4 5h.465l2.667 4H4V5zm0 14v-8h16l.002 8H4z" }, "child": [] }] })(props);
  }
  function BiPencil(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M4 21a1 1 0 0 0 .24 0l4-1a1 1 0 0 0 .47-.26L21 7.41a2 2 0 0 0 0-2.82L19.42 3a2 2 0 0 0-2.83 0L4.3 15.29a1.06 1.06 0 0 0-.27.47l-1 4A1 1 0 0 0 3.76 21 1 1 0 0 0 4 21zM18 4.41 19.59 6 18 7.59 16.42 6zM5.91 16.51 15 7.41 16.59 9l-9.1 9.1-2.11.52z" }, "child": [] }] })(props);
  }
  function BiPlus(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M19 11h-6V5h-2v6H5v2h6v6h2v-6h6z" }, "child": [] }] })(props);
  }
  function BiRefresh(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M10 11H7.101l.001-.009a4.956 4.956 0 0 1 .752-1.787 5.054 5.054 0 0 1 2.2-1.811c.302-.128.617-.226.938-.291a5.078 5.078 0 0 1 2.018 0 4.978 4.978 0 0 1 2.525 1.361l1.416-1.412a7.036 7.036 0 0 0-2.224-1.501 6.921 6.921 0 0 0-1.315-.408 7.079 7.079 0 0 0-2.819 0 6.94 6.94 0 0 0-1.316.409 7.04 7.04 0 0 0-3.08 2.534 6.978 6.978 0 0 0-1.054 2.505c-.028.135-.043.273-.063.41H2l4 4 4-4zm4 2h2.899l-.001.008a4.976 4.976 0 0 1-2.103 3.138 4.943 4.943 0 0 1-1.787.752 5.073 5.073 0 0 1-2.017 0 4.956 4.956 0 0 1-1.787-.752 5.072 5.072 0 0 1-.74-.61L7.05 16.95a7.032 7.032 0 0 0 2.225 1.5c.424.18.867.317 1.315.408a7.07 7.07 0 0 0 2.818 0 7.031 7.031 0 0 0 4.395-2.945 6.974 6.974 0 0 0 1.053-2.503c.027-.135.043-.273.063-.41H22l-4-4-4 4z" }, "child": [] }] })(props);
  }
  function BiRename(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M20.005 5.995h-1v2h1v8h-1v2h1c1.103 0 2-.897 2-2v-8c0-1.102-.898-2-2-2zm-14 4H15v4H6.005z" }, "child": [] }, { "tag": "path", "attr": { "d": "M17.005 17.995V4H20V2h-8v2h3.005v1.995h-11c-1.103 0-2 .897-2 2v8c0 1.103.897 2 2 2h11V20H12v2h8v-2h-2.995v-2.005zm-13-2v-8h11v8h-11z" }, "child": [] }] })(props);
  }
  function BiRightArrowAlt(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "m11.293 17.293 1.414 1.414L19.414 12l-6.707-6.707-1.414 1.414L15.586 11H6v2h9.586z" }, "child": [] }] })(props);
  }
  function BiSearch(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M10 18a7.952 7.952 0 0 0 4.897-1.688l4.396 4.396 1.414-1.414-4.396-4.396A7.952 7.952 0 0 0 18 10c0-4.411-3.589-8-8-8s-8 3.589-8 8 3.589 8 8 8zm0-14c3.309 0 6 2.691 6 6s-2.691 6-6 6-6-2.691-6-6 2.691-6 6-6z" }, "child": [] }] })(props);
  }
  function BiSync(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "m13 7.101.01.001a4.978 4.978 0 0 1 2.526 1.362 5.005 5.005 0 0 1 1.363 2.528 5.061 5.061 0 0 1-.001 2.016 4.976 4.976 0 0 1-1.363 2.527l1.414 1.414a7.014 7.014 0 0 0 1.908-3.54 6.98 6.98 0 0 0 0-2.819 6.957 6.957 0 0 0-1.907-3.539 6.97 6.97 0 0 0-2.223-1.5 6.921 6.921 0 0 0-1.315-.408c-.137-.028-.275-.043-.412-.063V2L9 6l4 4V7.101zm-7.45 7.623c.174.412.392.812.646 1.19.249.37.537.718.854 1.034a7.036 7.036 0 0 0 2.224 1.501c.425.18.868.317 1.315.408.167.034.338.056.508.078v2.944l4-4-4-4v3.03c-.035-.006-.072-.003-.107-.011a4.978 4.978 0 0 1-2.526-1.362 4.994 4.994 0 0 1 .001-7.071L7.051 7.05a7.01 7.01 0 0 0-1.5 2.224A6.974 6.974 0 0 0 5 12a6.997 6.997 0 0 0 .55 2.724z" }, "child": [] }] })(props);
  }
  function BiTrash(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z" }, "child": [] }, { "tag": "path", "attr": { "d": "M9 10h2v8H9zm4 0h2v8h-2z" }, "child": [] }] })(props);
  }
  function BiX(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "m16.192 6.344-4.243 4.242-4.242-4.242-1.414 1.414L10.535 12l-4.242 4.242 1.414 1.414 4.242-4.242 4.243 4.242 1.414-1.414L13.364 12l4.242-4.242z" }, "child": [] }] })(props);
  }
  const textFieldClasses = "shadow-inner focus:shadow-outline focus:border-blue-500 focus:outline-none block text-base placeholder:text-gray-300 px-3 py-2 text-gray-600 w-full bg-white border border-gray-200 transition-all ease-out duration-150 focus:text-gray-900 rounded";
  const disabledClasses$1 = "opacity-50 pointer-events-none cursor-not-allowed";
  const BaseTextField = React__namespace.forwardRef(({ className, disabled, ...rest }, ref) => {
    return /* @__PURE__ */ React__namespace.createElement(
      "input",
      {
        ref,
        type: "text",
        className: `${textFieldClasses} ${disabled ? disabledClasses$1 : ""} ${className}`,
        ...rest
      }
    );
  });
  const TextArea = React__namespace.forwardRef(({ ...props }, ref) => {
    return /* @__PURE__ */ React__namespace.createElement(
      "textarea",
      {
        ...props,
        className: "shadow-inner text-base px-3 py-2 text-gray-600 resize-y focus:shadow-outline focus:border-blue-500 block w-full border border-gray-200 focus:text-gray-900 rounded",
        ref,
        style: { minHeight: "160px" }
      }
    );
  });
  const Dismissible = ({
    onDismiss,
    escape: escape2,
    click,
    disabled,
    allowClickPropagation,
    document: document2,
    ...props
  }) => {
    const area = useDismissible({
      onDismiss,
      escape: escape2,
      click,
      disabled,
      allowClickPropagation,
      document: document2
    });
    return /* @__PURE__ */ React__namespace.createElement("div", { ref: area, ...props });
  };
  function useDismissible({
    onDismiss,
    escape: escape2 = false,
    click = false,
    disabled = false,
    allowClickPropagation = false,
    document: customDocument
  }) {
    const area = React.useRef();
    React.useEffect(() => {
      const documents = customDocument ? [document, customDocument] : [document];
      const stopAndPrevent = (event) => {
        event.stopPropagation();
        event.stopImmediatePropagation();
        event.preventDefault();
      };
      const handleDocumentClick = (event) => {
        if (disabled)
          return;
        if (!area.current.contains(event.target)) {
          if (!allowClickPropagation) {
            stopAndPrevent(event);
          }
          onDismiss(event);
        }
      };
      const handleEscape = (event) => {
        if (disabled)
          return;
        if (event.keyCode === 27) {
          event.stopPropagation();
          onDismiss(event);
        }
      };
      if (click) {
        documents.forEach(
          (document2) => document2.body.addEventListener("click", handleDocumentClick)
        );
      }
      if (escape2) {
        documents.forEach(
          (document2) => document2.addEventListener("keydown", handleEscape)
        );
      }
      return () => {
        documents.forEach((document2) => {
          document2.body.removeEventListener("click", handleDocumentClick);
          document2.removeEventListener("keydown", handleEscape);
        });
      };
    }, [click, customDocument, escape2, disabled, onDismiss]);
    return area;
  }
  const { get: getColor, to: toColor } = pkg__namespace;
  var ColorFormat = /* @__PURE__ */ ((ColorFormat2) => {
    ColorFormat2["Hex"] = "hex";
    ColorFormat2["RGB"] = "rgb";
    return ColorFormat2;
  })(ColorFormat || {});
  const rgbToHex = function(color) {
    return "#" + ((1 << 24) + (color.r << 16) + (color.g << 8) + color.b).toString(16).slice(1);
  };
  function ParseColorStr(color) {
    if (!color) {
      return null;
    }
    const colorDescriptor = getColor(color);
    if (!colorDescriptor)
      return null;
    const colorVals = colorDescriptor.value;
    return { r: colorVals[0], g: colorVals[1], b: colorVals[2], a: colorVals[3] };
  }
  const ColorFormatter = {
    [
      "rgb"
      /* RGB */
    ]: {
      getLabel(color) {
        return `R${color.r} G${color.g} B${color.b}`;
      },
      getValue(color) {
        const colorVals = [color.r, color.g, color.b, color.a];
        return toColor.rgb(colorVals);
      },
      parse: ParseColorStr
    },
    [
      "hex"
      /* Hex */
    ]: {
      getLabel(color) {
        return rgbToHex(color);
      },
      getValue(color) {
        const colorVals = [color.r, color.g, color.b, color.a];
        return toColor.hex(colorVals);
      },
      parse: ParseColorStr
    }
  };
  const { SketchPicker, BlockPicker } = pkg__namespace$1;
  const GetTextColorForBackground = function(backgroundColor) {
    return !backgroundColor || backgroundColor.r * 0.299 + backgroundColor.g * 0.587 + backgroundColor.b * 0.114 > 186 ? "#000000" : "#ffffff";
  };
  const Swatch = ({
    colorRGBA,
    colorFormat,
    unselectable,
    ...props
  }) => /* @__PURE__ */ React__namespace.createElement(
    "div",
    {
      className: "bg-gray-100 rounded-3xl shadow-[0_2px_3px_rgba(0,0,0,0.12)] cursor-pointer w-full m-0",
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement(
      "div",
      {
        className: "swatch-inner flex items-center justify-center text-[13px] font-bold w-full h-10 rounded-3xl hover:opacity-[.6]",
        style: {
          background: colorRGBA ? `rgba(${colorRGBA.r}, ${colorRGBA.g}, ${colorRGBA.b}, ${colorRGBA.a})` : `#fff`,
          color: GetTextColorForBackground(colorRGBA),
          transition: "all var(--tina-timing-short) ease-out"
        }
      },
      !colorRGBA ? "Click to add color" : ColorFormatter[colorFormat].getLabel(colorRGBA)
    )
  );
  const Popover$1 = ({
    triggerBoundingBox,
    openTop,
    className = "",
    style = {},
    ...props
  }) => /* @__PURE__ */ React__namespace.createElement(
    "div",
    {
      className: `fixed z-50 before:content-[""] before:absolute before:left-1/2 before:-translate-x-1/2 before:w-[18px] before:h-[14px] before:bg-gray-200 before:z-10 after:content-[""] after:absolute after:left-1/2 after:-translate-x-1/2 after:w-4 after:h-[13px] after:bg-white after:z-20 ${openTop ? "before:bottom-0 before:mt-[1px] before:translate-y-full color-picker-on-top-clip-path after:bottom-0 after:mb-0.5 after:translate-y-full" : "before:top-0 before:mb-[1px] before:-translate-y-full color-picker-clip-path after:top-0 after:mt-0.5 after:-translate-y-full"} ${className}`,
      style: {
        top: triggerBoundingBox ? openTop ? triggerBoundingBox.top : triggerBoundingBox.bottom : 0,
        left: triggerBoundingBox ? triggerBoundingBox.left + triggerBoundingBox.width / 2 : 0,
        transform: openTop ? "translate3d(-50%, calc(-100% - 8px), 0) scale3d(1, 1, 1)" : "translate3d(-50%, 8px, 0) scale3d(1, 1, 1)",
        animation: `${openTop ? "color-popup-open-top-keyframes" : "color-popup-keyframes"} 85ms ease-out both 1`,
        transformOrigin: `50% ${openTop ? "100%" : "0"}`,
        ...style
      },
      ...props
    }
  );
  const nullColor = "transparent";
  const presetColors = [
    "#D0021B",
    "#F5A623",
    "#F8E71C",
    "#8B572A",
    "#7ED321",
    "#417505",
    "#BD10E0",
    "#9013FE",
    "#4A90E2",
    "#50E3C2",
    "#B8E986",
    "#000000",
    "#4A4A4A",
    "#9B9B9B",
    "#FFFFFF"
  ];
  const SketchWidget = (props) => /* @__PURE__ */ React__namespace.createElement(
    SketchPicker,
    {
      presetColors: props.presetColors,
      color: props.color,
      onChange: props.onChange,
      disableAlpha: props.disableAlpha,
      width: props.width
    }
  );
  const BlockWidget = (props) => /* @__PURE__ */ React__namespace.createElement(
    BlockPicker,
    {
      colors: props.presetColors,
      color: props.color,
      onChange: props.onChange,
      width: props.width
    }
  );
  const WIDGETS = { sketch: SketchWidget, block: BlockWidget };
  const ColorPicker = ({
    colorFormat,
    userColors = presetColors,
    widget = "sketch",
    input
  }) => {
    const FormPortal = useFormPortal();
    const triggerRef = React__namespace.useRef(null);
    const [triggerBoundingBox, setTriggerBoundingBox] = React.useState(null);
    const [openTop, setOpenTop] = React.useState(false);
    const updateTriggerBoundingBox = () => {
      if (triggerRef.current) {
        setTriggerBoundingBox(triggerRef.current.getBoundingClientRect());
      }
    };
    React__namespace.useEffect(() => {
      if (triggerBoundingBox) {
        const triggerOffsetTop = triggerBoundingBox.top + triggerBoundingBox.height / 2;
        const windowHeight = window.innerHeight;
        if (triggerOffsetTop > windowHeight / 2) {
          setOpenTop(true);
        } else {
          setOpenTop(false);
        }
      }
    }, [triggerBoundingBox]);
    React__namespace.useEffect(() => {
      const delay = 100;
      let timeout = false;
      setTimeout(() => {
        updateTriggerBoundingBox();
      }, delay);
      const handleResize = () => {
        clearTimeout(timeout);
        timeout = setTimeout(updateTriggerBoundingBox, delay);
      };
      window.addEventListener("resize", handleResize);
      return () => {
        window.removeEventListener("resize", handleResize);
      };
    }, [triggerRef.current]);
    const Widget = WIDGETS[widget];
    if (!Widget)
      throw new Error("You must specify a widget type.");
    const [displayColorPicker, setDisplayColorPicker] = React.useState(false);
    const getColorFormat = (colorFormat || ColorFormat.Hex).toLowerCase();
    const getColorRGBA = input.value ? ColorFormatter[getColorFormat].parse(input.value) : null;
    const handleChange = (pickerColor) => {
      const color = pickerColor.hex === nullColor ? null : { ...pickerColor.rgb, a: 1 };
      input.onChange(
        color ? ColorFormatter[getColorFormat].getValue(color) : null
      );
    };
    const toggleColorPicker = (event) => {
      event.stopPropagation();
      const display = !displayColorPicker;
      setDisplayColorPicker(display);
      if (display) {
        updateTriggerBoundingBox();
      }
    };
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "relative", ref: triggerRef }, /* @__PURE__ */ React__namespace.createElement(
      Swatch,
      {
        onClick: toggleColorPicker,
        colorRGBA: getColorRGBA,
        colorFormat: getColorFormat
      }
    ), displayColorPicker && /* @__PURE__ */ React__namespace.createElement(FormPortal, null, ({ zIndexShift }) => /* @__PURE__ */ React__namespace.createElement(
      Popover$1,
      {
        openTop,
        triggerBoundingBox,
        style: { zIndex: 5e3 + zIndexShift }
      },
      /* @__PURE__ */ React__namespace.createElement(
        Dismissible,
        {
          click: true,
          escape: true,
          disabled: !displayColorPicker,
          onDismiss: toggleColorPicker
        },
        /* @__PURE__ */ React__namespace.createElement(
          Widget,
          {
            presetColors: [...userColors, nullColor],
            color: getColorRGBA || { r: 0, g: 0, b: 0, a: 0 },
            onChange: handleChange,
            disableAlpha: true,
            width: "240px"
          }
        )
      )
    )));
  };
  const Toggle = ({
    input,
    field,
    name,
    disabled = false
  }) => {
    const checked = !!(input.value || input.checked);
    let labels = null;
    if (field.toggleLabels) {
      const fieldLabels = typeof field.toggleLabels === "object" && "true" in field.toggleLabels && "false" in field.toggleLabels && field.toggleLabels;
      labels = {
        true: fieldLabels ? fieldLabels["true"] : "Yes",
        false: fieldLabels ? fieldLabels["false"] : "No"
      };
    }
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "flex gap-2 items-center" }, labels && /* @__PURE__ */ React__namespace.createElement(
      "span",
      {
        className: `text-sm ${!checked ? "text-blue-500 font-bold" : "text-gray-300"}`
      },
      labels.false
    ), /* @__PURE__ */ React__namespace.createElement("div", { className: "relative w-12 h-7" }, /* @__PURE__ */ React__namespace.createElement(ToggleInput, { id: name, type: "checkbox", ...input }), /* @__PURE__ */ React__namespace.createElement(
      "label",
      {
        className: "bg-none p-0 outline-none w-12 h-7",
        style: {
          opacity: disabled ? 0.4 : 1,
          pointerEvents: disabled ? "none" : "inherit"
        },
        htmlFor: name,
        role: "switch"
      },
      /* @__PURE__ */ React__namespace.createElement("div", { className: "relative w-[48px] h-7 rounded-3xl bg-white shadow-inner border border-gray-200 pointer-events-none -ml-0.5" }, /* @__PURE__ */ React__namespace.createElement(
        "span",
        {
          className: `absolute rounded-3xl left-0.5 top-1/2 w-[22px] h-[22px] shadow border transition-all ease-out duration-150 ${checked ? "bg-blue-500 border-blue-600" : "bg-gray-250 border-gray-300"}`,
          style: {
            transform: `translate3d(${checked ? "20px" : "0"}, -50%, 0)`
          }
        }
      ))
    )), labels && /* @__PURE__ */ React__namespace.createElement(
      "span",
      {
        className: `text-sm ${checked ? "text-blue-500 font-bold" : "text-gray-300"}`
      },
      labels.true
    ));
  };
  const ToggleInput = ({ disabled, ...props }) => {
    return /* @__PURE__ */ React__namespace.createElement(
      "input",
      {
        className: `absolute left-0 top-0 w-12 h-8 opacity-0 m-0 ${disabled ? `cursor-not-allowed pointer-events-none` : `cursor-pointer z-20`}`,
        ...props
      }
    );
  };
  function MdVpnKey(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M12.65 10A5.99 5.99 0 0 0 7 6c-3.31 0-6 2.69-6 6s2.69 6 6 6a5.99 5.99 0 0 0 5.65-4H17v4h4v-4h2v-4H12.65zM7 14c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z" }, "child": [] }] })(props);
  }
  function MdKeyboardArrowDown(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0V0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z" }, "child": [] }] })(props);
  }
  function MdArrowForward(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0z" }, "child": [] }, { "tag": "path", "attr": { "d": "m12 4-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z" }, "child": [] }] })(props);
  }
  function MdSyncProblem(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M3 12c0 2.21.91 4.2 2.36 5.64L3 20h6v-6l-2.24 2.24A6.003 6.003 0 0 1 5 12a5.99 5.99 0 0 1 4-5.65V4.26C5.55 5.15 3 8.27 3 12zm8 5h2v-2h-2v2zM21 4h-6v6l2.24-2.24A6.003 6.003 0 0 1 19 12a5.99 5.99 0 0 1-4 5.65v2.09c3.45-.89 6-4.01 6-7.74 0-2.21-.91-4.2-2.36-5.64L21 4zm-10 9h2V7h-2v6z" }, "child": [] }] })(props);
  }
  function MdOutlineHelpOutline(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0V0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z" }, "child": [] }] })(props);
  }
  function MdOutlineSettings(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0V0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M19.43 12.98c.04-.32.07-.64.07-.98 0-.34-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46a.5.5 0 0 0-.61-.22l-2.49 1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65A.488.488 0 0 0 14 2h-4c-.25 0-.46.18-.49.42l-.38 2.65c-.61.25-1.17.59-1.69.98l-2.49-1a.566.566 0 0 0-.18-.03c-.17 0-.34.09-.43.25l-2 3.46c-.13.22-.07.49.12.64l2.11 1.65c-.04.32-.07.65-.07.98 0 .33.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46a.5.5 0 0 0 .61.22l2.49-1c.52.4 1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49 1c.06.02.12.03.18.03.17 0 .34-.09.43-.25l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zm-1.98-1.71c.04.31.05.52.05.73 0 .21-.02.43-.05.73l-.14 1.13.89.7 1.08.84-.7 1.21-1.27-.51-1.04-.42-.9.68c-.43.32-.84.56-1.25.73l-1.06.43-.16 1.13-.2 1.35h-1.4l-.19-1.35-.16-1.13-1.06-.43c-.43-.18-.83-.41-1.23-.71l-.91-.7-1.06.43-1.27.51-.7-1.21 1.08-.84.89-.7-.14-1.13c-.03-.31-.05-.54-.05-.74s.02-.43.05-.73l.14-1.13-.89-.7-1.08-.84.7-1.21 1.27.51 1.04.42.9-.68c.43-.32.84-.56 1.25-.73l1.06-.43.16-1.13.2-1.35h1.39l.19 1.35.16 1.13 1.06.43c.43.18.83.41 1.23.71l.91.7 1.06-.43 1.27-.51.7 1.21-1.07.85-.89.7.14 1.13zM12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z" }, "child": [] }] })(props);
  }
  function MdOutlineClear(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0V0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z" }, "child": [] }] })(props);
  }
  function MdOutlineSaveAlt(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0V0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67 2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2v9.67z" }, "child": [] }] })(props);
  }
  function MdOutlineCloud(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0V0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M12 6c2.62 0 4.88 1.86 5.39 4.43l.3 1.5 1.53.11A2.98 2.98 0 0 1 22 15c0 1.65-1.35 3-3 3H6c-2.21 0-4-1.79-4-4 0-2.05 1.53-3.76 3.56-3.97l1.07-.11.5-.95A5.469 5.469 0 0 1 12 6m0-2C9.11 4 6.6 5.64 5.35 8.04A5.994 5.994 0 0 0 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96A7.49 7.49 0 0 0 12 4z" }, "child": [] }] })(props);
  }
  function MdOutlinePhotoLibrary(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0V0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M20 4v12H8V4h12m0-2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.5 9.67 1.69 2.26 2.48-3.1L19 15H9zM2 6v14c0 1.1.9 2 2 2h14v-2H4V6H2z" }, "child": [] }] })(props);
  }
  function MdOutlinePerson(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0V0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M12 6c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2m0 10c2.7 0 5.8 1.29 6 2H6c.23-.72 3.31-2 6-2m0-12C9.79 4 8 5.79 8 8s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 10c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z" }, "child": [] }] })(props);
  }
  const selectFieldClasses = "shadow appearance-none bg-white block pl-3 pr-8 py-2 truncate w-full text-base cursor-pointer border border-gray-200 focus:outline-none focus:shadow-outline focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded";
  const Select = ({
    input,
    field,
    options,
    className = ""
  }) => {
    const selectOptions = options || field.options;
    const ref = React__namespace.useRef(null);
    React__namespace.useEffect(() => {
      if (ref.current && (field == null ? void 0 : field.experimental_focusIntent)) {
        ref.current.focus();
      }
    }, [field == null ? void 0 : field.experimental_focusIntent, ref]);
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "relative group w-full md:w-auto" }, /* @__PURE__ */ React__namespace.createElement(
      "select",
      {
        id: input.name,
        ref,
        value: input.value,
        onChange: input.onChange,
        className: `${selectFieldClasses} ${input.value ? "text-gray-700" : "text-gray-300"} } ${className}`,
        ...input
      },
      selectOptions ? selectOptions.map(toProps$1).map(toComponent) : /* @__PURE__ */ React__namespace.createElement("option", null, input.value)
    ), /* @__PURE__ */ React__namespace.createElement(MdKeyboardArrowDown, { className: "absolute top-1/2 right-2 w-6 h-auto -translate-y-1/2 text-gray-300 group-hover:text-blue-500 transition duration-150 ease-out pointer-events-none" }));
  };
  function toProps$1(option) {
    if (typeof option === "object")
      return option;
    return { value: option, label: option };
  }
  function toComponent(option) {
    return /* @__PURE__ */ React__namespace.createElement("option", { key: option.value, value: option.value }, option.label);
  }
  const RadioGroup = ({
    input,
    field,
    options
  }) => {
    const radioOptions = options || field.options;
    const radioRefs = {};
    const toProps2 = (option) => {
      if (typeof option === "object")
        return option;
      return { value: option, label: option };
    };
    const toComponent2 = (option) => {
      const optionId = `field-${field.name}-option-${option.value}`;
      const checked = option.value === input.value;
      return /* @__PURE__ */ React__namespace.createElement(
        "div",
        {
          key: option.value,
          ref: (ref) => {
            radioRefs[`radio_${option.value}`] = ref;
          }
        },
        /* @__PURE__ */ React__namespace.createElement(
          "input",
          {
            className: "absolute w-0 h-0 opacity-0 cursor-pointer",
            type: "radio",
            id: optionId,
            name: input.name,
            value: option.value,
            onChange: (event) => {
              input.onChange(event.target.value);
            },
            checked
          }
        ),
        /* @__PURE__ */ React__namespace.createElement(RadioOption, { htmlFor: optionId, checked }, option.label)
      );
    };
    return /* @__PURE__ */ React__namespace.createElement(RadioOptions, { id: input.name, direction: field.direction }, radioOptions ? radioOptions.map(toProps2).map(toComponent2) : input.value);
  };
  const RadioOptions = ({ direction: direction2, children, ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "div",
    {
      className: `flex w-full ${direction2 === "horizontal" ? "flex-wrap gap-y-1 gap-x-3" : "flex-col gap-1"}`,
      ...props
    },
    children
  );
  const RadioOption = ({ checked, htmlFor, children, ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "label",
    {
      className: "cursor-pointer flex group items-center gap-2",
      htmlFor,
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement(
      "span",
      {
        className: `relative h-[19px] w-[19px] rounded border text-indigo-600 focus:ring-indigo-500 transition ease-out duration-150 ${checked ? "border-blue-500 bg-blue-500 shadow-sm group-hover:bg-blue-400 group-hover:border-blue-400" : "border-gray-200 bg-white shadow-inner group-hover:bg-gray-100"}`
      },
      /* @__PURE__ */ React__namespace.createElement(
        BiCheck,
        {
          className: `absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[17px] h-[17px] transition ease-out duration-150 ${checked ? "opacity-100 text-white group-hover:opacity-80" : "text-blue-500 opacity-0 grou-hover:opacity-30"}`
        }
      )
    ),
    /* @__PURE__ */ React__namespace.createElement(
      "span",
      {
        className: `relative transition ease-out duration-150 ${checked ? "text-gray-800 opacity-100" : "text-gray-700 opacity-70 group-hover:opacity-100"}`
      },
      children
    )
  );
  const CheckboxGroup = ({
    input,
    field,
    options,
    disabled = false
  }) => {
    const checkboxOptions = options || field.options;
    const toProps2 = (option) => {
      if (typeof option === "object")
        return option;
      return { value: option, label: option };
    };
    const toComponent2 = (option) => {
      const optionId = `field-${field.name}-option-${option.value}`;
      const checked = input.value ? input.value.includes(option.value) : false;
      return /* @__PURE__ */ React__namespace.createElement("div", { key: option.value }, /* @__PURE__ */ React__namespace.createElement(
        "input",
        {
          className: "absolute w-0 h-0 opacity-0 cursor-pointer",
          type: "checkbox",
          name: input.name,
          id: optionId,
          value: option.value,
          checked,
          disabled,
          onChange: (event) => {
            if (event.target.checked === true) {
              input.onChange([...input.value, event.target.value]);
            } else {
              input.onChange([
                ...input.value.filter((v) => v !== event.target.value)
              ]);
            }
          }
        }
      ), /* @__PURE__ */ React__namespace.createElement(
        "label",
        {
          className: "cursor-pointer flex group items-center gap-2",
          htmlFor: optionId
        },
        /* @__PURE__ */ React__namespace.createElement(
          "span",
          {
            className: `relative h-[18px] w-[18px] rounded border text-indigo-600 focus:ring-indigo-500 transition ease-out duration-150 ${checked ? "border-blue-500 bg-blue-500 shadow-sm group-hover:bg-blue-400 group-hover:border-blue-400" : "border-gray-200 bg-white shadow-inner group-hover:bg-gray-100"}`
          },
          /* @__PURE__ */ React__namespace.createElement(
            BiCheck,
            {
              className: `absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[17px] h-[17px] transition ease-out duration-150 ${checked ? "opacity-100 text-white group-hover:opacity-80" : "text-blue-500 opacity-0 grou-hover:opacity-30"}`
            }
          )
        ),
        /* @__PURE__ */ React__namespace.createElement(
          "span",
          {
            className: `relative transition ease-out duration-150 ${checked ? "text-gray-800 opacity-100" : "text-gray-700 opacity-70 group-hover:opacity-100"}`
          },
          option.label
        )
      ));
    };
    return /* @__PURE__ */ React__namespace.createElement(
      "div",
      {
        className: `flex w-full ${field.direction === "horizontal" ? "flex-wrap gap-y-1 gap-x-3" : "flex-col gap-1"}`,
        id: input.name
      },
      checkboxOptions == null ? void 0 : checkboxOptions.map(toProps2).map(toComponent2)
    );
  };
  const Input = ({ ...props }) => {
    return /* @__PURE__ */ React.createElement("input", { className: textFieldClasses, ...props });
  };
  const NumberInput = ({
    onChange,
    value,
    step
  }) => /* @__PURE__ */ React__namespace.createElement(
    Input,
    {
      type: "number",
      step,
      value,
      onChange: (event) => {
        const inputValue = event.target.value;
        const newValue = inputValue === "" ? void 0 : inputValue;
        if (onChange) {
          const syntheticEvent = {
            ...event,
            target: {
              ...event.target,
              value: newValue
            }
          };
          onChange(syntheticEvent);
        }
      }
    }
  );
  function cn$1(...inputs) {
    return tailwindMerge.twMerge(clsx.clsx(inputs));
  }
  const Button$1 = ({
    variant = "secondary",
    as: Tag2 = "button",
    size: size2 = "medium",
    busy,
    disabled,
    rounded = "full",
    children,
    className = "",
    ...props
  }) => {
    const baseClasses = "icon-parent inline-flex items-center font-medium focus:outline-none focus:ring-2 focus:shadow-outline text-center inline-flex justify-center transition-all duration-150 ease-out ";
    const variantClasses = {
      primary: `shadow text-white bg-blue-500 hover:bg-blue-600 focus:ring-blue-500 border-0`,
      secondary: `shadow text-gray-500 hover:text-blue-500 bg-gray-50 hover:bg-white border border-gray-100`,
      white: `shadow text-gray-500 hover:text-blue-500 bg-white hover:bg-gray-50 border border-gray-100`,
      ghost: `text-gray-500 hover:text-blue-500 hover:shadow border border-transparent border-0 hover:border hover:border-gray-200 bg-transparent`,
      danger: `shadow text-white bg-red-500 hover:bg-red-600 focus:ring-red-500`,
      custom: ""
    };
    const state = busy ? `busy` : disabled ? `disabled` : `default`;
    const stateClasses = {
      disabled: `pointer-events-none opacity-30 cursor-not-allowed`,
      busy: `pointer-events-none opacity-70 cursor-wait`,
      default: ``
    };
    const roundedClasses = {
      full: `rounded`,
      left: `rounded-l`,
      right: `rounded-r`,
      custom: "",
      none: ""
    };
    const sizeClasses = {
      small: `text-xs h-8 px-3`,
      medium: `text-sm h-10 px-8`,
      custom: ``
    };
    return /* @__PURE__ */ React__namespace.createElement(
      Tag2,
      {
        className: cn$1(
          baseClasses,
          variantClasses[variant],
          sizeClasses[size2],
          stateClasses[state],
          roundedClasses[rounded],
          className
        ),
        ...props
      },
      children
    );
  };
  const IconButton = ({
    variant = "secondary",
    size: size2 = "medium",
    busy,
    disabled,
    children,
    className,
    ...props
  }) => {
    const baseClasses = "icon-parent inline-flex items-center border border-transparent text-sm font-medium focus:outline-none focus:ring-2 focus:shadow-outline text-center inline-flex justify-center transition-all duration-150 ease-out rounded-full";
    const variantClasses = {
      primary: `shadow text-white bg-blue-500 hover:bg-blue-600 focus:ring-blue-500`,
      secondary: `shadow text-gray-500 hover:text-blue-500 bg-gray-50 hover:bg-white border border-gray-200`,
      white: `shadow text-gray-500 hover:text-blue-500 bg-white hover:bg-gray-50 border border-gray-200`,
      ghost: `text-gray-500 hover:text-blue-500 hover:shadow border border-transparent hover:border-gray-200 bg-transparent`
    };
    const state = busy ? `busy` : disabled ? `disabled` : `default`;
    const stateClasses = {
      disabled: `pointer-events-none	opacity-30 cursor-not-allowed`,
      busy: `pointer-events-none opacity-70 cursor-wait`,
      default: ``
    };
    const sizeClasses = {
      small: `h-7 w-7`,
      medium: `h-9 w-9`,
      custom: ``
    };
    return /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        className: cn$1(
          baseClasses,
          variantClasses[variant],
          sizeClasses[size2],
          stateClasses[state],
          className
        ),
        ...props
      },
      children
    );
  };
  function FontLoader() {
    React__namespace.useEffect(() => {
      const link = document.createElement("link");
      link.href = "https://fonts.googleapis.com/css2?family=Inter:wght@400;600&family=Libre+Baskerville:wght@400;500;600;700&display=swap";
      link.rel = "stylesheet";
      document.head.appendChild(link);
      return () => {
        document.head.removeChild(link);
      };
    }, []);
    return null;
  }
  function classNames(...classes) {
    return classes.filter(Boolean).join(" ");
  }
  const OverflowMenu$1 = ({ toolbarItems: toolbarItems2, className = "w-full" }) => {
    return /* @__PURE__ */ React.createElement(PopoverPrimitive__namespace.Root, null, /* @__PURE__ */ React.createElement(
      PopoverPrimitive__namespace.Trigger,
      {
        className: `cursor-pointer relative justify-center inline-flex items-center p-3 text-sm font-medium focus:outline-1 focus:outline-blue-200 pointer-events-auto ${open ? `text-blue-400` : `text-gray-300 hover:text-blue-500`} ${className}}`
      },
      /* @__PURE__ */ React.createElement(
        "svg",
        {
          xmlns: "http://www.w3.org/2000/svg",
          className: "h-5 w-5",
          fill: "none",
          viewBox: "0 0 24 24",
          stroke: "currentColor"
        },
        /* @__PURE__ */ React.createElement(
          "path",
          {
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 2,
            d: "M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"
          }
        )
      )
    ), /* @__PURE__ */ React.createElement(PopoverPrimitive__namespace.Portal, null, /* @__PURE__ */ React.createElement(PopoverPrimitive__namespace.Content, { style: { zIndex: 2e4 }, align: "end" }, /* @__PURE__ */ React.createElement("div", { className: "mt-0 -mr-1 rounded shadow-lg bg-white ring-1 ring-black ring-opacity-5 py-1" }, toolbarItems2.map((toolbarItem) => {
      return /* @__PURE__ */ React.createElement(
        "span",
        {
          "data-test": `${toolbarItem.name}OverflowButton`,
          key: toolbarItem.name,
          onMouseDown: (event) => {
            event.preventDefault();
            toolbarItem.onMouseDown(event);
          },
          className: classNames(
            toolbarItem.active ? "bg-gray-50 text-blue-500" : "bg-white text-gray-600",
            "hover:bg-gray-50 hover:text-blue-500 cursor-pointer pointer-events-auto px-4 py-2 text-sm w-full flex items-center whitespace-nowrap"
          )
        },
        /* @__PURE__ */ React.createElement("div", { className: "mr-2 opacity-80" }, toolbarItem.Icon),
        " ",
        toolbarItem.label
      );
    })))));
  };
  function BsArrowRightShort(props) {
    return GenIcon({ "tag": "svg", "attr": { "fill": "currentColor", "viewBox": "0 0 16 16" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M4 8a.5.5 0 0 1 .5-.5h5.793L8.146 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708-.708L10.293 8.5H4.5A.5.5 0 0 1 4 8" }, "child": [] }] })(props);
  }
  function BsCheckCircleFill(props) {
    return GenIcon({ "tag": "svg", "attr": { "fill": "currentColor", "viewBox": "0 0 16 16" }, "child": [{ "tag": "path", "attr": { "d": "M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0m-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" }, "child": [] }] })(props);
  }
  function BsExclamationOctagonFill(props) {
    return GenIcon({ "tag": "svg", "attr": { "fill": "currentColor", "viewBox": "0 0 16 16" }, "child": [{ "tag": "path", "attr": { "d": "M11.46.146A.5.5 0 0 0 11.107 0H4.893a.5.5 0 0 0-.353.146L.146 4.54A.5.5 0 0 0 0 4.893v6.214a.5.5 0 0 0 .146.353l4.394 4.394a.5.5 0 0 0 .353.146h6.214a.5.5 0 0 0 .353-.146l4.394-4.394a.5.5 0 0 0 .146-.353V4.893a.5.5 0 0 0-.146-.353zM8 4c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995A.905.905 0 0 1 8 4m.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2" }, "child": [] }] })(props);
  }
  const MessageIcon = ({
    type = "success",
    className = ""
  }) => {
    const icons = {
      success: BiCheckCircle,
      warning: BiError,
      error: BiError,
      info: BiInfoCircle
    };
    const Icon = icons[type];
    return /* @__PURE__ */ React.createElement(Icon, { className });
  };
  const Message = ({
    children,
    type = "success",
    size: size2 = "medium",
    className = "",
    link,
    linkLabel = "Learn More"
  }) => {
    const containerClasses = {
      success: "bg-gradient-to-r from-green-50 to-green-100 border-green-200",
      warning: "bg-gradient-to-r from-yellow-50 to-yellow-100 border-yellow-200",
      error: "bg-gradient-to-r from-red-50 to-red-100 border-red-200",
      info: "bg-gradient-to-r from-blue-50 to-blue-100 border-blue-100"
    };
    const textClasses = {
      success: "text-green-700",
      warning: "text-yellow-700",
      error: "text-red-700",
      info: "text-blue-700"
    };
    const iconClasses = {
      success: "text-green-400",
      warning: "text-yellow-400",
      error: "text-red-400",
      info: "text-blue-400"
    };
    const sizeClasses = {
      small: "px-3 py-1.5 text-xs",
      medium: "px-4 py-2.5 text-sm"
    };
    return /* @__PURE__ */ React.createElement(
      "div",
      {
        className: `rounded-lg border shadow-sm ${sizeClasses[size2]} ${containerClasses[type]} ${className}`
      },
      /* @__PURE__ */ React.createElement("div", { className: "flex flex-col sm:flex-row items-start sm:items-center gap-2" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-2" }, /* @__PURE__ */ React.createElement(
        MessageIcon,
        {
          type,
          className: `${size2 === "small" ? "w-5" : "w-6"} h-auto flex-shrink-0 ${iconClasses[type]}`
        }
      ), /* @__PURE__ */ React.createElement("div", { className: `flex-1 ${textClasses[type]}` }, children)), link && /* @__PURE__ */ React.createElement(
        "a",
        {
          href: link,
          target: "_blank",
          className: "flex-shrink-0 flex items-center gap-1 text-blue-600 underline decoration-blue-200 hover:text-blue-500 hover:decoration-blue-500 transition-all ease-out duration-150"
        },
        linkLabel,
        " ",
        /* @__PURE__ */ React.createElement(BsArrowRightShort, { className: "w-4 h-auto" })
      ))
    );
  };
  function useCMS() {
    return useCMS$1();
  }
  const supportedFileTypes = [
    "text/*",
    "application/pdf",
    "application/octet-stream",
    "application/json",
    "application/ld+json",
    "application/vnd.ms-excel",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    "application/msword",
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    "application/postscript",
    "model/fbx",
    "model/gltf+json",
    "model/ply",
    "model/u3d+mesh",
    "model/vnd.usdz+zip",
    "application/x-indesign",
    "application/vnd.apple.mpegurl",
    "application/dash+xml",
    "application/mxf",
    "image/*",
    "video/*"
  ];
  const DEFAULT_MEDIA_UPLOAD_TYPES = supportedFileTypes.join(",");
  const dropzoneAcceptFromString = (str) => {
    return Object.assign(
      {},
      ...(str || DEFAULT_MEDIA_UPLOAD_TYPES).split(",").map((x) => ({ [x]: [] }))
    );
  };
  const isImage = (filename) => {
    return /\.(gif|jpg|jpeg|tiff|png|svg|webp|avif)(\?.*)?$/i.test(filename);
  };
  const isVideo = (filename) => {
    return /\.(mp4|webm|ogg|m4v|mov|avi|flv|mkv)(\?.*)?$/i.test(filename);
  };
  const absoluteImgURL = (str) => {
    if (str.startsWith("http"))
      return str;
    return `${window.location.origin}${str}`;
  };
  const { useDropzone: useDropzone$1 } = dropzone__namespace;
  const StyledImage = ({ src }) => {
    const isSvg = /\.svg$/.test(src);
    return /* @__PURE__ */ React__namespace.createElement(
      "img",
      {
        src,
        className: `block max-w-full rounded shadow overflow-hidden max-h-48 lg:max-h-64 h-auto object-contain transition-opacity duration-100 ease-out m-0 bg-gray-200 bg-auto bg-center bg-no-repeat ${isSvg ? "min-w-[12rem]" : ""}`
      }
    );
  };
  const StyledFile = ({ src }) => {
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "max-w-full w-full flex-1 flex justify-start items-center gap-3" }, /* @__PURE__ */ React__namespace.createElement("div", { className: "w-12 h-12 bg-white shadow border border-gray-100 rounded flex justify-center flex-none" }, /* @__PURE__ */ React__namespace.createElement(BiFileBlank, { className: "w-3/5 h-full fill-gray-300" })), /* @__PURE__ */ React__namespace.createElement("span", { className: "text-base text-left flex-1 text-gray-500 w-full break-words truncate" }, src));
  };
  const ImageUpload = React__namespace.forwardRef(({ onDrop, onClear, onClick, value, src, loading }, ref) => {
    const cms = useCMS();
    const { getRootProps, getInputProps } = useDropzone$1({
      accept: dropzoneAcceptFromString(
        cms.media.accept || DEFAULT_MEDIA_UPLOAD_TYPES
      ),
      onDrop,
      noClick: !!onClick
    });
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "w-full max-w-full", ...getRootProps() }, /* @__PURE__ */ React__namespace.createElement("input", { ...getInputProps() }), value ? loading ? /* @__PURE__ */ React__namespace.createElement(ImageLoadingIndicator, null) : /* @__PURE__ */ React__namespace.createElement(
      "div",
      {
        className: `relative w-full max-w-full flex justify-start ${isImage(src) ? `items-start gap-3` : `items-center gap-2`}`
      },
      /* @__PURE__ */ React__namespace.createElement(
        "button",
        {
          className: "flex-shrink min-w-0 focus-within:shadow-outline focus-within:border-blue-500 rounded outline-none overflow-visible cursor-pointer border-none hover:opacity-60 transition ease-out duration-100",
          onClick,
          ref
        },
        isImage(src) ? /* @__PURE__ */ React__namespace.createElement(StyledImage, { src }) : /* @__PURE__ */ React__namespace.createElement(StyledFile, { src })
      ),
      onClear && /* @__PURE__ */ React__namespace.createElement(
        DeleteImageButton,
        {
          onClick: (e3) => {
            e3.stopPropagation();
            onClear();
          }
        }
      )
    ) : /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        className: "outline-none relative hover:opacity-60 w-full",
        onClick
      },
      loading ? /* @__PURE__ */ React__namespace.createElement(ImageLoadingIndicator, null) : /* @__PURE__ */ React__namespace.createElement("div", { className: "text-center rounded-[5px] bg-gray-100 text-gray-300 leading-[1.35] py-3 text-[15px] font-normal transition-all ease-out duration-100 hover:opacity-60" }, "Drag 'n' drop a file here,", /* @__PURE__ */ React__namespace.createElement("br", null), "or click to select a file")
    ));
  });
  const DeleteImageButton = ({
    onClick
  }) => {
    return /* @__PURE__ */ React__namespace.createElement(IconButton, { variant: "white", className: "flex-none", onClick }, /* @__PURE__ */ React__namespace.createElement(TrashIcon, { className: "w-7 h-auto caret-transparent" }));
  };
  const ImageLoadingIndicator = () => /* @__PURE__ */ React__namespace.createElement("div", { className: "p-4 w-full min-h-[96px] flex flex-col justify-center items-center" }, /* @__PURE__ */ React__namespace.createElement(LoadingDots, null));
  function IoMdArrowDropdown(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M128 192l128 128 128-128z" }, "child": [] }] })(props);
  }
  function IoMdArrowDropup(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M128 320l128-128 128 128z" }, "child": [] }] })(props);
  }
  function IoMdClose(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M405 136.798L375.202 107 256 226.202 136.798 107 107 136.798 226.202 256 107 375.202 136.798 405 256 285.798 375.202 405 405 375.202 285.798 256z" }, "child": [] }] })(props);
  }
  function IoMdRefresh(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M256 388c-72.597 0-132-59.405-132-132 0-72.601 59.403-132 132-132 36.3 0 69.299 15.4 92.406 39.601L278 234h154V80l-51.698 51.702C348.406 99.798 304.406 80 256 80c-96.797 0-176 79.203-176 176s78.094 176 176 176c81.045 0 148.287-54.134 169.401-128H378.85c-18.745 49.561-67.138 84-122.85 84z" }, "child": [] }] })(props);
  }
  const buttonVariants = classVarianceAuthority.cva(
    "inline-flex items-center justify-center whitespace-nowrap rounded text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
    {
      variants: {
        variant: {
          outline: "border border-gray-200 bg-white hover:bg-white hover:text-accent-foreground"
        },
        size: {
          default: "h-10 px-4 py-2",
          sm: "h-9 rounded px-3",
          lg: "h-11 rounded px-8",
          icon: "h-10 w-10"
        }
      },
      defaultVariants: {
        variant: "outline",
        size: "default"
      }
    }
  );
  const Button = React__namespace.forwardRef(
    ({ className, variant, size: size2, asChild = false, ...props }, ref) => {
      const Comp = asChild ? reactSlot.Slot : "button";
      return /* @__PURE__ */ React__namespace.createElement(
        Comp,
        {
          className: cn$1(buttonVariants({ variant, size: size2, className })),
          ref,
          ...props
        }
      );
    }
  );
  Button.displayName = "Button";
  const Command = React__namespace.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ React__namespace.createElement(
    cmdk$1.Command,
    {
      ref,
      className: cn$1(
        "flex h-full w-full flex-col overflow-hidden rounded bg-white text-popover-foreground",
        className
      ),
      ...props
    }
  ));
  Command.displayName = cmdk$1.Command.displayName;
  const CommandInput = React__namespace.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ React__namespace.createElement("div", { className: "flex items-center border-b px-3", "cmdk-input-wrapper": "" }, /* @__PURE__ */ React__namespace.createElement(lucideReact.Search, { className: "mr-2 h-4 w-4 shrink-0 opacity-50" }), /* @__PURE__ */ React__namespace.createElement(
    cmdk$1.Command.Input,
    {
      ref,
      className: cn$1(
        "flex h-11 w-full rounded bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      ),
      ...props
    }
  )));
  CommandInput.displayName = cmdk$1.Command.Input.displayName;
  const CommandList = React__namespace.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ React__namespace.createElement(
    cmdk$1.Command.List,
    {
      ref,
      className: cn$1("overflow-x-hidden", className),
      ...props
    }
  ));
  CommandList.displayName = cmdk$1.Command.List.displayName;
  const CommandEmpty = React__namespace.forwardRef((props, ref) => /* @__PURE__ */ React__namespace.createElement(
    cmdk$1.Command.Empty,
    {
      ref,
      className: "py-6 text-center text-sm",
      ...props
    }
  ));
  CommandEmpty.displayName = cmdk$1.Command.Empty.displayName;
  const CommandGroup = React__namespace.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ React__namespace.createElement(
    cmdk$1.Command.Group,
    {
      ref,
      className: cn$1(
        "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-sm [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
        className
      ),
      ...props
    }
  ));
  CommandGroup.displayName = cmdk$1.Command.Group.displayName;
  const CommandItem = React__namespace.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ React__namespace.createElement(
    cmdk$1.Command.Item,
    {
      ref,
      className: cn$1(
        "hover:bg-slate-100	relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled='true']:pointer-events-none data-[disabled='true']:opacity-50",
        className
      ),
      ...props
    }
  ));
  CommandItem.displayName = cmdk$1.Command.Item.displayName;
  const OptionComponent = ({
    id: id2,
    value,
    field,
    _values,
    node: node2,
    onSelect
  }) => {
    return /* @__PURE__ */ React.createElement(
      CommandItem,
      {
        key: `${id2}-option`,
        value: id2,
        onSelect: (currentValue) => {
          onSelect(currentValue === value ? "" : currentValue);
        }
      },
      /* @__PURE__ */ React.createElement("div", { className: "flex flex-col w-full" }, (field == null ? void 0 : field.optionComponent) && _values ? field.optionComponent(_values, node2._internalSys) : /* @__PURE__ */ React.createElement("span", { className: "text-x" }, id2))
    );
  };
  const Popover = PopoverPrimitive__namespace.Root;
  const PopoverTrigger = PopoverPrimitive__namespace.Trigger;
  const PopoverContent = React__namespace.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => /* @__PURE__ */ React__namespace.createElement(PopoverPrimitive__namespace.Portal, null, /* @__PURE__ */ React__namespace.createElement(
    PopoverPrimitive__namespace.Content,
    {
      ref,
      style: { zIndex: 9999 },
      align,
      sideOffset,
      side: "bottom",
      className: cn$1(
        "rounded border bg-white p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        "max-h-[30vh] max-w-[30vw] overflow-y-auto",
        className
      ),
      ...props
    }
  )));
  PopoverContent.displayName = PopoverPrimitive__namespace.Content.displayName;
  const filterQueryBuilder = (fieldFilterConfig, collection) => {
    return {
      [collection]: Object.entries(fieldFilterConfig).reduce(
        (acc, [key, value]) => {
          acc[key] = { in: value };
          return acc;
        },
        {}
      )
    };
  };
  const useGetOptionSets = (cms, collections, collectionFilter) => {
    const [optionSets, setOptionSets] = React__namespace.useState([]);
    const [loading, setLoading] = React__namespace.useState(true);
    React__namespace.useEffect(() => {
      const fetchOptionSets = async () => {
        const filters = typeof collectionFilter === "function" ? collectionFilter() : collectionFilter;
        const optionSets2 = await Promise.all(
          collections.map(async (collection) => {
            try {
              const filter2 = (filters == null ? void 0 : filters[collection]) ? filterQueryBuilder(filters[collection], collection) : {};
              const response = await cms.api.tina.request(
                `#graphql
            query ($collection: String!, $filter: DocumentFilter) {
              collection(collection: $collection) {
                documents(first: -1, filter: $filter) {
                  edges {
                    node {
                      ...on Node {
                        id,
                      }
                      ...on Document {
                        _values
                        _internalSys: _sys {
                          filename
                          path
                        }
                      }
                    }
                  }
                }
              }
            }
            `,
                {
                  variables: {
                    collection,
                    filter: filter2
                  }
                }
              );
              return {
                collection,
                edges: response.collection.documents.edges
              };
            } catch (e3) {
              console.error(
                "Exception thrown while building and running GraphQL query: ",
                e3
              );
              return {
                collection,
                edges: []
              };
            }
          })
        );
        setOptionSets(optionSets2);
        setLoading(false);
      };
      if (cms && collections.length > 0) {
        fetchOptionSets();
      } else {
        setOptionSets([]);
      }
    }, [cms, collections]);
    return { optionSets, loading };
  };
  const getFilename = (optionSets, value) => {
    const nodes2 = optionSets.flatMap(
      (optionSet) => optionSet.edges.map((edge) => edge.node)
    );
    const node2 = nodes2.find((node22) => node22.id === value);
    return node2 ? node2._internalSys.filename : null;
  };
  const Combobox = ({ cms, input, field }) => {
    const [open2, setOpen] = React__namespace.useState(false);
    const [value, setValue] = React__namespace.useState(input.value);
    const [displayText, setDisplayText] = React__namespace.useState(null);
    const { optionSets, loading } = useGetOptionSets(
      cms,
      field.collections,
      field.collectionFilter
    );
    const [filteredOptionsList, setFilteredOptionsList] = React__namespace.useState(optionSets);
    React__namespace.useEffect(() => {
      setDisplayText(getFilename(optionSets, value));
      input.onChange(value);
    }, [value, input, optionSets]);
    React__namespace.useEffect(() => {
      if (field.experimental___filter && optionSets.length > 0) {
        setFilteredOptionsList(
          field.experimental___filter(optionSets, void 0)
        );
      } else {
        setFilteredOptionsList(optionSets);
      }
    }, [optionSets, field.experimental___filter]);
    if (loading === true) {
      return /* @__PURE__ */ React__namespace.createElement(LoadingDots, { color: "var(--tina-color-primary)" });
    }
    return /* @__PURE__ */ React__namespace.createElement(Popover, { open: open2, onOpenChange: setOpen }, /* @__PURE__ */ React__namespace.createElement(PopoverTrigger, { asChild: true }, /* @__PURE__ */ React__namespace.createElement(
      Button,
      {
        variant: "outline",
        role: "combobox",
        "aria-expanded": open2,
        className: "w-full justify-between"
      },
      /* @__PURE__ */ React__namespace.createElement("p", { className: "truncate" }, displayText ?? "Choose an option..."),
      open2 ? /* @__PURE__ */ React__namespace.createElement(IoMdArrowDropup, { size: 20 }) : /* @__PURE__ */ React__namespace.createElement(IoMdArrowDropdown, { size: 20 })
    )), /* @__PURE__ */ React__namespace.createElement(PopoverContent, { className: "p-0 relative min-w-[var(--radix-popover-trigger-width)]" }, /* @__PURE__ */ React__namespace.createElement(
      Command,
      {
        shouldFilter: !field.experimental___filter,
        filter: (value2, search) => {
          if (value2.toLowerCase().includes(search.toLowerCase()))
            return 1;
          return 0;
        }
      },
      /* @__PURE__ */ React__namespace.createElement(
        CommandInput,
        {
          placeholder: "Search reference...",
          onValueChange: (search) => {
            if (field.experimental___filter) {
              setFilteredOptionsList(
                field.experimental___filter(optionSets, search)
              );
            }
          }
        }
      ),
      /* @__PURE__ */ React__namespace.createElement(CommandEmpty, null, "No reference found"),
      /* @__PURE__ */ React__namespace.createElement(CommandList, null, filteredOptionsList.length > 0 && (filteredOptionsList == null ? void 0 : filteredOptionsList.map(({ collection, edges: edges2 }) => /* @__PURE__ */ React__namespace.createElement(CommandGroup, { key: `${collection}-group`, heading: collection }, /* @__PURE__ */ React__namespace.createElement(CommandList, null, edges2 == null ? void 0 : edges2.map(({ node: node2 }) => {
        const { id: id2, _values } = node2;
        return /* @__PURE__ */ React__namespace.createElement(
          OptionComponent,
          {
            id: id2,
            key: id2,
            value,
            field,
            _values,
            node: node2,
            onSelect: (currentValue) => {
              setValue(currentValue);
              setOpen(false);
            }
          }
        );
      }))))))
    )));
  };
  const useGetNode = (cms, id2) => {
    const [document2, setDocument] = React__namespace.useState(
      void 0
    );
    React__namespace.useEffect(() => {
      const fetchNode = async () => {
        try {
          const response = await cms.api.tina.request(
            `#graphql
          query($id: String!) {
            node(id:$id) {
              ... on Document {
                _sys {
                  collection {
                    name
                  }
                  breadcrumbs
                  filename
                  relativePath
                }
              }
            }
          }`,
            { variables: { id: id2 } }
          );
          setDocument(response.node);
        } catch (error2) {
          setDocument(void 0);
        }
      };
      if (cms && id2) {
        fetchNode();
      } else {
        setDocument(void 0);
      }
    }, [cms, id2]);
    return document2;
  };
  const GetReference = ({ cms, id: id2, children }) => {
    const document2 = useGetNode(cms, id2);
    if (!document2) {
      return null;
    }
    return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, children(document2));
  };
  const ReferenceLink = ({ cms, input }) => {
    const hasTinaAdmin = cms.flags.get("tina-admin") === false ? false : true;
    const tinaPreview = cms.flags.get("tina-preview") || false;
    if (!hasTinaAdmin) {
      return null;
    }
    return /* @__PURE__ */ React__namespace.createElement(GetReference, { cms, id: input.value }, (document2) => {
      const filenameWithoutExt = document2._sys.filename.replace(
        /\.[^/.]+$/,
        ""
      );
      return cms.state.editingMode === "visual" ? /* @__PURE__ */ React__namespace.createElement(
        "button",
        {
          type: "button",
          onClick: () => {
            cms.dispatch({
              type: "forms:set-active-form-id",
              value: input.value
            });
          },
          className: "text-gray-700 hover:text-blue-500 flex items-center uppercase text-sm mt-2 mb-2 leading-none"
        },
        /* @__PURE__ */ React__namespace.createElement(BiEdit, { className: "h-5 w-auto opacity-80 mr-2" }),
        "Edit"
      ) : /* @__PURE__ */ React__namespace.createElement(
        "a",
        {
          href: `${tinaPreview ? `/${tinaPreview}/index.html#` : "/admin#"}/collections/edit/${document2._sys.collection.name}/~/${filenameWithoutExt}`,
          className: "text-gray-700 hover:text-blue-500 inline-flex items-center uppercase text-sm mt-2 mb-2 leading-none"
        },
        /* @__PURE__ */ React__namespace.createElement(BiEdit, { className: "h-5 w-auto opacity-80 mr-2" }),
        "Edit in CMS"
      );
    });
  };
  const Reference = ({ input, field }) => {
    const cms = useCMS();
    return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("div", { className: "relative group" }, /* @__PURE__ */ React__namespace.createElement(Combobox, { cms, input, field })), /* @__PURE__ */ React__namespace.createElement(ReferenceLink, { cms, input }));
  };
  const ButtonToggle = ({
    input,
    field,
    options
  }) => {
    const toggleOptions = options || field.options;
    const direction2 = field.direction || "horizontal";
    return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("input", { type: "text", id: input.name, className: "hidden", ...input }), /* @__PURE__ */ React__namespace.createElement(
      "div",
      {
        className: `flex ${direction2 === "horizontal" ? "divide-x" : "flex-col divide-y"} divide-gray-150 shadow-inner bg-gray-50 border border-gray-200 w-full justify-between rounded`
      },
      toggleOptions ? toggleOptions.map((toggleOption) => {
        const option = toProps(toggleOption);
        if (option.icon) {
          return /* @__PURE__ */ React__namespace.createElement(
            ButtonOption,
            {
              key: option.value,
              input,
              value: option.value,
              icon: option.icon
            }
          );
        } else {
          return /* @__PURE__ */ React__namespace.createElement(
            ButtonOption,
            {
              key: option.value,
              input,
              value: option.value,
              label: option.label
            }
          );
        }
      }) : input.value
    ));
  };
  const ButtonOption = ({
    input,
    value,
    label = "",
    icon,
    ...props
  }) => {
    const Icon = icon;
    return /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        className: `relative whitespace-nowrap flex items-center justify-center flex-1 block font-medium text-base px-3 py-2 text-gray-400 transition-all ease-out duration-150`,
        onClick: () => {
          input.onChange(value);
        },
        ...props
      },
      Icon ? /* @__PURE__ */ React__namespace.createElement(Icon, { className: "w-6 h-auto opacity-70" }) : /* @__PURE__ */ React__namespace.createElement("span", { className: "flex-1 truncate max-w-full w-0" }, label),
      /* @__PURE__ */ React__namespace.createElement(
        "span",
        {
          className: `absolute whitespace-nowrap px-3 py-2 z-20 font-medium text-base flex items-center justify-center -top-0.5 -right-0.5 -bottom-0.5 -left-0.5 truncate bg-white border border-gray-200 origin-center rounded shadow text-blue-500 transition-all ease-out duration-150 ${input.value === value ? "opacity-100" : "opacity-0"}`
        },
        Icon ? /* @__PURE__ */ React__namespace.createElement(Icon, { className: "w-6 h-auto opacity-70" }) : /* @__PURE__ */ React__namespace.createElement("span", { className: "flex-1 truncate max-w-full w-0" }, label)
      )
    );
  };
  function toProps(option) {
    if (typeof option === "object")
      return option;
    return { value: option, label: option };
  }
  const passwordFieldClasses = "shadow-inner focus:shadow-outline focus:border-blue-500 focus:outline-none block text-base placeholder:text-gray-300 px-3 py-2 text-gray-600 w-full bg-white border border-gray-200 transition-all ease-out duration-150 focus:text-gray-900 rounded";
  const disabledClasses = "opacity-50 pointer-events-none cursor-not-allowed";
  const errorClasses = "border-red-500 focus:border-red-500 focus:shadow-outline-red";
  const BasePasswordField = React__namespace.forwardRef(({ className, disabled, error: error2, ...rest }, ref) => {
    return /* @__PURE__ */ React__namespace.createElement(
      "input",
      {
        ref,
        type: "password",
        className: `${passwordFieldClasses} ${disabled ? disabledClasses : ""} ${className} ${error2 ? errorClasses : ""}`,
        ...rest
      }
    );
  });
  const ListFieldMeta = ({
    name,
    label,
    description,
    error: error2,
    margin = true,
    children,
    actions,
    index,
    tinaForm,
    triggerHoverEvents,
    ...props
  }) => {
    const { dispatch: setHoveredField } = useEvent("field:hover");
    const { dispatch: setFocusedField } = useEvent("field:focus");
    const hoverEvents = {};
    if (triggerHoverEvents) {
      hoverEvents["onMouseOver"] = () => setHoveredField({ id: tinaForm.id, fieldName: name });
      hoverEvents["onMouseOut"] = () => setHoveredField({ id: null, fieldName: null });
    }
    return /* @__PURE__ */ React__namespace.createElement(
      FieldWrapper,
      {
        margin,
        ...hoverEvents,
        onClick: () => setFocusedField({ id: tinaForm.id, fieldName: name }),
        style: { zIndex: index ? 1e3 - index : void 0 },
        ...props
      },
      /* @__PURE__ */ React__namespace.createElement(ListHeader, null, /* @__PURE__ */ React__namespace.createElement(ListMeta, null, label !== false && /* @__PURE__ */ React__namespace.createElement(ListLabel, null, label || name), description && /* @__PURE__ */ React__namespace.createElement(FieldDescription, { className: "whitespace-nowrap text-ellipsis overflow-hidden" }, description)), actions && actions),
      children,
      error2 && typeof error2 === "string" && /* @__PURE__ */ React__namespace.createElement(FieldError, null, error2)
    );
  };
  const ListHeader = ({ children }) => {
    return /* @__PURE__ */ React__namespace.createElement("span", { className: "relative flex gap-2 w-full justify-between items-center mb-2" }, children);
  };
  const ListMeta = ({ children }) => {
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "flex-1 truncate" }, children);
  };
  const ListLabel = ({ children }) => {
    return /* @__PURE__ */ React__namespace.createElement(
      "span",
      {
        className: `m-0 text-xs font-semibold flex-1 text-ellipsis overflow-hidden transition-all ease-out duration-100 text-left`
      },
      children
    );
  };
  const ListPanel = ({ className = "", ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "div",
    {
      className: `max-h-[initial] relative h-auto rounded shadow bg-gray-100 ${className}`,
      ...props
    }
  );
  const EmptyList = ({ message = "There are no items" }) => /* @__PURE__ */ React__namespace.createElement("div", { className: "text-center bg-gray-100 text-gray-300 leading-[1.35] py-3 text-[15px] font-normal" }, message);
  const Group$1 = ({ tinaForm, form, field, input, meta, index }) => {
    const addItem = React.useCallback(() => {
      let obj = {};
      if (typeof field.defaultItem === "function") {
        obj = field.defaultItem();
      } else {
        obj = field.defaultItem || {};
      }
      form.mutators.insert(field.name, 0, obj);
    }, [form, field]);
    const items2 = input.value || [];
    const itemProps = React.useCallback(
      (item) => {
        if (!field.itemProps)
          return {};
        return field.itemProps(item);
      },
      [field.itemProps]
    );
    const isMax = items2.length >= (field.max || Number.POSITIVE_INFINITY);
    const isMin = items2.length <= (field.min || 0);
    const fixedLength = field.min === field.max;
    return /* @__PURE__ */ React.createElement(
      ListFieldMeta,
      {
        name: input.name,
        label: field.label,
        description: field.description,
        error: meta.error,
        index,
        triggerHoverEvents: false,
        tinaForm,
        actions: (!fixedLength || fixedLength && !isMax) && /* @__PURE__ */ React.createElement(
          IconButton,
          {
            onClick: addItem,
            disabled: isMax,
            variant: "primary",
            size: "small"
          },
          /* @__PURE__ */ React.createElement(AddIcon, { className: "w-5/6 h-auto" })
        )
      },
      /* @__PURE__ */ React.createElement(ListPanel, null, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(reactBeautifulDnd.Droppable, { droppableId: field.name, type: field.name }, (provider) => /* @__PURE__ */ React.createElement("div", { ref: provider.innerRef }, items2.length === 0 && /* @__PURE__ */ React.createElement(EmptyList, null), items2.map((item, index2) => /* @__PURE__ */ React.createElement(
        Item$2,
        {
          key: index2,
          tinaForm,
          field,
          item,
          index: index2,
          isMin,
          fixedLength,
          ...itemProps(item)
        }
      )), provider.placeholder))))
    );
  };
  const Item$2 = ({
    tinaForm,
    field,
    index,
    item,
    label,
    isMin,
    fixedLength,
    ...p2
  }) => {
    const cms = useCMS$1();
    const removeItem = React.useCallback(() => {
      tinaForm.mutators.remove(field.name, index);
    }, [tinaForm, field, index]);
    const title = label || `${field.label || field.name} Item`;
    const { dispatch: setHoveredField } = useEvent("field:hover");
    const { dispatch: setFocusedField } = useEvent("field:focus");
    return /* @__PURE__ */ React.createElement(reactBeautifulDnd.Draggable, { draggableId: `${field.name}.${index}`, index }, (provider, snapshot) => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      ItemHeader,
      {
        provider,
        isDragging: snapshot.isDragging,
        ...p2
      },
      /* @__PURE__ */ React.createElement(DragHandle, { isDragging: snapshot.isDragging }),
      /* @__PURE__ */ React.createElement(
        ItemClickTarget,
        {
          onMouseOver: () => setHoveredField({
            id: tinaForm.id,
            fieldName: `${field.name}.${index}`
          }),
          onMouseOut: () => setHoveredField({ id: null, fieldName: null }),
          onClick: () => {
            const state = tinaForm.finalForm.getState();
            if (state.invalid === true) {
              cms.alerts.error(
                "Cannot navigate away from an invalid form."
              );
              return;
            }
            cms.dispatch({
              type: "forms:set-active-field-name",
              value: {
                formId: tinaForm.id,
                fieldName: `${field.name}.${index}`
              }
            });
            setFocusedField({
              id: tinaForm.id,
              fieldName: `${field.name}.${index}`
            });
          }
        },
        /* @__PURE__ */ React.createElement(GroupLabel, null, title),
        /* @__PURE__ */ React.createElement(BiPencil, { className: "h-5 w-auto fill-current text-gray-200 group-hover:text-inherit transition-colors duration-150 ease-out" })
      ),
      (!fixedLength || fixedLength && !isMin) && /* @__PURE__ */ React.createElement(ItemDeleteButton, { disabled: isMin, onClick: removeItem })
    )));
  };
  const ItemClickTarget = ({ children, ...props }) => {
    return /* @__PURE__ */ React.createElement(
      "div",
      {
        className: "group text-gray-400 hover:text-blue-600 flex-1 min-w-0 relative flex justify-between items-center p-2",
        ...props
      },
      children
    );
  };
  const GroupLabel = ({
    error: error2,
    children
  }) => {
    return /* @__PURE__ */ React.createElement(
      "span",
      {
        className: `m-0 text-xs font-semibold flex-1 text-ellipsis overflow-hidden transition-all ease-out duration-100 text-left ${error2 ? "text-red-500" : "text-gray-600 group-hover:text-inherit"}`
      },
      children
    );
  };
  const ItemHeader = ({
    isDragging,
    children,
    provider,
    ...props
  }) => {
    return /* @__PURE__ */ React.createElement(
      "div",
      {
        ref: provider.innerRef,
        ...provider.draggableProps,
        ...provider.dragHandleProps,
        ...props,
        className: `relative group cursor-pointer flex justify-between items-stretch bg-white border border-gray-100 -mb-px overflow-visible p-0 text-sm font-normal ${isDragging ? "rounded shadow text-blue-600" : "text-gray-600 first:rounded-t last:rounded-b"} ${props.className ?? ""}`,
        style: {
          ...provider.draggableProps.style ?? {},
          ...provider.dragHandleProps.style ?? {},
          ...props.style ?? {}
        }
      },
      children
    );
  };
  const ItemDeleteButton = ({ onClick, disabled = false }) => {
    return /* @__PURE__ */ React.createElement(
      "button",
      {
        type: "button",
        className: `w-8 px-1 py-2.5 flex items-center justify-center text-gray-200 hover:opacity-100 opacity-30 hover:bg-gray-50 ${disabled && "pointer-events-none opacity-30 cursor-not-allowed"}`,
        onClick
      },
      /* @__PURE__ */ React.createElement(TrashIcon, { className: "h-5 w-auto fill-current text-red-500 transition-colors duration-150 ease-out" })
    );
  };
  const DragHandle = ({ isDragging }) => {
    return /* @__PURE__ */ React.createElement(
      "div",
      {
        className: `relative w-8 px-1 py-2.5 flex items-center justify-center hover:bg-gray-50 group cursor-[grab] ${isDragging ? `text-blue-500` : `text-gray-200 hover:text-gray-600`}`
      },
      isDragging ? /* @__PURE__ */ React.createElement(ReorderIcon, { className: "fill-current w-7 h-auto" }) : /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(DragIcon, { className: "fill-current w-7 h-auto group-hover:opacity-0 transition-opacity duration-150 ease-out" }), /* @__PURE__ */ React.createElement(ReorderIcon, { className: "fill-current w-7 h-auto absolute top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-150 ease-out" }))
    );
  };
  const GroupListField = Group$1;
  const GroupListFieldPlugin = {
    name: "group-list",
    Component: GroupListField
  };
  const BlockSelector = ({
    templates,
    addItem
  }) => {
    const showFilter = React__namespace.useMemo(() => {
      return Object.entries(templates).length > 6;
    }, [templates]);
    const [filter2, setFilter] = React__namespace.useState("");
    const filteredBlocks = React__namespace.useMemo(() => {
      return Object.entries(templates).filter(([name, template]) => {
        return template.label ? template.label.toLowerCase().includes(filter2.toLowerCase()) || name.toLowerCase().includes(filter2.toLowerCase()) : name.toLowerCase().includes(filter2.toLowerCase());
      });
    }, [filter2]);
    return /* @__PURE__ */ React__namespace.createElement(react$1.Popover, null, ({ open: open2 }) => /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(react$1.PopoverButton, { as: "span" }, /* @__PURE__ */ React__namespace.createElement(
      IconButton,
      {
        variant: open2 ? "secondary" : "primary",
        size: "small",
        className: `${open2 ? `rotate-45 pointer-events-none` : ``}`
      },
      /* @__PURE__ */ React__namespace.createElement(AddIcon, { className: "w-5/6 h-auto" })
    )), /* @__PURE__ */ React__namespace.createElement("div", { className: "transform translate-y-full absolute -bottom-1 right-0 z-50" }, /* @__PURE__ */ React__namespace.createElement(
      react$1.Transition,
      {
        enter: "transition duration-150 ease-out",
        enterFrom: "transform opacity-0 -translate-y-2",
        enterTo: "transform opacity-100 translate-y-0",
        leave: "transition duration-75 ease-in",
        leaveFrom: "transform opacity-100 translate-y-0",
        leaveTo: "transform opacity-0 -translate-y-2"
      },
      /* @__PURE__ */ React__namespace.createElement(react$1.PopoverPanel, { className: "relative overflow-hidden rounded-lg shadow-lg bg-white border border-gray-100" }, ({ close: close2 }) => /* @__PURE__ */ React__namespace.createElement("div", { className: "min-w-[192px] max-h-[24rem] overflow-y-auto flex flex-col w-full h-full" }, showFilter && /* @__PURE__ */ React__namespace.createElement("div", { className: "sticky top-0 bg-gray-50 p-2 border-b border-gray-100 z-10" }, /* @__PURE__ */ React__namespace.createElement(
        "input",
        {
          type: "text",
          className: "bg-white text-xs rounded-sm border border-gray-100 shadow-inner py-1 px-2 w-full block placeholder-gray-200",
          onClick: (event) => {
            event.stopPropagation();
            event.preventDefault();
          },
          value: filter2,
          onChange: (event) => {
            setFilter(event.target.value);
          },
          placeholder: "Filter..."
        }
      )), filteredBlocks.length === 0 && /* @__PURE__ */ React__namespace.createElement("span", { className: "relative text-center text-xs px-2 py-3 text-gray-300 bg-gray-50 italic" }, "No matches found"), filteredBlocks.length > 0 && filteredBlocks.map(([name, template]) => /* @__PURE__ */ React__namespace.createElement(
        "button",
        {
          className: "relative text-center text-xs py-2 px-4 border-l-0 border-t-0 border-r-0 border-b border-gray-50 w-full outline-none transition-all ease-out duration-150 hover:text-blue-500 focus:text-blue-500 focus:bg-gray-50 hover:bg-gray-50",
          key: name,
          onClick: () => {
            addItem(name, template);
            setFilter("");
            close2();
          }
        },
        template.label ? template.label : name
      ))))
    ))));
  };
  const Group = wrapFieldWithNoHeader(
    ({ tinaForm, field }) => {
      const cms = useCMS$1();
      return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(
        Header,
        {
          onClick: () => {
            const state = tinaForm.finalForm.getState();
            if (state.invalid === true) {
              cms.alerts.error("Cannot navigate away from an invalid form.");
              return;
            }
            cms.dispatch({
              type: "forms:set-active-field-name",
              value: { formId: tinaForm.id, fieldName: field.name }
            });
          }
        },
        field.label || field.name,
        field.description && /* @__PURE__ */ React__namespace.createElement(
          "span",
          {
            className: `block font-sans text-xs italic font-light text-gray-400 pt-0.5 whitespace-normal m-0`,
            dangerouslySetInnerHTML: { __html: field.description }
          }
        )
      ));
    }
  );
  const Header = ({ onClick, children }) => {
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "pt-1 mb-5" }, /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        onClick,
        className: "group px-4 py-3 bg-white hover:bg-gray-50 shadow focus:shadow-outline focus:border-blue-500 w-full border border-gray-100 hover:border-gray-200 text-gray-500 hover:text-blue-400 focus:text-blue-500 rounded flex justify-between items-center gap-2"
      },
      /* @__PURE__ */ React__namespace.createElement("span", { className: "text-left text-base font-medium overflow-hidden text-ellipsis whitespace-nowrap flex-1" }, children),
      " ",
      /* @__PURE__ */ React__namespace.createElement(BiPencil, { className: "h-6 w-auto transition-opacity duration-150 ease-out opacity-80 group-hover:opacity-90" })
    ));
  };
  const PanelHeader = ({ onClick, children }) => {
    return /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        className: `relative z-40 group text-left w-full bg-white hover:bg-gray-50 py-2 border-t border-b shadow-sm
       border-gray-100 px-6 -mt-px`,
        onClick,
        tabIndex: -1
      },
      /* @__PURE__ */ React__namespace.createElement("div", { className: "flex items-center justify-between gap-3 text-xs tracking-wide font-medium text-gray-700 group-hover:text-blue-400 uppercase max-w-form mx-auto" }, children, /* @__PURE__ */ React__namespace.createElement(IoMdClose, { className: "h-auto w-5 inline-block opacity-70 -mt-0.5 -mx-0.5" }))
    );
  };
  const PanelBody = ({ id: id2, children }) => {
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "flex-1 w-full overflow-y-auto bg-[var(--tina-color-grey-1)]" }, /* @__PURE__ */ React__namespace.createElement(FormWrapper, { id: id2 }, children));
  };
  const GroupPanel = ({
    isExpanded,
    className = "",
    style = {},
    ...props
  }) => /* @__PURE__ */ React__namespace.createElement(
    "div",
    {
      className: `absolute w-full top-0 bottom-0 left-0 flex flex-col justify-between overflow-hidden z-10 ${className}`,
      style: {
        pointerEvents: isExpanded ? "all" : "none",
        ...isExpanded ? {
          animationName: "fly-in-left",
          animationDuration: "150ms",
          animationDelay: "0",
          animationIterationCount: 1,
          animationTimingFunction: "ease-out",
          animationFillMode: "backwards"
        } : {
          transition: "transform 150ms ease-out",
          transform: "translate3d(100%, 0, 0)"
        },
        ...style
      },
      ...props
    }
  );
  function GroupField(props) {
    return /* @__PURE__ */ React__namespace.createElement("div", null, "Subfield: ", props.field.label || props.field.name);
  }
  const GroupFieldPlugin = {
    name: "group",
    Component: Group
  };
  const BlockSelectorBig = ({
    templates,
    addItem,
    label
  }) => {
    const FormPortal = useFormPortal();
    const [pickerIsOpen, setPickerIsOpen] = React__namespace.useState(false);
    const showFilter = React__namespace.useMemo(() => {
      return Object.entries(templates).length > 6;
    }, [templates]);
    const [filter2, setFilter] = React__namespace.useState("");
    const filteredTemplates = React__namespace.useMemo(() => {
      return Object.entries(templates).filter(([name, template]) => {
        return template.label ? template.label.toLowerCase().includes(filter2.toLowerCase()) || name.toLowerCase().includes(filter2.toLowerCase()) : name.toLowerCase().includes(filter2.toLowerCase());
      });
    }, [filter2]);
    const categories = React__namespace.useMemo(() => {
      return [
        //@ts-ignore
        ...new Set(
          Object.entries(templates).filter(([name, template]) => {
            return template.category ? template.category : false;
          }).map(([name, template]) => {
            return template.category;
          })
        )
      ];
    }, [templates]);
    const hasUncategorized = React__namespace.useMemo(() => {
      return Object.entries(templates).filter(([name, template]) => {
        return !template.category;
      }).length > 0;
    }, [templates]);
    const uncategorized = React__namespace.useMemo(() => {
      return filteredTemplates.filter(([name, template]) => {
        return !template.category;
      });
    }, [filteredTemplates]);
    const close2 = (name, template) => {
      if (name && template) {
        addItem(name, template);
      }
      setFilter("");
      setPickerIsOpen(false);
    };
    return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(
      IconButton,
      {
        variant: pickerIsOpen ? "secondary" : "primary",
        size: "small",
        className: `${pickerIsOpen ? "rotate-45 pointer-events-none" : ""}`,
        onClick: () => setPickerIsOpen(!pickerIsOpen)
      },
      /* @__PURE__ */ React__namespace.createElement(AddIcon, { className: "w-5/6 h-auto" })
    ), /* @__PURE__ */ React__namespace.createElement(FormPortal, null, ({ zIndexShift }) => /* @__PURE__ */ React__namespace.createElement(react$1.Transition, { show: pickerIsOpen }, /* @__PURE__ */ React__namespace.createElement(
      react$1.TransitionChild,
      {
        enter: "transform transition-all ease-out duration-200",
        enterFrom: "opacity-0 -translate-x-1/2",
        enterTo: "opacity-100 translate-x-0",
        leave: "transform transition-all ease-in duration-150",
        leaveFrom: "opacity-100 translate-x-0",
        leaveTo: "opacity-0 -translate-x-1/2"
      },
      /* @__PURE__ */ React__namespace.createElement(
        "div",
        {
          className: "absolute left-0 top-0 z-panel h-full w-full transform bg-gray-50",
          style: { zIndex: zIndexShift + 1e3 }
        },
        /* @__PURE__ */ React__namespace.createElement(
          PanelHeader,
          {
            onClick: () => {
              setPickerIsOpen(false);
            }
          },
          label,
          " ⁠– Add New"
        ),
        /* @__PURE__ */ React__namespace.createElement("div", { className: "h-full overflow-y-auto max-h-full bg-gray-50 pt-4 px-6 pb-12" }, /* @__PURE__ */ React__namespace.createElement("div", { className: "w-full flex justify-center" }, /* @__PURE__ */ React__namespace.createElement("div", { className: "w-full max-w-form" }, showFilter && /* @__PURE__ */ React__namespace.createElement("div", { className: "block relative group mb-1" }, /* @__PURE__ */ React__namespace.createElement(
          "input",
          {
            type: "text",
            className: "shadow-inner focus:shadow-outline focus:border-blue-400 focus:outline-none block text-sm pl-2.5 pr-8 py-1.5 text-gray-600 w-full bg-white border border-gray-200 focus:text-gray-900 rounded placeholder-gray-400 hover:placeholder-gray-600 transition-all ease-out duration-150",
            onClick: (event) => {
              event.stopPropagation();
              event.preventDefault();
            },
            value: filter2,
            onChange: (event) => {
              setFilter(event.target.value);
            },
            placeholder: "Search"
          }
        ), filter2 === "" ? /* @__PURE__ */ React__namespace.createElement(BiSearch, { className: "absolute right-3 top-1/2 -translate-y-1/2 w-5 h-auto text-blue-500 opacity-70 group-hover:opacity-100 transition-all ease-out duration-150" }) : /* @__PURE__ */ React__namespace.createElement(
          "button",
          {
            onClick: () => {
              setFilter("");
            },
            className: "outline-none focus:outline-none bg-transparent border-0 p-0 m-0 absolute right-2.5 top-1/2 -translate-y-1/2 opacity-50 hover:opacity-100 transition-all ease-out duration-150"
          },
          /* @__PURE__ */ React__namespace.createElement(MdOutlineClear, { className: "w-5 h-auto text-gray-600" })
        )), uncategorized.length === 0 && categories.length === 0 && /* @__PURE__ */ React__namespace.createElement(EmptyState, null, "No blocks to display."), uncategorized.length > 0 && categories.length === 0 && /* @__PURE__ */ React__namespace.createElement(CardColumns, { className: "pt-3" }, uncategorized.map(([name, template]) => /* @__PURE__ */ React__namespace.createElement(
          BlockCard,
          {
            key: `${template}-${name}`,
            close: close2,
            name,
            template
          }
        ))), categories.map((category, index) => {
          return /* @__PURE__ */ React__namespace.createElement(
            BlockGroup,
            {
              key: index,
              templates: filteredTemplates.filter(
                ([name, template]) => {
                  return template.category && //@ts-ignore
                  template.category === category ? true : false;
                }
              ),
              category,
              isLast: index === categories.length - 1 && !hasUncategorized,
              close: close2
            }
          );
        }), hasUncategorized && uncategorized.length === 0 && /* @__PURE__ */ React__namespace.createElement("div", { className: "relative text-gray-500 block text-left w-full text-base font-bold tracking-wide py-2 truncate pointer-events-none opacity-50" }, "Uncategorized"), uncategorized.length > 0 && categories.length > 0 && /* @__PURE__ */ React__namespace.createElement(
          BlockGroup,
          {
            templates: uncategorized,
            category: "Uncategorized",
            close: close2,
            isLast: true
          }
        ))))
      )
    ))));
  };
  const BlockGroup = ({ category, templates, close: close2, isLast = false }) => {
    return /* @__PURE__ */ React__namespace.createElement(
      react$1.Disclosure,
      {
        defaultOpen: true,
        as: "div",
        className: `left-0 right-0 relative`
      },
      ({ open: open2 }) => /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(
        react$1.DisclosureButton,
        {
          className: `relative block group text-left w-full text-base font-bold tracking-wide py-2 truncate ${templates.length === 0 ? `pointer-events-none` : ``} ${!isLast && (!open2 || templates.length === 0) && `border-b border-gray-100`}`
        },
        /* @__PURE__ */ React__namespace.createElement(
          "span",
          {
            className: `text-gray-500 group-hover:text-gray-800 transition-all ease-out duration-150 ${templates.length === 0 ? `opacity-50` : ``}`
          },
          category
        ),
        templates.length > 0 && /* @__PURE__ */ React__namespace.createElement(
          MdKeyboardArrowDown,
          {
            className: `absolute top-1/2 right-0 w-6 h-auto -translate-y-1/2 text-gray-300 origin-center group-hover:text-blue-500 transition-all duration-150 ease-out ${open2 ? `` : `-rotate-90 opacity-70 group-hover:opacity-100`}`
          }
        )
      ), /* @__PURE__ */ React__namespace.createElement(
        react$1.Transition,
        {
          enter: "transition duration-100 ease-out",
          enterFrom: "transform scale-95 opacity-0",
          enterTo: "transform scale-100 opacity-100",
          leave: "transition duration-75 ease-out",
          leaveFrom: "transform scale-100 opacity-100",
          leaveTo: "transform scale-95 opacity-0"
        },
        /* @__PURE__ */ React__namespace.createElement(react$1.DisclosurePanel, null, templates.length > 0 && /* @__PURE__ */ React__namespace.createElement(CardColumns, null, templates.map(([name, template], index) => /* @__PURE__ */ React__namespace.createElement(
          BlockCard,
          {
            key: index,
            close: close2,
            name,
            template
          }
        ))))
      ))
    );
  };
  const CardColumns = ({ children, className = "" }) => {
    return /* @__PURE__ */ React__namespace.createElement(
      "div",
      {
        className: `w-full mb-1 -mt-2 ${className}`,
        style: { columns: "320px", columnGap: "16px" }
      },
      children
    );
  };
  const BlockCard = ({ close: close2, name, template }) => {
    return /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        className: "mb-2 mt-2 group relative text-xs font-bold border border-gray-100 w-full outline-none transition-all ease-out duration-150 hover:text-blue-500 focus:text-blue-500 focus:bg-gray-50 hover:bg-gray-50 rounded bg-white shadow overflow-hidden",
        style: { breakInside: "avoid", transform: "translateZ(0)" },
        key: name,
        onClick: () => {
          close2(name, template);
        }
      },
      template.previewSrc && /* @__PURE__ */ React__namespace.createElement(
        "img",
        {
          src: template.previewSrc,
          className: "w-full h-auto transition-all ease-out duration-150 group-hover:opacity-50"
        }
      ),
      /* @__PURE__ */ React__namespace.createElement(
        "span",
        {
          className: `relative flex justify-between items-center gap-4 w-full px-4 text-left ${template.previewSrc ? `py-2 border-t border-gray-100 ` : `py-3`}`
        },
        template.label ? template.label : name,
        /* @__PURE__ */ React__namespace.createElement(AddIcon, { className: "w-5 h-auto group-hover:text-blue-500 opacity-30 transition-all ease-out duration-150 group-hover:opacity-80" })
      )
    );
  };
  const EmptyState = ({ children }) => {
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "block relative text-gray-300 italic py-1" }, children);
  };
  const Blocks = ({
    tinaForm,
    form,
    field,
    input,
    meta,
    index
  }) => {
    const addItem = React__namespace.useCallback(
      (name, template) => {
        let obj = {};
        if (typeof template.defaultItem === "function") {
          obj = template.defaultItem();
        } else {
          obj = template.defaultItem || {};
        }
        obj._template = name;
        form.mutators.insert(field.name, 0, obj);
      },
      [field.name, form.mutators]
    );
    const items2 = input.value || [];
    const isMax = items2.length >= (field.max || Infinity);
    const isMin = items2.length <= (field.min || 0);
    const fixedLength = field.min === field.max;
    return /* @__PURE__ */ React__namespace.createElement(
      ListFieldMeta,
      {
        name: input.name,
        label: field.label,
        description: field.description,
        error: meta.error,
        triggerHoverEvents: false,
        index,
        tinaForm,
        actions: (!fixedLength || fixedLength && !isMax) && // @ts-ignore
        (!field.visualSelector ? /* @__PURE__ */ React__namespace.createElement(BlockSelector, { templates: field.templates, addItem }) : /* @__PURE__ */ React__namespace.createElement(
          BlockSelectorBig,
          {
            label: field.label || field.name,
            templates: field.templates,
            addItem
          }
        ))
      },
      /* @__PURE__ */ React__namespace.createElement(ListPanel, null, /* @__PURE__ */ React__namespace.createElement(reactBeautifulDnd.Droppable, { droppableId: field.name, type: field.name }, (provider) => /* @__PURE__ */ React__namespace.createElement("div", { ref: provider.innerRef, className: "edit-page--list-parent" }, items2.length === 0 && /* @__PURE__ */ React__namespace.createElement(EmptyList, null), items2.map((block2, index2) => {
        const template = field.templates[block2._template];
        if (!template) {
          return /* @__PURE__ */ React__namespace.createElement(
            InvalidBlockListItem,
            {
              key: index2,
              index: index2,
              field,
              tinaForm
            }
          );
        }
        const itemProps = (item) => {
          if (!template.itemProps)
            return {};
          return template.itemProps(item);
        };
        return /* @__PURE__ */ React__namespace.createElement(
          BlockListItem,
          {
            key: index2,
            block: block2,
            template,
            index: index2,
            field,
            tinaForm,
            isMin,
            fixedLength,
            ...itemProps(block2)
          }
        );
      }), provider.placeholder)))
    );
  };
  const BlockListItem = ({
    label,
    tinaForm,
    field,
    index,
    template,
    isMin,
    fixedLength
  }) => {
    const cms = useCMS$1();
    const removeItem = React__namespace.useCallback(() => {
      tinaForm.mutators.remove(field.name, index);
    }, [tinaForm, field, index]);
    const { dispatch: setHoveredField } = useEvent("field:hover");
    const { dispatch: setFocusedField } = useEvent("field:focus");
    return /* @__PURE__ */ React__namespace.createElement(reactBeautifulDnd.Draggable, { key: index, draggableId: `${field.name}.${index}`, index }, (provider, snapshot) => /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(ItemHeader, { provider, isDragging: snapshot.isDragging }, /* @__PURE__ */ React__namespace.createElement(DragHandle, { isDragging: snapshot.isDragging }), /* @__PURE__ */ React__namespace.createElement(
      ItemClickTarget,
      {
        onClick: () => {
          const state = tinaForm.finalForm.getState();
          if (state.invalid === true) {
            cms.alerts.error(
              "Cannot navigate away from an invalid form."
            );
            return;
          }
          cms.dispatch({
            type: "forms:set-active-field-name",
            value: {
              formId: tinaForm.id,
              fieldName: `${field.name}.${index}`
            }
          });
          setFocusedField({
            id: tinaForm.id,
            fieldName: `${field.name}.${index}`
          });
        },
        onMouseOver: () => setHoveredField({
          id: tinaForm.id,
          fieldName: `${field.name}.${index}`
        }),
        onMouseOut: () => setHoveredField({ id: null, fieldName: null })
      },
      /* @__PURE__ */ React__namespace.createElement(GroupLabel, null, label || template.label),
      /* @__PURE__ */ React__namespace.createElement(BiPencil, { className: "h-5 w-auto fill-current text-gray-200 group-hover:text-inherit transition-colors duration-150 ease-out" })
    ), (!fixedLength || fixedLength && !isMin) && /* @__PURE__ */ React__namespace.createElement(ItemDeleteButton, { disabled: isMin, onClick: removeItem }))));
  };
  const InvalidBlockListItem = ({
    tinaForm,
    field,
    index
  }) => {
    const removeItem = React__namespace.useCallback(() => {
      tinaForm.mutators.remove(field.name, index);
    }, [tinaForm, field, index]);
    return /* @__PURE__ */ React__namespace.createElement(reactBeautifulDnd.Draggable, { key: index, draggableId: `${field.name}.${index}`, index }, (provider, snapshot) => /* @__PURE__ */ React__namespace.createElement(ItemHeader, { provider, isDragging: snapshot.isDragging }, /* @__PURE__ */ React__namespace.createElement(DragHandle, { isDragging: snapshot.isDragging }), /* @__PURE__ */ React__namespace.createElement(ItemClickTarget, null, /* @__PURE__ */ React__namespace.createElement(GroupLabel, { error: true }, "Invalid Block")), /* @__PURE__ */ React__namespace.createElement(ItemDeleteButton, { onClick: removeItem })));
  };
  const BlocksField = Blocks;
  const BlocksFieldPlugin = {
    name: "blocks",
    Component: BlocksField
  };
  const parse$2 = (value) => value || "";
  const ColorField = wrapFieldsWithMeta(
    ({ input, field }) => {
      return /* @__PURE__ */ React__namespace.createElement(
        ColorPicker,
        {
          colorFormat: field.colorFormat,
          userColors: field.colors,
          widget: field.widget,
          input
        }
      );
    }
  );
  const ColorFieldPlugin = {
    name: "color",
    Component: ColorField,
    parse: parse$2,
    validate(value, values, meta, field) {
      if (field.required && !value)
        return "Required";
    }
  };
  const List = ({ tinaForm, form, field, input, meta, index }) => {
    const addItem = React__namespace.useCallback(() => {
      let newItem = "";
      if (typeof field.defaultItem === "function") {
        newItem = field.defaultItem();
      } else if (typeof field.defaultItem !== "undefined") {
        newItem = field.defaultItem;
      }
      form.mutators.insert(field.name, 0, newItem);
    }, [form, field]);
    const items2 = input.value || [];
    const itemProps = React__namespace.useCallback(
      (item) => {
        if (!field.itemProps)
          return {};
        return field.itemProps(item);
      },
      [field.itemProps]
    );
    const isMax = items2.length >= (field.max || Infinity);
    const isMin = items2.length <= (field.min || 0);
    const fixedLength = field.min === field.max;
    return /* @__PURE__ */ React__namespace.createElement(
      ListFieldMeta,
      {
        name: input.name,
        label: field.label,
        description: field.description,
        error: meta.error,
        index,
        tinaForm,
        actions: (!fixedLength || fixedLength && !isMax) && /* @__PURE__ */ React__namespace.createElement(IconButton, { onClick: addItem, variant: "primary", size: "small" }, /* @__PURE__ */ React__namespace.createElement(AddIcon, { className: "w-5/6 h-auto" }))
      },
      /* @__PURE__ */ React__namespace.createElement(ListPanel, null, /* @__PURE__ */ React__namespace.createElement("div", null, /* @__PURE__ */ React__namespace.createElement(reactBeautifulDnd.Droppable, { droppableId: field.name, type: field.name }, (provider) => /* @__PURE__ */ React__namespace.createElement("div", { ref: provider.innerRef }, items2.length === 0 && /* @__PURE__ */ React__namespace.createElement(EmptyList, null), items2.map((item, index2) => /* @__PURE__ */ React__namespace.createElement(
        Item$1,
        {
          key: index2,
          tinaForm,
          field,
          item,
          index: index2,
          isMin,
          fixedLength,
          ...itemProps(item)
        }
      )), provider.placeholder))))
    );
  };
  const Item$1 = ({
    tinaForm,
    field,
    index,
    item,
    label,
    isMin,
    fixedLength,
    ...p2
  }) => {
    const removeItem = React__namespace.useCallback(() => {
      tinaForm.mutators.remove(field.name, index);
    }, [tinaForm, field, index]);
    const fields = [
      {
        type: field.type,
        list: field.list,
        parentTypename: field.parentTypename,
        ...field.field,
        label: false,
        name: `${field.name}.${index}`
      }
    ];
    return /* @__PURE__ */ React__namespace.createElement(reactBeautifulDnd.Draggable, { draggableId: `${field.name}.${index}`, index }, (provider, snapshot) => /* @__PURE__ */ React__namespace.createElement(ItemHeader, { provider, isDragging: snapshot.isDragging, ...p2 }, /* @__PURE__ */ React__namespace.createElement(DragHandle, { isDragging: snapshot.isDragging }), /* @__PURE__ */ React__namespace.createElement(ItemClickTarget, null, /* @__PURE__ */ React__namespace.createElement(FieldsBuilder, { padding: false, form: tinaForm, fields })), (!fixedLength || fixedLength && !isMin) && /* @__PURE__ */ React__namespace.createElement(ItemDeleteButton, { disabled: isMin, onClick: removeItem })));
  };
  const ListField = List;
  const ListFieldPlugin = {
    name: "list",
    Component: ListField,
    validate(value, values, meta, field) {
      if (field.required && !value)
        return "Required";
    }
  };
  const ImageField = wrapFieldsWithMeta(
    (props) => {
      const ref = React__namespace.useRef(null);
      const cms = useCMS$1();
      const { value } = props.input;
      const src = value;
      const [isImgUploading, setIsImgUploading] = React.useState(false);
      let onClear;
      if (props.field.clearable) {
        onClear = () => props.input.onChange("");
      }
      React__namespace.useEffect(() => {
        if (ref.current && props.field.experimental_focusIntent) {
          ref.current.focus();
        }
      }, [props.field.experimental_focusIntent, ref]);
      async function onChange(media) {
        var _a2, _b;
        if (media) {
          const parsedValue = (
            // @ts-ignore
            typeof ((_b = (_a2 = cms == null ? void 0 : cms.media) == null ? void 0 : _a2.store) == null ? void 0 : _b.parse) === "function" ? (
              // @ts-ignore
              cms.media.store.parse(media)
            ) : media
          );
          props.input.onChange(parsedValue);
        }
      }
      const uploadDir = props.field.uploadDir || (() => "");
      return /* @__PURE__ */ React__namespace.createElement(
        ImageUpload,
        {
          ref,
          value,
          src,
          loading: isImgUploading,
          onClick: () => {
            const directory = uploadDir(props.form.getState().values);
            cms.media.open({
              allowDelete: true,
              directory,
              onSelect: onChange
            });
          },
          onDrop: async ([file], fileRejections) => {
            setIsImgUploading(true);
            try {
              if (file) {
                const directory = uploadDir(props.form.getState().values);
                const [media] = await cms.media.persist([
                  {
                    directory,
                    file
                  }
                ]);
                if (media) {
                  await onChange(media);
                }
              }
              const errorCodes = {
                "file-invalid-type": "Invalid file type",
                "file-too-large": "File too large",
                "file-too-small": "File too small",
                "too-many-files": "Too many files"
              };
              const printError = (error2) => {
                const message = errorCodes[error2.code];
                if (message) {
                  return message;
                }
                console.error(error2);
                return "Unknown error";
              };
              if (fileRejections.length > 0) {
                const messages = [];
                fileRejections.map((fileRejection) => {
                  messages.push(
                    `${fileRejection.file.name}: ${fileRejection.errors.map((error2) => printError(error2)).join(", ")}`
                  );
                });
                cms.alerts.error(() => {
                  return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, "Upload Failed. ", /* @__PURE__ */ React__namespace.createElement("br", null), messages.join(". "), ".");
                });
              }
            } catch (error2) {
              console.error("Error uploading media asset: ", error2);
            } finally {
              setIsImgUploading(false);
            }
          },
          onClear
        }
      );
    }
  );
  const ImageFieldPlugin = {
    name: "image",
    Component: ImageField,
    parse: parse$2,
    validate(value, values, meta, field) {
      if (field.required && !value)
        return "Required";
    }
  };
  const parse$1 = (value) => value && +value;
  const NumberField = wrapFieldsWithMeta(({ input, field }) => {
    return /* @__PURE__ */ React__namespace.createElement(NumberInput, { ...input, step: field.step });
  });
  const NumberFieldPlugin = {
    name: "number",
    Component: NumberField,
    parse: parse$1,
    validate(value, values, meta, field) {
      if (field.required && typeof value !== "number")
        return "Required";
    }
  };
  const SelectField = wrapFieldsWithMeta(Select);
  const SelectFieldPlugin = {
    name: "select",
    type: "select",
    Component: SelectField,
    parse: parse$2,
    validate(value, values, meta, field) {
      if (field.required && !value)
        return "Required";
    }
  };
  const RadioGroupField = wrapFieldsWithMeta(RadioGroup);
  const RadioGroupFieldPlugin = {
    name: "radio-group",
    Component: RadioGroupField,
    validate(value, values, meta, field) {
      if (field.required && !value)
        return "Required";
    }
  };
  const TextareaField = wrapFieldsWithMeta((props) => {
    const ref = React__namespace.useRef(null);
    React__namespace.useEffect(() => {
      if (ref.current && props.field.experimental_focusIntent) {
        const el = ref.current;
        el.focus();
        el.setSelectionRange(el.value.length, el.value.length);
      }
    }, [props.field.experimental_focusIntent, ref]);
    return /* @__PURE__ */ React__namespace.createElement(TextArea, { ref, ...props.input });
  });
  const TextareaFieldPlugin = {
    name: "textarea",
    Component: TextareaField,
    parse: parse$2,
    validate(value, values, meta, field) {
      if (field.required && !value)
        return "Required";
    }
  };
  const TextField = wrapFieldsWithMeta(
    (props) => {
      var _a2;
      const ref = React__namespace.useRef(null);
      React__namespace.useEffect(() => {
        if (ref.current && props.field.experimental_focusIntent) {
          ref.current.focus();
        }
      }, [props.field.experimental_focusIntent, ref]);
      return /* @__PURE__ */ React__namespace.createElement(
        BaseTextField,
        {
          ...props.input,
          ref,
          disabled: ((_a2 = props.field) == null ? void 0 : _a2.disabled) ?? false,
          placeholder: props.field.placeholder
        }
      );
    }
  );
  const TextFieldPlugin = {
    name: "text",
    Component: TextField,
    validate(value, allValues, meta, field) {
      var _a2;
      if (field.required && !value)
        return "Required";
      if (field.uid) {
        const path2 = field.name.split(".");
        const fieldName = path2[path2.length - 1];
        const parent2 = path2.slice(0, path2.length - 2);
        const items2 = get$5(allValues, parent2);
        if (((_a2 = items2 == null ? void 0 : items2.filter((item) => item[fieldName] === value)) == null ? void 0 : _a2.length) > 1) {
          return "Item with this unique id already exists";
        }
      }
    },
    parse: parse$2
  };
  const ToggleField = wrapFieldsWithMeta(Toggle);
  const ToggleFieldPlugin = {
    name: "toggle",
    type: "checkbox",
    Component: ToggleField,
    validate(value, values, meta, field) {
      if (field.required && (typeof value === "undefined" || value === null))
        return "Required";
    }
  };
  const TagsField = wrapFieldsWithMeta(({ input, field, form, tinaForm }) => {
    const [value, setValue] = React__namespace.useState("");
    const addTag = React__namespace.useCallback(
      (tag) => {
        var _a2, _b;
        if ((_b = (_a2 = form.getFieldState(field.name)) == null ? void 0 : _a2.value) == null ? void 0 : _b.includes(tag)) {
          return;
        }
        if (!tag.length) {
          return;
        }
        form.mutators.insert(field.name, 0, tag);
        setValue("");
      },
      [form, field.name]
    );
    const items2 = input.value || [];
    const ref = React__namespace.useRef(null);
    React__namespace.useEffect(() => {
      if (ref.current && field.experimental_focusIntent) {
        ref.current.focus();
      }
    }, [field.experimental_focusIntent, ref]);
    return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("div", { className: "flex items-center gap-3" }, /* @__PURE__ */ React__namespace.createElement(
      BaseTextField,
      {
        ref,
        value,
        onChange: (event) => setValue(event.target.value),
        placeholder: field.placeholder ? field.placeholder : "Add a tag",
        onKeyPress: (event) => {
          if (event.key === "," || event.key === "Enter") {
            event.preventDefault();
            addTag(value);
          }
        },
        className: "flex-1"
      }
    ), /* @__PURE__ */ React__namespace.createElement(
      IconButton,
      {
        onClick: () => {
          addTag(value);
        },
        variant: "primary",
        size: "small",
        className: "flex-shrink-0"
      },
      /* @__PURE__ */ React__namespace.createElement(AddIcon, { className: "w-5/6 h-auto" })
    )), /* @__PURE__ */ React__namespace.createElement("span", { className: "flex gap-2 flex-wrap mt-2 mb-0" }, items2.length === 0 && /* @__PURE__ */ React__namespace.createElement("span", { className: "text-gray-300 text-sm italic" }, "No tags"), items2.map((tag, index) => /* @__PURE__ */ React__namespace.createElement(Tag, { key: tag, tinaForm, field, index }, tag))));
  });
  const Tag = ({ tinaForm, field, index, children, ...styleProps }) => {
    const removeItem = React__namespace.useCallback(() => {
      tinaForm.mutators.remove(field.name, index);
    }, [tinaForm, field, index]);
    return /* @__PURE__ */ React__namespace.createElement(
      "span",
      {
        className: "rounded shadow bg-white border border-gray-150 flex items-center tracking-[0.01em] leading-none text-gray-700",
        ...styleProps
      },
      /* @__PURE__ */ React__namespace.createElement(
        "span",
        {
          style: { maxHeight: "calc(var(--tina-sidebar-width) - 50px)" },
          className: "text-sm flex-1 pl-3 pr-1 py-1 truncate"
        },
        children
      ),
      /* @__PURE__ */ React__namespace.createElement(
        "button",
        {
          className: "group text-center flex-shrink-0 border-0 bg-transparent pl-1 pr-2 py-1 text-gray-300 hover:text-blue-500 flex items-center justify-center cursor-pointer",
          onClick: removeItem
        },
        /* @__PURE__ */ React__namespace.createElement(BiX, { className: "w-4 h-auto transition ease-out duration-100 group-hover:scale-110 origin-center" })
      )
    );
  };
  const TagsFieldPlugin = {
    name: "tags",
    Component: TagsField,
    parse: parse$2
  };
  function ViewNavigation({
    onClickPrev,
    onClickSwitch,
    onClickNext,
    switchContent,
    switchColSpan,
    switchProps
  }) {
    return /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("th", { className: "rdtPrev", onClick: onClickPrev }, /* @__PURE__ */ React.createElement("span", null, "‹")), /* @__PURE__ */ React.createElement(
      "th",
      {
        className: "rdtSwitch",
        colSpan: switchColSpan,
        onClick: onClickSwitch,
        ...switchProps
      },
      switchContent
    ), /* @__PURE__ */ React.createElement("th", { className: "rdtNext", onClick: onClickNext }, /* @__PURE__ */ React.createElement("span", null, "›")));
  }
  class DaysView extends React.Component {
    constructor() {
      super(...arguments);
      __publicField(this, "_setDate", (e3) => {
        this.props.updateDate(e3);
      });
    }
    render() {
      return /* @__PURE__ */ React.createElement("div", { className: "rdtDays" }, /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("thead", null, this.renderNavigation(), this.renderDayHeaders()), /* @__PURE__ */ React.createElement("tbody", null, this.renderDays()), this.renderFooter()));
    }
    renderNavigation() {
      const date = this.props.viewDate;
      const locale2 = date.localeData();
      return /* @__PURE__ */ React.createElement(
        ViewNavigation,
        {
          onClickPrev: () => this.props.navigate(-1, "months"),
          onClickSwitch: () => this.props.showView("months"),
          onClickNext: () => this.props.navigate(1, "months"),
          switchContent: locale2.months(date) + " " + date.year(),
          switchColSpan: 5,
          switchProps: { "data-value": this.props.viewDate.month() }
        }
      );
    }
    renderDayHeaders() {
      const locale2 = this.props.viewDate.localeData();
      const dayItems = getDaysOfWeek(locale2).map((day, index) => /* @__PURE__ */ React.createElement("th", { key: day + index, className: "dow" }, day));
      return /* @__PURE__ */ React.createElement("tr", null, dayItems);
    }
    renderDays() {
      const date = this.props.viewDate;
      const startOfMonth = date.clone().startOf("month");
      const endOfMonth2 = date.clone().endOf("month");
      const rows = [[], [], [], [], [], []];
      const startDate = date.clone().subtract(1, "months");
      startDate.date(startDate.daysInMonth()).startOf("week");
      const endDate = startDate.clone().add(42, "d");
      let i2 = 0;
      while (startDate.isBefore(endDate)) {
        const row = getRow$2(rows, i2++);
        row.push(this.renderDay(startDate, startOfMonth, endOfMonth2));
        startDate.add(1, "d");
      }
      return rows.map((r2, i22) => /* @__PURE__ */ React.createElement("tr", { key: `${endDate.month()}_${i22}` }, r2));
    }
    renderDay(date, startOfMonth, endOfMonth2) {
      const selectedDate = this.props.selectedDate;
      const dayProps = {
        key: date.format("M_D"),
        "data-value": date.date(),
        "data-month": date.month(),
        "data-year": date.year()
      };
      let className = "rdtDay";
      if (date.isBefore(startOfMonth)) {
        className += " rdtOld";
      } else if (date.isAfter(endOfMonth2)) {
        className += " rdtNew";
      }
      if (selectedDate && date.isSame(selectedDate, "day")) {
        className += " rdtActive";
      }
      if (date.isSame(this.props.moment(), "day")) {
        className += " rdtToday";
      }
      if (this.props.isValidDate(date)) {
        dayProps.onClick = this._setDate;
      } else {
        className += " rdtDisabled";
      }
      dayProps.className = className;
      return this.props.renderDay(
        dayProps,
        date.clone(),
        selectedDate && selectedDate.clone()
      );
    }
    renderFooter() {
      if (!this.props.timeFormat)
        return;
      const date = this.props.viewDate;
      return /* @__PURE__ */ React.createElement("tfoot", null, /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement(
        "td",
        {
          onClick: () => this.props.showView("time"),
          colSpan: 7,
          className: "rdtTimeToggle"
        },
        date.format(this.props.timeFormat)
      )));
    }
  }
  __publicField(DaysView, "defaultProps", {
    isValidDate: () => true,
    renderDay: (props, date) => /* @__PURE__ */ React.createElement("td", { ...props }, date.date())
  });
  function getRow$2(rows, day) {
    return rows[Math.floor(day / 7)];
  }
  function getDaysOfWeek(locale2) {
    const first2 = locale2.firstDayOfWeek();
    const dow = [];
    let i2 = 0;
    locale2._weekdaysMin.forEach(function(day) {
      dow[(7 + i2++ - first2) % 7] = day;
    });
    return dow;
  }
  class MonthsView extends React.Component {
    constructor() {
      super(...arguments);
      __publicField(this, "_updateSelectedMonth", (event) => {
        this.props.updateDate(event);
      });
    }
    render() {
      return /* @__PURE__ */ React.createElement("div", { className: "rdtMonths" }, /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("thead", null, this.renderNavigation())), /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("tbody", null, this.renderMonths())));
    }
    renderNavigation() {
      const year = this.props.viewDate.year();
      return /* @__PURE__ */ React.createElement(
        ViewNavigation,
        {
          onClickPrev: () => this.props.navigate(-1, "years"),
          onClickSwitch: () => this.props.showView("years"),
          onClickNext: () => this.props.navigate(1, "years"),
          switchContent: year,
          switchColSpan: "2"
        }
      );
    }
    renderMonths() {
      const rows = [[], [], []];
      for (let month = 0; month < 12; month++) {
        const row = getRow$1(rows, month);
        row.push(this.renderMonth(month));
      }
      return rows.map((months, i2) => /* @__PURE__ */ React.createElement("tr", { key: i2 }, months));
    }
    renderMonth(month) {
      const selectedDate = this.props.selectedDate;
      let className = "rdtMonth";
      let onClick;
      if (this.isDisabledMonth(month)) {
        className += " rdtDisabled";
      } else {
        onClick = this._updateSelectedMonth;
      }
      if (selectedDate && selectedDate.year() === this.props.viewDate.year() && selectedDate.month() === month) {
        className += " rdtActive";
      }
      const props = { key: month, className, "data-value": month, onClick };
      if (this.props.renderMonth) {
        return this.props.renderMonth(
          props,
          month,
          this.props.viewDate.year(),
          this.props.selectedDate && this.props.selectedDate.clone()
        );
      }
      return /* @__PURE__ */ React.createElement("td", { ...props }, this.getMonthText(month));
    }
    isDisabledMonth(month) {
      const isValidDate = this.props.isValidDate;
      if (!isValidDate) {
        return false;
      }
      const date = this.props.viewDate.clone().set({ month });
      let day = date.endOf("month").date() + 1;
      while (day-- > 1) {
        if (isValidDate(date.date(day))) {
          return false;
        }
      }
      return true;
    }
    getMonthText(month) {
      const localMoment = this.props.viewDate;
      const monthStr = localMoment.localeData().monthsShort(localMoment.month(month));
      return capitalize(monthStr.substring(0, 3));
    }
  }
  function getRow$1(rows, year) {
    if (year < 4) {
      return rows[0];
    }
    if (year < 8) {
      return rows[1];
    }
    return rows[2];
  }
  function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  class YearsView extends React.Component {
    constructor() {
      super(...arguments);
      __publicField(this, "disabledYearsCache", {});
      __publicField(this, "_updateSelectedYear", (event) => {
        this.props.updateDate(event);
      });
    }
    render() {
      return /* @__PURE__ */ React.createElement("div", { className: "rdtYears" }, /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("thead", null, this.renderNavigation())), /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("tbody", null, this.renderYears())));
    }
    renderNavigation() {
      const viewYear = this.getViewYear();
      return /* @__PURE__ */ React.createElement(
        ViewNavigation,
        {
          onClickPrev: () => this.props.navigate(-10, "years"),
          onClickSwitch: () => this.props.showView("years"),
          onClickNext: () => this.props.navigate(10, "years"),
          switchContent: `${viewYear}-${viewYear + 9}`
        }
      );
    }
    renderYears() {
      const viewYear = this.getViewYear();
      const rows = [[], [], []];
      for (let year = viewYear - 1; year < viewYear + 11; year++) {
        const row = getRow(rows, year - viewYear);
        row.push(this.renderYear(year));
      }
      return rows.map((years, i2) => /* @__PURE__ */ React.createElement("tr", { key: i2 }, years));
    }
    renderYear(year) {
      const selectedYear = this.getSelectedYear();
      let className = "rdtYear";
      let onClick;
      if (this.isDisabledYear(year)) {
        className += " rdtDisabled";
      } else {
        onClick = this._updateSelectedYear;
      }
      if (selectedYear === year) {
        className += " rdtActive";
      }
      const props = { key: year, className, "data-value": year, onClick };
      return this.props.renderYear(
        props,
        year,
        this.props.selectedDate && this.props.selectedDate.clone()
      );
    }
    getViewYear() {
      return parseInt(this.props.viewDate.year() / 10, 10) * 10;
    }
    getSelectedYear() {
      return this.props.selectedDate && this.props.selectedDate.year();
    }
    isDisabledYear(year) {
      const cache2 = this.disabledYearsCache;
      if (cache2[year] !== void 0) {
        return cache2[year];
      }
      const isValidDate = this.props.isValidDate;
      if (!isValidDate) {
        return false;
      }
      const date = this.props.viewDate.clone().set({ year });
      let day = date.endOf("year").dayOfYear() + 1;
      while (day-- > 1) {
        if (isValidDate(date.dayOfYear(day))) {
          cache2[year] = false;
          return false;
        }
      }
      cache2[year] = true;
      return true;
    }
  }
  __publicField(YearsView, "defaultProps", {
    renderYear: (props, year) => /* @__PURE__ */ React.createElement("td", { ...props }, year)
  });
  function getRow(rows, year) {
    if (year < 3) {
      return rows[0];
    }
    if (year < 7) {
      return rows[1];
    }
    return rows[2];
  }
  const timeConstraints = {
    hours: {
      min: 0,
      max: 23,
      step: 1
    },
    minutes: {
      min: 0,
      max: 59,
      step: 1
    },
    seconds: {
      min: 0,
      max: 59,
      step: 1
    },
    milliseconds: {
      min: 0,
      max: 999,
      step: 1
    }
  };
  function createConstraints(overrideTimeConstraints) {
    const constraints = {};
    Object.keys(timeConstraints).forEach((type) => {
      constraints[type] = {
        ...timeConstraints[type],
        ...overrideTimeConstraints[type] || {}
      };
    });
    return constraints;
  }
  class TimeView extends React.Component {
    constructor(props) {
      super(props);
      this.constraints = createConstraints(props.timeConstraints);
      this.state = this.getTimeParts(props.selectedDate || props.viewDate);
    }
    render() {
      const items2 = [];
      const timeParts = this.state;
      this.getCounters().forEach((c2, i2) => {
        if (i2 && c2 !== "ampm") {
          items2.push(
            /* @__PURE__ */ React.createElement("div", { key: `sep${i2}`, className: "rdtCounterSeparator" }, ":")
          );
        }
        items2.push(this.renderCounter(c2, timeParts[c2]));
      });
      return /* @__PURE__ */ React.createElement("div", { className: "rdtTime" }, /* @__PURE__ */ React.createElement("table", null, this.renderHeader(), /* @__PURE__ */ React.createElement("tbody", null, /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("td", null, /* @__PURE__ */ React.createElement("div", { className: "rdtCounters" }, items2))))));
    }
    renderCounter(type, value) {
      if (type === "hours" && this.isAMPM()) {
        value = (value - 1) % 12 + 1;
        if (value === 0) {
          value = 12;
        }
      }
      if (type === "ampm") {
        if (this.props.timeFormat.indexOf(" A") !== -1) {
          value = this.props.viewDate.format("A");
        } else {
          value = this.props.viewDate.format("a");
        }
      }
      return /* @__PURE__ */ React.createElement("div", { key: type, className: "rdtCounter" }, /* @__PURE__ */ React.createElement(
        "span",
        {
          className: "rdtBtn",
          onMouseDown: (e3) => this.onStartClicking(e3, "increase", type)
        },
        "▲"
      ), /* @__PURE__ */ React.createElement("div", { className: "rdtCount" }, value), /* @__PURE__ */ React.createElement(
        "span",
        {
          className: "rdtBtn",
          onMouseDown: (e3) => this.onStartClicking(e3, "decrease", type)
        },
        "▼"
      ));
    }
    renderHeader() {
      if (!this.props.dateFormat)
        return;
      const date = this.props.selectedDate || this.props.viewDate;
      return /* @__PURE__ */ React.createElement("thead", null, /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement(
        "td",
        {
          className: "rdtSwitch",
          colSpan: "4",
          onClick: () => this.props.showView("days")
        },
        date.format(this.props.dateFormat)
      )));
    }
    onStartClicking(e3, action, type) {
      if (e3 && e3.button && e3.button !== 0) {
        return;
      }
      if (type === "ampm")
        return this.toggleDayPart();
      const update = {};
      const body = document.body;
      update[type] = this[action](type);
      this.setState(update);
      this.timer = setTimeout(() => {
        this.increaseTimer = setInterval(() => {
          update[type] = this[action](type);
          this.setState(update);
        }, 70);
      }, 500);
      this.mouseUpListener = () => {
        clearTimeout(this.timer);
        clearInterval(this.increaseTimer);
        this.props.setTime(type, parseInt(this.state[type], 10));
        body.removeEventListener("mouseup", this.mouseUpListener);
        body.removeEventListener("touchend", this.mouseUpListener);
      };
      body.addEventListener("mouseup", this.mouseUpListener);
      body.addEventListener("touchend", this.mouseUpListener);
    }
    toggleDayPart() {
      let hours = parseInt(this.state.hours, 10);
      if (hours >= 12) {
        hours -= 12;
      } else {
        hours += 12;
      }
      this.props.setTime("hours", hours);
    }
    increase(type) {
      const tc = this.constraints[type];
      let value = parseInt(this.state[type], 10) + tc.step;
      if (value > tc.max)
        value = tc.min + (value - (tc.max + 1));
      return pad(type, value);
    }
    decrease(type) {
      const tc = this.constraints[type];
      let value = parseInt(this.state[type], 10) - tc.step;
      if (value < tc.min)
        value = tc.max + 1 - (tc.min - value);
      return pad(type, value);
    }
    getCounters() {
      const counters = [];
      const format2 = this.props.timeFormat;
      if (format2.toLowerCase().indexOf("h") !== -1) {
        counters.push("hours");
        if (format2.indexOf("m") !== -1) {
          counters.push("minutes");
          if (format2.indexOf("s") !== -1) {
            counters.push("seconds");
            if (format2.indexOf("S") !== -1) {
              counters.push("milliseconds");
            }
          }
        }
      }
      if (this.isAMPM()) {
        counters.push("ampm");
      }
      return counters;
    }
    isAMPM() {
      return this.props.timeFormat.toLowerCase().indexOf(" a") !== -1;
    }
    getTimeParts(date) {
      const hours = date.hours();
      return {
        hours: pad("hours", hours),
        minutes: pad("minutes", date.minutes()),
        seconds: pad("seconds", date.seconds()),
        milliseconds: pad("milliseconds", date.milliseconds()),
        ampm: hours < 12 ? "am" : "pm"
      };
    }
    componentDidUpdate(prevProps) {
      if (this.props.selectedDate) {
        if (this.props.selectedDate !== prevProps.selectedDate) {
          this.setState(this.getTimeParts(this.props.selectedDate));
        }
      } else if (prevProps.viewDate !== this.props.viewDate) {
        this.setState(this.getTimeParts(this.props.viewDate));
      }
    }
  }
  function pad(type, value) {
    const padValues = {
      hours: 1,
      minutes: 2,
      seconds: 2,
      milliseconds: 3
    };
    let str = value + "";
    while (str.length < padValues[type])
      str = "0" + str;
    return str;
  }
  var useClickAway$1 = {};
  var util = {};
  Object.defineProperty(util, "__esModule", { value: true });
  util.isNavigator = util.isBrowser = util.off = util.on = util.noop = void 0;
  var noop = function() {
  };
  util.noop = noop;
  function on(obj) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    if (obj && obj.addEventListener) {
      obj.addEventListener.apply(obj, args);
    }
  }
  util.on = on;
  function off(obj) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    if (obj && obj.removeEventListener) {
      obj.removeEventListener.apply(obj, args);
    }
  }
  util.off = off;
  util.isBrowser = typeof window !== "undefined";
  util.isNavigator = typeof navigator !== "undefined";
  Object.defineProperty(useClickAway$1, "__esModule", { value: true });
  var react_1 = React;
  var util_1 = util;
  var defaultEvents = ["mousedown", "touchstart"];
  var useClickAway = function(ref, onClickAway, events2) {
    if (events2 === void 0) {
      events2 = defaultEvents;
    }
    var savedCallback = react_1.useRef(onClickAway);
    react_1.useEffect(function() {
      savedCallback.current = onClickAway;
    }, [onClickAway]);
    react_1.useEffect(function() {
      var handler = function(event) {
        var el = ref.current;
        el && !el.contains(event.target) && savedCallback.current(event);
      };
      for (var _i = 0, events_1 = events2; _i < events_1.length; _i++) {
        var eventName = events_1[_i];
        util_1.on(document, eventName, handler);
      }
      return function() {
        for (var _i2 = 0, events_2 = events2; _i2 < events_2.length; _i2++) {
          var eventName2 = events_2[_i2];
          util_1.off(document, eventName2, handler);
        }
      };
    }, [events2, ref]);
  };
  var _default = useClickAway$1.default = useClickAway;
  const viewModes = {
    YEARS: "years",
    MONTHS: "months",
    DAYS: "days",
    TIME: "time"
  };
  const TYPES$4 = PropTypes;
  const nofn = function() {
  };
  const datetype = TYPES$4.oneOfType([
    TYPES$4.instanceOf(moment),
    TYPES$4.instanceOf(Date),
    TYPES$4.string
  ]);
  class Datetime extends React.Component {
    constructor(props) {
      super(props);
      __publicField(this, "_renderCalendar", () => {
        const props = this.props;
        const state = this.state;
        const viewProps = {
          viewDate: state.viewDate.clone(),
          selectedDate: this.getSelectedDate(),
          isValidDate: props.isValidDate,
          updateDate: this._updateDate,
          navigate: this._viewNavigate,
          moment,
          showView: this._showView
        };
        switch (state.currentView) {
          case viewModes.YEARS:
            viewProps.renderYear = props.renderYear;
            return /* @__PURE__ */ React.createElement(YearsView, { ...viewProps });
          case viewModes.MONTHS:
            viewProps.renderMonth = props.renderMonth;
            return /* @__PURE__ */ React.createElement(MonthsView, { ...viewProps });
          case viewModes.DAYS:
            viewProps.renderDay = props.renderDay;
            viewProps.timeFormat = this.getFormat("time");
            return /* @__PURE__ */ React.createElement(DaysView, { ...viewProps });
          default:
            viewProps.dateFormat = this.getFormat("date");
            viewProps.timeFormat = this.getFormat("time");
            viewProps.timeConstraints = props.timeConstraints;
            viewProps.setTime = this._setTime;
            return /* @__PURE__ */ React.createElement(TimeView, { ...viewProps });
        }
      });
      __publicField(this, "_showView", (view, date) => {
        const d2 = (date || this.state.viewDate).clone();
        const nextView = this.props.onBeforeNavigate(
          view,
          this.state.currentView,
          d2
        );
        if (nextView && this.state.currentView !== nextView) {
          this.props.onNavigate(nextView);
          this.setState({ currentView: nextView });
        }
      });
      __publicField(this, "viewToMethod", { days: "date", months: "month", years: "year" });
      __publicField(this, "nextView", { days: "time", months: "days", years: "months" });
      __publicField(this, "_updateDate", (e3) => {
        const state = this.state;
        const currentView = state.currentView;
        const updateOnView = this.getUpdateOn(this.getFormat("date"));
        const viewDate = this.state.viewDate.clone();
        viewDate[this.viewToMethod[currentView]](
          parseInt(e3.target.getAttribute("data-value"), 10)
        );
        if (currentView === "days") {
          viewDate.month(parseInt(e3.target.getAttribute("data-month"), 10));
          viewDate.year(parseInt(e3.target.getAttribute("data-year"), 10));
        }
        const update = { viewDate };
        if (currentView === updateOnView) {
          update.selectedDate = viewDate.clone();
          update.inputValue = viewDate.format(this.getFormat("datetime"));
          if (this.props.open === void 0 && this.props.input && this.props.closeOnSelect) {
            this._closeCalendar();
          }
          this.props.onChange(viewDate.clone());
        } else {
          this._showView(this.nextView[currentView], viewDate);
        }
        this.setState(update);
      });
      __publicField(this, "_viewNavigate", (modifier, unit) => {
        const viewDate = this.state.viewDate.clone();
        viewDate.add(modifier, unit);
        if (modifier > 0) {
          this.props.onNavigateForward(modifier, unit);
        } else {
          this.props.onNavigateBack(-modifier, unit);
        }
        this.setState({ viewDate });
      });
      __publicField(this, "_setTime", (type, value) => {
        const date = (this.getSelectedDate() || this.state.viewDate).clone();
        date[type](value);
        if (!this.props.value) {
          this.setState({
            selectedDate: date,
            viewDate: date.clone(),
            inputValue: date.format(this.getFormat("datetime"))
          });
        }
        this.props.onChange(date);
      });
      __publicField(this, "_openCalendar", () => {
        if (this.isOpen())
          return;
        this.setState({ open: true }, this.props.onOpen);
      });
      __publicField(this, "_closeCalendar", () => {
        if (!this.isOpen())
          return;
        this.setState({ open: false }, () => {
          this.props.onClose(this.state.selectedDate || this.state.inputValue);
        });
      });
      __publicField(this, "_handleClickOutside", () => {
        const props = this.props;
        if (props.input && this.state.open && props.open === void 0 && props.closeOnClickOutside) {
          this._closeCalendar();
        }
      });
      __publicField(this, "_onInputFocus", (e3) => {
        if (!this.callHandler(this.props.inputProps.onFocus, e3))
          return;
        this._openCalendar();
      });
      __publicField(this, "_onInputChange", (e3) => {
        if (!this.callHandler(this.props.inputProps.onChange, e3))
          return;
        const value = e3.target ? e3.target.value : e3;
        const localMoment = this.localMoment(value, this.getFormat("datetime"));
        const update = { inputValue: value };
        if (localMoment.isValid()) {
          update.selectedDate = localMoment;
          update.viewDate = localMoment.clone().startOf("month");
        } else {
          update.selectedDate = null;
        }
        this.setState(update, () => {
          this.props.onChange(
            localMoment.isValid() ? localMoment : this.state.inputValue
          );
        });
      });
      __publicField(this, "_onInputKeyDown", (e3) => {
        if (!this.callHandler(this.props.inputProps.onKeyDown, e3))
          return;
        if (e3.which === 9 && this.props.closeOnTab) {
          this._closeCalendar();
        }
      });
      __publicField(this, "_onInputClick", (e3) => {
        if (!this.callHandler(this.props.inputProps.onClick, e3))
          return;
        this._openCalendar();
      });
      this.state = this.getInitialState();
    }
    render() {
      return /* @__PURE__ */ React.createElement(
        ClickableWrapper,
        {
          className: this.getClassName(),
          onClickOut: this._handleClickOutside
        },
        this.renderInput(),
        /* @__PURE__ */ React.createElement("div", { className: "rdtPicker" }, this.renderView())
      );
    }
    renderInput() {
      if (!this.props.input)
        return;
      const finalInputProps = {
        type: "text",
        className: "form-control",
        value: this.getInputValue(),
        ...this.props.inputProps,
        onFocus: this._onInputFocus,
        onChange: this._onInputChange,
        onKeyDown: this._onInputKeyDown,
        onClick: this._onInputClick
      };
      if (this.props.renderInput) {
        return /* @__PURE__ */ React.createElement("div", null, this.props.renderInput(
          finalInputProps,
          this._openCalendar,
          this._closeCalendar
        ));
      }
      return /* @__PURE__ */ React.createElement("input", { ...finalInputProps });
    }
    renderView() {
      return this.props.renderView(this.state.currentView, this._renderCalendar);
    }
    getInitialState() {
      const props = this.props;
      const inputFormat = this.getFormat("datetime");
      const selectedDate = this.parseDate(
        props.value || props.initialValue,
        inputFormat
      );
      this.checkTZ();
      return {
        open: !props.input,
        currentView: props.initialViewMode || this.getInitialView(),
        viewDate: this.getInitialViewDate(selectedDate),
        selectedDate: selectedDate && selectedDate.isValid() ? selectedDate : void 0,
        inputValue: this.getInitialInputValue(selectedDate)
      };
    }
    getInitialViewDate(selectedDate) {
      const propDate = this.props.initialViewDate;
      let viewDate;
      if (propDate) {
        viewDate = this.parseDate(propDate, this.getFormat("datetime"));
        if (viewDate && viewDate.isValid()) {
          return viewDate;
        } else {
          log(
            'The initialViewDated given "' + propDate + '" is not valid. Using current date instead.'
          );
        }
      } else if (selectedDate && selectedDate.isValid()) {
        return selectedDate.clone();
      }
      return this.getInitialDate();
    }
    getInitialDate() {
      const m = this.localMoment();
      m.hour(0).minute(0).second(0).millisecond(0);
      return m;
    }
    getInitialView() {
      const dateFormat = this.getFormat("date");
      return dateFormat ? this.getUpdateOn(dateFormat) : viewModes.TIME;
    }
    parseDate(date, dateFormat) {
      let parsedDate;
      if (date && typeof date === "string")
        parsedDate = this.localMoment(date, dateFormat);
      else if (date)
        parsedDate = this.localMoment(date);
      if (parsedDate && !parsedDate.isValid())
        parsedDate = null;
      return parsedDate;
    }
    getClassName() {
      let cn2 = "rdt";
      const props = this.props;
      const propCn = props.className;
      if (Array.isArray(propCn)) {
        cn2 += " " + propCn.join(" ");
      } else if (propCn) {
        cn2 += " " + propCn;
      }
      if (!props.input) {
        cn2 += " rdtStatic";
      }
      if (this.isOpen()) {
        cn2 += " rdtOpen";
      }
      return cn2;
    }
    isOpen() {
      return !this.props.input || (this.props.open === void 0 ? this.state.open : this.props.open);
    }
    getUpdateOn(dateFormat) {
      if (this.props.updateOnView) {
        return this.props.updateOnView;
      }
      if (dateFormat.match(/[lLD]/)) {
        return viewModes.DAYS;
      }
      if (dateFormat.indexOf("M") !== -1) {
        return viewModes.MONTHS;
      }
      if (dateFormat.indexOf("Y") !== -1) {
        return viewModes.YEARS;
      }
      return viewModes.DAYS;
    }
    getLocaleData() {
      const p2 = this.props;
      return this.localMoment(
        p2.value || p2.defaultValue || /* @__PURE__ */ new Date()
      ).localeData();
    }
    getDateFormat() {
      const locale2 = this.getLocaleData();
      const format2 = this.props.dateFormat;
      if (format2 === true)
        return locale2.longDateFormat("L");
      if (format2)
        return format2;
      return "";
    }
    getTimeFormat() {
      const locale2 = this.getLocaleData();
      const format2 = this.props.timeFormat;
      if (format2 === true) {
        return locale2.longDateFormat("LT");
      }
      return format2 || "";
    }
    getFormat(type) {
      if (type === "date") {
        return this.getDateFormat();
      } else if (type === "time") {
        return this.getTimeFormat();
      }
      const dateFormat = this.getDateFormat();
      const timeFormat = this.getTimeFormat();
      return dateFormat && timeFormat ? dateFormat + " " + timeFormat : dateFormat || timeFormat;
    }
    updateTime(op, amount, type, toSelected) {
      const update = {};
      const date = toSelected ? "selectedDate" : "viewDate";
      update[date] = this.state[date].clone()[op](amount, type);
      this.setState(update);
    }
    localMoment(date, format2, props) {
      props = props || this.props;
      let m = null;
      if (props.utc) {
        m = moment.utc(date, format2, props.strictParsing);
      } else if (props.displayTimeZone) {
        m = moment.tz(date, format2, props.displayTimeZone);
      } else {
        m = moment(date, format2, props.strictParsing);
      }
      if (props.locale)
        m.locale(props.locale);
      return m;
    }
    checkTZ() {
      const { displayTimeZone } = this.props;
      if (displayTimeZone && !this.tzWarning && !moment.tz) {
        this.tzWarning = true;
        log(
          'displayTimeZone prop with value "' + displayTimeZone + '" is used but moment.js timezone is not loaded.',
          "error"
        );
      }
    }
    componentDidUpdate(prevProps) {
      if (prevProps === this.props)
        return;
      let needsUpdate = false;
      const thisProps = this.props;
      ["locale", "utc", "displayZone", "dateFormat", "timeFormat"].forEach(
        function(p2) {
          prevProps[p2] !== thisProps[p2] && (needsUpdate = true);
        }
      );
      if (needsUpdate) {
        this.regenerateDates();
      }
      if (thisProps.value && thisProps.value !== prevProps.value) {
        this.setViewDate(thisProps.value);
      }
      this.checkTZ();
    }
    regenerateDates() {
      const props = this.props;
      const viewDate = this.state.viewDate.clone();
      const selectedDate = this.state.selectedDate && this.state.selectedDate.clone();
      if (props.locale) {
        viewDate.locale(props.locale);
        selectedDate && selectedDate.locale(props.locale);
      }
      if (props.utc) {
        viewDate.utc();
        selectedDate && selectedDate.utc();
      } else if (props.displayTimeZone) {
        viewDate.tz(props.displayTimeZone);
        selectedDate && selectedDate.tz(props.displayTimeZone);
      } else {
        viewDate.locale();
        selectedDate && selectedDate.locale();
      }
      const update = { viewDate, selectedDate };
      if (selectedDate && selectedDate.isValid()) {
        update.inputValue = selectedDate.format(this.getFormat("datetime"));
      }
      this.setState(update);
    }
    getSelectedDate() {
      if (this.props.value === void 0)
        return this.state.selectedDate;
      const selectedDate = this.parseDate(
        this.props.value,
        this.getFormat("datetime")
      );
      return selectedDate && selectedDate.isValid() ? selectedDate : false;
    }
    getInitialInputValue(selectedDate) {
      const props = this.props;
      if (props.inputProps.value)
        return props.inputProps.value;
      if (selectedDate && selectedDate.isValid())
        return selectedDate.format(this.getFormat("datetime"));
      if (props.value && typeof props.value === "string")
        return props.value;
      if (props.initialValue && typeof props.initialValue === "string")
        return props.initialValue;
      return "";
    }
    getInputValue() {
      const selectedDate = this.getSelectedDate();
      return selectedDate ? selectedDate.format(this.getFormat("datetime")) : this.state.inputValue;
    }
    /**
     * Set the date that is currently shown in the calendar.
     * This is independent from the selected date and it's the one used to navigate through months or days in the calendar.
     * @param dateType date
     * @public
     */
    setViewDate(date) {
      const logError = function() {
        return log("Invalid date passed to the `setViewDate` method: " + date);
      };
      if (!date)
        return logError();
      let viewDate;
      if (typeof date === "string") {
        viewDate = this.localMoment(date, this.getFormat("datetime"));
      } else {
        viewDate = this.localMoment(date);
      }
      if (!viewDate || !viewDate.isValid())
        return logError();
      this.setState({ viewDate });
    }
    /**
     * Set the view currently shown by the calendar. View modes shipped with react-datetime are 'years', 'months', 'days' and 'time'.
     * @param TYPES.string mode
     */
    navigate(mode) {
      this._showView(mode);
    }
    callHandler(method, e3) {
      if (!method)
        return true;
      return method(e3) !== false;
    }
  }
  __publicField(Datetime, "propTypes", {
    value: datetype,
    initialValue: datetype,
    initialViewDate: datetype,
    initialViewMode: TYPES$4.oneOf([
      viewModes.YEARS,
      viewModes.MONTHS,
      viewModes.DAYS,
      viewModes.TIME
    ]),
    onOpen: TYPES$4.func,
    onClose: TYPES$4.func,
    onChange: TYPES$4.func,
    onNavigate: TYPES$4.func,
    onBeforeNavigate: TYPES$4.func,
    onNavigateBack: TYPES$4.func,
    onNavigateForward: TYPES$4.func,
    updateOnView: TYPES$4.string,
    locale: TYPES$4.string,
    utc: TYPES$4.bool,
    displayTimeZone: TYPES$4.string,
    input: TYPES$4.bool,
    dateFormat: TYPES$4.oneOfType([TYPES$4.string, TYPES$4.bool]),
    timeFormat: TYPES$4.oneOfType([TYPES$4.string, TYPES$4.bool]),
    inputProps: TYPES$4.object,
    timeConstraints: TYPES$4.object,
    isValidDate: TYPES$4.func,
    open: TYPES$4.bool,
    strictParsing: TYPES$4.bool,
    closeOnSelect: TYPES$4.bool,
    closeOnTab: TYPES$4.bool,
    renderView: TYPES$4.func,
    renderInput: TYPES$4.func,
    renderDay: TYPES$4.func,
    renderMonth: TYPES$4.func,
    renderYear: TYPES$4.func
  });
  __publicField(Datetime, "defaultProps", {
    onOpen: nofn,
    onClose: nofn,
    onCalendarOpen: nofn,
    onCalendarClose: nofn,
    onChange: nofn,
    onNavigate: nofn,
    onBeforeNavigate: function(next2) {
      return next2;
    },
    onNavigateBack: nofn,
    onNavigateForward: nofn,
    dateFormat: true,
    timeFormat: true,
    utc: false,
    className: "",
    input: true,
    inputProps: {},
    timeConstraints: {},
    isValidDate: function() {
      return true;
    },
    strictParsing: true,
    closeOnSelect: false,
    closeOnTab: true,
    closeOnClickOutside: true,
    renderView: (_, renderFunc) => renderFunc()
  });
  // Make moment accessible through the Datetime class
  __publicField(Datetime, "moment", moment);
  function log(message, method) {
    const con = typeof window !== "undefined" && window.console;
    if (!con)
      return;
    if (!method) {
      method = "warn";
    }
    con[method]("***react-datetime:" + message);
  }
  function ClickableWrapper({ className, onClickOut, children }) {
    const containerRef = React.useRef(null);
    _default(containerRef, (event) => {
      onClickOut(event);
    });
    return /* @__PURE__ */ React.createElement("div", { className, ref: containerRef }, children);
  }
  const DEFAULT_DATE_DISPLAY_FORMAT = "MMM DD, YYYY";
  const DEFAULT_TIME_DISPLAY_FORMAT = "h:mm A";
  const format$1 = (val, _name, field) => {
    if (!val)
      return val;
    const dateFormat = parseDateFormat(field.dateFormat);
    const timeFormat = parseTimeFormat(field.timeFormat);
    const combinedFormat = typeof timeFormat === "string" ? `${dateFormat} ${timeFormat}` : dateFormat;
    if (typeof val === "string") {
      const date = moment(val);
      return date.isValid() ? date.format(combinedFormat) : val;
    }
    return moment(val).format(combinedFormat);
  };
  const parse = (val) => {
    if (!val)
      return val;
    const date = new Date(val);
    if (!isNaN(date.getTime())) {
      return new Date(val).toISOString();
    }
    return val;
  };
  function parseDateFormat(format2) {
    if (typeof format2 === "string") {
      return format2;
    }
    return DEFAULT_DATE_DISPLAY_FORMAT;
  }
  function parseTimeFormat(format2) {
    if (typeof format2 === "string") {
      return format2;
    } else if (format2) {
      return DEFAULT_TIME_DISPLAY_FORMAT;
    }
  }
  const DateField = wrapFieldsWithMeta(
    ({ input, field: { dateFormat, timeFormat, ...rest } }) => {
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
        ReactDateTimeWithStyles,
        {
          value: input.value,
          onChange: (value) => {
            const newValue = value === "" ? void 0 : value;
            input.onChange(newValue);
          },
          dateFormat: dateFormat || DEFAULT_DATE_DISPLAY_FORMAT,
          timeFormat: timeFormat || false,
          inputProps: { className: textFieldClasses },
          ...rest
        }
      ));
    }
  );
  const ReactDateTimeWithStyles = (props) => {
    const [isOpen, setIsOpen] = React.useState(false);
    const area = React.useRef(null);
    React.useEffect(() => {
      const handleClick = (event) => {
        if (!area.current)
          return;
        if (!event.target)
          return;
        if (!area.current.contains(event.target)) {
          setIsOpen(false);
        } else {
          setIsOpen(true);
        }
      };
      document.addEventListener("mouseup", handleClick, false);
      return () => {
        document.removeEventListener("mouseup", handleClick, false);
      };
    }, [document]);
    React.useEffect(() => {
      if (area.current) {
        setTimeout(() => {
          const plateElement = area.current.querySelector(
            'input[type="text"]'
          );
          if (props.experimental_focusIntent && plateElement) {
            if (plateElement)
              plateElement.focus();
          }
        }, 100);
      }
    }, [props.experimental_focusIntent, area]);
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", { className: "tina-date-field", ref: area }, /* @__PURE__ */ React.createElement(Datetime, { ...props, isOpen })));
  };
  const DateFieldPlugin = {
    __type: "field",
    name: "date",
    Component: DateField,
    format: format$1,
    parse,
    validate(value, values, meta, field) {
      if (field.required && !value)
        return "Required";
    }
  };
  const CheckboxGroupField = wrapFieldsWithMeta(CheckboxGroup);
  const CheckboxGroupFieldPlugin = {
    name: "checkbox-group",
    Component: CheckboxGroupField,
    validate(value, values, meta, field) {
      if (field.required && (typeof value === "undefined" || value === null))
        return "Required";
    }
  };
  const ReferenceField = wrapFieldsWithMeta(Reference);
  const ReferenceFieldPlugin = {
    name: "reference",
    type: "reference",
    Component: ReferenceField,
    parse: parse$2,
    validate(value, values, meta, field) {
      if (field.required && !value)
        return "Required";
    }
  };
  const ButtonToggleField = wrapFieldsWithMeta(ButtonToggle);
  const ButtonToggleFieldPlugin = {
    name: "button-toggle",
    Component: ButtonToggleField
  };
  const HiddenField = () => {
    return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null);
  };
  const HiddenFieldPlugin = {
    name: "hidden",
    Component: HiddenField,
    parse: parse$2
  };
  const PasswordMask = "********";
  const PasswordFieldComponent = wrapFieldsWithMeta(({ field, form, meta, input, children }) => {
    const ref1 = React__namespace.useRef(null);
    const ref2 = React__namespace.useRef(null);
    const [error2, setError] = React__namespace.useState(false);
    const [password, setPassword] = React__namespace.useState();
    const [confirmPassword, setConfirmPassword] = React__namespace.useState();
    const [passwordChangeRequired, setPasswordChangeRequired] = React__namespace.useState(input.value.passwordChangeRequired);
    React__namespace.useEffect(() => {
      if (password) {
        if (password === confirmPassword) {
          setError(false);
          form.change(field.name, { value: password, passwordChangeRequired });
        } else {
          setError(true);
          form.change(field.name, void 0);
        }
      } else {
        setError(false);
        form.change(field.name, { passwordChangeRequired });
      }
    }, [password, confirmPassword, passwordChangeRequired]);
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "flex flex-col" }, /* @__PURE__ */ React__namespace.createElement("div", { className: "flex flex-row space-x-4" }, /* @__PURE__ */ React__namespace.createElement(
      BasePasswordField,
      {
        autoComplete: "off",
        value: password ?? PasswordMask,
        ref: ref1,
        disabled: (field == null ? void 0 : field.disabled) ?? false,
        error: error2,
        placeholder: field.placeholder || "Password",
        onKeyDown: (_) => {
          if (password === void 0) {
            setPassword("");
          }
          if (confirmPassword === void 0) {
            setConfirmPassword("");
          }
        },
        onChange: (event) => {
          setPassword(event.target.value);
        }
      }
    ), /* @__PURE__ */ React__namespace.createElement(
      BasePasswordField,
      {
        autoComplete: "off",
        ref: ref2,
        value: confirmPassword ?? PasswordMask,
        disabled: (field == null ? void 0 : field.disabled) ?? false,
        error: error2,
        placeholder: field.confirmPlaceholder || "Confirm Password",
        onKeyDown: (_) => {
          setPasswordChangeRequired(true);
          if (password === void 0) {
            setPassword("");
          }
          if (confirmPassword === void 0) {
            setConfirmPassword("");
          }
        },
        onChange: (event) => {
          setConfirmPassword(event.target.value);
        }
      }
    ), /* @__PURE__ */ React__namespace.createElement(
      Button$1,
      {
        variant: "secondary",
        disabled: password === void 0 && confirmPassword === void 0,
        onClick: () => {
          setError(false);
          setPassword(void 0);
          setConfirmPassword(void 0);
          setPasswordChangeRequired(void 0);
          form.change(field.name, void 0);
        }
      },
      "Reset"
    )), /* @__PURE__ */ React__namespace.createElement("div", { className: "flex w-full items-center pl-1 pt-3" }, /* @__PURE__ */ React__namespace.createElement(
      Toggle,
      {
        field: { name: "passwordChangeRequired", component: "toggle" },
        input: {
          value: passwordChangeRequired ?? true,
          onChange: () => setPasswordChangeRequired(!passwordChangeRequired)
        },
        name: "passwordChangeRequired"
      }
    ), /* @__PURE__ */ React__namespace.createElement("div", null, /* @__PURE__ */ React__namespace.createElement("label", { className: "block font-sans text-xs font-semibold text-gray-700 whitespace-normal h-full items-center ml-1" }, "Require Password Change on Next Login"))));
  });
  const PasswordFieldPlugin = {
    name: "password",
    Component: PasswordFieldComponent,
    validate(value, values, meta, field) {
      let password = value;
      if (Array.isArray(value)) {
        password = value[0];
      }
      if (field.required && (password == null ? void 0 : password.passwordChangeRequired) === void 0) {
        return "Required";
      }
    },
    parse: parse$2
  };
  function AiFillWarning(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 1024 1024" }, "child": [{ "tag": "path", "attr": { "d": "M955.7 856l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48zM480 416c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v184c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V416zm32 352a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z" }, "child": [] }] })(props);
  }
  function FaCircle(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z" }, "child": [] }] })(props);
  }
  function FaFile(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 384 512" }, "child": [{ "tag": "path", "attr": { "d": "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm160-14.1v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z" }, "child": [] }] })(props);
  }
  function FaFolder(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M464 128H272l-64-64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V176c0-26.51-21.49-48-48-48z" }, "child": [] }] })(props);
  }
  function FaLock(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 448 512" }, "child": [{ "tag": "path", "attr": { "d": "M400 224h-24v-72C376 68.2 307.8 0 224 0S72 68.2 72 152v72H48c-26.5 0-48 21.5-48 48v192c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V272c0-26.5-21.5-48-48-48zm-104 0H152v-72c0-39.7 32.3-72 72-72s72 32.3 72 72v72z" }, "child": [] }] })(props);
  }
  function FaSpinner(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z" }, "child": [] }] })(props);
  }
  function FaUnlock(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 448 512" }, "child": [{ "tag": "path", "attr": { "d": "M400 256H152V152.9c0-39.6 31.7-72.5 71.3-72.9 40-.4 72.7 32.1 72.7 72v16c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24v-16C376 68 307.5-.3 223.5 0 139.5.3 72 69.5 72 153.5V256H48c-26.5 0-48 21.5-48 48v160c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V304c0-26.5-21.5-48-48-48z" }, "child": [] }] })(props);
  }
  function GrCircleQuestion(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "strokeWidth": "2", "d": "M12,22 C17.5228475,22 22,17.5228475 22,12 C22,6.4771525 17.5228475,2 12,2 C6.4771525,2 2,6.4771525 2,12 C2,17.5228475 6.4771525,22 12,22 Z M12,15 L12,14 C12,13 12,12.5 13,12 C14,11.5 15,11 15,9.5 C15,8.5 14,7 12,7 C10,7 9,8.26413718 9,10 M12,16 L12,18" }, "child": [] }] })(props);
  }
  const BranchContext = React__namespace.createContext({
    currentBranch: null,
    setCurrentBranch: (branch) => {
      console.warn("BranchContext not initialized");
    }
  });
  const BranchDataProvider = ({
    currentBranch,
    setCurrentBranch,
    children
  }) => {
    return /* @__PURE__ */ React__namespace.createElement(
      BranchContext.Provider,
      {
        value: {
          currentBranch,
          setCurrentBranch
        }
      },
      children
    );
  };
  const useBranchData = () => {
    const branchData = React__namespace.useContext(BranchContext);
    const { dispatch } = useEvent("branch:change");
    React__namespace.useEffect(() => {
      dispatch({ branchName: branchData.currentBranch });
    }, [branchData.currentBranch]);
    return branchData;
  };
  function formatBranchName$1(str) {
    const pattern = /[^/\w-]+/g;
    const formattedStr = str.replace(pattern, "");
    return formattedStr.toLowerCase();
  }
  const BranchSwitcherLegacy = ({
    listBranches,
    createBranch,
    chooseBranch
  }) => {
    var _a2, _b;
    const cms = useCMS$1();
    const isLocalMode = (_b = (_a2 = cms.api) == null ? void 0 : _a2.tina) == null ? void 0 : _b.isLocalMode;
    const [listState, setListState] = React__namespace.useState("loading");
    const [branchList, setBranchList] = React__namespace.useState([]);
    const { currentBranch } = useBranchData();
    const initialBranch = React__namespace.useMemo(() => currentBranch, []);
    React__namespace.useEffect(() => {
      return () => {
        if (initialBranch != currentBranch) {
          window.location.reload();
        }
      };
    }, [currentBranch]);
    const handleCreateBranch = React__namespace.useCallback((value) => {
      setListState("loading");
      createBranch({
        branchName: formatBranchName$1(value),
        baseBranch: currentBranch
      }).then(async (createdBranchName) => {
        cms.alerts.success("Branch created.");
        setBranchList((oldBranchList) => {
          return [
            ...oldBranchList,
            {
              indexStatus: { status: "unknown" },
              name: createdBranchName
            }
          ];
        });
        setListState("ready");
      });
    }, []);
    const refreshBranchList = React__namespace.useCallback(async () => {
      setListState("loading");
      await listBranches().then((data) => {
        setBranchList(data);
        setListState("ready");
      }).catch(() => setListState("error"));
    }, []);
    React__namespace.useEffect(() => {
      refreshBranchList();
    }, []);
    React__namespace.useEffect(() => {
      if (listState === "ready") {
        const cancelFuncs = [];
        branchList.filter(
          (x) => {
            var _a3, _b2;
            return ((_a3 = x == null ? void 0 : x.indexStatus) == null ? void 0 : _a3.status) === "inprogress" || ((_b2 = x == null ? void 0 : x.indexStatus) == null ? void 0 : _b2.status) === "unknown";
          }
        ).forEach(async (x) => {
          const [
            // When this promise resolves, we know the index status is no longer 'inprogress' or 'unknown'
            waitForIndexStatusPromise,
            // Calling this function will cancel the polling
            cancelWaitForIndexFunc
          ] = cms.api.tina.waitForIndexStatus({
            ref: x.name
          });
          cancelFuncs.push(cancelWaitForIndexFunc);
          waitForIndexStatusPromise.then((indexStatus) => {
            setBranchList((previousBranchList) => {
              const newBranchList = Array.from(previousBranchList);
              const index = newBranchList.findIndex((y) => y.name === x.name);
              newBranchList[index].indexStatus = indexStatus;
              return newBranchList;
            });
          }).catch((e3) => {
            if (e3.message === "AsyncPoller: cancelled")
              return;
            console.error(e3);
          });
        });
        return () => {
          cancelFuncs.forEach((x) => {
            x();
          });
        };
      }
    }, [listState, branchList.length]);
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "w-full flex justify-center p-5" }, /* @__PURE__ */ React__namespace.createElement("div", { className: "w-full max-w-form" }, isLocalMode ? /* @__PURE__ */ React__namespace.createElement("div", { className: "px-6 py-8 w-full h-full flex flex-col items-center justify-center" }, /* @__PURE__ */ React__namespace.createElement("p", { className: "text-base mb-4 text-center" }, /* @__PURE__ */ React__namespace.createElement(AiFillWarning, { className: "w-7 h-auto inline-block mr-0.5 opacity-70 text-yellow-600" })), /* @__PURE__ */ React__namespace.createElement("p", { className: "text-base mb-6 text-center" }, "Tina's branch switcher isn't available in local mode.", " ", /* @__PURE__ */ React__namespace.createElement(
      "a",
      {
        target: "_blank",
        className: "transition-all duration-150 ease-out text-blue-600 hover:text-blue-400 hover:underline no-underline",
        href: "https://tina.io/docs/tina-cloud/"
      },
      "Learn more about moving to production with TinaCloud."
    )), /* @__PURE__ */ React__namespace.createElement("p", null, /* @__PURE__ */ React__namespace.createElement(
      Button$1,
      {
        href: "https://tina.io/docs/tina-cloud/",
        target: "_blank",
        as: "a"
      },
      "Read Our Docs",
      " ",
      /* @__PURE__ */ React__namespace.createElement(MdArrowForward, { className: "w-5 h-auto ml-1.5 opacity-80" })
    ))) : listState === "loading" ? /* @__PURE__ */ React__namespace.createElement("div", { style: { margin: "32px auto", textAlign: "center" } }, /* @__PURE__ */ React__namespace.createElement(LoadingDots, { color: "var(--tina-color-primary)" })) : /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, listState === "ready" ? /* @__PURE__ */ React__namespace.createElement(
      BranchSelector$1,
      {
        currentBranch,
        branchList,
        onCreateBranch: (newBranch) => {
          handleCreateBranch(newBranch);
        },
        onChange: (branchName) => {
          chooseBranch(branchName);
        }
      }
    ) : /* @__PURE__ */ React__namespace.createElement("div", { className: "px-6 py-8 w-full h-full flex flex-col items-center justify-center" }, /* @__PURE__ */ React__namespace.createElement("p", { className: "text-base mb-4 text-center" }, "An error occurred while retrieving the branch list."), /* @__PURE__ */ React__namespace.createElement(Button$1, { className: "mb-4", onClick: refreshBranchList }, "Try again ", /* @__PURE__ */ React__namespace.createElement(BiRefresh, { className: "w-6 h-full ml-1 opacity-70" }))))));
  };
  const getFilteredBranchList$1 = (branchList, filter2, currentBranchName) => {
    const filteredBranchList = branchList.filter(
      (branch) => !filter2 || branch.name.includes(filter2) || branch.name === currentBranchName
    );
    const currentBranchItem = branchList.find(
      (branch) => branch.name === currentBranchName
    );
    return [
      currentBranchItem || {
        name: currentBranchName,
        indexStatus: { status: "failed" }
      },
      ...filteredBranchList.filter((branch) => branch.name !== currentBranchName)
    ];
  };
  const BranchSelector$1 = ({
    branchList,
    currentBranch,
    onCreateBranch,
    onChange
  }) => {
    const [newBranchName, setNewBranchName] = React__namespace.useState("");
    const [filter2, setFilter] = React__namespace.useState("");
    const filteredBranchList = getFilteredBranchList$1(
      branchList,
      filter2,
      currentBranch
    );
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "flex flex-col gap-3" }, /* @__PURE__ */ React__namespace.createElement("div", { className: "block relative group" }, /* @__PURE__ */ React__namespace.createElement(
      BaseTextField,
      {
        placeholder: "Search",
        value: filter2,
        onChange: (e3) => setFilter(e3.target.value)
      }
    ), filter2 === "" ? /* @__PURE__ */ React__namespace.createElement(BiSearch, { className: "absolute right-3 top-1/2 -translate-y-1/2 w-5 h-auto text-blue-500 opacity-70 group-hover:opacity-100 transition-all ease-out duration-150" }) : /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        onClick: () => {
          setFilter("");
        },
        className: "outline-none focus:outline-none bg-transparent border-0 p-0 m-0 absolute right-2.5 top-1/2 -translate-y-1/2 opacity-50 hover:opacity-100 transition-all ease-out duration-150"
      },
      /* @__PURE__ */ React__namespace.createElement(MdOutlineClear, { className: "w-5 h-auto text-gray-600" })
    )), filteredBranchList.length === 0 && /* @__PURE__ */ React__namespace.createElement("div", { className: "block relative text-gray-300 italic py-1" }, "No branches to display"), filteredBranchList.length > 0 && /* @__PURE__ */ React__namespace.createElement("div", { className: "min-w-[192px] max-h-[24rem] overflow-y-auto flex flex-col w-full h-full rounded-lg shadow-inner bg-white border border-gray-200" }, filteredBranchList.map((branch) => {
      var _a2;
      const isCurrentBranch = branch.name === currentBranch;
      const indexingStatus = (_a2 = branch == null ? void 0 : branch.indexStatus) == null ? void 0 : _a2.status;
      return /* @__PURE__ */ React__namespace.createElement(
        "div",
        {
          className: `relative text-base py-1.5 px-3 flex items-center gap-1.5 border-l-0 border-t-0 border-r-0 border-b border-gray-50 w-full outline-none transition-all ease-out duration-150 ${indexingStatus !== "complete" ? "bg-gray-50 text-gray-400 pointer-events-none" : isCurrentBranch ? "cursor-pointer bg-blue-50 text-blue-800 pointer-events-none hover:text-blue-500 focus:text-blue-500 focus:bg-gray-50 hover:bg-gray-50" : "cursor-pointer hover:text-blue-500 focus:text-blue-500 focus:bg-gray-50 hover:bg-gray-50"}`,
          key: branch.name,
          onClick: () => {
            if (indexingStatus === "complete") {
              onChange(branch.name);
            }
          }
        },
        isCurrentBranch && /* @__PURE__ */ React__namespace.createElement(BiGitBranch, { className: "w-5 h-auto text-blue-500/70" }),
        branch.name,
        indexingStatus === "unknown" && /* @__PURE__ */ React__namespace.createElement("span", { className: "flex-1 w-full flex justify-end items-center gap-2 text-blue-500" }, /* @__PURE__ */ React__namespace.createElement("span", { className: "opacity-50 italic" }, `Unknown`), /* @__PURE__ */ React__namespace.createElement(GrCircleQuestion, { className: "w-5 h-auto opacity-70" })),
        indexingStatus === "inprogress" && /* @__PURE__ */ React__namespace.createElement("span", { className: "flex-1 w-full flex justify-end items-center gap-2 text-blue-500" }, /* @__PURE__ */ React__namespace.createElement("span", { className: "opacity-50 italic" }, `Indexing`), /* @__PURE__ */ React__namespace.createElement(FaSpinner, { className: "w-5 h-auto opacity-70 animate-spin" })),
        indexingStatus === "failed" && /* @__PURE__ */ React__namespace.createElement("span", { className: "flex-1 w-full flex justify-end items-center gap-2 text-red-500" }, /* @__PURE__ */ React__namespace.createElement("span", { className: "opacity-50 italic" }, `Indexing failed`), /* @__PURE__ */ React__namespace.createElement(BiError, { className: "w-5 h-auto opacity-70" })),
        indexingStatus === "timeout" && /* @__PURE__ */ React__namespace.createElement("span", { className: "flex-1 w-full flex justify-end items-center gap-2 text-red-500" }, /* @__PURE__ */ React__namespace.createElement("span", { className: "opacity-50 italic" }, `Indexing timed out`), /* @__PURE__ */ React__namespace.createElement(BiError, { className: "w-5 h-auto opacity-70" })),
        isCurrentBranch && /* @__PURE__ */ React__namespace.createElement("span", { className: "opacity-70 italic" }, ` (current)`)
      );
    })), /* @__PURE__ */ React__namespace.createElement(
      CreateBranch,
      {
        ...{ onCreateBranch, currentBranch, newBranchName, setNewBranchName }
      }
    ));
  };
  const CreateBranch = ({ currentBranch, newBranchName, onCreateBranch, setNewBranchName }) => {
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "border-t border-gray-150 pt-4 mt-3 flex flex-col gap-3" }, /* @__PURE__ */ React__namespace.createElement("div", { className: "text-sm" }, "Create a new branch from ", /* @__PURE__ */ React__namespace.createElement("b", null, currentBranch), ". Once created you will need to wait for indexing to complete before you can switch branches."), /* @__PURE__ */ React__namespace.createElement("div", { className: "flex justify-between items-center w-full gap-3" }, /* @__PURE__ */ React__namespace.createElement(
      BaseTextField,
      {
        placeholder: "Branch Name",
        value: newBranchName,
        onChange: (e3) => setNewBranchName(e3.target.value)
      }
    ), /* @__PURE__ */ React__namespace.createElement(
      Button$1,
      {
        className: "flex-0 flex items-center gap-2 whitespace-nowrap",
        size: "medium",
        variant: "white",
        disabled: newBranchName === "",
        onClick: () => onCreateBranch(newBranchName)
      },
      /* @__PURE__ */ React__namespace.createElement(BiPlus, { className: "w-5 h-auto opacity-70" }),
      " Create Branch"
    )));
  };
  function formatBranchName(str) {
    const pattern = /[^/\w-]+/g;
    const formattedStr = str.replace(pattern, "-");
    return formattedStr.toLowerCase();
  }
  const BranchSwitcher = (props) => {
    const cms = useCMS$1();
    const usingEditorialWorkflow = cms.api.tina.usingEditorialWorkflow;
    if (usingEditorialWorkflow) {
      return /* @__PURE__ */ React__namespace.createElement(EditoralBranchSwitcher, { ...props });
    } else {
      return /* @__PURE__ */ React__namespace.createElement(BranchSwitcherLegacy, { ...props });
    }
  };
  const EditoralBranchSwitcher = ({
    listBranches,
    createBranch,
    chooseBranch,
    setModalTitle
  }) => {
    var _a2, _b;
    const cms = useCMS$1();
    const isLocalMode = (_b = (_a2 = cms.api) == null ? void 0 : _a2.tina) == null ? void 0 : _b.isLocalMode;
    const [viewState, setViewState] = React__namespace.useState("list");
    const [listState, setListState] = React__namespace.useState("loading");
    const [branchList, setBranchList] = React__namespace.useState([]);
    const { currentBranch } = useBranchData();
    const initialBranch = React__namespace.useMemo(() => currentBranch, []);
    React__namespace.useEffect(() => {
      if (initialBranch != currentBranch) {
        window.location.reload();
      }
    }, [currentBranch]);
    React__namespace.useEffect(() => {
      if (!setModalTitle)
        return;
      if (viewState === "create") {
        setModalTitle("Create Branch");
      } else {
        setModalTitle("Branch List");
      }
    }, [viewState, setModalTitle]);
    const handleCreateBranch = React__namespace.useCallback((value) => {
      setListState("loading");
      createBranch({
        branchName: formatBranchName(value),
        baseBranch: currentBranch
      }).then(async (createdBranchName) => {
        cms.alerts.success("Branch created.");
        setBranchList((oldBranchList) => {
          return [
            ...oldBranchList,
            {
              indexStatus: { status: "unknown" },
              name: createdBranchName
            }
          ];
        });
        setListState("ready");
      });
    }, []);
    const refreshBranchList = React__namespace.useCallback(async () => {
      setListState("loading");
      await listBranches().then((data) => {
        setBranchList(data);
        setListState("ready");
      }).catch(() => setListState("error"));
    }, []);
    React__namespace.useEffect(() => {
      refreshBranchList();
    }, []);
    React__namespace.useEffect(() => {
      if (listState === "ready") {
        const cancelFuncs = [];
        branchList.filter(
          (x) => {
            var _a3, _b2;
            return ((_a3 = x == null ? void 0 : x.indexStatus) == null ? void 0 : _a3.status) === "inprogress" || ((_b2 = x == null ? void 0 : x.indexStatus) == null ? void 0 : _b2.status) === "unknown";
          }
        ).forEach(async (x) => {
          const [
            // When this promise resolves, we know the index status is no longer 'inprogress' or 'unknown'
            waitForIndexStatusPromise,
            // Calling this function will cancel the polling
            cancelWaitForIndexFunc
          ] = cms.api.tina.waitForIndexStatus({
            ref: x.name
          });
          cancelFuncs.push(cancelWaitForIndexFunc);
          waitForIndexStatusPromise.then((indexStatus) => {
            setBranchList((previousBranchList) => {
              const newBranchList = Array.from(previousBranchList);
              const index = newBranchList.findIndex((y) => y.name === x.name);
              newBranchList[index].indexStatus = indexStatus;
              return newBranchList;
            });
          }).catch((e3) => {
            if (e3.message === "AsyncPoller: cancelled")
              return;
            console.error(e3);
          });
        });
        return () => {
          cancelFuncs.forEach((x) => {
            x();
          });
        };
      }
    }, [listState, branchList.length]);
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "w-full flex justify-center p-5" }, /* @__PURE__ */ React__namespace.createElement("div", { className: "w-full max-w-form" }, isLocalMode ? /* @__PURE__ */ React__namespace.createElement("div", { className: "px-6 py-8 w-full h-full flex flex-col items-center justify-center" }, /* @__PURE__ */ React__namespace.createElement("p", { className: "text-base mb-4 text-center" }, /* @__PURE__ */ React__namespace.createElement(AiFillWarning, { className: "w-7 h-auto inline-block mr-0.5 opacity-70 text-yellow-600" })), /* @__PURE__ */ React__namespace.createElement("p", { className: "text-base mb-6 text-center" }, "Tina's branch switcher isn't available in local mode.", " ", /* @__PURE__ */ React__namespace.createElement(
      "a",
      {
        target: "_blank",
        className: "transition-all duration-150 ease-out text-blue-600 hover:text-blue-400 hover:underline no-underline",
        href: "https://tina.io/docs/tina-cloud/"
      },
      "Learn more about moving to production with TinaCloud."
    )), /* @__PURE__ */ React__namespace.createElement("p", null, /* @__PURE__ */ React__namespace.createElement(
      Button$1,
      {
        href: "https://tina.io/docs/tina-cloud/",
        target: "_blank",
        as: "a"
      },
      "Read Our Docs",
      " ",
      /* @__PURE__ */ React__namespace.createElement(MdArrowForward, { className: "w-5 h-auto ml-1.5 opacity-80" })
    ))) : viewState === "create" ? /* @__PURE__ */ React__namespace.createElement(
      BranchCreator,
      {
        currentBranch,
        setViewState,
        handleCreateBranch
      }
    ) : listState === "loading" ? /* @__PURE__ */ React__namespace.createElement("div", { style: { margin: "32px auto", textAlign: "center" } }, /* @__PURE__ */ React__namespace.createElement(LoadingDots, { color: "var(--tina-color-primary)" })) : /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, listState === "ready" ? /* @__PURE__ */ React__namespace.createElement(
      BranchSelector,
      {
        currentBranch,
        branchList,
        createBranch: () => {
          setViewState("create");
        },
        onChange: (branchName) => {
          chooseBranch(branchName);
        }
      }
    ) : /* @__PURE__ */ React__namespace.createElement("div", { className: "px-6 py-8 w-full h-full flex flex-col items-center justify-center" }, /* @__PURE__ */ React__namespace.createElement("p", { className: "text-base mb-4 text-center" }, "An error occurred while retrieving the branch list."), /* @__PURE__ */ React__namespace.createElement(Button$1, { className: "mb-4", onClick: refreshBranchList }, "Try again ", /* @__PURE__ */ React__namespace.createElement(BiRefresh, { className: "w-6 h-full ml-1 opacity-70" }))))));
  };
  const getFilteredBranchList = (branchList, search, currentBranchName, filter2 = "all") => {
    const filteredBranchList = branchList.filter(
      (branch) => !search || branch.name.includes(search) || branch.name === currentBranchName
    ).filter((branch) => {
      if (branch.protected)
        return true;
      if (filter2 === "all")
        return true;
      if (filter2 === "content") {
        return branch.name.startsWith("tina/");
      }
    });
    const currentBranchItem = branchList.find(
      (branch) => branch.name === currentBranchName
    );
    return [
      currentBranchItem || {
        name: currentBranchName,
        indexStatus: { status: "failed" }
      },
      ...filteredBranchList.filter((branch) => branch.name !== currentBranchName)
    ];
  };
  const sortBranchListFn = (sortValue) => {
    return (a2, b) => {
      if (sortValue === "default") {
        return 0;
      } else if (sortValue === "updated") {
        return b.indexStatus.timestamp - a2.indexStatus.timestamp;
      } else if (sortValue === "name") {
        return a2.name.localeCompare(b.name);
      }
    };
  };
  const BranchCreator = ({ setViewState, handleCreateBranch, currentBranch }) => {
    const [branchName, setBranchName] = React__namespace.useState("");
    return /* @__PURE__ */ React__namespace.createElement("form", null, /* @__PURE__ */ React__namespace.createElement("div", { className: "" }, /* @__PURE__ */ React__namespace.createElement("p", { className: "text-base text-gray-700 mb-4" }, "Create a new branch from ", /* @__PURE__ */ React__namespace.createElement("strong", null, currentBranch), "."), /* @__PURE__ */ React__namespace.createElement("div", { className: "mb-3" }, /* @__PURE__ */ React__namespace.createElement(FieldLabel, { name: "current-branch-name" }, "Current Branch Name"), /* @__PURE__ */ React__namespace.createElement(
      BaseTextField,
      {
        name: "current-branch-name",
        value: currentBranch,
        disabled: true
      }
    )), /* @__PURE__ */ React__namespace.createElement("div", { className: "mb-6" }, /* @__PURE__ */ React__namespace.createElement(FieldLabel, { name: "branch-name" }, "New Branch Name"), /* @__PURE__ */ React__namespace.createElement(
      PrefixedTextField,
      {
        placeholder: "",
        name: "branch-name",
        value: branchName,
        onChange: (e3) => setBranchName(e3.target.value)
      }
    ))), /* @__PURE__ */ React__namespace.createElement("div", { className: "w-full flex justify-between gap-4 items-center" }, /* @__PURE__ */ React__namespace.createElement(
      Button$1,
      {
        style: { flexGrow: 1 },
        onClick: () => {
          setViewState("list");
        }
      },
      "Cancel"
    ), /* @__PURE__ */ React__namespace.createElement(
      Button$1,
      {
        variant: "primary",
        type: "submit",
        style: { flexGrow: 2 },
        disabled: branchName === "",
        onClick: () => {
          handleCreateBranch("tina/" + branchName);
        }
      },
      "Create Branch ",
      /* @__PURE__ */ React__namespace.createElement(BiGitBranch, { className: "w-5 h-full ml-1 opacity-70" })
    )));
  };
  const BranchSelector = ({
    branchList,
    currentBranch,
    onChange,
    createBranch
  }) => {
    var _a2, _b, _c, _d;
    const [search, setSearch] = React__namespace.useState("");
    const [filter2, setFilter] = React__namespace.useState("content");
    const [sortValue, setSortValue] = React__namespace.useState("default");
    const cms = useCMS$1();
    const filteredBranchList = getFilteredBranchList(
      branchList,
      search,
      currentBranch,
      filter2
    ).sort(sortBranchListFn(sortValue));
    const previewFunction = (_d = (_c = (_b = (_a2 = cms.api.tina.schema) == null ? void 0 : _a2.config) == null ? void 0 : _b.config) == null ? void 0 : _c.ui) == null ? void 0 : _d.previewUrl;
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "flex flex-col gap-4" }, /* @__PURE__ */ React__namespace.createElement("div", { className: "flex items-end space-x-4" }, /* @__PURE__ */ React__namespace.createElement("div", null, /* @__PURE__ */ React__namespace.createElement(
      "label",
      {
        htmlFor: "search",
        className: "text-xs mb-1 flex flex-col font-bold"
      },
      "Search"
    ), /* @__PURE__ */ React__namespace.createElement("div", { className: "block relative group h-fit mb-auto" }, /* @__PURE__ */ React__namespace.createElement(
      BaseTextField,
      {
        placeholder: "Search",
        value: search,
        onChange: (e3) => setSearch(e3.target.value)
      }
    ), search === "" ? /* @__PURE__ */ React__namespace.createElement(BiSearch, { className: "absolute right-3 top-1/2 -translate-y-1/2 w-5 h-auto text-blue-500 opacity-70 group-hover:opacity-100 transition-all ease-out duration-150" }) : /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        onClick: () => {
          setSearch("");
        },
        className: "outline-none focus:outline-none bg-transparent border-0 p-0 m-0 absolute right-2.5 top-1/2 -translate-y-1/2 opacity-50 hover:opacity-100 transition-all ease-out duration-150"
      },
      /* @__PURE__ */ React__namespace.createElement(MdOutlineClear, { className: "w-5 h-auto text-gray-600" })
    ))), /* @__PURE__ */ React__namespace.createElement("div", null, /* @__PURE__ */ React__namespace.createElement(
      "label",
      {
        htmlFor: "branch-type",
        className: "text-xs mb-1 flex flex-col font-bold"
      },
      "Branch Type"
    ), /* @__PURE__ */ React__namespace.createElement(
      Select,
      {
        name: "branch-type",
        input: {
          id: "branch-type",
          name: "branch-type",
          value: filter2,
          onChange: (e3) => setFilter(e3.target.value)
        },
        options: [
          {
            label: "Content",
            value: "content"
          },
          {
            label: "All",
            value: "all"
          }
        ]
      }
    ))), filteredBranchList.length === 0 && /* @__PURE__ */ React__namespace.createElement("div", { className: "block relative text-gray-300 italic py-1" }, "No branches to display"), filteredBranchList.length > 0 && /* @__PURE__ */ React__namespace.createElement("div", { className: "min-w-[192px] max-h-[24rem] overflow-y-auto flex flex-col w-full h-full rounded-lg shadow-inner bg-white border border-gray-200" }, filteredBranchList.map((branch) => {
      var _a3, _b2;
      const isCurrentBranch = branch.name === currentBranch;
      const indexingStatus = (_a3 = branch == null ? void 0 : branch.indexStatus) == null ? void 0 : _a3.status;
      return /* @__PURE__ */ React__namespace.createElement(
        "div",
        {
          className: `relative text-base py-1.5 px-3 flex items-center gap-1.5 border-l-0 border-t-0 border-r-0 border-gray-50 w-full outline-none transition-all ease-out duration-150 ${indexingStatus !== "complete" ? "bg-gray-50 text-gray-400" : isCurrentBranch ? "border-blue-500 border-l-5 bg-blue-50 text-blue-800 border-b-0" : "border-b-2"}`,
          key: branch.name
        },
        /* @__PURE__ */ React__namespace.createElement("div", { className: "w-1/2" }, /* @__PURE__ */ React__namespace.createElement("div", { className: "flex items-center gap-1" }, /* @__PURE__ */ React__namespace.createElement("div", { className: "flex-0" }, branch.protected && /* @__PURE__ */ React__namespace.createElement(BiLock, { className: "w-5 h-auto opacity-70 text-blue-500" })), /* @__PURE__ */ React__namespace.createElement("div", { className: "truncate flex-1" }, branch.name)), indexingStatus !== "complete" && /* @__PURE__ */ React__namespace.createElement("div", { className: "w-fit" }, /* @__PURE__ */ React__namespace.createElement(IndexStatus, { indexingStatus: branch.indexStatus.status }))),
        /* @__PURE__ */ React__namespace.createElement("div", { className: "flex-1" }, /* @__PURE__ */ React__namespace.createElement("div", { className: "text-xs font-bold" }, "Last Updated"), /* @__PURE__ */ React__namespace.createElement("span", { className: "text-sm leading-tight" }, dateFns.formatDistanceToNow(
          new Date(branch.indexStatus.timestamp),
          {
            addSuffix: true
          }
        ))),
        /* @__PURE__ */ React__namespace.createElement("div", { className: "flex items-center" }, indexingStatus === "complete" && !isCurrentBranch && /* @__PURE__ */ React__namespace.createElement(
          Button$1,
          {
            variant: "white",
            size: "custom",
            onClick: () => {
              onChange(branch.name);
            },
            className: "mr-auto cursor-pointer text-sm h-9 px-4 flex items-center gap-1"
          },
          /* @__PURE__ */ React__namespace.createElement(BiPencil, { className: "h-4 w-auto text-blue-500 opacity-70 -mt-px" }),
          " ",
          "Select"
        ), (branch.githubPullRequestUrl || typeof previewFunction === "function") && /* @__PURE__ */ React__namespace.createElement("div", { className: "ml-auto" }, /* @__PURE__ */ React__namespace.createElement(
          OverflowMenu$1,
          {
            toolbarItems: [
              branch.githubPullRequestUrl && {
                name: "github-pr",
                label: "View in GitHub",
                Icon: /* @__PURE__ */ React__namespace.createElement(BiLinkExternal, { className: "w-5 h-auto text-blue-500 opacity-70" }),
                onMouseDown: () => {
                  window.open(
                    branch.githubPullRequestUrl,
                    "_blank"
                  );
                }
              },
              typeof previewFunction === "function" && ((_b2 = previewFunction({ branch: branch.name })) == null ? void 0 : _b2.url) && {
                name: "preview",
                label: "Preview",
                onMouseDown: () => {
                  var _a4;
                  const previewUrl = (_a4 = previewFunction({
                    branch: branch.name
                  })) == null ? void 0 : _a4.url;
                  window.open(previewUrl, "_blank");
                }
              }
            ].filter(Boolean)
          }
        )))
      );
    })));
  };
  const IndexStatus = ({ indexingStatus }) => {
    const styles = {
      complete: {
        classes: "",
        content: () => /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null)
      },
      unknown: {
        classes: "text-blue-500 border-blue-500",
        content: () => /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(GrCircleQuestion, { className: "w-3 h-auto" }), /* @__PURE__ */ React__namespace.createElement("span", { className: "" }, `Unknown`))
      },
      inprogress: {
        classes: "text-blue-500 border-blue-500",
        content: () => /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(FaSpinner, { className: "w-3 h-auto animate-spin" }), /* @__PURE__ */ React__namespace.createElement("span", { className: "" }, `Indexing`))
      },
      failed: {
        classes: "text-red-500 border-red-500",
        content: () => /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(BiError, { className: "w-3 h-auto" }), /* @__PURE__ */ React__namespace.createElement("span", { className: "" }, `Indexing failed`))
      },
      timeout: {
        classes: "text-red-500 border-red-500",
        content: () => /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(BiError, { className: "w-3 h-auto" }), /* @__PURE__ */ React__namespace.createElement("span", { className: "" }, `Indexing timed out`))
      }
    };
    return /* @__PURE__ */ React__namespace.createElement(
      "span",
      {
        className: `inline-flex items-center rounded px-2 py-1 text-xs font-medium border space-x-1 ${styles[indexingStatus].classes}`
      },
      styles[indexingStatus].content()
    );
  };
  class BranchSwitcherPlugin {
    constructor(options) {
      this.__type = "screen";
      this.Icon = BiGitRepoForked;
      this.name = "Select Branch";
      this.layout = "popup";
      this.Component = () => {
        return /* @__PURE__ */ React__namespace.createElement(
          BranchSwitcher,
          {
            listBranches: this.listBranches,
            createBranch: this.createBranch,
            chooseBranch: this.chooseBranch
          }
        );
      };
      this.listBranches = options.listBranches;
      this.createBranch = options.createBranch;
      this.chooseBranch = options.chooseBranch;
    }
  }
  class GlobalFormPlugin {
    constructor(form, icon, layout) {
      this.form = form;
      this.__type = "screen";
      this.name = form.label;
      this.Icon = icon || MdOutlineSettings;
      this.layout = layout || "popup";
      this.Component = () => {
        const cms = useCMS();
        const cmsForm = cms.state.forms.find(
          ({ tinaForm }) => tinaForm.id === form.id
        );
        return /* @__PURE__ */ React__namespace.createElement(FormBuilder, { form: cmsForm });
      };
    }
  }
  let Alerts$1 = class Alerts {
    constructor(events2, map2 = {}) {
      this.events = events2;
      this.map = map2;
      this.alerts = /* @__PURE__ */ new Map();
      this.mapEventToAlert = (event) => {
        const toAlert = this.map[event.type];
        if (toAlert) {
          let getArgs;
          if (typeof toAlert === "function") {
            getArgs = toAlert;
          } else {
            getArgs = () => toAlert;
          }
          const { level, message, timeout } = getArgs(event);
          this.add(level, message, timeout);
        }
      };
      this.events.subscribe("*", this.mapEventToAlert);
    }
    setMap(eventsToAlerts) {
      this.map = {
        ...this.map,
        ...eventsToAlerts
      };
    }
    add(level, message, timeout = 4e3) {
      const alert = {
        level,
        message,
        timeout,
        id: `${message}|${Date.now()}`
      };
      this.alerts.set(alert.id, alert);
      this.events.dispatch({ type: "alerts:add", alert });
      let timeoutId = null;
      const dismiss = () => {
        clearTimeout(timeoutId);
        this.dismiss(alert);
      };
      timeoutId = level !== "error" ? setTimeout(dismiss, alert.timeout) : null;
      return dismiss;
    }
    dismiss(alert) {
      this.alerts.delete(alert.id);
      this.events.dispatch({ type: "alerts:remove", alert });
    }
    subscribe(cb) {
      const unsub = this.events.subscribe("alerts", cb);
      return () => unsub();
    }
    get all() {
      return Array.from(this.alerts.values());
    }
    info(message, timeout) {
      return this.add("info", message, timeout);
    }
    success(message, timeout) {
      return this.add("success", message, timeout);
    }
    warn(message, timeout) {
      return this.add("warn", message, timeout);
    }
    error(message, timeout) {
      return this.add("error", message, timeout);
    }
  };
  class PluginTypeManager {
    constructor(events2) {
      this.events = events2;
      this.plugins = {};
    }
    /**
     * Gets the [[PluginType|collection of plugins]] for the given type.
     *
     * #### Example: Basic Usage
     *
     * ```ts
     * const colorPlugins = cms.plugins.get("color")
     * ```
     *
     * #### Example: Advanced Types
     *
     * A type param can be added to specify the kind of Plugin
     * that is being listed.
     *
     * ```ts
     * const colorPlugins = cms.plugins.get<ColorPlugin>("color")
     * ```
     *
     * @param type The type of plugins to be retrieved
     * @typeparam P A subclass of Plugin. Optional.
     */
    getType(type) {
      return this.plugins[type] = this.plugins[type] || new PluginType(type, this.events);
    }
    /**
     * An alias to [[get]]
     *
     * ### !DEPRECATED!
     *
     * This name is unnecessarily verbose and weird.
     */
    findOrCreateMap(type) {
      return this.getType(type);
    }
    /**
     * Adds a Plugin to the CMS.
     *
     * #### Example: Basic Usage
     *
     * ```js
     * cms.plugins.add({ __type: "color", name: "red" })
     * ```
     *
     * #### Example: Advanced Types
     *
     * ```ts
     * interface ColorPlugin extends Plugin {
     *   __type: "color"
     *   hex: string
     *   rgb: string
     * }
     *
     * cms.plugins.add<ColorPlugin>({
     *   __type: "color",
     *   name: "red",
     *   hex: "#FF0000",
     *   rgb: "RGBA(255, 0, 0, 1)"
     * })
     * ```
     *
     * @typeparam P A subclass of Plugin. Optional.
     * @param plugin
     * @todo Consider returning the plugin which was just added.
     */
    add(plugin) {
      this.findOrCreateMap(plugin.__type).add(plugin);
    }
    /**
     * Removes the given plugin from the CMS.
     *
     * #### Example
     *
     * In this example a plugin is added to the CMS and removed
     * 5 seconds later.
     *
     * ```ts
     * const redPlugin = {
     *   __type: "color",
     *   name: "red",
     *   hex: "#FF0000",
     *   rgb: "RGBA(255, 0, 0, 1)"
     * }
     *
     * cms.plugins.add(redPlugin)
     *
     * setTimeout(() => {
     *   cms.plugins.remove(redPlugin)
     * }, 5000)
     * ```
     *
     * @typeparam P A subclass of Plugin. Optional.
     * @param plugin The plugin to be removed from the CMS.
     */
    remove(plugin) {
      this.findOrCreateMap(plugin.__type).remove(plugin);
    }
    /**
     * Returns a list of all the plugins of the given type.
     *
     * #### Example: Basic Usage
     *
     * ```ts
     * cms.plugins.all("color").forEach(color => {
     *   console.log(color.name)
     * })
     * ```
     *
     * #### Example: Advanced Types
     *
     * A generic can be added to specify the type of plugins
     * that are being retrieved.
     *
     * ```ts
     * cms.plugins.all<ColorPlugin>("color").forEach(color => {
     *   console.log(color.name, color.hex)
     * })
     * ```
     *
     * @typeparam P A subclass of Plugin. Optional.
     * @param type The name of the plugin
     * @returns An array of all plugins of the given type.
     */
    all(type) {
      return this.findOrCreateMap(type).all();
    }
  }
  class PluginType {
    /**
     *
     * @param __type The `__type` of plugin being managed.
     */
    constructor(__type, events2) {
      this.__type = __type;
      this.events = events2;
      this.__plugins = {};
    }
    /**
     * Adds a new plugin to the collection.
     *
     * ### Example
     *
     * ```ts
     * interface ColorPlugin extends Plugin {
     *   hex: string
     * }
     *
     * const colorPlugins = new PluginType<ColorPlugin>("color")
     *
     * colorPlugins.add({ name: "red", hex: "#f00" })
     * ```
     *
     * @param plugin A new plugin. The `__type` is optional and will be added if it's missing.
     */
    add(plugin) {
      const p2 = plugin;
      if (!p2.__type) {
        p2.__type = this.__type;
      }
      this.__plugins[p2.name] = p2;
      this.events.dispatch({ type: `plugin:add:${this.__type}` });
    }
    all() {
      return Object.keys(this.__plugins).map((name) => this.__plugins[name]);
    }
    /**
     *
     * Looks up a plugin by it's `name`.
     *
     * ### Example
     *
     * ```ts
     * const colorPlugins = new PluginType<ColorPlugin>("color")
     *
     * colorPlugins.add({ name: "red", hex: "#f00" })
     *
     * colorPlugins.find("red")  // { __type: "color", name: "red", hex: "#f00" }
     * colorPlugin.find("large") // undefined
     * ```
     *
     * @param name The `name` of the plugin to be retrieved.
     */
    find(name) {
      return this.__plugins[name];
    }
    /**
     * Pass this function a plugin or the `name` of a plugin to have
     * it be removed from the CMS.
     *
     * @param pluginOrName The `name` of a plugin, or the plugin itself.
     * @returns The plugin that was removed, or `undefined` if it was not found.
     */
    remove(pluginOrName) {
      const name = typeof pluginOrName === "string" ? pluginOrName : pluginOrName.name;
      const plugin = this.__plugins[name];
      delete this.__plugins[name];
      this.events.dispatch({ type: `plugin:remove:${this.__type}` });
      return plugin;
    }
    subscribe(cb) {
      return this.events.subscribe(`plugin:*:${this.__type}`, cb);
    }
  }
  class EventBus {
    constructor() {
      this.listeners = /* @__PURE__ */ new Set();
    }
    subscribe(event, callback) {
      let events2;
      if (typeof event === "string") {
        events2 = [event];
      } else {
        events2 = event;
      }
      const newListeners = events2.map(
        (event2) => new Listener(event2, callback)
      );
      newListeners.forEach((newListener) => this.listeners.add(newListener));
      return () => {
        newListeners.forEach((listener) => this.listeners.delete(listener));
      };
    }
    dispatch(event) {
      if (!this.listeners)
        return;
      const listenerSnapshot = Array.from(this.listeners.values());
      listenerSnapshot.forEach((listener) => listener.handleEvent(event));
    }
  }
  class Listener {
    constructor(eventPattern, callback) {
      this.eventPattern = eventPattern;
      this.callback = callback;
    }
    handleEvent(event) {
      if (this.watchesEvent(event)) {
        this.callback(event);
        return true;
      }
      return false;
    }
    watchesEvent(currentEvent) {
      if (this.eventPattern === "*")
        return true;
      const eventParts = currentEvent.type.split(":");
      const patternParts = this.eventPattern.split(":");
      let index = 0;
      let ignoresEvent = false;
      while (!ignoresEvent && index < patternParts.length) {
        const wildcard = patternParts[index] === "*";
        const matchingParts = patternParts[index] === eventParts[index];
        ignoresEvent = !(wildcard || matchingParts);
        index++;
      }
      return !ignoresEvent;
    }
  }
  const s3ErrorRegex = /<Error>.*<Code>(.+)<\/Code>.*<Message>(.+)<\/Message>.*/;
  class DummyMediaStore {
    constructor() {
      this.accept = "*";
    }
    async persist(files) {
      return files.map(({ directory, file }) => ({
        id: file.name,
        type: "file",
        directory,
        filename: file.name
      }));
    }
    async list() {
      const items2 = [];
      return {
        items: items2,
        nextOffset: 0
      };
    }
    async delete() {
    }
  }
  class TinaMediaStore {
    constructor(cms, staticMedia) {
      this.fetchFunction = (input, init) => {
        return fetch(input, init);
      };
      this.accept = DEFAULT_MEDIA_UPLOAD_TYPES;
      this.maxSize = 100 * 1024 * 1024;
      this.parse = (img) => {
        return img.src;
      };
      this.cms = cms;
      if (staticMedia && Object.keys(staticMedia).length > 0) {
        this.isStatic = true;
        this.staticMedia = staticMedia;
      }
    }
    setup() {
      var _a2, _b, _c, _d;
      if (!this.api) {
        this.api = (_b = (_a2 = this.cms) == null ? void 0 : _a2.api) == null ? void 0 : _b.tina;
        this.isLocal = !!this.api.isLocalMode;
        if (!this.isStatic) {
          const contentApiUrl = new URL(this.api.contentApiUrl);
          this.url = `${contentApiUrl.origin}/media`;
          if (!this.isLocal) {
            if ((_d = (_c = this.api.options) == null ? void 0 : _c.tinaioConfig) == null ? void 0 : _d.assetsApiUrlOverride) {
              const url = new URL(this.api.assetsApiUrl);
              this.url = `${url.origin}/v1/${this.api.clientId}`;
            } else {
              this.url = `${contentApiUrl.origin.replace(
                "content",
                "assets"
              )}/v1/${this.api.clientId}`;
            }
          }
        }
      }
    }
    async isAuthenticated() {
      this.setup();
      return await this.api.authProvider.isAuthenticated();
    }
    async persist_cloud(media) {
      const newFiles = [];
      if (await this.isAuthenticated()) {
        for (const item of media) {
          let directory = item.directory;
          if (directory == null ? void 0 : directory.endsWith("/")) {
            directory = directory.substr(0, directory.length - 1);
          }
          const path2 = `${directory && directory !== "/" ? `${directory}/${item.file.name}` : item.file.name}`;
          const res = await this.api.authProvider.fetchWithToken(
            `${this.url}/upload_url/${path2}`,
            { method: "GET" }
          );
          if (res.status === 412) {
            const { message = "Unexpected error generating upload url" } = await res.json();
            throw new Error(message);
          }
          const { signedUrl, requestId } = await res.json();
          if (!signedUrl) {
            throw new Error("Unexpected error generating upload url");
          }
          const uploadRes = await this.fetchFunction(signedUrl, {
            method: "PUT",
            body: item.file,
            headers: {
              "Content-Type": item.file.type || "application/octet-stream",
              "Content-Length": String(item.file.size)
            }
          });
          if (!uploadRes.ok) {
            const xmlRes = await uploadRes.text();
            const matches = s3ErrorRegex.exec(xmlRes);
            console.error(xmlRes);
            if (!matches) {
              throw new Error("Unexpected error uploading media asset");
            } else {
              throw new Error(`Upload error: '${matches[2]}'`);
            }
          }
          const updateStartTime = Date.now();
          while (true) {
            await new Promise((resolve) => setTimeout(resolve, 1e3));
            const { error: error2, message } = await this.api.getRequestStatus(requestId);
            if (error2 !== void 0) {
              if (error2) {
                throw new Error(message);
              } else {
                break;
              }
            }
            if (Date.now() - updateStartTime > 3e4) {
              throw new Error("Time out waiting for upload to complete");
            }
          }
          const src = `https://assets.tina.io/${this.api.clientId}/${path2}`;
          newFiles.push({
            directory: item.directory,
            filename: item.file.name,
            id: item.file.name,
            type: "file",
            thumbnails: {
              "75x75": src,
              "400x400": src,
              "1000x1000": src
            },
            src
          });
        }
      }
      return newFiles;
    }
    async persist_local(media) {
      var _a2, _b, _c, _d, _e, _f, _g, _h, _i;
      const newFiles = [];
      const hasTinaMedia = Object.keys(
        ((_c = (_b = (_a2 = this.cms.api.tina.schema.schema) == null ? void 0 : _a2.config) == null ? void 0 : _b.media) == null ? void 0 : _c.tina) || {}
      ).includes("mediaRoot") && Object.keys(
        ((_f = (_e = (_d = this.cms.api.tina.schema.schema) == null ? void 0 : _d.config) == null ? void 0 : _e.media) == null ? void 0 : _f.tina) || {}
      ).includes("publicFolder");
      let folder = hasTinaMedia ? (_i = (_h = (_g = this.cms.api.tina.schema.schema) == null ? void 0 : _g.config) == null ? void 0 : _h.media) == null ? void 0 : _i.tina.mediaRoot : "/";
      if (!folder.startsWith("/")) {
        folder = "/" + folder;
      }
      if (!folder.endsWith("/")) {
        folder = folder + "/";
      }
      for (const item of media) {
        const { file, directory } = item;
        let strippedDirectory = directory;
        if (strippedDirectory.startsWith("/")) {
          strippedDirectory = strippedDirectory.substr(1) || "";
        }
        if (strippedDirectory.endsWith("/")) {
          strippedDirectory = strippedDirectory.substr(0, strippedDirectory.length - 1) || "";
        }
        const formData = new FormData();
        formData.append("file", file);
        formData.append("directory", directory);
        formData.append("filename", file.name);
        let uploadPath = `${strippedDirectory ? `${strippedDirectory}/${file.name}` : file.name}`;
        if (uploadPath.startsWith("/")) {
          uploadPath = uploadPath.substr(1);
        }
        const filePath = `${strippedDirectory ? `${folder}${strippedDirectory}/${file.name}` : folder + file.name}`;
        const res = await this.fetchFunction(`${this.url}/upload/${uploadPath}`, {
          method: "POST",
          body: formData
        });
        if (res.status != 200) {
          const responseData = await res.json();
          throw new Error(responseData.message);
        }
        const fileRes = await res.json();
        if (fileRes == null ? void 0 : fileRes.success) {
          const parsedRes = {
            type: "file",
            id: file.name,
            filename: file.name,
            directory,
            src: filePath,
            thumbnails: {
              "75x75": filePath,
              "400x400": filePath,
              "1000x1000": filePath
            }
          };
          newFiles.push(parsedRes);
        } else {
          throw new Error("Unexpected error uploading media");
        }
      }
      return newFiles;
    }
    async persist(media) {
      this.setup();
      if (this.isLocal) {
        return this.persist_local(media);
      } else {
        return this.persist_cloud(media);
      }
    }
    genThumbnail(src, dimensions) {
      return !this.isLocal ? `${src}?fit=crop&max-w=${dimensions.w}&max-h=${dimensions.h}` : src;
    }
    async list(options) {
      this.setup();
      if (this.staticMedia) {
        const offset = options.offset || 0;
        const media = this.staticMedia[String(offset)];
        let hasMore = false;
        if (this.staticMedia[String(Number(offset) + 20)]) {
          hasMore = true;
        }
        if (options.directory) {
          let depth = 0;
          const pathToDirectory = options.directory.split("/");
          let currentFolder = media;
          let hasMore2 = false;
          while (depth < pathToDirectory.length) {
            const nextFolder = currentFolder.find(
              (item) => item.type === "dir" && item.filename === pathToDirectory[depth]
            );
            if (nextFolder) {
              const offset2 = options.offset || 0;
              currentFolder = nextFolder.children[String(offset2)];
              if (nextFolder.children[String(Number(offset2) + 20)]) {
                hasMore2 = true;
              }
            }
            depth++;
          }
          return {
            items: currentFolder,
            nextOffset: hasMore2 ? Number(offset) + 20 : null
          };
        }
        return { items: media, nextOffset: hasMore ? Number(offset) + 20 : null };
      }
      let res;
      if (!this.isLocal) {
        if (await this.isAuthenticated()) {
          res = await this.api.authProvider.fetchWithToken(
            `${this.url}/list/${options.directory || ""}?limit=${options.limit || 20}${options.offset ? `&cursor=${options.offset}` : ""}`
          );
          if (res.status == 401) {
            throw E_UNAUTHORIZED;
          }
          if (res.status == 404) {
            throw E_BAD_ROUTE;
          }
        } else {
          throw new Error("Not authenticated");
        }
      } else {
        res = await this.fetchFunction(
          `${this.url}/list/${options.directory || ""}?limit=${options.limit || 20}${options.offset ? `&cursor=${options.offset}` : ""}`
        );
        if (res.status == 404) {
          throw E_BAD_ROUTE;
        }
        if (res.status >= 500) {
          const { e: e3 } = await res.json();
          const error2 = new Error("Unexpected error");
          console.error(e3);
          throw error2;
        }
      }
      const { cursor, files, directories } = await res.json();
      const items2 = [];
      for (const dir of directories) {
        items2.push({
          type: "dir",
          id: dir,
          directory: options.directory || "",
          filename: dir
        });
      }
      for (const file of files) {
        items2.push({
          directory: options.directory || "",
          type: "file",
          id: file.filename,
          filename: file.filename,
          src: file.src,
          thumbnails: options.thumbnailSizes.reduce((acc, { w: w2, h }) => {
            acc[`${w2}x${h}`] = this.genThumbnail(file.src, { w: w2, h });
            return acc;
          }, {})
        });
      }
      return {
        items: items2,
        nextOffset: cursor || 0
      };
    }
    async delete(media) {
      const path2 = `${media.directory ? `${media.directory}/${media.filename}` : media.filename}`;
      if (!this.isLocal) {
        if (await this.isAuthenticated()) {
          const res = await this.api.authProvider.fetchWithToken(
            `${this.url}/${path2}`,
            {
              method: "DELETE"
            }
          );
          if (res.status == 200) {
            const { requestId } = await res.json();
            const deleteStartTime = Date.now();
            while (true) {
              await new Promise((resolve) => setTimeout(resolve, 1e3));
              const { error: error2, message } = await this.api.getRequestStatus(requestId);
              if (error2 !== void 0) {
                if (error2) {
                  throw new Error(message);
                } else {
                  break;
                }
              }
              if (Date.now() - deleteStartTime > 3e4) {
                throw new Error("Time out waiting for delete to complete");
              }
            }
          } else {
            throw new Error("Unexpected error deleting media asset");
          }
        } else {
          throw E_UNAUTHORIZED;
        }
      } else {
        await this.fetchFunction(`${this.url}/${path2}`, {
          method: "DELETE"
        });
      }
    }
  }
  const encodeUrlIfNeeded = (url) => {
    if (url) {
      try {
        return new URL(url).toString();
      } catch (e3) {
        return url;
      }
    } else {
      return url;
    }
  };
  let MediaManager$1 = class MediaManager {
    constructor(store, events2) {
      this.store = store;
      this.events = events2;
      this._pageSize = 36;
    }
    get isConfigured() {
      return !(this.store instanceof DummyMediaStore);
    }
    get pageSize() {
      return this._pageSize;
    }
    set pageSize(pageSize) {
      this._pageSize = pageSize;
      this.events.dispatch({
        type: "media:pageSize",
        pageSize
      });
    }
    open(options = {}) {
      this.events.dispatch({
        type: "media:open",
        ...options
      });
    }
    get accept() {
      return this.store.accept;
    }
    get maxSize() {
      return this.store.maxSize || void 0;
    }
    async persist(files) {
      try {
        this.events.dispatch({ type: "media:upload:start", uploaded: files });
        const media = await this.store.persist(files);
        this.events.dispatch({
          type: "media:upload:success",
          uploaded: files,
          media
        });
        return media;
      } catch (error2) {
        console.error(error2);
        this.events.dispatch({
          type: "media:upload:failure",
          uploaded: files,
          error: error2
        });
        throw error2;
      }
    }
    async delete(media) {
      try {
        this.events.dispatch({ type: "media:delete:start", media });
        await this.store.delete(media);
        this.events.dispatch({
          type: "media:delete:success",
          media
        });
      } catch (error2) {
        this.events.dispatch({
          type: "media:delete:failure",
          media,
          error: error2
        });
        throw error2;
      }
    }
    async list(options) {
      try {
        this.events.dispatch({ type: "media:list:start", ...options });
        const media = await this.store.list(options);
        media.items = media.items.map((item) => {
          if (item.type === "dir") {
            return item;
          }
          if (item.thumbnails) {
            for (const [size2, src] of Object.entries(item.thumbnails)) {
              item.thumbnails[size2] = encodeUrlIfNeeded(src);
            }
          }
          return {
            ...item,
            src: encodeUrlIfNeeded(item.src)
          };
        });
        this.events.dispatch({ type: "media:list:success", ...options, media });
        return media;
      } catch (error2) {
        this.events.dispatch({ type: "media:list:failure", ...options, error: error2 });
        throw error2;
      }
    }
  };
  class MediaListError extends Error {
    constructor(config) {
      super(config.message);
      this.ERR_TYPE = "MediaListError";
      this.title = config.title;
      this.docsLink = config.docsLink;
    }
  }
  const E_UNAUTHORIZED = new MediaListError({
    title: "Unauthorized",
    message: "You don't have access to this resource.",
    docsLink: "https://tina.io/docs/reference/media/overview"
  });
  const E_BAD_ROUTE = new MediaListError({
    title: "Bad Route",
    message: "The Cloudinary API route is missing or misconfigured.",
    docsLink: "https://tina.io/docs/reference/media/external/authentication/"
  });
  new MediaListError({
    title: "An Error Occurred",
    message: "Something went wrong accessing your media from TinaCloud.",
    docsLink: ""
    // TODO
  });
  class Flags {
    constructor(events2) {
      this.events = events2;
      this._flags = /* @__PURE__ */ new Map();
    }
    get(key) {
      return this._flags.get(key);
    }
    set(key, value) {
      this._flags.set(key, value);
      this.events.dispatch({ type: "flag:set", key, value });
    }
  }
  const _CMS = class _CMS2 {
    /**
     * @hidden
     */
    constructor(config = {}) {
      this._enabled = false;
      this.api = {};
      this.unsubscribeHooks = {};
      this.events = new EventBus();
      this.media = new MediaManager$1(new DummyMediaStore(), this.events);
      this.enable = () => {
        this._enabled = true;
        this.events.dispatch(_CMS2.ENABLED);
      };
      this.disable = () => {
        this._enabled = false;
        this.events.dispatch(_CMS2.DISABLED);
      };
      this.toggle = () => {
        if (this.enabled) {
          this.disable();
        } else {
          this.enable();
        }
      };
      this.plugins = new PluginTypeManager(this.events);
      this.flags = new Flags(this.events);
      if (config.media) {
        this.media.store = config.media;
      } else {
        this.media.store = new DummyMediaStore();
      }
      if (config.mediaOptions && config.mediaOptions.pageSize) {
        this.media.pageSize = config.mediaOptions.pageSize;
      }
      if (config.plugins) {
        config.plugins.forEach((plugin) => this.plugins.add(plugin));
      }
      if (config.apis) {
        Object.entries(config.apis).forEach(
          ([name, api]) => this.registerApi(name, api)
        );
      }
      if (config.enabled) {
        this.enable();
      }
    }
    /**
     * Registers a new external API with the CMS.
     *
     * #### Example
     *
     * ```ts
     * import { CoolApi } from "cool-api"
     *
     * cms.registerApi("coolApi", new CoolApi())
     * ```
     *
     * @param name The name used to lookup the external API.
     * @param api An object for interacting with an external API.
     *
     * ### Additional Resources
     *
     * * https://github.com/tinacms/rfcs/blob/master/0010-api-events.md
     */
    registerApi(name, api) {
      if (this.unsubscribeHooks[name]) {
        this.unsubscribeHooks[name]();
      }
      if (api.events instanceof EventBus) {
        const unsubscribeHost = api.events.subscribe(
          "*",
          this.events.dispatch
        );
        const unsubscribeGuest = this.events.subscribe(
          "*",
          (e3) => api.events.dispatch(e3)
        );
        this.unsubscribeHooks[name] = () => {
          unsubscribeHost();
          unsubscribeGuest();
        };
      }
      this.api[name] = api;
    }
    /**
     * When `true` the CMS is enabled and content can be edited.
     */
    get enabled() {
      return this._enabled;
    }
    /**
     * When `true` the CMS is disabled and content cannot be edited.
     */
    get disabled() {
      return !this._enabled;
    }
  };
  _CMS.ENABLED = { type: "cms:enable" };
  _CMS.DISABLED = { type: "cms:disable" };
  let CMS = _CMS;
  const MarkdownFieldPlaceholder = {
    __type: "field",
    name: "markdown",
    Component: createPlaceholder(
      "Markdown"
    )
  };
  const HtmlFieldPlaceholder = {
    __type: "field",
    name: "html",
    Component: createPlaceholder(
      "HTML"
    )
  };
  function createPlaceholder(name, _pr) {
    return (props) => {
      return /* @__PURE__ */ React.createElement(
        FieldMeta,
        {
          name: props.input.name,
          label: `${name} Field not Registered`,
          tinaForm: props.tinaForm
        },
        /* @__PURE__ */ React.createElement("p", { className: "whitespace-normal text-[15px] mt-2" }, "The ", name, " field is not registered. Some built-in field types are not bundled by default in an effort to control bundle size. Consult the Tina docs to learn how to use this field type."),
        /* @__PURE__ */ React.createElement("p", { className: "whitespace-normal text-[15px] mt-2" }, /* @__PURE__ */ React.createElement(
          "a",
          {
            className: "text-blue-500 underline",
            href: "https://tina.io/docs/editing/markdown/#registering-the-field-plugins",
            target: "_blank",
            rel: "noreferrer noopener"
          },
          "Tina Docs: Registering Field Plugins"
        ))
      );
    };
  }
  function createScreen({
    Component,
    props,
    ...options
  }) {
    return {
      __type: "screen",
      layout: "popup",
      ...options,
      Component(screenProps) {
        return /* @__PURE__ */ React.createElement(Component, { ...screenProps, ...props });
      }
    };
  }
  function useScreenPlugin(options, deps) {
    const memo4 = React.useMemo(() => {
      return createScreen(options);
    }, deps);
    usePlugins(memo4);
  }
  const ScreenPluginModal = ({
    screen,
    close: close2
  }) => {
    return /* @__PURE__ */ React__namespace.createElement(ModalLayout, { name: screen.name, close: close2, layout: screen.layout }, /* @__PURE__ */ React__namespace.createElement(screen.Component, { close: close2 }));
  };
  const ModalLayout = ({ children, name, close: close2, layout }) => {
    let Wrapper2;
    switch (layout) {
      case "popup":
        Wrapper2 = ModalPopup;
        break;
      case "fullscreen":
        Wrapper2 = ModalFullscreen;
        break;
      default:
        Wrapper2 = ModalPopup;
        break;
    }
    return /* @__PURE__ */ React__namespace.createElement(Modal, null, /* @__PURE__ */ React__namespace.createElement(Wrapper2, null, /* @__PURE__ */ React__namespace.createElement(ModalHeader, { close: close2 }, name), /* @__PURE__ */ React__namespace.createElement(
      ModalBody,
      {
        className: layout === "fullscreen" ? "flex h-full flex-col" : ""
      },
      children
    )));
  };
  function dirname(path2) {
    var _a2, _b;
    const pattern = new RegExp("(?<prevDir>.*)/");
    return (_b = (_a2 = path2.match(pattern)) == null ? void 0 : _a2.groups) == null ? void 0 : _b.prevDir;
  }
  const BreadcrumbButton = ({ className = "", ...props }) => /* @__PURE__ */ React.createElement(
    "button",
    {
      className: "capitalize transition-colors duration-150 border-0 bg-transparent hover:text-blue-500 " + className,
      ...props
    }
  );
  function Breadcrumb$2({ directory = "", setDirectory }) {
    directory = directory.replace(/^\/|\/$/g, "");
    let prevDir = dirname(directory) || "";
    if (prevDir === ".") {
      prevDir = "";
    }
    return /* @__PURE__ */ React.createElement("div", { className: "w-full flex items-center text-[16px] text-gray-300" }, directory !== "" && /* @__PURE__ */ React.createElement(
      IconButton,
      {
        variant: "ghost",
        className: "mr-2",
        onClick: () => setDirectory(prevDir)
      },
      /* @__PURE__ */ React.createElement(
        LeftArrowIcon,
        {
          className: `w-7 h-auto fill-gray-300 hover:fill-gray-900 transition duration-150 ease-out`
        }
      )
    ), /* @__PURE__ */ React.createElement(
      BreadcrumbButton,
      {
        onClick: () => setDirectory(""),
        className: directory === "" ? "text-gray-500 font-bold" : "text-gray-300 font-medium after:pl-1.5 after:content-['/']"
      },
      "Media"
    ), directory && directory.split("/").map((part, index, parts) => {
      const currentDir = parts.slice(0, index + 1).join("/");
      return /* @__PURE__ */ React.createElement(
        BreadcrumbButton,
        {
          className: "pl-1.5 " + (index + 1 === parts.length ? "text-gray-500 font-bold" : "text-gray-300 font-medium after:pl-1.5 after:content-['/']"),
          key: currentDir,
          onClick: () => {
            setDirectory(currentDir);
          }
        },
        part
      );
    }));
  }
  const CopyField = ({ label, description, value }) => {
    const [copied, setCopied] = React.useState(false);
    const [fadeOut, setFadeOut] = React.useState(false);
    return /* @__PURE__ */ React.createElement("div", { className: "w-full" }, label && /* @__PURE__ */ React.createElement("label", { className: "w-full mb-1 block flex-1  text-sm font-bold leading-5 text-gray-700" }, label), /* @__PURE__ */ React.createElement(
      "span",
      {
        onClick: () => {
          if (copied === true)
            return;
          setCopied(true);
          setTimeout(() => {
            setFadeOut(true);
          }, 2500);
          setTimeout(() => {
            setCopied(false);
            setFadeOut(false);
          }, 3e3);
          navigator.clipboard.writeText(value);
        },
        className: `shadow-inner text-base leading-5 whitespace-normal break-all px-3 py-2 text-gray-600 w-full bg-gray-50 border border-gray-200 transition-all ease-out duration-150 rounded relative overflow-hidden appearance-none flex items-center w-full cursor-pointer hover:bg-white hover:text-blue-500  ${copied ? `pointer-events-none` : ``}`
      },
      /* @__PURE__ */ React.createElement(BiCopyAlt, { className: "relative text-blue-500 shrink-0 w-5 h-auto mr-1.5 -ml-0.5 z-20" }),
      " ",
      value,
      " ",
      copied && /* @__PURE__ */ React.createElement(
        "span",
        {
          className: `${fadeOut ? `opacity-0` : `opacity-100`} text-blue-500 transition-opacity	duration-500 absolute right-0 w-full h-full px-3 py-2 bg-white bg-opacity-90 flex items-center justify-center text-center tracking-wide font-medium z-10`
        },
        /* @__PURE__ */ React.createElement("span", null, "Copied to clipboard!")
      )
    ), description && /* @__PURE__ */ React.createElement("p", { className: "mt-2 text-sm text-gray-500" }, description));
  };
  function ListMediaItem({ item, onClick, active }) {
    let FileIcon = BiFile;
    if (item.type === "dir") {
      FileIcon = BiFolder;
    } else if (isVideo(item.src)) {
      FileIcon = BiMovie;
    }
    const thumbnail = (item.thumbnails || {})["75x75"];
    return /* @__PURE__ */ React.createElement(
      "li",
      {
        className: `group relative flex shrink-0 items-center transition duration-150 ease-out cursor-pointer border-b border-gray-150 ${active ? "bg-gradient-to-r from-white to-gray-50/50 text-blue-500 hover:bg-gray-50" : "bg-white hover:bg-gray-50/50 hover:text-blue-500"}`,
        onClick: () => {
          if (!active) {
            onClick(item);
          } else {
            onClick(false);
          }
        }
      },
      item.new && /* @__PURE__ */ React.createElement("span", { className: "absolute top-1.5 left-1.5 rounded shadow bg-green-100 border border-green-200 text-[10px] tracking-wide	 font-bold text-green-600 px-1.5 py-0.5 z-10" }, "NEW"),
      /* @__PURE__ */ React.createElement("div", { className: "w-16 h-16 bg-gray-50 border-r border-gray-150 overflow-hidden flex justify-center flex-shrink-0" }, isImage(thumbnail) ? /* @__PURE__ */ React.createElement(
        "img",
        {
          className: "object-contain object-center w-full h-full origin-center transition-all duration-150 ease-out group-hover:scale-110",
          src: thumbnail,
          alt: item.filename
        }
      ) : /* @__PURE__ */ React.createElement(FileIcon, { className: "w-1/2 h-full fill-gray-300" })),
      /* @__PURE__ */ React.createElement(
        "span",
        {
          className: "text-base flex-grow w-full break-words truncate px-3 py-2"
        },
        item.filename
      )
    );
  }
  function GridMediaItem({ item, active, onClick }) {
    let FileIcon = BiFile;
    if (item.type === "dir") {
      FileIcon = BiFolder;
    } else if (isVideo(item.src)) {
      FileIcon = BiMovie;
    }
    const thumbnail = (item.thumbnails || {})["400x400"];
    return /* @__PURE__ */ React.createElement(
      "li",
      {
        className: `relative pb-[100%] h-0 block border border-gray-100 rounded overflow-hidden flex justify-center shrink-0 w-full transition duration-150 ease-out ${active ? "shadow-outline" : "shadow hover:shadow-md hover:scale-103 hover:border-gray-150"} ${item.type === "dir" ? "cursor-pointer" : ""}`
      },
      item.new && /* @__PURE__ */ React.createElement("span", { className: "absolute top-1.5 left-1.5 rounded shadow bg-green-100 border border-green-200 text-[10px] tracking-wide	 font-bold text-green-600 px-1.5 py-0.5 z-10" }, "NEW"),
      /* @__PURE__ */ React.createElement(
        "button",
        {
          className: "absolute w-full h-full flex items-center justify-center bg-white",
          onClick: () => {
            if (!active) {
              onClick(item);
            } else {
              onClick(false);
            }
          }
        },
        isImage(thumbnail) ? /* @__PURE__ */ React.createElement(
          "img",
          {
            className: "object-contain object-center w-full h-full",
            src: thumbnail,
            alt: item.filename
          }
        ) : /* @__PURE__ */ React.createElement("div", { className: "p-4 w-full flex flex-col gap-4 items-center justify-center" }, /* @__PURE__ */ React.createElement(FileIcon, { className: "w-[30%] h-auto fill-gray-300" }), /* @__PURE__ */ React.createElement("span", { className: "block text-base text-gray-600 w-full break-words truncate" }, item.filename))
      )
    );
  }
  const DeleteModal$1 = ({
    close: close2,
    deleteFunc,
    filename
  }) => {
    const [processing2, setProcessing] = React.useState(false);
    return /* @__PURE__ */ React.createElement(Modal, null, /* @__PURE__ */ React.createElement(PopupModal, null, /* @__PURE__ */ React.createElement(ModalHeader, { close: close2 }, "Delete ", filename), /* @__PURE__ */ React.createElement(ModalBody, { padded: true }, /* @__PURE__ */ React.createElement("p", null, "Are you sure you want to delete ", /* @__PURE__ */ React.createElement("strong", null, filename), "?")), /* @__PURE__ */ React.createElement(ModalActions, null, /* @__PURE__ */ React.createElement(Button$1, { style: { flexGrow: 2 }, disabled: processing2, onClick: close2 }, "Cancel"), /* @__PURE__ */ React.createElement(
      Button$1,
      {
        style: { flexGrow: 3 },
        disabled: processing2,
        variant: "danger",
        onClick: async () => {
          setProcessing(true);
          try {
            await deleteFunc();
          } catch (e3) {
            console.error(e3);
          } finally {
            close2();
          }
        }
      },
      /* @__PURE__ */ React.createElement("span", { className: "mr-1" }, "Delete"),
      processing2 && /* @__PURE__ */ React.createElement(LoadingDots, null)
    ))));
  };
  const NewFolderModal = ({ onSubmit, close: close2 }) => {
    const [folderName, setFolderName] = React.useState("");
    return /* @__PURE__ */ React.createElement(Modal, null, /* @__PURE__ */ React.createElement(PopupModal, null, /* @__PURE__ */ React.createElement(ModalHeader, { close: close2 }, "New Folder"), /* @__PURE__ */ React.createElement(ModalBody, { padded: true }, /* @__PURE__ */ React.createElement("p", { className: "text-base text-gray-700 mb-2" }, "Please provide a name for your folder."), /* @__PURE__ */ React.createElement("p", { className: "text-sm text-gray-500 mb-4 italic" }, /* @__PURE__ */ React.createElement("span", { className: "font-bold" }, "Note"), " – If you navigate away before uploading a media item, the folder will disappear."), /* @__PURE__ */ React.createElement(
      Input,
      {
        value: folderName,
        placeholder: "Folder Name",
        required: true,
        onChange: (e3) => setFolderName(e3.target.value)
      }
    )), /* @__PURE__ */ React.createElement(ModalActions, null, /* @__PURE__ */ React.createElement(Button$1, { style: { flexGrow: 2 }, onClick: close2 }, "Cancel"), /* @__PURE__ */ React.createElement(
      Button$1,
      {
        disabled: !folderName,
        style: { flexGrow: 3 },
        variant: "primary",
        onClick: () => {
          if (!folderName)
            return;
          onSubmit(folderName);
          close2();
        }
      },
      "Create New Folder"
    ))));
  };
  const { useDropzone } = dropzone__namespace;
  const join = function(...parts) {
    const [first2, last2, slash] = [0, parts.length - 1, "/"];
    const matchLeadingSlash = new RegExp("^" + slash);
    const matchTrailingSlash = new RegExp(slash + "$");
    parts = parts.map(function(part, index) {
      if (index === first2 && part === "file://")
        return part;
      if (index > first2)
        part = part.replace(matchLeadingSlash, "");
      if (index < last2)
        part = part.replace(matchTrailingSlash, "");
      return part;
    });
    return parts.join(slash);
  };
  function MediaManager() {
    const cms = useCMS();
    const [request, setRequest] = React.useState();
    React.useEffect(() => {
      return cms.events.subscribe("media:open", ({ type, ...request2 }) => {
        setRequest(request2);
      });
    }, []);
    if (!request)
      return null;
    const close2 = () => setRequest(void 0);
    return /* @__PURE__ */ React.createElement(Modal, null, /* @__PURE__ */ React.createElement(FullscreenModal, null, /* @__PURE__ */ React.createElement("div", { className: "w-full bg-gray-50 flex items-center justify-between px-5 pt-3 m-0" }, /* @__PURE__ */ React.createElement("h2", { className: "text-gray-500 font-sans font-medium text-base leading-none m-0 block truncate" }, "Media Manager"), /* @__PURE__ */ React.createElement(
      "div",
      {
        onClick: close2,
        className: "flex items-center fill-gray-400 cursor-pointer transition-colors duration-100 ease-out hover:fill-gray-700"
      },
      /* @__PURE__ */ React.createElement(CloseIcon, { className: "w-6 h-auto" })
    )), /* @__PURE__ */ React.createElement(ModalBody, { className: "flex h-full flex-col" }, /* @__PURE__ */ React.createElement(MediaPicker, { ...request, close: close2 }))));
  }
  const defaultListError = new MediaListError({
    title: "Error fetching media",
    message: "Something went wrong while requesting the resource.",
    docsLink: "https://tina.io/docs/media/#media-store"
  });
  function MediaPicker({
    allowDelete,
    onSelect,
    close: close2,
    ...props
  }) {
    var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j;
    const cms = useCMS();
    const [listState, setListState] = React.useState(() => {
      if (cms.media.isConfigured)
        return "loading";
      return "not-configured";
    });
    const [deleteModalOpen, setDeleteModalOpen] = React.useState(false);
    const [newFolderModalOpen, setNewFolderModalOpen] = React.useState(false);
    const [listError, setListError] = React.useState(defaultListError);
    const [directory, setDirectory] = React.useState(
      props.directory
    );
    const [list, setList] = React.useState({
      items: [],
      nextOffset: void 0
    });
    const resetList = () => setList({
      items: [],
      nextOffset: void 0
    });
    const [viewMode, setViewMode] = React.useState("grid");
    const [activeItem, setActiveItem] = React.useState(false);
    const closePreview = () => setActiveItem(false);
    const [refreshing, setRefreshing] = React.useState(false);
    const [loadFolders, setLoadFolders] = React.useState(true);
    const [offsetHistory, setOffsetHistory] = React.useState([]);
    const offset = offsetHistory[offsetHistory.length - 1];
    const resetOffset = () => setOffsetHistory([]);
    async function loadMedia(loadFolders2 = true) {
      setListState("loading");
      try {
        const _list = await cms.media.list({
          offset,
          limit: cms.media.pageSize,
          directory,
          thumbnailSizes: [
            { w: 75, h: 75 },
            { w: 400, h: 400 },
            { w: 1e3, h: 1e3 }
          ],
          filesOnly: !loadFolders2
        });
        setList({
          items: [...list.items, ..._list.items],
          nextOffset: _list.nextOffset
        });
        setListState("loaded");
      } catch (e3) {
        console.error(e3);
        if (e3.ERR_TYPE === "MediaListError") {
          setListError(e3);
        } else {
          setListError(defaultListError);
        }
        setListState("error");
      }
    }
    React.useEffect(() => {
      if (!refreshing)
        return;
      loadMedia();
      setRefreshing(false);
    }, [refreshing]);
    React.useEffect(() => {
      if (!cms.media.isConfigured)
        return;
      if (refreshing)
        return;
      loadMedia(loadFolders);
      if (loadFolders)
        setLoadFolders(false);
      return cms.events.subscribe(
        ["media:delete:success", "media:pageSize"],
        () => {
          setRefreshing(true);
          resetOffset();
          resetList();
        }
      );
    }, [offset, directory, cms.media.isConfigured]);
    const onClickMediaItem = (item) => {
      if (!item) {
        setActiveItem(false);
      } else if (item.type === "dir") {
        setDirectory(
          item.directory === "." || item.directory === "" ? item.filename : join(item.directory, item.filename)
        );
        setLoadFolders(true);
        resetOffset();
        resetList();
        setActiveItem(false);
      } else {
        setActiveItem(item);
      }
    };
    let deleteMediaItem;
    if (allowDelete) {
      deleteMediaItem = async (item) => {
        await cms.media.delete(item);
      };
    }
    let selectMediaItem;
    if (onSelect) {
      selectMediaItem = (item) => {
        onSelect(item);
        if (close2)
          close2();
      };
    }
    const [uploading, setUploading] = React.useState(false);
    const accept = Array.isArray(
      (_c = (_b = (_a2 = cms.api.tina.schema.schema) == null ? void 0 : _a2.config) == null ? void 0 : _b.media) == null ? void 0 : _c.accept
    ) ? (_f = (_e = (_d = cms.api.tina.schema.schema) == null ? void 0 : _d.config) == null ? void 0 : _e.media) == null ? void 0 : _f.accept.join(",") : (_i = (_h = (_g = cms.api.tina.schema.schema) == null ? void 0 : _g.config) == null ? void 0 : _h.media) == null ? void 0 : _i.accept;
    const { getRootProps, getInputProps, isDragActive } = useDropzone({
      accept: dropzoneAcceptFromString(
        accept || cms.media.accept || DEFAULT_MEDIA_UPLOAD_TYPES
      ),
      maxSize: cms.media.maxSize,
      multiple: true,
      onDrop: async (files, fileRejections) => {
        try {
          setUploading(true);
          const mediaItems = await cms.media.persist(
            files.map((file) => {
              return {
                directory: directory || "/",
                file
              };
            })
          );
          const errorCodes = {
            "file-invalid-type": "Invalid file type",
            "file-too-large": "File too large",
            "file-too-small": "File too small",
            "too-many-files": "Too many files"
          };
          const printError = (error2) => {
            const message = errorCodes[error2.code];
            if (message) {
              return message;
            }
            console.error(error2);
            return "Unknown error";
          };
          if (fileRejections.length > 0) {
            const messages = [];
            fileRejections.map((fileRejection) => {
              messages.push(
                `${fileRejection.file.name}: ${fileRejection.errors.map((error2) => printError(error2)).join(", ")}`
              );
            });
            cms.alerts.error(() => {
              return /* @__PURE__ */ React.createElement(React.Fragment, null, "Upload Failed. ", /* @__PURE__ */ React.createElement("br", null), messages.join(". "), ".");
            });
          }
          if (mediaItems.length !== 0) {
            setActiveItem(mediaItems[0]);
            setList((mediaList) => {
              return {
                items: [
                  // all the newly added items are new
                  ...mediaItems.map((x) => ({ ...x, new: true })),
                  ...mediaList.items
                ],
                nextOffset: mediaList.nextOffset
              };
            });
          }
        } catch {
        }
        setUploading(false);
      }
    });
    const { onClick, ...rootProps } = getRootProps();
    function disableScrollBody() {
      const body = document == null ? void 0 : document.body;
      body.style.overflow = "hidden";
      return () => {
        body.style.overflow = "auto";
      };
    }
    React.useEffect(disableScrollBody, []);
    const loaderRef = React.useRef(null);
    React.useEffect(() => {
      const observer = new IntersectionObserver((entries) => {
        const target = entries[0];
        if (target.isIntersecting && list.nextOffset) {
          setOffsetHistory((offsetHistory2) => [
            ...offsetHistory2,
            list.nextOffset
          ]);
        }
      });
      if (loaderRef.current) {
        observer.observe(loaderRef.current);
      }
      return () => {
        if (loaderRef.current) {
          observer.unobserve(loaderRef.current);
        }
      };
    }, [list.nextOffset, loaderRef.current]);
    if (listState === "loading" && !((_j = list == null ? void 0 : list.items) == null ? void 0 : _j.length) || uploading) {
      return /* @__PURE__ */ React.createElement(LoadingMediaList, null);
    }
    if (listState === "not-configured") {
      return /* @__PURE__ */ React.createElement(
        DocsLink,
        {
          title: "No Media Store Configured",
          message: "To use the media manager, you need to configure a Media Store.",
          docsLink: "https://tina.io/docs/reference/media/overview/"
        }
      );
    }
    if (listState === "error") {
      const { title, message, docsLink } = listError;
      return /* @__PURE__ */ React.createElement(DocsLink, { title, message, docsLink });
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, null, deleteModalOpen && /* @__PURE__ */ React.createElement(
      DeleteModal$1,
      {
        filename: activeItem ? activeItem.filename : "",
        deleteFunc: async () => {
          if (activeItem) {
            await deleteMediaItem(activeItem);
            setActiveItem(false);
          }
        },
        close: () => setDeleteModalOpen(false)
      }
    ), newFolderModalOpen && /* @__PURE__ */ React.createElement(
      NewFolderModal,
      {
        onSubmit: (name) => {
          setDirectory((oldDir) => {
            if (oldDir) {
              return join(oldDir, name);
            } else {
              return name;
            }
          });
          resetOffset();
          resetList();
        },
        close: () => setNewFolderModalOpen(false)
      }
    ), /* @__PURE__ */ React.createElement(MediaPickerWrap, null, /* @__PURE__ */ React.createElement(SyncStatusContainer, null, /* @__PURE__ */ React.createElement("div", { className: "flex flex-wrap items-center bg-gray-50 border-b border-gray-150 gap-4 py-3 px-5 shadow-sm flex-shrink-0" }, /* @__PURE__ */ React.createElement("div", { className: "flex flex-1 items-center gap-4" }, /* @__PURE__ */ React.createElement(ViewModeToggle, { viewMode, setViewMode }), /* @__PURE__ */ React.createElement(
      Breadcrumb$2,
      {
        directory,
        setDirectory: (dir) => {
          setDirectory(dir);
          setLoadFolders(true);
          resetOffset();
          resetList();
          setActiveItem(false);
        }
      }
    )), cms.media.store.isStatic ? null : /* @__PURE__ */ React.createElement("div", { className: "flex flex-wrap items-center gap-4" }, /* @__PURE__ */ React.createElement(
      Button$1,
      {
        busy: false,
        variant: "white",
        onClick: () => {
          setRefreshing(true);
          resetOffset();
          resetList();
          setActiveItem(false);
        },
        className: "whitespace-nowrap"
      },
      "Refresh",
      /* @__PURE__ */ React.createElement(IoMdRefresh, { className: "w-6 h-full ml-2 opacity-70 text-blue-500" })
    ), /* @__PURE__ */ React.createElement(
      Button$1,
      {
        busy: false,
        variant: "white",
        onClick: () => {
          setNewFolderModalOpen(true);
        },
        className: "whitespace-nowrap"
      },
      "New Folder",
      /* @__PURE__ */ React.createElement(BiFolder, { className: "w-6 h-full ml-2 opacity-70 text-blue-500" })
    ), /* @__PURE__ */ React.createElement(UploadButton, { onClick, uploading }))), /* @__PURE__ */ React.createElement("div", { className: "flex h-full overflow-hidden bg-white" }, /* @__PURE__ */ React.createElement("div", { className: "flex w-full flex-col h-full @container" }, /* @__PURE__ */ React.createElement(
      "ul",
      {
        ...rootProps,
        className: `h-full grow overflow-y-auto transition duration-150 ease-out bg-gradient-to-b from-gray-50/50 to-gray-50 ${list.items.length === 0 || viewMode === "list" && "w-full flex flex-1 flex-col justify-start -mb-px"} ${list.items.length > 0 && viewMode === "grid" && "w-full p-4 gap-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 4xl:grid-cols-6 6xl:grid-cols-9 auto-rows-auto content-start justify-start"} ${isDragActive ? `border-2 border-blue-500 rounded-lg` : ``}`
      },
      /* @__PURE__ */ React.createElement("input", { ...getInputProps() }),
      listState === "loaded" && list.items.length === 0 && /* @__PURE__ */ React.createElement(EmptyMediaList, null),
      viewMode === "list" && list.items.map((item) => /* @__PURE__ */ React.createElement(
        ListMediaItem,
        {
          key: item.id,
          item,
          onClick: onClickMediaItem,
          active: activeItem && activeItem.id === item.id
        }
      )),
      viewMode === "grid" && list.items.map((item) => /* @__PURE__ */ React.createElement(
        GridMediaItem,
        {
          key: item.id,
          item,
          onClick: onClickMediaItem,
          active: activeItem && activeItem.id === item.id
        }
      )),
      !!list.nextOffset && /* @__PURE__ */ React.createElement(LoadingMediaList, { ref: loaderRef })
    )), /* @__PURE__ */ React.createElement(
      ActiveItemPreview,
      {
        activeItem,
        close: closePreview,
        selectMediaItem,
        allowDelete: cms.media.store.isStatic ? false : allowDelete,
        deleteMediaItem: () => {
          setDeleteModalOpen(true);
        }
      }
    )))));
  }
  const ActiveItemPreview = ({
    activeItem,
    close: close2,
    selectMediaItem,
    deleteMediaItem,
    allowDelete
  }) => {
    const thumbnail = activeItem ? (activeItem.thumbnails || {})["1000x1000"] : "";
    return /* @__PURE__ */ React.createElement(
      "div",
      {
        className: `shrink-0 h-full flex flex-col items-start gap-3 overflow-y-auto bg-white border-l border-gray-100 bg-white shadow-md transition ease-out duration-150 ${activeItem ? `p-4 opacity-100 w-[35%] max-w-[560px] min-w-[240px]` : `translate-x-8 opacity-0 w-[0px]`}`
      },
      activeItem && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", { className: "flex grow-0 shrink-0 gap-2 w-full items-center justify-between" }, /* @__PURE__ */ React.createElement("h3", { className: "text-lg text-gray-600 w-full max-w-full break-words block truncate flex-1" }, activeItem.filename), /* @__PURE__ */ React.createElement(
        IconButton,
        {
          variant: "ghost",
          className: "group grow-0 shrink-0",
          onClick: close2
        },
        /* @__PURE__ */ React.createElement(
          BiX,
          {
            className: `w-7 h-auto text-gray-500 opacity-50 group-hover:opacity-100 transition duration-150 ease-out`
          }
        )
      )), isImage(thumbnail) ? /* @__PURE__ */ React.createElement("div", { className: "w-full max-h-[75%]" }, /* @__PURE__ */ React.createElement(
        "img",
        {
          className: "block border border-gray-100 rounded overflow-hidden object-center object-contain max-w-full max-h-full m-auto shadow",
          src: thumbnail,
          alt: activeItem.filename
        }
      )) : /* @__PURE__ */ React.createElement("span", { className: "p-3 border border-gray-100 rounded overflow-hidden bg-gray-50 shadow" }, /* @__PURE__ */ React.createElement(BiFile, { className: "w-14 h-auto fill-gray-300" })), /* @__PURE__ */ React.createElement("div", { className: "grow h-full w-full shrink flex flex-col gap-3 items-start justify-start" }, /* @__PURE__ */ React.createElement(CopyField, { value: absoluteImgURL(activeItem.src), label: "URL" })), /* @__PURE__ */ React.createElement("div", { className: "shrink-0 w-full flex flex-col justify-end items-start" }, /* @__PURE__ */ React.createElement("div", { className: "flex w-full gap-3" }, selectMediaItem && /* @__PURE__ */ React.createElement(
        Button$1,
        {
          size: "medium",
          variant: "primary",
          className: "grow",
          onClick: () => selectMediaItem(activeItem)
        },
        "Insert",
        /* @__PURE__ */ React.createElement(BiArrowToBottom, { className: "ml-1 -mr-0.5 w-6 h-auto text-white opacity-70" })
      ), allowDelete && /* @__PURE__ */ React.createElement(
        Button$1,
        {
          variant: "white",
          size: "medium",
          className: "grow max-w-[40%]",
          onClick: deleteMediaItem
        },
        "Delete",
        /* @__PURE__ */ React.createElement(TrashIcon, { className: "ml-1 -mr-0.5 w-6 h-auto text-red-500 opacity-70" })
      ))))
    );
  };
  const UploadButton = ({ onClick, uploading }) => {
    return /* @__PURE__ */ React.createElement(
      Button$1,
      {
        variant: "primary",
        size: "custom",
        className: "text-sm h-10 px-6",
        busy: uploading,
        onClick
      },
      uploading ? /* @__PURE__ */ React.createElement(LoadingDots, null) : /* @__PURE__ */ React.createElement(React.Fragment, null, "Upload ", /* @__PURE__ */ React.createElement(BiCloudUpload, { className: "w-6 h-full ml-2 opacity-70" }))
    );
  };
  const LoadingMediaList = React.forwardRef(
    (props, ref) => {
      const { extraText, ...rest } = props;
      return /* @__PURE__ */ React.createElement(
        "div",
        {
          ref,
          className: "w-full h-full flex flex-col items-center justify-center",
          ...rest
        },
        extraText && /* @__PURE__ */ React.createElement("p", null, extraText),
        /* @__PURE__ */ React.createElement(LoadingDots, { color: "var(--tina-color-primary)" })
      );
    }
  );
  const MediaPickerWrap = ({ children }) => {
    return /* @__PURE__ */ React.createElement("div", { className: "h-full flex-1 text-gray-700 flex flex-col relative bg-gray-50 outline-none active:outline-none focus:outline-none" }, children);
  };
  const SyncStatusContext = React.createContext(
    void 0
  );
  const SyncStatusContainer = ({ children }) => {
    var _a2, _b, _c;
    const cms = useCMS();
    const isLocal = cms.api.tina.isLocalMode;
    const tinaMedia = (_c = (_b = (_a2 = cms.api.tina.schema.schema) == null ? void 0 : _a2.config) == null ? void 0 : _b.media) == null ? void 0 : _c.tina;
    const hasTinaMedia = !!((tinaMedia == null ? void 0 : tinaMedia.mediaRoot) || (tinaMedia == null ? void 0 : tinaMedia.publicFolder));
    const doCheckSyncStatus = hasTinaMedia && !isLocal;
    const [syncStatus, setSyncStatus] = React.useState(doCheckSyncStatus ? "loading" : "synced");
    React.useEffect(() => {
      const checkSyncStatus = async () => {
        if (doCheckSyncStatus) {
          const project = await cms.api.tina.getProject();
          setSyncStatus(project.mediaBranch ? "synced" : "needs-sync");
        }
      };
      if (!cms.media.store.isStatic) {
        checkSyncStatus();
      }
    }, []);
    return syncStatus == "needs-sync" ? /* @__PURE__ */ React.createElement("div", { className: "h-full flex items-center justify-center p-6 bg-gradient-to-t from-gray-200 to-transparent" }, /* @__PURE__ */ React.createElement("div", { className: "rounded-lg border shadow-sm px-4 lg:px-6 py-3 lg:py-4 bg-gradient-to-r from-yellow-50 to-yellow-100 border-yellow-200 mx-auto mb-12" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-start sm:items-center gap-2" }, /* @__PURE__ */ React.createElement(
      BiError,
      {
        className: `w-7 h-auto flex-shrink-0 text-yellow-400 -mt-px`
      }
    ), /* @__PURE__ */ React.createElement(
      "div",
      {
        className: `flex-1 flex flex-col items-start gap-0.5 text-base text-yellow-700`
      },
      "Media needs to be turned on for this project.",
      /* @__PURE__ */ React.createElement(
        "a",
        {
          className: "transition-all duration-150 ease-out text-blue-500 hover:text-blue-400 hover:underline underline decoration-blue-200 hover:decoration-blue-400 font-medium flex items-center justify-start gap-1",
          target: "_blank",
          href: `${cms.api.tina.appDashboardLink}/media`
        },
        "Sync Your Media In TinaCloud.",
        /* @__PURE__ */ React.createElement(BiLinkExternal, { className: `w-5 h-auto flex-shrink-0` })
      )
    )))) : /* @__PURE__ */ React.createElement(SyncStatusContext.Provider, { value: { syncStatus } }, children);
  };
  const useSyncStatus$1 = () => {
    const context = React.useContext(SyncStatusContext);
    if (!context) {
      throw new Error("useSyncStatus must be used within a SyncStatusProvider");
    }
    return context;
  };
  const EmptyMediaList = () => {
    const { syncStatus } = useSyncStatus$1();
    return /* @__PURE__ */ React.createElement("div", { className: `p-12 text-xl opacity-50 text-center` }, syncStatus == "synced" ? "Drag and drop assets here" : "Loading...");
  };
  const DocsLink = ({ title, message, docsLink, ...props }) => {
    return /* @__PURE__ */ React.createElement("div", { className: "h-3/4 text-center flex flex-col justify-center", ...props }, /* @__PURE__ */ React.createElement("h2", { className: "mb-3 text-xl text-gray-600" }, title), /* @__PURE__ */ React.createElement("div", { className: "mb-3 text-base text-gray-700" }, message), /* @__PURE__ */ React.createElement(
      "a",
      {
        href: docsLink,
        target: "_blank",
        rel: "noreferrer noopener",
        className: "font-bold text-blue-500 hover:text-blue-600 hover:underline transition-all ease-out duration-150"
      },
      "Learn More"
    ));
  };
  const ViewModeToggle = ({ viewMode, setViewMode }) => {
    const toggleClasses = {
      base: "relative whitespace-nowrap flex items-center justify-center flex-1 block font-medium text-base py-1 transition-all ease-out duration-150 border",
      active: "bg-white text-blue-500 shadow-inner border-gray-50 border-t-gray-100",
      inactive: "bg-gray-50 text-gray-400 shadow border-gray-100 border-t-white"
    };
    return /* @__PURE__ */ React.createElement(
      "div",
      {
        className: `grow-0 flex justify-between rounded border border-gray-100`
      },
      /* @__PURE__ */ React.createElement(
        "button",
        {
          className: `${toggleClasses.base} px-2.5 rounded-l ${viewMode === "grid" ? toggleClasses.active : toggleClasses.inactive}`,
          onClick: () => {
            setViewMode("grid");
          }
        },
        /* @__PURE__ */ React.createElement(BiGridAlt, { className: "w-6 h-full opacity-70" })
      ),
      /* @__PURE__ */ React.createElement(
        "button",
        {
          className: `${toggleClasses.base} px-2 rounded-r ${viewMode === "list" ? toggleClasses.active : toggleClasses.inactive}`,
          onClick: () => {
            setViewMode("list");
          }
        },
        /* @__PURE__ */ React.createElement(BiListUl, { className: "w-8 h-full opacity-70" })
      )
    );
  };
  const MediaManagerScreenPlugin = createScreen({
    name: "Media Manager",
    Component: MediaPicker,
    Icon: MdOutlinePhotoLibrary,
    layout: "fullscreen",
    props: {
      allowDelete: true
    }
  });
  function UpdatePassword(props) {
    const cms = useCMS$1();
    const client = cms.api.tina;
    const [password, setPassword] = React.useState("");
    const [confirmPassword, setConfirmPassword] = React.useState("");
    const [dirty, setDirty] = React.useState(false);
    const [result, setResult] = React.useState(null);
    const [formState, setFormState] = React.useState("idle");
    const [passwordChangeRequired, setPasswordChangeRequired] = React.useState(false);
    React.useEffect(() => {
      var _a2;
      (_a2 = client == null ? void 0 : client.authProvider) == null ? void 0 : _a2.getUser().then(
        (user) => setPasswordChangeRequired((user == null ? void 0 : user.passwordChangeRequired) ?? false)
      );
    }, []);
    let err = null;
    if (dirty && password !== confirmPassword) {
      err = "Passwords do not match";
    }
    if (dirty && !password) {
      err = "Please enter a password";
    }
    const updatePassword = async () => {
      var _a2;
      setResult(null);
      setFormState("busy");
      const res = await cms.api.tina.request(
        `mutation($password: String!) { updatePassword(password: $password) }`,
        {
          variables: {
            password
          }
        }
      );
      if (!(res == null ? void 0 : res.updatePassword)) {
        setResult("Error updating password");
      } else {
        setDirty(false);
        setPassword("");
        setConfirmPassword("");
        setResult("Password updated");
        setPasswordChangeRequired(false);
        await new Promise((resolve) => setTimeout(resolve, 1e3));
        (_a2 = client == null ? void 0 : client.authProvider) == null ? void 0 : _a2.logout().then(async () => {
          if (typeof (client == null ? void 0 : client.onLogout) === "function") {
            await client.onLogout();
            await new Promise((resolve) => setTimeout(resolve, 500));
          }
          window.location.href = new URL(window.location.href).pathname;
        }).catch((e3) => console.error(e3));
      }
      setFormState("idle");
    };
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", { className: "flex justify-center items-center h-full" }, /* @__PURE__ */ React.createElement("div", { className: "flex flex-col space-y-8 p-6" }, passwordChangeRequired && /* @__PURE__ */ React.createElement("div", { className: "text-center text-red-500" }, "Your password has expired. Please update your password."), /* @__PURE__ */ React.createElement("label", { className: "block" }, /* @__PURE__ */ React.createElement("span", { className: "text-gray-700" }, "New Password"), /* @__PURE__ */ React.createElement(
      BaseTextField,
      {
        type: "password",
        name: "password",
        id: "password",
        placeholder: "Enter password",
        className: err ? "border-red-500" : "border-gray-300 focus:ring-indigo-500 focus:border-indigo-500",
        value: password,
        onKeyDown: () => {
          setDirty(true);
          setResult(null);
        },
        onChange: (e3) => setPassword(e3.target.value),
        required: true
      }
    )), /* @__PURE__ */ React.createElement("label", { className: "block" }, /* @__PURE__ */ React.createElement("span", { className: "text-gray-700" }, "Confirm New Password"), /* @__PURE__ */ React.createElement(
      BaseTextField,
      {
        type: "password",
        name: "confirmPassword",
        id: "confirmPassword",
        placeholder: "Confirm password",
        className: err ? "border-red-500" : "border-gray-300 focus:ring-indigo-500 focus:border-indigo-500",
        value: confirmPassword,
        onKeyDown: () => {
          setDirty(true);
          setResult(null);
        },
        onChange: (e3) => setConfirmPassword(e3.target.value),
        required: true
      }
    )), result && /* @__PURE__ */ React.createElement("div", { className: "text-center text-sm text-gray-500" }, result), err && /* @__PURE__ */ React.createElement("div", { className: "text-center text-sm text-red-500" }, err), /* @__PURE__ */ React.createElement(
      Button$1,
      {
        onClick: updatePassword,
        disabled: err,
        variant: "primary",
        busy: formState === "busy"
      },
      "Update"
    ))));
  }
  const PasswordScreenPlugin = createScreen({
    name: "Change Password",
    Component: UpdatePassword,
    Icon: MdVpnKey,
    layout: "fullscreen",
    navCategory: "Account"
  });
  function createCloudConfig({
    ...options
  }) {
    return {
      __type: "cloud-config",
      Icon: MdOutlineCloud,
      ...options
    };
  }
  const SidebarLoadingPlaceholder = () => /* @__PURE__ */ React__namespace.createElement(
    "div",
    {
      className: "relative flex flex-col items-center justify-center text-center p-5 pb-16 w-full h-full overflow-y-auto",
      style: {
        animationName: "fade-in",
        animationDelay: "300ms",
        animationTimingFunction: "ease-out",
        animationIterationCount: 1,
        animationFillMode: "both",
        animationDuration: "150ms"
      }
    },
    /* @__PURE__ */ React__namespace.createElement("p", { className: "block pb-5" }, "Please wait while TinaCMS", /* @__PURE__ */ React__namespace.createElement("br", null), "loads your content"),
    /* @__PURE__ */ React__namespace.createElement(LoadingDots, { color: "var(--tina-color-primary)" })
  );
  class SidebarState {
    constructor(events2, options = {}) {
      var _a2, _b;
      this.events = events2;
      this._isOpen = false;
      this.position = "displace";
      this.renderNav = true;
      this.buttons = {
        save: "Save",
        reset: "Reset"
      };
      this.position = options.position || "displace";
      this.renderNav = options.renderNav || true;
      this.loadingPlaceholder = options.placeholder || SidebarLoadingPlaceholder;
      if ((_a2 = options.buttons) == null ? void 0 : _a2.save) {
        this.buttons.save = options.buttons.save;
      }
      if ((_b = options.buttons) == null ? void 0 : _b.reset) {
        this.buttons.reset = options.buttons.reset;
      }
    }
    get isOpen() {
      return this._isOpen;
    }
    set isOpen(nextValue) {
      if (this._isOpen === nextValue) {
        return;
      }
      this._isOpen = nextValue;
      if (nextValue) {
        this.events.dispatch({ type: "sidebar:opened" });
      } else {
        this.events.dispatch({ type: "sidebar:closed" });
      }
    }
    subscribe(callback) {
      const unsub = this.events.subscribe("sidebar", callback);
      return () => unsub();
    }
  }
  function ImFilesEmpty(props) {
    return GenIcon({ "tag": "svg", "attr": { "version": "1.1", "viewBox": "0 0 16 16" }, "child": [{ "tag": "path", "attr": { "d": "M14.341 5.579c-0.347-0.473-0.831-1.027-1.362-1.558s-1.085-1.015-1.558-1.362c-0.806-0.591-1.197-0.659-1.421-0.659h-5.75c-0.689 0-1.25 0.561-1.25 1.25v11.5c0 0.689 0.561 1.25 1.25 1.25h9.5c0.689 0 1.25-0.561 1.25-1.25v-7.75c0-0.224-0.068-0.615-0.659-1.421zM12.271 4.729c0.48 0.48 0.856 0.912 1.134 1.271h-2.406v-2.405c0.359 0.278 0.792 0.654 1.271 1.134v0zM14 14.75c0 0.136-0.114 0.25-0.25 0.25h-9.5c-0.136 0-0.25-0.114-0.25-0.25v-11.5c0-0.135 0.114-0.25 0.25-0.25 0 0 5.749-0 5.75 0v3.5c0 0.276 0.224 0.5 0.5 0.5h3.5v7.75z" }, "child": [] }, { "tag": "path", "attr": { "d": "M9.421 0.659c-0.806-0.591-1.197-0.659-1.421-0.659h-5.75c-0.689 0-1.25 0.561-1.25 1.25v11.5c0 0.604 0.43 1.109 1 1.225v-12.725c0-0.135 0.115-0.25 0.25-0.25h7.607c-0.151-0.124-0.297-0.238-0.437-0.341z" }, "child": [] }] })(props);
  }
  function ImUsers(props) {
    return GenIcon({ "tag": "svg", "attr": { "version": "1.1", "viewBox": "0 0 18 16" }, "child": [{ "tag": "path", "attr": { "d": "M12 12.041v-0.825c1.102-0.621 2-2.168 2-3.716 0-2.485 0-4.5-3-4.5s-3 2.015-3 4.5c0 1.548 0.898 3.095 2 3.716v0.825c-3.392 0.277-6 1.944-6 3.959h14c0-2.015-2.608-3.682-6-3.959z" }, "child": [] }, { "tag": "path", "attr": { "d": "M5.112 12.427c0.864-0.565 1.939-0.994 3.122-1.256-0.235-0.278-0.449-0.588-0.633-0.922-0.475-0.863-0.726-1.813-0.726-2.748 0-1.344 0-2.614 0.478-3.653 0.464-1.008 1.299-1.633 2.488-1.867-0.264-1.195-0.968-1.98-2.841-1.98-3 0-3 2.015-3 4.5 0 1.548 0.898 3.095 2 3.716v0.825c-3.392 0.277-6 1.944-6 3.959h4.359c0.227-0.202 0.478-0.393 0.753-0.573z" }, "child": [] }] })(props);
  }
  function PiSidebarSimpleLight(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 256 256", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M216,42H40A14,14,0,0,0,26,56V200a14,14,0,0,0,14,14H216a14,14,0,0,0,14-14V56A14,14,0,0,0,216,42ZM38,200V56a2,2,0,0,1,2-2H82V202H40A2,2,0,0,1,38,200Zm180,0a2,2,0,0,1-2,2H94V54H216a2,2,0,0,1,2,2Z" }, "child": [] }] })(props);
  }
  const Alert$1 = ({
    children,
    alertStyle = "warning",
    className = "",
    ...props
  }) => {
    const styles = {
      warning: "ml-8 text-sm px-4 py-2 text-amber-700 bg-amber-100 rounded border border-amber-700/20"
    };
    const icon = {
      warning: /* @__PURE__ */ React__namespace.createElement(AiFillWarning, { className: "w-5 h-auto inline-block mr-1 opacity-70 text-amber-600" })
    };
    return /* @__PURE__ */ React__namespace.createElement("div", { className: cn$1(styles[alertStyle], className), ...props }, icon[alertStyle], " ", children);
  };
  const LocalWarning = () => {
    var _a2, _b;
    const cms = useCMS$1();
    const isLocalMode = (_b = (_a2 = cms.api) == null ? void 0 : _a2.tina) == null ? void 0 : _b.isLocalMode;
    if (!isLocalMode) {
      return null;
    }
    return /* @__PURE__ */ React__namespace.createElement(Alert$1, { alertStyle: "warning" }, /* @__PURE__ */ React__namespace.createElement("a", { href: "https://tina.io/docs/tina-cloud/", target: "_blank" }, "You are in local mode"));
  };
  const BillingWarning = () => {
    var _a2;
    const cms = useCMS$1();
    const api = (_a2 = cms == null ? void 0 : cms.api) == null ? void 0 : _a2.tina;
    const isCustomContentApi = (api == null ? void 0 : api.isCustomContentApi) || false;
    const [billingState, setBillingState] = React__namespace.useState(
      null
    );
    React__namespace.useEffect(() => {
      var _a3, _b;
      const fetchBillingState = async () => {
        if (typeof (api == null ? void 0 : api.getBillingState) !== "function")
          return;
        const billingRes = await (api == null ? void 0 : api.getBillingState());
        setBillingState(billingRes);
      };
      if (!((_b = (_a3 = cms.api) == null ? void 0 : _a3.tina) == null ? void 0 : _b.isLocalMode) && !isCustomContentApi)
        fetchBillingState();
    }, []);
    if (isCustomContentApi || !billingState || billingState.billingState === "current") {
      return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null);
    }
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "flex-grow-0 flex flex-wrap w-full text-xs items-center justify-between gap-1.5 py-1.5 px-3 text-red-700 bg-gradient-to-br from-white via-red-50 to-red-100 border-b border-red-200" }, /* @__PURE__ */ React__namespace.createElement("span", { className: "flex items-center gap-1 font-bold" }, /* @__PURE__ */ React__namespace.createElement(BiError, { className: "w-5 h-auto flex-shrink-0 flex-grow-0 inline-block opacity-70 text-red-600" }), /* @__PURE__ */ React__namespace.createElement("span", { className: "flex whitespace-nowrap" }, "There is an issue with your billing.")), /* @__PURE__ */ React__namespace.createElement(
      "a",
      {
        className: "text-xs text-blue-600 underline decoration-blue-200 hover:text-blue-500 hover:decoration-blue-500 transition-all ease-out duration-150 flex items-center gap-1 self-end",
        href: `https://app.tina.io/projects/${billingState.clientId}/billing`,
        target: "_blank"
      },
      "Visit Billing Page",
      /* @__PURE__ */ React__namespace.createElement(BiRightArrowAlt, { className: "w-5 h-full opacity-70" })
    ));
  };
  const FormModal = ({ plugin, close: close2 }) => {
    const cms = useCMS$1();
    const form = React.useMemo(
      () => new Form({
        id: "create-form-id",
        label: "create-form",
        fields: plugin.fields,
        actions: plugin.actions,
        buttons: plugin.buttons,
        initialValues: plugin.initialValues || {},
        reset: plugin.reset,
        onChange: plugin.onChange,
        onSubmit: async (values) => {
          await plugin.onSubmit(values, cms).then(() => {
            close2();
          });
        }
      }),
      [close2, cms, plugin]
    );
    return /* @__PURE__ */ React__namespace.createElement(Modal, { id: "content-creator-modal", onClick: (e3) => e3.stopPropagation() }, /* @__PURE__ */ React__namespace.createElement(PopupModal, null, /* @__PURE__ */ React__namespace.createElement(ModalHeader, { close: close2 }, plugin.name), /* @__PURE__ */ React__namespace.createElement(ModalBody, null, /* @__PURE__ */ React__namespace.createElement(FormBuilder, { form: { tinaForm: form } }))));
  };
  function FiInfo(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "circle", "attr": { "cx": "12", "cy": "12", "r": "10" }, "child": [] }, { "tag": "line", "attr": { "x1": "12", "y1": "16", "x2": "12", "y2": "12" }, "child": [] }, { "tag": "line", "attr": { "x1": "12", "y1": "8", "x2": "12.01", "y2": "8" }, "child": [] }] })(props);
  }
  function VscNewFile(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 16 16", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "clipRule": "evenodd", "d": "M9.5 1.1l3.4 3.5.1.4v2h-1V6H8V2H3v11h4v1H2.5l-.5-.5v-12l.5-.5h6.7l.3.1zM9 2v3h2.9L9 2zm4 14h-1v-3H9v-1h3V9h1v3h3v1h-3v3z" }, "child": [] }] })(props);
  }
  function cn(...inputs) {
    return tailwindMerge.twMerge(clsx.clsx(inputs));
  }
  var defaultOptions = {};
  function getDefaultOptions() {
    return defaultOptions;
  }
  function _typeof(o3) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o4) {
      return typeof o4;
    } : function(o4) {
      return o4 && "function" == typeof Symbol && o4.constructor === Symbol && o4 !== Symbol.prototype ? "symbol" : typeof o4;
    }, _typeof(o3);
  }
  function requiredArgs(required, args) {
    if (args.length < required) {
      throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
    }
  }
  function toDate(argument) {
    requiredArgs(1, arguments);
    var argStr = Object.prototype.toString.call(argument);
    if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
      return new Date(argument.getTime());
    } else if (typeof argument === "number" || argStr === "[object Number]") {
      return new Date(argument);
    } else {
      if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
        console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
        console.warn(new Error().stack);
      }
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  function compareAsc(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var dateLeft = toDate(dirtyDateLeft);
    var dateRight = toDate(dirtyDateRight);
    var diff2 = dateLeft.getTime() - dateRight.getTime();
    if (diff2 < 0) {
      return -1;
    } else if (diff2 > 0) {
      return 1;
    } else {
      return diff2;
    }
  }
  function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var dateLeft = toDate(dirtyDateLeft);
    var dateRight = toDate(dirtyDateRight);
    var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
    var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
    return yearDiff * 12 + monthDiff;
  }
  function endOfDay(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    date.setHours(23, 59, 59, 999);
    return date;
  }
  function endOfMonth(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var month = date.getMonth();
    date.setFullYear(date.getFullYear(), month + 1, 0);
    date.setHours(23, 59, 59, 999);
    return date;
  }
  function isLastDayOfMonth(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    return endOfDay(date).getTime() === endOfMonth(date).getTime();
  }
  function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var dateLeft = toDate(dirtyDateLeft);
    var dateRight = toDate(dirtyDateRight);
    var sign = compareAsc(dateLeft, dateRight);
    var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
    var result;
    if (difference < 1) {
      result = 0;
    } else {
      if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
        dateLeft.setDate(30);
      }
      dateLeft.setMonth(dateLeft.getMonth() - sign * difference);
      var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;
      if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {
        isLastMonthNotFull = false;
      }
      result = sign * (difference - Number(isLastMonthNotFull));
    }
    return result === 0 ? 0 : result;
  }
  function differenceInMilliseconds(dateLeft, dateRight) {
    requiredArgs(2, arguments);
    return toDate(dateLeft).getTime() - toDate(dateRight).getTime();
  }
  var roundingMap = {
    ceil: Math.ceil,
    round: Math.round,
    floor: Math.floor,
    trunc: function trunc(value) {
      return value < 0 ? Math.ceil(value) : Math.floor(value);
    }
    // Math.trunc is not supported by IE
  };
  var defaultRoundingMethod = "trunc";
  function getRoundingMethod(method) {
    return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];
  }
  function differenceInSeconds(dateLeft, dateRight, options) {
    requiredArgs(2, arguments);
    var diff2 = differenceInMilliseconds(dateLeft, dateRight) / 1e3;
    return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff2);
  }
  var formatDistanceLocale = {
    lessThanXSeconds: {
      one: "less than a second",
      other: "less than {{count}} seconds"
    },
    xSeconds: {
      one: "1 second",
      other: "{{count}} seconds"
    },
    halfAMinute: "half a minute",
    lessThanXMinutes: {
      one: "less than a minute",
      other: "less than {{count}} minutes"
    },
    xMinutes: {
      one: "1 minute",
      other: "{{count}} minutes"
    },
    aboutXHours: {
      one: "about 1 hour",
      other: "about {{count}} hours"
    },
    xHours: {
      one: "1 hour",
      other: "{{count}} hours"
    },
    xDays: {
      one: "1 day",
      other: "{{count}} days"
    },
    aboutXWeeks: {
      one: "about 1 week",
      other: "about {{count}} weeks"
    },
    xWeeks: {
      one: "1 week",
      other: "{{count}} weeks"
    },
    aboutXMonths: {
      one: "about 1 month",
      other: "about {{count}} months"
    },
    xMonths: {
      one: "1 month",
      other: "{{count}} months"
    },
    aboutXYears: {
      one: "about 1 year",
      other: "about {{count}} years"
    },
    xYears: {
      one: "1 year",
      other: "{{count}} years"
    },
    overXYears: {
      one: "over 1 year",
      other: "over {{count}} years"
    },
    almostXYears: {
      one: "almost 1 year",
      other: "almost {{count}} years"
    }
  };
  var formatDistance$1 = function formatDistance2(token, count, options) {
    var result;
    var tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") {
      result = tokenValue;
    } else if (count === 1) {
      result = tokenValue.one;
    } else {
      result = tokenValue.other.replace("{{count}}", count.toString());
    }
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        return "in " + result;
      } else {
        return result + " ago";
      }
    }
    return result;
  };
  const formatDistance$2 = formatDistance$1;
  function buildFormatLongFn(args) {
    return function() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var width = options.width ? String(options.width) : args.defaultWidth;
      var format2 = args.formats[width] || args.formats[args.defaultWidth];
      return format2;
    };
  }
  var dateFormats = {
    full: "EEEE, MMMM do, y",
    long: "MMMM do, y",
    medium: "MMM d, y",
    short: "MM/dd/yyyy"
  };
  var timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
  };
  var dateTimeFormats = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
  };
  var formatLong = {
    date: buildFormatLongFn({
      formats: dateFormats,
      defaultWidth: "full"
    }),
    time: buildFormatLongFn({
      formats: timeFormats,
      defaultWidth: "full"
    }),
    dateTime: buildFormatLongFn({
      formats: dateTimeFormats,
      defaultWidth: "full"
    })
  };
  const formatLong$1 = formatLong;
  var formatRelativeLocale = {
    lastWeek: "'last' eeee 'at' p",
    yesterday: "'yesterday at' p",
    today: "'today at' p",
    tomorrow: "'tomorrow at' p",
    nextWeek: "eeee 'at' p",
    other: "P"
  };
  var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
    return formatRelativeLocale[token];
  };
  const formatRelative$1 = formatRelative;
  function buildLocalizeFn(args) {
    return function(dirtyIndex, options) {
      var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
      var valuesArray;
      if (context === "formatting" && args.formattingValues) {
        var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
        var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
        valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
      } else {
        var _defaultWidth = args.defaultWidth;
        var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
        valuesArray = args.values[_width] || args.values[_defaultWidth];
      }
      var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
      return valuesArray[index];
    };
  }
  var eraValues = {
    narrow: ["B", "A"],
    abbreviated: ["BC", "AD"],
    wide: ["Before Christ", "Anno Domini"]
  };
  var quarterValues = {
    narrow: ["1", "2", "3", "4"],
    abbreviated: ["Q1", "Q2", "Q3", "Q4"],
    wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
  };
  var monthValues = {
    narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
    abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
  };
  var dayValues = {
    narrow: ["S", "M", "T", "W", "T", "F", "S"],
    short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
    abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
  };
  var dayPeriodValues = {
    narrow: {
      am: "a",
      pm: "p",
      midnight: "mi",
      noon: "n",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    },
    abbreviated: {
      am: "AM",
      pm: "PM",
      midnight: "midnight",
      noon: "noon",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    },
    wide: {
      am: "a.m.",
      pm: "p.m.",
      midnight: "midnight",
      noon: "noon",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    }
  };
  var formattingDayPeriodValues = {
    narrow: {
      am: "a",
      pm: "p",
      midnight: "mi",
      noon: "n",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night"
    },
    abbreviated: {
      am: "AM",
      pm: "PM",
      midnight: "midnight",
      noon: "noon",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night"
    },
    wide: {
      am: "a.m.",
      pm: "p.m.",
      midnight: "midnight",
      noon: "noon",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night"
    }
  };
  var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
    var number = Number(dirtyNumber);
    var rem100 = number % 100;
    if (rem100 > 20 || rem100 < 10) {
      switch (rem100 % 10) {
        case 1:
          return number + "st";
        case 2:
          return number + "nd";
        case 3:
          return number + "rd";
      }
    }
    return number + "th";
  };
  var localize = {
    ordinalNumber,
    era: buildLocalizeFn({
      values: eraValues,
      defaultWidth: "wide"
    }),
    quarter: buildLocalizeFn({
      values: quarterValues,
      defaultWidth: "wide",
      argumentCallback: function argumentCallback(quarter) {
        return quarter - 1;
      }
    }),
    month: buildLocalizeFn({
      values: monthValues,
      defaultWidth: "wide"
    }),
    day: buildLocalizeFn({
      values: dayValues,
      defaultWidth: "wide"
    }),
    dayPeriod: buildLocalizeFn({
      values: dayPeriodValues,
      defaultWidth: "wide",
      formattingValues: formattingDayPeriodValues,
      defaultFormattingWidth: "wide"
    })
  };
  const localize$1 = localize;
  function buildMatchFn(args) {
    return function(string2) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var width = options.width;
      var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
      var matchResult = string2.match(matchPattern);
      if (!matchResult) {
        return null;
      }
      var matchedString = matchResult[0];
      var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
      var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
        return pattern.test(matchedString);
      }) : findKey(parsePatterns, function(pattern) {
        return pattern.test(matchedString);
      });
      var value;
      value = args.valueCallback ? args.valueCallback(key) : key;
      value = options.valueCallback ? options.valueCallback(value) : value;
      var rest = string2.slice(matchedString.length);
      return {
        value,
        rest
      };
    };
  }
  function findKey(object, predicate) {
    for (var key in object) {
      if (object.hasOwnProperty(key) && predicate(object[key])) {
        return key;
      }
    }
    return void 0;
  }
  function findIndex(array, predicate) {
    for (var key = 0; key < array.length; key++) {
      if (predicate(array[key])) {
        return key;
      }
    }
    return void 0;
  }
  function buildMatchPatternFn(args) {
    return function(string2) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var matchResult = string2.match(args.matchPattern);
      if (!matchResult)
        return null;
      var matchedString = matchResult[0];
      var parseResult = string2.match(args.parsePattern);
      if (!parseResult)
        return null;
      var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
      value = options.valueCallback ? options.valueCallback(value) : value;
      var rest = string2.slice(matchedString.length);
      return {
        value,
        rest
      };
    };
  }
  var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
  var parseOrdinalNumberPattern = /\d+/i;
  var matchEraPatterns = {
    narrow: /^(b|a)/i,
    abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
    wide: /^(before christ|before common era|anno domini|common era)/i
  };
  var parseEraPatterns = {
    any: [/^b/i, /^(a|c)/i]
  };
  var matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](th|st|nd|rd)? quarter/i
  };
  var parseQuarterPatterns = {
    any: [/1/i, /2/i, /3/i, /4/i]
  };
  var matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
  };
  var parseMonthPatterns = {
    narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
    any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
  };
  var matchDayPatterns = {
    narrow: /^[smtwf]/i,
    short: /^(su|mo|tu|we|th|fr|sa)/i,
    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
  };
  var parseDayPatterns = {
    narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
    any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
  };
  var matchDayPeriodPatterns = {
    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
    any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
  };
  var parseDayPeriodPatterns = {
    any: {
      am: /^a/i,
      pm: /^p/i,
      midnight: /^mi/i,
      noon: /^no/i,
      morning: /morning/i,
      afternoon: /afternoon/i,
      evening: /evening/i,
      night: /night/i
    }
  };
  var match = {
    ordinalNumber: buildMatchPatternFn({
      matchPattern: matchOrdinalNumberPattern,
      parsePattern: parseOrdinalNumberPattern,
      valueCallback: function valueCallback(value) {
        return parseInt(value, 10);
      }
    }),
    era: buildMatchFn({
      matchPatterns: matchEraPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseEraPatterns,
      defaultParseWidth: "any"
    }),
    quarter: buildMatchFn({
      matchPatterns: matchQuarterPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseQuarterPatterns,
      defaultParseWidth: "any",
      valueCallback: function valueCallback(index) {
        return index + 1;
      }
    }),
    month: buildMatchFn({
      matchPatterns: matchMonthPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseMonthPatterns,
      defaultParseWidth: "any"
    }),
    day: buildMatchFn({
      matchPatterns: matchDayPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseDayPatterns,
      defaultParseWidth: "any"
    }),
    dayPeriod: buildMatchFn({
      matchPatterns: matchDayPeriodPatterns,
      defaultMatchWidth: "any",
      parsePatterns: parseDayPeriodPatterns,
      defaultParseWidth: "any"
    })
  };
  const match$1 = match;
  var locale = {
    code: "en-US",
    formatDistance: formatDistance$2,
    formatLong: formatLong$1,
    formatRelative: formatRelative$1,
    localize: localize$1,
    match: match$1,
    options: {
      weekStartsOn: 0,
      firstWeekContainsDate: 1
    }
  };
  const defaultLocale = locale;
  function assign(target, object) {
    if (target == null) {
      throw new TypeError("assign requires that input parameter not be null or undefined");
    }
    for (var property2 in object) {
      if (Object.prototype.hasOwnProperty.call(object, property2)) {
        target[property2] = object[property2];
      }
    }
    return target;
  }
  function cloneObject(object) {
    return assign({}, object);
  }
  function getTimezoneOffsetInMilliseconds(date) {
    var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
    utcDate.setUTCFullYear(date.getFullYear());
    return date.getTime() - utcDate.getTime();
  }
  var MINUTES_IN_DAY = 1440;
  var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
  var MINUTES_IN_MONTH = 43200;
  var MINUTES_IN_TWO_MONTHS = 86400;
  function formatDistance(dirtyDate, dirtyBaseDate, options) {
    var _ref, _options$locale;
    requiredArgs(2, arguments);
    var defaultOptions2 = getDefaultOptions();
    var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
    if (!locale2.formatDistance) {
      throw new RangeError("locale must contain formatDistance property");
    }
    var comparison = compareAsc(dirtyDate, dirtyBaseDate);
    if (isNaN(comparison)) {
      throw new RangeError("Invalid time value");
    }
    var localizeOptions = assign(cloneObject(options), {
      addSuffix: Boolean(options === null || options === void 0 ? void 0 : options.addSuffix),
      comparison
    });
    var dateLeft;
    var dateRight;
    if (comparison > 0) {
      dateLeft = toDate(dirtyBaseDate);
      dateRight = toDate(dirtyDate);
    } else {
      dateLeft = toDate(dirtyDate);
      dateRight = toDate(dirtyBaseDate);
    }
    var seconds = differenceInSeconds(dateRight, dateLeft);
    var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1e3;
    var minutes = Math.round((seconds - offsetInSeconds) / 60);
    var months;
    if (minutes < 2) {
      if (options !== null && options !== void 0 && options.includeSeconds) {
        if (seconds < 5) {
          return locale2.formatDistance("lessThanXSeconds", 5, localizeOptions);
        } else if (seconds < 10) {
          return locale2.formatDistance("lessThanXSeconds", 10, localizeOptions);
        } else if (seconds < 20) {
          return locale2.formatDistance("lessThanXSeconds", 20, localizeOptions);
        } else if (seconds < 40) {
          return locale2.formatDistance("halfAMinute", 0, localizeOptions);
        } else if (seconds < 60) {
          return locale2.formatDistance("lessThanXMinutes", 1, localizeOptions);
        } else {
          return locale2.formatDistance("xMinutes", 1, localizeOptions);
        }
      } else {
        if (minutes === 0) {
          return locale2.formatDistance("lessThanXMinutes", 1, localizeOptions);
        } else {
          return locale2.formatDistance("xMinutes", minutes, localizeOptions);
        }
      }
    } else if (minutes < 45) {
      return locale2.formatDistance("xMinutes", minutes, localizeOptions);
    } else if (minutes < 90) {
      return locale2.formatDistance("aboutXHours", 1, localizeOptions);
    } else if (minutes < MINUTES_IN_DAY) {
      var hours = Math.round(minutes / 60);
      return locale2.formatDistance("aboutXHours", hours, localizeOptions);
    } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
      return locale2.formatDistance("xDays", 1, localizeOptions);
    } else if (minutes < MINUTES_IN_MONTH) {
      var days = Math.round(minutes / MINUTES_IN_DAY);
      return locale2.formatDistance("xDays", days, localizeOptions);
    } else if (minutes < MINUTES_IN_TWO_MONTHS) {
      months = Math.round(minutes / MINUTES_IN_MONTH);
      return locale2.formatDistance("aboutXMonths", months, localizeOptions);
    }
    months = differenceInMonths(dateRight, dateLeft);
    if (months < 12) {
      var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);
      return locale2.formatDistance("xMonths", nearestMonth, localizeOptions);
    } else {
      var monthsSinceStartOfYear = months % 12;
      var years = Math.floor(months / 12);
      if (monthsSinceStartOfYear < 3) {
        return locale2.formatDistance("aboutXYears", years, localizeOptions);
      } else if (monthsSinceStartOfYear < 9) {
        return locale2.formatDistance("overXYears", years, localizeOptions);
      } else {
        return locale2.formatDistance("almostXYears", years + 1, localizeOptions);
      }
    }
  }
  function formatDistanceToNow(dirtyDate, options) {
    requiredArgs(1, arguments);
    return formatDistance(dirtyDate, Date.now(), options);
  }
  const version$1 = "2.8.1";
  const VersionInfo = () => {
    const cms = useCMS();
    const [isLoading, setIsLoading] = React.useState(true);
    const [latestVersionInfo, setLatestVersionInfo] = React.useState(null);
    React.useEffect(() => {
      const fetchVersionInfo = async () => {
        try {
          const latestVersion = await cms.api.tina.getLatestVersion();
          setLatestVersionInfo(latestVersion);
        } catch {
        }
        setIsLoading(false);
      };
      fetchVersionInfo();
    }, [cms]);
    return /* @__PURE__ */ React.createElement("span", { className: "font-sans font-light text-xs mb-3 mt-4 text-gray-500" }, "TinaCMS v", version$1 + " ", isLoading ? /* @__PURE__ */ React.createElement(lucideReact.LoaderCircle, { className: "animate-spin w-4 h-4 inline-block mb-px" }) : /* @__PURE__ */ React.createElement(LatestVersionWarning, { latestVersionInfo }));
  };
  const LatestVersionWarning = ({
    latestVersionInfo
  }) => {
    var _a2, _b, _c;
    if (!latestVersionInfo)
      return null;
    const latestVersion = (_a2 = latestVersionInfo["tinacms"]) == null ? void 0 : _a2.version;
    const relativePublishedAt = ((_b = latestVersionInfo.tinacms) == null ? void 0 : _b.publishedAt) ? formatDistanceToNow(new Date((_c = latestVersionInfo.tinacms) == null ? void 0 : _c.publishedAt), {
      addSuffix: true
    }) : "";
    if (!latestVersion) {
      return null;
    }
    if (latestVersion === version$1) {
      return /* @__PURE__ */ React.createElement(lucideReact.Check, { className: "w-4 h-4 inline-block mb-px text-green-500" });
    }
    return /* @__PURE__ */ React.createElement("span", { className: "text-yellow-700" }, /* @__PURE__ */ React.createElement(lucideReact.TriangleAlert, { className: "w-4 h-4 inline-block mb-px" }), /* @__PURE__ */ React.createElement("br", null), "v", latestVersion, " published ", relativePublishedAt);
  };
  function TbLogs(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "path", "attr": { "d": "M4 12h.01" }, "child": [] }, { "tag": "path", "attr": { "d": "M4 6h.01" }, "child": [] }, { "tag": "path", "attr": { "d": "M4 18h.01" }, "child": [] }, { "tag": "path", "attr": { "d": "M8 18h2" }, "child": [] }, { "tag": "path", "attr": { "d": "M8 12h2" }, "child": [] }, { "tag": "path", "attr": { "d": "M8 6h2" }, "child": [] }, { "tag": "path", "attr": { "d": "M14 6h6" }, "child": [] }, { "tag": "path", "attr": { "d": "M14 12h6" }, "child": [] }, { "tag": "path", "attr": { "d": "M14 18h6" }, "child": [] }] })(props);
  }
  const useGetEvents = (cms, cursor, existingEvents) => {
    const [events2, setEvents] = React.useState([]);
    const [nextCursor, setNextCursor] = React.useState(void 0);
    const [loading, setLoading] = React.useState(true);
    const [error2, setError] = React.useState(void 0);
    React__namespace.useEffect(() => {
      const fetchEvents = async () => {
        var _a2, _b, _c, _d, _e;
        let doFetchEvents = false;
        if (!((_b = (_a2 = cms.api) == null ? void 0 : _a2.tina) == null ? void 0 : _b.isCustomContentApi)) {
          doFetchEvents = await ((_e = (_d = (_c = cms.api) == null ? void 0 : _c.tina) == null ? void 0 : _d.authProvider) == null ? void 0 : _e.isAuthenticated());
        }
        if (doFetchEvents) {
          try {
            const { events: nextEvents, cursor: nextCursor2 } = await cms.api.tina.fetchEvents(15, cursor);
            setEvents([...existingEvents, ...nextEvents]);
            setNextCursor(nextCursor2);
          } catch (error22) {
            cms.alerts.error(
              `[${error22.name}] GetEvents failed: ${error22.message}`,
              30 * 1e3
              // 30 seconds
            );
            console.error(error22);
            setEvents(void 0);
            setError(error22);
          }
          setLoading(false);
        }
      };
      setLoading(true);
      fetchEvents();
    }, [cms, cursor]);
    return { events: events2, cursor: nextCursor, loading, error: error2 };
  };
  function useSyncStatus(cms) {
    var _a2, _b;
    const [syncStatus, setSyncStatus] = React.useState({ state: "loading", message: "Loading..." });
    React__namespace.useEffect(() => {
      const interval = setInterval(async () => {
        var _a3, _b2, _c, _d, _e;
        let doFetchEvents = false;
        if (!((_b2 = (_a3 = cms.api) == null ? void 0 : _a3.tina) == null ? void 0 : _b2.isCustomContentApi)) {
          doFetchEvents = await ((_e = (_d = (_c = cms.api) == null ? void 0 : _c.tina) == null ? void 0 : _d.authProvider) == null ? void 0 : _e.isAuthenticated());
        }
        if (doFetchEvents) {
          const { events: events2 } = await cms.api.tina.fetchEvents();
          if (events2.length === 0) {
            setSyncStatus({ state: "success", message: "No Events" });
          } else {
            if (events2[0].isError) {
              setSyncStatus({
                state: "error",
                message: `Sync Failure ${events2[0].message}`
              });
            } else {
              setSyncStatus({ state: "success", message: "Sync Successful" });
            }
          }
        } else {
          setSyncStatus({ state: "unauthorized", message: "Not Authenticated" });
        }
      }, 5e3);
      return () => clearInterval(interval);
    }, [(_b = (_a2 = cms.api) == null ? void 0 : _a2.tina) == null ? void 0 : _b.isCustomContentApi]);
    return syncStatus;
  }
  const EventsList = ({ cms }) => {
    const [cursor, setCursor] = React__namespace.useState(void 0);
    const [existingEvents, setExistingEvents] = React__namespace.useState([]);
    const {
      events: events2,
      cursor: nextCursor,
      loading,
      error: error2
    } = useGetEvents(cms, cursor, existingEvents);
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "flex flex-col gap-4 w-full h-full grow-0" }, events2.length > 0 && /* @__PURE__ */ React__namespace.createElement("div", { className: "shrink grow-0 overflow-scroll w-full rounded shadow ring-1 ring-black ring-opacity-5" }, /* @__PURE__ */ React__namespace.createElement("table", { className: "w-full divide-y divide-gray-100" }, events2.map((event, index) => {
      const date = new Date(event.timestamp).toDateString();
      const time2 = new Date(event.timestamp).toTimeString();
      return /* @__PURE__ */ React__namespace.createElement("tr", { className: index % 2 === 0 ? "" : "bg-gray-50" }, event.isError ? /* @__PURE__ */ React__namespace.createElement(
        "td",
        {
          key: `${event.id}_error_icon`,
          className: "py-3 pl-4 pr-0 w-0"
        },
        /* @__PURE__ */ React__namespace.createElement(BsExclamationOctagonFill, { className: "text-red-500 fill-current w-5 h-auto" })
      ) : /* @__PURE__ */ React__namespace.createElement(
        "td",
        {
          key: `${event.id}_ok_icon`,
          className: "py-3 pl-4 pr-0 w-0"
        },
        /* @__PURE__ */ React__namespace.createElement(BsCheckCircleFill, { className: "text-green-500 fill-current w-5 h-auto" })
      ), /* @__PURE__ */ React__namespace.createElement(
        "td",
        {
          key: `${event.id}_msg`,
          className: "whitespace-nowrap p-3 text-base text-gray-500"
        },
        event.message,
        event.isError && /* @__PURE__ */ React__namespace.createElement("div", { className: "w-full text-gray-300 text-xs mt-0.5" }, event.id)
      ), /* @__PURE__ */ React__namespace.createElement(
        "td",
        {
          key: `${event.id}_ts`,
          className: "whitespace-nowrap py-3 pl-3 pr-4 text-sm text-gray-500"
        },
        date,
        /* @__PURE__ */ React__namespace.createElement("span", { className: "w-full block text-gray-300 text-xs mt-0.5" }, time2)
      ));
    }).flat())), loading && /* @__PURE__ */ React__namespace.createElement("div", { className: "text-sm text-gray-400 text-center" }, "Loading..."), error2 && /* @__PURE__ */ React__namespace.createElement("div", null, "Error: ", error2.message), /* @__PURE__ */ React__namespace.createElement("div", { className: "text-center flex-1" }, /* @__PURE__ */ React__namespace.createElement(
      Button$1,
      {
        onClick: () => {
          setExistingEvents(events2);
          setCursor(nextCursor);
        }
      },
      "Load More Events"
    )));
  };
  const SyncStatusModal = ({ closeEventsModal, cms }) => /* @__PURE__ */ React__namespace.createElement(Modal, null, /* @__PURE__ */ React__namespace.createElement(FullscreenModal, null, /* @__PURE__ */ React__namespace.createElement(ModalHeader, { close: closeEventsModal }, "Event Log"), /* @__PURE__ */ React__namespace.createElement(ModalBody, { className: "flex h-full flex-col", padded: true }, /* @__PURE__ */ React__namespace.createElement(EventsList, { cms }))));
  const SyncStatusButton = ({
    cms,
    setEventsOpen,
    ...buttonProps
  }) => {
    var _a2, _b;
    const syncStatus = useSyncStatus(cms);
    if ((_b = (_a2 = cms.api) == null ? void 0 : _a2.tina) == null ? void 0 : _b.isCustomContentApi) {
      return null;
    }
    return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("button", { onClick: () => setEventsOpen(true), ...buttonProps }, syncStatus.state !== "error" ? /* @__PURE__ */ React__namespace.createElement(TbLogs, { className: "w-6 h-auto mr-2" }) : /* @__PURE__ */ React__namespace.createElement(MdSyncProblem, { className: "w-6 h-auto mr-2 text-red-400" }), " ", "Event Log"));
  };
  const Nav = ({
    isLocalMode,
    showHamburger = true,
    menuIsOpen,
    toggleMenu,
    className = "",
    children,
    showCollections,
    collectionsInfo,
    screens,
    cloudConfigs,
    contentCreators,
    sidebarWidth,
    RenderNavSite,
    RenderNavCloud,
    RenderNavCollection,
    AuthRenderNavCollection,
    ...props
  }) => {
    const cms = useCMS$1();
    const [eventsOpen, setEventsOpen] = React__namespace.useState(false);
    const { contentCollections, authCollection } = collectionsInfo.collections.reduce(
      (acc, collection) => {
        if (collection.isAuthCollection) {
          acc.authCollection = collection;
        } else {
          acc.contentCollections.push(collection);
        }
        return acc;
      },
      {
        contentCollections: []
      }
    );
    const screenCategories = screens.reduce(
      (acc, screen) => {
        const category = screen.navCategory || "Site";
        acc[category] = acc[category] || [];
        acc[category].push(screen);
        return acc;
      },
      { Site: [] }
    );
    return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        className: cn(
          "fixed pointer-events-auto p-4 hover:bg-gray-100 transition-colors duration-150 ease-in-out rounded z-10",
          menuIsOpen ? "hidden" : ""
        ),
        onClick: () => {
          toggleMenu();
        }
      },
      /* @__PURE__ */ React__namespace.createElement(BiMenu, { className: "h-6 w-auto text-gray-600" })
    ), /* @__PURE__ */ React__namespace.createElement(
      "div",
      {
        className: cn(
          `relative z-30 flex flex-col bg-white border-r border-gray-200 w-96 h-full ${className}`,
          menuIsOpen ? "" : "hidden"
        ),
        style: { maxWidth: `${sidebarWidth}px` },
        ...props
      },
      /* @__PURE__ */ React__namespace.createElement("div", { className: "flex w-full px-4 py-3 justify-between items-center gap-2 border-b border-gray-200" }, /* @__PURE__ */ React__namespace.createElement(
        "button",
        {
          className: cn(
            "pointer-events-auto p-2 hover:bg-gray-100 transition-colors duration-150 ease-in-out rounded"
          ),
          onClick: () => {
            toggleMenu();
          }
        },
        /* @__PURE__ */ React__namespace.createElement(BiMenu, { className: "h-6 w-auto text-gray-600" })
      ), /* @__PURE__ */ React__namespace.createElement("span", { className: "text-left inline-flex items-center text-xl tracking-wide text-gray-800/80 flex-1 gap-1" }, /* @__PURE__ */ React__namespace.createElement(TinaIcon, { className: "w-10 h-auto -ml-1 fill-orange-500" }), /* @__PURE__ */ React__namespace.createElement("span", null, "TinaCMS"))),
      children,
      /* @__PURE__ */ React__namespace.createElement("div", { className: "flex flex-col px-6 flex-1 overflow-auto" }, showCollections && /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("h4", { className: "flex space-x-1 justify-items-start uppercase font-sans font-bold text-sm mb-3 mt-8 text-gray-700" }, /* @__PURE__ */ React__namespace.createElement("span", null, "Collections"), isLocalMode && /* @__PURE__ */ React__namespace.createElement("span", { className: "flex items-center" }, /* @__PURE__ */ React__namespace.createElement(
        "a",
        {
          href: "https://tina.io/docs/schema/#defining-collections",
          target: "_blank"
        },
        /* @__PURE__ */ React__namespace.createElement(FiInfo, null)
      ))), /* @__PURE__ */ React__namespace.createElement(
        CollectionsList,
        {
          RenderNavCollection,
          collections: contentCollections
        }
      )), (screenCategories.Site.length > 0 || contentCreators.length) > 0 && /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("h4", { className: "uppercase font-sans font-bold text-sm mb-3 mt-8 text-gray-700" }, "Site"), /* @__PURE__ */ React__namespace.createElement("ul", { className: "flex flex-col gap-4" }, screenCategories.Site.map((view) => {
        return /* @__PURE__ */ React__namespace.createElement("li", { key: `nav-site-${view.name}` }, /* @__PURE__ */ React__namespace.createElement(RenderNavSite, { view }));
      }), contentCreators.map((plugin, idx) => {
        return /* @__PURE__ */ React__namespace.createElement(
          CreateContentNavItem,
          {
            key: `plugin-${idx}`,
            plugin
          }
        );
      }), authCollection && /* @__PURE__ */ React__namespace.createElement(
        CollectionsList,
        {
          RenderNavCollection: AuthRenderNavCollection,
          collections: [authCollection]
        }
      ))), Object.entries(screenCategories).map(([category, screens2]) => {
        if (category !== "Site") {
          return /* @__PURE__ */ React__namespace.createElement("div", { key: category }, /* @__PURE__ */ React__namespace.createElement("h4", { className: "uppercase font-sans font-bold text-sm mb-3 mt-8 text-gray-700" }, category), /* @__PURE__ */ React__namespace.createElement("ul", { className: "flex flex-col gap-4" }, screens2.map((view) => {
            return /* @__PURE__ */ React__namespace.createElement("li", { key: `nav-site-${view.name}` }, /* @__PURE__ */ React__namespace.createElement(RenderNavSite, { view }));
          })));
        }
      }), !!(cloudConfigs == null ? void 0 : cloudConfigs.length) && /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("h4", { className: "uppercase font-sans font-bold text-sm mb-3 mt-8 text-gray-700" }, "Cloud"), /* @__PURE__ */ React__namespace.createElement("ul", { className: "flex flex-col gap-4" }, cloudConfigs.map((config) => {
        return /* @__PURE__ */ React__namespace.createElement("li", { key: `nav-site-${config.name}` }, /* @__PURE__ */ React__namespace.createElement(RenderNavCloud, { config }));
      }))), /* @__PURE__ */ React__namespace.createElement("div", { className: "grow my-4 border-b border-gray-200" }), /* @__PURE__ */ React__namespace.createElement(
        SyncStatusButton,
        {
          className: "text-lg py-2 first:pt-3 last:pb-3 whitespace-nowrap flex items-center opacity-80 text-gray-600 hover:text-blue-400",
          cms,
          setEventsOpen
        }
      ), /* @__PURE__ */ React__namespace.createElement(
        Logout,
        {
          className: "text-lg py-2 first:pt-3 last:pb-3 whitespace-nowrap flex items-center opacity-80 text-gray-600 hover:text-blue-400",
          cms
        }
      ), /* @__PURE__ */ React__namespace.createElement(VersionInfo, null))
    ), eventsOpen && /* @__PURE__ */ React__namespace.createElement(
      SyncStatusModal,
      {
        cms,
        closeEventsModal: () => setEventsOpen(false)
      }
    ));
  };
  const CollectionsList = ({
    collections,
    RenderNavCollection
  }) => {
    if (collections.length === 0) {
      return /* @__PURE__ */ React__namespace.createElement("div", null, "No collections found");
    }
    return /* @__PURE__ */ React__namespace.createElement("ul", { className: "flex flex-col gap-4" }, collections.map((collection) => {
      return /* @__PURE__ */ React__namespace.createElement("li", { key: `nav-collection-${collection.name}` }, /* @__PURE__ */ React__namespace.createElement(RenderNavCollection, { collection }));
    }));
  };
  const CreateContentNavItem = ({ plugin }) => {
    const [open2, setOpen] = React__namespace.useState(false);
    return /* @__PURE__ */ React__namespace.createElement("li", { key: plugin.name }, /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        className: "text-base tracking-wide text-gray-500 hover:text-blue-600 flex items-center opacity-90 hover:opacity-100",
        onClick: () => {
          setOpen(true);
        }
      },
      /* @__PURE__ */ React__namespace.createElement(VscNewFile, { className: "mr-3 h-6 opacity-80 w-auto" }),
      " ",
      plugin.name
    ), open2 && /* @__PURE__ */ React__namespace.createElement(FormModal, { plugin, close: () => setOpen(false) }));
  };
  const Logout = ({
    cms,
    ...buttonProps
  }) => {
    const handleLogout = async () => {
      var _a2, _b, _c, _d, _e, _f, _g, _h;
      try {
        if ((_c = (_b = (_a2 = cms == null ? void 0 : cms.api) == null ? void 0 : _a2.tina) == null ? void 0 : _b.authProvider) == null ? void 0 : _c.logout) {
          await ((_d = cms.api.tina) == null ? void 0 : _d.authProvider.logout());
          if ((_f = (_e = cms == null ? void 0 : cms.api) == null ? void 0 : _e.tina) == null ? void 0 : _f.onLogout) {
            await ((_h = (_g = cms == null ? void 0 : cms.api) == null ? void 0 : _g.tina) == null ? void 0 : _h.onLogout());
            await new Promise((resolve) => setTimeout(resolve, 500));
          }
          window.location.href = new URL(window.location.href).pathname;
        }
      } catch (e3) {
        cms.alerts.error(`Error logging out: ${e3}`);
        console.error("Unexpected error calling logout");
        console.error(e3);
      }
    };
    return /* @__PURE__ */ React__namespace.createElement("button", { onClick: handleLogout, ...buttonProps }, /* @__PURE__ */ React__namespace.createElement(BiExit, { className: "w-6 h-auto mr-2" }), " Log Out");
  };
  const ResizeHandle = () => {
    const {
      resizingSidebar,
      setResizingSidebar,
      fullscreen,
      setSidebarWidth,
      displayState
    } = React__namespace.useContext(SidebarContext);
    React__namespace.useEffect(() => {
      const handleMouseUp = () => setResizingSidebar(false);
      window.addEventListener("mouseup", handleMouseUp);
      return () => {
        window.removeEventListener("mouseup", handleMouseUp);
      };
    }, []);
    React__namespace.useEffect(() => {
      const handleMouseMove = (e3) => {
        setSidebarWidth((sidebarWidth) => {
          const newWidth = sidebarWidth + e3.movementX;
          const maxWidth = window.innerWidth - 8;
          if (newWidth < minSidebarWidth) {
            return minSidebarWidth;
          } else if (newWidth > maxWidth) {
            return maxWidth;
          } else {
            return newWidth;
          }
        });
      };
      if (resizingSidebar) {
        window.addEventListener("mousemove", handleMouseMove);
        document.body.classList.add("select-none");
      }
      return () => {
        window.removeEventListener("mousemove", handleMouseMove);
        document.body.classList.remove("select-none");
      };
    }, [resizingSidebar]);
    const handleresizingSidebar = () => setResizingSidebar(true);
    if (fullscreen) {
      return null;
    }
    return /* @__PURE__ */ React__namespace.createElement(
      "div",
      {
        onMouseDown: handleresizingSidebar,
        className: `z-100 absolute top-1/2 right-px w-2 h-32 bg-white rounded-r border border-gray-150 shadow-sm hover:shadow-md origin-left transition-all duration-150 ease-out transform translate-x-full -translate-y-1/2 group hover:bg-gray-50 ${displayState !== "closed" ? `opacity-100` : `opacity-0`} ${resizingSidebar ? `scale-110` : `scale-90 hover:scale-100`}`,
        style: { cursor: "ew-resize" }
      },
      /* @__PURE__ */ React__namespace.createElement("span", { className: "absolute top-1/2 left-1/2 h-4/6 w-px bg-gray-200 transform -translate-y-1/2 -translate-x-1/2 opacity-30 transition-opacity duration-150 ease-out group-hover:opacity-100" })
    );
  };
  function Breadcrumb$1({ ...props }) {
    return /* @__PURE__ */ React__namespace.createElement("nav", { "aria-label": "breadcrumb", "data-slot": "breadcrumb", ...props });
  }
  function BreadcrumbList({ className, ...props }) {
    return /* @__PURE__ */ React__namespace.createElement(
      "ol",
      {
        "data-slot": "breadcrumb-list",
        className: cn(
          "text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words",
          className
        ),
        ...props
      }
    );
  }
  function BreadcrumbItem({ className, ...props }) {
    return /* @__PURE__ */ React__namespace.createElement(
      "li",
      {
        "data-slot": "breadcrumb-item",
        className: cn("inline-flex items-center gap-1.5", className),
        ...props
      }
    );
  }
  function BreadcrumbLink({
    asChild,
    className,
    ...props
  }) {
    const Comp = asChild ? reactSlot.Slot : "a";
    return /* @__PURE__ */ React__namespace.createElement(
      Comp,
      {
        "data-slot": "breadcrumb-link",
        className: cn("hover:text-foreground transition-colors", className),
        ...props
      }
    );
  }
  function BreadcrumbPage({ className, ...props }) {
    return /* @__PURE__ */ React__namespace.createElement(
      "span",
      {
        "data-slot": "breadcrumb-page",
        role: "link",
        "aria-disabled": "true",
        "aria-current": "page",
        className: cn("text-foreground font-normal", className),
        ...props
      }
    );
  }
  function BreadcrumbSeparator({
    children,
    className,
    ...props
  }) {
    return /* @__PURE__ */ React__namespace.createElement(
      "li",
      {
        "data-slot": "breadcrumb-separator",
        role: "presentation",
        "aria-hidden": "true",
        className: cn("[&>svg]:size-3.5", className),
        ...props
      },
      children ?? /* @__PURE__ */ React__namespace.createElement(lucideReact.ChevronRight, null)
    );
  }
  function BreadcrumbEllipsis({
    className,
    ...props
  }) {
    return /* @__PURE__ */ React__namespace.createElement(
      "span",
      {
        "data-slot": "breadcrumb-ellipsis",
        role: "presentation",
        "aria-hidden": "true",
        className: cn("flex size-9 items-center justify-center", className),
        ...props
      },
      /* @__PURE__ */ React__namespace.createElement(lucideReact.MoreHorizontal, { className: "size-4" }),
      /* @__PURE__ */ React__namespace.createElement("span", { className: "sr-only" }, "More")
    );
  }
  function DropdownMenu({
    ...props
  }) {
    return /* @__PURE__ */ React__namespace.createElement(DropdownMenuPrimitive__namespace.Root, { "data-slot": "dropdown-menu", ...props });
  }
  function DropdownMenuTrigger({
    ...props
  }) {
    return /* @__PURE__ */ React__namespace.createElement(
      DropdownMenuPrimitive__namespace.Trigger,
      {
        "data-slot": "dropdown-menu-trigger",
        ...props
      }
    );
  }
  function DropdownMenuContent({
    className,
    sideOffset = 4,
    ...props
  }) {
    return /* @__PURE__ */ React__namespace.createElement(DropdownMenuPrimitive__namespace.Portal, null, /* @__PURE__ */ React__namespace.createElement(
      DropdownMenuPrimitive__namespace.Content,
      {
        "data-slot": "dropdown-menu-content",
        sideOffset,
        className: cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-base max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        ),
        ...props
      }
    ));
  }
  function DropdownMenuItem({
    className,
    inset,
    variant = "default",
    ...props
  }) {
    return /* @__PURE__ */ React__namespace.createElement(
      DropdownMenuPrimitive__namespace.Item,
      {
        "data-slot": "dropdown-menu-item",
        "data-inset": inset,
        "data-variant": variant,
        className: cn(
          "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
          className
        ),
        ...props
      }
    );
  }
  const Item = ({
    item,
    depth,
    setActiveFormId
  }) => {
    const cms = useCMS();
    const depths = ["pl-6", "pl-10", "pl-14"];
    const form = React__namespace.useMemo(
      () => cms.state.forms.find(({ tinaForm }) => item.formId === tinaForm.id),
      [item.formId]
    );
    return /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        type: "button",
        key: item.path,
        onClick: () => setActiveFormId(item.formId),
        className: `${depths[depth]} pr-6 py-3 w-full h-full bg-transparent border-none text-lg text-gray-700 group hover:bg-gray-50 transition-all ease-out duration-150 flex items-center justify-between gap-2`
      },
      /* @__PURE__ */ React__namespace.createElement(BiEdit, { className: "opacity-70 w-5 h-auto text-blue-500 flex-none" }),
      /* @__PURE__ */ React__namespace.createElement("div", { className: "flex-1 flex flex-col gap-0.5 items-start" }, /* @__PURE__ */ React__namespace.createElement("div", { className: "group-hover:text-blue-500 font-sans text-xs font-semibold text-gray-700 whitespace-normal" }, form.tinaForm.label), /* @__PURE__ */ React__namespace.createElement("div", { className: "group-hover:text-blue-500 text-base truncate leading-tight text-gray-600" }, form.tinaForm.id))
    );
  };
  const FormListItem = ({
    item,
    depth,
    setActiveFormId
  }) => {
    var _a2;
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "divide-y divide-gray-200" }, /* @__PURE__ */ React__namespace.createElement(Item, { setActiveFormId, item, depth }), item.subItems && /* @__PURE__ */ React__namespace.createElement("ul", { className: "divide-y divide-gray-200" }, (_a2 = item.subItems) == null ? void 0 : _a2.map((subItem) => {
      if (subItem.type === "document") {
        return /* @__PURE__ */ React__namespace.createElement("li", { key: subItem.formId }, /* @__PURE__ */ React__namespace.createElement(
          Item,
          {
            setActiveFormId,
            depth: depth + 1,
            item: subItem
          }
        ));
      }
    })));
  };
  const FormLists = (props) => {
    const cms = useCMS();
    return /* @__PURE__ */ React__namespace.createElement(
      react$1.Transition,
      {
        appear: true,
        show: true,
        as: "div",
        enter: "transition-all ease-out duration-150",
        enterFrom: "opacity-0 -translate-x-1/2",
        enterTo: "opacity-100",
        leave: "transition-all ease-out duration-150",
        leaveFrom: "opacity-100",
        leaveTo: "opacity-0 -translate-x-1/2"
      },
      cms.state.formLists.map((formList, index) => /* @__PURE__ */ React__namespace.createElement("div", { key: `${formList.id}-${index}` }, /* @__PURE__ */ React__namespace.createElement(
        FormList,
        {
          isEditing: props.isEditing,
          setActiveFormId: (id2) => {
            cms.dispatch({ type: "forms:set-active-form-id", value: id2 });
          },
          formList
        }
      )))
    );
  };
  const FormList = (props) => {
    const cms = useCMS();
    const listItems = React__namespace.useMemo(() => {
      var _a2;
      const orderedListItems = [];
      const globalItems = [];
      const topItems = [];
      props.formList.items.forEach((item) => {
        if (item.type === "document") {
          const form = cms.state.forms.find(
            ({ tinaForm }) => tinaForm.id === item.formId
          );
          if (form.tinaForm.global) {
            globalItems.push(item);
          } else {
            orderedListItems.push(item);
          }
        } else {
          orderedListItems.push(item);
        }
      });
      if (((_a2 = orderedListItems[0]) == null ? void 0 : _a2.type) === "document") {
        topItems.push({ type: "list", label: "Documents" });
      }
      let extra = [];
      if (globalItems.length) {
        extra = [{ type: "list", label: "Global Documents" }, ...globalItems];
      }
      return [...topItems, ...orderedListItems, ...extra];
    }, [JSON.stringify(props.formList.items)]);
    return /* @__PURE__ */ React__namespace.createElement("ul", null, /* @__PURE__ */ React__namespace.createElement("li", { className: "divide-y divide-gray-200" }, listItems.map((item, index) => {
      if (item.type === "list") {
        return /* @__PURE__ */ React__namespace.createElement(
          "div",
          {
            key: item.label,
            className: `relative group text-left w-full bg-white shadow-sm
   border-gray-100 px-6 -mt-px pb-3 ${index > 0 ? "pt-6 bg-gradient-to-b from-gray-50 via-white to-white" : "pt-3"}`
          },
          /* @__PURE__ */ React__namespace.createElement(
            "span",
            {
              className: "text-sm tracking-wide font-bold text-gray-700 uppercase"
            },
            item.label
          )
        );
      }
      return /* @__PURE__ */ React__namespace.createElement(
        FormListItem,
        {
          setActiveFormId: (id2) => props.setActiveFormId(id2),
          key: item.formId,
          item,
          depth: 0
        }
      );
    })));
  };
  const SidebarNoFormsPlaceholder = () => /* @__PURE__ */ React__namespace.createElement(
    "div",
    {
      className: "relative flex flex-col items-center justify-center text-center p-5 pb-16 w-full h-full overflow-y-auto",
      style: {
        animationName: "fade-in",
        animationDelay: "300ms",
        animationTimingFunction: "ease-out",
        animationIterationCount: 1,
        animationFillMode: "both",
        animationDuration: "150ms"
      }
    },
    /* @__PURE__ */ React__namespace.createElement("p", { className: "block pb-5" }, "Looks like there's ", /* @__PURE__ */ React__namespace.createElement("br", null), "nothing to edit on ", /* @__PURE__ */ React__namespace.createElement("br", null), "this page."),
    /* @__PURE__ */ React__namespace.createElement("p", { className: "block pt-5" }, /* @__PURE__ */ React__namespace.createElement(
      Button$1,
      {
        href: "https://tina.io/docs/contextual-editing/overview",
        target: "_blank",
        as: "a"
      },
      /* @__PURE__ */ React__namespace.createElement(Emoji$1, { className: "mr-1.5" }, "📖"),
      " Contextual Editing Docs"
    ))
  );
  const Emoji$1 = ({ className = "", ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "span",
    {
      className: `text-[24px] leading-none inline-block ${className}`,
      ...props
    }
  );
  const minimumTimeToShowLoadingIndicator = 1e3;
  const FormsView = ({ loadingPlaceholder } = {}) => {
    const cms = useCMS$1();
    const { setFormIsPristine } = React__namespace.useContext(SidebarContext);
    const [isShowingLoading, setIsShowingLoading] = React__namespace.useState(true);
    const [initialLoadComplete, setInitialLoadComplete] = React__namespace.useState(false);
    React__namespace.useEffect(() => {
      if (cms.state.isLoadingContent) {
        setIsShowingLoading(true);
        const timer = setTimeout(() => {
          if (!cms.state.isLoadingContent) {
            setIsShowingLoading(false);
            setInitialLoadComplete(true);
          }
        }, minimumTimeToShowLoadingIndicator);
        return () => clearTimeout(timer);
      } else {
        const timer = setTimeout(() => {
          setIsShowingLoading(false);
          setInitialLoadComplete(true);
        }, minimumTimeToShowLoadingIndicator);
        return () => clearTimeout(timer);
      }
    }, [cms.state.isLoadingContent]);
    if (isShowingLoading || !initialLoadComplete) {
      const LoadingPlaceholder = loadingPlaceholder || SidebarLoadingPlaceholder;
      return /* @__PURE__ */ React__namespace.createElement(LoadingPlaceholder, null);
    }
    if (!cms.state.formLists.length) {
      return /* @__PURE__ */ React__namespace.createElement(SidebarNoFormsPlaceholder, null);
    }
    const isMultiform = cms.state.forms.length > 1;
    const activeForm = cms.state.forms.find(
      ({ tinaForm }) => tinaForm.id === cms.state.activeFormId
    );
    const isEditing = !!activeForm;
    if (isMultiform && !activeForm) {
      return /* @__PURE__ */ React__namespace.createElement(FormLists, { isEditing });
    }
    const formMetas = cms.plugins.all("form:meta");
    return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, activeForm && /* @__PURE__ */ React__namespace.createElement(FormWrapper$1, { isEditing, isMultiform }, /* @__PURE__ */ React__namespace.createElement(FormHeader, { activeForm }), formMetas == null ? void 0 : formMetas.map((meta) => /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, { key: meta.name }, /* @__PURE__ */ React__namespace.createElement(meta.Component, null))), /* @__PURE__ */ React__namespace.createElement(FormBuilder, { form: activeForm, onPristineChange: setFormIsPristine })));
  };
  const FormWrapper$1 = ({ isEditing, children }) => {
    return /* @__PURE__ */ React__namespace.createElement(
      "div",
      {
        className: "flex-1 flex flex-col flex-nowrap overflow-hidden h-full w-full relative bg-white",
        style: isEditing ? {
          transform: "none",
          animationName: "fly-in-left",
          animationDuration: "150ms",
          animationDelay: "0",
          animationIterationCount: 1,
          animationTimingFunction: "ease-out"
        } : {
          transform: "translate3d(100%, 0, 0)"
        }
      },
      children
    );
  };
  const FormHeader = ({ activeForm }) => {
    const { formIsPristine } = React__namespace.useContext(SidebarContext);
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "px-4 pt-2 pb-4 flex flex-row flex-nowrap justify-between items-center gap-2 bg-gradient-to-t from-white to-gray-50" }, /* @__PURE__ */ React__namespace.createElement(MultiformSelector, { activeForm }), /* @__PURE__ */ React__namespace.createElement(FormBreadcrumbs, { className: "w-[calc(100%-3rem)]" }), /* @__PURE__ */ React__namespace.createElement(FormStatus, { pristine: formIsPristine }));
  };
  const FormBreadcrumbs = ({
    rootBreadcrumbName,
    ...props
  }) => {
    const cms = useCMS$1();
    const breadcrumbs = cms.state.breadcrumbs;
    if (breadcrumbs.length === 0) {
      return null;
    }
    const goBack = (formId, fieldName) => {
      cms.dispatch({
        type: "forms:set-active-field-name",
        value: {
          formId,
          fieldName
        }
      });
    };
    const firstBreadcrumb = breadcrumbs[0];
    const secondLastBreadcrumb = breadcrumbs.length > 2 ? breadcrumbs[breadcrumbs.length - 2] : null;
    const lastBreadcrumb = breadcrumbs.length > 1 ? breadcrumbs[breadcrumbs.length - 1] : null;
    const dropdownBreadcrumbs = breadcrumbs.length > 3 ? breadcrumbs.slice(1, -2) : [];
    return /* @__PURE__ */ React__namespace.createElement(Breadcrumb$1, { ...props }, /* @__PURE__ */ React__namespace.createElement(BreadcrumbList, { className: "flex-nowrap text-nowrap" }, /* @__PURE__ */ React__namespace.createElement(BreadcrumbItem, { className: "shrink truncate" }, /* @__PURE__ */ React__namespace.createElement(
      BreadcrumbLink,
      {
        asChild: true,
        className: "text-gray-700 hover:text-blue-500 truncate"
      },
      /* @__PURE__ */ React__namespace.createElement(
        "button",
        {
          type: "button",
          onClick: (e3) => {
            e3.preventDefault();
            goBack(firstBreadcrumb.formId, firstBreadcrumb.formName);
          }
        },
        rootBreadcrumbName || firstBreadcrumb.label
      )
    )), dropdownBreadcrumbs.length > 0 && /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(BreadcrumbSeparator, null), /* @__PURE__ */ React__namespace.createElement(BreadcrumbItem, null, /* @__PURE__ */ React__namespace.createElement(DropdownMenu, null, /* @__PURE__ */ React__namespace.createElement(DropdownMenuTrigger, { className: "flex items-center gap-1" }, /* @__PURE__ */ React__namespace.createElement(BreadcrumbEllipsis, { className: "size-4" }), /* @__PURE__ */ React__namespace.createElement("span", { className: "sr-only" }, "Toggle menu")), /* @__PURE__ */ React__namespace.createElement(DropdownMenuContent, { align: "start" }, dropdownBreadcrumbs.map((breadcrumb) => /* @__PURE__ */ React__namespace.createElement(
      DropdownMenuItem,
      {
        key: breadcrumb.formId,
        className: "cursor-pointer text-gray-700 hover:text-blue-500",
        onClick: (e3) => {
          e3.preventDefault();
          goBack(breadcrumb.formId, breadcrumb.formName);
        }
      },
      breadcrumb.label
    )))))), secondLastBreadcrumb && /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(BreadcrumbSeparator, null), /* @__PURE__ */ React__namespace.createElement(BreadcrumbItem, { className: "shrink truncate" }, /* @__PURE__ */ React__namespace.createElement(
      BreadcrumbLink,
      {
        asChild: true,
        className: "text-gray-700 hover:text-blue-500 truncate"
      },
      /* @__PURE__ */ React__namespace.createElement(
        "button",
        {
          type: "button",
          onClick: (e3) => {
            e3.preventDefault();
            goBack(
              secondLastBreadcrumb.formId,
              secondLastBreadcrumb.formName
            );
          }
        },
        secondLastBreadcrumb.label
      )
    ))), lastBreadcrumb && /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, breadcrumbs.length > 1 && /* @__PURE__ */ React__namespace.createElement(BreadcrumbSeparator, null), /* @__PURE__ */ React__namespace.createElement(BreadcrumbItem, null, /* @__PURE__ */ React__namespace.createElement(BreadcrumbPage, { className: "text-gray-700 font-medium" }, lastBreadcrumb.label)))));
  };
  const MultiformSelector = ({
    activeForm
  }) => {
    const cms = useCMS$1();
    const isMultiform = cms.state.forms.length > 1;
    if (!isMultiform) {
      return null;
    }
    return /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        type: "button",
        className: "pointer-events-auto text-xs text-blue-400 hover:text-blue-500 hover:underline transition-all ease-out duration-150",
        onClick: () => {
          const state = activeForm.tinaForm.finalForm.getState();
          if (state.invalid === true) {
            cms.alerts.error("Cannot navigate away from an invalid form.");
          } else {
            cms.dispatch({ type: "forms:set-active-form-id", value: null });
          }
        }
      },
      /* @__PURE__ */ React__namespace.createElement(lucideReact.EllipsisVertical, { className: "h-5 w-auto opacity-70" })
    );
  };
  const SidebarContext = React__namespace.createContext(null);
  const minPreviewWidth = 440;
  const minSidebarWidth = 360;
  const LOCALSTATEKEY = "tina.sidebarState";
  const LOCALWIDTHKEY = "tina.sidebarWidth";
  const defaultSidebarWidth = 440;
  const defaultSidebarPosition = "displace";
  const defaultSidebarState = "open";
  function SidebarProvider({
    position = defaultSidebarPosition,
    resizingSidebar,
    setResizingSidebar,
    defaultWidth = defaultSidebarWidth,
    sidebar
  }) {
    var _a2, _b, _c;
    useSubscribable(sidebar);
    const cms = useCMS$1();
    if (!cms.enabled)
      return null;
    return /* @__PURE__ */ React__namespace.createElement(
      Sidebar$1,
      {
        position: ((_a2 = cms == null ? void 0 : cms.sidebar) == null ? void 0 : _a2.position) || position,
        defaultWidth: ((_b = cms == null ? void 0 : cms.sidebar) == null ? void 0 : _b.defaultWidth) || defaultWidth,
        resizingSidebar,
        setResizingSidebar,
        renderNav: (
          // @ts-ignore
          typeof ((_c = cms == null ? void 0 : cms.sidebar) == null ? void 0 : _c.renderNav) !== "undefined" ? (
            // @ts-ignore
            cms.sidebar.renderNav
          ) : true
        ),
        sidebar
      }
    );
  }
  const useFetchCollections = (cms) => {
    return { collections: cms.api.admin.fetchCollections(), loading: false };
  };
  const Sidebar$1 = ({
    sidebar,
    defaultWidth,
    // defaultState,
    position,
    renderNav,
    resizingSidebar,
    setResizingSidebar
  }) => {
    var _a2, _b, _c, _d;
    const cms = useCMS$1();
    const collectionsInfo = useFetchCollections(cms);
    const [branchingEnabled, setBranchingEnabled] = React__namespace.useState(
      () => cms.flags.get("branch-switcher")
    );
    React__namespace.useEffect(() => {
      cms.events.subscribe("flag:set", ({ key, value }) => {
        if (key === "branch-switcher") {
          setBranchingEnabled(value);
        }
      });
    }, [cms.events]);
    const screens = cms.plugins.getType("screen");
    const cloudConfigs = cms.plugins.getType("cloud-config");
    useSubscribable(sidebar);
    useSubscribable(screens);
    const allScreens = screens.all();
    const allConfigs = cloudConfigs.all();
    const [menuIsOpen, setMenuIsOpen] = React.useState(false);
    const [activeScreen, setActiveView] = React.useState(null);
    const [sidebarWidth, setSidebarWidth] = React__namespace.useState(defaultWidth);
    const [formIsPristine, setFormIsPristine] = React__namespace.useState(true);
    const activeScreens = allScreens.filter(
      (screen) => {
        var _a3, _b2;
        return screen.navCategory !== "Account" || ((_b2 = (_a3 = cms.api.tina) == null ? void 0 : _a3.authProvider) == null ? void 0 : _b2.getLoginStrategy()) === "UsernamePassword";
      }
    );
    const setDisplayState = (value) => cms.dispatch({ type: "sidebar:set-display-state", value });
    const displayState = cms.state.sidebarDisplayState;
    React__namespace.useEffect(() => {
      if (typeof window !== "undefined") {
        const localSidebarState = window.localStorage.getItem(LOCALSTATEKEY);
        const localSidebarWidth = window.localStorage.getItem(LOCALWIDTHKEY);
        if (localSidebarState !== null) {
          setDisplayState(JSON.parse(localSidebarState));
        }
        if (localSidebarWidth !== null) {
          setSidebarWidth(JSON.parse(localSidebarWidth));
        }
      }
    }, []);
    React__namespace.useEffect(() => {
      if (typeof window !== "undefined") {
        const localSidebarState = window.localStorage.getItem(LOCALSTATEKEY);
        if (localSidebarState === null) {
          setDisplayState(defaultSidebarState);
        }
      }
    }, [defaultSidebarState]);
    React__namespace.useEffect(() => {
      if (typeof window !== "undefined" && cms.enabled) {
        window.localStorage.setItem(LOCALSTATEKEY, JSON.stringify(displayState));
      }
    }, [displayState, cms]);
    React__namespace.useEffect(() => {
      if (resizingSidebar) {
        window.localStorage.setItem(LOCALWIDTHKEY, JSON.stringify(sidebarWidth));
      }
    }, [sidebarWidth, resizingSidebar]);
    const isTinaAdminEnabled = cms.flags.get("tina-admin") === false ? false : true;
    const contentCreators = isTinaAdminEnabled ? [] : cms.plugins.getType("content-creator").all();
    const toggleFullscreen = () => {
      if (displayState === "fullscreen") {
        setDisplayState("open");
      } else {
        setDisplayState("fullscreen");
      }
    };
    const toggleSidebarOpen = () => {
      cms.dispatch({ type: "toggle-edit-state" });
    };
    const toggleMenu = () => {
      setMenuIsOpen((menuIsOpen2) => !menuIsOpen2);
    };
    React__namespace.useEffect(() => {
      const updateLayout = () => {
        if (displayState === "fullscreen") {
          return;
        }
        updateBodyDisplacement({
          position,
          displayState,
          sidebarWidth,
          resizingSidebar
        });
      };
      updateLayout();
      window.addEventListener("resize", updateLayout);
      return () => {
        window.removeEventListener("resize", updateLayout);
      };
    }, [displayState, position, sidebarWidth, resizingSidebar]);
    return /* @__PURE__ */ React__namespace.createElement(
      SidebarContext.Provider,
      {
        value: {
          sidebarWidth,
          setSidebarWidth,
          displayState,
          setDisplayState,
          position,
          toggleFullscreen,
          toggleSidebarOpen,
          resizingSidebar,
          setResizingSidebar,
          menuIsOpen,
          setMenuIsOpen,
          toggleMenu,
          setActiveView,
          formIsPristine,
          setFormIsPristine
        }
      },
      /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(SidebarWrapper, null, /* @__PURE__ */ React__namespace.createElement(EditButton, null), /* @__PURE__ */ React__namespace.createElement(SidebarBody, null, /* @__PURE__ */ React__namespace.createElement(
        SidebarHeader,
        {
          isLocalMode: (_b = (_a2 = cms.api) == null ? void 0 : _a2.tina) == null ? void 0 : _b.isLocalMode,
          branchingEnabled
        }
      ), /* @__PURE__ */ React__namespace.createElement(FormsView, { loadingPlaceholder: sidebar.loadingPlaceholder }), activeScreen && /* @__PURE__ */ React__namespace.createElement(
        ScreenPluginModal,
        {
          screen: activeScreen,
          close: () => setActiveView(null)
        }
      )), /* @__PURE__ */ React__namespace.createElement(ResizeHandle, null)), /* @__PURE__ */ React__namespace.createElement(react$1.Transition, { show: menuIsOpen, as: "div" }, /* @__PURE__ */ React__namespace.createElement(
        react$1.TransitionChild,
        {
          enter: "transform transition-all ease-out duration-300",
          enterFrom: "opacity-0 -translate-x-full",
          enterTo: "opacity-100 translate-x-0",
          leave: "transform transition-all ease-in duration-200",
          leaveFrom: "opacity-100 translate-x-0",
          leaveTo: "opacity-0 -translate-x-full"
        },
        /* @__PURE__ */ React__namespace.createElement("div", { className: "fixed left-0 top-0 z-overlay h-full transform" }, /* @__PURE__ */ React__namespace.createElement(
          Nav,
          {
            isLocalMode: (_d = (_c = cms.api) == null ? void 0 : _c.tina) == null ? void 0 : _d.isLocalMode,
            menuIsOpen: true,
            toggleMenu,
            showCollections: isTinaAdminEnabled,
            collectionsInfo,
            screens: activeScreens,
            cloudConfigs: allConfigs,
            contentCreators,
            sidebarWidth,
            RenderNavSite: ({ view }) => /* @__PURE__ */ React__namespace.createElement(
              SidebarSiteLink,
              {
                view,
                onClick: () => {
                  setActiveView(view);
                  setMenuIsOpen(false);
                }
              }
            ),
            RenderNavCloud: ({ config }) => /* @__PURE__ */ React__namespace.createElement(SidebarCloudLink$1, { config }),
            RenderNavCollection: ({ collection }) => /* @__PURE__ */ React__namespace.createElement(
              SidebarCollectionLink,
              {
                onClick: () => {
                  setMenuIsOpen(false);
                },
                collection
              }
            ),
            AuthRenderNavCollection: ({ collection }) => /* @__PURE__ */ React__namespace.createElement(
              SidebarCollectionLink,
              {
                onClick: () => {
                  setMenuIsOpen(false);
                },
                collection,
                Icon: ImUsers
              }
            )
          }
        ))
      ), /* @__PURE__ */ React__namespace.createElement(
        react$1.TransitionChild,
        {
          enter: "ease-out duration-300",
          enterFrom: "opacity-0",
          enterTo: "opacity-80",
          entered: "opacity-80",
          leave: "ease-in duration-200",
          leaveFrom: "opacity-80",
          leaveTo: "opacity-0"
        },
        /* @__PURE__ */ React__namespace.createElement(
          "div",
          {
            onClick: () => {
              setMenuIsOpen(false);
            },
            className: "fixed z-menu inset-0 bg-gradient-to-br from-gray-800 via-gray-900 to-black"
          }
        )
      )))
    );
  };
  const updateBodyDisplacement = ({
    position = "overlay",
    displayState,
    sidebarWidth,
    resizingSidebar
  }) => {
    const body = document.getElementsByTagName("body")[0];
    const windowWidth = window.innerWidth;
    if (position === "displace") {
      body.style.transition = resizingSidebar ? "" : displayState === "fullscreen" ? "padding 0ms 150ms" : displayState === "closed" ? "padding 0ms 0ms" : "padding 0ms 300ms";
      if (displayState === "open") {
        const bodyDisplacement = Math.min(
          sidebarWidth,
          windowWidth - minPreviewWidth
        );
        body.style.paddingLeft = `${bodyDisplacement}px`;
      } else {
        body.style.paddingLeft = "0";
      }
    } else {
      body.style.transition = "";
      body.style.paddingLeft = "0";
    }
  };
  const SidebarHeader = ({ branchingEnabled, isLocalMode }) => {
    const { toggleSidebarOpen, toggleMenu } = React__namespace.useContext(SidebarContext);
    return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("div", { className: "p-2 flex-grow-0 w-full" }, !isLocalMode && /* @__PURE__ */ React__namespace.createElement(BillingWarning, null), /* @__PURE__ */ React__namespace.createElement("div", { className: "w-full flex justify-between items-center" }, /* @__PURE__ */ React__namespace.createElement("div", { className: "flex" }, /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        className: "p-2 hover:bg-gray-100 transition-colors duration-150 ease-in-out rounded",
        onClick: toggleMenu
      },
      /* @__PURE__ */ React__namespace.createElement(BiMenu, { className: "h-6 w-auto text-gray-600" })
    ), /* @__PURE__ */ React__namespace.createElement(BranchButton, null), /* @__PURE__ */ React__namespace.createElement("div", { className: "px-4" }, /* @__PURE__ */ React__namespace.createElement(LocalWarning, null))), /* @__PURE__ */ React__namespace.createElement("div", { className: "flex" }, /* @__PURE__ */ React__namespace.createElement(BranchPreviewButton, null), /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        className: "p-2 hover:bg-gray-100 transition-colors duration-150 ease-in-out rounded",
        onClick: toggleSidebarOpen
      },
      /* @__PURE__ */ React__namespace.createElement(PiSidebarSimpleLight, { className: "h-6 w-auto text-gray-600" })
    )))));
  };
  const SidebarSiteLink = ({
    view,
    onClick
  }) => {
    return /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        className: "text-base tracking-wide text-gray-500 hover:text-blue-600 flex items-center opacity-90 hover:opacity-100",
        value: view.name,
        onClick
      },
      /* @__PURE__ */ React__namespace.createElement(view.Icon, { className: "mr-2 h-6 opacity-80 w-auto" }),
      " ",
      view.name
    );
  };
  const SidebarCloudLink$1 = ({ config }) => {
    if (config.text) {
      return /* @__PURE__ */ React__namespace.createElement("span", { className: "text-base tracking-wide text-gray-500 flex items-center opacity-90" }, config.text, " ", /* @__PURE__ */ React__namespace.createElement(
        "a",
        {
          target: "_blank",
          className: "ml-1 text-blue-600 hover:opacity-60",
          href: config.link.href
        },
        config.link.text
      ));
    }
    return /* @__PURE__ */ React__namespace.createElement("span", { className: "text-base tracking-wide text-gray-500 hover:text-blue-600 flex items-center opacity-90 hover:opacity-100" }, /* @__PURE__ */ React__namespace.createElement(config.Icon, { className: "mr-2 h-6 opacity-80 w-auto" }), /* @__PURE__ */ React__namespace.createElement("a", { target: "_blank", href: config.link.href }, config.link.text));
  };
  const SidebarCollectionLink = ({
    Icon = ImFilesEmpty,
    collection,
    onClick
  }) => {
    const cms = useCMS$1();
    const tinaPreview = cms.flags.get("tina-preview") || false;
    return /* @__PURE__ */ React__namespace.createElement(
      "a",
      {
        onClick,
        href: `${tinaPreview ? `/${tinaPreview}/index.html#` : "/admin#"}/collections/${collection.name}/~`,
        className: "text-base tracking-wide text-gray-500 hover:text-blue-600 flex items-center opacity-90 hover:opacity-100"
      },
      /* @__PURE__ */ React__namespace.createElement(Icon, { className: "mr-2 h-6 opacity-80 w-auto" }),
      " ",
      collection.label ? collection.label : collection.name
    );
  };
  const EditButton = ({}) => {
    const { displayState, toggleSidebarOpen } = React__namespace.useContext(SidebarContext);
    return /* @__PURE__ */ React__namespace.createElement(
      Button$1,
      {
        rounded: "right",
        variant: "secondary",
        size: "custom",
        onClick: toggleSidebarOpen,
        className: `z-chrome absolute top-6 right-0 translate-x-full text-sm h-10 px-3 transition-all duration-300 ${displayState !== "closed" ? "opacity-0 ease-in pointer-events-none" : "ease-out pointer-events-auto"}`,
        "aria-label": "opens cms sidebar"
      },
      /* @__PURE__ */ React__namespace.createElement(PiSidebarSimpleLight, { className: "h-6 w-auto" })
    );
  };
  const SidebarWrapper = ({ children }) => {
    const { displayState, sidebarWidth, resizingSidebar } = React__namespace.useContext(SidebarContext);
    return /* @__PURE__ */ React__namespace.createElement(
      "div",
      {
        className: `fixed top-0 left-0 h-dvh z-base ${displayState === "closed" ? "pointer-events-none" : ""}`
      },
      /* @__PURE__ */ React__namespace.createElement(
        "div",
        {
          className: `relative h-dvh transform flex ${displayState !== "closed" ? "" : "-translate-x-full"} ${resizingSidebar ? "transition-none" : displayState === "closed" ? "transition-all duration-300 ease-in" : displayState === "fullscreen" ? "transition-all duration-150 ease-out" : "transition-all duration-300 ease-out"}`,
          style: {
            width: displayState === "fullscreen" ? "100vw" : `${sidebarWidth}px`,
            maxWidth: displayState === "fullscreen" ? "100vw" : "calc(100vw - 8px)",
            minWidth: "360px"
          }
        },
        children
      )
    );
  };
  const SidebarBody = ({ children }) => {
    return /* @__PURE__ */ React__namespace.createElement(
      "div",
      {
        className: "relative left-0 w-full h-full flex flex-col items-stretch bg-gray-50 border-r border-gray-200 overflow-hidden"
      },
      children
    );
  };
  const DEFAULT_FIELDS = [
    TextFieldPlugin,
    TextareaFieldPlugin,
    ImageFieldPlugin,
    ColorFieldPlugin,
    NumberFieldPlugin,
    ToggleFieldPlugin,
    SelectFieldPlugin,
    RadioGroupFieldPlugin,
    GroupFieldPlugin,
    GroupListFieldPlugin,
    ListFieldPlugin,
    BlocksFieldPlugin,
    TagsFieldPlugin,
    DateFieldPlugin,
    MarkdownFieldPlaceholder,
    HtmlFieldPlaceholder,
    CheckboxGroupFieldPlugin,
    ReferenceFieldPlugin,
    ButtonToggleFieldPlugin,
    HiddenFieldPlugin,
    PasswordFieldPlugin
  ];
  class TinaCMS extends CMS {
    constructor({
      sidebar,
      alerts = {},
      isLocalClient,
      isSelfHosted,
      clientId,
      ...config
    } = {}) {
      super(config);
      this.api = {};
      this.alerts.setMap({
        "media:upload:failure": (event) => {
          return {
            error: event.error,
            level: "error",
            message: `Failed to upload file(s) ${event == null ? void 0 : event.uploaded.map((x) => x.file.name).join(", ")}. 

 ${event == null ? void 0 : event.error.toString()}`
          };
        },
        "media:delete:failure": () => ({
          level: "error",
          message: "Failed to delete file."
        }),
        ...alerts
      });
      if (sidebar) {
        const sidebarConfig = typeof sidebar === "object" ? sidebar : void 0;
        this.sidebar = new SidebarState(this.events, sidebarConfig);
      }
      DEFAULT_FIELDS.forEach((field) => {
        if (!this.fields.find(field.name)) {
          this.fields.add(field);
        }
      });
      this.plugins.add(MediaManagerScreenPlugin);
      this.plugins.add(PasswordScreenPlugin);
      if (isLocalClient !== true) {
        if (clientId) {
          this.plugins.add(
            createCloudConfig({
              name: "Project Config",
              link: {
                text: "Project Config",
                href: `https://app.tina.io/projects/${clientId}/overview`
              }
            })
          );
          this.plugins.add(
            createCloudConfig({
              name: "User Management",
              link: {
                text: "User Management",
                href: `https://app.tina.io/projects/${clientId}/collaborators`
              },
              Icon: MdOutlinePerson
            })
          );
          this.plugins.add(
            createCloudConfig({
              name: "Support",
              link: {
                text: "Support",
                href: "https://tina.io/docs/support"
              },
              Icon: MdOutlineHelpOutline
            })
          );
        } else if (!isSelfHosted) {
          this.plugins.add(
            createCloudConfig({
              name: "Setup Cloud",
              text: "No project configured, set one up ",
              link: {
                text: "here",
                href: "https://app.tina.io"
              }
            })
          );
        }
      }
    }
    get alerts() {
      if (!this._alerts) {
        this._alerts = new Alerts$1(this.events);
      }
      return this._alerts;
    }
    registerApi(name, api) {
      if (api.alerts) {
        this.alerts.setMap(api.alerts);
      }
      super.registerApi(name, api);
    }
    get forms() {
      return this.plugins.findOrCreateMap("form");
    }
    get fields() {
      return this.plugins.findOrCreateMap("field");
    }
    get screens() {
      return this.plugins.findOrCreateMap("screen");
    }
    removeAllForms() {
      this.forms.all().forEach((form) => {
        this.forms.remove(form);
      });
    }
    /**
     * When a form is associated with any queries
     * it's considered orphaned.
     */
    removeOrphanedForms() {
      const orphanedForms = this.forms.all().filter((form) => form.queries.length === 0);
      orphanedForms.forEach((form) => {
        this.forms.remove(form);
      });
    }
  }
  const initialState = (cms) => {
    var _a2;
    return {
      breadcrumbs: [],
      activeFormId: null,
      forms: [],
      formLists: [],
      editingMode: "basic",
      isLoadingContent: false,
      quickEditSupported: false,
      sidebarDisplayState: ((_a2 = cms == null ? void 0 : cms.sidebar) == null ? void 0 : _a2.defaultState) || "open"
    };
  };
  function tinaReducer(state, action) {
    switch (action.type) {
      case "set-quick-editing-supported":
        return {
          ...state,
          quickEditSupported: action.value
        };
      case "set-edit-mode":
        return { ...state, editingMode: action.value };
      case "forms:add":
        if (state.forms.find((f2) => f2.tinaForm.id === action.value.id)) {
          return state;
        }
        return { ...state, forms: [...state.forms, { tinaForm: action.value }] };
      case "forms:remove":
        return {
          ...state,
          forms: state.forms.filter((form) => form.tinaForm.id !== action.value)
        };
      case "form-lists:clear": {
        return {
          ...state,
          quickEditSupported: false,
          breadcrumbs: [],
          activeFormId: null,
          formLists: [],
          forms: []
        };
      }
      case "form-lists:add": {
        let formListItemExists = false;
        const nextFormLists = state.formLists.map((formList) => {
          if (formList.id === action.value.id) {
            formListItemExists = true;
            return action.value;
          }
          return formList;
        });
        if (formListItemExists) {
          return state;
        }
        if (!formListItemExists) {
          nextFormLists.push(action.value);
        }
        let activeFormId = state.activeFormId;
        if (!activeFormId && state.formLists.length === 0) {
          action.value.items.forEach((item) => {
            if (!activeFormId) {
              if (item.type === "document") {
                const form = state.forms.find(
                  ({ tinaForm }) => item.formId === tinaForm.id
                );
                if (!form.tinaForm.global) {
                  activeFormId = item.formId;
                }
              }
            }
          });
        }
        const breadcrumbs2 = calculateBreadcrumbs(state.forms, activeFormId, "");
        return {
          ...state,
          activeFormId,
          breadcrumbs: breadcrumbs2,
          formLists: nextFormLists,
          isLoadingContent: false
        };
      }
      case "form-lists:remove": {
        const nextFormLists = state.formLists.filter(
          ({ id: id2 }) => id2 !== action.value
        );
        const allFormIdsListed = [];
        nextFormLists.forEach((formList) => {
          formList.formIds.forEach((id2) => {
            allFormIdsListed.push(id2);
          });
        });
        const nextForms = state.forms.filter(
          ({ tinaForm }) => allFormIdsListed.includes(tinaForm.id)
        );
        return {
          ...state,
          quickEditSupported: false,
          // Always set it to null for now, this will become more annoying for users
          // when `useTina` hooks are mounting client-side as a result of the app itself
          // rather than route navigation
          activeFormId: null,
          forms: nextForms,
          formLists: nextFormLists
        };
      }
      case "forms:set-active-form-id":
        if (action.value !== state.activeFormId) {
          const newActiveForm = state.forms.find(
            (form) => form.tinaForm.id === action.value
          );
          const breadcrumbs2 = calculateBreadcrumbs(
            state.forms,
            action.value,
            (newActiveForm == null ? void 0 : newActiveForm.activeFieldName) || ""
          );
          return {
            ...state,
            breadcrumbs: breadcrumbs2,
            activeFormId: action.value
          };
        }
        return state;
      case "forms:set-active-field-name":
        if (state.activeFormId === action.value.formId) {
          const existingForm = state.forms.find(
            (form) => form.tinaForm.id === action.value.formId
          );
          if ((existingForm == null ? void 0 : existingForm.activeFieldName) === action.value.fieldName) {
            return state;
          }
        }
        const forms = state.forms.map((form) => {
          if (form.tinaForm.id === action.value.formId) {
            return {
              tinaForm: form.tinaForm,
              activeFieldName: action.value.fieldName
            };
          }
          return form;
        });
        const breadcrumbs = calculateBreadcrumbs(
          state.forms,
          action.value.formId,
          action.value.fieldName
        );
        return {
          ...state,
          breadcrumbs,
          forms,
          activeFormId: action.value.formId
        };
      case "toggle-edit-state": {
        return state.sidebarDisplayState === "closed" ? { ...state, sidebarDisplayState: "open" } : {
          ...state,
          sidebarDisplayState: "closed"
        };
      }
      case "sidebar:set-display-state": {
        if (action.value === "openOrFull") {
          if (state.sidebarDisplayState === "closed") {
            return {
              ...state,
              sidebarDisplayState: "open"
            };
          }
          return state;
        }
        if (action.value === "open") {
          return {
            ...state,
            sidebarDisplayState: action.value
          };
        }
        return { ...state, sidebarDisplayState: action.value };
      }
      case "sidebar:set-loading-state": {
        return { ...state, isLoadingContent: action.value };
      }
      default:
        throw new Error(`Unhandled action ${action.type}`);
    }
  }
  function calculateBreadcrumbs(forms, activeFormId, activeFieldName = "") {
    var _a2;
    const form = (_a2 = forms.find(
      (form2) => form2.tinaForm.id === activeFormId
    )) == null ? void 0 : _a2.tinaForm;
    if (!form) {
      return [];
    }
    const makeCrumb = (field, path2) => {
      return {
        label: typeof field.label === "string" ? field.label : field.name,
        formId: form.id,
        formName: path2,
        namespace: field.namespace || []
      };
    };
    if (!activeFieldName) {
      const fieldGroup = form.getActiveField("");
      return [makeCrumb(fieldGroup, "")];
    }
    const breadcrumbs = [];
    let activePath = activeFieldName.split(".");
    while (activePath.length > 0) {
      let fieldGroup = null;
      try {
        fieldGroup = form.getActiveField(activePath.join("."));
      } catch (error2) {
      }
      if ((fieldGroup == null ? void 0 : fieldGroup.__type) === "form") {
        break;
      }
      const isListField = !!(fieldGroup == null ? void 0 : fieldGroup.list);
      const pathEndsWithDigit = /^\d+$/.test(activePath[activePath.length - 1]);
      if (isListField && !pathEndsWithDigit) {
        activePath = activePath.slice(0, -1);
        continue;
      }
      if (fieldGroup) {
        const lastInsertedCrumb = breadcrumbs.length > 0 ? breadcrumbs[0] : null;
        const newCrumb = makeCrumb(fieldGroup, activePath.join("."));
        if (!lastInsertedCrumb || lastInsertedCrumb.label !== newCrumb.label || lastInsertedCrumb.namespace.join(".") !== newCrumb.namespace.join(".")) {
          breadcrumbs.unshift(newCrumb);
        }
      }
      if (activePath.length > 0) {
        const fieldType = fieldGroup == null ? void 0 : fieldGroup.type;
        if (fieldType === "rich-text" || activePath[activePath.length - 2] === "children" && pathEndsWithDigit) {
          activePath = activePath.slice(0, -3);
        } else {
          activePath = activePath.slice(0, -1);
        }
      }
    }
    if (!breadcrumbs.some((crumb) => !crumb.formName)) {
      const fieldGroup = form.getActiveField("");
      breadcrumbs.unshift(makeCrumb(fieldGroup, ""));
    }
    return breadcrumbs;
  }
  const INVALID_CMS_ERROR = "The `cms` prop must be an instance of `TinaCMS`.";
  const TinaCMSProvider = ({
    cms,
    children
  }) => {
    const [state, dispatch] = React__namespace.useReducer(tinaReducer, cms, initialState);
    if (!(cms instanceof TinaCMS)) {
      throw new Error(INVALID_CMS_ERROR);
    }
    return /* @__PURE__ */ React__namespace.createElement(CMSContext.Provider, { value: { cms, state, dispatch } }, children);
  };
  function Alerts({ alerts }) {
    useSubscribable(alerts);
    if (!alerts.all.length) {
      return null;
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", { className: "fixed bottom-0 left-0 right-0 p-6 flex flex-col items-center z-[999999] pointer-events-none" }, alerts.all.filter((alert) => {
      return alert.level !== "error";
    }).map((alert) => {
      return /* @__PURE__ */ React.createElement(Alert, { key: alert.id, level: alert.level }, alert.level === "info" && /* @__PURE__ */ React.createElement(BiInfoCircle, { className: "w-5 h-auto opacity-70" }), alert.level === "success" && /* @__PURE__ */ React.createElement(BiCheckCircle, { className: "w-5 h-auto opacity-70" }), alert.level === "warn" && /* @__PURE__ */ React.createElement(BiError, { className: "w-5 h-auto opacity-70" }), /* @__PURE__ */ React.createElement("p", { className: "m-0 flex-1 max-w-[680px] text-left" }, alert.message.toString()), /* @__PURE__ */ React.createElement(
        CloseAlert,
        {
          onClick: () => {
            alerts.dismiss(alert);
          }
        }
      ));
    })), alerts.all.filter((alert) => {
      return alert.level === "error";
    }).map((alert) => {
      const AlertMessage = typeof alert.message === "string" ? () => {
        return /* @__PURE__ */ React.createElement("p", { className: "text-base mb-3 overflow-y-auto" }, alert.message.toString());
      } : alert.message;
      return /* @__PURE__ */ React.createElement(Modal, { key: alert.id }, /* @__PURE__ */ React.createElement(PopupModal, null, /* @__PURE__ */ React.createElement(
        ModalHeader,
        {
          close: () => {
            alerts.dismiss(alert);
          }
        },
        /* @__PURE__ */ React.createElement(BiError, { className: "mr-1 w-6 h-auto fill-current inline-block text-red-600" }),
        " ",
        "Error"
      ), /* @__PURE__ */ React.createElement(ModalBody, { padded: true }, /* @__PURE__ */ React.createElement("div", { className: "tina-prose" }, /* @__PURE__ */ React.createElement(AlertMessage, null))), /* @__PURE__ */ React.createElement(ModalActions, null, /* @__PURE__ */ React.createElement("div", { className: "flex-1" }), /* @__PURE__ */ React.createElement(
        Button$1,
        {
          style: { flexGrow: 1 },
          onClick: () => {
            alerts.dismiss(alert);
          }
        },
        "Close"
      ))));
    }));
  }
  const Alert = ({
    level,
    ...props
  }) => {
    const colorClasses = {
      info: "bg-blue-100 border-blue-500 text-blue-600 fill-blue-500",
      success: "bg-green-100 border-green-500 text-green-600 fill-green-500",
      warn: "bg-yellow-100 border-yellow-500 text-yellow-600 fill-yellow-500",
      error: "bg-red-100 border-red-500 text-red-600 fill-red-500"
    };
    const borderClasses = {
      info: "border-blue-200",
      success: "border-green-200",
      warn: "border-yellow-200",
      error: "border-red-200"
    };
    return /* @__PURE__ */ React.createElement(
      "div",
      {
        className: `rounded shadow-lg border-l-[6px] font-normal cursor-pointer pointer-events-all text-sm transition-all duration-100 ease-out mb-4 max-w-full ${colorClasses[level]}}`,
        style: {
          animationName: "fly-in-up, fade-in",
          animationTimingFunction: "ease-out",
          animationIterationCount: 1,
          animationFillMode: "both",
          animationDuration: "150ms"
        }
      },
      /* @__PURE__ */ React.createElement(
        "div",
        {
          className: `flex items-center gap-1.5 min-w-[350px] rounded-r border p-2 ${borderClasses[level]}`,
          ...props
        }
      )
    );
  };
  const CloseAlert = ({ ...styleProps }) => /* @__PURE__ */ React.createElement(
    "button",
    {
      className: "border-none bg-transparent p-0 outline-none flex items-center",
      ...styleProps
    },
    /* @__PURE__ */ React.createElement(BiX, { className: "w-5 auto flex-grow-0 flex-shrink-0 opacity-50" })
  );
  function CursorPaginator({
    navigateNext,
    navigatePrev,
    hasNext,
    hasPrev,
    variant = "white"
  }) {
    return /* @__PURE__ */ React.createElement("div", { className: "w-full flex flex-shrink-0 justify-end gap-2 items-center" }, /* @__PURE__ */ React.createElement(Button$1, { variant, disabled: !hasPrev, onClick: navigatePrev }, /* @__PURE__ */ React.createElement(BiLeftArrowAlt, { className: "w-6 h-full mr-2 opacity-70" }), " Previous"), /* @__PURE__ */ React.createElement(Button$1, { variant, disabled: !hasNext, onClick: navigateNext }, "Next ", /* @__PURE__ */ React.createElement(BiRightArrowAlt, { className: "w-6 h-full ml-2 opacity-70" })));
  }
  const MutationSignalContext = React__namespace.createContext(-1);
  const MutationSignalProvider = ({ children }) => {
    const observerAreaRef = React__namespace.useRef(null);
    const [signal, setSignal] = React__namespace.useState(0);
    React__namespace.useEffect(() => {
      if (!observerAreaRef)
        return;
      const observer = new MutationObserver(() => setSignal((s2) => s2 + 1));
      observer.observe(observerAreaRef.current, {
        childList: true,
        subtree: true,
        characterData: true
      });
      return () => observer.disconnect();
    }, []);
    return /* @__PURE__ */ React__namespace.createElement(MutationSignalContext.Provider, { value: signal }, /* @__PURE__ */ React__namespace.createElement("div", { ref: observerAreaRef }, children));
  };
  const useFieldReference = (fieldName) => {
    const signal = React__namespace.useContext(MutationSignalContext);
    const [ele, setEle] = React__namespace.useState(null);
    React__namespace.useEffect(() => {
      let doc;
      const iframe = document.getElementById("tina-iframe");
      if (iframe) {
        doc = iframe.contentDocument;
      } else {
        doc = document;
      }
      const fieldEle = doc.querySelector(
        `[data-tinafield="${fieldName}"]`
      );
      if (!fieldEle) {
        if (fieldName == null ? void 0 : fieldName.includes("#")) {
          const fieldNameWithoutFormId = fieldName.split("#")[1];
          const fieldEle2 = doc.querySelector(
            `[data-tinafield="${fieldNameWithoutFormId}"]`
          );
          setEle(fieldEle2);
        }
      } else {
        setEle(fieldEle);
      }
    }, [signal, fieldName]);
    return ele;
  };
  const IndicatorWrap = ({ style = {}, position, ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "div",
    {
      className: "fixed left-0 py-2 px-0 text-center",
      style: {
        ...style,
        marginLeft: "var(--tina-sidebar-width)",
        width: "calc(100% - var(--tina-sidebar-width))",
        top: position === "top" ? 0 : "auto",
        bottom: position === "top" ? "auto" : 0,
        zIndex: "var(--tina-z-index-3)"
      },
      ...props
    }
  );
  const ArrowWrap = (props) => /* @__PURE__ */ React__namespace.createElement(
    "div",
    {
      className: "inline-block fill-white rounded-[50%] bg-blue-500 shadow-md",
      ...props
    }
  );
  const AboveViewportIndicator = () => {
    return /* @__PURE__ */ React__namespace.createElement(IndicatorWrap, { position: "top" }, /* @__PURE__ */ React__namespace.createElement(ArrowWrap, null, /* @__PURE__ */ React__namespace.createElement(ChevronUpIcon, { className: "w-8 h-auto" })));
  };
  const BelowViewportIndicator = () => {
    return /* @__PURE__ */ React__namespace.createElement(IndicatorWrap, { position: "bottom" }, /* @__PURE__ */ React__namespace.createElement(ArrowWrap, null, /* @__PURE__ */ React__namespace.createElement(ChevronDownIcon, { className: "w-8 h-auto" })));
  };
  const useScrollToFocusedField = () => {
    const { subscribe } = useEvent("field:focus");
    React__namespace.useEffect(
      () => subscribe(({ fieldName }) => {
        const ele = document.querySelector(
          `[data-tinafield="${fieldName}"]`
        );
        if (!ele)
          return;
        const { top, height } = ele.getBoundingClientRect();
        const eleTopY = top + window.scrollY;
        const eleBottomY = top + height + window.scrollY;
        const viewportTopY = window.scrollY;
        const viewportBottomY = window.innerHeight + window.scrollY;
        if (height < window.innerHeight) {
          if (eleBottomY > viewportBottomY) {
            window.scrollTo({
              top: eleBottomY - window.innerHeight,
              behavior: "smooth"
            });
          } else if (eleTopY < viewportTopY) {
            window.scrollTo({
              top: eleTopY,
              behavior: "smooth"
            });
          }
        } else {
          if (eleBottomY < viewportBottomY) {
            window.scrollTo({
              top: eleBottomY - window.innerHeight,
              behavior: "smooth"
            });
          } else if (eleTopY > viewportTopY) {
            window.scrollTo({
              top: eleTopY,
              behavior: "smooth"
            });
          }
        }
      })
    );
  };
  const ActiveFieldIndicator = () => {
    const [activeFieldName, setActiveFieldName] = React__namespace.useState(
      null
    );
    const [display, setDisplay] = React__namespace.useState(false);
    const [position, setPosition] = React__namespace.useState(false);
    const [iframePosition, setIframePosition] = React__namespace.useState({ left: 0 });
    const activeEle = useFieldReference(activeFieldName);
    React__namespace.useEffect(() => {
      let displayTimeout;
      if (activeEle) {
        setDisplay(true);
        setPosition(activeEle.getBoundingClientRect());
        const iframe = document.getElementById(
          "tina-iframe"
        );
        if (iframe) {
          setIframePosition(iframe.getBoundingClientRect());
        }
      } else {
        displayTimeout = setTimeout(() => {
          setDisplay(false);
        }, 150);
      }
      return () => {
        clearTimeout(displayTimeout);
      };
    }, [activeEle]);
    const [, setArbitraryValue] = React__namespace.useState(0);
    const rerender = () => setArbitraryValue((s2) => s2 + 1);
    React__namespace.useEffect(() => {
      window.addEventListener("scroll", rerender);
      return () => {
        window.removeEventListener("scroll", rerender);
      };
    }, []);
    const { subscribe } = useEvent("field:hover");
    React__namespace.useEffect(
      () => subscribe(({ fieldName, id: id2 }) => {
        setActiveFieldName(`${id2}#${fieldName}`);
      })
    );
    useScrollToFocusedField();
    if (!display)
      return null;
    const eleTopY = position.top + window.scrollY;
    const eleBottomY = position.top + position.height + window.scrollY;
    const viewportTopY = window.scrollY;
    const viewportBottomY = window.innerHeight + window.scrollY;
    if (eleTopY > viewportBottomY) {
      return /* @__PURE__ */ React__namespace.createElement(BelowViewportIndicator, null);
    }
    if (eleBottomY < viewportTopY) {
      return /* @__PURE__ */ React__namespace.createElement(AboveViewportIndicator, null);
    }
    return /* @__PURE__ */ React__namespace.createElement(
      "div",
      {
        style: {
          position: "absolute",
          zIndex: "var(--tina-z-index-3)",
          top: position.top + window.scrollY,
          left: position.left + window.scrollX + iframePosition.left,
          width: position.width,
          height: position.height,
          outline: "2px dashed var(--tina-color-indicator)",
          borderRadius: "var(--tina-radius-small)",
          transition: display ? activeEle ? `opacity 300ms ease-out` : `opacity 150ms ease-in` : `none`,
          opacity: activeEle && display ? 0.8 : 0
        }
      }
    );
  };
  const TinaUI = ({ children, position }) => {
    const cms = useCMS();
    const [resizingSidebar, setResizingSidebar] = React__namespace.useState(false);
    return /* @__PURE__ */ React__namespace.createElement(MutationSignalProvider, null, /* @__PURE__ */ React__namespace.createElement(ModalProvider, null, /* @__PURE__ */ React__namespace.createElement(Alerts, { alerts: cms.alerts }), /* @__PURE__ */ React__namespace.createElement(MediaManager, null), cms.sidebar && /* @__PURE__ */ React__namespace.createElement(
      SidebarProvider,
      {
        resizingSidebar,
        setResizingSidebar,
        position,
        sidebar: cms.sidebar
      }
    ), /* @__PURE__ */ React__namespace.createElement(ActiveFieldIndicator, null), /* @__PURE__ */ React__namespace.createElement("div", { className: `${resizingSidebar ? "pointer-events-none" : ""}` }, children)));
  };
  const TinaProvider = ({
    cms,
    children,
    position,
    styled = true
  }) => {
    return /* @__PURE__ */ React__namespace.createElement(TinaCMSProvider, { cms }, /* @__PURE__ */ React__namespace.createElement(TinaUI, { position, styled }, children));
  };
  const Tina = TinaProvider;
  const BranchModal = ({ close: close2 }) => {
    const tinaApi = useCMS().api.tina;
    const { setCurrentBranch } = useBranchData();
    const [modalTitle, setModalTitle] = React__namespace.useState("Branch List");
    return /* @__PURE__ */ React__namespace.createElement(Modal, null, /* @__PURE__ */ React__namespace.createElement(PopupModal, { className: " w-[800px]" }, /* @__PURE__ */ React__namespace.createElement(ModalHeader, { close: close2 }, modalTitle), /* @__PURE__ */ React__namespace.createElement(ModalBody, { padded: false }, /* @__PURE__ */ React__namespace.createElement(
      BranchSwitcher,
      {
        listBranches: tinaApi.listBranches.bind(tinaApi),
        createBranch: async (data) => {
          return await tinaApi.createBranch(data);
        },
        chooseBranch: setCurrentBranch,
        setModalTitle
      }
    ))));
  };
  const trimPrefix = (branchName) => {
    return branchName.replace(/^tina\//, "");
  };
  const BranchButton = () => {
    const [open2, setOpen] = React__namespace.useState(false);
    const { currentBranch } = useBranchData();
    const cms = useCMS();
    const branchingEnabled = cms.flags.get("branch-switcher");
    if (!branchingEnabled) {
      return null;
    }
    const isProtected = cms.api.tina.usingProtectedBranch();
    return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        className: cn(
          `pointer-events-auto px-3 py-3 flex shrink gap-1 items-center justify-between form-select text-sm shadow transition-color duration-150 ease-out rounded-lg`,
          `focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out `,
          isProtected ? "text-white hover:text-blue-50 bg-blue-500 hover:bg-blue-400 border-0" : "text-gray-500 hover:text-blue-500 bg-white hover:bg-gray-50 border border-gray-100"
        ),
        onClick: () => setOpen(true)
      },
      isProtected ? /* @__PURE__ */ React__namespace.createElement(BiLockAlt, { className: "flex-shrink-0 h-4 w-auto opacity-70 text-white" }) : /* @__PURE__ */ React__namespace.createElement(
        BiGitBranch,
        {
          className: `flex-shrink-0 h-4 w-auto opacity-70 text-zinc-400`
        }
      ),
      /* @__PURE__ */ React__namespace.createElement("span", { className: "truncate max-w-full -mr-1" }, trimPrefix(currentBranch)),
      /* @__PURE__ */ React__namespace.createElement(
        BiChevronDown,
        {
          className: "-mr-1 h-4 w-4 opacity-70 shrink-0",
          "aria-hidden": "true"
        }
      )
    ), open2 && /* @__PURE__ */ React__namespace.createElement(BranchModal, { close: () => setOpen(false) }));
  };
  const BranchPreviewButton = (props) => {
    var _a2, _b, _c, _d, _e, _f, _g, _h, _i;
    const cms = useCMS();
    const branchingEnabled = cms.flags.get("branch-switcher");
    if (!branchingEnabled) {
      return null;
    }
    const previewFunction = (_f = (_e = (_d = (_c = (_b = (_a2 = cms.api) == null ? void 0 : _a2.tina) == null ? void 0 : _b.schema) == null ? void 0 : _c.config) == null ? void 0 : _d.config) == null ? void 0 : _e.ui) == null ? void 0 : _f.previewUrl;
    const branch = (_h = (_g = cms.api) == null ? void 0 : _g.tina) == null ? void 0 : _h.branch;
    const previewUrl = typeof previewFunction === "function" ? (_i = previewFunction({ branch })) == null ? void 0 : _i.url : null;
    if (!previewUrl) {
      return null;
    }
    return /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        type: "button",
        className: "p-2 text-gray-500 hover:text-blue-500 hover:bg-gray-100 transition-colors duration-150 ease-in-out rounded",
        ...props,
        onClick: () => {
          window.open(previewUrl, "_blank");
        },
        title: "Preview site in new tab"
      },
      /* @__PURE__ */ React__namespace.createElement("span", { className: "sr-only" }, "Preview"),
      /* @__PURE__ */ React__namespace.createElement(BiLinkExternal, { className: "h-5 w-auto" })
    );
  };
  const FormActionMenu = ({ actions, form }) => {
    const [actionMenuVisibility, setActionMenuVisibility] = React.useState(false);
    return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(MoreActionsButton, { onClick: () => setActionMenuVisibility((p2) => !p2) }), /* @__PURE__ */ React__namespace.createElement(ActionsOverlay, { open: actionMenuVisibility }, /* @__PURE__ */ React__namespace.createElement(
      Dismissible,
      {
        click: true,
        escape: true,
        disabled: !actionMenuVisibility,
        onDismiss: () => {
          setActionMenuVisibility((p2) => !p2);
        }
      },
      actions.map((Action, i2) => (
        // TODO: `i` will suppress warnings but this indicates that maybe
        //        Actions should just be componets
        /* @__PURE__ */ React__namespace.createElement(Action, { form, key: i2 })
      ))
    )));
  };
  const MoreActionsButton = ({ className = "", ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "button",
    {
      className: `h-16 w-10 self-stretch bg-transparent bg-center bg-[length:auto_18px] -mr-4 ml-2 outline-none cursor-pointer transition-opacity duration-100 ease-out flex justify-center items-center hover:bg-gray-50 hover:fill-gray-700 ${className}`,
      ...props
    },
    /* @__PURE__ */ React__namespace.createElement(EllipsisVerticalIcon, null)
  );
  const ActionsOverlay = ({ open: open2, className = "", style = {}, ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "div",
    {
      className: `min-w-[192px] rounded-3xl border border-solid border-[#efefef] block absolute bottom-5 right-5 ${open2 ? "opacity-100" : "opacity-0"} transition-all duration-100 ease-out origin-bottom-right shadow-[0_2px_3px_rgba(0,0,0,0.05)] bg-white overflow-hidden z-10 ${className}`,
      style: {
        transform: open2 ? "translate3d(0, -28px, 0) scale3d(1, 1, 1)" : "translate3d(0, 0, 0) scale3d(0.5, 0.5, 1)",
        pointerEvents: open2 ? "all" : "none",
        ...style
      },
      ...props
    }
  );
  const ActionButton = ({ className = "", ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "button",
    {
      className: `relative text-center text-[13px] px-3 h-10 font-normal w-full bg-none cursor-pointer outline-none border-0 transition-all duration-[150ms] ease-out hover:text-blue-500 hover:bg-gray50 [&:not(:last-child)]: border-b-[1px] border-solid border-b-[#edecf3] ${className}`,
      ...props
    }
  );
  const FormPortalContext = React__namespace.createContext(() => {
    return null;
  });
  function useFormPortal() {
    return React__namespace.useContext(FormPortalContext);
  }
  const FormPortalProvider = ({
    children
  }) => {
    const wrapperRef = React__namespace.useRef(null);
    const zIndexRef = React__namespace.useRef(0);
    const FormPortal = React__namespace.useCallback(
      (props) => {
        if (!wrapperRef.current)
          return null;
        return ReactDOM.createPortal(
          props.children({ zIndexShift: zIndexRef.current += 1 }),
          wrapperRef.current
        );
      },
      [wrapperRef, zIndexRef]
    );
    return /* @__PURE__ */ React__namespace.createElement(FormPortalContext.Provider, { value: FormPortal }, /* @__PURE__ */ React__namespace.createElement("div", { ref: wrapperRef, className: "relative w-full flex-1 overflow-hidden" }, children));
  };
  const LoadingDots = ({
    dotSize = 8,
    color = "white"
  }) => {
    return /* @__PURE__ */ React__namespace.createElement("div", null, /* @__PURE__ */ React__namespace.createElement(SingleDot, { dotSize, color }), /* @__PURE__ */ React__namespace.createElement(SingleDot, { dotSize, color, delay: 0.3 }), /* @__PURE__ */ React__namespace.createElement(SingleDot, { dotSize, color, delay: 0.5 }));
  };
  const SingleDot = ({ delay = 0, color, dotSize }) => /* @__PURE__ */ React__namespace.createElement(
    "span",
    {
      className: "inline-block mr-1",
      style: {
        animation: "loading-dots-scale-up-and-down 2s linear infinite",
        animationDelay: `${delay}s`,
        background: color,
        width: dotSize,
        height: dotSize,
        borderRadius: dotSize
      }
    }
  );
  const ResetForm = ({
    pristine,
    reset: reset2,
    children,
    ...props
  }) => {
    const [open2, setOpen] = React__namespace.useState(false);
    return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(
      Button$1,
      {
        onClick: () => {
          setOpen((p2) => !p2);
        },
        disabled: pristine,
        ...props
      },
      children
    ), open2 && /* @__PURE__ */ React__namespace.createElement(ResetModal, { reset: reset2, close: () => setOpen(false) }));
  };
  const ResetModal = ({ close: close2, reset: reset2 }) => {
    return /* @__PURE__ */ React__namespace.createElement(Modal, null, /* @__PURE__ */ React__namespace.createElement(ModalPopup, null, /* @__PURE__ */ React__namespace.createElement(ModalHeader, { close: close2 }, "Reset"), /* @__PURE__ */ React__namespace.createElement(ModalBody, { padded: true }, /* @__PURE__ */ React__namespace.createElement("p", null, "Are you sure you want to reset all changes?")), /* @__PURE__ */ React__namespace.createElement(ModalActions, null, /* @__PURE__ */ React__namespace.createElement(Button$1, { style: { flexGrow: 2 }, onClick: close2 }, "Cancel"), /* @__PURE__ */ React__namespace.createElement(
      Button$1,
      {
        style: { flexGrow: 3 },
        variant: "primary",
        onClick: async () => {
          await reset2();
          close2();
        }
      },
      "Reset"
    ))));
  };
  const NoFieldsPlaceholder = () => /* @__PURE__ */ React__namespace.createElement(
    "div",
    {
      className: "relative flex flex-col items-center justify-center text-center p-5 pb-16 w-full h-full overflow-y-auto",
      style: {
        animationName: "fade-in",
        animationDelay: "300ms",
        animationTimingFunction: "ease-out",
        animationIterationCount: 1,
        animationFillMode: "both",
        animationDuration: "150ms"
      }
    },
    /* @__PURE__ */ React__namespace.createElement(Emoji, { className: "block pb-5" }, "🤔"),
    /* @__PURE__ */ React__namespace.createElement("h3", { className: "font-sans font-normal text-lg block pb-5" }, "Hey, you don't have any fields added to this form."),
    /* @__PURE__ */ React__namespace.createElement("p", { className: "block pb-5" }, /* @__PURE__ */ React__namespace.createElement(
      "a",
      {
        className: "text-center rounded-3xl border border-solid border-gray-100 shadow-[0_2px_3px_rgba(0,0,0,0.12)] font-normal cursor-pointer text-[12px] transition-all duration-100 ease-out bg-white text-gray-700 py-3 pr-5 pl-14 relative no-underline inline-block hover:text-blue-500",
        href: "https://tinacms.org/docs/fields",
        target: "_blank"
      },
      /* @__PURE__ */ React__namespace.createElement(
        Emoji,
        {
          className: "absolute left-5 top-1/2 origin-center -translate-y-1/2 transition-all duration-100 ease-out",
          style: { fontSize: 24 }
        },
        "📖"
      ),
      " ",
      "Field Setup Guide"
    ))
  );
  const FormKeyBindings = ({ onSubmit }) => {
    React.useEffect(() => {
      const handleKeyDown = (e3) => {
        if ((e3.metaKey || e3.ctrlKey) && e3.key === "s") {
          e3.preventDefault();
          onSubmit();
        }
      };
      window.addEventListener("keydown", handleKeyDown);
      return () => window.removeEventListener("keydown", handleKeyDown);
    }, [onSubmit]);
    return null;
  };
  const FormBuilder = ({
    form,
    onPristineChange,
    ...rest
  }) => {
    const cms = useCMS$1();
    const hideFooter = !!rest.hideFooter;
    const [createBranchModalOpen, setCreateBranchModalOpen] = React__namespace.useState(false);
    const tinaForm = form.tinaForm;
    const finalForm2 = form.tinaForm.finalForm;
    const schema = cms.api.tina.schema;
    React__namespace.useEffect(() => {
      var _a2;
      const collection = schema.getCollectionByFullPath(tinaForm.path);
      if ((_a2 = collection == null ? void 0 : collection.ui) == null ? void 0 : _a2.beforeSubmit) {
        tinaForm.beforeSubmit = (values) => collection.ui.beforeSubmit({ cms, form: tinaForm, values });
      } else {
        tinaForm.beforeSubmit = void 0;
      }
    }, [tinaForm.path]);
    const moveArrayItem = React__namespace.useCallback(
      (result) => {
        if (!result.destination || !finalForm2)
          return;
        const name = result.type;
        finalForm2.mutators.move(
          name,
          result.source.index,
          result.destination.index
        );
      },
      [tinaForm]
    );
    React__namespace.useEffect(() => {
      const unsubscribe = finalForm2.subscribe(
        ({ pristine }) => {
          if (onPristineChange) {
            onPristineChange(pristine);
          }
        },
        { pristine: true }
      );
      return () => {
        unsubscribe();
      };
    }, [finalForm2]);
    const fieldGroup = tinaForm.getActiveField(form.activeFieldName);
    return /* @__PURE__ */ React__namespace.createElement(
      reactFinalForm.Form,
      {
        key: tinaForm.id,
        form: tinaForm.finalForm,
        onSubmit: tinaForm.onSubmit
      },
      ({
        handleSubmit,
        pristine,
        invalid,
        submitting,
        dirtySinceLastSubmit,
        hasValidationErrors
      }) => {
        const usingProtectedBranch = cms.api.tina.usingProtectedBranch();
        const canSubmit = !pristine && !submitting && !hasValidationErrors && !(invalid && !dirtySinceLastSubmit);
        const safeSubmit = async () => {
          if (canSubmit) {
            await handleSubmit();
          }
        };
        const safeHandleSubmit = async () => {
          if (usingProtectedBranch) {
            setCreateBranchModalOpen(true);
          } else {
            safeSubmit();
          }
        };
        return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, createBranchModalOpen && /* @__PURE__ */ React__namespace.createElement(
          CreateBranchModal,
          {
            safeSubmit,
            crudType: tinaForm.crudType,
            path: tinaForm.path,
            values: tinaForm.values,
            close: () => setCreateBranchModalOpen(false)
          }
        ), /* @__PURE__ */ React__namespace.createElement(reactBeautifulDnd.DragDropContext, { onDragEnd: moveArrayItem }, /* @__PURE__ */ React__namespace.createElement(FormKeyBindings, { onSubmit: safeHandleSubmit }), /* @__PURE__ */ React__namespace.createElement(FormPortalProvider, null, /* @__PURE__ */ React__namespace.createElement(FormWrapper, { id: tinaForm.id }, (tinaForm == null ? void 0 : tinaForm.fields.length) ? /* @__PURE__ */ React__namespace.createElement(
          FieldsBuilder,
          {
            form: tinaForm,
            activeFieldName: form.activeFieldName,
            fields: fieldGroup.fields
          }
        ) : /* @__PURE__ */ React__namespace.createElement(NoFieldsPlaceholder, null))), !hideFooter && /* @__PURE__ */ React__namespace.createElement("div", { className: "relative flex-none w-full h-16 px-6 bg-white border-t border-gray-100 flex items-center justify-end" }, /* @__PURE__ */ React__namespace.createElement("div", { className: "flex-1 w-full justify-end gap-2	flex items-center max-w-form" }, tinaForm.reset && /* @__PURE__ */ React__namespace.createElement(
          ResetForm,
          {
            pristine,
            reset: async () => {
              finalForm2.reset();
              await tinaForm.reset();
            }
          },
          tinaForm.buttons.reset
        ), /* @__PURE__ */ React__namespace.createElement(
          Button$1,
          {
            onClick: safeHandleSubmit,
            disabled: !canSubmit,
            busy: submitting,
            variant: "primary"
          },
          submitting && /* @__PURE__ */ React__namespace.createElement(LoadingDots, null),
          !submitting && tinaForm.buttons.save
        ), tinaForm.actions.length > 0 && /* @__PURE__ */ React__namespace.createElement(
          FormActionMenu,
          {
            form: tinaForm,
            actions: tinaForm.actions
          }
        )))));
      }
    );
  };
  const FormStatus = ({ pristine }) => {
    const pristineClass = pristine ? "text-green-500" : "text-red-500";
    return /* @__PURE__ */ React__namespace.createElement(FaCircle, { className: cn("h-3", pristineClass) });
  };
  const FormWrapper = ({
    id: id2,
    children
  }) => {
    return /* @__PURE__ */ React__namespace.createElement(
      "div",
      {
        "data-test": `form:${id2 == null ? void 0 : id2.replace(/\\/g, "/")}`,
        className: "h-full overflow-y-auto max-h-full bg-gray-50"
      },
      /* @__PURE__ */ React__namespace.createElement("div", { className: "py-5 px-6" }, children)
    );
  };
  const Emoji = ({ className = "", ...props }) => /* @__PURE__ */ React__namespace.createElement(
    "span",
    {
      className: `text-[40px] leading-none inline-block ${className}`,
      ...props
    }
  );
  const CreateBranchModel = ({
    close: close2,
    safeSubmit,
    relativePath: relativePath2,
    values,
    crudType
  }) => /* @__PURE__ */ React__namespace.createElement(
    CreateBranchModal,
    {
      close: close2,
      safeSubmit,
      path: relativePath2,
      values,
      crudType
    }
  );
  const CreateBranchModal = ({
    close: close2,
    safeSubmit,
    path: path2,
    values,
    crudType
  }) => {
    const cms = useCMS$1();
    const tinaApi = cms.api.tina;
    const [disabled, setDisabled] = React__namespace.useState(false);
    const [newBranchName, setNewBranchName] = React__namespace.useState("");
    const [error2, setError] = React__namespace.useState("");
    const onCreateBranch = (newBranchName2) => {
      localStorage.setItem("tina.createBranchState", "starting");
      localStorage.setItem("tina.createBranchState.fullPath", path2);
      localStorage.setItem(
        "tina.createBranchState.values",
        JSON.stringify(values)
      );
      localStorage.setItem("tina.createBranchState.kind", crudType);
      if (crudType === "create") {
        localStorage.setItem(
          "tina.createBranchState.back",
          // go back to the list view
          window.location.href.replace("/new", "")
        );
      } else {
        localStorage.setItem("tina.createBranchState.back", window.location.href);
      }
      const hash = window.location.hash;
      const newHash = `#/branch/new?branch=${newBranchName2}`;
      const newUrl = window.location.href.replace(hash, newHash);
      window.location.href = newUrl;
    };
    return /* @__PURE__ */ React__namespace.createElement(Modal, null, /* @__PURE__ */ React__namespace.createElement(PopupModal, null, /* @__PURE__ */ React__namespace.createElement(ModalHeader, { close: close2 }, /* @__PURE__ */ React__namespace.createElement(BiGitBranch, { className: "w-6 h-auto mr-1 text-blue-500 opacity-70" }), " ", "Create Branch"), /* @__PURE__ */ React__namespace.createElement(ModalBody, { padded: true }, /* @__PURE__ */ React__namespace.createElement("p", { className: "text-lg text-gray-700 font-bold mb-2" }, "This content is protected 🚧"), /* @__PURE__ */ React__namespace.createElement("p", { className: "text-sm text-gray-700 mb-4" }, "To make changes, you need to create a copy then get it approved and merged for it to go live."), /* @__PURE__ */ React__namespace.createElement(
      PrefixedTextField,
      {
        placeholder: "e.g. {{PAGE-NAME}}-updates",
        value: newBranchName,
        onChange: (e3) => {
          setError("");
          setNewBranchName(formatBranchName(e3.target.value));
        }
      }
    ), error2 && /* @__PURE__ */ React__namespace.createElement("div", { className: "mt-2 text-sm text-red-700" }, error2)), /* @__PURE__ */ React__namespace.createElement(ModalActions, null, /* @__PURE__ */ React__namespace.createElement(Button$1, { style: { flexGrow: 1 }, onClick: close2 }, "Cancel"), /* @__PURE__ */ React__namespace.createElement(
      Button$1,
      {
        variant: "primary",
        style: { flexGrow: 2 },
        disabled: newBranchName === "" || Boolean(error2) || disabled,
        onClick: async () => {
          setDisabled(true);
          const branchList = await tinaApi.listBranches({
            includeIndexStatus: false
          });
          const contentBranches = branchList.filter((x) => {
            var _a2;
            return (_a2 = x == null ? void 0 : x.name) == null ? void 0 : _a2.startsWith("tina/");
          }).map((x) => x.name.replace("tina/", ""));
          if (contentBranches.includes(newBranchName)) {
            setError("Branch already exists");
            setDisabled(false);
            return;
          }
          if (!error2)
            onCreateBranch(newBranchName);
        }
      },
      "Create Branch and Save"
    ), /* @__PURE__ */ React__namespace.createElement(
      OverflowMenu$1,
      {
        className: "-ml-2",
        toolbarItems: [
          {
            name: "override",
            label: "Save to Protected Branch",
            Icon: /* @__PURE__ */ React__namespace.createElement(MdOutlineSaveAlt, { size: "1rem" }),
            onMouseDown: () => {
              close2();
              safeSubmit();
            }
          }
        ]
      }
    ))));
  };
  const PrefixedTextField = ({ prefix = "tina/", ...props }) => {
    return /* @__PURE__ */ React__namespace.createElement("div", { className: "border border-gray-200 focus-within:border-blue-200 bg-gray-100 focus-within:bg-blue-100 rounded shadow-sm focus-within:shadow-outline overflow-hidden flex items-stretch divide-x divide-gray-200 focus-within:divide-blue-100 w-full transition-all ease-out duration-150" }, /* @__PURE__ */ React__namespace.createElement("span", { className: "pl-3 pr-2 py-2 font-medium text-base text-gray-700 opacity-50" }, prefix), /* @__PURE__ */ React__namespace.createElement(
      "input",
      {
        type: "text",
        className: "shadow-inner focus:outline-none block text-base placeholder:text-gray-300 px-3 py-2 text-gray-600 flex-1 bg-white focus:text-gray-900",
        ...props
      }
    ));
  };
  const NestedForm = (props) => {
    const FormPortal = useFormPortal();
    const id2 = React.useMemo(() => uuid(), [props.id, props.initialValues]);
    const form = React.useMemo(() => {
      return new Form({
        ...props,
        relativePath: props.id,
        id: id2,
        onChange: ({ values }) => {
          props.onChange(values);
        },
        onSubmit: () => {
        }
      });
    }, [id2, props.onChange]);
    return /* @__PURE__ */ React.createElement(FormPortal, null, ({ zIndexShift }) => /* @__PURE__ */ React.createElement(GroupPanel, { isExpanded: true, style: { zIndex: zIndexShift + 1e6 } }, /* @__PURE__ */ React.createElement(PanelHeader, { onClick: props.onClose }, props.label), /* @__PURE__ */ React.createElement(FormBuilder, { form: { tinaForm: form }, hideFooter: true })));
  };
  const handleCloseBase = (editor, element) => {
    const path2 = editor.findPath(element);
    const editorEl = editor.toDOMNode(editor, editor);
    if (editorEl) {
      editorEl.focus();
      setTimeout(() => {
        editor.tf.select(path2);
      }, 1);
    }
  };
  const handleRemoveBase = (editor, element) => {
    const path2 = editor.findPath(element);
    editor.tf.removeNodes({
      at: path2
    });
  };
  const useHotkey = (key, callback) => {
    const selected = useSelected();
    React.useEffect(() => {
      const handleEnter = (e3) => {
        if (selected) {
          if (isHotkey.isHotkey(key, e3)) {
            e3.preventDefault();
            callback();
          }
        }
      };
      document.addEventListener("keydown", handleEnter);
      return () => document.removeEventListener("keydown", handleEnter);
    }, [selected]);
  };
  const useEmbedHandles = (editor, element, baseFieldName) => {
    const cms = useCMS$1();
    const { dispatch: setFocusedField } = useEvent("field:focus");
    const [isExpanded, setIsExpanded] = React.useState(false);
    const handleClose = () => {
      setIsExpanded(false);
      handleCloseBase(editor, element);
    };
    const path2 = editor.findPath(element);
    const fieldName = `${baseFieldName}.children.${path2.join(".children.")}.props`;
    const handleSelect = () => {
      cms.dispatch({
        type: "forms:set-active-field-name",
        value: {
          formId: cms.state.activeFormId,
          fieldName
        }
      });
      setFocusedField({
        id: cms.state.activeFormId,
        fieldName
      });
    };
    const handleRemove = () => {
      handleRemoveBase(editor, element);
    };
    return { isExpanded, handleClose, handleRemove, handleSelect };
  };
  const ImgEmbed = ({
    attributes,
    children,
    element,
    editor,
    onChange
  }) => {
    const selected = useSelected();
    const { fieldName } = useTemplates();
    const { handleClose, handleRemove, handleSelect, isExpanded } = useEmbedHandles(editor, element, fieldName);
    useHotkey("enter", () => {
      editor.tf.insertNodes([
        { type: ParagraphPlugin.key, children: [{ text: "" }] }
      ]);
    });
    return /* @__PURE__ */ React.createElement("span", { ...attributes, className: "" }, children, element.url ? /* @__PURE__ */ React.createElement(
      "div",
      {
        className: `relative w-full max-w-full flex justify-start ${isImage(element.url) ? "items-start gap-3" : "items-center gap-2"}`
      },
      /* @__PURE__ */ React.createElement(
        "button",
        {
          type: "button",
          className: `flex-shrink min-w-0 focus-within:shadow-outline focus-within:border-blue-500 rounded outline-none overflow-visible cursor-pointer border-none hover:opacity-60 transition ease-out duration-100 ${selected ? "shadow-outline border-blue-500" : ""}`,
          onClick: handleSelect
        },
        isImage(element.url) ? /* @__PURE__ */ React.createElement(StyledImage, { src: element.url }) : /* @__PURE__ */ React.createElement(StyledFile, { src: element.url })
      ),
      /* @__PURE__ */ React.createElement(
        DeleteImageButton,
        {
          onClick: (e3) => {
            e3.stopPropagation();
            handleRemove();
          }
        }
      )
    ) : /* @__PURE__ */ React.createElement(
      "button",
      {
        type: "button",
        className: "outline-none relative hover:opacity-60 w-full",
        onClick: handleSelect
      },
      /* @__PURE__ */ React.createElement("div", { className: "text-center rounded-[5px] bg-gray-100 text-gray-300 leading-[1.35] py-3 text-[15px] font-normal transition-all ease-out duration-100 hover:opacity-60" }, "Click to select an image")
    ), isExpanded && /* @__PURE__ */ React.createElement(
      ImageForm,
      {
        onChange,
        initialValues: element,
        onClose: handleClose,
        element
      }
    ));
  };
  const ImageForm = (props) => {
    return /* @__PURE__ */ React.createElement(
      NestedForm,
      {
        id: "image-form",
        label: "Image",
        fields: [
          {
            label: "URL",
            name: "url",
            component: "image",
            // @ts-ignore Field type doesn't like this
            clearable: true
          },
          { label: "Caption", name: "caption", component: "text" },
          { label: "Alt", name: "alt", component: "text" }
        ],
        initialValues: props.initialValues,
        onChange: props.onChange,
        onClose: props.onClose
      }
    );
  };
  const ELEMENT_IMG = "img";
  const ImgEmbedComponent = (props) => {
    const handleChange = (values) => {
      const path2 = props.path;
      props.editor.tf.setNodes(values, { at: path2 });
    };
    return /* @__PURE__ */ React.createElement(ImgEmbed, { ...props, onChange: handleChange });
  };
  const createImgPlugin = createPlatePlugin({
    key: ELEMENT_IMG,
    node: {
      isVoid: true,
      isInline: true,
      isElement: true
    }
  }).withComponent(ImgEmbedComponent);
  const insertImg = (editor, media) => {
    if (isImage(media.src)) {
      insertInlineElement(editor, {
        type: ELEMENT_IMG,
        children: [{ text: "" }],
        url: media.src,
        caption: "",
        alt: ""
      });
    } else {
      insertInlineElement(editor, {
        type: "a",
        url: media.src,
        title: media.filename,
        children: [{ text: media.filename }]
      });
    }
    editor.tf.normalize({ force: true });
  };
  const EllipsisIcon = ({ title }) => {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, title && /* @__PURE__ */ React.createElement("span", { className: "sr-only" }, title), /* @__PURE__ */ React.createElement(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        className: "h-5 w-5",
        fill: "none",
        viewBox: "0 0 24 24",
        stroke: "currentColor"
      },
      /* @__PURE__ */ React.createElement(
        "path",
        {
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: 2,
          d: "M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"
        }
      )
    ));
  };
  const Wrapper$1 = ({ inline, children }) => {
    const Component = inline ? "span" : "div";
    return /* @__PURE__ */ React.createElement(
      Component,
      {
        contentEditable: false,
        style: { userSelect: "none" },
        className: "relative"
      },
      children
    );
  };
  const InlineEmbed = ({
    attributes,
    children,
    element,
    onChange,
    editor
  }) => {
    const selected = useSelected();
    const { templates, fieldName } = useTemplates();
    const { handleClose, handleRemove, handleSelect, isExpanded } = useEmbedHandles(editor, element, fieldName);
    useHotkey("enter", () => {
      editor.tf.insertNodes([
        { type: ParagraphPlugin.key, children: [{ text: "" }] }
      ]);
    });
    useHotkey("space", () => {
      editor.tf.insertNodes([{ text: " " }], {
        match: (n2) => {
          if (plate.ElementApi.isElement(n2) && n2.type === ELEMENT_MDX_INLINE) {
            return true;
          }
        },
        select: true
      });
    });
    const activeTemplate = templates.find(
      (template) => template.name === element.name
    );
    const formProps = {
      activeTemplate,
      element,
      editor,
      onChange,
      onClose: handleClose
    };
    if (!activeTemplate) {
      return null;
    }
    const label = getLabel(activeTemplate, formProps);
    return /* @__PURE__ */ React.createElement("span", { ...attributes }, children, /* @__PURE__ */ React.createElement(Wrapper$1, { inline: true }, /* @__PURE__ */ React.createElement(
      "span",
      {
        style: { margin: "0 0.5px" },
        className: "relative inline-flex shadow-sm rounded leading-none"
      },
      selected && /* @__PURE__ */ React.createElement("span", { className: "absolute inset-0 ring-2 ring-blue-100 ring-inset rounded z-10 pointer-events-none" }),
      /* @__PURE__ */ React.createElement(
        "span",
        {
          style: { fontWeight: "inherit", maxWidth: "275px" },
          className: "truncate cursor-pointer relative inline-flex items-center justify-start px-2 py-0.5 rounded-l border border-gray-200 bg-white  hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500",
          onMouseDown: handleSelect
        },
        label
      ),
      /* @__PURE__ */ React.createElement(DotMenu, { onOpen: handleSelect, onRemove: handleRemove })
    ), isExpanded && /* @__PURE__ */ React.createElement(EmbedNestedForm, { ...formProps })));
  };
  const BlockEmbed = ({
    attributes,
    children,
    element,
    editor,
    onChange
  }) => {
    const selected = useSelected();
    const { templates, fieldName } = useTemplates();
    const { handleClose, handleRemove, handleSelect, isExpanded } = useEmbedHandles(editor, element, fieldName);
    useHotkey("enter", () => {
      editor.tf.insertNodes([
        { type: ParagraphPlugin.key, children: [{ text: "" }] }
      ]);
    });
    const activeTemplate = templates.find(
      (template) => template.name === element.name
    );
    const formProps = {
      activeTemplate,
      element,
      editor,
      onChange,
      onClose: handleClose
    };
    if (!activeTemplate) {
      return null;
    }
    const label = getLabel(activeTemplate, formProps);
    return /* @__PURE__ */ React.createElement("div", { ...attributes, className: "w-full my-2" }, children, /* @__PURE__ */ React.createElement(Wrapper$1, { inline: false }, /* @__PURE__ */ React.createElement("span", { className: "relative w-full inline-flex shadow-sm rounded" }, selected && /* @__PURE__ */ React.createElement("span", { className: "absolute inset-0 ring-2 ring-blue-100 ring-inset rounded z-10 pointer-events-none" }), /* @__PURE__ */ React.createElement(
      "span",
      {
        onMouseDown: handleSelect,
        className: "truncate cursor-pointer w-full relative inline-flex items-center justify-start px-4 py-2 rounded-l border border-gray-200 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
      },
      label
    ), /* @__PURE__ */ React.createElement(DotMenu, { onOpen: handleSelect, onRemove: handleRemove })), isExpanded && /* @__PURE__ */ React.createElement(EmbedNestedForm, { ...formProps })));
  };
  const getLabel = (activeTemplate, formProps) => {
    const titleField = activeTemplate.fields.find((field) => field.isTitle);
    let label = activeTemplate.label || activeTemplate.name;
    if (titleField) {
      const titleValue = formProps.element.props[titleField.name];
      if (titleValue) {
        label = `${label}: ${titleValue}`;
      }
    }
    return label;
  };
  const EmbedNestedForm = ({
    editor,
    element,
    activeTemplate,
    onClose,
    onChange
  }) => {
    const path2 = editor.findPath(element);
    const id2 = [...path2, activeTemplate.name].join(".");
    return /* @__PURE__ */ React.createElement(
      NestedForm,
      {
        id: id2,
        label: activeTemplate.label,
        fields: activeTemplate.fields,
        initialValues: element.props,
        onChange,
        onClose
      }
    );
  };
  const DotMenu = ({ onOpen, onRemove }) => {
    return /* @__PURE__ */ React.createElement(react$1.Popover, { as: "span", className: "-ml-px relative block" }, /* @__PURE__ */ React.createElement(
      react$1.PopoverButton,
      {
        as: "span",
        className: "cursor-pointer h-full relative inline-flex items-center px-1 py-0.5 rounded-r border border-gray-200 bg-white text-gray-500 hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
      },
      /* @__PURE__ */ React.createElement(EllipsisIcon, { title: "Open options" })
    ), /* @__PURE__ */ React.createElement(
      react$1.Transition,
      {
        enter: "transition ease-out duration-100",
        enterFrom: "transform opacity-0 scale-95",
        enterTo: "transform opacity-100 scale-100",
        leave: "transition ease-in duration-75",
        leaveFrom: "transform opacity-100 scale-100",
        leaveTo: "transform opacity-0 scale-95"
      },
      /* @__PURE__ */ React.createElement(react$1.PopoverPanel, { className: "z-30 absolute origin-top-right right-0" }, /* @__PURE__ */ React.createElement("div", { className: "mt-2 -mr-1 rounded shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none" }, /* @__PURE__ */ React.createElement("div", { className: "py-1" }, /* @__PURE__ */ React.createElement(
        "span",
        {
          onClick: onOpen,
          className: classNames$1(
            "cursor-pointer text-left w-full block px-4 py-2 text-sm hover:bg-gray-100 hover:text-gray-900"
          )
        },
        "Edit"
      ), /* @__PURE__ */ React.createElement(
        "button",
        {
          type: "button",
          onMouseDown: (e3) => {
            e3.preventDefault();
            onRemove();
          },
          className: classNames$1(
            "cursor-pointer text-left w-full block px-4 py-2 text-sm hover:bg-gray-100 hover:text-gray-900"
          )
        },
        "Remove"
      ))))
    ));
  };
  const ELEMENT_MDX_INLINE = "mdxJsxTextElement";
  const ELEMENT_MDX_BLOCK = "mdxJsxFlowElement";
  const Embed = (props) => {
    const editor = useEditorRef();
    const handleChange = (values) => {
      const path2 = editor.api.findPath(props.element);
      props.editor.tf.setNodes({ props: values }, { at: path2 });
    };
    if (props.inline) {
      return /* @__PURE__ */ React.createElement(InlineEmbed, { ...props, onChange: handleChange });
    }
    return /* @__PURE__ */ React.createElement(BlockEmbed, { ...props, onChange: handleChange });
  };
  const createMdxInlinePlugin = createPlatePlugin({
    key: ELEMENT_MDX_INLINE,
    node: {
      isElement: true,
      isVoid: true,
      isInline: true,
      component: (props) => /* @__PURE__ */ React.createElement(Embed, { ...props, inline: true })
    }
  });
  const createMdxBlockPlugin = createPlatePlugin({
    key: ELEMENT_MDX_BLOCK,
    node: {
      isElement: true,
      isVoid: true,
      component: (props) => /* @__PURE__ */ React.createElement(Embed, { ...props, inline: false })
    }
  });
  const insertMDX = (editor, value) => {
    const isInline = value.inline;
    if (isInline) {
      insertInlineElement(editor, {
        type: ELEMENT_MDX_INLINE,
        name: value.name,
        children: [{ text: "" }],
        props: value.defaultItem ? value.defaultItem : {}
      });
    } else {
      insertBlockElement(editor, {
        type: ELEMENT_MDX_BLOCK,
        name: value.name,
        children: [{ text: "" }],
        props: value.defaultItem ? value.defaultItem : {}
      });
      editor.tf.normalize({ force: true });
    }
  };
  var getMatchRange = ({
    match: match2,
    trigger: trigger2
  }) => {
    let start2;
    let end2;
    if (typeof match2 === "object") {
      start2 = match2.start;
      end2 = match2.end;
    } else {
      start2 = match2;
      end2 = start2.split("").reverse().join("");
    }
    const triggers = trigger2 ? castArray4$1(trigger2) : [end2.slice(-1)];
    end2 = trigger2 ? end2 : end2.slice(0, -1);
    return {
      end: end2,
      start: start2,
      triggers
    };
  };
  var autoformatBlock = (editor, {
    allowSameTypeAbove = false,
    format: format2,
    match: _match,
    matchByRegex = false,
    preFormat: preFormat2,
    text,
    trigger: trigger2,
    triggerAtBlockStart = true,
    type = plate.BaseParagraphPlugin.key
  }) => {
    const matches = castArray4$1(_match);
    for (const match2 of matches) {
      const { end: end2, triggers } = getMatchRange({
        match: { end: match2, start: "" },
        trigger: trigger2
      });
      if (!triggers.includes(text))
        continue;
      let matchRange;
      let textFromBlockStart = "";
      if (triggerAtBlockStart) {
        matchRange = editor.api.range("start", editor.selection);
        const hasVoidNode = editor.api.some({
          at: matchRange,
          match: (n2) => plate.ElementApi.isElement(n2) && editor.api.isVoid(n2)
        });
        if (hasVoidNode)
          continue;
        textFromBlockStart = editor.api.string(matchRange);
        const isMatched = matchByRegex ? !!textFromBlockStart.match(end2) : end2 === textFromBlockStart;
        if (!isMatched)
          continue;
      } else {
        matchRange = editor.api.range("before", editor.selection, {
          before: {
            matchByRegex,
            matchString: end2
          }
        });
        if (!matchRange)
          continue;
        textFromBlockStart = editor.api.string(matchRange);
      }
      if (!allowSameTypeAbove) {
        const isBelowSameBlockType = editor.api.some({ match: { type } });
        if (isBelowSameBlockType)
          continue;
      }
      if (match2.length > 1) {
        editor.tf.delete({
          at: matchRange
        });
      }
      if (preFormat2) {
        preFormat2(editor);
      }
      if (format2) {
        format2(editor, { matchString: textFromBlockStart });
      } else {
        editor.tf.setNodes(
          { type },
          {
            match: (n2) => editor.api.isBlock(n2)
          }
        );
      }
      return true;
    }
    return false;
  };
  var isPreviousCharacterEmpty = (editor, at2) => {
    const range2 = editor.api.range("before", at2);
    if (range2) {
      const text = editor.api.string(range2);
      if (text) {
        const noWhiteSpaceRegex = new RegExp(`\\S+`);
        return !noWhiteSpaceRegex.exec(text);
      }
    }
    return true;
  };
  var getMatchPoints = (editor, { end: end2, start: start2 }) => {
    const selection = editor.selection;
    let beforeEndMatchPoint = selection.anchor;
    if (end2) {
      beforeEndMatchPoint = editor.api.before(selection, {
        matchString: end2
      });
      if (!beforeEndMatchPoint)
        return;
    }
    let afterStartMatchPoint;
    let beforeStartMatchPoint;
    if (start2) {
      afterStartMatchPoint = editor.api.before(beforeEndMatchPoint, {
        afterMatch: true,
        matchString: start2,
        skipInvalid: true
      });
      if (!afterStartMatchPoint)
        return;
      beforeStartMatchPoint = editor.api.before(beforeEndMatchPoint, {
        matchString: start2,
        skipInvalid: true
      });
      if (!isPreviousCharacterEmpty(editor, beforeStartMatchPoint))
        return;
    }
    return {
      afterStartMatchPoint,
      beforeEndMatchPoint,
      beforeStartMatchPoint
    };
  };
  var autoformatMark = (editor, { ignoreTrim, match: _match, text, trigger: trigger2, type }) => {
    if (!type)
      return false;
    const selection = editor.selection;
    const matches = castArray4$1(_match);
    for (const match2 of matches) {
      const { end: end2, start: start2, triggers } = getMatchRange({
        match: match2,
        trigger: trigger2
      });
      if (!triggers.includes(text))
        continue;
      const matched = getMatchPoints(editor, { end: end2, start: start2 });
      if (!matched)
        continue;
      const { afterStartMatchPoint, beforeEndMatchPoint, beforeStartMatchPoint } = matched;
      const matchRange = {
        anchor: afterStartMatchPoint,
        focus: beforeEndMatchPoint
      };
      if (!ignoreTrim) {
        const matchText = editor.api.string(matchRange);
        if (matchText.trim() !== matchText)
          continue;
      }
      if (end2) {
        editor.tf.delete({
          at: {
            anchor: beforeEndMatchPoint,
            focus: selection.anchor
          }
        });
      }
      const marks2 = castArray4$1(type);
      editor.tf.select(matchRange);
      marks2.forEach((mark2) => {
        editor.tf.addMark(mark2, true);
      });
      editor.tf.collapse({ edge: "end" });
      editor.tf.removeMarks(marks2, { shouldChange: false });
      editor.tf.delete({
        at: {
          anchor: beforeStartMatchPoint,
          focus: afterStartMatchPoint
        }
      });
      return true;
    }
    return false;
  };
  var autoformatText = (editor, { format: format2, match: _match, text, trigger: trigger2 }) => {
    const selection = editor.selection;
    const matches = castArray4$1(_match);
    for (const match2 of matches) {
      const { end: end2, start: start2, triggers } = getMatchRange({
        match: Array.isArray(format2) ? match2 : {
          end: match2,
          start: ""
        },
        trigger: trigger2
      });
      if (!triggers.includes(text))
        continue;
      const matched = getMatchPoints(editor, { end: end2, start: start2 });
      if (!matched)
        continue;
      const { afterStartMatchPoint, beforeEndMatchPoint, beforeStartMatchPoint } = matched;
      if (end2) {
        editor.tf.delete({
          at: {
            anchor: beforeEndMatchPoint,
            focus: selection.anchor
          }
        });
      }
      if (typeof format2 === "function") {
        format2(editor, matched);
      } else {
        const formatEnd = Array.isArray(format2) ? format2[1] : format2;
        editor.tf.insertText(formatEnd);
        if (beforeStartMatchPoint) {
          const formatStart = Array.isArray(format2) ? format2[0] : format2;
          editor.tf.delete({
            at: {
              anchor: beforeStartMatchPoint,
              focus: afterStartMatchPoint
            }
          });
          editor.tf.insertText(formatStart, {
            at: beforeStartMatchPoint
          });
        }
      }
      return true;
    }
    return false;
  };
  var withAutoformat = ({
    editor,
    getOptions: getOptions2,
    tf: { insertText: insertText2 }
  }) => {
    return {
      transforms: {
        insertText(text, options) {
          var _a2;
          if (!editor.api.isCollapsed())
            return insertText2(text, options);
          for (const rule of getOptions2().rules) {
            const { insertTrigger, mode = "text", query } = rule;
            if (query && !query(editor, { ...rule, text }))
              continue;
            const autoformatter = {
              block: autoformatBlock,
              mark: autoformatMark,
              text: autoformatText
            };
            if ((_a2 = autoformatter[mode]) == null ? void 0 : _a2.call(autoformatter, editor, {
              ...rule,
              text
            })) {
              return insertTrigger && insertText2(text);
            }
          }
          insertText2(text, options);
        }
      }
    };
  };
  var BaseAutoformatPlugin = plate.createTSlatePlugin({
    key: "autoformat",
    options: {
      rules: []
    }
  }).overrideEditor(withAutoformat);
  var onKeyDownAutoformat = ({
    editor,
    event,
    getOptions: getOptions2
  }) => {
    const { enableUndoOnDelete, rules: rules2 } = getOptions2();
    if (event.defaultPrevented)
      return false;
    if (!plate.isHotkey("backspace", { byKey: true }, event))
      return false;
    if (!rules2)
      return false;
    if (!enableUndoOnDelete)
      return false;
    const { selection } = editor;
    if (!selection || !editor.api.isCollapsed())
      return;
    const [start2, end2] = plate.RangeApi.edges(selection);
    const before2 = editor.api.before(end2, {
      distance: 1,
      unit: "character"
    });
    if (!start2)
      return false;
    if (!before2)
      return false;
    const charRange = { anchor: before2, focus: start2 };
    if (!charRange)
      return false;
    const char = editor.api.string(charRange);
    if (!char)
      return false;
    const matchers = [...rules2].filter((rule2) => {
      const textRule = rule2;
      if (textRule) {
        return textRule.mode === "text" && textRule.format === char;
      }
      return false;
    });
    if (!matchers || matchers.length === 0)
      return false;
    event.preventDefault();
    editor.tf.deleteBackward();
    const rule = matchers[0];
    if (rule && typeof rule.match === "string") {
      editor.tf.insertText(rule.match);
    } else {
      const matchArray = rule.match;
      if (matchArray && matchArray.length > 0) {
        editor.tf.insertText(matchArray[0]);
      }
    }
    return true;
  };
  var AutoformatPlugin = toPlatePlugin(BaseAutoformatPlugin, {
    handlers: {
      onKeyDown: onKeyDownAutoformat
    }
  });
  var BaseExitBreakPlugin = plate.createTSlatePlugin({
    key: "exitBreak",
    options: {
      rules: [
        { hotkey: "mod+enter" },
        { before: true, hotkey: "mod+shift+enter" }
      ]
    }
  });
  var exitBreakAtEdges = (editor, {
    end: end2,
    start: start2
  }) => {
    let queryEdge = false;
    let isEdge2 = false;
    let isStart2 = false;
    if (start2 || end2) {
      queryEdge = true;
      if (start2 && editor.api.isAt({ start: true })) {
        isEdge2 = true;
        isStart2 = true;
      }
      if (end2 && editor.api.isAt({ end: true })) {
        isEdge2 = true;
      }
      if (isEdge2 && editor.api.isExpanded()) {
        editor.tf.deleteFragment();
      }
    }
    return {
      isEdge: isEdge2,
      isStart: isStart2,
      queryEdge
    };
  };
  var exitBreak = (editor, {
    before: before2,
    defaultType = editor.getType(plate.BaseParagraphPlugin),
    level = 0,
    query = {},
    relative = false
  }) => {
    if (!editor.selection)
      return;
    const { isEdge: isEdge2, isStart: isStart2, queryEdge } = exitBreakAtEdges(editor, query);
    if (isStart2)
      before2 = true;
    if (queryEdge && !isEdge2)
      return;
    const selectionPath = editor.api.path(editor.selection);
    const slicedPath = relative ? selectionPath.slice(0, -level) : selectionPath.slice(0, level + 1);
    const insertPath = before2 ? slicedPath : plate.PathApi.next(slicedPath);
    editor.tf.insertNodes(
      editor.api.create.block({ children: [{ text: "" }], type: defaultType }),
      {
        at: insertPath,
        select: !isStart2
      }
    );
    return true;
  };
  var onKeyDownExitBreak = ({
    editor,
    event,
    getOptions: getOptions2
  }) => {
    const { rules: rules2 = [] } = getOptions2();
    if (event.defaultPrevented)
      return;
    const entry = editor.api.block();
    if (!entry)
      return;
    rules2.forEach(({ hotkey, ...rule }) => {
      if (plate.isHotkey(hotkey, event) && plate.queryNode(entry, rule.query) && exitBreak(editor, rule)) {
        event.preventDefault();
        event.stopPropagation();
      }
    });
  };
  var ExitBreakPlugin = toPlatePlugin(BaseExitBreakPlugin, {
    handlers: {
      onKeyDown: onKeyDownExitBreak
    }
  });
  var withSingleLine = ({
    editor,
    tf: { normalizeNode: normalizeNode2 }
  }) => ({
    transforms: {
      insertBreak() {
        return null;
      },
      normalizeNode(entry) {
        if (entry[1].length === 0 && editor.children.length > 1) {
          editor.tf.removeNodes({
            at: [],
            mode: "highest",
            match: (node2, path2) => path2.length === 1 && path2[0] > 0
          });
          return;
        }
        normalizeNode2(entry);
      }
    }
  });
  var BaseSingleLinePlugin = plate.createSlatePlugin({
    key: "singleLine"
  }).overrideEditor(withSingleLine);
  var onKeyDownSingleLine = ({ event }) => {
    if (event.defaultPrevented)
      return;
    if (plate.Hotkeys.isSplitBlock(event)) {
      event.preventDefault();
    }
  };
  toPlatePlugin(BaseSingleLinePlugin, {
    handlers: {
      onKeyDown: onKeyDownSingleLine
    }
  });
  var BaseSoftBreakPlugin = plate.createTSlatePlugin({
    key: "softBreak",
    options: {
      rules: [{ hotkey: "shift+enter" }]
    }
  });
  var onKeyDownSoftBreak = ({
    editor,
    event,
    getOptions: getOptions2
  }) => {
    const { rules: rules2 = [] } = getOptions2();
    if (event.defaultPrevented)
      return;
    const entry = editor.api.block();
    if (!entry)
      return;
    rules2.forEach(({ hotkey, query }) => {
      if (plate.isHotkey(hotkey, event) && plate.queryNode(entry, query)) {
        event.preventDefault();
        event.stopPropagation();
        editor.tf.insertText("\n");
      }
    });
  };
  var SoftBreakPlugin = toPlatePlugin(BaseSoftBreakPlugin, {
    handlers: {
      onKeyDown: onKeyDownSoftBreak
    }
  });
  const preFormat = (editor) => plateList.unwrapList(editor);
  const format = (editor, customFormatting) => {
    if (editor.selection) {
      const parentEntry = editor.api.parent(editor.selection);
      if (!parentEntry)
        return;
      const [node2] = parentEntry;
      if (plate.ElementApi.isElement(node2) && !plate.isType(editor, node2, CodeBlockPlugin.key) && !plate.isType(editor, node2, CodeLinePlugin.key)) {
        customFormatting();
      }
    }
  };
  const formatList = (editor, elementType) => {
    format(
      editor,
      () => plateList.toggleList(editor, {
        type: elementType
      })
    );
  };
  const autoformatBlocks = [
    {
      mode: "block",
      type: plateHeading.HEADING_KEYS.h1,
      match: "# ",
      preFormat
    },
    {
      mode: "block",
      type: plateHeading.HEADING_KEYS.h2,
      match: "## ",
      preFormat
    },
    {
      mode: "block",
      type: plateHeading.HEADING_KEYS.h3,
      match: "### ",
      preFormat
    },
    {
      mode: "block",
      type: plateHeading.HEADING_KEYS.h4,
      match: "#### ",
      preFormat
    },
    {
      mode: "block",
      type: plateHeading.HEADING_KEYS.h5,
      match: "##### ",
      preFormat
    },
    {
      mode: "block",
      type: plateHeading.HEADING_KEYS.h6,
      match: "###### ",
      preFormat
    },
    {
      mode: "block",
      type: BlockquotePlugin.key,
      match: "> ",
      preFormat
    },
    {
      mode: "block",
      type: CodeBlockPlugin.key,
      match: "```",
      preFormat,
      format: (editor) => {
        plateCodeBlock.insertEmptyCodeBlock(editor, {
          defaultType: ParagraphPlugin.key,
          insertNodesOptions: { select: true }
        });
      }
    },
    {
      mode: "block",
      type: HorizontalRulePlugin.key,
      match: ["---", "—-", "___ "],
      format: (editor) => {
        editor.tf.setNodes({ type: HorizontalRulePlugin.key });
        editor.tf.insertNodes({
          type: ParagraphPlugin.key,
          children: [{ text: "" }]
        });
      }
    }
  ];
  const autoformatLists = [
    {
      mode: "block",
      type: ListItemPlugin.key,
      match: ["* ", "- "],
      preFormat,
      format: (editor) => formatList(editor, BulletedListPlugin.key)
    },
    {
      mode: "block",
      type: ListItemPlugin.key,
      match: ["1. ", "1) "],
      preFormat,
      format: (editor) => formatList(editor, NumberedListPlugin.key)
    },
    {
      mode: "block",
      type: TodoListPlugin.key,
      match: "[] "
    },
    {
      mode: "block",
      type: TodoListPlugin.key,
      match: "[x] ",
      format: (editor) => editor.tf.setNodes(
        { type: TodoListPlugin.key, checked: true },
        {
          match: (n2) => editor.api.isBlock(n2)
        }
      )
    }
  ];
  const autoformatMarks = [
    {
      mode: "mark",
      type: [BoldPlugin.key, ItalicPlugin.key],
      match: "***"
    },
    {
      mode: "mark",
      type: BoldPlugin.key,
      match: "**"
    },
    {
      mode: "mark",
      type: ItalicPlugin.key,
      match: "*"
    },
    {
      mode: "mark",
      type: ItalicPlugin.key,
      match: "_"
    },
    {
      mode: "mark",
      type: CodePlugin.key,
      match: "`"
    },
    {
      mode: "mark",
      type: StrikethroughPlugin.key,
      match: ["~~", "~"]
    }
  ];
  const autoformatRules = [
    ...autoformatBlocks,
    ...autoformatLists,
    ...autoformatMarks
  ];
  const HANDLES_MDX = [
    plateHeading.HEADING_KEYS.h1,
    plateHeading.HEADING_KEYS.h2,
    plateHeading.HEADING_KEYS.h3,
    plateHeading.HEADING_KEYS.h4,
    plateHeading.HEADING_KEYS.h5,
    plateHeading.HEADING_KEYS.h6,
    ParagraphPlugin.key
  ];
  ({
    types: [
      BlockquotePlugin.key,
      plateHeading.HEADING_KEYS.h1,
      plateHeading.HEADING_KEYS.h2,
      plateHeading.HEADING_KEYS.h3,
      plateHeading.HEADING_KEYS.h4,
      plateHeading.HEADING_KEYS.h5,
      plateHeading.HEADING_KEYS.h6
      // NOTE: code blocks behave strangely when used here
    ],
    defaultType: ParagraphPlugin.key
  });
  [
    plateTrailingBlock.TrailingBlockPlugin,
    AutoformatPlugin.configure({
      options: {
        rules: autoformatRules
      }
    }),
    ExitBreakPlugin.configure({
      options: {
        rules: [
          // Break out of a block entirely, eg. get out of a blockquote
          // TOOD: maybe this should be shift+enter, but that's a soft break
          // for other things like list items (see below)
          {
            hotkey: "mod+enter"
          },
          // Same as above but drops you at the top of a block
          {
            hotkey: "mod+shift+enter",
            before: true
          },
          {
            hotkey: "enter",
            query: {
              start: true,
              end: true,
              allow: plateHeading.HEADING_LEVELS
            }
          }
        ]
      }
    }),
    //See the usage code example from https://platejs.org/docs/reset-node
    ResetNodePlugin.configure({
      // options: {
      //   rules: [
      //     {
      //       ...resetBlockTypesCommonRule,
      //       hotkey: 'Enter',
      //       predicate: editor.api.isEmpty(editor.selection, { block: true }),
      //     },
      //     {
      //       ...resetBlockTypesCommonRule,
      //       hotkey: 'Backspace',
      //       predicate: isSelectionAtBlockStart,
      //     },
      //   ],
      // },
    }),
    SoftBreakPlugin.configure({
      options: {
        rules: [
          { hotkey: "shift+enter" },
          {
            hotkey: "enter",
            query: {
              allow: [CodeBlockPlugin.key]
            }
          }
        ]
      }
    })
  ];
  const unsupportedItemsInTable = /* @__PURE__ */ new Set([
    "Code Block",
    "Unordered List",
    "Ordered List",
    "Horizontal Rule",
    "Quote",
    "Mermaid",
    "Heading 1",
    "Heading 2",
    "Heading 3",
    "Heading 4",
    "Heading 5",
    "Heading 6"
  ]);
  const isNodeActive = (editor, type) => {
    const pluginType = editor.getType(type);
    return !!(editor == null ? void 0 : editor.selection) && editor.api.some({ match: { type: pluginType } });
  };
  const isListActive = (editor, type) => {
    const res = !!(editor == null ? void 0 : editor.selection) && plateList.getListItemEntry(editor);
    return !!res && res.list[0].type === type;
  };
  const normalize = (node2) => {
    if ([ELEMENT_MDX_BLOCK, ELEMENT_MDX_INLINE, ELEMENT_IMG].includes(node2.type)) {
      return {
        ...node2,
        children: [{ type: "text", text: "" }],
        id: Date.now()
      };
    }
    if (node2.children) {
      if (node2.children.length) {
        return {
          ...node2,
          children: node2.children.map(normalize),
          id: Date.now()
        };
      }
      return {
        ...node2,
        children: [{ text: "" }],
        id: Date.now()
      };
    }
    return node2;
  };
  const insertInlineElement = (editor, inlineElement) => {
    editor.tf.insertNodes([inlineElement]);
  };
  const insertBlockElement = (editor, blockElement) => {
    editor.tf.withoutNormalizing(() => {
      const block2 = editor.api.block();
      if (!block2)
        return;
      if (isCurrentBlockEmpty(editor)) {
        editor.tf.setNodes(blockElement);
      } else {
        editor.tf.insertNodes([blockElement]);
      }
    });
  };
  const isCurrentBlockEmpty = (editor) => {
    var _a2;
    if (!editor.selection) {
      return false;
    }
    const [node2] = editor.api.node(editor.selection);
    const cursor = editor.selection.focus;
    const blockAbove = editor.api.block();
    const isEmpty2 = !plate.NodeApi.string(node2) && // @ts-ignore bad type from slate
    !((_a2 = node2.children) == null ? void 0 : _a2.some((n2) => Editor.isInline(editor, n2))) && // Only do this if we're at the start of a block
    editor.api.isStart(cursor, blockAbove[1]);
    return isEmpty2;
  };
  const currentNodeSupportsMDX = (editor) => editor.api.node({
    match: { type: HANDLES_MDX }
  });
  function normalizeLinksInCodeBlocks(node2) {
    if (node2.type === "code_line" && node2.children) {
      return {
        ...node2,
        children: node2.children.flatMap((child) => {
          if (child.type === "a") {
            return child.children || [];
          }
          return [normalizeLinksInCodeBlocks(child)];
        })
      };
    }
    if (node2.children) {
      return {
        ...node2,
        children: node2.children.map(normalizeLinksInCodeBlocks)
      };
    }
    return node2;
  }
  const helpers = {
    isNodeActive,
    isListActive,
    currentNodeSupportsMDX,
    normalize,
    normalizeLinksInCodeBlocks
  };
  const editorContainerVariants = classVarianceAuthority.cva(
    "relative w-full cursor-text caret-primary select-text selection:bg-brand/25 focus-visible:outline-none [&_.slate-selection-area]:z-50 [&_.slate-selection-area]:border [&_.slate-selection-area]:border-brand/25 [&_.slate-selection-area]:bg-brand/15",
    {
      defaultVariants: {
        variant: "default"
      },
      variants: {
        variant: {
          comment: cn$2.cn(
            "flex flex-wrap justify-between gap-1 px-1 py-0.5 text-sm",
            "rounded-md border-[1.5px] border-transparent bg-transparent",
            "has-[[data-slate-editor]:focus]:border-brand/50 has-[[data-slate-editor]:focus]:ring-2 has-[[data-slate-editor]:focus]:ring-brand/30",
            "has-aria-disabled:border-input has-aria-disabled:bg-muted"
          ),
          default: "h-full",
          demo: "h-[650px]",
          select: cn$2.cn(
            "group rounded-md border border-input ring-offset-background focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2",
            "has-data-readonly:w-fit has-data-readonly:cursor-default has-data-readonly:border-transparent has-data-readonly:focus-within:[box-shadow:none]"
          )
        }
      }
    }
  );
  const EditorContainer = ({
    className,
    variant,
    ...props
  }) => {
    return /* @__PURE__ */ React__namespace.createElement(
      PlateContainer,
      {
        className: cn$2.cn(
          "ignore-click-outside/toolbar",
          editorContainerVariants({ variant }),
          className
        ),
        ...props
      }
    );
  };
  EditorContainer.displayName = "EditorContainer";
  const editorVariants = classVarianceAuthority.cva(
    cn$2.cn(
      "group/editor",
      "relative w-full cursor-text overflow-x-hidden overflow-y-auto break-words whitespace-pre-wrap select-text",
      "rounded-md ring-offset-background focus-visible:outline-none",
      "placeholder:text-muted-foreground/80 **:data-slate-placeholder:top-[auto_!important] **:data-slate-placeholder:text-muted-foreground/80 **:data-slate-placeholder:opacity-100!",
      "[&_strong]:font-bold"
    ),
    {
      defaultVariants: {
        variant: "default"
      },
      variants: {
        disabled: {
          true: "cursor-not-allowed opacity-50"
        },
        focused: {
          true: "ring-2 ring-ring ring-offset-2"
        },
        variant: {
          ai: "w-full px-0 text-base md:text-sm",
          aiChat: "max-h-[min(70vh,320px)] w-full max-w-[700px] overflow-y-auto px-3 py-2 text-base md:text-sm",
          comment: cn$2.cn("rounded-none border-none bg-transparent text-sm"),
          default: "size-full px-16 pt-2 text-base sm:px-[max(24px,calc(50%-350px))]",
          demo: "size-full px-16 pt-2 text-base sm:px-[max(24px,calc(50%-350px))]",
          fullWidth: "size-full px-16 pt-4 pb-72 text-base sm:px-12",
          none: "",
          select: "px-3 py-2 text-base data-readonly:w-fit"
        }
      }
    }
  );
  const Editor$1 = React__namespace.forwardRef(
    ({ className, disabled, focused, variant, ...props }, ref) => {
      return /* @__PURE__ */ React__namespace.createElement(
        PlateContent,
        {
          ref,
          className: cn$2.cn(
            editorVariants({
              disabled,
              focused,
              variant
            }),
            className
          ),
          disabled,
          disableDefaultStyles: true,
          ...props
        }
      );
    }
  );
  Editor$1.displayName = "Editor";
  const FixedToolbar = cn$2.withCn(
    Toolbar,
    "p-1 sticky left-0 top-0 z-50 w-full justify-between overflow-x-auto border-b border-border bg-background rounded-t-md"
  );
  const useResize = (ref, callback) => {
    React.useEffect(() => {
      const resizeObserver = new ResizeObserver((entries) => {
        for (const entry of entries) {
          callback(entry);
        }
      });
      if (ref.current) {
        resizeObserver.observe(ref.current);
      }
      return () => resizeObserver.disconnect();
    }, [ref.current]);
  };
  const STANDARD_ICON_WIDTH = 32;
  const HEADING_ICON_WITH_TEXT = 127;
  const HEADING_ICON_ONLY = 58;
  const EMBED_ICON_WIDTH = 78;
  const CONTAINER_MD_BREAKPOINT = 448;
  const HEADING_LABEL = "Headings";
  const ToolbarContext = React.createContext(
    void 0
  );
  const ToolbarProvider = ({
    tinaForm,
    templates,
    overrides,
    children
  }) => {
    return /* @__PURE__ */ React.createElement(ToolbarContext.Provider, { value: { tinaForm, templates, overrides } }, children);
  };
  const useToolbarContext = () => {
    const context = React.useContext(ToolbarContext);
    if (!context) {
      throw new Error("useToolbarContext must be used within a ToolbarProvider");
    }
    return context;
  };
  const items$1 = [
    {
      description: "Paragraph",
      icon: Icons.heading,
      label: "Paragraph",
      value: ParagraphPlugin.key
    },
    {
      description: "Heading 1",
      icon: Icons.h1,
      label: "Heading 1",
      value: plateHeading.HEADING_KEYS.h1
    },
    {
      description: "Heading 2",
      icon: Icons.h2,
      label: "Heading 2",
      value: plateHeading.HEADING_KEYS.h2
    },
    {
      description: "Heading 3",
      icon: Icons.h3,
      label: "Heading 3",
      value: plateHeading.HEADING_KEYS.h3
    },
    {
      description: "Heading 4",
      icon: Icons.h4,
      label: "Heading 4",
      value: plateHeading.HEADING_KEYS.h4
    },
    {
      description: "Heading 5",
      icon: Icons.h5,
      label: "Heading 5",
      value: plateHeading.HEADING_KEYS.h5
    },
    {
      description: "Heading 6",
      icon: Icons.h6,
      label: "Heading 6",
      value: plateHeading.HEADING_KEYS.h6
    }
  ];
  const defaultItem$1 = items$1.find((item) => item.value === ParagraphPlugin.key) || items$1[0];
  function HeadingsMenu(props) {
    const value = useEditorSelector((editor2) => {
      let initialNodeType = ParagraphPlugin.key;
      let allNodesMatchInitialNodeType = false;
      const codeBlockEntries = editor2.api.nodes({
        match: (n2) => editor2.api.isBlock(n2),
        mode: "highest"
      });
      const nodes2 = Array.from(codeBlockEntries);
      if (nodes2.length > 0) {
        initialNodeType = nodes2[0][0].type;
        allNodesMatchInitialNodeType = nodes2.every(([node2]) => {
          const type = (node2 == null ? void 0 : node2.type) || ParagraphPlugin.key;
          return type === initialNodeType;
        });
      }
      return allNodesMatchInitialNodeType ? initialNodeType : ParagraphPlugin.key;
    }, []);
    const editor = useEditorRef();
    const editorState = useEditorState();
    const openState = useOpenState();
    const userInTable = helpers.isNodeActive(editorState, TablePlugin.key);
    const selectedItem = items$1.find((item) => item.value === value) ?? defaultItem$1;
    const { icon: SelectedItemIcon, label: selectedItemLabel } = selectedItem;
    return /* @__PURE__ */ React.createElement("div", { className: "rounded-md" }, /* @__PURE__ */ React.createElement(DropdownMenu$1, { modal: false, ...openState, ...props }, /* @__PURE__ */ React.createElement(DropdownMenuTrigger$1, { asChild: true }, /* @__PURE__ */ React.createElement(
      ToolbarButton,
      {
        showArrow: true,
        isDropdown: true,
        pressed: openState.open,
        tooltip: "Headings"
      },
      /* @__PURE__ */ React.createElement(SelectedItemIcon, { className: "size-5" }),
      /* @__PURE__ */ React.createElement("span", { className: "@md/toolbar:flex hidden" }, selectedItemLabel)
    )), /* @__PURE__ */ React.createElement(DropdownMenuContent$1, { align: "start", className: "min-w-0 rounded-md" }, /* @__PURE__ */ React.createElement(
      DropdownMenuRadioGroup,
      {
        className: "flex flex-col gap-0.5",
        onValueChange: (type) => {
          editor.tf.toggleBlock(type);
          editor.tf.collapse();
          editor.tf.focus();
        },
        value
      },
      items$1.filter((item) => {
        if (userInTable) {
          return !unsupportedItemsInTable.has(item.label);
        }
        return true;
      }).map(({ icon: Icon, label, value: itemValue }) => /* @__PURE__ */ React.createElement(
        DropdownMenuRadioItem,
        {
          className: "min-w-[180px]",
          key: itemValue,
          value: itemValue
        },
        /* @__PURE__ */ React.createElement(Icon, { className: "mr-2 size-5" }),
        label
      ))
    ))));
  }
  const useCodeBlockToolbarButtonState = () => {
    const editor = useEditorState();
    const isBlockActive = () => helpers.isNodeActive(editor, CodeBlockPlugin.key);
    return {
      pressed: isBlockActive()
    };
  };
  const useCodeBlockToolbarButton = (state) => {
    const editor = useEditorState();
    const onClick = () => {
      plateCodeBlock.insertEmptyCodeBlock(editor);
    };
    const onMouseDown = (e3) => {
      e3.preventDefault();
      e3.stopPropagation();
    };
    return {
      props: {
        onClick,
        onMouseDown,
        pressed: state.pressed
      }
    };
  };
  const CodeBlockToolbarButton = cn$2.withRef(({ clear, ...rest }, ref) => {
    const state = useCodeBlockToolbarButtonState();
    const { props } = useCodeBlockToolbarButton(state);
    return /* @__PURE__ */ React.createElement(ToolbarButton, { ref, tooltip: "Code Block", ...rest, ...props }, /* @__PURE__ */ React.createElement(Icons.codeBlock, null));
  });
  const useImageToolbarButtonState = () => {
    const editor = useEditorState();
    const isBlockActive = () => helpers.isNodeActive(editor, ELEMENT_IMG);
    return {
      pressed: isBlockActive()
    };
  };
  const useImageToolbarButton = (state) => {
    const editor = useEditorState();
    const cms = useCMS$1();
    const onMouseDown = (e3) => {
      e3.preventDefault();
      cms.media.open({
        allowDelete: true,
        directory: "",
        onSelect: (media) => {
          insertImg(editor, media);
        }
      });
    };
    return {
      props: {
        onMouseDown,
        pressed: state.pressed
      }
    };
  };
  const ImageToolbarButton = cn$2.withRef(({ clear, ...rest }, ref) => {
    const state = useImageToolbarButtonState();
    const { props } = useImageToolbarButton(state);
    return /* @__PURE__ */ React.createElement(ToolbarButton, { ref, tooltip: "Image", ...rest, ...props }, /* @__PURE__ */ React.createElement(Icons.image, null));
  });
  const LinkToolbarButton = cn$2.withRef((rest, ref) => {
    const state = useLinkToolbarButtonState();
    const { props } = useLinkToolbarButton(state);
    return /* @__PURE__ */ React.createElement(ToolbarButton, { ref, ...props, ...rest, tooltip: "Link" }, /* @__PURE__ */ React.createElement(Icons.link, null));
  });
  const DEFAULT_MERMAID_CONFIG = `%% This won't render without implementing a rendering engine (e.g. mermaid on npm)
flowchart TD
    id1(this is an example flow diagram)
    --> id2(modify me to see changes!)
    id2
    --> id3(Click the top button to preview the changes)
    --> id4(Learn about mermaid diagrams - mermaid.js.org)`;
  const useMermaidToolbarButtonState = () => {
    const editor = useEditorState();
    const isBlockActive = () => helpers.isNodeActive(editor, CodeBlockPlugin.key);
    return {
      pressed: isBlockActive()
    };
  };
  function makeCodeLine(text) {
    return {
      type: "code_line",
      children: [{ text }]
    };
  }
  const useMermaidToolbarButton = (state) => {
    const editor = useEditorState();
    const onClick = () => {
      const newMermaidCodeBlockNode = {
        type: CodeBlockPlugin.key,
        lang: "mermaid",
        children: DEFAULT_MERMAID_CONFIG.split("\n").map(makeCodeLine),
        value: DEFAULT_MERMAID_CONFIG
      };
      editor.tf.insertNodes(newMermaidCodeBlockNode, {
        nextBlock: true,
        select: true
      });
    };
    const onMouseDown = (e3) => {
      e3.preventDefault();
      e3.stopPropagation();
    };
    return {
      props: {
        onClick,
        onMouseDown,
        pressed: state.pressed
      }
    };
  };
  const MermaidToolbarButton = cn$2.withRef(({ clear, ...rest }, ref) => {
    const state = useMermaidToolbarButtonState();
    const { props } = useMermaidToolbarButton(state);
    return /* @__PURE__ */ React.createElement(ToolbarButton, { ref, tooltip: "Mermaid", ...rest, ...props }, /* @__PURE__ */ React.createElement(Icons.mermaid, null));
  });
  function OverflowMenu({
    children,
    ...props
  }) {
    const openState = useOpenState();
    return /* @__PURE__ */ React.createElement(DropdownMenu$1, { modal: false, ...openState, ...props }, /* @__PURE__ */ React.createElement(DropdownMenuTrigger$1, { asChild: true }, /* @__PURE__ */ React.createElement(
      ToolbarButton,
      {
        showArrow: false,
        "data-testid": "rich-text-editor-overflow-menu-button",
        isDropdown: true,
        pressed: openState.open,
        tooltip: "More tools..."
      },
      /* @__PURE__ */ React.createElement(Icons.overflow, { className: "size-5" })
    )), /* @__PURE__ */ React.createElement(DropdownMenuContent$1, { align: "start", className: "min-w-0 flex flex-grow" }, children));
  }
  const useBlockQuoteToolbarButtonState = () => {
    const editor = useEditorState();
    const isBlockActive = () => helpers.isNodeActive(editor, plateBlockQuote.BaseBlockquotePlugin.key);
    return {
      pressed: isBlockActive()
    };
  };
  const useBlockQuoteToolbarButton = (state) => {
    const editor = useEditorState();
    const onClick = () => {
      editor.tf.toggleBlock(plateBlockQuote.BaseBlockquotePlugin.key);
    };
    const onMouseDown = (e3) => {
      e3.preventDefault();
      e3.stopPropagation();
    };
    return {
      props: {
        onClick,
        onMouseDown,
        pressed: state.pressed
      }
    };
  };
  const QuoteToolbarButton = cn$2.withRef(({ clear, ...rest }, ref) => {
    const state = useBlockQuoteToolbarButtonState();
    const { props } = useBlockQuoteToolbarButton(state);
    return /* @__PURE__ */ React.createElement(ToolbarButton, { ref, tooltip: "Quote (⌘+⇧+.)", ...rest, ...props }, /* @__PURE__ */ React.createElement(Icons.quote, null));
  });
  const useRawMarkdownToolbarButton = () => {
    const { setRawMode } = useEditorContext();
    const onMouseDown = (e3) => {
      setRawMode(true);
    };
    return {
      props: {
        onMouseDown,
        pressed: false
      }
    };
  };
  const RawMarkdownToolbarButton = cn$2.withRef(({ clear, ...rest }, ref) => {
    const { props } = useRawMarkdownToolbarButton();
    return /* @__PURE__ */ React.createElement(
      ToolbarButton,
      {
        ref,
        tooltip: "Raw Markdown",
        ...rest,
        ...props,
        "data-testid": "markdown-button"
      },
      /* @__PURE__ */ React.createElement(Icons.raw, null)
    );
  });
  const useHorizontalRuleToolbarButtonState = () => {
    const editor = useEditorState();
    const isBlockActive = () => helpers.isNodeActive(editor, HorizontalRulePlugin.key);
    return {
      pressed: isBlockActive()
    };
  };
  const useHorizontalRuleToolbarButton = (state) => {
    const editor = useEditorState();
    const onClick = () => {
      editor.tf.insertNodes({
        type: ParagraphPlugin.key,
        children: [{ text: "" }]
      });
      editor.tf.setNodes({ type: HorizontalRulePlugin.key });
      editor.tf.insertNodes({
        type: ParagraphPlugin.key,
        children: [{ text: "" }]
      });
    };
    const onMouseDown = (e3) => {
      e3.preventDefault();
      e3.stopPropagation();
    };
    return {
      props: {
        onClick,
        onMouseDown,
        pressed: state.pressed
      }
    };
  };
  const HorizontalRuleToolbarButton = cn$2.withRef(({ clear, ...rest }, ref) => {
    const state = useHorizontalRuleToolbarButtonState();
    const { props } = useHorizontalRuleToolbarButton(state);
    return /* @__PURE__ */ React.createElement(ToolbarButton, { ref, tooltip: "Horizontal Rule", ...rest, ...props }, /* @__PURE__ */ React.createElement(Icons.horizontalRule, null));
  });
  function TemplatesToolbarButton() {
    const { templates } = useToolbarContext();
    const editor = useEditorState();
    return /* @__PURE__ */ React.createElement(EmbedButton, { templates, editor });
  }
  const EmbedButton = ({ editor, templates }) => {
    const [open2, setOpen] = React.useState(false);
    const [filteredTemplates, setFilteredTemplates] = React.useState(templates);
    const filterChange = (e3) => {
      const filterText = e3.target.value.toLowerCase();
      setFilteredTemplates(
        templates.filter(
          (template) => template.name.toLowerCase().includes(filterText)
        )
      );
    };
    return /* @__PURE__ */ React.createElement(DropdownMenu$1, { open: open2, onOpenChange: setOpen }, /* @__PURE__ */ React.createElement(DropdownMenuTrigger$1, { className: "inline-flex items-center rounded-full text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg:not([data-icon])]:size-5 h-9 px-2 bg-transparent hover:bg-muted hover:text-muted-foreground aria-checked:bg-accent aria-checked:text-accent-foreground my-1 justify-between pr-1" }, /* @__PURE__ */ React.createElement("span", { className: "flex" }, "Embed"), /* @__PURE__ */ React.createElement(
      PlusIcon,
      {
        className: `origin-center transition-all ease-out duration-150 ${open2 ? "rotate-45" : ""}`
      }
    )), /* @__PURE__ */ React.createElement(DropdownMenuContent$1, { className: "max-h-48 overflow-y-auto" }, templates.length > 10 && /* @__PURE__ */ React.createElement(
      "input",
      {
        type: "text",
        placeholder: "Filter templates...",
        className: "w-full p-2 border border-gray-300 rounded",
        onChange: filterChange
      }
    ), /* @__PURE__ */ React.createElement(DropdownMenuSeparator, null), filteredTemplates.map((template) => /* @__PURE__ */ React.createElement(
      DropdownMenuItem$1,
      {
        key: template.name,
        onMouseDown: (e3) => {
          e3.preventDefault();
          setOpen(false);
          insertMDX(editor, template);
        },
        className: ""
      },
      template.label || template.name
    ))));
  };
  const MarkToolbarButton = cn$2.withRef(({ clear, nodeType, ...rest }, ref) => {
    const state = useMarkToolbarButtonState({ clear, nodeType });
    const { props } = useMarkToolbarButton(state);
    return /* @__PURE__ */ React.createElement(ToolbarButton, { ref, ...props, ...rest });
  });
  const BoldToolbarButton = () => /* @__PURE__ */ React.createElement(MarkToolbarButton, { tooltip: "Bold (⌘+B)", nodeType: BoldPlugin.key }, /* @__PURE__ */ React.createElement(Icons.bold, null));
  const StrikethroughToolbarButton = () => /* @__PURE__ */ React.createElement(MarkToolbarButton, { tooltip: "Strikethrough", nodeType: StrikethroughPlugin.key }, /* @__PURE__ */ React.createElement(Icons.strikethrough, null));
  const ItalicToolbarButton = () => /* @__PURE__ */ React.createElement(MarkToolbarButton, { tooltip: "Italic (⌘+I)", nodeType: ItalicPlugin.key }, /* @__PURE__ */ React.createElement(Icons.italic, null));
  const CodeToolbarButton = () => /* @__PURE__ */ React.createElement(MarkToolbarButton, { tooltip: "Code (⌘+E)", nodeType: CodePlugin.key }, /* @__PURE__ */ React.createElement(Icons.code, null));
  const ListToolbarButton = cn$2.withRef(({ nodeType = BulletedListPlugin.key, ...rest }, ref) => {
    const state = useListToolbarButtonState({ nodeType });
    const { props } = useListToolbarButton(state);
    return /* @__PURE__ */ React.createElement(
      ToolbarButton,
      {
        ref,
        tooltip: nodeType === BulletedListPlugin.key ? "Bulleted List" : "Numbered List",
        ...props,
        ...rest
      },
      nodeType === BulletedListPlugin.key ? /* @__PURE__ */ React.createElement(lucideReact.List, null) : /* @__PURE__ */ React.createElement(lucideReact.ListOrdered, null)
    );
  });
  function TableDropdownMenu(props) {
    const tableSelected = useEditorSelector(
      (editor2) => editor2.api.some({ match: { type: TablePlugin.key } }),
      []
    );
    const { editor, tf } = useEditorPlugin(TablePlugin);
    const openState = useOpenState();
    const mergeState = useTableMergeState();
    return /* @__PURE__ */ React.createElement(DropdownMenu$1, { modal: false, ...openState, ...props }, /* @__PURE__ */ React.createElement(DropdownMenuTrigger$1, { asChild: true }, /* @__PURE__ */ React.createElement(ToolbarButton, { pressed: openState.open, tooltip: "Table", isDropdown: true }, /* @__PURE__ */ React.createElement(lucideReact.Table, null))), /* @__PURE__ */ React.createElement(
      DropdownMenuContent$1,
      {
        className: "flex w-[180px] min-w-0 flex-col",
        align: "start"
      },
      /* @__PURE__ */ React.createElement(DropdownMenuGroup, null, /* @__PURE__ */ React.createElement(DropdownMenuSub, null, /* @__PURE__ */ React.createElement(DropdownMenuSubTrigger, null, /* @__PURE__ */ React.createElement(lucideReact.Grid3x3Icon, null), /* @__PURE__ */ React.createElement("span", null, "Table")), /* @__PURE__ */ React.createElement(DropdownMenuSubContent, { className: "m-0 p-0" }, /* @__PURE__ */ React.createElement(TablePicker, null))), /* @__PURE__ */ React.createElement(DropdownMenuSub, null, /* @__PURE__ */ React.createElement(DropdownMenuSubTrigger, { disabled: !tableSelected }, /* @__PURE__ */ React.createElement("div", { className: "size-4" }), /* @__PURE__ */ React.createElement("span", null, "Cell")), /* @__PURE__ */ React.createElement(DropdownMenuSubContent, null, /* @__PURE__ */ React.createElement(
        DropdownMenuItem$1,
        {
          className: "min-w-[180px]",
          disabled: !mergeState.canMerge,
          onSelect: () => {
            tf.table.merge();
            editor.tf.focus();
          }
        },
        /* @__PURE__ */ React.createElement(lucideReact.Combine, null),
        "Merge cells"
      ), /* @__PURE__ */ React.createElement(
        DropdownMenuItem$1,
        {
          className: "min-w-[180px]",
          disabled: !mergeState.canSplit,
          onSelect: () => {
            tf.table.split();
            editor.tf.focus();
          }
        },
        /* @__PURE__ */ React.createElement(lucideReact.Ungroup, null),
        "Split cell"
      ))), /* @__PURE__ */ React.createElement(DropdownMenuSub, null, /* @__PURE__ */ React.createElement(DropdownMenuSubTrigger, { disabled: !tableSelected }, /* @__PURE__ */ React.createElement("div", { className: "size-4" }), /* @__PURE__ */ React.createElement("span", null, "Row")), /* @__PURE__ */ React.createElement(DropdownMenuSubContent, null, /* @__PURE__ */ React.createElement(
        DropdownMenuItem$1,
        {
          className: "min-w-[180px]",
          disabled: !tableSelected,
          onSelect: () => {
            tf.insert.tableRow({ before: true });
            editor.tf.focus();
          }
        },
        /* @__PURE__ */ React.createElement(lucideReact.ArrowUp, null),
        "Insert row before"
      ), /* @__PURE__ */ React.createElement(
        DropdownMenuItem$1,
        {
          className: "min-w-[180px]",
          disabled: !tableSelected,
          onSelect: () => {
            tf.insert.tableRow();
            editor.tf.focus();
          }
        },
        /* @__PURE__ */ React.createElement(lucideReact.ArrowDown, null),
        "Insert row after"
      ), /* @__PURE__ */ React.createElement(
        DropdownMenuItem$1,
        {
          className: "min-w-[180px]",
          disabled: !tableSelected,
          onSelect: () => {
            tf.remove.tableRow();
            editor.tf.focus();
          }
        },
        /* @__PURE__ */ React.createElement(lucideReact.XIcon, null),
        "Delete row"
      ))), /* @__PURE__ */ React.createElement(DropdownMenuSub, null, /* @__PURE__ */ React.createElement(DropdownMenuSubTrigger, { disabled: !tableSelected }, /* @__PURE__ */ React.createElement("div", { className: "size-4" }), /* @__PURE__ */ React.createElement("span", null, "Column")), /* @__PURE__ */ React.createElement(DropdownMenuSubContent, null, /* @__PURE__ */ React.createElement(
        DropdownMenuItem$1,
        {
          className: "min-w-[180px]",
          disabled: !tableSelected,
          onSelect: () => {
            tf.insert.tableColumn({ before: true });
            editor.tf.focus();
          }
        },
        /* @__PURE__ */ React.createElement(lucideReact.ArrowLeft, null),
        "Insert column before"
      ), /* @__PURE__ */ React.createElement(
        DropdownMenuItem$1,
        {
          className: "min-w-[180px]",
          disabled: !tableSelected,
          onSelect: () => {
            tf.insert.tableColumn();
            editor.tf.focus();
          }
        },
        /* @__PURE__ */ React.createElement(lucideReact.ArrowRight, null),
        "Insert column after"
      ), /* @__PURE__ */ React.createElement(
        DropdownMenuItem$1,
        {
          className: "min-w-[180px]",
          disabled: !tableSelected,
          onSelect: () => {
            tf.remove.tableColumn();
            editor.tf.focus();
          }
        },
        /* @__PURE__ */ React.createElement(lucideReact.XIcon, null),
        "Delete column"
      ))), /* @__PURE__ */ React.createElement(
        DropdownMenuItem$1,
        {
          className: "min-w-[180px]",
          disabled: !tableSelected,
          onSelect: () => {
            tf.remove.table();
            editor.tf.focus();
          }
        },
        /* @__PURE__ */ React.createElement(lucideReact.Trash2Icon, null),
        "Delete table"
      ))
    ));
  }
  function TablePicker() {
    const { editor, tf } = useEditorPlugin(TablePlugin);
    const [tablePicker, setTablePicker] = React.useState({
      grid: Array.from({ length: 8 }, () => Array.from({ length: 8 }).fill(0)),
      size: { colCount: 0, rowCount: 0 }
    });
    const onCellMove = (rowIndex, colIndex) => {
      const newGrid = [...tablePicker.grid];
      for (let i2 = 0; i2 < newGrid.length; i2++) {
        for (let j = 0; j < newGrid[i2].length; j++) {
          newGrid[i2][j] = i2 >= 0 && i2 <= rowIndex && j >= 0 && j <= colIndex ? 1 : 0;
        }
      }
      setTablePicker({
        grid: newGrid,
        size: { colCount: colIndex + 1, rowCount: rowIndex + 1 }
      });
    };
    return /* @__PURE__ */ React.createElement(
      "div",
      {
        className: "m-0 flex! flex-col p-0",
        onClick: () => {
          tf.insert.table(tablePicker.size, { select: true });
          editor.tf.focus();
        }
      },
      /* @__PURE__ */ React.createElement("div", { className: "grid size-[130px] grid-cols-8 gap-0.5 p-1" }, tablePicker.grid.map(
        (rows, rowIndex) => rows.map((value, columIndex) => {
          return /* @__PURE__ */ React.createElement(
            "div",
            {
              key: `(${rowIndex},${columIndex})`,
              className: cn$2.cn(
                "col-span-1 size-3 border border-solid bg-secondary",
                !!value && "border-current"
              ),
              onMouseMove: () => {
                onCellMove(rowIndex, columIndex);
              }
            }
          );
        })
      )),
      /* @__PURE__ */ React.createElement("div", { className: "text-center text-xs text-current" }, tablePicker.size.rowCount, " x ", tablePicker.size.colCount)
    );
  }
  const toolbarItems = {
    heading: {
      label: HEADING_LABEL,
      width: (paragraphIconExists) => paragraphIconExists ? HEADING_ICON_WITH_TEXT : HEADING_ICON_ONLY,
      // Dynamically handle width based on paragraph icon
      Component: /* @__PURE__ */ React.createElement(ToolbarGroup, { noSeparator: true }, /* @__PURE__ */ React.createElement(HeadingsMenu, null))
    },
    link: {
      label: "Link",
      width: () => STANDARD_ICON_WIDTH,
      Component: /* @__PURE__ */ React.createElement(LinkToolbarButton, null)
    },
    image: {
      label: "Image",
      width: () => STANDARD_ICON_WIDTH,
      Component: /* @__PURE__ */ React.createElement(ImageToolbarButton, null)
    },
    hr: {
      label: "Horizontal Rule",
      width: () => STANDARD_ICON_WIDTH,
      Component: /* @__PURE__ */ React.createElement(HorizontalRuleToolbarButton, null)
    },
    quote: {
      label: "Quote",
      width: () => STANDARD_ICON_WIDTH,
      Component: /* @__PURE__ */ React.createElement(QuoteToolbarButton, null)
    },
    ul: {
      label: "Unordered List",
      width: () => STANDARD_ICON_WIDTH,
      Component: /* @__PURE__ */ React.createElement(ListToolbarButton, { nodeType: BulletedListPlugin.key })
    },
    ol: {
      label: "Ordered List",
      width: () => STANDARD_ICON_WIDTH,
      Component: /* @__PURE__ */ React.createElement(ListToolbarButton, { nodeType: NumberedListPlugin.key })
    },
    bold: {
      label: "Bold",
      width: () => STANDARD_ICON_WIDTH,
      Component: /* @__PURE__ */ React.createElement(BoldToolbarButton, null)
    },
    strikethrough: {
      label: "Strikethrough",
      width: () => STANDARD_ICON_WIDTH,
      Component: /* @__PURE__ */ React.createElement(StrikethroughToolbarButton, null)
    },
    italic: {
      label: "Italic",
      width: () => STANDARD_ICON_WIDTH,
      Component: /* @__PURE__ */ React.createElement(ItalicToolbarButton, null)
    },
    code: {
      label: "Code",
      width: () => STANDARD_ICON_WIDTH,
      Component: /* @__PURE__ */ React.createElement(CodeToolbarButton, null)
    },
    codeBlock: {
      label: "Code Block",
      width: () => STANDARD_ICON_WIDTH,
      Component: /* @__PURE__ */ React.createElement(CodeBlockToolbarButton, null)
    },
    mermaid: {
      label: "Mermaid",
      width: () => STANDARD_ICON_WIDTH,
      Component: /* @__PURE__ */ React.createElement(MermaidToolbarButton, null)
    },
    table: {
      label: "Table",
      width: () => STANDARD_ICON_WIDTH,
      Component: /* @__PURE__ */ React.createElement(TableDropdownMenu, null)
    },
    raw: {
      label: "Raw Markdown",
      width: () => STANDARD_ICON_WIDTH,
      Component: /* @__PURE__ */ React.createElement(RawMarkdownToolbarButton, null)
    },
    embed: {
      label: "Templates",
      width: () => EMBED_ICON_WIDTH,
      Component: /* @__PURE__ */ React.createElement(TemplatesToolbarButton, null)
    }
  };
  function FixedToolbarButtons() {
    const toolbarRef = React.useRef(null);
    const [itemsShown, setItemsShown] = React.useState(11);
    const { overrides, templates } = useToolbarContext();
    const showEmbedButton = templates.length > 0;
    let items2 = [];
    if (Array.isArray(overrides)) {
      items2 = overrides === void 0 ? Object.values(toolbarItems) : overrides.map((item) => toolbarItems[item]).filter((item) => item !== void 0);
    } else {
      items2 = (overrides == null ? void 0 : overrides.toolbar) === void 0 ? Object.values(toolbarItems) : overrides.toolbar.map((item) => toolbarItems[item]).filter((item) => item !== void 0);
    }
    if (!showEmbedButton) {
      items2 = items2.filter((item) => item.label !== toolbarItems.embed.label);
    }
    const editorState = useEditorState();
    const userInTable = helpers.isNodeActive(editorState, TablePlugin);
    const userInCodeBlock = helpers.isNodeActive(editorState, CodeBlockPlugin);
    useResize(toolbarRef, (entry) => {
      const width = entry.target.getBoundingClientRect().width - 8;
      const headingButton = items2.find((item) => item.label === HEADING_LABEL);
      const headingWidth = headingButton ? (
        //some discrepancy here between the md breakpoint here and in practice, but it works
        headingButton.width(width > CONTAINER_MD_BREAKPOINT - 9)
      ) : 0;
      const availableWidth = width - headingWidth;
      const { itemFitCount } = items2.reduce(
        (acc, item) => {
          if (item.label !== HEADING_LABEL && acc.totalItemsWidth + item.width() <= availableWidth) {
            return {
              //add 4px to account for additional padding on toolbar buttons
              totalItemsWidth: acc.totalItemsWidth + item.width() + 4,
              itemFitCount: acc.itemFitCount + 1
            };
          }
          return acc;
        },
        { totalItemsWidth: 0, itemFitCount: 1 }
      );
      setItemsShown(itemFitCount);
    });
    const getOpacity = (item) => {
      if (userInTable && unsupportedItemsInTable.has(item.label)) {
        return "opacity-25 pointer-events-none";
      }
      if (userInCodeBlock) {
        return "opacity-25 pointer-events-none";
      }
      return "opacity-100";
    };
    return /* @__PURE__ */ React.createElement("div", { className: "w-full overflow-hidden @container/toolbar", ref: toolbarRef }, /* @__PURE__ */ React.createElement(
      "div",
      {
        className: "flex",
        style: {
          transform: "translateX(calc(-1px))"
        }
      },
      /* @__PURE__ */ React.createElement(React.Fragment, null, items2.slice(0, items2.length > itemsShown ? itemsShown - 1 : itemsShown).map((item) => /* @__PURE__ */ React.createElement(
        "div",
        {
          className: cn$2.cn(
            "transition duration-500 ease-in-out",
            getOpacity(item)
          ),
          key: item.label
        },
        item.Component
      )), items2.length > itemsShown && /* @__PURE__ */ React.createElement("div", { className: "w-fit ml-auto" }, /* @__PURE__ */ React.createElement(OverflowMenu, null, items2.slice(itemsShown - 1).flatMap((c2) => /* @__PURE__ */ React.createElement(
        "div",
        {
          className: cn$2.cn(
            "transition duration-500 ease-in-out",
            getOpacity(c2)
          ),
          key: c2.label
        },
        c2.Component
      )))))
    ));
  }
  const useCreateEditor = ({
    plugins: plugins2,
    value,
    components = {}
  }) => {
    return usePlateEditor({
      plugins: plugins2,
      value,
      components
    });
  };
  var HEADING_KEYS = {
    h1: "h1",
    h2: "h2",
    h3: "h3",
    h4: "h4",
    h5: "h5",
    h6: "h6"
  };
  var HEADING_LEVELS = [
    HEADING_KEYS.h1,
    HEADING_KEYS.h2,
    HEADING_KEYS.h3,
    HEADING_KEYS.h4,
    HEADING_KEYS.h5,
    HEADING_KEYS.h6
  ];
  var BaseHeadingPlugin = plate.createTSlatePlugin({
    key: "heading",
    options: {
      levels: [1, 2, 3, 4, 5, 6]
    }
  }).extend(({ plugin }) => {
    const {
      options: { levels: levels2 }
    } = plugin;
    const plugins2 = [];
    const headingLevels = Array.isArray(levels2) ? levels2 : Array.from({ length: levels2 || 6 }, (_, i2) => i2 + 1);
    headingLevels.forEach((level) => {
      const plugin2 = plate.createSlatePlugin({
        key: HEADING_LEVELS[level - 1],
        node: { isElement: true },
        parsers: {
          html: {
            deserializer: {
              rules: [
                {
                  validNodeName: `H${level}`
                }
              ]
            }
          }
        }
      });
      plugins2.push(plugin2);
    });
    return {
      plugins: plugins2
    };
  });
  var HeadingPlugin = toPlatePlugin(BaseHeadingPlugin, ({ plugin }) => ({
    plugins: plugin.plugins.map(
      (p2) => p2.extend(({ plugin: plugin2 }) => {
        const level = p2.key.at(-1);
        if (level > 3)
          return {};
        return {
          shortcuts: {
            ["toggleHeading" + level]: {
              keys: [
                [Key.Mod, Key.Alt, level],
                [Key.Mod, Key.Shift, level]
              ],
              preventDefault: true,
              handler: ({ editor }) => {
                editor.tf.toggleBlock(editor.getType(plugin2));
              }
            }
          }
        };
      })
    )
  }));
  var BaseTocPlugin = plate.createTSlatePlugin({
    key: "toc",
    node: { isElement: true, isVoid: true },
    options: {
      isScroll: true,
      topOffset: 80
    }
  });
  toPlatePlugin(BaseTocPlugin);
  var withIndent = ({
    editor,
    getOptions: getOptions2,
    plugin,
    tf: { normalizeNode: normalizeNode2 }
  }) => {
    return {
      transforms: {
        normalizeNode([node2, path2]) {
          const { indentMax } = getOptions2();
          const element = node2;
          const { type } = element;
          const match2 = plate.getInjectMatch(editor, plugin);
          if (type) {
            if (match2(element, path2)) {
              if (indentMax && element.indent && element.indent > indentMax) {
                editor.tf.setNodes({ indent: indentMax }, { at: path2 });
                return;
              }
            } else if (element.indent) {
              editor.tf.unsetNodes("indent", { at: path2 });
              return;
            }
          }
          return normalizeNode2([node2, path2]);
        }
      }
    };
  };
  var BaseIndentPlugin = plate.createTSlatePlugin({
    key: "indent",
    inject: {
      isBlock: true,
      nodeProps: {
        nodeKey: "indent",
        styleKey: "marginLeft",
        transformNodeValue: ({ getOptions: getOptions2, nodeValue }) => {
          const { offset, unit } = getOptions2();
          return nodeValue * offset + unit;
        }
      },
      targetPlugins: [plate.BaseParagraphPlugin.key]
    },
    options: {
      offset: 24,
      unit: "px"
    }
  }).overrideEditor(withIndent);
  plate.createTSlatePlugin({
    key: "textIndent",
    inject: {
      isBlock: true,
      nodeProps: {
        nodeKey: "textIndent",
        styleKey: "textIndent",
        transformNodeValue({ getOptions: getOptions2, nodeValue }) {
          const { offset, unit } = getOptions2();
          return nodeValue * offset + unit;
        }
      },
      targetPlugins: [plate.BaseParagraphPlugin.key]
    },
    options: {
      offset: 24,
      unit: "px"
    }
  });
  var setIndent = (editor, {
    getNodesOptions,
    offset = 1,
    setNodesProps,
    unsetNodesProps = []
  }) => {
    const { nodeKey } = editor.getInjectProps(BaseIndentPlugin);
    const _nodes = editor.api.nodes({
      block: true,
      mode: "lowest",
      ...getNodesOptions
    });
    const nodes2 = Array.from(_nodes);
    editor.tf.withoutNormalizing(() => {
      nodes2.forEach(([node2, path2]) => {
        const blockIndent = node2[nodeKey] ?? 0;
        const newIndent = blockIndent + offset;
        const props = (setNodesProps == null ? void 0 : setNodesProps({ indent: newIndent })) ?? {};
        if (newIndent <= 0) {
          editor.tf.unsetNodes([nodeKey, ...unsetNodesProps], {
            at: path2
          });
        } else {
          editor.tf.setNodes({ [nodeKey]: newIndent, ...props }, { at: path2 });
        }
      });
    });
  };
  var ULIST_STYLE_TYPES = [
    "disc",
    "circle",
    "square",
    "disclosure-open",
    "disclosure-closed"
    /* DisclosureClosed */
  ];
  var renderIndentListBelowNodes = (injectProps) => {
    const { element } = injectProps;
    const listStyleType = element[BaseIndentListPlugin.key];
    const listStart = element[INDENT_LIST_KEYS.listStart];
    if (listStyleType) {
      let className = clsx.clsx(`slate-${BaseIndentListPlugin.key}-${listStyleType}`);
      const style = {
        listStyleType,
        margin: 0,
        padding: 0,
        position: "relative"
      };
      return ({ children, ...props }) => {
        const { editor } = props;
        const { listStyleTypes = {} } = editor.getOptions(BaseIndentListPlugin);
        let listOptions = listStyleTypes[listStyleType];
        let isOrdered = true;
        if (listOptions) {
          isOrdered = !!listOptions.isOrdered;
        } else {
          if (ULIST_STYLE_TYPES.includes(listStyleType)) {
            isOrdered = false;
          }
          listOptions = {};
        }
        className = isOrdered ? clsx.clsx(className, "slate-ol") : clsx.clsx(className, "slate-ul");
        const List2 = isOrdered ? "ol" : "ul";
        const { liComponent: Li, markerComponent: Marker = () => null } = listOptions;
        return /* @__PURE__ */ React.createElement(List2, { className, style, start: listStart }, /* @__PURE__ */ React.createElement(Marker, { ...props }), Li ? /* @__PURE__ */ React.createElement(Li, { ...props }, children) : /* @__PURE__ */ React.createElement("li", null, children));
      };
    }
  };
  var normalizeIndentListNotIndented = (editor, [node2, path2]) => {
    if (!plate.isDefined(node2[BaseIndentPlugin.key]) && (node2[BaseIndentListPlugin.key] || node2[INDENT_LIST_KEYS.listStart])) {
      editor.tf.unsetNodes(
        [BaseIndentListPlugin.key, INDENT_LIST_KEYS.listStart],
        {
          at: path2
        }
      );
      return true;
    }
  };
  var getSiblingIndentList = (editor, [node2, path2], {
    breakOnEqIndentNeqListStyleType = true,
    breakOnListRestart = false,
    breakOnLowerIndent = true,
    breakQuery,
    eqIndent = true,
    getNextEntry,
    getPreviousEntry,
    query
  }) => {
    if (!getPreviousEntry && !getNextEntry)
      return;
    const getSiblingEntry = getNextEntry ?? getPreviousEntry;
    let nextEntry = getSiblingEntry([node2, path2]);
    while (true) {
      if (!nextEntry)
        return;
      const [nextNode, nextPath] = nextEntry;
      const indent = node2[BaseIndentPlugin.key];
      const nextIndent = nextNode[BaseIndentPlugin.key];
      if (breakQuery == null ? void 0 : breakQuery(nextNode, node2))
        return;
      if (!plate.isDefined(nextIndent))
        return;
      if (breakOnListRestart) {
        if (getPreviousEntry && node2[INDENT_LIST_KEYS.listRestart]) {
          return;
        }
        if (getNextEntry && nextNode[INDENT_LIST_KEYS.listRestart]) {
          return;
        }
      }
      if (breakOnLowerIndent && nextIndent < indent)
        return;
      if (breakOnEqIndentNeqListStyleType && nextIndent === indent && nextNode[BaseIndentListPlugin.key] !== node2[BaseIndentListPlugin.key])
        return;
      let valid = !query || query(nextNode, node2);
      if (valid) {
        valid = !eqIndent || nextIndent === indent;
        if (valid)
          return [nextNode, nextPath];
      }
      nextEntry = getSiblingEntry(nextEntry);
    }
  };
  var getPreviousIndentList = (editor, entry, options) => {
    return getSiblingIndentList(editor, entry, {
      getPreviousEntry: ([, currPath]) => {
        const prevPath = plate.PathApi.previous(currPath);
        if (!prevPath)
          return;
        const prevNode = plate.NodeApi.get(editor, prevPath);
        if (!prevNode)
          return;
        return [prevNode, prevPath];
      },
      ...options,
      getNextEntry: void 0
    });
  };
  var getIndentListExpectedListStart = (entry, prevEntry) => {
    const [node2] = entry;
    const [prevNode] = prevEntry ?? [null];
    const restart = node2[INDENT_LIST_KEYS.listRestart] ?? null;
    const restartPolite = node2[INDENT_LIST_KEYS.listRestartPolite] ?? null;
    if (restart) {
      return restart;
    }
    if (restartPolite && !prevNode) {
      return restartPolite;
    }
    if (prevNode) {
      const prevListStart = prevNode[INDENT_LIST_KEYS.listStart] ?? 1;
      return prevListStart + 1;
    }
    return 1;
  };
  var normalizeIndentListStart = (editor, entry, options) => {
    return editor.tf.withoutNormalizing(() => {
      const [node2, path2] = entry;
      const listStyleType = node2[BaseIndentListPlugin.key];
      const listStart = node2[INDENT_LIST_KEYS.listStart];
      if (!listStyleType)
        return;
      const prevEntry = getPreviousIndentList(editor, entry, options);
      const expectedListStart = getIndentListExpectedListStart(entry, prevEntry);
      if (plate.isDefined(listStart) && expectedListStart === 1) {
        editor.tf.unsetNodes(INDENT_LIST_KEYS.listStart, { at: path2 });
        return true;
      }
      if (listStart !== expectedListStart && expectedListStart > 1) {
        editor.tf.setNodes(
          { [INDENT_LIST_KEYS.listStart]: expectedListStart },
          { at: path2 }
        );
        return true;
      }
      return false;
    });
  };
  var outdentList = (editor, options = {}) => {
    setIndent(editor, {
      offset: -1,
      unsetNodesProps: [BaseIndentListPlugin.key, INDENT_LIST_KEYS.checked],
      ...options
    });
  };
  var getNextIndentList = (editor, entry, options) => {
    return getSiblingIndentList(editor, entry, {
      getNextEntry: ([, currPath]) => {
        const nextPath = plate.PathApi.next(currPath);
        const nextNode = plate.NodeApi.get(editor, nextPath);
        if (!nextNode)
          return;
        return [nextNode, nextPath];
      },
      ...options,
      getPreviousEntry: void 0
    });
  };
  var withDeleteBackwardIndentList = ({ editor, tf: { deleteBackward: deleteBackward2 } }) => {
    return {
      transforms: {
        deleteBackward(unit) {
          const nodeEntry = editor.api.above();
          if (!nodeEntry)
            return deleteBackward2(unit);
          const listNode = nodeEntry[0];
          if (editor.api.isCollapsed() && plate.NodeApi.string(listNode))
            return deleteBackward2(unit);
          if (plate.isDefined(listNode[BaseIndentListPlugin.key])) {
            return outdentList(editor);
          }
          return deleteBackward2(unit);
        }
      }
    };
  };
  var withInsertBreakIndentList = ({ editor, tf: { insertBreak: insertBreak2 } }) => {
    return {
      transforms: {
        insertBreak() {
          var _a2;
          const nodeEntry = editor.api.above();
          if (!nodeEntry)
            return insertBreak2();
          const [node2, path2] = nodeEntry;
          if (!plate.isDefined(node2[BaseIndentListPlugin.key]) || node2[BaseIndentListPlugin.key] !== INDENT_LIST_KEYS.todo || editor.api.isExpanded() || !editor.api.isEnd((_a2 = editor.selection) == null ? void 0 : _a2.focus, path2)) {
            return insertBreak2();
          }
          editor.tf.withoutNormalizing(() => {
            insertBreak2();
            const newEntry = editor.api.above();
            if (newEntry) {
              editor.tf.setNodes(
                {
                  checked: false
                },
                { at: newEntry[1] }
              );
            }
          });
        }
      }
    };
  };
  var withNormalizeIndentList = ({
    editor,
    getOptions: getOptions2,
    tf: { normalizeNode: normalizeNode2 }
  }) => {
    return {
      transforms: {
        normalizeNode([node2, path2]) {
          const normalized = editor.tf.withoutNormalizing(() => {
            if (normalizeIndentListNotIndented(editor, [node2, path2]))
              return true;
            if (normalizeIndentListStart(
              editor,
              [node2, path2],
              getOptions2().getSiblingIndentListOptions
            ))
              return true;
          });
          if (normalized)
            return;
          return normalizeNode2([node2, path2]);
        }
      }
    };
  };
  var withIndentList = (ctx) => {
    const {
      editor,
      getOptions: getOptions2,
      tf: { apply: apply2 }
    } = ctx;
    return {
      transforms: {
        ...withNormalizeIndentList(ctx).transforms,
        ...withDeleteBackwardIndentList(ctx).transforms,
        ...withInsertBreakIndentList(ctx).transforms,
        apply(operation) {
          const { getSiblingIndentListOptions } = getOptions2();
          if (operation.type === "insert_node") {
            const listStyleType = operation.node[BaseIndentListPlugin.key];
            if (listStyleType && ["lower-roman", "upper-roman"].includes(
              listStyleType
            )) {
              const prevNodeEntry = getPreviousIndentList(
                editor,
                [operation.node, operation.path],
                {
                  breakOnEqIndentNeqListStyleType: false,
                  eqIndent: false,
                  ...getSiblingIndentListOptions
                }
              );
              if (prevNodeEntry) {
                const prevListStyleType = prevNodeEntry[0][BaseIndentListPlugin.key];
                if (prevListStyleType === "lower-alpha" && listStyleType === "lower-roman") {
                  operation.node[BaseIndentListPlugin.key] = "lower-alpha";
                } else if (prevListStyleType === "upper-alpha" && listStyleType === "upper-roman") {
                  operation.node[BaseIndentListPlugin.key] = "upper-alpha";
                }
              }
            }
          }
          if (operation.type === "split_node" && operation.properties[BaseIndentListPlugin.key]) {
            operation.properties[INDENT_LIST_KEYS.listRestart] = void 0;
            operation.properties[INDENT_LIST_KEYS.listRestartPolite] = void 0;
          }
          apply2(operation);
          const affectedPaths = [];
          switch (operation.type) {
            case "insert_node":
            case "remove_node":
            case "set_node": {
              affectedPaths.push(operation.path);
              break;
            }
            case "merge_node": {
              affectedPaths.push(plate.PathApi.previous(operation.path));
              break;
            }
            case "move_node": {
              affectedPaths.push(operation.path, operation.newPath);
              break;
            }
            case "split_node": {
              affectedPaths.push(operation.path, plate.PathApi.next(operation.path));
              break;
            }
          }
          const isIndentListItem = (node2) => BaseIndentListPlugin.key in node2;
          affectedPaths.forEach((affectedPath) => {
            let entry = editor.api.node(affectedPath);
            if (!entry)
              return;
            if (!isIndentListItem(entry[0])) {
              entry = editor.api.node(plate.PathApi.next(affectedPath));
            }
            while (entry && isIndentListItem(entry[0])) {
              const normalized = normalizeIndentListStart(
                editor,
                entry,
                getSiblingIndentListOptions
              );
              if (normalized)
                break;
              entry = getNextIndentList(
                editor,
                entry,
                {
                  ...getSiblingIndentListOptions,
                  breakOnEqIndentNeqListStyleType: false,
                  breakOnLowerIndent: false,
                  eqIndent: false
                }
              );
            }
          });
        }
      }
    };
  };
  var INDENT_LIST_KEYS = {
    checked: "checked",
    listRestart: "listRestart",
    listRestartPolite: "listRestartPolite",
    listStart: "listStart",
    todo: "todo"
  };
  var BaseIndentListPlugin = plate.createTSlatePlugin({
    key: "listStyleType",
    inject: {
      plugins: {
        [plate.HtmlPlugin.key]: {
          parser: {
            transformData: ({ data }) => {
              const document2 = new DOMParser().parseFromString(data, "text/html");
              const { body } = document2;
              plate.traverseHtmlElements(body, (element) => {
                if (element.tagName === "LI") {
                  const { childNodes } = element;
                  const liChildren = [];
                  childNodes.forEach((child) => {
                    if (plate.isHtmlBlockElement(child)) {
                      liChildren.push(...child.childNodes);
                    } else {
                      liChildren.push(child);
                    }
                  });
                  element.replaceChildren(...liChildren);
                  return false;
                }
                return true;
              });
              return plate.postCleanHtml(body.innerHTML);
            }
          }
        }
      }
    },
    options: {
      getListStyleType: (element) => element.style.listStyleType
    },
    parsers: {
      html: {
        deserializer: {
          isElement: true,
          rules: [
            {
              validNodeName: "LI"
            }
          ],
          parse: ({ editor, element, getOptions: getOptions2 }) => {
            var _a2, _b;
            return {
              // gdoc uses aria-level attribute
              indent: Number(element.getAttribute("aria-level")),
              listStyleType: (_b = (_a2 = getOptions2()).getListStyleType) == null ? void 0 : _b.call(_a2, element),
              type: editor.getType(plate.BaseParagraphPlugin)
            };
          }
        }
      }
    },
    render: {
      belowNodes: renderIndentListBelowNodes
    }
  }).overrideEditor(withIndentList);
  var onKeyDownIndentList = ({
    editor,
    event
  }) => {
    if (event.defaultPrevented)
      return;
    if (!editor.selection)
      return;
    const entry = editor.api.block();
    if (!entry)
      return;
    const node2 = entry[0];
    const listStyleType = node2[IndentListPlugin.key];
    if (!listStyleType)
      return;
    if (plate.isHotkey("Enter", event) && editor.api.isEmpty(editor.selection, { block: true }) && node2.indent) {
      outdentList(editor);
      event.stopPropagation();
      event.preventDefault();
    }
  };
  var IndentListPlugin = toPlatePlugin(BaseIndentListPlugin, {
    handlers: {
      onKeyDown: onKeyDownIndentList
    }
  });
  const popoverVariants = classVarianceAuthority.cva(
    "z-50 w-auto rounded-md border bg-popover p-1 text-popover-foreground shadow-md outline-hidden"
  );
  const inputVariants = classVarianceAuthority.cva(
    "flex h-[28px] w-full rounded-md border-none bg-transparent px-1.5 py-1 text-base placeholder:text-muted-foreground focus-visible:ring-transparent focus-visible:outline-none md:text-sm"
  );
  function LinkFloatingToolbar({
    state
  }) {
    const activeCommentId = usePluginOption({ key: "comment" }, "activeId");
    const activeSuggestionId = usePluginOption({ key: "suggestion" }, "activeId");
    const floatingOptions = React__namespace.useMemo(() => {
      return {
        middleware: [
          plateFloating.offset(8),
          plateFloating.flip({
            fallbackPlacements: ["bottom-end", "top-start", "top-end"],
            padding: 12
          })
        ],
        placement: activeSuggestionId || activeCommentId ? "top-start" : "bottom-start"
      };
    }, [activeCommentId, activeSuggestionId]);
    const insertState = useFloatingLinkInsertState({
      ...state,
      floatingOptions: {
        ...floatingOptions,
        ...state == null ? void 0 : state.floatingOptions
      }
    });
    const {
      hidden,
      props: insertProps,
      ref: insertRef,
      textInputProps
    } = useFloatingLinkInsert(insertState);
    const editState = useFloatingLinkEditState({
      ...state,
      floatingOptions: {
        ...floatingOptions,
        ...state == null ? void 0 : state.floatingOptions
      }
    });
    const {
      editButtonProps,
      props: editProps,
      ref: editRef,
      unlinkButtonProps
    } = useFloatingLinkEdit(editState);
    const inputProps = useFormInputProps({
      preventDefaultOnEnterKeydown: true
    });
    if (hidden)
      return null;
    const input = /* @__PURE__ */ React__namespace.createElement("div", { className: "z-[999999] flex w-[330px] flex-col", ...inputProps }, /* @__PURE__ */ React__namespace.createElement("div", { className: "flex items-center" }, /* @__PURE__ */ React__namespace.createElement("div", { className: "flex items-center pr-1 pl-2 text-muted-foreground" }, /* @__PURE__ */ React__namespace.createElement(lucideReact.Link, { className: "size-4" })), /* @__PURE__ */ React__namespace.createElement(
      FloatingLinkUrlInput,
      {
        className: inputVariants(),
        placeholder: "Paste link",
        "data-plate-focus": true
      }
    )), /* @__PURE__ */ React__namespace.createElement(Separator, { className: "my-1" }), /* @__PURE__ */ React__namespace.createElement("div", { className: "flex items-center" }, /* @__PURE__ */ React__namespace.createElement("div", { className: "flex items-center pr-1 pl-2 text-muted-foreground" }, /* @__PURE__ */ React__namespace.createElement(lucideReact.Text, { className: "size-4" })), /* @__PURE__ */ React__namespace.createElement(
      "input",
      {
        className: inputVariants(),
        placeholder: "Text to display",
        "data-plate-focus": true,
        ...textInputProps
      }
    )));
    const editContent = editState.isEditing ? input : /* @__PURE__ */ React__namespace.createElement("div", { className: "box-content flex items-center" }, /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        className: buttonVariants$1({ size: "sm", variant: "ghost" }),
        type: "button",
        ...editButtonProps
      },
      "Edit link"
    ), /* @__PURE__ */ React__namespace.createElement(Separator, { orientation: "vertical" }), /* @__PURE__ */ React__namespace.createElement(LinkOpenButton, null), /* @__PURE__ */ React__namespace.createElement(Separator, { orientation: "vertical" }), /* @__PURE__ */ React__namespace.createElement(
      "button",
      {
        className: buttonVariants$1({
          size: "icon",
          variant: "ghost"
        }),
        type: "button",
        ...unlinkButtonProps
      },
      /* @__PURE__ */ React__namespace.createElement(lucideReact.Unlink, { width: 18 })
    ));
    return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("div", { ref: insertRef, className: popoverVariants(), ...insertProps }, input), /* @__PURE__ */ React__namespace.createElement("div", { ref: editRef, className: popoverVariants(), ...editProps }, editContent));
  }
  function LinkOpenButton() {
    const editor = useEditorRef();
    const selection = useEditorSelection();
    const attributes = React__namespace.useMemo(
      () => {
        const entry = editor.api.node({
          match: { type: editor.getType(LinkPlugin) }
        });
        if (!entry) {
          return {};
        }
        const [element] = entry;
        return plateLink.getLinkAttributes(editor, element);
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [editor, selection]
    );
    return /* @__PURE__ */ React__namespace.createElement(
      "a",
      {
        ...attributes,
        className: buttonVariants$1({
          size: "icon",
          variant: "ghost"
        }),
        onMouseOver: (e3) => {
          e3.stopPropagation();
        },
        "aria-label": "Open link in a new tab",
        target: "_blank"
      },
      /* @__PURE__ */ React__namespace.createElement(lucideReact.ExternalLink, { width: 18 })
    );
  }
  const protocolAndDomainRE = /^(?:\w+:)?\/\/(\S+)$/;
  const emailLintRE = /mailto:([^?\\]+)/;
  const telLintRE = /tel:([\d-]+)/;
  const localhostDomainRE = /^localhost[\d:?]*(?:[^\d:?]\S*)?$/;
  const nonLocalhostDomainRE = /^[^\s.]+\.\S{2,}$/;
  const localUrlRE = /^\/\S+/;
  const isUrl = (string2) => {
    if (typeof string2 !== "string") {
      return false;
    }
    if (string2.startsWith("#")) {
      return true;
    }
    const generalMatch = string2.match(protocolAndDomainRE);
    const emailLinkMatch = string2.match(emailLintRE);
    const telLinkMatch = string2.match(telLintRE);
    const localUrlMatch = string2.match(localUrlRE);
    if (emailLinkMatch || telLinkMatch || localUrlMatch) {
      return true;
    }
    if (generalMatch) {
      const everythingAfterProtocol = generalMatch[1];
      if (!everythingAfterProtocol) {
        return false;
      }
      try {
        new URL(string2);
      } catch {
        return false;
      }
      return localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol);
    }
    return false;
  };
  const buildError = (element) => {
    return {
      message: element.message,
      position: element.position && {
        endColumn: element.position.end.column,
        startColumn: element.position.start.column,
        startLineNumber: element.position.start.line,
        endLineNumber: element.position.end.line
      }
    };
  };
  const buildErrorMessage = (element) => {
    if (!element) {
      return "";
    }
    const errorMessage = buildError(element);
    const message = errorMessage ? `${errorMessage.message}${errorMessage.position ? ` at line: ${errorMessage.position.startLineNumber}, column: ${errorMessage.position.startColumn}` : ""}` : null;
    return message;
  };
  const ELEMENT_INVALID_MARKDOWN = "invalid_markdown";
  const createInvalidMarkdownPlugin = createPlatePlugin({
    key: ELEMENT_INVALID_MARKDOWN,
    options: {
      isElement: true,
      isVoid: true,
      isInline: false
    },
    node: {
      component: InvalidMarkdownElement
    }
  });
  function InvalidMarkdownElement({
    attributes,
    element,
    children
  }) {
    return /* @__PURE__ */ React.createElement("div", { ...attributes }, /* @__PURE__ */ React.createElement(ErrorMessage, { error: element }), children);
  }
  function ErrorMessage({ error: error2 }) {
    const message = buildErrorMessage(error2);
    const { setRawMode } = useEditorContext();
    return /* @__PURE__ */ React.createElement("div", { contentEditable: false, className: "bg-red-50 sm:rounded-lg" }, /* @__PURE__ */ React.createElement("div", { className: "px-4 py-5 sm:p-6" }, /* @__PURE__ */ React.createElement("h3", { className: "text-lg leading-6 font-medium text-red-800" }, "❌ Error parsing markdown"), /* @__PURE__ */ React.createElement("div", { className: "mt-2 max-w-xl text-sm text-red-800 space-y-4" }, /* @__PURE__ */ React.createElement("p", null, message), /* @__PURE__ */ React.createElement("p", null, "To fix these errors, edit the content in raw-mode."), /* @__PURE__ */ React.createElement(
      "button",
      {
        type: "button",
        onClick: () => setRawMode(true),
        className: "rounded-l border-r-0 shadow rounded bg-white cursor-pointer relative inline-flex items-center px-2 py-2 border border-gray-200 hover:text-white text-sm font-medium transition-all ease-out duration-150 hover:bg-gray-500 focus:z-10 focus:outline-none focus:ring-1 focus:ring-gray-500 focus:border-gray-500"
      },
      "Switch to raw-mode"
    ))));
  }
  const useCustomFloatingToolbarState = ({
    editorId,
    floatingOptions,
    focusedEditorId,
    hideToolbar,
    showWhenReadOnly
  }) => {
    const editor = useEditorRef();
    const selectionExpanded = useEditorSelector(
      () => editor.api.isExpanded(),
      []
    );
    const selectionText = useEditorSelector(() => editor.api.string(), []);
    const readOnly = useEditorReadOnly();
    const focused = useFocused();
    const [open2, setOpen] = React.useState(false);
    const [waitForCollapsedSelection, setWaitForCollapsedSelection] = React.useState(false);
    const [mousedown, setMousedown] = React.useState(false);
    const floating = plateFloating.useVirtualFloating(
      plate.mergeProps(
        {
          open: open2,
          getBoundingClientRect: () => plateFloating.getSelectionBoundingClientRect(editor),
          onOpenChange: setOpen
        },
        floatingOptions
      )
    );
    return {
      editorId,
      floating,
      focused,
      focusedEditorId,
      hideToolbar,
      mousedown,
      open: open2,
      readOnly,
      selectionExpanded,
      selectionText,
      setMousedown,
      setOpen,
      setWaitForCollapsedSelection,
      showWhenReadOnly,
      waitForCollapsedSelection
    };
  };
  const useCustomFloatingToolbar = ({
    editorId,
    floating,
    focusedEditorId,
    hideToolbar,
    mousedown,
    open: open2,
    readOnly,
    selectionExpanded,
    selectionText,
    setMousedown,
    setOpen,
    setWaitForCollapsedSelection,
    showWhenReadOnly,
    waitForCollapsedSelection
  }) => {
    React.useEffect(() => {
      if (!(editorId === focusedEditorId)) {
        setWaitForCollapsedSelection(true);
      }
      if (!selectionExpanded) {
        setWaitForCollapsedSelection(false);
      }
    }, [
      editorId,
      focusedEditorId,
      selectionExpanded,
      setWaitForCollapsedSelection
    ]);
    React.useEffect(() => {
      const mouseup = () => setMousedown(false);
      const mousedown2 = () => setMousedown(true);
      document.addEventListener("mouseup", mouseup);
      document.addEventListener("mousedown", mousedown2);
      return () => {
        document.removeEventListener("mouseup", mouseup);
        document.removeEventListener("mousedown", mousedown2);
      };
    }, []);
    React.useEffect(() => {
      if (!selectionExpanded || !selectionText || mousedown && !open2 || hideToolbar || readOnly && !showWhenReadOnly) {
        setOpen(false);
      } else if (selectionText && selectionExpanded && (!waitForCollapsedSelection || readOnly)) {
        setOpen(true);
      }
    }, [
      setOpen,
      editorId,
      focusedEditorId,
      hideToolbar,
      showWhenReadOnly,
      selectionExpanded,
      selectionText,
      mousedown,
      waitForCollapsedSelection,
      open2,
      readOnly
    ]);
    const { update } = floating;
    useEditorSelector(() => {
      update == null ? void 0 : update();
    }, [update]);
    const clickOutsideRef = useOnClickOutside(
      () => {
        setOpen(false);
      },
      {
        ignoreClass: "ignore-click-outside/toolbar"
      }
    );
    return {
      clickOutsideRef,
      hidden: !open2,
      props: {
        style: floating.style
      },
      ref: floating.refs.setFloating
    };
  };
  const FloatingToolbar = cn$2.withRef(({ children, state, ...props }, propRef) => {
    const editorId = useEditorRef();
    const focusedEditorId = useEventEditorValue("focus");
    const test = useCustomFloatingToolbarState({
      editorId: editorId.id,
      focusedEditorId,
      ...state,
      floatingOptions: {
        middleware: [
          plateFloating.offset(12),
          plateFloating.flip({
            fallbackPlacements: [
              "top-start",
              "top-end",
              "bottom-start",
              "bottom-end"
            ],
            padding: 12
          })
        ],
        placement: "top",
        ...state == null ? void 0 : state.floatingOptions
      }
    });
    const {
      hidden,
      props: rootProps,
      ref: floatingRef
    } = useCustomFloatingToolbar(test);
    const ref = cn$2.useComposedRef(propRef, floatingRef);
    if (hidden)
      return null;
    return /* @__PURE__ */ React.createElement(cn$2.PortalBody, null, /* @__PURE__ */ React.createElement(
      Toolbar,
      {
        className: cn$2.cn(
          "absolute z-[999999] whitespace-nowrap border bg-popover px-1 opacity-100 shadow-md print:hidden rounded-md"
        ),
        ...props,
        ...rootProps,
        ref
      },
      children
    ));
  });
  const items = [
    {
      description: "Paragraph",
      icon: Icons.paragraph,
      label: "Paragraph",
      value: ParagraphPlugin.key
    },
    {
      description: "Heading 1",
      icon: Icons.h1,
      label: "Heading 1",
      value: plateHeading.HEADING_KEYS.h1
    },
    {
      description: "Heading 2",
      icon: Icons.h2,
      label: "Heading 2",
      value: plateHeading.HEADING_KEYS.h2
    },
    {
      description: "Heading 3",
      icon: Icons.h3,
      label: "Heading 3",
      value: plateHeading.HEADING_KEYS.h3
    },
    {
      description: "Heading 4",
      icon: Icons.h4,
      label: "Heading 4",
      value: plateHeading.HEADING_KEYS.h4
    },
    {
      description: "Heading 5",
      icon: Icons.h5,
      label: "Heading 5",
      value: plateHeading.HEADING_KEYS.h5
    },
    {
      description: "Heading 6",
      icon: Icons.h6,
      label: "Heading 6",
      value: plateHeading.HEADING_KEYS.h6
    }
  ];
  const defaultItem = items.find((item) => item.value === ParagraphPlugin.key);
  function TurnIntoDropdownMenu(props) {
    const value = useEditorSelector((editor2) => {
      let initialNodeType = ParagraphPlugin.key;
      let allNodesMatchInitialNodeType = false;
      const codeBlockEntries = editor2.api.nodes({
        match: (n2) => editor2.api.isBlock(n2),
        mode: "highest"
      });
      const nodes2 = Array.from(codeBlockEntries);
      if (nodes2.length > 0) {
        initialNodeType = nodes2[0][0].type;
        allNodesMatchInitialNodeType = nodes2.every(([node2]) => {
          const type = (node2 == null ? void 0 : node2.type) || ParagraphPlugin.key;
          return type === initialNodeType;
        });
      }
      return allNodesMatchInitialNodeType ? initialNodeType : ParagraphPlugin.key;
    }, []);
    const editor = useEditorRef();
    const openState = useOpenState();
    const selectedItem = items.find((item) => item.value === value) ?? defaultItem;
    const { icon: SelectedItemIcon, label: selectedItemLabel } = selectedItem;
    const editorState = useEditorState();
    const userInTable = helpers.isNodeActive(editorState, TablePlugin.key);
    if (userInTable)
      return null;
    return /* @__PURE__ */ React.createElement(DropdownMenu$1, { modal: false, ...openState, ...props }, /* @__PURE__ */ React.createElement(DropdownMenuTrigger$1, { asChild: true }, /* @__PURE__ */ React.createElement(
      ToolbarButton,
      {
        className: "lg:min-w-[130px]",
        isDropdown: true,
        showArrow: true,
        pressed: openState.open,
        tooltip: "Turn into"
      },
      /* @__PURE__ */ React.createElement("span", { className: "" }, selectedItemLabel)
    )), /* @__PURE__ */ React.createElement(DropdownMenuContent$1, { align: "start", className: "min-w-0" }, /* @__PURE__ */ React.createElement(DropdownMenuLabel, null, "Turn into"), /* @__PURE__ */ React.createElement(
      DropdownMenuRadioGroup,
      {
        className: "flex flex-col gap-0.5",
        onValueChange: (type) => {
          if (type === "ul" || type === "ol") {
            plateList.toggleList(editor, { type });
          } else {
            plateList.unwrapList(editor);
            editor.tf.toggleBlock(type);
          }
          editor.tf.collapse();
          editor.tf.focus();
        },
        value
      },
      items.map(({ icon: Icon, label, value: itemValue }) => /* @__PURE__ */ React.createElement(
        DropdownMenuRadioItem,
        {
          className: "min-w-[180px]",
          key: itemValue,
          value: itemValue
        },
        /* @__PURE__ */ React.createElement(Icon, { className: "mr-2 size-5" }),
        label
      ))
    )));
  }
  function FloatingToolbarButtons() {
    return /* @__PURE__ */ React.createElement("div", { className: "rounded-md" }, /* @__PURE__ */ React.createElement(TurnIntoDropdownMenu, null));
  }
  const FloatingToolbarPlugin = createPlatePlugin({
    key: "floating-toolbar",
    render: {
      afterEditable: () => /* @__PURE__ */ React.createElement(FloatingToolbar, null, /* @__PURE__ */ React.createElement(FloatingToolbarButtons, null))
    }
  });
  function _1c(hljs) {
    const UNDERSCORE_IDENT_RE2 = "[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]+";
    const v7_keywords = "далее ";
    const v8_keywords = "возврат вызватьисключение выполнить для если и из или иначе иначеесли исключение каждого конецесли конецпопытки конеццикла не новый перейти перем по пока попытка прервать продолжить тогда цикл экспорт ";
    const KEYWORD = v7_keywords + v8_keywords;
    const v7_meta_keywords = "загрузитьизфайла ";
    const v8_meta_keywords = "вебклиент вместо внешнеесоединение клиент конецобласти мобильноеприложениеклиент мобильноеприложениесервер наклиенте наклиентенасервере наклиентенасерверебезконтекста насервере насерверебезконтекста область перед после сервер толстыйклиентобычноеприложение толстыйклиентуправляемоеприложение тонкийклиент ";
    const METAKEYWORD = v7_meta_keywords + v8_meta_keywords;
    const v7_system_constants = "разделительстраниц разделительстрок символтабуляции ";
    const v7_global_context_methods = "ansitooem oemtoansi ввестивидсубконто ввестиперечисление ввестипериод ввестиплансчетов выбранныйплансчетов датагод датамесяц датачисло заголовоксистемы значениевстроку значениеизстроки каталогиб каталогпользователя кодсимв конгода конецпериодаби конецрассчитанногопериодаби конецстандартногоинтервала конквартала конмесяца коннедели лог лог10 максимальноеколичествосубконто названиеинтерфейса названиенабораправ назначитьвид назначитьсчет найтиссылки началопериодаби началостандартногоинтервала начгода начквартала начмесяца начнедели номерднягода номерднянедели номернеделигода обработкаожидания основнойжурналрасчетов основнойплансчетов основнойязык очиститьокносообщений периодстр получитьвремята получитьдатута получитьдокументта получитьзначенияотбора получитьпозициюта получитьпустоезначение получитьта префиксавтонумерации пропись пустоезначение разм разобратьпозициюдокумента рассчитатьрегистрына рассчитатьрегистрыпо симв создатьобъект статусвозврата стрколичествострок сформироватьпозициюдокумента счетпокоду текущеевремя типзначения типзначениястр установитьтана установитьтапо фиксшаблон шаблон ";
    const v8_global_context_methods = "acos asin atan base64значение base64строка cos exp log log10 pow sin sqrt tan xmlзначение xmlстрока xmlтип xmlтипзнч активноеокно безопасныйрежим безопасныйрежимразделенияданных булево ввестидату ввестизначение ввестистроку ввестичисло возможностьчтенияxml вопрос восстановитьзначение врег выгрузитьжурналрегистрации выполнитьобработкуоповещения выполнитьпроверкуправдоступа вычислить год данныеформывзначение дата день деньгода деньнедели добавитьмесяц заблокироватьданныедляредактирования заблокироватьработупользователя завершитьработусистемы загрузитьвнешнююкомпоненту закрытьсправку записатьjson записатьxml записатьдатуjson записьжурналарегистрации заполнитьзначениясвойств запроситьразрешениепользователя запуститьприложение запуститьсистему зафиксироватьтранзакцию значениевданныеформы значениевстрокувнутр значениевфайл значениезаполнено значениеизстрокивнутр значениеизфайла изxmlтипа импортмоделиxdto имякомпьютера имяпользователя инициализироватьпредопределенныеданные информацияобошибке каталогбиблиотекимобильногоустройства каталогвременныхфайлов каталогдокументов каталогпрограммы кодироватьстроку кодлокализацииинформационнойбазы кодсимвола командасистемы конецгода конецдня конецквартала конецмесяца конецминуты конецнедели конецчаса конфигурациябазыданныхизмененадинамически конфигурацияизменена копироватьданныеформы копироватьфайл краткоепредставлениеошибки лев макс местноевремя месяц мин минута монопольныйрежим найти найтинедопустимыесимволыxml найтиокнопонавигационнойссылке найтипомеченныенаудаление найтипоссылкам найтифайлы началогода началодня началоквартала началомесяца началоминуты началонедели началочаса начатьзапросразрешенияпользователя начатьзапускприложения начатькопированиефайла начатьперемещениефайла начатьподключениевнешнейкомпоненты начатьподключениерасширенияработыскриптографией начатьподключениерасширенияработысфайлами начатьпоискфайлов начатьполучениекаталогавременныхфайлов начатьполучениекаталогадокументов начатьполучениерабочегокаталогаданныхпользователя начатьполучениефайлов начатьпомещениефайла начатьпомещениефайлов начатьсозданиедвоичныхданныхизфайла начатьсозданиекаталога начатьтранзакцию начатьудалениефайлов начатьустановкувнешнейкомпоненты начатьустановкурасширенияработыскриптографией начатьустановкурасширенияработысфайлами неделягода необходимостьзавершениясоединения номерсеансаинформационнойбазы номерсоединенияинформационнойбазы нрег нстр обновитьинтерфейс обновитьнумерациюобъектов обновитьповторноиспользуемыезначения обработкапрерыванияпользователя объединитьфайлы окр описаниеошибки оповестить оповеститьобизменении отключитьобработчикзапросанастроекклиенталицензирования отключитьобработчикожидания отключитьобработчикоповещения открытьзначение открытьиндекссправки открытьсодержаниесправки открытьсправку открытьформу открытьформумодально отменитьтранзакцию очиститьжурналрегистрации очиститьнастройкипользователя очиститьсообщения параметрыдоступа перейтипонавигационнойссылке переместитьфайл подключитьвнешнююкомпоненту подключитьобработчикзапросанастроекклиенталицензирования подключитьобработчикожидания подключитьобработчикоповещения подключитьрасширениеработыскриптографией подключитьрасширениеработысфайлами подробноепредставлениеошибки показатьвводдаты показатьвводзначения показатьвводстроки показатьвводчисла показатьвопрос показатьзначение показатьинформациюобошибке показатьнакарте показатьоповещениепользователя показатьпредупреждение полноеимяпользователя получитьcomобъект получитьxmlтип получитьадреспоместоположению получитьблокировкусеансов получитьвремязавершенияспящегосеанса получитьвремязасыпанияпассивногосеанса получитьвремяожиданияблокировкиданных получитьданныевыбора получитьдополнительныйпараметрклиенталицензирования получитьдопустимыекодылокализации получитьдопустимыечасовыепояса получитьзаголовокклиентскогоприложения получитьзаголовоксистемы получитьзначенияотборажурналарегистрации получитьидентификаторконфигурации получитьизвременногохранилища получитьимявременногофайла получитьимяклиенталицензирования получитьинформациюэкрановклиента получитьиспользованиежурналарегистрации получитьиспользованиесобытияжурналарегистрации получитькраткийзаголовокприложения получитьмакетоформления получитьмаскувсефайлы получитьмаскувсефайлыклиента получитьмаскувсефайлысервера получитьместоположениепоадресу получитьминимальнуюдлинупаролейпользователей получитьнавигационнуюссылку получитьнавигационнуюссылкуинформационнойбазы получитьобновлениеконфигурациибазыданных получитьобновлениепредопределенныхданныхинформационнойбазы получитьобщиймакет получитьобщуюформу получитьокна получитьоперативнуюотметкувремени получитьотключениебезопасногорежима получитьпараметрыфункциональныхопцийинтерфейса получитьполноеимяпредопределенногозначения получитьпредставлениянавигационныхссылок получитьпроверкусложностипаролейпользователей получитьразделительпути получитьразделительпутиклиента получитьразделительпутисервера получитьсеансыинформационнойбазы получитьскоростьклиентскогосоединения получитьсоединенияинформационнойбазы получитьсообщенияпользователю получитьсоответствиеобъектаиформы получитьсоставстандартногоинтерфейсаodata получитьструктурухранениябазыданных получитьтекущийсеансинформационнойбазы получитьфайл получитьфайлы получитьформу получитьфункциональнуюопцию получитьфункциональнуюопциюинтерфейса получитьчасовойпоясинформационнойбазы пользователиос поместитьвовременноехранилище поместитьфайл поместитьфайлы прав праводоступа предопределенноезначение представлениекодалокализации представлениепериода представлениеправа представлениеприложения представлениесобытияжурналарегистрации представлениечасовогопояса предупреждение прекратитьработусистемы привилегированныйрежим продолжитьвызов прочитатьjson прочитатьxml прочитатьдатуjson пустаястрока рабочийкаталогданныхпользователя разблокироватьданныедляредактирования разделитьфайл разорватьсоединениесвнешнимисточникомданных раскодироватьстроку рольдоступна секунда сигнал символ скопироватьжурналрегистрации смещениелетнеговремени смещениестандартноговремени соединитьбуферыдвоичныхданных создатькаталог создатьфабрикуxdto сокрл сокрлп сокрп сообщить состояние сохранитьзначение сохранитьнастройкипользователя сред стрдлина стрзаканчиваетсяна стрзаменить стрнайти стрначинаетсяс строка строкасоединенияинформационнойбазы стрполучитьстроку стрразделить стрсоединить стрсравнить стрчисловхождений стрчислострок стршаблон текущаядата текущаядатасеанса текущаяуниверсальнаядата текущаяуниверсальнаядатавмиллисекундах текущийвариантинтерфейсаклиентскогоприложения текущийвариантосновногошрифтаклиентскогоприложения текущийкодлокализации текущийрежимзапуска текущийязык текущийязыксистемы тип типзнч транзакцияактивна трег удалитьданныеинформационнойбазы удалитьизвременногохранилища удалитьобъекты удалитьфайлы универсальноевремя установитьбезопасныйрежим установитьбезопасныйрежимразделенияданных установитьблокировкусеансов установитьвнешнююкомпоненту установитьвремязавершенияспящегосеанса установитьвремязасыпанияпассивногосеанса установитьвремяожиданияблокировкиданных установитьзаголовокклиентскогоприложения установитьзаголовоксистемы установитьиспользованиежурналарегистрации установитьиспользованиесобытияжурналарегистрации установитькраткийзаголовокприложения установитьминимальнуюдлинупаролейпользователей установитьмонопольныйрежим установитьнастройкиклиенталицензирования установитьобновлениепредопределенныхданныхинформационнойбазы установитьотключениебезопасногорежима установитьпараметрыфункциональныхопцийинтерфейса установитьпривилегированныйрежим установитьпроверкусложностипаролейпользователей установитьрасширениеработыскриптографией установитьрасширениеработысфайлами установитьсоединениесвнешнимисточникомданных установитьсоответствиеобъектаиформы установитьсоставстандартногоинтерфейсаodata установитьчасовойпоясинформационнойбазы установитьчасовойпояссеанса формат цел час часовойпояс часовойпояссеанса число числопрописью этоадресвременногохранилища ";
    const v8_global_context_property = "wsссылки библиотекакартинок библиотекамакетовоформлениякомпоновкиданных библиотекастилей бизнеспроцессы внешниеисточникиданных внешниеобработки внешниеотчеты встроенныепокупки главныйинтерфейс главныйстиль документы доставляемыеуведомления журналыдокументов задачи информацияобинтернетсоединении использованиерабочейдаты историяработыпользователя константы критерииотбора метаданные обработки отображениерекламы отправкадоставляемыхуведомлений отчеты панельзадачос параметрзапуска параметрысеанса перечисления планывидоврасчета планывидовхарактеристик планыобмена планысчетов полнотекстовыйпоиск пользователиинформационнойбазы последовательности проверкавстроенныхпокупок рабочаядата расширенияконфигурации регистрыбухгалтерии регистрынакопления регистрырасчета регистрысведений регламентныезадания сериализаторxdto справочники средствагеопозиционирования средствакриптографии средствамультимедиа средстваотображениярекламы средствапочты средствателефонии фабрикаxdto файловыепотоки фоновыезадания хранилищанастроек хранилищевариантовотчетов хранилищенастроекданныхформ хранилищеобщихнастроек хранилищепользовательскихнастроекдинамическихсписков хранилищепользовательскихнастроекотчетов хранилищесистемныхнастроек ";
    const BUILTIN = v7_system_constants + v7_global_context_methods + v8_global_context_methods + v8_global_context_property;
    const v8_system_sets_of_values = "webцвета windowsцвета windowsшрифты библиотекакартинок рамкистиля символы цветастиля шрифтыстиля ";
    const v8_system_enums_interface = "автоматическоесохранениеданныхформывнастройках автонумерациявформе автораздвижениесерий анимациядиаграммы вариантвыравниванияэлементовизаголовков вариантуправлениявысотойтаблицы вертикальнаяпрокруткаформы вертикальноеположение вертикальноеположениеэлемента видгруппыформы виддекорацииформы виддополненияэлементаформы видизмененияданных видкнопкиформы видпереключателя видподписейкдиаграмме видполяформы видфлажка влияниеразмеранапузырекдиаграммы горизонтальноеположение горизонтальноеположениеэлемента группировкаколонок группировкаподчиненныхэлементовформы группыиэлементы действиеперетаскивания дополнительныйрежимотображения допустимыедействияперетаскивания интервалмеждуэлементамиформы использованиевывода использованиеполосыпрокрутки используемоезначениеточкибиржевойдиаграммы историявыборапривводе источникзначенийоситочекдиаграммы источникзначенияразмерапузырькадиаграммы категориягруппыкоманд максимумсерий начальноеотображениедерева начальноеотображениесписка обновлениетекстаредактирования ориентациядендрограммы ориентациядиаграммы ориентацияметокдиаграммы ориентацияметоксводнойдиаграммы ориентацияэлементаформы отображениевдиаграмме отображениевлегендедиаграммы отображениегруппыкнопок отображениезаголовкашкалыдиаграммы отображениезначенийсводнойдиаграммы отображениезначенияизмерительнойдиаграммы отображениеинтерваладиаграммыганта отображениекнопки отображениекнопкивыбора отображениеобсужденийформы отображениеобычнойгруппы отображениеотрицательныхзначенийпузырьковойдиаграммы отображениепанелипоиска отображениеподсказки отображениепредупрежденияприредактировании отображениеразметкиполосырегулирования отображениестраницформы отображениетаблицы отображениетекстазначениядиаграммыганта отображениеуправленияобычнойгруппы отображениефигурыкнопки палитрацветовдиаграммы поведениеобычнойгруппы поддержкамасштабадендрограммы поддержкамасштабадиаграммыганта поддержкамасштабасводнойдиаграммы поисквтаблицепривводе положениезаголовкаэлементаформы положениекартинкикнопкиформы положениекартинкиэлементаграфическойсхемы положениекоманднойпанелиформы положениекоманднойпанелиэлементаформы положениеопорнойточкиотрисовки положениеподписейкдиаграмме положениеподписейшкалызначенийизмерительнойдиаграммы положениесостоянияпросмотра положениестрокипоиска положениетекстасоединительнойлинии положениеуправленияпоиском положениешкалывремени порядокотображенияточекгоризонтальнойгистограммы порядоксерийвлегендедиаграммы размеркартинки расположениезаголовкашкалыдиаграммы растягиваниеповертикалидиаграммыганта режимавтоотображениясостояния режимвводастроктаблицы режимвыборанезаполненного режимвыделениядаты режимвыделениястрокитаблицы режимвыделениятаблицы режимизмененияразмера режимизменениясвязанногозначения режимиспользованиядиалогапечати режимиспользованияпараметракоманды режиммасштабированияпросмотра режимосновногоокнаклиентскогоприложения режимоткрытияокнаформы режимотображениявыделения режимотображениягеографическойсхемы режимотображениязначенийсерии режимотрисовкисеткиграфическойсхемы режимполупрозрачностидиаграммы режимпробеловдиаграммы режимразмещениянастранице режимредактированияколонки режимсглаживаниядиаграммы режимсглаживанияиндикатора режимсписказадач сквозноевыравнивание сохранениеданныхформывнастройках способзаполнениятекстазаголовкашкалыдиаграммы способопределенияограничивающегозначениядиаграммы стандартнаягруппакоманд стандартноеоформление статусоповещенияпользователя стильстрелки типаппроксимациилиниитрендадиаграммы типдиаграммы типединицышкалывремени типимпортасерийслоягеографическойсхемы типлиниигеографическойсхемы типлиниидиаграммы типмаркерагеографическойсхемы типмаркерадиаграммы типобластиоформления типорганизацииисточникаданныхгеографическойсхемы типотображениясериислоягеографическойсхемы типотображенияточечногообъектагеографическойсхемы типотображенияшкалыэлементалегендыгеографическойсхемы типпоискаобъектовгеографическойсхемы типпроекциигеографическойсхемы типразмещенияизмерений типразмещенияреквизитовизмерений типрамкиэлементауправления типсводнойдиаграммы типсвязидиаграммыганта типсоединениязначенийпосериямдиаграммы типсоединенияточекдиаграммы типсоединительнойлинии типстороныэлементаграфическойсхемы типформыотчета типшкалырадарнойдиаграммы факторлиниитрендадиаграммы фигуракнопки фигурыграфическойсхемы фиксациявтаблице форматдняшкалывремени форматкартинки ширинаподчиненныхэлементовформы ";
    const v8_system_enums_objects_properties = "виддвижениябухгалтерии виддвижениянакопления видпериодарегистрарасчета видсчета видточкимаршрутабизнеспроцесса использованиеагрегатарегистранакопления использованиегруппиэлементов использованиережимапроведения использованиесреза периодичностьагрегатарегистранакопления режимавтовремя режимзаписидокумента режимпроведениядокумента ";
    const v8_system_enums_exchange_plans = "авторегистрацияизменений допустимыйномерсообщения отправкаэлементаданных получениеэлементаданных ";
    const v8_system_enums_tabular_document = "использованиерасшифровкитабличногодокумента ориентациястраницы положениеитоговколоноксводнойтаблицы положениеитоговстроксводнойтаблицы положениетекстаотносительнокартинки расположениезаголовкагруппировкитабличногодокумента способчтениязначенийтабличногодокумента типдвустороннейпечати типзаполненияобластитабличногодокумента типкурсоровтабличногодокумента типлиниирисункатабличногодокумента типлинииячейкитабличногодокумента типнаправленияпереходатабличногодокумента типотображениявыделениятабличногодокумента типотображениялинийсводнойтаблицы типразмещениятекстатабличногодокумента типрисункатабличногодокумента типсмещениятабличногодокумента типузоратабличногодокумента типфайлатабличногодокумента точностьпечати чередованиерасположениястраниц ";
    const v8_system_enums_sheduler = "отображениевремениэлементовпланировщика ";
    const v8_system_enums_formatted_document = "типфайлаформатированногодокумента ";
    const v8_system_enums_query = "обходрезультатазапроса типзаписизапроса ";
    const v8_system_enums_report_builder = "видзаполнениярасшифровкипостроителяотчета типдобавленияпредставлений типизмеренияпостроителяотчета типразмещенияитогов ";
    const v8_system_enums_files = "доступкфайлу режимдиалогавыборафайла режимоткрытияфайла ";
    const v8_system_enums_query_builder = "типизмеренияпостроителязапроса ";
    const v8_system_enums_data_analysis = "видданныханализа методкластеризации типединицыинтервалавременианализаданных типзаполнениятаблицырезультатаанализаданных типиспользованиячисловыхзначенийанализаданных типисточникаданныхпоискаассоциаций типколонкианализаданныхдереворешений типколонкианализаданныхкластеризация типколонкианализаданныхобщаястатистика типколонкианализаданныхпоискассоциаций типколонкианализаданныхпоискпоследовательностей типколонкимоделипрогноза типмерырасстоянияанализаданных типотсеченияправилассоциации типполяанализаданных типстандартизациианализаданных типупорядочиванияправилассоциациианализаданных типупорядочиванияшаблоновпоследовательностейанализаданных типупрощениядереварешений ";
    const v8_system_enums_xml_json_xs_dom_xdto_ws = "wsнаправлениепараметра вариантxpathxs вариантзаписидатыjson вариантпростоготипаxs видгруппымоделиxs видфасетаxdto действиепостроителяdom завершенностьпростоготипаxs завершенностьсоставноготипаxs завершенностьсхемыxs запрещенныеподстановкиxs исключениягруппподстановкиxs категорияиспользованияатрибутаxs категорияограниченияидентичностиxs категорияограниченияпространствименxs методнаследованияxs модельсодержимогоxs назначениетипаxml недопустимыеподстановкиxs обработкапробельныхсимволовxs обработкасодержимогоxs ограничениезначенияxs параметрыотбораузловdom переносстрокjson позициявдокументеdom пробельныесимволыxml типатрибутаxml типзначенияjson типканоническогоxml типкомпонентыxs типпроверкиxml типрезультатаdomxpath типузлаdom типузлаxml формаxml формапредставленияxs форматдатыjson экранированиесимволовjson ";
    const v8_system_enums_data_composition_system = "видсравнениякомпоновкиданных действиеобработкирасшифровкикомпоновкиданных направлениесортировкикомпоновкиданных расположениевложенныхэлементоврезультатакомпоновкиданных расположениеитоговкомпоновкиданных расположениегруппировкикомпоновкиданных расположениеполейгруппировкикомпоновкиданных расположениеполякомпоновкиданных расположениереквизитовкомпоновкиданных расположениересурсовкомпоновкиданных типбухгалтерскогоостаткакомпоновкиданных типвыводатекстакомпоновкиданных типгруппировкикомпоновкиданных типгруппыэлементовотборакомпоновкиданных типдополненияпериодакомпоновкиданных типзаголовкаполейкомпоновкиданных типмакетагруппировкикомпоновкиданных типмакетаобластикомпоновкиданных типостаткакомпоновкиданных типпериодакомпоновкиданных типразмещениятекстакомпоновкиданных типсвязинаборовданныхкомпоновкиданных типэлементарезультатакомпоновкиданных расположениелегендыдиаграммыкомпоновкиданных типпримененияотборакомпоновкиданных режимотображенияэлементанастройкикомпоновкиданных режимотображениянастроеккомпоновкиданных состояниеэлементанастройкикомпоновкиданных способвосстановлениянастроеккомпоновкиданных режимкомпоновкирезультата использованиепараметракомпоновкиданных автопозицияресурсовкомпоновкиданных вариантиспользованиягруппировкикомпоновкиданных расположениересурсоввдиаграммекомпоновкиданных фиксациякомпоновкиданных использованиеусловногооформлениякомпоновкиданных ";
    const v8_system_enums_email = "важностьинтернетпочтовогосообщения обработкатекстаинтернетпочтовогосообщения способкодированияинтернетпочтовоговложения способкодированиянеasciiсимволовинтернетпочтовогосообщения типтекстапочтовогосообщения протоколинтернетпочты статусразборапочтовогосообщения ";
    const v8_system_enums_logbook = "режимтранзакциизаписижурналарегистрации статустранзакциизаписижурналарегистрации уровеньжурналарегистрации ";
    const v8_system_enums_cryptography = "расположениехранилищасертификатовкриптографии режимвключениясертификатовкриптографии режимпроверкисертификатакриптографии типхранилищасертификатовкриптографии ";
    const v8_system_enums_zip = "кодировкаименфайловвzipфайле методсжатияzip методшифрованияzip режимвосстановленияпутейфайловzip режимобработкиподкаталоговzip режимсохраненияпутейzip уровеньсжатияzip ";
    const v8_system_enums_other = "звуковоеоповещение направлениепереходакстроке позициявпотоке порядокбайтов режимблокировкиданных режимуправленияблокировкойданных сервисвстроенныхпокупок состояниефоновогозадания типподписчикадоставляемыхуведомлений уровеньиспользованиязащищенногосоединенияftp ";
    const v8_system_enums_request_schema = "направлениепорядкасхемызапроса типдополненияпериодамисхемызапроса типконтрольнойточкисхемызапроса типобъединениясхемызапроса типпараметрадоступнойтаблицысхемызапроса типсоединениясхемызапроса ";
    const v8_system_enums_properties_of_metadata_objects = "httpметод автоиспользованиеобщегореквизита автопрефиксномеразадачи вариантвстроенногоязыка видиерархии видрегистранакопления видтаблицывнешнегоисточникаданных записьдвиженийприпроведении заполнениепоследовательностей индексирование использованиебазыпланавидоврасчета использованиебыстроговыбора использованиеобщегореквизита использованиеподчинения использованиеполнотекстовогопоиска использованиеразделяемыхданныхобщегореквизита использованиереквизита назначениеиспользованияприложения назначениерасширенияконфигурации направлениепередачи обновлениепредопределенныхданных оперативноепроведение основноепредставлениевидарасчета основноепредставлениевидахарактеристики основноепредставлениезадачи основноепредставлениепланаобмена основноепредставлениесправочника основноепредставлениесчета перемещениеграницыприпроведении периодичностьномерабизнеспроцесса периодичностьномерадокумента периодичностьрегистрарасчета периодичностьрегистрасведений повторноеиспользованиевозвращаемыхзначений полнотекстовыйпоискпривводепостроке принадлежностьобъекта проведение разделениеаутентификацииобщегореквизита разделениеданныхобщегореквизита разделениерасширенийконфигурацииобщегореквизита режимавтонумерацииобъектов режимзаписирегистра режимиспользованиямодальности режимиспользованиясинхронныхвызововрасширенийплатформыивнешнихкомпонент режимповторногоиспользованиясеансов режимполученияданныхвыборапривводепостроке режимсовместимости режимсовместимостиинтерфейса режимуправленияблокировкойданныхпоумолчанию сериикодовпланавидовхарактеристик сериикодовпланасчетов сериикодовсправочника созданиепривводе способвыбора способпоискастрокипривводепостроке способредактирования типданныхтаблицывнешнегоисточникаданных типкодапланавидоврасчета типкодасправочника типмакета типномерабизнеспроцесса типномерадокумента типномеразадачи типформы удалениедвижений ";
    const v8_system_enums_differents = "важностьпроблемыприменениярасширенияконфигурации вариантинтерфейсаклиентскогоприложения вариантмасштабаформклиентскогоприложения вариантосновногошрифтаклиентскогоприложения вариантстандартногопериода вариантстандартнойдатыначала видграницы видкартинки видотображенияполнотекстовогопоиска видрамки видсравнения видцвета видчисловогозначения видшрифта допустимаядлина допустимыйзнак использованиеbyteordermark использованиеметаданныхполнотекстовогопоиска источникрасширенийконфигурации клавиша кодвозвратадиалога кодировкаxbase кодировкатекста направлениепоиска направлениесортировки обновлениепредопределенныхданных обновлениеприизмененииданных отображениепанелиразделов проверказаполнения режимдиалогавопрос режимзапускаклиентскогоприложения режимокругления режимоткрытияформприложения режимполнотекстовогопоиска скоростьклиентскогосоединения состояниевнешнегоисточникаданных состояниеобновленияконфигурациибазыданных способвыборасертификатаwindows способкодированиястроки статуссообщения типвнешнейкомпоненты типплатформы типповеденияклавишиenter типэлементаинформацииовыполненииобновленияконфигурациибазыданных уровеньизоляциитранзакций хешфункция частидаты";
    const CLASS = v8_system_sets_of_values + v8_system_enums_interface + v8_system_enums_objects_properties + v8_system_enums_exchange_plans + v8_system_enums_tabular_document + v8_system_enums_sheduler + v8_system_enums_formatted_document + v8_system_enums_query + v8_system_enums_report_builder + v8_system_enums_files + v8_system_enums_query_builder + v8_system_enums_data_analysis + v8_system_enums_xml_json_xs_dom_xdto_ws + v8_system_enums_data_composition_system + v8_system_enums_email + v8_system_enums_logbook + v8_system_enums_cryptography + v8_system_enums_zip + v8_system_enums_other + v8_system_enums_request_schema + v8_system_enums_properties_of_metadata_objects + v8_system_enums_differents;
    const v8_shared_object = "comобъект ftpсоединение httpзапрос httpсервисответ httpсоединение wsопределения wsпрокси xbase анализданных аннотацияxs блокировкаданных буфердвоичныхданных включениеxs выражениекомпоновкиданных генераторслучайныхчисел географическаясхема географическиекоординаты графическаясхема группамоделиxs данныерасшифровкикомпоновкиданных двоичныеданные дендрограмма диаграмма диаграммаганта диалогвыборафайла диалогвыборацвета диалогвыборашрифта диалограсписаниярегламентногозадания диалогредактированиястандартногопериода диапазон документdom документhtml документацияxs доставляемоеуведомление записьdom записьfastinfoset записьhtml записьjson записьxml записьzipфайла записьданных записьтекста записьузловdom запрос защищенноесоединениеopenssl значенияполейрасшифровкикомпоновкиданных извлечениетекста импортxs интернетпочта интернетпочтовоесообщение интернетпочтовыйпрофиль интернетпрокси интернетсоединение информациядляприложенияxs использованиеатрибутаxs использованиесобытияжурналарегистрации источникдоступныхнастроеккомпоновкиданных итераторузловdom картинка квалификаторыдаты квалификаторыдвоичныхданных квалификаторыстроки квалификаторычисла компоновщикмакетакомпоновкиданных компоновщикнастроеккомпоновкиданных конструктормакетаоформлениякомпоновкиданных конструкторнастроеккомпоновкиданных конструкторформатнойстроки линия макеткомпоновкиданных макетобластикомпоновкиданных макетоформлениякомпоновкиданных маскаxs менеджеркриптографии наборсхемxml настройкикомпоновкиданных настройкисериализацииjson обработкакартинок обработкарасшифровкикомпоновкиданных обходдереваdom объявлениеатрибутаxs объявлениенотацииxs объявлениеэлементаxs описаниеиспользованиясобытиядоступжурналарегистрации описаниеиспользованиясобытияотказвдоступежурналарегистрации описаниеобработкирасшифровкикомпоновкиданных описаниепередаваемогофайла описаниетипов определениегруппыатрибутовxs определениегруппымоделиxs определениеограниченияидентичностиxs определениепростоготипаxs определениесоставноготипаxs определениетипадокументаdom определенияxpathxs отборкомпоновкиданных пакетотображаемыхдокументов параметрвыбора параметркомпоновкиданных параметрызаписиjson параметрызаписиxml параметрычтенияxml переопределениеxs планировщик полеанализаданных полекомпоновкиданных построительdom построительзапроса построительотчета построительотчетаанализаданных построительсхемxml поток потоквпамяти почта почтовоесообщение преобразованиеxsl преобразованиекканоническомуxml процессорвыводарезультатакомпоновкиданныхвколлекциюзначений процессорвыводарезультатакомпоновкиданныхвтабличныйдокумент процессоркомпоновкиданных разыменовательпространствименdom рамка расписаниерегламентногозадания расширенноеимяxml результатчтенияданных своднаядиаграмма связьпараметравыбора связьпотипу связьпотипукомпоновкиданных сериализаторxdto сертификатклиентаwindows сертификатклиентафайл сертификаткриптографии сертификатыудостоверяющихцентровwindows сертификатыудостоверяющихцентровфайл сжатиеданных системнаяинформация сообщениепользователю сочетаниеклавиш сравнениезначений стандартнаядатаначала стандартныйпериод схемаxml схемакомпоновкиданных табличныйдокумент текстовыйдокумент тестируемоеприложение типданныхxml уникальныйидентификатор фабрикаxdto файл файловыйпоток фасетдлиныxs фасетколичестваразрядовдробнойчастиxs фасетмаксимальноговключающегозначенияxs фасетмаксимальногоисключающегозначенияxs фасетмаксимальнойдлиныxs фасетминимальноговключающегозначенияxs фасетминимальногоисключающегозначенияxs фасетминимальнойдлиныxs фасетобразцаxs фасетобщегоколичестваразрядовxs фасетперечисленияxs фасетпробельныхсимволовxs фильтрузловdom форматированнаястрока форматированныйдокумент фрагментxs хешированиеданных хранилищезначения цвет чтениеfastinfoset чтениеhtml чтениеjson чтениеxml чтениеzipфайла чтениеданных чтениетекста чтениеузловdom шрифт элементрезультатакомпоновкиданных ";
    const v8_universal_collection = "comsafearray деревозначений массив соответствие списокзначений структура таблицазначений фиксированнаяструктура фиксированноесоответствие фиксированныймассив ";
    const TYPE = v8_shared_object + v8_universal_collection;
    const LITERAL = "null истина ложь неопределено";
    const NUMBERS = hljs.inherit(hljs.NUMBER_MODE);
    const STRINGS2 = {
      className: "string",
      begin: '"|\\|',
      end: '"|$',
      contains: [{ begin: '""' }]
    };
    const DATE = {
      begin: "'",
      end: "'",
      excludeBegin: true,
      excludeEnd: true,
      contains: [
        {
          className: "number",
          begin: "\\d{4}([\\.\\\\/:-]?\\d{2}){0,5}"
        }
      ]
    };
    const PUNCTUATION2 = {
      match: /[;()+\-:=,]/,
      className: "punctuation",
      relevance: 0
    };
    const COMMENTS = hljs.inherit(hljs.C_LINE_COMMENT_MODE);
    const META = {
      className: "meta",
      begin: "#|&",
      end: "$",
      keywords: {
        $pattern: UNDERSCORE_IDENT_RE2,
        keyword: KEYWORD + METAKEYWORD
      },
      contains: [COMMENTS]
    };
    const SYMBOL = {
      className: "symbol",
      begin: "~",
      end: ";|:",
      excludeEnd: true
    };
    const FUNCTION = {
      className: "function",
      variants: [
        {
          begin: "процедура|функция",
          end: "\\)",
          keywords: "процедура функция"
        },
        {
          begin: "конецпроцедуры|конецфункции",
          keywords: "конецпроцедуры конецфункции"
        }
      ],
      contains: [
        {
          begin: "\\(",
          end: "\\)",
          endsParent: true,
          contains: [
            {
              className: "params",
              begin: UNDERSCORE_IDENT_RE2,
              end: ",",
              excludeEnd: true,
              endsWithParent: true,
              keywords: {
                $pattern: UNDERSCORE_IDENT_RE2,
                keyword: "знач",
                literal: LITERAL
              },
              contains: [
                NUMBERS,
                STRINGS2,
                DATE
              ]
            },
            COMMENTS
          ]
        },
        hljs.inherit(hljs.TITLE_MODE, { begin: UNDERSCORE_IDENT_RE2 })
      ]
    };
    return {
      name: "1C:Enterprise",
      case_insensitive: true,
      keywords: {
        $pattern: UNDERSCORE_IDENT_RE2,
        keyword: KEYWORD,
        built_in: BUILTIN,
        class: CLASS,
        type: TYPE,
        literal: LITERAL
      },
      contains: [
        META,
        FUNCTION,
        COMMENTS,
        SYMBOL,
        NUMBERS,
        STRINGS2,
        DATE,
        PUNCTUATION2
      ]
    };
  }
  function abnf(hljs) {
    const regex = hljs.regex;
    const IDENT = /^[a-zA-Z][a-zA-Z0-9-]*/;
    const KEYWORDS2 = [
      "ALPHA",
      "BIT",
      "CHAR",
      "CR",
      "CRLF",
      "CTL",
      "DIGIT",
      "DQUOTE",
      "HEXDIG",
      "HTAB",
      "LF",
      "LWSP",
      "OCTET",
      "SP",
      "VCHAR",
      "WSP"
    ];
    const COMMENT2 = hljs.COMMENT(/;/, /$/);
    const TERMINAL_BINARY = {
      scope: "symbol",
      match: /%b[0-1]+(-[0-1]+|(\.[0-1]+)+)?/
    };
    const TERMINAL_DECIMAL = {
      scope: "symbol",
      match: /%d[0-9]+(-[0-9]+|(\.[0-9]+)+)?/
    };
    const TERMINAL_HEXADECIMAL = {
      scope: "symbol",
      match: /%x[0-9A-F]+(-[0-9A-F]+|(\.[0-9A-F]+)+)?/
    };
    const CASE_SENSITIVITY = {
      scope: "symbol",
      match: /%[si](?=".*")/
    };
    const RULE_DECLARATION = {
      scope: "attribute",
      match: regex.concat(IDENT, /(?=\s*=)/)
    };
    const ASSIGNMENT = {
      scope: "operator",
      match: /=\/?/
    };
    return {
      name: "Augmented Backus-Naur Form",
      illegal: /[!@#$^&',?+~`|:]/,
      keywords: KEYWORDS2,
      contains: [
        ASSIGNMENT,
        RULE_DECLARATION,
        COMMENT2,
        TERMINAL_BINARY,
        TERMINAL_DECIMAL,
        TERMINAL_HEXADECIMAL,
        CASE_SENSITIVITY,
        hljs.QUOTE_STRING_MODE,
        hljs.NUMBER_MODE
      ]
    };
  }
  function accesslog(hljs) {
    const regex = hljs.regex;
    const HTTP_VERBS = [
      "GET",
      "POST",
      "HEAD",
      "PUT",
      "DELETE",
      "CONNECT",
      "OPTIONS",
      "PATCH",
      "TRACE"
    ];
    return {
      name: "Apache Access Log",
      contains: [
        // IP
        {
          className: "number",
          begin: /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?\b/,
          relevance: 5
        },
        // Other numbers
        {
          className: "number",
          begin: /\b\d+\b/,
          relevance: 0
        },
        // Requests
        {
          className: "string",
          begin: regex.concat(/"/, regex.either(...HTTP_VERBS)),
          end: /"/,
          keywords: HTTP_VERBS,
          illegal: /\n/,
          relevance: 5,
          contains: [
            {
              begin: /HTTP\/[12]\.\d'/,
              relevance: 5
            }
          ]
        },
        // Dates
        {
          className: "string",
          // dates must have a certain length, this prevents matching
          // simple array accesses a[123] and [] and other common patterns
          // found in other languages
          begin: /\[\d[^\]\n]{8,}\]/,
          illegal: /\n/,
          relevance: 1
        },
        {
          className: "string",
          begin: /\[/,
          end: /\]/,
          illegal: /\n/,
          relevance: 0
        },
        // User agent / relevance boost
        {
          className: "string",
          begin: /"Mozilla\/\d\.\d \(/,
          end: /"/,
          illegal: /\n/,
          relevance: 3
        },
        // Strings
        {
          className: "string",
          begin: /"/,
          end: /"/,
          illegal: /\n/,
          relevance: 0
        }
      ]
    };
  }
  function actionscript(hljs) {
    const regex = hljs.regex;
    const IDENT_RE2 = /[a-zA-Z_$][a-zA-Z0-9_$]*/;
    const PKG_NAME_RE = regex.concat(
      IDENT_RE2,
      regex.concat("(\\.", IDENT_RE2, ")*")
    );
    const IDENT_FUNC_RETURN_TYPE_RE = /([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)/;
    const AS3_REST_ARG_MODE = {
      className: "rest_arg",
      begin: /[.]{3}/,
      end: IDENT_RE2,
      relevance: 10
    };
    const KEYWORDS2 = [
      "as",
      "break",
      "case",
      "catch",
      "class",
      "const",
      "continue",
      "default",
      "delete",
      "do",
      "dynamic",
      "each",
      "else",
      "extends",
      "final",
      "finally",
      "for",
      "function",
      "get",
      "if",
      "implements",
      "import",
      "in",
      "include",
      "instanceof",
      "interface",
      "internal",
      "is",
      "namespace",
      "native",
      "new",
      "override",
      "package",
      "private",
      "protected",
      "public",
      "return",
      "set",
      "static",
      "super",
      "switch",
      "this",
      "throw",
      "try",
      "typeof",
      "use",
      "var",
      "void",
      "while",
      "with"
    ];
    const LITERALS2 = [
      "true",
      "false",
      "null",
      "undefined"
    ];
    return {
      name: "ActionScript",
      aliases: ["as"],
      keywords: {
        keyword: KEYWORDS2,
        literal: LITERALS2
      },
      contains: [
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.C_NUMBER_MODE,
        {
          match: [
            /\bpackage/,
            /\s+/,
            PKG_NAME_RE
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          match: [
            /\b(?:class|interface|extends|implements)/,
            /\s+/,
            IDENT_RE2
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          className: "meta",
          beginKeywords: "import include",
          end: /;/,
          keywords: { keyword: "import include" }
        },
        {
          beginKeywords: "function",
          end: /[{;]/,
          excludeEnd: true,
          illegal: /\S/,
          contains: [
            hljs.inherit(hljs.TITLE_MODE, { className: "title.function" }),
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              contains: [
                hljs.APOS_STRING_MODE,
                hljs.QUOTE_STRING_MODE,
                hljs.C_LINE_COMMENT_MODE,
                hljs.C_BLOCK_COMMENT_MODE,
                AS3_REST_ARG_MODE
              ]
            },
            { begin: regex.concat(/:\s*/, IDENT_FUNC_RETURN_TYPE_RE) }
          ]
        },
        hljs.METHOD_GUARD
      ],
      illegal: /#/
    };
  }
  function ada(hljs) {
    const INTEGER_RE = "\\d(_|\\d)*";
    const EXPONENT_RE = "[eE][-+]?" + INTEGER_RE;
    const DECIMAL_LITERAL_RE = INTEGER_RE + "(\\." + INTEGER_RE + ")?(" + EXPONENT_RE + ")?";
    const BASED_INTEGER_RE = "\\w+";
    const BASED_LITERAL_RE = INTEGER_RE + "#" + BASED_INTEGER_RE + "(\\." + BASED_INTEGER_RE + ")?#(" + EXPONENT_RE + ")?";
    const NUMBER_RE2 = "\\b(" + BASED_LITERAL_RE + "|" + DECIMAL_LITERAL_RE + ")";
    const ID_REGEX = "[A-Za-z](_?[A-Za-z0-9.])*";
    const BAD_CHARS = `[]\\{\\}%#'"`;
    const COMMENTS = hljs.COMMENT("--", "$");
    const VAR_DECLS = {
      // TODO: These spaces are not required by the Ada syntax
      // however, I have yet to see handwritten Ada code where
      // someone does not put spaces around :
      begin: "\\s+:\\s+",
      end: "\\s*(:=|;|\\)|=>|$)",
      // endsWithParent: true,
      // returnBegin: true,
      illegal: BAD_CHARS,
      contains: [
        {
          // workaround to avoid highlighting
          // named loops and declare blocks
          beginKeywords: "loop for declare others",
          endsParent: true
        },
        {
          // properly highlight all modifiers
          className: "keyword",
          beginKeywords: "not null constant access function procedure in out aliased exception"
        },
        {
          className: "type",
          begin: ID_REGEX,
          endsParent: true,
          relevance: 0
        }
      ]
    };
    const KEYWORDS2 = [
      "abort",
      "else",
      "new",
      "return",
      "abs",
      "elsif",
      "not",
      "reverse",
      "abstract",
      "end",
      "accept",
      "entry",
      "select",
      "access",
      "exception",
      "of",
      "separate",
      "aliased",
      "exit",
      "or",
      "some",
      "all",
      "others",
      "subtype",
      "and",
      "for",
      "out",
      "synchronized",
      "array",
      "function",
      "overriding",
      "at",
      "tagged",
      "generic",
      "package",
      "task",
      "begin",
      "goto",
      "pragma",
      "terminate",
      "body",
      "private",
      "then",
      "if",
      "procedure",
      "type",
      "case",
      "in",
      "protected",
      "constant",
      "interface",
      "is",
      "raise",
      "use",
      "declare",
      "range",
      "delay",
      "limited",
      "record",
      "when",
      "delta",
      "loop",
      "rem",
      "while",
      "digits",
      "renames",
      "with",
      "do",
      "mod",
      "requeue",
      "xor"
    ];
    return {
      name: "Ada",
      case_insensitive: true,
      keywords: {
        keyword: KEYWORDS2,
        literal: [
          "True",
          "False"
        ]
      },
      contains: [
        COMMENTS,
        // strings "foobar"
        {
          className: "string",
          begin: /"/,
          end: /"/,
          contains: [
            {
              begin: /""/,
              relevance: 0
            }
          ]
        },
        // characters ''
        {
          // character literals always contain one char
          className: "string",
          begin: /'.'/
        },
        {
          // number literals
          className: "number",
          begin: NUMBER_RE2,
          relevance: 0
        },
        {
          // Attributes
          className: "symbol",
          begin: "'" + ID_REGEX
        },
        {
          // package definition, maybe inside generic
          className: "title",
          begin: "(\\bwith\\s+)?(\\bprivate\\s+)?\\bpackage\\s+(\\bbody\\s+)?",
          end: "(is|$)",
          keywords: "package body",
          excludeBegin: true,
          excludeEnd: true,
          illegal: BAD_CHARS
        },
        {
          // function/procedure declaration/definition
          // maybe inside generic
          begin: "(\\b(with|overriding)\\s+)?\\b(function|procedure)\\s+",
          end: "(\\bis|\\bwith|\\brenames|\\)\\s*;)",
          keywords: "overriding function procedure with is renames return",
          // we need to re-match the 'function' keyword, so that
          // the title mode below matches only exactly once
          returnBegin: true,
          contains: [
            COMMENTS,
            {
              // name of the function/procedure
              className: "title",
              begin: "(\\bwith\\s+)?\\b(function|procedure)\\s+",
              end: "(\\(|\\s+|$)",
              excludeBegin: true,
              excludeEnd: true,
              illegal: BAD_CHARS
            },
            // 'self'
            // // parameter types
            VAR_DECLS,
            {
              // return type
              className: "type",
              begin: "\\breturn\\s+",
              end: "(\\s+|;|$)",
              keywords: "return",
              excludeBegin: true,
              excludeEnd: true,
              // we are done with functions
              endsParent: true,
              illegal: BAD_CHARS
            }
          ]
        },
        {
          // new type declarations
          // maybe inside generic
          className: "type",
          begin: "\\b(sub)?type\\s+",
          end: "\\s+",
          keywords: "type",
          excludeBegin: true,
          illegal: BAD_CHARS
        },
        // see comment above the definition
        VAR_DECLS
        // no markup
        // relevance boosters for small snippets
        // {begin: '\\s*=>\\s*'},
        // {begin: '\\s*:=\\s*'},
        // {begin: '\\s+:=\\s+'},
      ]
    };
  }
  function angelscript(hljs) {
    const builtInTypeMode = {
      className: "built_in",
      begin: "\\b(void|bool|int8|int16|int32|int64|int|uint8|uint16|uint32|uint64|uint|string|ref|array|double|float|auto|dictionary)"
    };
    const objectHandleMode = {
      className: "symbol",
      begin: "[a-zA-Z0-9_]+@"
    };
    const genericMode = {
      className: "keyword",
      begin: "<",
      end: ">",
      contains: [
        builtInTypeMode,
        objectHandleMode
      ]
    };
    builtInTypeMode.contains = [genericMode];
    objectHandleMode.contains = [genericMode];
    const KEYWORDS2 = [
      "for",
      "in|0",
      "break",
      "continue",
      "while",
      "do|0",
      "return",
      "if",
      "else",
      "case",
      "switch",
      "namespace",
      "is",
      "cast",
      "or",
      "and",
      "xor",
      "not",
      "get|0",
      "in",
      "inout|10",
      "out",
      "override",
      "set|0",
      "private",
      "public",
      "const",
      "default|0",
      "final",
      "shared",
      "external",
      "mixin|10",
      "enum",
      "typedef",
      "funcdef",
      "this",
      "super",
      "import",
      "from",
      "interface",
      "abstract|0",
      "try",
      "catch",
      "protected",
      "explicit",
      "property"
    ];
    return {
      name: "AngelScript",
      aliases: ["asc"],
      keywords: KEYWORDS2,
      // avoid close detection with C# and JS
      illegal: "(^using\\s+[A-Za-z0-9_\\.]+;$|\\bfunction\\s*[^\\(])",
      contains: [
        {
          // 'strings'
          className: "string",
          begin: "'",
          end: "'",
          illegal: "\\n",
          contains: [hljs.BACKSLASH_ESCAPE],
          relevance: 0
        },
        // """heredoc strings"""
        {
          className: "string",
          begin: '"""',
          end: '"""'
        },
        {
          // "strings"
          className: "string",
          begin: '"',
          end: '"',
          illegal: "\\n",
          contains: [hljs.BACKSLASH_ESCAPE],
          relevance: 0
        },
        hljs.C_LINE_COMMENT_MODE,
        // single-line comments
        hljs.C_BLOCK_COMMENT_MODE,
        // comment blocks
        {
          // metadata
          className: "string",
          begin: "^\\s*\\[",
          end: "\\]"
        },
        {
          // interface or namespace declaration
          beginKeywords: "interface namespace",
          end: /\{/,
          illegal: "[;.\\-]",
          contains: [
            {
              // interface or namespace name
              className: "symbol",
              begin: "[a-zA-Z0-9_]+"
            }
          ]
        },
        {
          // class declaration
          beginKeywords: "class",
          end: /\{/,
          illegal: "[;.\\-]",
          contains: [
            {
              // class name
              className: "symbol",
              begin: "[a-zA-Z0-9_]+",
              contains: [
                {
                  begin: "[:,]\\s*",
                  contains: [
                    {
                      className: "symbol",
                      begin: "[a-zA-Z0-9_]+"
                    }
                  ]
                }
              ]
            }
          ]
        },
        builtInTypeMode,
        // built-in types
        objectHandleMode,
        // object handles
        {
          // literals
          className: "literal",
          begin: "\\b(null|true|false)"
        },
        {
          // numbers
          className: "number",
          relevance: 0,
          begin: "(-?)(\\b0[xXbBoOdD][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?f?|\\.\\d+f?)([eE][-+]?\\d+f?)?)"
        }
      ]
    };
  }
  function apache(hljs) {
    const NUMBER_REF = {
      className: "number",
      begin: /[$%]\d+/
    };
    const NUMBER = {
      className: "number",
      begin: /\b\d+/
    };
    const IP_ADDRESS = {
      className: "number",
      begin: /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?/
    };
    const PORT_NUMBER = {
      className: "number",
      begin: /:\d{1,5}/
    };
    return {
      name: "Apache config",
      aliases: ["apacheconf"],
      case_insensitive: true,
      contains: [
        hljs.HASH_COMMENT_MODE,
        {
          className: "section",
          begin: /<\/?/,
          end: />/,
          contains: [
            IP_ADDRESS,
            PORT_NUMBER,
            // low relevance prevents us from claming XML/HTML where this rule would
            // match strings inside of XML tags
            hljs.inherit(hljs.QUOTE_STRING_MODE, { relevance: 0 })
          ]
        },
        {
          className: "attribute",
          begin: /\w+/,
          relevance: 0,
          // keywords aren’t needed for highlighting per se, they only boost relevance
          // for a very generally defined mode (starts with a word, ends with line-end
          keywords: { _: [
            "order",
            "deny",
            "allow",
            "setenv",
            "rewriterule",
            "rewriteengine",
            "rewritecond",
            "documentroot",
            "sethandler",
            "errordocument",
            "loadmodule",
            "options",
            "header",
            "listen",
            "serverroot",
            "servername"
          ] },
          starts: {
            end: /$/,
            relevance: 0,
            keywords: { literal: "on off all deny allow" },
            contains: [
              {
                scope: "punctuation",
                match: /\\\n/
              },
              {
                className: "meta",
                begin: /\s\[/,
                end: /\]$/
              },
              {
                className: "variable",
                begin: /[\$%]\{/,
                end: /\}/,
                contains: [
                  "self",
                  NUMBER_REF
                ]
              },
              IP_ADDRESS,
              NUMBER,
              hljs.QUOTE_STRING_MODE
            ]
          }
        }
      ],
      illegal: /\S/
    };
  }
  function applescript(hljs) {
    const regex = hljs.regex;
    const STRING = hljs.inherit(
      hljs.QUOTE_STRING_MODE,
      { illegal: null }
    );
    const PARAMS = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      contains: [
        "self",
        hljs.C_NUMBER_MODE,
        STRING
      ]
    };
    const COMMENT_MODE_1 = hljs.COMMENT(/--/, /$/);
    const COMMENT_MODE_2 = hljs.COMMENT(
      /\(\*/,
      /\*\)/,
      { contains: [
        "self",
        // allow nesting
        COMMENT_MODE_1
      ] }
    );
    const COMMENTS = [
      COMMENT_MODE_1,
      COMMENT_MODE_2,
      hljs.HASH_COMMENT_MODE
    ];
    const KEYWORD_PATTERNS = [
      /apart from/,
      /aside from/,
      /instead of/,
      /out of/,
      /greater than/,
      /isn't|(doesn't|does not) (equal|come before|come after|contain)/,
      /(greater|less) than( or equal)?/,
      /(starts?|ends|begins?) with/,
      /contained by/,
      /comes (before|after)/,
      /a (ref|reference)/,
      /POSIX (file|path)/,
      /(date|time) string/,
      /quoted form/
    ];
    const BUILT_IN_PATTERNS = [
      /clipboard info/,
      /the clipboard/,
      /info for/,
      /list (disks|folder)/,
      /mount volume/,
      /path to/,
      /(close|open for) access/,
      /(get|set) eof/,
      /current date/,
      /do shell script/,
      /get volume settings/,
      /random number/,
      /set volume/,
      /system attribute/,
      /system info/,
      /time to GMT/,
      /(load|run|store) script/,
      /scripting components/,
      /ASCII (character|number)/,
      /localized string/,
      /choose (application|color|file|file name|folder|from list|remote application|URL)/,
      /display (alert|dialog)/
    ];
    return {
      name: "AppleScript",
      aliases: ["osascript"],
      keywords: {
        keyword: "about above after against and around as at back before beginning behind below beneath beside between but by considering contain contains continue copy div does eighth else end equal equals error every exit fifth first for fourth from front get given global if ignoring in into is it its last local me middle mod my ninth not of on onto or over prop property put ref reference repeat returning script second set seventh since sixth some tell tenth that the|0 then third through thru timeout times to transaction try until where while whose with without",
        literal: "AppleScript false linefeed return pi quote result space tab true",
        built_in: "alias application boolean class constant date file integer list number real record string text activate beep count delay launch log offset read round run say summarize write character characters contents day frontmost id item length month name|0 paragraph paragraphs rest reverse running time version weekday word words year"
      },
      contains: [
        STRING,
        hljs.C_NUMBER_MODE,
        {
          className: "built_in",
          begin: regex.concat(
            /\b/,
            regex.either(...BUILT_IN_PATTERNS),
            /\b/
          )
        },
        {
          className: "built_in",
          begin: /^\s*return\b/
        },
        {
          className: "literal",
          begin: /\b(text item delimiters|current application|missing value)\b/
        },
        {
          className: "keyword",
          begin: regex.concat(
            /\b/,
            regex.either(...KEYWORD_PATTERNS),
            /\b/
          )
        },
        {
          beginKeywords: "on",
          illegal: /[${=;\n]/,
          contains: [
            hljs.UNDERSCORE_TITLE_MODE,
            PARAMS
          ]
        },
        ...COMMENTS
      ],
      illegal: /\/\/|->|=>|\[\[/
    };
  }
  function arcade(hljs) {
    const regex = hljs.regex;
    const IDENT_RE2 = "[A-Za-z_][0-9A-Za-z_]*";
    const KEYWORDS2 = {
      keyword: [
        "break",
        "case",
        "catch",
        "continue",
        "debugger",
        "do",
        "else",
        "export",
        "for",
        "function",
        "if",
        "import",
        "in",
        "new",
        "of",
        "return",
        "switch",
        "try",
        "var",
        "void",
        "while"
      ],
      literal: [
        "BackSlash",
        "DoubleQuote",
        "ForwardSlash",
        "Infinity",
        "NaN",
        "NewLine",
        "PI",
        "SingleQuote",
        "Tab",
        "TextFormatting",
        "false",
        "null",
        "true",
        "undefined"
      ],
      built_in: [
        "Abs",
        "Acos",
        "All",
        "Angle",
        "Any",
        "Area",
        "AreaGeodetic",
        "Array",
        "Asin",
        "Atan",
        "Atan2",
        "Attachments",
        "Average",
        "Back",
        "Bearing",
        "Boolean",
        "Buffer",
        "BufferGeodetic",
        "Ceil",
        "Centroid",
        "ChangeTimeZone",
        "Clip",
        "Concatenate",
        "Console",
        "Constrain",
        "Contains",
        "ConvertDirection",
        "ConvexHull",
        "Cos",
        "Count",
        "Crosses",
        "Cut",
        "Date|0",
        "DateAdd",
        "DateDiff",
        "DateOnly",
        "Day",
        "Decode",
        "DefaultValue",
        "Densify",
        "DensifyGeodetic",
        "Dictionary",
        "Difference",
        "Disjoint",
        "Distance",
        "DistanceGeodetic",
        "DistanceToCoordinate",
        "Distinct",
        "Domain",
        "DomainCode",
        "DomainName",
        "EnvelopeIntersects",
        "Equals",
        "Erase",
        "Exp",
        "Expects",
        "Extent",
        "Feature",
        "FeatureInFilter",
        "FeatureSet",
        "FeatureSetByAssociation",
        "FeatureSetById",
        "FeatureSetByName",
        "FeatureSetByPortalItem",
        "FeatureSetByRelationshipClass",
        "FeatureSetByRelationshipName",
        "Filter",
        "FilterBySubtypeCode",
        "Find",
        "First|0",
        "Floor",
        "FromCharCode",
        "FromCodePoint",
        "FromJSON",
        "Front",
        "GdbVersion",
        "Generalize",
        "Geometry",
        "GetEnvironment",
        "GetFeatureSet",
        "GetFeatureSetInfo",
        "GetUser",
        "GroupBy",
        "Guid",
        "HasKey",
        "HasValue",
        "Hash",
        "Hour",
        "IIf",
        "ISOMonth",
        "ISOWeek",
        "ISOWeekday",
        "ISOYear",
        "Includes",
        "IndexOf",
        "Insert",
        "Intersection",
        "Intersects",
        "IsEmpty",
        "IsNan",
        "IsSelfIntersecting",
        "IsSimple",
        "KnowledgeGraphByPortalItem",
        "Left|0",
        "Length",
        "Length3D",
        "LengthGeodetic",
        "Log",
        "Lower",
        "Map",
        "Max",
        "Mean",
        "MeasureToCoordinate",
        "Mid",
        "Millisecond",
        "Min",
        "Minute",
        "Month",
        "MultiPartToSinglePart",
        "Multipoint",
        "NearestCoordinate",
        "NearestVertex",
        "NextSequenceValue",
        "None",
        "Now",
        "Number",
        "Offset",
        "OrderBy",
        "Overlaps",
        "Point",
        "PointToCoordinate",
        "Polygon",
        "Polyline",
        "Pop",
        "Portal",
        "Pow",
        "Proper",
        "Push",
        "QueryGraph",
        "Random",
        "Reduce",
        "Relate",
        "Replace",
        "Resize",
        "Reverse",
        "Right|0",
        "RingIsClockwise",
        "Rotate",
        "Round",
        "Schema",
        "Second",
        "SetGeometry",
        "Simplify",
        "Sin",
        "Slice",
        "Sort",
        "Splice",
        "Split",
        "Sqrt",
        "StandardizeFilename",
        "StandardizeGuid",
        "Stdev",
        "SubtypeCode",
        "SubtypeName",
        "Subtypes",
        "Sum",
        "SymmetricDifference",
        "Tan",
        "Text",
        "Time",
        "TimeZone",
        "TimeZoneOffset",
        "Timestamp",
        "ToCharCode",
        "ToCodePoint",
        "ToHex",
        "ToLocal",
        "ToUTC",
        "Today",
        "Top|0",
        "Touches",
        "TrackAccelerationAt",
        "TrackAccelerationWindow",
        "TrackCurrentAcceleration",
        "TrackCurrentDistance",
        "TrackCurrentSpeed",
        "TrackCurrentTime",
        "TrackDistanceAt",
        "TrackDistanceWindow",
        "TrackDuration",
        "TrackFieldWindow",
        "TrackGeometryWindow",
        "TrackIndex",
        "TrackSpeedAt",
        "TrackSpeedWindow",
        "TrackStartTime",
        "TrackWindow",
        "Trim",
        "TypeOf",
        "Union",
        "Upper",
        "UrlEncode",
        "Variance",
        "Week",
        "Weekday",
        "When|0",
        "Within",
        "Year|0"
      ]
    };
    const PROFILE_VARS = [
      "aggregatedFeatures",
      "analytic",
      "config",
      "datapoint",
      "datastore",
      "editcontext",
      "feature",
      "featureSet",
      "feedfeature",
      "fencefeature",
      "fencenotificationtype",
      "graph",
      "join",
      "layer",
      "locationupdate",
      "map",
      "measure",
      "measure",
      "originalFeature",
      "record",
      "reference",
      "rowindex",
      "sourcedatastore",
      "sourcefeature",
      "sourcelayer",
      "target",
      "targetdatastore",
      "targetfeature",
      "targetlayer",
      "userInput",
      "value",
      "variables",
      "view"
    ];
    const SYMBOL = {
      className: "symbol",
      begin: "\\$" + regex.either(...PROFILE_VARS)
    };
    const NUMBER = {
      className: "number",
      variants: [
        { begin: "\\b(0[bB][01]+)" },
        { begin: "\\b(0[oO][0-7]+)" },
        { begin: hljs.C_NUMBER_RE }
      ],
      relevance: 0
    };
    const SUBST = {
      className: "subst",
      begin: "\\$\\{",
      end: "\\}",
      keywords: KEYWORDS2,
      contains: []
      // defined later
    };
    const TEMPLATE_STRING = {
      className: "string",
      begin: "`",
      end: "`",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ]
    };
    SUBST.contains = [
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      TEMPLATE_STRING,
      NUMBER,
      hljs.REGEXP_MODE
    ];
    const PARAMS_CONTAINS = SUBST.contains.concat([
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.C_LINE_COMMENT_MODE
    ]);
    return {
      name: "ArcGIS Arcade",
      case_insensitive: true,
      keywords: KEYWORDS2,
      contains: [
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        TEMPLATE_STRING,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        SYMBOL,
        NUMBER,
        {
          // object attr container
          begin: /[{,]\s*/,
          relevance: 0,
          contains: [
            {
              begin: IDENT_RE2 + "\\s*:",
              returnBegin: true,
              relevance: 0,
              contains: [
                {
                  className: "attr",
                  begin: IDENT_RE2,
                  relevance: 0
                }
              ]
            }
          ]
        },
        {
          // "value" container
          begin: "(" + hljs.RE_STARTERS_RE + "|\\b(return)\\b)\\s*",
          keywords: "return",
          contains: [
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.REGEXP_MODE,
            {
              className: "function",
              begin: "(\\(.*?\\)|" + IDENT_RE2 + ")\\s*=>",
              returnBegin: true,
              end: "\\s*=>",
              contains: [
                {
                  className: "params",
                  variants: [
                    { begin: IDENT_RE2 },
                    { begin: /\(\s*\)/ },
                    {
                      begin: /\(/,
                      end: /\)/,
                      excludeBegin: true,
                      excludeEnd: true,
                      keywords: KEYWORDS2,
                      contains: PARAMS_CONTAINS
                    }
                  ]
                }
              ]
            }
          ],
          relevance: 0
        },
        {
          beginKeywords: "function",
          end: /\{/,
          excludeEnd: true,
          contains: [
            hljs.inherit(hljs.TITLE_MODE, {
              className: "title.function",
              begin: IDENT_RE2
            }),
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              excludeBegin: true,
              excludeEnd: true,
              contains: PARAMS_CONTAINS
            }
          ],
          illegal: /\[|%/
        },
        { begin: /\$[(.]/ }
      ],
      illegal: /#(?!!)/
    };
  }
  function armasm(hljs) {
    const COMMENT2 = { variants: [
      hljs.COMMENT("^[ \\t]*(?=#)", "$", {
        relevance: 0,
        excludeBegin: true
      }),
      hljs.COMMENT("[;@]", "$", { relevance: 0 }),
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE
    ] };
    return {
      name: "ARM Assembly",
      case_insensitive: true,
      aliases: ["arm"],
      keywords: {
        $pattern: "\\.?" + hljs.IDENT_RE,
        meta: (
          // GNU preprocs
          ".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND "
        ),
        built_in: "r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 w0 w1 w2 w3 w4 w5 w6 w7 w8 w9 w10 w11 w12 w13 w14 w15 w16 w17 w18 w19 w20 w21 w22 w23 w24 w25 w26 w27 w28 w29 w30 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 pc lr sp ip sl sb fp a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 d16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 {PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @"
      },
      contains: [
        {
          className: "keyword",
          begin: "\\b(adc|(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|wfe|wfi|yield)(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?[sptrx]?(?=\\s)"
          // followed by space
        },
        COMMENT2,
        hljs.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "'",
          end: "[^\\\\]'",
          relevance: 0
        },
        {
          className: "title",
          begin: "\\|",
          end: "\\|",
          illegal: "\\n",
          relevance: 0
        },
        {
          className: "number",
          variants: [
            {
              // hex
              begin: "[#$=]?0x[0-9a-f]+"
            },
            {
              // bin
              begin: "[#$=]?0b[01]+"
            },
            {
              // literal
              begin: "[#$=]\\d+"
            },
            {
              // bare number
              begin: "\\b\\d+"
            }
          ],
          relevance: 0
        },
        {
          className: "symbol",
          variants: [
            {
              // GNU ARM syntax
              begin: "^[ \\t]*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"
            },
            {
              // ARM syntax
              begin: "^[a-z_\\.\\$][a-z0-9_\\.\\$]+"
            },
            {
              // label reference
              begin: "[=#]\\w+"
            }
          ],
          relevance: 0
        }
      ]
    };
  }
  function asciidoc(hljs) {
    const regex = hljs.regex;
    const HORIZONTAL_RULE = {
      begin: "^'{3,}[ \\t]*$",
      relevance: 10
    };
    const ESCAPED_FORMATTING = [
      // escaped constrained formatting marks (i.e., \* \_ or \`)
      { begin: /\\[*_`]/ },
      // escaped unconstrained formatting marks (i.e., \\** \\__ or \\``)
      // must ignore until the next formatting marks
      // this rule might not be 100% compliant with Asciidoctor 2.0 but we are entering undefined behavior territory...
      { begin: /\\\\\*{2}[^\n]*?\*{2}/ },
      { begin: /\\\\_{2}[^\n]*_{2}/ },
      { begin: /\\\\`{2}[^\n]*`{2}/ },
      // guard: constrained formatting mark may not be preceded by ":", ";" or
      // "}". match these so the constrained rule doesn't see them
      { begin: /[:;}][*_`](?![*_`])/ }
    ];
    const STRONG = [
      // inline unconstrained strong (single line)
      {
        className: "strong",
        begin: /\*{2}([^\n]+?)\*{2}/
      },
      // inline unconstrained strong (multi-line)
      {
        className: "strong",
        begin: regex.concat(
          /\*\*/,
          /((\*(?!\*)|\\[^\n]|[^*\n\\])+\n)+/,
          /(\*(?!\*)|\\[^\n]|[^*\n\\])*/,
          /\*\*/
        ),
        relevance: 0
      },
      // inline constrained strong (single line)
      {
        className: "strong",
        // must not precede or follow a word character
        begin: /\B\*(\S|\S[^\n]*?\S)\*(?!\w)/
      },
      // inline constrained strong (multi-line)
      {
        className: "strong",
        // must not precede or follow a word character
        begin: /\*[^\s]([^\n]+\n)+([^\n]+)\*/
      }
    ];
    const EMPHASIS = [
      // inline unconstrained emphasis (single line)
      {
        className: "emphasis",
        begin: /_{2}([^\n]+?)_{2}/
      },
      // inline unconstrained emphasis (multi-line)
      {
        className: "emphasis",
        begin: regex.concat(
          /__/,
          /((_(?!_)|\\[^\n]|[^_\n\\])+\n)+/,
          /(_(?!_)|\\[^\n]|[^_\n\\])*/,
          /__/
        ),
        relevance: 0
      },
      // inline constrained emphasis (single line)
      {
        className: "emphasis",
        // must not precede or follow a word character
        begin: /\b_(\S|\S[^\n]*?\S)_(?!\w)/
      },
      // inline constrained emphasis (multi-line)
      {
        className: "emphasis",
        // must not precede or follow a word character
        begin: /_[^\s]([^\n]+\n)+([^\n]+)_/
      },
      // inline constrained emphasis using single quote (legacy)
      {
        className: "emphasis",
        // must not follow a word character or be followed by a single quote or space
        begin: "\\B'(?!['\\s])",
        end: "(\\n{2}|')",
        // allow escaped single quote followed by word char
        contains: [
          {
            begin: "\\\\'\\w",
            relevance: 0
          }
        ],
        relevance: 0
      }
    ];
    const ADMONITION = {
      className: "symbol",
      begin: "^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\s+",
      relevance: 10
    };
    const BULLET_LIST = {
      className: "bullet",
      begin: "^(\\*+|-+|\\.+|[^\\n]+?::)\\s+"
    };
    return {
      name: "AsciiDoc",
      aliases: ["adoc"],
      contains: [
        // block comment
        hljs.COMMENT(
          "^/{4,}\\n",
          "\\n/{4,}$",
          // can also be done as...
          // '^/{4,}$',
          // '^/{4,}$',
          { relevance: 10 }
        ),
        // line comment
        hljs.COMMENT(
          "^//",
          "$",
          { relevance: 0 }
        ),
        // title
        {
          className: "title",
          begin: "^\\.\\w.*$"
        },
        // example, admonition & sidebar blocks
        {
          begin: "^[=\\*]{4,}\\n",
          end: "\\n^[=\\*]{4,}$",
          relevance: 10
        },
        // headings
        {
          className: "section",
          relevance: 10,
          variants: [
            { begin: "^(={1,6})[ 	].+?([ 	]\\1)?$" },
            { begin: "^[^\\[\\]\\n]+?\\n[=\\-~\\^\\+]{2,}$" }
          ]
        },
        // document attributes
        {
          className: "meta",
          begin: "^:.+?:",
          end: "\\s",
          excludeEnd: true,
          relevance: 10
        },
        // block attributes
        {
          className: "meta",
          begin: "^\\[.+?\\]$",
          relevance: 0
        },
        // quoteblocks
        {
          className: "quote",
          begin: "^_{4,}\\n",
          end: "\\n_{4,}$",
          relevance: 10
        },
        // listing and literal blocks
        {
          className: "code",
          begin: "^[\\-\\.]{4,}\\n",
          end: "\\n[\\-\\.]{4,}$",
          relevance: 10
        },
        // passthrough blocks
        {
          begin: "^\\+{4,}\\n",
          end: "\\n\\+{4,}$",
          contains: [
            {
              begin: "<",
              end: ">",
              subLanguage: "xml",
              relevance: 0
            }
          ],
          relevance: 10
        },
        BULLET_LIST,
        ADMONITION,
        ...ESCAPED_FORMATTING,
        ...STRONG,
        ...EMPHASIS,
        // inline smart quotes
        {
          className: "string",
          variants: [
            { begin: "``.+?''" },
            { begin: "`.+?'" }
          ]
        },
        // inline unconstrained emphasis
        {
          className: "code",
          begin: /`{2}/,
          end: /(\n{2}|`{2})/
        },
        // inline code snippets (TODO should get same treatment as strong and emphasis)
        {
          className: "code",
          begin: "(`.+?`|\\+.+?\\+)",
          relevance: 0
        },
        // indented literal block
        {
          className: "code",
          begin: "^[ \\t]",
          end: "$",
          relevance: 0
        },
        HORIZONTAL_RULE,
        // images and links
        {
          begin: "(link:)?(http|https|ftp|file|irc|image:?):\\S+?\\[[^[]*?\\]",
          returnBegin: true,
          contains: [
            {
              begin: "(link|image:?):",
              relevance: 0
            },
            {
              className: "link",
              begin: "\\w",
              end: "[^\\[]+",
              relevance: 0
            },
            {
              className: "string",
              begin: "\\[",
              end: "\\]",
              excludeBegin: true,
              excludeEnd: true,
              relevance: 0
            }
          ],
          relevance: 10
        }
      ]
    };
  }
  function aspectj(hljs) {
    const regex = hljs.regex;
    const KEYWORDS2 = [
      "false",
      "synchronized",
      "int",
      "abstract",
      "float",
      "private",
      "char",
      "boolean",
      "static",
      "null",
      "if",
      "const",
      "for",
      "true",
      "while",
      "long",
      "throw",
      "strictfp",
      "finally",
      "protected",
      "import",
      "native",
      "final",
      "return",
      "void",
      "enum",
      "else",
      "extends",
      "implements",
      "break",
      "transient",
      "new",
      "catch",
      "instanceof",
      "byte",
      "super",
      "volatile",
      "case",
      "assert",
      "short",
      "package",
      "default",
      "double",
      "public",
      "try",
      "this",
      "switch",
      "continue",
      "throws",
      "privileged",
      "aspectOf",
      "adviceexecution",
      "proceed",
      "cflowbelow",
      "cflow",
      "initialization",
      "preinitialization",
      "staticinitialization",
      "withincode",
      "target",
      "within",
      "execution",
      "getWithinTypeName",
      "handler",
      "thisJoinPoint",
      "thisJoinPointStaticPart",
      "thisEnclosingJoinPointStaticPart",
      "declare",
      "parents",
      "warning",
      "error",
      "soft",
      "precedence",
      "thisAspectInstance"
    ];
    const SHORTKEYS = [
      "get",
      "set",
      "args",
      "call"
    ];
    return {
      name: "AspectJ",
      keywords: KEYWORDS2,
      illegal: /<\/|#/,
      contains: [
        hljs.COMMENT(
          /\/\*\*/,
          /\*\//,
          {
            relevance: 0,
            contains: [
              {
                // eat up @'s in emails to prevent them to be recognized as doctags
                begin: /\w+@/,
                relevance: 0
              },
              {
                className: "doctag",
                begin: /@[A-Za-z]+/
              }
            ]
          }
        ),
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        {
          className: "class",
          beginKeywords: "aspect",
          end: /[{;=]/,
          excludeEnd: true,
          illegal: /[:;"\[\]]/,
          contains: [
            { beginKeywords: "extends implements pertypewithin perthis pertarget percflowbelow percflow issingleton" },
            hljs.UNDERSCORE_TITLE_MODE,
            {
              begin: /\([^\)]*/,
              end: /[)]+/,
              keywords: KEYWORDS2.concat(SHORTKEYS),
              excludeEnd: false
            }
          ]
        },
        {
          className: "class",
          beginKeywords: "class interface",
          end: /[{;=]/,
          excludeEnd: true,
          relevance: 0,
          keywords: "class interface",
          illegal: /[:"\[\]]/,
          contains: [
            { beginKeywords: "extends implements" },
            hljs.UNDERSCORE_TITLE_MODE
          ]
        },
        {
          // AspectJ Constructs
          beginKeywords: "pointcut after before around throwing returning",
          end: /[)]/,
          excludeEnd: false,
          illegal: /["\[\]]/,
          contains: [
            {
              begin: regex.concat(hljs.UNDERSCORE_IDENT_RE, /\s*\(/),
              returnBegin: true,
              contains: [hljs.UNDERSCORE_TITLE_MODE]
            }
          ]
        },
        {
          begin: /[:]/,
          returnBegin: true,
          end: /[{;]/,
          relevance: 0,
          excludeEnd: false,
          keywords: KEYWORDS2,
          illegal: /["\[\]]/,
          contains: [
            {
              begin: regex.concat(hljs.UNDERSCORE_IDENT_RE, /\s*\(/),
              keywords: KEYWORDS2.concat(SHORTKEYS),
              relevance: 0
            },
            hljs.QUOTE_STRING_MODE
          ]
        },
        {
          // this prevents 'new Name(...), or throw ...' from being recognized as a function definition
          beginKeywords: "new throw",
          relevance: 0
        },
        {
          // the function class is a bit different for AspectJ compared to the Java language
          className: "function",
          begin: /\w+ +\w+(\.\w+)?\s*\([^\)]*\)\s*((throws)[\w\s,]+)?[\{;]/,
          returnBegin: true,
          end: /[{;=]/,
          keywords: KEYWORDS2,
          excludeEnd: true,
          contains: [
            {
              begin: regex.concat(hljs.UNDERSCORE_IDENT_RE, /\s*\(/),
              returnBegin: true,
              relevance: 0,
              contains: [hljs.UNDERSCORE_TITLE_MODE]
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              relevance: 0,
              keywords: KEYWORDS2,
              contains: [
                hljs.APOS_STRING_MODE,
                hljs.QUOTE_STRING_MODE,
                hljs.C_NUMBER_MODE,
                hljs.C_BLOCK_COMMENT_MODE
              ]
            },
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        hljs.C_NUMBER_MODE,
        {
          // annotation is also used in this language
          className: "meta",
          begin: /@[A-Za-z]+/
        }
      ]
    };
  }
  function autohotkey(hljs) {
    const BACKTICK_ESCAPE = { begin: "`[\\s\\S]" };
    return {
      name: "AutoHotkey",
      case_insensitive: true,
      aliases: ["ahk"],
      keywords: {
        keyword: "Break Continue Critical Exit ExitApp Gosub Goto New OnExit Pause return SetBatchLines SetTimer Suspend Thread Throw Until ahk_id ahk_class ahk_pid ahk_exe ahk_group",
        literal: "true false NOT AND OR",
        built_in: "ComSpec Clipboard ClipboardAll ErrorLevel"
      },
      contains: [
        BACKTICK_ESCAPE,
        hljs.inherit(hljs.QUOTE_STRING_MODE, { contains: [BACKTICK_ESCAPE] }),
        hljs.COMMENT(";", "$", { relevance: 0 }),
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "number",
          begin: hljs.NUMBER_RE,
          relevance: 0
        },
        {
          // subst would be the most accurate however fails the point of
          // highlighting. variable is comparably the most accurate that actually
          // has some effect
          className: "variable",
          begin: "%[a-zA-Z0-9#_$@]+%"
        },
        {
          className: "built_in",
          begin: "^\\s*\\w+\\s*(,|%)"
          // I don't really know if this is totally relevant
        },
        {
          // symbol would be most accurate however is highlighted just like
          // built_in and that makes up a lot of AutoHotkey code meaning that it
          // would fail to highlight anything
          className: "title",
          variants: [
            { begin: '^[^\\n";]+::(?!=)' },
            {
              begin: '^[^\\n";]+:(?!=)',
              // zero relevance as it catches a lot of things
              // followed by a single ':' in many languages
              relevance: 0
            }
          ]
        },
        {
          className: "meta",
          begin: "^\\s*#\\w+",
          end: "$",
          relevance: 0
        },
        {
          className: "built_in",
          begin: "A_[a-zA-Z0-9]+"
        },
        {
          // consecutive commas, not for highlighting but just for relevance
          begin: ",\\s*,"
        }
      ]
    };
  }
  function autoit(hljs) {
    const KEYWORDS2 = "ByRef Case Const ContinueCase ContinueLoop Dim Do Else ElseIf EndFunc EndIf EndSelect EndSwitch EndWith Enum Exit ExitLoop For Func Global If In Local Next ReDim Return Select Static Step Switch Then To Until Volatile WEnd While With";
    const DIRECTIVES = [
      "EndRegion",
      "forcedef",
      "forceref",
      "ignorefunc",
      "include",
      "include-once",
      "NoTrayIcon",
      "OnAutoItStartRegister",
      "pragma",
      "Region",
      "RequireAdmin",
      "Tidy_Off",
      "Tidy_On",
      "Tidy_Parameters"
    ];
    const LITERAL = "True False And Null Not Or Default";
    const BUILT_IN = "Abs ACos AdlibRegister AdlibUnRegister Asc AscW ASin Assign ATan AutoItSetOption AutoItWinGetTitle AutoItWinSetTitle Beep Binary BinaryLen BinaryMid BinaryToString BitAND BitNOT BitOR BitRotate BitShift BitXOR BlockInput Break Call CDTray Ceiling Chr ChrW ClipGet ClipPut ConsoleRead ConsoleWrite ConsoleWriteError ControlClick ControlCommand ControlDisable ControlEnable ControlFocus ControlGetFocus ControlGetHandle ControlGetPos ControlGetText ControlHide ControlListView ControlMove ControlSend ControlSetText ControlShow ControlTreeView Cos Dec DirCopy DirCreate DirGetSize DirMove DirRemove DllCall DllCallAddress DllCallbackFree DllCallbackGetPtr DllCallbackRegister DllClose DllOpen DllStructCreate DllStructGetData DllStructGetPtr DllStructGetSize DllStructSetData DriveGetDrive DriveGetFileSystem DriveGetLabel DriveGetSerial DriveGetType DriveMapAdd DriveMapDel DriveMapGet DriveSetLabel DriveSpaceFree DriveSpaceTotal DriveStatus EnvGet EnvSet EnvUpdate Eval Execute Exp FileChangeDir FileClose FileCopy FileCreateNTFSLink FileCreateShortcut FileDelete FileExists FileFindFirstFile FileFindNextFile FileFlush FileGetAttrib FileGetEncoding FileGetLongName FileGetPos FileGetShortcut FileGetShortName FileGetSize FileGetTime FileGetVersion FileInstall FileMove FileOpen FileOpenDialog FileRead FileReadLine FileReadToArray FileRecycle FileRecycleEmpty FileSaveDialog FileSelectFolder FileSetAttrib FileSetEnd FileSetPos FileSetTime FileWrite FileWriteLine Floor FtpSetProxy FuncName GUICreate GUICtrlCreateAvi GUICtrlCreateButton GUICtrlCreateCheckbox GUICtrlCreateCombo GUICtrlCreateContextMenu GUICtrlCreateDate GUICtrlCreateDummy GUICtrlCreateEdit GUICtrlCreateGraphic GUICtrlCreateGroup GUICtrlCreateIcon GUICtrlCreateInput GUICtrlCreateLabel GUICtrlCreateList GUICtrlCreateListView GUICtrlCreateListViewItem GUICtrlCreateMenu GUICtrlCreateMenuItem GUICtrlCreateMonthCal GUICtrlCreateObj GUICtrlCreatePic GUICtrlCreateProgress GUICtrlCreateRadio GUICtrlCreateSlider GUICtrlCreateTab GUICtrlCreateTabItem GUICtrlCreateTreeView GUICtrlCreateTreeViewItem GUICtrlCreateUpdown GUICtrlDelete GUICtrlGetHandle GUICtrlGetState GUICtrlRead GUICtrlRecvMsg GUICtrlRegisterListViewSort GUICtrlSendMsg GUICtrlSendToDummy GUICtrlSetBkColor GUICtrlSetColor GUICtrlSetCursor GUICtrlSetData GUICtrlSetDefBkColor GUICtrlSetDefColor GUICtrlSetFont GUICtrlSetGraphic GUICtrlSetImage GUICtrlSetLimit GUICtrlSetOnEvent GUICtrlSetPos GUICtrlSetResizing GUICtrlSetState GUICtrlSetStyle GUICtrlSetTip GUIDelete GUIGetCursorInfo GUIGetMsg GUIGetStyle GUIRegisterMsg GUISetAccelerators GUISetBkColor GUISetCoord GUISetCursor GUISetFont GUISetHelp GUISetIcon GUISetOnEvent GUISetState GUISetStyle GUIStartGroup GUISwitch Hex HotKeySet HttpSetProxy HttpSetUserAgent HWnd InetClose InetGet InetGetInfo InetGetSize InetRead IniDelete IniRead IniReadSection IniReadSectionNames IniRenameSection IniWrite IniWriteSection InputBox Int IsAdmin IsArray IsBinary IsBool IsDeclared IsDllStruct IsFloat IsFunc IsHWnd IsInt IsKeyword IsNumber IsObj IsPtr IsString Log MemGetStats Mod MouseClick MouseClickDrag MouseDown MouseGetCursor MouseGetPos MouseMove MouseUp MouseWheel MsgBox Number ObjCreate ObjCreateInterface ObjEvent ObjGet ObjName OnAutoItExitRegister OnAutoItExitUnRegister Ping PixelChecksum PixelGetColor PixelSearch ProcessClose ProcessExists ProcessGetStats ProcessList ProcessSetPriority ProcessWait ProcessWaitClose ProgressOff ProgressOn ProgressSet Ptr Random RegDelete RegEnumKey RegEnumVal RegRead RegWrite Round Run RunAs RunAsWait RunWait Send SendKeepActive SetError SetExtended ShellExecute ShellExecuteWait Shutdown Sin Sleep SoundPlay SoundSetWaveVolume SplashImageOn SplashOff SplashTextOn Sqrt SRandom StatusbarGetText StderrRead StdinWrite StdioClose StdoutRead String StringAddCR StringCompare StringFormat StringFromASCIIArray StringInStr StringIsAlNum StringIsAlpha StringIsASCII StringIsDigit StringIsFloat StringIsInt StringIsLower StringIsSpace StringIsUpper StringIsXDigit StringLeft StringLen StringLower StringMid StringRegExp StringRegExpReplace StringReplace StringReverse StringRight StringSplit StringStripCR StringStripWS StringToASCIIArray StringToBinary StringTrimLeft StringTrimRight StringUpper Tan TCPAccept TCPCloseSocket TCPConnect TCPListen TCPNameToIP TCPRecv TCPSend TCPShutdown, UDPShutdown TCPStartup, UDPStartup TimerDiff TimerInit ToolTip TrayCreateItem TrayCreateMenu TrayGetMsg TrayItemDelete TrayItemGetHandle TrayItemGetState TrayItemGetText TrayItemSetOnEvent TrayItemSetState TrayItemSetText TraySetClick TraySetIcon TraySetOnEvent TraySetPauseIcon TraySetState TraySetToolTip TrayTip UBound UDPBind UDPCloseSocket UDPOpen UDPRecv UDPSend VarGetType WinActivate WinActive WinClose WinExists WinFlash WinGetCaretPos WinGetClassList WinGetClientSize WinGetHandle WinGetPos WinGetProcess WinGetState WinGetText WinGetTitle WinKill WinList WinMenuSelectItem WinMinimizeAll WinMinimizeAllUndo WinMove WinSetOnTop WinSetState WinSetTitle WinSetTrans WinWait WinWaitActive WinWaitClose WinWaitNotActive";
    const COMMENT2 = { variants: [
      hljs.COMMENT(";", "$", { relevance: 0 }),
      hljs.COMMENT("#cs", "#ce"),
      hljs.COMMENT("#comments-start", "#comments-end")
    ] };
    const VARIABLE = { begin: "\\$[A-z0-9_]+" };
    const STRING = {
      className: "string",
      variants: [
        {
          begin: /"/,
          end: /"/,
          contains: [
            {
              begin: /""/,
              relevance: 0
            }
          ]
        },
        {
          begin: /'/,
          end: /'/,
          contains: [
            {
              begin: /''/,
              relevance: 0
            }
          ]
        }
      ]
    };
    const NUMBER = { variants: [
      hljs.BINARY_NUMBER_MODE,
      hljs.C_NUMBER_MODE
    ] };
    const PREPROCESSOR = {
      className: "meta",
      begin: "#",
      end: "$",
      keywords: { keyword: DIRECTIVES },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        {
          beginKeywords: "include",
          keywords: { keyword: "include" },
          end: "$",
          contains: [
            STRING,
            {
              className: "string",
              variants: [
                {
                  begin: "<",
                  end: ">"
                },
                {
                  begin: /"/,
                  end: /"/,
                  contains: [
                    {
                      begin: /""/,
                      relevance: 0
                    }
                  ]
                },
                {
                  begin: /'/,
                  end: /'/,
                  contains: [
                    {
                      begin: /''/,
                      relevance: 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        STRING,
        COMMENT2
      ]
    };
    const CONSTANT = {
      className: "symbol",
      // begin: '@',
      // end: '$',
      // keywords: 'AppDataCommonDir AppDataDir AutoItExe AutoItPID AutoItVersion AutoItX64 COM_EventObj CommonFilesDir Compiled ComputerName ComSpec CPUArch CR CRLF DesktopCommonDir DesktopDepth DesktopDir DesktopHeight DesktopRefresh DesktopWidth DocumentsCommonDir error exitCode exitMethod extended FavoritesCommonDir FavoritesDir GUI_CtrlHandle GUI_CtrlId GUI_DragFile GUI_DragId GUI_DropId GUI_WinHandle HomeDrive HomePath HomeShare HotKeyPressed HOUR IPAddress1 IPAddress2 IPAddress3 IPAddress4 KBLayout LF LocalAppDataDir LogonDNSDomain LogonDomain LogonServer MDAY MIN MON MSEC MUILang MyDocumentsDir NumParams OSArch OSBuild OSLang OSServicePack OSType OSVersion ProgramFilesDir ProgramsCommonDir ProgramsDir ScriptDir ScriptFullPath ScriptLineNumber ScriptName SEC StartMenuCommonDir StartMenuDir StartupCommonDir StartupDir SW_DISABLE SW_ENABLE SW_HIDE SW_LOCK SW_MAXIMIZE SW_MINIMIZE SW_RESTORE SW_SHOW SW_SHOWDEFAULT SW_SHOWMAXIMIZED SW_SHOWMINIMIZED SW_SHOWMINNOACTIVE SW_SHOWNA SW_SHOWNOACTIVATE SW_SHOWNORMAL SW_UNLOCK SystemDir TAB TempDir TRAY_ID TrayIconFlashing TrayIconVisible UserName UserProfileDir WDAY WindowsDir WorkingDir YDAY YEAR',
      // relevance: 5
      begin: "@[A-z0-9_]+"
    };
    const FUNCTION = {
      beginKeywords: "Func",
      end: "$",
      illegal: "\\$|\\[|%",
      contains: [
        hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, { className: "title.function" }),
        {
          className: "params",
          begin: "\\(",
          end: "\\)",
          contains: [
            VARIABLE,
            STRING,
            NUMBER
          ]
        }
      ]
    };
    return {
      name: "AutoIt",
      case_insensitive: true,
      illegal: /\/\*/,
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_IN,
        literal: LITERAL
      },
      contains: [
        COMMENT2,
        VARIABLE,
        STRING,
        NUMBER,
        PREPROCESSOR,
        CONSTANT,
        FUNCTION
      ]
    };
  }
  function avrasm(hljs) {
    return {
      name: "AVR Assembly",
      case_insensitive: true,
      keywords: {
        $pattern: "\\.?" + hljs.IDENT_RE,
        keyword: (
          /* mnemonic */
          "adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub subi swap tst wdr"
        ),
        built_in: (
          /* general purpose registers */
          "r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf"
        ),
        meta: ".byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list .listmac .macro .nolist .org .set"
      },
      contains: [
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.COMMENT(
          ";",
          "$",
          { relevance: 0 }
        ),
        hljs.C_NUMBER_MODE,
        // 0x..., decimal, float
        hljs.BINARY_NUMBER_MODE,
        // 0b...
        {
          className: "number",
          begin: "\\b(\\$[a-zA-Z0-9]+|0o[0-7]+)"
          // $..., 0o...
        },
        hljs.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "'",
          end: "[^\\\\]'",
          illegal: "[^\\\\][^']"
        },
        {
          className: "symbol",
          begin: "^[A-Za-z0-9_.$]+:"
        },
        {
          className: "meta",
          begin: "#",
          end: "$"
        },
        {
          // substitution within a macro
          className: "subst",
          begin: "@[0-9]+"
        }
      ]
    };
  }
  function awk(hljs) {
    const VARIABLE = {
      className: "variable",
      variants: [
        { begin: /\$[\w\d#@][\w\d_]*/ },
        { begin: /\$\{(.*?)\}/ }
      ]
    };
    const KEYWORDS2 = "BEGIN END if else while do for in break continue delete next nextfile function func exit|10";
    const STRING = {
      className: "string",
      contains: [hljs.BACKSLASH_ESCAPE],
      variants: [
        {
          begin: /(u|b)?r?'''/,
          end: /'''/,
          relevance: 10
        },
        {
          begin: /(u|b)?r?"""/,
          end: /"""/,
          relevance: 10
        },
        {
          begin: /(u|r|ur)'/,
          end: /'/,
          relevance: 10
        },
        {
          begin: /(u|r|ur)"/,
          end: /"/,
          relevance: 10
        },
        {
          begin: /(b|br)'/,
          end: /'/
        },
        {
          begin: /(b|br)"/,
          end: /"/
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE
      ]
    };
    return {
      name: "Awk",
      keywords: { keyword: KEYWORDS2 },
      contains: [
        VARIABLE,
        STRING,
        hljs.REGEXP_MODE,
        hljs.HASH_COMMENT_MODE,
        hljs.NUMBER_MODE
      ]
    };
  }
  function axapta(hljs) {
    const IDENT_RE2 = hljs.UNDERSCORE_IDENT_RE;
    const BUILT_IN_KEYWORDS = [
      "anytype",
      "boolean",
      "byte",
      "char",
      "container",
      "date",
      "double",
      "enum",
      "guid",
      "int",
      "int64",
      "long",
      "real",
      "short",
      "str",
      "utcdatetime",
      "var"
    ];
    const LITERAL_KEYWORDS = [
      "default",
      "false",
      "null",
      "true"
    ];
    const NORMAL_KEYWORDS = [
      "abstract",
      "as",
      "asc",
      "avg",
      "break",
      "breakpoint",
      "by",
      "byref",
      "case",
      "catch",
      "changecompany",
      "class",
      "client",
      "client",
      "common",
      "const",
      "continue",
      "count",
      "crosscompany",
      "delegate",
      "delete_from",
      "desc",
      "display",
      "div",
      "do",
      "edit",
      "else",
      "eventhandler",
      "exists",
      "extends",
      "final",
      "finally",
      "firstfast",
      "firstonly",
      "firstonly1",
      "firstonly10",
      "firstonly100",
      "firstonly1000",
      "flush",
      "for",
      "forceliterals",
      "forcenestedloop",
      "forceplaceholders",
      "forceselectorder",
      "forupdate",
      "from",
      "generateonly",
      "group",
      "hint",
      "if",
      "implements",
      "in",
      "index",
      "insert_recordset",
      "interface",
      "internal",
      "is",
      "join",
      "like",
      "maxof",
      "minof",
      "mod",
      "namespace",
      "new",
      "next",
      "nofetch",
      "notexists",
      "optimisticlock",
      "order",
      "outer",
      "pessimisticlock",
      "print",
      "private",
      "protected",
      "public",
      "readonly",
      "repeatableread",
      "retry",
      "return",
      "reverse",
      "select",
      "server",
      "setting",
      "static",
      "sum",
      "super",
      "switch",
      "this",
      "throw",
      "try",
      "ttsabort",
      "ttsbegin",
      "ttscommit",
      "unchecked",
      "update_recordset",
      "using",
      "validtimestate",
      "void",
      "where",
      "while"
    ];
    const KEYWORDS2 = {
      keyword: NORMAL_KEYWORDS,
      built_in: BUILT_IN_KEYWORDS,
      literal: LITERAL_KEYWORDS
    };
    const CLASS_DEFINITION = {
      variants: [
        { match: [
          /(class|interface)\s+/,
          IDENT_RE2,
          /\s+(extends|implements)\s+/,
          IDENT_RE2
        ] },
        { match: [
          /class\s+/,
          IDENT_RE2
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: KEYWORDS2
    };
    return {
      name: "X++",
      aliases: ["x++"],
      keywords: KEYWORDS2,
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$"
        },
        CLASS_DEFINITION
      ]
    };
  }
  function basic(hljs) {
    const KEYWORDS2 = [
      "ABS",
      "ASC",
      "AND",
      "ATN",
      "AUTO|0",
      "BEEP",
      "BLOAD|10",
      "BSAVE|10",
      "CALL",
      "CALLS",
      "CDBL",
      "CHAIN",
      "CHDIR",
      "CHR$|10",
      "CINT",
      "CIRCLE",
      "CLEAR",
      "CLOSE",
      "CLS",
      "COLOR",
      "COM",
      "COMMON",
      "CONT",
      "COS",
      "CSNG",
      "CSRLIN",
      "CVD",
      "CVI",
      "CVS",
      "DATA",
      "DATE$",
      "DEFDBL",
      "DEFINT",
      "DEFSNG",
      "DEFSTR",
      "DEF|0",
      "SEG",
      "USR",
      "DELETE",
      "DIM",
      "DRAW",
      "EDIT",
      "END",
      "ENVIRON",
      "ENVIRON$",
      "EOF",
      "EQV",
      "ERASE",
      "ERDEV",
      "ERDEV$",
      "ERL",
      "ERR",
      "ERROR",
      "EXP",
      "FIELD",
      "FILES",
      "FIX",
      "FOR|0",
      "FRE",
      "GET",
      "GOSUB|10",
      "GOTO",
      "HEX$",
      "IF",
      "THEN",
      "ELSE|0",
      "INKEY$",
      "INP",
      "INPUT",
      "INPUT#",
      "INPUT$",
      "INSTR",
      "IMP",
      "INT",
      "IOCTL",
      "IOCTL$",
      "KEY",
      "ON",
      "OFF",
      "LIST",
      "KILL",
      "LEFT$",
      "LEN",
      "LET",
      "LINE",
      "LLIST",
      "LOAD",
      "LOC",
      "LOCATE",
      "LOF",
      "LOG",
      "LPRINT",
      "USING",
      "LSET",
      "MERGE",
      "MID$",
      "MKDIR",
      "MKD$",
      "MKI$",
      "MKS$",
      "MOD",
      "NAME",
      "NEW",
      "NEXT",
      "NOISE",
      "NOT",
      "OCT$",
      "ON",
      "OR",
      "PEN",
      "PLAY",
      "STRIG",
      "OPEN",
      "OPTION",
      "BASE",
      "OUT",
      "PAINT",
      "PALETTE",
      "PCOPY",
      "PEEK",
      "PMAP",
      "POINT",
      "POKE",
      "POS",
      "PRINT",
      "PRINT]",
      "PSET",
      "PRESET",
      "PUT",
      "RANDOMIZE",
      "READ",
      "REM",
      "RENUM",
      "RESET|0",
      "RESTORE",
      "RESUME",
      "RETURN|0",
      "RIGHT$",
      "RMDIR",
      "RND",
      "RSET",
      "RUN",
      "SAVE",
      "SCREEN",
      "SGN",
      "SHELL",
      "SIN",
      "SOUND",
      "SPACE$",
      "SPC",
      "SQR",
      "STEP",
      "STICK",
      "STOP",
      "STR$",
      "STRING$",
      "SWAP",
      "SYSTEM",
      "TAB",
      "TAN",
      "TIME$",
      "TIMER",
      "TROFF",
      "TRON",
      "TO",
      "USR",
      "VAL",
      "VARPTR",
      "VARPTR$",
      "VIEW",
      "WAIT",
      "WHILE",
      "WEND",
      "WIDTH",
      "WINDOW",
      "WRITE",
      "XOR"
    ];
    return {
      name: "BASIC",
      case_insensitive: true,
      illegal: "^.",
      // Support explicitly typed variables that end with $%! or #.
      keywords: {
        $pattern: "[a-zA-Z][a-zA-Z0-9_$%!#]*",
        keyword: KEYWORDS2
      },
      contains: [
        {
          // Match strings that start with " and end with " or a line break
          scope: "string",
          begin: /"/,
          end: /"|$/,
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        hljs.COMMENT("REM", "$", { relevance: 10 }),
        hljs.COMMENT("'", "$", { relevance: 0 }),
        {
          // Match line numbers
          className: "symbol",
          begin: "^[0-9]+ ",
          relevance: 10
        },
        {
          // Match typed numeric constants (1000, 12.34!, 1.2e5, 1.5#, 1.2D2)
          className: "number",
          begin: "\\b\\d+(\\.\\d+)?([edED]\\d+)?[#!]?",
          relevance: 0
        },
        {
          // Match hexadecimal numbers (&Hxxxx)
          className: "number",
          begin: "(&[hH][0-9a-fA-F]{1,4})"
        },
        {
          // Match octal numbers (&Oxxxxxx)
          className: "number",
          begin: "(&[oO][0-7]{1,6})"
        }
      ]
    };
  }
  function bnf(hljs) {
    return {
      name: "Backus–Naur Form",
      contains: [
        // Attribute
        {
          className: "attribute",
          begin: /</,
          end: />/
        },
        // Specific
        {
          begin: /::=/,
          end: /$/,
          contains: [
            {
              begin: /</,
              end: />/
            },
            // Common
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE
          ]
        }
      ]
    };
  }
  function brainfuck(hljs) {
    const LITERAL = {
      className: "literal",
      begin: /[+-]+/,
      relevance: 0
    };
    return {
      name: "Brainfuck",
      aliases: ["bf"],
      contains: [
        hljs.COMMENT(
          /[^\[\]\.,\+\-<> \r\n]/,
          /[\[\]\.,\+\-<> \r\n]/,
          {
            contains: [
              {
                match: /[ ]+[^\[\]\.,\+\-<> \r\n]/,
                relevance: 0
              }
            ],
            returnEnd: true,
            relevance: 0
          }
        ),
        {
          className: "title",
          begin: "[\\[\\]]",
          relevance: 0
        },
        {
          className: "string",
          begin: "[\\.,]",
          relevance: 0
        },
        {
          // this mode works as the only relevance counter
          // it looks ahead to find the start of a run of literals
          // so only the runs are counted as relevant
          begin: /(?=\+\+|--)/,
          contains: [LITERAL]
        },
        LITERAL
      ]
    };
  }
  function cal(hljs) {
    const regex = hljs.regex;
    const KEYWORDS2 = [
      "div",
      "mod",
      "in",
      "and",
      "or",
      "not",
      "xor",
      "asserterror",
      "begin",
      "case",
      "do",
      "downto",
      "else",
      "end",
      "exit",
      "for",
      "local",
      "if",
      "of",
      "repeat",
      "then",
      "to",
      "until",
      "while",
      "with",
      "var"
    ];
    const LITERALS2 = "false true";
    const COMMENT_MODES = [
      hljs.C_LINE_COMMENT_MODE,
      hljs.COMMENT(
        /\{/,
        /\}/,
        { relevance: 0 }
      ),
      hljs.COMMENT(
        /\(\*/,
        /\*\)/,
        { relevance: 10 }
      )
    ];
    const STRING = {
      className: "string",
      begin: /'/,
      end: /'/,
      contains: [{ begin: /''/ }]
    };
    const CHAR_STRING = {
      className: "string",
      begin: /(#\d+)+/
    };
    const DATE = {
      className: "number",
      begin: "\\b\\d+(\\.\\d+)?(DT|D|T)",
      relevance: 0
    };
    const DBL_QUOTED_VARIABLE = {
      className: "string",
      // not a string technically but makes sense to be highlighted in the same style
      begin: '"',
      end: '"'
    };
    const PROCEDURE = {
      match: [
        /procedure/,
        /\s+/,
        /[a-zA-Z_][\w@]*/,
        /\s*/
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: KEYWORDS2,
          contains: [
            STRING,
            CHAR_STRING,
            hljs.NUMBER_MODE
          ]
        },
        ...COMMENT_MODES
      ]
    };
    const OBJECT_TYPES = [
      "Table",
      "Form",
      "Report",
      "Dataport",
      "Codeunit",
      "XMLport",
      "MenuSuite",
      "Page",
      "Query"
    ];
    const OBJECT = {
      match: [
        /OBJECT/,
        /\s+/,
        regex.either(...OBJECT_TYPES),
        /\s+/,
        /\d+/,
        /\s+(?=[^\s])/,
        /.*/,
        /$/
      ],
      relevance: 3,
      scope: {
        1: "keyword",
        3: "type",
        5: "number",
        7: "title"
      }
    };
    const PROPERTY = {
      match: /[\w]+(?=\=)/,
      scope: "attribute",
      relevance: 0
    };
    return {
      name: "C/AL",
      case_insensitive: true,
      keywords: {
        keyword: KEYWORDS2,
        literal: LITERALS2
      },
      illegal: /\/\*/,
      contains: [
        PROPERTY,
        STRING,
        CHAR_STRING,
        DATE,
        DBL_QUOTED_VARIABLE,
        hljs.NUMBER_MODE,
        OBJECT,
        PROCEDURE
      ]
    };
  }
  function capnproto(hljs) {
    const KEYWORDS2 = [
      "struct",
      "enum",
      "interface",
      "union",
      "group",
      "import",
      "using",
      "const",
      "annotation",
      "extends",
      "in",
      "of",
      "on",
      "as",
      "with",
      "from",
      "fixed"
    ];
    const TYPES2 = [
      "Void",
      "Bool",
      "Int8",
      "Int16",
      "Int32",
      "Int64",
      "UInt8",
      "UInt16",
      "UInt32",
      "UInt64",
      "Float32",
      "Float64",
      "Text",
      "Data",
      "AnyPointer",
      "AnyStruct",
      "Capability",
      "List"
    ];
    const LITERALS2 = [
      "true",
      "false"
    ];
    const CLASS_DEFINITION = {
      variants: [
        { match: [
          /(struct|enum|interface)/,
          /\s+/,
          hljs.IDENT_RE
        ] },
        { match: [
          /extends/,
          /\s*\(/,
          hljs.IDENT_RE,
          /\s*\)/
        ] }
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    return {
      name: "Cap’n Proto",
      aliases: ["capnp"],
      keywords: {
        keyword: KEYWORDS2,
        type: TYPES2,
        literal: LITERALS2
      },
      contains: [
        hljs.QUOTE_STRING_MODE,
        hljs.NUMBER_MODE,
        hljs.HASH_COMMENT_MODE,
        {
          className: "meta",
          begin: /@0x[\w\d]{16};/,
          illegal: /\n/
        },
        {
          className: "symbol",
          begin: /@\d+\b/
        },
        CLASS_DEFINITION
      ]
    };
  }
  function ceylon(hljs) {
    const KEYWORDS2 = [
      "assembly",
      "module",
      "package",
      "import",
      "alias",
      "class",
      "interface",
      "object",
      "given",
      "value",
      "assign",
      "void",
      "function",
      "new",
      "of",
      "extends",
      "satisfies",
      "abstracts",
      "in",
      "out",
      "return",
      "break",
      "continue",
      "throw",
      "assert",
      "dynamic",
      "if",
      "else",
      "switch",
      "case",
      "for",
      "while",
      "try",
      "catch",
      "finally",
      "then",
      "let",
      "this",
      "outer",
      "super",
      "is",
      "exists",
      "nonempty"
    ];
    const DECLARATION_MODIFIERS = [
      "shared",
      "abstract",
      "formal",
      "default",
      "actual",
      "variable",
      "late",
      "native",
      "deprecated",
      "final",
      "sealed",
      "annotation",
      "suppressWarnings",
      "small"
    ];
    const DOCUMENTATION = [
      "doc",
      "by",
      "license",
      "see",
      "throws",
      "tagged"
    ];
    const SUBST = {
      className: "subst",
      excludeBegin: true,
      excludeEnd: true,
      begin: /``/,
      end: /``/,
      keywords: KEYWORDS2,
      relevance: 10
    };
    const EXPRESSIONS = [
      {
        // verbatim string
        className: "string",
        begin: '"""',
        end: '"""',
        relevance: 10
      },
      {
        // string literal or template
        className: "string",
        begin: '"',
        end: '"',
        contains: [SUBST]
      },
      {
        // character literal
        className: "string",
        begin: "'",
        end: "'"
      },
      {
        // numeric literal
        className: "number",
        begin: "#[0-9a-fA-F_]+|\\$[01_]+|[0-9_]+(?:\\.[0-9_](?:[eE][+-]?\\d+)?)?[kMGTPmunpf]?",
        relevance: 0
      }
    ];
    SUBST.contains = EXPRESSIONS;
    return {
      name: "Ceylon",
      keywords: {
        keyword: KEYWORDS2.concat(DECLARATION_MODIFIERS),
        meta: DOCUMENTATION
      },
      illegal: "\\$[^01]|#[^0-9a-fA-F]",
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.COMMENT("/\\*", "\\*/", { contains: ["self"] }),
        {
          // compiler annotation
          className: "meta",
          begin: '@[a-z]\\w*(?::"[^"]*")?'
        }
      ].concat(EXPRESSIONS)
    };
  }
  function clean(hljs) {
    const KEYWORDS2 = [
      "if",
      "let",
      "in",
      "with",
      "where",
      "case",
      "of",
      "class",
      "instance",
      "otherwise",
      "implementation",
      "definition",
      "system",
      "module",
      "from",
      "import",
      "qualified",
      "as",
      "special",
      "code",
      "inline",
      "foreign",
      "export",
      "ccall",
      "stdcall",
      "generic",
      "derive",
      "infix",
      "infixl",
      "infixr"
    ];
    return {
      name: "Clean",
      aliases: [
        "icl",
        "dcl"
      ],
      keywords: {
        keyword: KEYWORDS2,
        built_in: "Int Real Char Bool",
        literal: "True False"
      },
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE,
        {
          // relevance booster
          begin: "->|<-[|:]?|#!?|>>=|\\{\\||\\|\\}|:==|=:|<>"
        }
      ]
    };
  }
  function clojure(hljs) {
    const SYMBOLSTART = "a-zA-Z_\\-!.?+*=<>&'";
    const SYMBOL_RE = "[#]?[" + SYMBOLSTART + "][" + SYMBOLSTART + "0-9/;:$#]*";
    const globals = "def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord";
    const keywords2 = {
      $pattern: SYMBOL_RE,
      built_in: (
        // Clojure keywords
        globals + " cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last drop-while while intern condp case reduced cycle split-at split-with repeat replicate iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter monitor-exit macroexpand macroexpand-1 for dosync and or when when-not when-let comp juxt partial sequence memoize constantly complement identity assert peek pop doto proxy first rest cons cast coll last butlast sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize"
      )
    };
    const SYMBOL = {
      begin: SYMBOL_RE,
      relevance: 0
    };
    const NUMBER = {
      scope: "number",
      relevance: 0,
      variants: [
        { match: /[-+]?0[xX][0-9a-fA-F]+N?/ },
        // hexadecimal                 // 0x2a
        { match: /[-+]?0[0-7]+N?/ },
        // octal                       // 052
        { match: /[-+]?[1-9][0-9]?[rR][0-9a-zA-Z]+N?/ },
        // variable radix from 2 to 36 // 2r101010, 8r52, 36r16
        { match: /[-+]?[0-9]+\/[0-9]+N?/ },
        // ratio                       // 1/2
        { match: /[-+]?[0-9]+((\.[0-9]*([eE][+-]?[0-9]+)?M?)|([eE][+-]?[0-9]+M?|M))/ },
        // float        // 0.42 4.2E-1M 42E1 42M
        { match: /[-+]?([1-9][0-9]*|0)N?/ }
        // int (don't match leading 0) // 42 42N
      ]
    };
    const CHARACTER = {
      scope: "character",
      variants: [
        { match: /\\o[0-3]?[0-7]{1,2}/ },
        // Unicode Octal 0 - 377
        { match: /\\u[0-9a-fA-F]{4}/ },
        // Unicode Hex 0000 - FFFF
        { match: /\\(newline|space|tab|formfeed|backspace|return)/ },
        // special characters
        {
          match: /\\\S/,
          relevance: 0
        }
        // any non-whitespace char
      ]
    };
    const REGEX = {
      scope: "regex",
      begin: /#"/,
      end: /"/,
      contains: [hljs.BACKSLASH_ESCAPE]
    };
    const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
    const COMMA = {
      scope: "punctuation",
      match: /,/,
      relevance: 0
    };
    const COMMENT2 = hljs.COMMENT(
      ";",
      "$",
      { relevance: 0 }
    );
    const LITERAL = {
      className: "literal",
      begin: /\b(true|false|nil)\b/
    };
    const COLLECTION = {
      begin: "\\[|(#::?" + SYMBOL_RE + ")?\\{",
      end: "[\\]\\}]",
      relevance: 0
    };
    const KEY = {
      className: "symbol",
      begin: "[:]{1,2}" + SYMBOL_RE
    };
    const LIST = {
      begin: "\\(",
      end: "\\)"
    };
    const BODY = {
      endsWithParent: true,
      relevance: 0
    };
    const NAME = {
      keywords: keywords2,
      className: "name",
      begin: SYMBOL_RE,
      relevance: 0,
      starts: BODY
    };
    const DEFAULT_CONTAINS = [
      COMMA,
      LIST,
      CHARACTER,
      REGEX,
      STRING,
      COMMENT2,
      KEY,
      COLLECTION,
      NUMBER,
      LITERAL,
      SYMBOL
    ];
    const GLOBAL = {
      beginKeywords: globals,
      keywords: {
        $pattern: SYMBOL_RE,
        keyword: globals
      },
      end: '(\\[|#|\\d|"|:|\\{|\\)|\\(|$)',
      contains: [
        {
          className: "title",
          begin: SYMBOL_RE,
          relevance: 0,
          excludeEnd: true,
          // we can only have a single title
          endsParent: true
        }
      ].concat(DEFAULT_CONTAINS)
    };
    LIST.contains = [
      GLOBAL,
      NAME,
      BODY
    ];
    BODY.contains = DEFAULT_CONTAINS;
    COLLECTION.contains = DEFAULT_CONTAINS;
    return {
      name: "Clojure",
      aliases: [
        "clj",
        "edn"
      ],
      illegal: /\S/,
      contains: [
        COMMA,
        LIST,
        CHARACTER,
        REGEX,
        STRING,
        COMMENT2,
        KEY,
        COLLECTION,
        NUMBER,
        LITERAL
      ]
    };
  }
  function clojureRepl(hljs) {
    return {
      name: "Clojure REPL",
      contains: [
        {
          className: "meta.prompt",
          begin: /^([\w.-]+|\s*#_)?=>/,
          starts: {
            end: /$/,
            subLanguage: "clojure"
          }
        }
      ]
    };
  }
  function cmake(hljs) {
    return {
      name: "CMake",
      aliases: ["cmake.in"],
      case_insensitive: true,
      keywords: { keyword: (
        // scripting commands
        "break cmake_host_system_information cmake_minimum_required cmake_parse_arguments cmake_policy configure_file continue elseif else endforeach endfunction endif endmacro endwhile execute_process file find_file find_library find_package find_path find_program foreach function get_cmake_property get_directory_property get_filename_component get_property if include include_guard list macro mark_as_advanced math message option return separate_arguments set_directory_properties set_property set site_name string unset variable_watch while add_compile_definitions add_compile_options add_custom_command add_custom_target add_definitions add_dependencies add_executable add_library add_link_options add_subdirectory add_test aux_source_directory build_command create_test_sourcelist define_property enable_language enable_testing export fltk_wrap_ui get_source_file_property get_target_property get_test_property include_directories include_external_msproject include_regular_expression install link_directories link_libraries load_cache project qt_wrap_cpp qt_wrap_ui remove_definitions set_source_files_properties set_target_properties set_tests_properties source_group target_compile_definitions target_compile_features target_compile_options target_include_directories target_link_directories target_link_libraries target_link_options target_sources try_compile try_run ctest_build ctest_configure ctest_coverage ctest_empty_binary_directory ctest_memcheck ctest_read_custom_files ctest_run_script ctest_sleep ctest_start ctest_submit ctest_test ctest_update ctest_upload build_name exec_program export_library_dependencies install_files install_programs install_targets load_command make_directory output_required_files remove subdir_depends subdirs use_mangled_mesa utility_source variable_requires write_file qt5_use_modules qt5_use_package qt5_wrap_cpp on off true false and or not command policy target test exists is_newer_than is_directory is_symlink is_absolute matches less greater equal less_equal greater_equal strless strgreater strequal strless_equal strgreater_equal version_less version_greater version_equal version_less_equal version_greater_equal in_list defined"
      ) },
      contains: [
        {
          className: "variable",
          begin: /\$\{/,
          end: /\}/
        },
        hljs.COMMENT(/#\[\[/, /]]/),
        hljs.HASH_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.NUMBER_MODE
      ]
    };
  }
  const KEYWORDS$3 = [
    "as",
    // for exports
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    // JS handles these with a special rule
    // "get",
    // "set",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends",
    // It's reached stage 3, which is "recommended for implementation":
    "using"
  ];
  const LITERALS$3 = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ];
  const TYPES$3 = [
    // Fundamental objects
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    // numbers and dates
    "Math",
    "Date",
    "Number",
    "BigInt",
    // text
    "String",
    "RegExp",
    // Indexed collections
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    // Keyed collections
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    // Structured data
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    // Control abstraction objects
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    // Reflection
    "Reflect",
    "Proxy",
    // Internationalization
    "Intl",
    // WebAssembly
    "WebAssembly"
  ];
  const ERROR_TYPES$3 = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ];
  const BUILT_IN_GLOBALS$3 = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ];
  const BUILT_INS$3 = [].concat(
    BUILT_IN_GLOBALS$3,
    TYPES$3,
    ERROR_TYPES$3
  );
  function coffeescript(hljs) {
    const COFFEE_BUILT_INS = [
      "npm",
      "print"
    ];
    const COFFEE_LITERALS = [
      "yes",
      "no",
      "on",
      "off"
    ];
    const COFFEE_KEYWORDS = [
      "then",
      "unless",
      "until",
      "loop",
      "by",
      "when",
      "and",
      "or",
      "is",
      "isnt",
      "not"
    ];
    const NOT_VALID_KEYWORDS = [
      "var",
      "const",
      "let",
      "function",
      "static"
    ];
    const excluding = (list) => (kw) => !list.includes(kw);
    const KEYWORDS$12 = {
      keyword: KEYWORDS$3.concat(COFFEE_KEYWORDS).filter(excluding(NOT_VALID_KEYWORDS)),
      literal: LITERALS$3.concat(COFFEE_LITERALS),
      built_in: BUILT_INS$3.concat(COFFEE_BUILT_INS)
    };
    const JS_IDENT_RE = "[A-Za-z$_][0-9A-Za-z$_]*";
    const SUBST = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: KEYWORDS$12
    };
    const EXPRESSIONS = [
      hljs.BINARY_NUMBER_MODE,
      hljs.inherit(hljs.C_NUMBER_MODE, { starts: {
        end: "(\\s*/)?",
        relevance: 0
      } }),
      // a number tries to eat the following slash to prevent treating it as a regexp
      {
        className: "string",
        variants: [
          {
            begin: /'''/,
            end: /'''/,
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: /'/,
            end: /'/,
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: /"""/,
            end: /"""/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ]
          },
          {
            begin: /"/,
            end: /"/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ]
          }
        ]
      },
      {
        className: "regexp",
        variants: [
          {
            begin: "///",
            end: "///",
            contains: [
              SUBST,
              hljs.HASH_COMMENT_MODE
            ]
          },
          {
            begin: "//[gim]{0,3}(?=\\W)",
            relevance: 0
          },
          {
            // regex can't start with space to parse x / 2 / 3 as two divisions
            // regex can't start with *, and it supports an "illegal" in the main mode
            begin: /\/(?![ *]).*?(?![\\]).\/[gim]{0,3}(?=\W)/
          }
        ]
      },
      {
        begin: "@" + JS_IDENT_RE
        // relevance booster
      },
      {
        subLanguage: "javascript",
        excludeBegin: true,
        excludeEnd: true,
        variants: [
          {
            begin: "```",
            end: "```"
          },
          {
            begin: "`",
            end: "`"
          }
        ]
      }
    ];
    SUBST.contains = EXPRESSIONS;
    const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
    const POSSIBLE_PARAMS_RE = "(\\(.*\\)\\s*)?\\B[-=]>";
    const PARAMS = {
      className: "params",
      begin: "\\([^\\(]",
      returnBegin: true,
      /* We need another contained nameless mode to not have every nested
      pair of parens to be called "params" */
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: KEYWORDS$12,
          contains: ["self"].concat(EXPRESSIONS)
        }
      ]
    };
    const CLASS_DEFINITION = {
      variants: [
        { match: [
          /class\s+/,
          JS_IDENT_RE,
          /\s+extends\s+/,
          JS_IDENT_RE
        ] },
        { match: [
          /class\s+/,
          JS_IDENT_RE
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: KEYWORDS$12
    };
    return {
      name: "CoffeeScript",
      aliases: [
        "coffee",
        "cson",
        "iced"
      ],
      keywords: KEYWORDS$12,
      illegal: /\/\*/,
      contains: [
        ...EXPRESSIONS,
        hljs.COMMENT("###", "###"),
        hljs.HASH_COMMENT_MODE,
        {
          className: "function",
          begin: "^\\s*" + JS_IDENT_RE + "\\s*=\\s*" + POSSIBLE_PARAMS_RE,
          end: "[-=]>",
          returnBegin: true,
          contains: [
            TITLE,
            PARAMS
          ]
        },
        {
          // anonymous function start
          begin: /[:\(,=]\s*/,
          relevance: 0,
          contains: [
            {
              className: "function",
              begin: POSSIBLE_PARAMS_RE,
              end: "[-=]>",
              returnBegin: true,
              contains: [PARAMS]
            }
          ]
        },
        CLASS_DEFINITION,
        {
          begin: JS_IDENT_RE + ":",
          end: ":",
          returnBegin: true,
          returnEnd: true,
          relevance: 0
        }
      ]
    };
  }
  function coq(hljs) {
    const KEYWORDS2 = [
      "_|0",
      "as",
      "at",
      "cofix",
      "else",
      "end",
      "exists",
      "exists2",
      "fix",
      "for",
      "forall",
      "fun",
      "if",
      "IF",
      "in",
      "let",
      "match",
      "mod",
      "Prop",
      "return",
      "Set",
      "then",
      "Type",
      "using",
      "where",
      "with",
      "Abort",
      "About",
      "Add",
      "Admit",
      "Admitted",
      "All",
      "Arguments",
      "Assumptions",
      "Axiom",
      "Back",
      "BackTo",
      "Backtrack",
      "Bind",
      "Blacklist",
      "Canonical",
      "Cd",
      "Check",
      "Class",
      "Classes",
      "Close",
      "Coercion",
      "Coercions",
      "CoFixpoint",
      "CoInductive",
      "Collection",
      "Combined",
      "Compute",
      "Conjecture",
      "Conjectures",
      "Constant",
      "constr",
      "Constraint",
      "Constructors",
      "Context",
      "Corollary",
      "CreateHintDb",
      "Cut",
      "Declare",
      "Defined",
      "Definition",
      "Delimit",
      "Dependencies",
      "Dependent",
      "Derive",
      "Drop",
      "eauto",
      "End",
      "Equality",
      "Eval",
      "Example",
      "Existential",
      "Existentials",
      "Existing",
      "Export",
      "exporting",
      "Extern",
      "Extract",
      "Extraction",
      "Fact",
      "Field",
      "Fields",
      "File",
      "Fixpoint",
      "Focus",
      "for",
      "From",
      "Function",
      "Functional",
      "Generalizable",
      "Global",
      "Goal",
      "Grab",
      "Grammar",
      "Graph",
      "Guarded",
      "Heap",
      "Hint",
      "HintDb",
      "Hints",
      "Hypotheses",
      "Hypothesis",
      "ident",
      "Identity",
      "If",
      "Immediate",
      "Implicit",
      "Import",
      "Include",
      "Inductive",
      "Infix",
      "Info",
      "Initial",
      "Inline",
      "Inspect",
      "Instance",
      "Instances",
      "Intro",
      "Intros",
      "Inversion",
      "Inversion_clear",
      "Language",
      "Left",
      "Lemma",
      "Let",
      "Libraries",
      "Library",
      "Load",
      "LoadPath",
      "Local",
      "Locate",
      "Ltac",
      "ML",
      "Mode",
      "Module",
      "Modules",
      "Monomorphic",
      "Morphism",
      "Next",
      "NoInline",
      "Notation",
      "Obligation",
      "Obligations",
      "Opaque",
      "Open",
      "Optimize",
      "Options",
      "Parameter",
      "Parameters",
      "Parametric",
      "Path",
      "Paths",
      "pattern",
      "Polymorphic",
      "Preterm",
      "Print",
      "Printing",
      "Program",
      "Projections",
      "Proof",
      "Proposition",
      "Pwd",
      "Qed",
      "Quit",
      "Rec",
      "Record",
      "Recursive",
      "Redirect",
      "Relation",
      "Remark",
      "Remove",
      "Require",
      "Reserved",
      "Reset",
      "Resolve",
      "Restart",
      "Rewrite",
      "Right",
      "Ring",
      "Rings",
      "Save",
      "Scheme",
      "Scope",
      "Scopes",
      "Script",
      "Search",
      "SearchAbout",
      "SearchHead",
      "SearchPattern",
      "SearchRewrite",
      "Section",
      "Separate",
      "Set",
      "Setoid",
      "Show",
      "Solve",
      "Sorted",
      "Step",
      "Strategies",
      "Strategy",
      "Structure",
      "SubClass",
      "Table",
      "Tables",
      "Tactic",
      "Term",
      "Test",
      "Theorem",
      "Time",
      "Timeout",
      "Transparent",
      "Type",
      "Typeclasses",
      "Types",
      "Undelimit",
      "Undo",
      "Unfocus",
      "Unfocused",
      "Unfold",
      "Universe",
      "Universes",
      "Unset",
      "Unshelve",
      "using",
      "Variable",
      "Variables",
      "Variant",
      "Verbose",
      "Visibility",
      "where",
      "with"
    ];
    const BUILT_INS2 = [
      "abstract",
      "absurd",
      "admit",
      "after",
      "apply",
      "as",
      "assert",
      "assumption",
      "at",
      "auto",
      "autorewrite",
      "autounfold",
      "before",
      "bottom",
      "btauto",
      "by",
      "case",
      "case_eq",
      "cbn",
      "cbv",
      "change",
      "classical_left",
      "classical_right",
      "clear",
      "clearbody",
      "cofix",
      "compare",
      "compute",
      "congruence",
      "constr_eq",
      "constructor",
      "contradict",
      "contradiction",
      "cut",
      "cutrewrite",
      "cycle",
      "decide",
      "decompose",
      "dependent",
      "destruct",
      "destruction",
      "dintuition",
      "discriminate",
      "discrR",
      "do",
      "double",
      "dtauto",
      "eapply",
      "eassumption",
      "eauto",
      "ecase",
      "econstructor",
      "edestruct",
      "ediscriminate",
      "eelim",
      "eexact",
      "eexists",
      "einduction",
      "einjection",
      "eleft",
      "elim",
      "elimtype",
      "enough",
      "equality",
      "erewrite",
      "eright",
      "esimplify_eq",
      "esplit",
      "evar",
      "exact",
      "exactly_once",
      "exfalso",
      "exists",
      "f_equal",
      "fail",
      "field",
      "field_simplify",
      "field_simplify_eq",
      "first",
      "firstorder",
      "fix",
      "fold",
      "fourier",
      "functional",
      "generalize",
      "generalizing",
      "gfail",
      "give_up",
      "has_evar",
      "hnf",
      "idtac",
      "in",
      "induction",
      "injection",
      "instantiate",
      "intro",
      "intro_pattern",
      "intros",
      "intuition",
      "inversion",
      "inversion_clear",
      "is_evar",
      "is_var",
      "lapply",
      "lazy",
      "left",
      "lia",
      "lra",
      "move",
      "native_compute",
      "nia",
      "nsatz",
      "omega",
      "once",
      "pattern",
      "pose",
      "progress",
      "proof",
      "psatz",
      "quote",
      "record",
      "red",
      "refine",
      "reflexivity",
      "remember",
      "rename",
      "repeat",
      "replace",
      "revert",
      "revgoals",
      "rewrite",
      "rewrite_strat",
      "right",
      "ring",
      "ring_simplify",
      "rtauto",
      "set",
      "setoid_reflexivity",
      "setoid_replace",
      "setoid_rewrite",
      "setoid_symmetry",
      "setoid_transitivity",
      "shelve",
      "shelve_unifiable",
      "simpl",
      "simple",
      "simplify_eq",
      "solve",
      "specialize",
      "split",
      "split_Rabs",
      "split_Rmult",
      "stepl",
      "stepr",
      "subst",
      "sum",
      "swap",
      "symmetry",
      "tactic",
      "tauto",
      "time",
      "timeout",
      "top",
      "transitivity",
      "trivial",
      "try",
      "tryif",
      "unfold",
      "unify",
      "until",
      "using",
      "vm_compute",
      "with"
    ];
    return {
      name: "Coq",
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_INS2
      },
      contains: [
        hljs.QUOTE_STRING_MODE,
        hljs.COMMENT("\\(\\*", "\\*\\)"),
        hljs.C_NUMBER_MODE,
        {
          className: "type",
          excludeBegin: true,
          begin: "\\|\\s*",
          end: "\\w+"
        },
        {
          // relevance booster
          begin: /[-=]>/
        }
      ]
    };
  }
  function cos(hljs) {
    const STRINGS2 = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"',
          contains: [
            {
              // escaped
              begin: '""',
              relevance: 0
            }
          ]
        }
      ]
    };
    const NUMBERS = {
      className: "number",
      begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)",
      relevance: 0
    };
    const COS_KEYWORDS = "property parameter class classmethod clientmethod extends as break catch close continue do d|0 else elseif for goto halt hang h|0 if job j|0 kill k|0 lock l|0 merge new open quit q|0 read r|0 return set s|0 tcommit throw trollback try tstart use view while write w|0 xecute x|0 zkill znspace zn ztrap zwrite zw zzdump zzwrite print zbreak zinsert zload zprint zremove zsave zzprint mv mvcall mvcrt mvdim mvprint zquit zsync ascii";
    return {
      name: "Caché Object Script",
      case_insensitive: true,
      aliases: ["cls"],
      keywords: COS_KEYWORDS,
      contains: [
        NUMBERS,
        STRINGS2,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "comment",
          begin: /;/,
          end: "$",
          relevance: 0
        },
        {
          // Functions and user-defined functions: write $ztime(60*60*3), $$myFunc(10), $$^Val(1)
          className: "built_in",
          begin: /(?:\$\$?|\.\.)\^?[a-zA-Z]+/
        },
        {
          // Macro command: quit $$$OK
          className: "built_in",
          begin: /\$\$\$[a-zA-Z]+/
        },
        {
          // Special (global) variables: write %request.Content; Built-in classes: %Library.Integer
          className: "built_in",
          begin: /%[a-z]+(?:\.[a-z]+)*/
        },
        {
          // Global variable: set ^globalName = 12 write ^globalName
          className: "symbol",
          begin: /\^%?[a-zA-Z][\w]*/
        },
        {
          // Some control constructions: do ##class(Package.ClassName).Method(), ##super()
          className: "keyword",
          begin: /##class|##super|#define|#dim/
        },
        // sub-languages: are not fully supported by hljs by 11/15/2015
        // left for the future implementation.
        {
          begin: /&sql\(/,
          end: /\)/,
          excludeBegin: true,
          excludeEnd: true,
          subLanguage: "sql"
        },
        {
          begin: /&(js|jscript|javascript)</,
          end: />/,
          excludeBegin: true,
          excludeEnd: true,
          subLanguage: "javascript"
        },
        {
          // this brakes first and last tag, but this is the only way to embed a valid html
          begin: /&html<\s*</,
          end: />\s*>/,
          subLanguage: "xml"
        }
      ]
    };
  }
  function crmsh(hljs) {
    const RESOURCES = "primitive rsc_template";
    const COMMANDS = "group clone ms master location colocation order fencing_topology rsc_ticket acl_target acl_group user role tag xml";
    const PROPERTY_SETS = "property rsc_defaults op_defaults";
    const KEYWORDS2 = "params meta operations op rule attributes utilization";
    const OPERATORS = "read write deny defined not_defined in_range date spec in ref reference attribute type xpath version and or lt gt tag lte gte eq ne \\";
    const TYPES2 = "number string";
    const LITERALS2 = "Master Started Slave Stopped start promote demote stop monitor true false";
    return {
      name: "crmsh",
      aliases: [
        "crm",
        "pcmk"
      ],
      case_insensitive: true,
      keywords: {
        keyword: KEYWORDS2 + " " + OPERATORS + " " + TYPES2,
        literal: LITERALS2
      },
      contains: [
        hljs.HASH_COMMENT_MODE,
        {
          beginKeywords: "node",
          starts: {
            end: "\\s*([\\w_-]+:)?",
            starts: {
              className: "title",
              end: "\\s*[\\$\\w_][\\w_-]*"
            }
          }
        },
        {
          beginKeywords: RESOURCES,
          starts: {
            className: "title",
            end: "\\s*[\\$\\w_][\\w_-]*",
            starts: { end: "\\s*@?[\\w_][\\w_\\.:-]*" }
          }
        },
        {
          begin: "\\b(" + COMMANDS.split(" ").join("|") + ")\\s+",
          keywords: COMMANDS,
          starts: {
            className: "title",
            end: "[\\$\\w_][\\w_-]*"
          }
        },
        {
          beginKeywords: PROPERTY_SETS,
          starts: {
            className: "title",
            end: "\\s*([\\w_-]+:)?"
          }
        },
        hljs.QUOTE_STRING_MODE,
        {
          className: "meta",
          begin: "(ocf|systemd|service|lsb):[\\w_:-]+",
          relevance: 0
        },
        {
          className: "number",
          begin: "\\b\\d+(\\.\\d+)?(ms|s|h|m)?",
          relevance: 0
        },
        {
          className: "literal",
          begin: "[-]?(infinity|inf)",
          relevance: 0
        },
        {
          className: "attr",
          begin: /([A-Za-z$_#][\w_-]+)=/,
          relevance: 0
        },
        {
          className: "tag",
          begin: "</?",
          end: "/?>",
          relevance: 0
        }
      ]
    };
  }
  function crystal(hljs) {
    const INT_SUFFIX = "(_?[ui](8|16|32|64|128))?";
    const FLOAT_SUFFIX = "(_?f(32|64))?";
    const CRYSTAL_IDENT_RE = "[a-zA-Z_]\\w*[!?=]?";
    const CRYSTAL_METHOD_RE = "[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|[=!]~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~|]|//|//=|&[-+*]=?|&\\*\\*|\\[\\][=?]?";
    const CRYSTAL_PATH_RE = "[A-Za-z_]\\w*(::\\w+)*(\\?|!)?";
    const CRYSTAL_KEYWORDS = {
      $pattern: CRYSTAL_IDENT_RE,
      keyword: "abstract alias annotation as as? asm begin break case class def do else elsif end ensure enum extend for fun if include instance_sizeof is_a? lib macro module next nil? of out pointerof private protected rescue responds_to? return require select self sizeof struct super then type typeof union uninitialized unless until verbatim when while with yield __DIR__ __END_LINE__ __FILE__ __LINE__",
      literal: "false nil true"
    };
    const SUBST = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: CRYSTAL_KEYWORDS
    };
    const VARIABLE = {
      // negative-look forward attemps to prevent false matches like:
      // @ident@ or $ident$ that might indicate this is not ruby at all
      className: "variable",
      begin: `(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])`
    };
    const EXPANSION = {
      className: "template-variable",
      variants: [
        {
          begin: "\\{\\{",
          end: "\\}\\}"
        },
        {
          begin: "\\{%",
          end: "%\\}"
        }
      ],
      keywords: CRYSTAL_KEYWORDS
    };
    function recursiveParen(begin, end2) {
      const contains = [
        {
          begin,
          end: end2
        }
      ];
      contains[0].contains = contains;
      return contains;
    }
    const STRING = {
      className: "string",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ],
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        },
        {
          begin: /`/,
          end: /`/
        },
        {
          begin: "%[Qwi]?\\(",
          end: "\\)",
          contains: recursiveParen("\\(", "\\)")
        },
        {
          begin: "%[Qwi]?\\[",
          end: "\\]",
          contains: recursiveParen("\\[", "\\]")
        },
        {
          begin: "%[Qwi]?\\{",
          end: /\}/,
          contains: recursiveParen(/\{/, /\}/)
        },
        {
          begin: "%[Qwi]?<",
          end: ">",
          contains: recursiveParen("<", ">")
        },
        {
          begin: "%[Qwi]?\\|",
          end: "\\|"
        },
        {
          begin: /<<-\w+$/,
          end: /^\s*\w+$/
        }
      ],
      relevance: 0
    };
    const Q_STRING = {
      className: "string",
      variants: [
        {
          begin: "%q\\(",
          end: "\\)",
          contains: recursiveParen("\\(", "\\)")
        },
        {
          begin: "%q\\[",
          end: "\\]",
          contains: recursiveParen("\\[", "\\]")
        },
        {
          begin: "%q\\{",
          end: /\}/,
          contains: recursiveParen(/\{/, /\}/)
        },
        {
          begin: "%q<",
          end: ">",
          contains: recursiveParen("<", ">")
        },
        {
          begin: "%q\\|",
          end: "\\|"
        },
        {
          begin: /<<-'\w+'$/,
          end: /^\s*\w+$/
        }
      ],
      relevance: 0
    };
    const REGEXP = {
      begin: "(?!%\\})(" + hljs.RE_STARTERS_RE + "|\\n|\\b(case|if|select|unless|until|when|while)\\b)\\s*",
      keywords: "case if select unless until when while",
      contains: [
        {
          className: "regexp",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            SUBST
          ],
          variants: [
            {
              begin: "//[a-z]*",
              relevance: 0
            },
            {
              begin: "/(?!\\/)",
              end: "/[a-z]*"
            }
          ]
        }
      ],
      relevance: 0
    };
    const REGEXP2 = {
      className: "regexp",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ],
      variants: [
        {
          begin: "%r\\(",
          end: "\\)",
          contains: recursiveParen("\\(", "\\)")
        },
        {
          begin: "%r\\[",
          end: "\\]",
          contains: recursiveParen("\\[", "\\]")
        },
        {
          begin: "%r\\{",
          end: /\}/,
          contains: recursiveParen(/\{/, /\}/)
        },
        {
          begin: "%r<",
          end: ">",
          contains: recursiveParen("<", ">")
        },
        {
          begin: "%r\\|",
          end: "\\|"
        }
      ],
      relevance: 0
    };
    const ATTRIBUTE = {
      className: "meta",
      begin: "@\\[",
      end: "\\]",
      contains: [hljs.inherit(hljs.QUOTE_STRING_MODE, { className: "string" })]
    };
    const CRYSTAL_DEFAULT_CONTAINS = [
      EXPANSION,
      STRING,
      Q_STRING,
      REGEXP2,
      REGEXP,
      ATTRIBUTE,
      VARIABLE,
      hljs.HASH_COMMENT_MODE,
      {
        className: "class",
        beginKeywords: "class module struct",
        end: "$|;",
        illegal: /=/,
        contains: [
          hljs.HASH_COMMENT_MODE,
          hljs.inherit(hljs.TITLE_MODE, { begin: CRYSTAL_PATH_RE }),
          {
            // relevance booster for inheritance
            begin: "<"
          }
        ]
      },
      {
        className: "class",
        beginKeywords: "lib enum union",
        end: "$|;",
        illegal: /=/,
        contains: [
          hljs.HASH_COMMENT_MODE,
          hljs.inherit(hljs.TITLE_MODE, { begin: CRYSTAL_PATH_RE })
        ]
      },
      {
        beginKeywords: "annotation",
        end: "$|;",
        illegal: /=/,
        contains: [
          hljs.HASH_COMMENT_MODE,
          hljs.inherit(hljs.TITLE_MODE, { begin: CRYSTAL_PATH_RE })
        ],
        relevance: 2
      },
      {
        className: "function",
        beginKeywords: "def",
        end: /\B\b/,
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {
            begin: CRYSTAL_METHOD_RE,
            endsParent: true
          })
        ]
      },
      {
        className: "function",
        beginKeywords: "fun macro",
        end: /\B\b/,
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {
            begin: CRYSTAL_METHOD_RE,
            endsParent: true
          })
        ],
        relevance: 2
      },
      {
        className: "symbol",
        begin: hljs.UNDERSCORE_IDENT_RE + "(!|\\?)?:",
        relevance: 0
      },
      {
        className: "symbol",
        begin: ":",
        contains: [
          STRING,
          { begin: CRYSTAL_METHOD_RE }
        ],
        relevance: 0
      },
      {
        className: "number",
        variants: [
          { begin: "\\b0b([01_]+)" + INT_SUFFIX },
          { begin: "\\b0o([0-7_]+)" + INT_SUFFIX },
          { begin: "\\b0x([A-Fa-f0-9_]+)" + INT_SUFFIX },
          { begin: "\\b([1-9][0-9_]*[0-9]|[0-9])(\\.[0-9][0-9_]*)?([eE]_?[-+]?[0-9_]*)?" + FLOAT_SUFFIX + "(?!_)" },
          { begin: "\\b([1-9][0-9_]*|0)" + INT_SUFFIX }
        ],
        relevance: 0
      }
    ];
    SUBST.contains = CRYSTAL_DEFAULT_CONTAINS;
    EXPANSION.contains = CRYSTAL_DEFAULT_CONTAINS.slice(1);
    return {
      name: "Crystal",
      aliases: ["cr"],
      keywords: CRYSTAL_KEYWORDS,
      contains: CRYSTAL_DEFAULT_CONTAINS
    };
  }
  function csp(hljs) {
    const KEYWORDS2 = [
      "base-uri",
      "child-src",
      "connect-src",
      "default-src",
      "font-src",
      "form-action",
      "frame-ancestors",
      "frame-src",
      "img-src",
      "manifest-src",
      "media-src",
      "object-src",
      "plugin-types",
      "report-uri",
      "sandbox",
      "script-src",
      "style-src",
      "trusted-types",
      "unsafe-hashes",
      "worker-src"
    ];
    return {
      name: "CSP",
      case_insensitive: false,
      keywords: {
        $pattern: "[a-zA-Z][a-zA-Z0-9_-]*",
        keyword: KEYWORDS2
      },
      contains: [
        {
          className: "string",
          begin: "'",
          end: "'"
        },
        {
          className: "attribute",
          begin: "^Content",
          end: ":",
          excludeEnd: true
        }
      ]
    };
  }
  function d(hljs) {
    const D_KEYWORDS = {
      $pattern: hljs.UNDERSCORE_IDENT_RE,
      keyword: "abstract alias align asm assert auto body break byte case cast catch class const continue debug default delete deprecated do else enum export extern final finally for foreach foreach_reverse|10 goto if immutable import in inout int interface invariant is lazy macro mixin module new nothrow out override package pragma private protected public pure ref return scope shared static struct super switch synchronized template this throw try typedef typeid typeof union unittest version void volatile while with __FILE__ __LINE__ __gshared|10 __thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__",
      built_in: "bool cdouble cent cfloat char creal dchar delegate double dstring float function idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar wstring",
      literal: "false null true"
    };
    const decimal_integer_re = "(0|[1-9][\\d_]*)";
    const decimal_integer_nosus_re = "(0|[1-9][\\d_]*|\\d[\\d_]*|[\\d_]+?\\d)";
    const binary_integer_re = "0[bB][01_]+";
    const hexadecimal_digits_re = "([\\da-fA-F][\\da-fA-F_]*|_[\\da-fA-F][\\da-fA-F_]*)";
    const hexadecimal_integer_re = "0[xX]" + hexadecimal_digits_re;
    const decimal_exponent_re = "([eE][+-]?" + decimal_integer_nosus_re + ")";
    const decimal_float_re = "(" + decimal_integer_nosus_re + "(\\.\\d*|" + decimal_exponent_re + ")|\\d+\\." + decimal_integer_nosus_re + "|\\." + decimal_integer_re + decimal_exponent_re + "?)";
    const hexadecimal_float_re = "(0[xX](" + hexadecimal_digits_re + "\\." + hexadecimal_digits_re + "|\\.?" + hexadecimal_digits_re + ")[pP][+-]?" + decimal_integer_nosus_re + ")";
    const integer_re = "(" + decimal_integer_re + "|" + binary_integer_re + "|" + hexadecimal_integer_re + ")";
    const float_re = "(" + hexadecimal_float_re + "|" + decimal_float_re + ")";
    const escape_sequence_re = `\\\\(['"\\?\\\\abfnrtv]|u[\\dA-Fa-f]{4}|[0-7]{1,3}|x[\\dA-Fa-f]{2}|U[\\dA-Fa-f]{8})|&[a-zA-Z\\d]{2,};`;
    const D_INTEGER_MODE = {
      className: "number",
      begin: "\\b" + integer_re + "(L|u|U|Lu|LU|uL|UL)?",
      relevance: 0
    };
    const D_FLOAT_MODE = {
      className: "number",
      begin: "\\b(" + float_re + "([fF]|L|i|[fF]i|Li)?|" + integer_re + "(i|[fF]i|Li))",
      relevance: 0
    };
    const D_CHARACTER_MODE = {
      className: "string",
      begin: "'(" + escape_sequence_re + "|.)",
      end: "'",
      illegal: "."
    };
    const D_ESCAPE_SEQUENCE = {
      begin: escape_sequence_re,
      relevance: 0
    };
    const D_STRING_MODE = {
      className: "string",
      begin: '"',
      contains: [D_ESCAPE_SEQUENCE],
      end: '"[cwd]?'
    };
    const D_WYSIWYG_DELIMITED_STRING_MODE = {
      className: "string",
      begin: '[rq]"',
      end: '"[cwd]?',
      relevance: 5
    };
    const D_ALTERNATE_WYSIWYG_STRING_MODE = {
      className: "string",
      begin: "`",
      end: "`[cwd]?"
    };
    const D_HEX_STRING_MODE = {
      className: "string",
      begin: 'x"[\\da-fA-F\\s\\n\\r]*"[cwd]?',
      relevance: 10
    };
    const D_TOKEN_STRING_MODE = {
      className: "string",
      begin: 'q"\\{',
      end: '\\}"'
    };
    const D_HASHBANG_MODE = {
      className: "meta",
      begin: "^#!",
      end: "$",
      relevance: 5
    };
    const D_SPECIAL_TOKEN_SEQUENCE_MODE = {
      className: "meta",
      begin: "#(line)",
      end: "$",
      relevance: 5
    };
    const D_ATTRIBUTE_MODE = {
      className: "keyword",
      begin: "@[a-zA-Z_][a-zA-Z_\\d]*"
    };
    const D_NESTING_COMMENT_MODE = hljs.COMMENT(
      "\\/\\+",
      "\\+\\/",
      {
        contains: ["self"],
        relevance: 10
      }
    );
    return {
      name: "D",
      keywords: D_KEYWORDS,
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        D_NESTING_COMMENT_MODE,
        D_HEX_STRING_MODE,
        D_STRING_MODE,
        D_WYSIWYG_DELIMITED_STRING_MODE,
        D_ALTERNATE_WYSIWYG_STRING_MODE,
        D_TOKEN_STRING_MODE,
        D_FLOAT_MODE,
        D_INTEGER_MODE,
        D_CHARACTER_MODE,
        D_HASHBANG_MODE,
        D_SPECIAL_TOKEN_SEQUENCE_MODE,
        D_ATTRIBUTE_MODE
      ]
    };
  }
  function dart(hljs) {
    const SUBST = {
      className: "subst",
      variants: [{ begin: "\\$[A-Za-z0-9_]+" }]
    };
    const BRACED_SUBST = {
      className: "subst",
      variants: [
        {
          begin: /\$\{/,
          end: /\}/
        }
      ],
      keywords: "true false null this is new super"
    };
    const NUMBER = {
      className: "number",
      relevance: 0,
      variants: [
        { match: /\b[0-9][0-9_]*(\.[0-9][0-9_]*)?([eE][+-]?[0-9][0-9_]*)?\b/ },
        { match: /\b0[xX][0-9A-Fa-f][0-9A-Fa-f_]*\b/ }
      ]
    };
    const STRING = {
      className: "string",
      variants: [
        {
          begin: "r'''",
          end: "'''"
        },
        {
          begin: 'r"""',
          end: '"""'
        },
        {
          begin: "r'",
          end: "'",
          illegal: "\\n"
        },
        {
          begin: 'r"',
          end: '"',
          illegal: "\\n"
        },
        {
          begin: "'''",
          end: "'''",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            SUBST,
            BRACED_SUBST
          ]
        },
        {
          begin: '"""',
          end: '"""',
          contains: [
            hljs.BACKSLASH_ESCAPE,
            SUBST,
            BRACED_SUBST
          ]
        },
        {
          begin: "'",
          end: "'",
          illegal: "\\n",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            SUBST,
            BRACED_SUBST
          ]
        },
        {
          begin: '"',
          end: '"',
          illegal: "\\n",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            SUBST,
            BRACED_SUBST
          ]
        }
      ]
    };
    BRACED_SUBST.contains = [
      NUMBER,
      STRING
    ];
    const BUILT_IN_TYPES = [
      // dart:core
      "Comparable",
      "DateTime",
      "Duration",
      "Function",
      "Iterable",
      "Iterator",
      "List",
      "Map",
      "Match",
      "Object",
      "Pattern",
      "RegExp",
      "Set",
      "Stopwatch",
      "String",
      "StringBuffer",
      "StringSink",
      "Symbol",
      "Type",
      "Uri",
      "bool",
      "double",
      "int",
      "num",
      // dart:html
      "Element",
      "ElementList"
    ];
    const NULLABLE_BUILT_IN_TYPES = BUILT_IN_TYPES.map((e3) => `${e3}?`);
    const BASIC_KEYWORDS = [
      "abstract",
      "as",
      "assert",
      "async",
      "await",
      "base",
      "break",
      "case",
      "catch",
      "class",
      "const",
      "continue",
      "covariant",
      "default",
      "deferred",
      "do",
      "dynamic",
      "else",
      "enum",
      "export",
      "extends",
      "extension",
      "external",
      "factory",
      "false",
      "final",
      "finally",
      "for",
      "Function",
      "get",
      "hide",
      "if",
      "implements",
      "import",
      "in",
      "interface",
      "is",
      "late",
      "library",
      "mixin",
      "new",
      "null",
      "on",
      "operator",
      "part",
      "required",
      "rethrow",
      "return",
      "sealed",
      "set",
      "show",
      "static",
      "super",
      "switch",
      "sync",
      "this",
      "throw",
      "true",
      "try",
      "typedef",
      "var",
      "void",
      "when",
      "while",
      "with",
      "yield"
    ];
    const KEYWORDS2 = {
      keyword: BASIC_KEYWORDS,
      built_in: BUILT_IN_TYPES.concat(NULLABLE_BUILT_IN_TYPES).concat([
        // dart:core
        "Never",
        "Null",
        "dynamic",
        "print",
        // dart:html
        "document",
        "querySelector",
        "querySelectorAll",
        "window"
      ]),
      $pattern: /[A-Za-z][A-Za-z0-9_]*\??/
    };
    return {
      name: "Dart",
      keywords: KEYWORDS2,
      contains: [
        STRING,
        hljs.COMMENT(
          /\/\*\*(?!\/)/,
          /\*\//,
          {
            subLanguage: "markdown",
            relevance: 0
          }
        ),
        hljs.COMMENT(
          /\/{3,} ?/,
          /$/,
          { contains: [
            {
              subLanguage: "markdown",
              begin: ".",
              end: "$",
              relevance: 0
            }
          ] }
        ),
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "class",
          beginKeywords: "class interface",
          end: /\{/,
          excludeEnd: true,
          contains: [
            { beginKeywords: "extends implements" },
            hljs.UNDERSCORE_TITLE_MODE
          ]
        },
        NUMBER,
        {
          className: "meta",
          begin: "@[A-Za-z]+"
        },
        {
          begin: "=>"
          // No markup, just a relevance booster
        }
      ]
    };
  }
  function delphi(hljs) {
    const KEYWORDS2 = [
      "exports",
      "register",
      "file",
      "shl",
      "array",
      "record",
      "property",
      "for",
      "mod",
      "while",
      "set",
      "ally",
      "label",
      "uses",
      "raise",
      "not",
      "stored",
      "class",
      "safecall",
      "var",
      "interface",
      "or",
      "private",
      "static",
      "exit",
      "index",
      "inherited",
      "to",
      "else",
      "stdcall",
      "override",
      "shr",
      "asm",
      "far",
      "resourcestring",
      "finalization",
      "packed",
      "virtual",
      "out",
      "and",
      "protected",
      "library",
      "do",
      "xorwrite",
      "goto",
      "near",
      "function",
      "end",
      "div",
      "overload",
      "object",
      "unit",
      "begin",
      "string",
      "on",
      "inline",
      "repeat",
      "until",
      "destructor",
      "write",
      "message",
      "program",
      "with",
      "read",
      "initialization",
      "except",
      "default",
      "nil",
      "if",
      "case",
      "cdecl",
      "in",
      "downto",
      "threadvar",
      "of",
      "try",
      "pascal",
      "const",
      "external",
      "constructor",
      "type",
      "public",
      "then",
      "implementation",
      "finally",
      "published",
      "procedure",
      "absolute",
      "reintroduce",
      "operator",
      "as",
      "is",
      "abstract",
      "alias",
      "assembler",
      "bitpacked",
      "break",
      "continue",
      "cppdecl",
      "cvar",
      "enumerator",
      "experimental",
      "platform",
      "deprecated",
      "unimplemented",
      "dynamic",
      "export",
      "far16",
      "forward",
      "generic",
      "helper",
      "implements",
      "interrupt",
      "iochecks",
      "local",
      "name",
      "nodefault",
      "noreturn",
      "nostackframe",
      "oldfpccall",
      "otherwise",
      "saveregisters",
      "softfloat",
      "specialize",
      "strict",
      "unaligned",
      "varargs"
    ];
    const COMMENT_MODES = [
      hljs.C_LINE_COMMENT_MODE,
      hljs.COMMENT(/\{/, /\}/, { relevance: 0 }),
      hljs.COMMENT(/\(\*/, /\*\)/, { relevance: 10 })
    ];
    const DIRECTIVE = {
      className: "meta",
      variants: [
        {
          begin: /\{\$/,
          end: /\}/
        },
        {
          begin: /\(\*\$/,
          end: /\*\)/
        }
      ]
    };
    const STRING = {
      className: "string",
      begin: /'/,
      end: /'/,
      contains: [{ begin: /''/ }]
    };
    const NUMBER = {
      className: "number",
      relevance: 0,
      // Source: https://www.freepascal.org/docs-html/ref/refse6.html
      variants: [
        {
          // Regular numbers, e.g., 123, 123.456.
          match: /\b\d[\d_]*(\.\d[\d_]*)?/
        },
        {
          // Hexadecimal notation, e.g., $7F.
          match: /\$[\dA-Fa-f_]+/
        },
        {
          // Hexadecimal literal with no digits
          match: /\$/,
          relevance: 0
        },
        {
          // Octal notation, e.g., &42.
          match: /&[0-7][0-7_]*/
        },
        {
          // Binary notation, e.g., %1010.
          match: /%[01_]+/
        },
        {
          // Binary literal with no digits
          match: /%/,
          relevance: 0
        }
      ]
    };
    const CHAR_STRING = {
      className: "string",
      variants: [
        { match: /#\d[\d_]*/ },
        { match: /#\$[\dA-Fa-f][\dA-Fa-f_]*/ },
        { match: /#&[0-7][0-7_]*/ },
        { match: /#%[01][01_]*/ }
      ]
    };
    const CLASS = {
      begin: hljs.IDENT_RE + "\\s*=\\s*class\\s*\\(",
      returnBegin: true,
      contains: [hljs.TITLE_MODE]
    };
    const FUNCTION = {
      className: "function",
      beginKeywords: "function constructor destructor procedure",
      end: /[:;]/,
      keywords: "function constructor|10 destructor|10 procedure|10",
      contains: [
        hljs.TITLE_MODE,
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: KEYWORDS2,
          contains: [
            STRING,
            CHAR_STRING,
            DIRECTIVE
          ].concat(COMMENT_MODES)
        },
        DIRECTIVE
      ].concat(COMMENT_MODES)
    };
    return {
      name: "Delphi",
      aliases: [
        "dpr",
        "dfm",
        "pas",
        "pascal"
      ],
      case_insensitive: true,
      keywords: KEYWORDS2,
      illegal: /"|\$[G-Zg-z]|\/\*|<\/|\|/,
      contains: [
        STRING,
        CHAR_STRING,
        NUMBER,
        CLASS,
        FUNCTION,
        DIRECTIVE
      ].concat(COMMENT_MODES)
    };
  }
  function django(hljs) {
    const FILTER = {
      begin: /\|[A-Za-z]+:?/,
      keywords: { name: "truncatewords removetags linebreaksbr yesno get_digit timesince random striptags filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort dictsortreversed default_if_none pluralize lower join center default truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize localtime utc timezone" },
      contains: [
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE
      ]
    };
    return {
      name: "Django",
      aliases: ["jinja"],
      case_insensitive: true,
      subLanguage: "xml",
      contains: [
        hljs.COMMENT(/\{%\s*comment\s*%\}/, /\{%\s*endcomment\s*%\}/),
        hljs.COMMENT(/\{#/, /#\}/),
        {
          className: "template-tag",
          begin: /\{%/,
          end: /%\}/,
          contains: [
            {
              className: "name",
              begin: /\w+/,
              keywords: { name: "comment endcomment load templatetag ifchanged endifchanged if endif firstof for endfor ifnotequal endifnotequal widthratio extends include spaceless endspaceless regroup ifequal endifequal ssi now with cycle url filter endfilter debug block endblock else autoescape endautoescape csrf_token empty elif endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix plural get_current_language language get_available_languages get_current_language_bidi get_language_info get_language_info_list localize endlocalize localtime endlocaltime timezone endtimezone get_current_timezone verbatim" },
              starts: {
                endsWithParent: true,
                keywords: "in by as",
                contains: [FILTER],
                relevance: 0
              }
            }
          ]
        },
        {
          className: "template-variable",
          begin: /\{\{/,
          end: /\}\}/,
          contains: [FILTER]
        }
      ]
    };
  }
  function dns(hljs) {
    const KEYWORDS2 = [
      "IN",
      "A",
      "AAAA",
      "AFSDB",
      "APL",
      "CAA",
      "CDNSKEY",
      "CDS",
      "CERT",
      "CNAME",
      "DHCID",
      "DLV",
      "DNAME",
      "DNSKEY",
      "DS",
      "HIP",
      "IPSECKEY",
      "KEY",
      "KX",
      "LOC",
      "MX",
      "NAPTR",
      "NS",
      "NSEC",
      "NSEC3",
      "NSEC3PARAM",
      "PTR",
      "RRSIG",
      "RP",
      "SIG",
      "SOA",
      "SRV",
      "SSHFP",
      "TA",
      "TKEY",
      "TLSA",
      "TSIG",
      "TXT"
    ];
    return {
      name: "DNS Zone",
      aliases: [
        "bind",
        "zone"
      ],
      keywords: KEYWORDS2,
      contains: [
        hljs.COMMENT(";", "$", { relevance: 0 }),
        {
          className: "meta",
          begin: /^\$(TTL|GENERATE|INCLUDE|ORIGIN)\b/
        },
        // IPv6
        {
          className: "number",
          begin: "((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))\\b"
        },
        // IPv4
        {
          className: "number",
          begin: "((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b"
        },
        hljs.inherit(hljs.NUMBER_MODE, { begin: /\b\d+[dhwm]?/ })
      ]
    };
  }
  function dockerfile(hljs) {
    const KEYWORDS2 = [
      "from",
      "maintainer",
      "expose",
      "env",
      "arg",
      "user",
      "onbuild",
      "stopsignal"
    ];
    return {
      name: "Dockerfile",
      aliases: ["docker"],
      case_insensitive: true,
      keywords: KEYWORDS2,
      contains: [
        hljs.HASH_COMMENT_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.NUMBER_MODE,
        {
          beginKeywords: "run cmd entrypoint volume add copy workdir label healthcheck shell",
          starts: {
            end: /[^\\]$/,
            subLanguage: "bash"
          }
        }
      ],
      illegal: "</"
    };
  }
  function dos(hljs) {
    const COMMENT2 = hljs.COMMENT(
      /^\s*@?rem\b/,
      /$/,
      { relevance: 10 }
    );
    const LABEL = {
      className: "symbol",
      begin: "^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)",
      relevance: 0
    };
    const KEYWORDS2 = [
      "if",
      "else",
      "goto",
      "for",
      "in",
      "do",
      "call",
      "exit",
      "not",
      "exist",
      "errorlevel",
      "defined",
      "equ",
      "neq",
      "lss",
      "leq",
      "gtr",
      "geq"
    ];
    const BUILT_INS2 = [
      "prn",
      "nul",
      "lpt3",
      "lpt2",
      "lpt1",
      "con",
      "com4",
      "com3",
      "com2",
      "com1",
      "aux",
      "shift",
      "cd",
      "dir",
      "echo",
      "setlocal",
      "endlocal",
      "set",
      "pause",
      "copy",
      "append",
      "assoc",
      "at",
      "attrib",
      "break",
      "cacls",
      "cd",
      "chcp",
      "chdir",
      "chkdsk",
      "chkntfs",
      "cls",
      "cmd",
      "color",
      "comp",
      "compact",
      "convert",
      "date",
      "dir",
      "diskcomp",
      "diskcopy",
      "doskey",
      "erase",
      "fs",
      "find",
      "findstr",
      "format",
      "ftype",
      "graftabl",
      "help",
      "keyb",
      "label",
      "md",
      "mkdir",
      "mode",
      "more",
      "move",
      "path",
      "pause",
      "print",
      "popd",
      "pushd",
      "promt",
      "rd",
      "recover",
      "rem",
      "rename",
      "replace",
      "restore",
      "rmdir",
      "shift",
      "sort",
      "start",
      "subst",
      "time",
      "title",
      "tree",
      "type",
      "ver",
      "verify",
      "vol",
      // winutils
      "ping",
      "net",
      "ipconfig",
      "taskkill",
      "xcopy",
      "ren",
      "del"
    ];
    return {
      name: "Batch file (DOS)",
      aliases: [
        "bat",
        "cmd"
      ],
      case_insensitive: true,
      illegal: /\/\*/,
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_INS2
      },
      contains: [
        {
          className: "variable",
          begin: /%%[^ ]|%[^ ]+?%|![^ ]+?!/
        },
        {
          className: "function",
          begin: LABEL.begin,
          end: "goto:eof",
          contains: [
            hljs.inherit(hljs.TITLE_MODE, { begin: "([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*" }),
            COMMENT2
          ]
        },
        {
          className: "number",
          begin: "\\b\\d+",
          relevance: 0
        },
        COMMENT2
      ]
    };
  }
  function dsconfig(hljs) {
    const QUOTED_PROPERTY = {
      className: "string",
      begin: /"/,
      end: /"/
    };
    const APOS_PROPERTY = {
      className: "string",
      begin: /'/,
      end: /'/
    };
    const UNQUOTED_PROPERTY = {
      className: "string",
      begin: /[\w\-?]+:\w+/,
      end: /\W/,
      relevance: 0
    };
    const VALUELESS_PROPERTY = {
      className: "string",
      begin: /\w+(\-\w+)*/,
      end: /(?=\W)/,
      relevance: 0
    };
    return {
      keywords: "dsconfig",
      contains: [
        {
          className: "keyword",
          begin: "^dsconfig",
          end: /\s/,
          excludeEnd: true,
          relevance: 10
        },
        {
          className: "built_in",
          begin: /(list|create|get|set|delete)-(\w+)/,
          end: /\s/,
          excludeEnd: true,
          illegal: "!@#$%^&*()",
          relevance: 10
        },
        {
          className: "built_in",
          begin: /--(\w+)/,
          end: /\s/,
          excludeEnd: true
        },
        QUOTED_PROPERTY,
        APOS_PROPERTY,
        UNQUOTED_PROPERTY,
        VALUELESS_PROPERTY,
        hljs.HASH_COMMENT_MODE
      ]
    };
  }
  function dts(hljs) {
    const STRINGS2 = {
      className: "string",
      variants: [
        hljs.inherit(hljs.QUOTE_STRING_MODE, { begin: '((u8?|U)|L)?"' }),
        {
          begin: '(u8?|U)?R"',
          end: '"',
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: "'\\\\?.",
          end: "'",
          illegal: "."
        }
      ]
    };
    const NUMBERS = {
      className: "number",
      variants: [
        { begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)" },
        { begin: hljs.C_NUMBER_RE }
      ],
      relevance: 0
    };
    const PREPROCESSOR = {
      className: "meta",
      begin: "#",
      end: "$",
      keywords: { keyword: "if else elif endif define undef ifdef ifndef" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        {
          beginKeywords: "include",
          end: "$",
          keywords: { keyword: "include" },
          contains: [
            hljs.inherit(STRINGS2, { className: "string" }),
            {
              className: "string",
              begin: "<",
              end: ">",
              illegal: "\\n"
            }
          ]
        },
        STRINGS2,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
    const REFERENCE = {
      className: "variable",
      begin: /&[a-z\d_]*\b/
    };
    const KEYWORD = {
      className: "keyword",
      begin: "/[a-z][a-z\\d-]*/"
    };
    const LABEL = {
      className: "symbol",
      begin: "^\\s*[a-zA-Z_][a-zA-Z\\d_]*:"
    };
    const CELL_PROPERTY = {
      className: "params",
      relevance: 0,
      begin: "<",
      end: ">",
      contains: [
        NUMBERS,
        REFERENCE
      ]
    };
    const NODE = {
      className: "title.class",
      begin: /[a-zA-Z_][a-zA-Z\d_@-]*(?=\s\{)/,
      relevance: 0.2
    };
    const ROOT_NODE = {
      className: "title.class",
      begin: /^\/(?=\s*\{)/,
      relevance: 10
    };
    const ATTR_NO_VALUE = {
      match: /[a-z][a-z-,]+(?=;)/,
      relevance: 0,
      scope: "attr"
    };
    const ATTR = {
      relevance: 0,
      match: [
        /[a-z][a-z-,]+/,
        /\s*/,
        /=/
      ],
      scope: {
        1: "attr",
        3: "operator"
      }
    };
    const PUNC = {
      scope: "punctuation",
      relevance: 0,
      // `};` combined is just to avoid tons of useless punctuation nodes
      match: /\};|[;{}]/
    };
    return {
      name: "Device Tree",
      contains: [
        ROOT_NODE,
        REFERENCE,
        KEYWORD,
        LABEL,
        NODE,
        ATTR,
        ATTR_NO_VALUE,
        CELL_PROPERTY,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        NUMBERS,
        STRINGS2,
        PREPROCESSOR,
        PUNC,
        {
          begin: hljs.IDENT_RE + "::",
          keywords: ""
        }
      ]
    };
  }
  function dust(hljs) {
    const EXPRESSION_KEYWORDS = "if eq ne lt lte gt gte select default math sep";
    return {
      name: "Dust",
      aliases: ["dst"],
      case_insensitive: true,
      subLanguage: "xml",
      contains: [
        {
          className: "template-tag",
          begin: /\{[#\/]/,
          end: /\}/,
          illegal: /;/,
          contains: [
            {
              className: "name",
              begin: /[a-zA-Z\.-]+/,
              starts: {
                endsWithParent: true,
                relevance: 0,
                contains: [hljs.QUOTE_STRING_MODE]
              }
            }
          ]
        },
        {
          className: "template-variable",
          begin: /\{/,
          end: /\}/,
          illegal: /;/,
          keywords: EXPRESSION_KEYWORDS
        }
      ]
    };
  }
  function ebnf(hljs) {
    const commentMode = hljs.COMMENT(/\(\*/, /\*\)/);
    const nonTerminalMode = {
      className: "attribute",
      begin: /^[ ]*[a-zA-Z]+([\s_-]+[a-zA-Z]+)*/
    };
    const specialSequenceMode = {
      className: "meta",
      begin: /\?.*\?/
    };
    const ruleBodyMode = {
      begin: /=/,
      end: /[.;]/,
      contains: [
        commentMode,
        specialSequenceMode,
        {
          // terminals
          className: "string",
          variants: [
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE,
            {
              begin: "`",
              end: "`"
            }
          ]
        }
      ]
    };
    return {
      name: "Extended Backus-Naur Form",
      illegal: /\S/,
      contains: [
        commentMode,
        nonTerminalMode,
        ruleBodyMode
      ]
    };
  }
  function elixir(hljs) {
    const regex = hljs.regex;
    const ELIXIR_IDENT_RE = "[a-zA-Z_][a-zA-Z0-9_.]*(!|\\?)?";
    const ELIXIR_METHOD_RE = "[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?";
    const KEYWORDS2 = [
      "after",
      "alias",
      "and",
      "case",
      "catch",
      "cond",
      "defstruct",
      "defguard",
      "do",
      "else",
      "end",
      "fn",
      "for",
      "if",
      "import",
      "in",
      "not",
      "or",
      "quote",
      "raise",
      "receive",
      "require",
      "reraise",
      "rescue",
      "try",
      "unless",
      "unquote",
      "unquote_splicing",
      "use",
      "when",
      "with|0"
    ];
    const LITERALS2 = [
      "false",
      "nil",
      "true"
    ];
    const KWS = {
      $pattern: ELIXIR_IDENT_RE,
      keyword: KEYWORDS2,
      literal: LITERALS2
    };
    const SUBST = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: KWS
    };
    const NUMBER = {
      className: "number",
      begin: "(\\b0o[0-7_]+)|(\\b0b[01_]+)|(\\b0x[0-9a-fA-F_]+)|(-?\\b[0-9][0-9_]*(\\.[0-9_]+([eE][-+]?[0-9]+)?)?)",
      relevance: 0
    };
    const ESCAPES_RE = /\\[\s\S]/;
    const BACKSLASH_ESCAPE2 = {
      match: ESCAPES_RE,
      scope: "char.escape",
      relevance: 0
    };
    const SIGIL_DELIMITERS = `[/|([{<"']`;
    const SIGIL_DELIMITER_MODES = [
      {
        begin: /"/,
        end: /"/
      },
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /\//,
        end: /\//
      },
      {
        begin: /\|/,
        end: /\|/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        begin: /\[/,
        end: /\]/
      },
      {
        begin: /\{/,
        end: /\}/
      },
      {
        begin: /</,
        end: />/
      }
    ];
    const escapeSigilEnd = (end2) => {
      return {
        scope: "char.escape",
        begin: regex.concat(/\\/, end2),
        relevance: 0
      };
    };
    const LOWERCASE_SIGIL = {
      className: "string",
      begin: "~[a-z](?=" + SIGIL_DELIMITERS + ")",
      contains: SIGIL_DELIMITER_MODES.map((x) => hljs.inherit(
        x,
        { contains: [
          escapeSigilEnd(x.end),
          BACKSLASH_ESCAPE2,
          SUBST
        ] }
      ))
    };
    const UPCASE_SIGIL = {
      className: "string",
      begin: "~[A-Z](?=" + SIGIL_DELIMITERS + ")",
      contains: SIGIL_DELIMITER_MODES.map((x) => hljs.inherit(
        x,
        { contains: [escapeSigilEnd(x.end)] }
      ))
    };
    const REGEX_SIGIL = {
      className: "regex",
      variants: [
        {
          begin: "~r(?=" + SIGIL_DELIMITERS + ")",
          contains: SIGIL_DELIMITER_MODES.map((x) => hljs.inherit(
            x,
            {
              end: regex.concat(x.end, /[uismxfU]{0,7}/),
              contains: [
                escapeSigilEnd(x.end),
                BACKSLASH_ESCAPE2,
                SUBST
              ]
            }
          ))
        },
        {
          begin: "~R(?=" + SIGIL_DELIMITERS + ")",
          contains: SIGIL_DELIMITER_MODES.map(
            (x) => hljs.inherit(
              x,
              {
                end: regex.concat(x.end, /[uismxfU]{0,7}/),
                contains: [escapeSigilEnd(x.end)]
              }
            )
          )
        }
      ]
    };
    const STRING = {
      className: "string",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ],
      variants: [
        {
          begin: /"""/,
          end: /"""/
        },
        {
          begin: /'''/,
          end: /'''/
        },
        {
          begin: /~S"""/,
          end: /"""/,
          contains: []
          // override default
        },
        {
          begin: /~S"/,
          end: /"/,
          contains: []
          // override default
        },
        {
          begin: /~S'''/,
          end: /'''/,
          contains: []
          // override default
        },
        {
          begin: /~S'/,
          end: /'/,
          contains: []
          // override default
        },
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        }
      ]
    };
    const FUNCTION = {
      className: "function",
      beginKeywords: "def defp defmacro defmacrop",
      end: /\B\b/,
      // the mode is ended by the title
      contains: [
        hljs.inherit(hljs.TITLE_MODE, {
          begin: ELIXIR_IDENT_RE,
          endsParent: true
        })
      ]
    };
    const CLASS = hljs.inherit(FUNCTION, {
      className: "class",
      beginKeywords: "defimpl defmodule defprotocol defrecord",
      end: /\bdo\b|$|;/
    });
    const ELIXIR_DEFAULT_CONTAINS = [
      STRING,
      REGEX_SIGIL,
      UPCASE_SIGIL,
      LOWERCASE_SIGIL,
      hljs.HASH_COMMENT_MODE,
      CLASS,
      FUNCTION,
      { begin: "::" },
      {
        className: "symbol",
        begin: ":(?![\\s:])",
        contains: [
          STRING,
          { begin: ELIXIR_METHOD_RE }
        ],
        relevance: 0
      },
      {
        className: "symbol",
        begin: ELIXIR_IDENT_RE + ":(?!:)",
        relevance: 0
      },
      {
        // Usage of a module, struct, etc.
        className: "title.class",
        begin: /(\b[A-Z][a-zA-Z0-9_]+)/,
        relevance: 0
      },
      NUMBER,
      {
        className: "variable",
        begin: "(\\$\\W)|((\\$|@@?)(\\w+))"
      }
      // -> has been removed, capnproto always uses this grammar construct
    ];
    SUBST.contains = ELIXIR_DEFAULT_CONTAINS;
    return {
      name: "Elixir",
      aliases: [
        "ex",
        "exs"
      ],
      keywords: KWS,
      contains: ELIXIR_DEFAULT_CONTAINS
    };
  }
  function elm(hljs) {
    const COMMENT2 = { variants: [
      hljs.COMMENT("--", "$"),
      hljs.COMMENT(
        /\{-/,
        /-\}/,
        { contains: ["self"] }
      )
    ] };
    const CONSTRUCTOR = {
      className: "type",
      begin: "\\b[A-Z][\\w']*",
      // TODO: other constructors (built-in, infix).
      relevance: 0
    };
    const LIST = {
      begin: "\\(",
      end: "\\)",
      illegal: '"',
      contains: [
        {
          className: "type",
          begin: "\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"
        },
        COMMENT2
      ]
    };
    const RECORD = {
      begin: /\{/,
      end: /\}/,
      contains: LIST.contains
    };
    const CHARACTER = {
      className: "string",
      begin: "'\\\\?.",
      end: "'",
      illegal: "."
    };
    const KEYWORDS2 = [
      "let",
      "in",
      "if",
      "then",
      "else",
      "case",
      "of",
      "where",
      "module",
      "import",
      "exposing",
      "type",
      "alias",
      "as",
      "infix",
      "infixl",
      "infixr",
      "port",
      "effect",
      "command",
      "subscription"
    ];
    return {
      name: "Elm",
      keywords: KEYWORDS2,
      contains: [
        // Top-level constructions.
        {
          beginKeywords: "port effect module",
          end: "exposing",
          keywords: "port effect module where command subscription exposing",
          contains: [
            LIST,
            COMMENT2
          ],
          illegal: "\\W\\.|;"
        },
        {
          begin: "import",
          end: "$",
          keywords: "import as exposing",
          contains: [
            LIST,
            COMMENT2
          ],
          illegal: "\\W\\.|;"
        },
        {
          begin: "type",
          end: "$",
          keywords: "type alias",
          contains: [
            CONSTRUCTOR,
            LIST,
            RECORD,
            COMMENT2
          ]
        },
        {
          beginKeywords: "infix infixl infixr",
          end: "$",
          contains: [
            hljs.C_NUMBER_MODE,
            COMMENT2
          ]
        },
        {
          begin: "port",
          end: "$",
          keywords: "port",
          contains: [COMMENT2]
        },
        // Literals and names.
        CHARACTER,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE,
        CONSTRUCTOR,
        hljs.inherit(hljs.TITLE_MODE, { begin: "^[_a-z][\\w']*" }),
        COMMENT2,
        {
          // No markup, relevance booster
          begin: "->|<-"
        }
      ],
      illegal: /;/
    };
  }
  function erb(hljs) {
    return {
      name: "ERB",
      subLanguage: "xml",
      contains: [
        hljs.COMMENT("<%#", "%>"),
        {
          begin: "<%[%=-]?",
          end: "[%-]?%>",
          subLanguage: "ruby",
          excludeBegin: true,
          excludeEnd: true
        }
      ]
    };
  }
  function erlang(hljs) {
    const BASIC_ATOM_RE = "[a-z'][a-zA-Z0-9_']*";
    const FUNCTION_NAME_RE = "(" + BASIC_ATOM_RE + ":" + BASIC_ATOM_RE + "|" + BASIC_ATOM_RE + ")";
    const ERLANG_RESERVED = {
      keyword: "after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if let not of orelse|10 query receive rem try when xor maybe else",
      literal: "false true"
    };
    const COMMENT2 = hljs.COMMENT("%", "$");
    const NUMBER = {
      className: "number",
      begin: "\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)",
      relevance: 0
    };
    const NAMED_FUN = { begin: "fun\\s+" + BASIC_ATOM_RE + "/\\d+" };
    const FUNCTION_CALL = {
      begin: FUNCTION_NAME_RE + "\\(",
      end: "\\)",
      returnBegin: true,
      relevance: 0,
      contains: [
        {
          begin: FUNCTION_NAME_RE,
          relevance: 0
        },
        {
          begin: "\\(",
          end: "\\)",
          endsWithParent: true,
          returnEnd: true,
          relevance: 0
          // "contains" defined later
        }
      ]
    };
    const TUPLE = {
      begin: /\{/,
      end: /\}/,
      relevance: 0
      // "contains" defined later
    };
    const VAR1 = {
      begin: "\\b_([A-Z][A-Za-z0-9_]*)?",
      relevance: 0
    };
    const VAR2 = {
      begin: "[A-Z][a-zA-Z0-9_]*",
      relevance: 0
    };
    const RECORD_ACCESS = {
      begin: "#" + hljs.UNDERSCORE_IDENT_RE,
      relevance: 0,
      returnBegin: true,
      contains: [
        {
          begin: "#" + hljs.UNDERSCORE_IDENT_RE,
          relevance: 0
        },
        {
          begin: /\{/,
          end: /\}/,
          relevance: 0
          // "contains" defined later
        }
      ]
    };
    const CHAR_LITERAL = {
      scope: "string",
      match: /\$(\\([^0-9]|[0-9]{1,3}|)|.)/
    };
    const TRIPLE_QUOTE = {
      scope: "string",
      match: /"""("*)(?!")[\s\S]*?"""\1/
    };
    const SIGIL = {
      scope: "string",
      contains: [hljs.BACKSLASH_ESCAPE],
      variants: [
        { match: /~\w?"""("*)(?!")[\s\S]*?"""\1/ },
        { begin: /~\w?\(/, end: /\)/ },
        { begin: /~\w?\[/, end: /\]/ },
        { begin: /~\w?{/, end: /}/ },
        { begin: /~\w?</, end: />/ },
        { begin: /~\w?\//, end: /\// },
        { begin: /~\w?\|/, end: /\|/ },
        { begin: /~\w?'/, end: /'/ },
        { begin: /~\w?"/, end: /"/ },
        { begin: /~\w?`/, end: /`/ },
        { begin: /~\w?#/, end: /#/ }
      ]
    };
    const BLOCK_STATEMENTS = {
      beginKeywords: "fun receive if try case maybe",
      end: "end",
      keywords: ERLANG_RESERVED
    };
    BLOCK_STATEMENTS.contains = [
      COMMENT2,
      NAMED_FUN,
      hljs.inherit(hljs.APOS_STRING_MODE, { className: "" }),
      BLOCK_STATEMENTS,
      FUNCTION_CALL,
      SIGIL,
      TRIPLE_QUOTE,
      hljs.QUOTE_STRING_MODE,
      NUMBER,
      TUPLE,
      VAR1,
      VAR2,
      RECORD_ACCESS,
      CHAR_LITERAL
    ];
    const BASIC_MODES = [
      COMMENT2,
      NAMED_FUN,
      BLOCK_STATEMENTS,
      FUNCTION_CALL,
      SIGIL,
      TRIPLE_QUOTE,
      hljs.QUOTE_STRING_MODE,
      NUMBER,
      TUPLE,
      VAR1,
      VAR2,
      RECORD_ACCESS,
      CHAR_LITERAL
    ];
    FUNCTION_CALL.contains[1].contains = BASIC_MODES;
    TUPLE.contains = BASIC_MODES;
    RECORD_ACCESS.contains[1].contains = BASIC_MODES;
    const DIRECTIVES = [
      "-module",
      "-record",
      "-undef",
      "-export",
      "-ifdef",
      "-ifndef",
      "-author",
      "-copyright",
      "-doc",
      "-moduledoc",
      "-vsn",
      "-import",
      "-include",
      "-include_lib",
      "-compile",
      "-define",
      "-else",
      "-endif",
      "-file",
      "-behaviour",
      "-behavior",
      "-spec",
      "-on_load",
      "-nifs"
    ];
    const PARAMS = {
      className: "params",
      begin: "\\(",
      end: "\\)",
      contains: BASIC_MODES
    };
    return {
      name: "Erlang",
      aliases: ["erl"],
      keywords: ERLANG_RESERVED,
      illegal: "(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))",
      contains: [
        {
          className: "function",
          begin: "^" + BASIC_ATOM_RE + "\\s*\\(",
          end: "->",
          returnBegin: true,
          illegal: "\\(|#|//|/\\*|\\\\|:|;",
          contains: [
            PARAMS,
            hljs.inherit(hljs.TITLE_MODE, { begin: BASIC_ATOM_RE })
          ],
          starts: {
            end: ";|\\.",
            keywords: ERLANG_RESERVED,
            contains: BASIC_MODES
          }
        },
        COMMENT2,
        {
          begin: "^-",
          end: "\\.",
          relevance: 0,
          excludeEnd: true,
          returnBegin: true,
          keywords: {
            $pattern: "-" + hljs.IDENT_RE,
            keyword: DIRECTIVES.map((x) => `${x}|1.5`).join(" ")
          },
          contains: [
            PARAMS,
            SIGIL,
            TRIPLE_QUOTE,
            hljs.QUOTE_STRING_MODE
          ]
        },
        NUMBER,
        SIGIL,
        TRIPLE_QUOTE,
        hljs.QUOTE_STRING_MODE,
        RECORD_ACCESS,
        VAR1,
        VAR2,
        TUPLE,
        CHAR_LITERAL,
        { begin: /\.$/ }
        // relevance booster
      ]
    };
  }
  function erlangRepl(hljs) {
    const regex = hljs.regex;
    return {
      name: "Erlang REPL",
      keywords: {
        built_in: "spawn spawn_link self",
        keyword: "after and andalso|10 band begin bnot bor bsl bsr bxor case catch cond div end fun if let not of or orelse|10 query receive rem try when xor"
      },
      contains: [
        {
          className: "meta.prompt",
          begin: "^[0-9]+> ",
          relevance: 10
        },
        hljs.COMMENT("%", "$"),
        {
          className: "number",
          begin: "\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)",
          relevance: 0
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        { begin: regex.concat(
          /\?(::)?/,
          /([A-Z]\w*)/,
          // at least one identifier
          /((::)[A-Z]\w*)*/
          // perhaps more
        ) },
        { begin: "->" },
        { begin: "ok" },
        { begin: "!" },
        {
          begin: "(\\b[a-z'][a-zA-Z0-9_']*:[a-z'][a-zA-Z0-9_']*)|(\\b[a-z'][a-zA-Z0-9_']*)",
          relevance: 0
        },
        {
          begin: "[A-Z][a-zA-Z0-9_']*",
          relevance: 0
        }
      ]
    };
  }
  function excel(hljs) {
    const BUILT_INS2 = [
      "ABS",
      "ACCRINT",
      "ACCRINTM",
      "ACOS",
      "ACOSH",
      "ACOT",
      "ACOTH",
      "AGGREGATE",
      "ADDRESS",
      "AMORDEGRC",
      "AMORLINC",
      "AND",
      "ARABIC",
      "AREAS",
      "ARRAYTOTEXT",
      "ASC",
      "ASIN",
      "ASINH",
      "ATAN",
      "ATAN2",
      "ATANH",
      "AVEDEV",
      "AVERAGE",
      "AVERAGEA",
      "AVERAGEIF",
      "AVERAGEIFS",
      "BAHTTEXT",
      "BASE",
      "BESSELI",
      "BESSELJ",
      "BESSELK",
      "BESSELY",
      "BETADIST",
      "BETA.DIST",
      "BETAINV",
      "BETA.INV",
      "BIN2DEC",
      "BIN2HEX",
      "BIN2OCT",
      "BINOMDIST",
      "BINOM.DIST",
      "BINOM.DIST.RANGE",
      "BINOM.INV",
      "BITAND",
      "BITLSHIFT",
      "BITOR",
      "BITRSHIFT",
      "BITXOR",
      "BYCOL",
      "BYROW",
      "CALL",
      "CEILING",
      "CEILING.MATH",
      "CEILING.PRECISE",
      "CELL",
      "CHAR",
      "CHIDIST",
      "CHIINV",
      "CHITEST",
      "CHISQ.DIST",
      "CHISQ.DIST.RT",
      "CHISQ.INV",
      "CHISQ.INV.RT",
      "CHISQ.TEST",
      "CHOOSE",
      "CHOOSECOLS",
      "CHOOSEROWS",
      "CLEAN",
      "CODE",
      "COLUMN",
      "COLUMNS",
      "COMBIN",
      "COMBINA",
      "COMPLEX",
      "CONCAT",
      "CONCATENATE",
      "CONFIDENCE",
      "CONFIDENCE.NORM",
      "CONFIDENCE.T",
      "CONVERT",
      "CORREL",
      "COS",
      "COSH",
      "COT",
      "COTH",
      "COUNT",
      "COUNTA",
      "COUNTBLANK",
      "COUNTIF",
      "COUNTIFS",
      "COUPDAYBS",
      "COUPDAYS",
      "COUPDAYSNC",
      "COUPNCD",
      "COUPNUM",
      "COUPPCD",
      "COVAR",
      "COVARIANCE.P",
      "COVARIANCE.S",
      "CRITBINOM",
      "CSC",
      "CSCH",
      "CUBEKPIMEMBER",
      "CUBEMEMBER",
      "CUBEMEMBERPROPERTY",
      "CUBERANKEDMEMBER",
      "CUBESET",
      "CUBESETCOUNT",
      "CUBEVALUE",
      "CUMIPMT",
      "CUMPRINC",
      "DATE",
      "DATEDIF",
      "DATEVALUE",
      "DAVERAGE",
      "DAY",
      "DAYS",
      "DAYS360",
      "DB",
      "DBCS",
      "DCOUNT",
      "DCOUNTA",
      "DDB",
      "DEC2BIN",
      "DEC2HEX",
      "DEC2OCT",
      "DECIMAL",
      "DEGREES",
      "DELTA",
      "DEVSQ",
      "DGET",
      "DISC",
      "DMAX",
      "DMIN",
      "DOLLAR",
      "DOLLARDE",
      "DOLLARFR",
      "DPRODUCT",
      "DROP",
      "DSTDEV",
      "DSTDEVP",
      "DSUM",
      "DURATION",
      "DVAR",
      "DVARP",
      "EDATE",
      "EFFECT",
      "ENCODEURL",
      "EOMONTH",
      "ERF",
      "ERF.PRECISE",
      "ERFC",
      "ERFC.PRECISE",
      "ERROR.TYPE",
      "EUROCONVERT",
      "EVEN",
      "EXACT",
      "EXP",
      "EXPAND",
      "EXPON.DIST",
      "EXPONDIST",
      "FACT",
      "FACTDOUBLE",
      "FALSE",
      "F.DIST",
      "FDIST",
      "F.DIST.RT",
      "FILTER",
      "FILTERXML",
      "FIND",
      "FINDB",
      "F.INV",
      "F.INV.RT",
      "FINV",
      "FISHER",
      "FISHERINV",
      "FIXED",
      "FLOOR",
      "FLOOR.MATH",
      "FLOOR.PRECISE",
      "FORECAST",
      "FORECAST.ETS",
      "FORECAST.ETS.CONFINT",
      "FORECAST.ETS.SEASONALITY",
      "FORECAST.ETS.STAT",
      "FORECAST.LINEAR",
      "FORMULATEXT",
      "FREQUENCY",
      "F.TEST",
      "FTEST",
      "FV",
      "FVSCHEDULE",
      "GAMMA",
      "GAMMA.DIST",
      "GAMMADIST",
      "GAMMA.INV",
      "GAMMAINV",
      "GAMMALN",
      "GAMMALN.PRECISE",
      "GAUSS",
      "GCD",
      "GEOMEAN",
      "GESTEP",
      "GETPIVOTDATA",
      "GROWTH",
      "HARMEAN",
      "HEX2BIN",
      "HEX2DEC",
      "HEX2OCT",
      "HLOOKUP",
      "HOUR",
      "HSTACK",
      "HYPERLINK",
      "HYPGEOM.DIST",
      "HYPGEOMDIST",
      "IF",
      "IFERROR",
      "IFNA",
      "IFS",
      "IMABS",
      "IMAGE",
      "IMAGINARY",
      "IMARGUMENT",
      "IMCONJUGATE",
      "IMCOS",
      "IMCOSH",
      "IMCOT",
      "IMCSC",
      "IMCSCH",
      "IMDIV",
      "IMEXP",
      "IMLN",
      "IMLOG10",
      "IMLOG2",
      "IMPOWER",
      "IMPRODUCT",
      "IMREAL",
      "IMSEC",
      "IMSECH",
      "IMSIN",
      "IMSINH",
      "IMSQRT",
      "IMSUB",
      "IMSUM",
      "IMTAN",
      "INDEX",
      "INDIRECT",
      "INFO",
      "INT",
      "INTERCEPT",
      "INTRATE",
      "IPMT",
      "IRR",
      "ISBLANK",
      "ISERR",
      "ISERROR",
      "ISEVEN",
      "ISFORMULA",
      "ISLOGICAL",
      "ISNA",
      "ISNONTEXT",
      "ISNUMBER",
      "ISODD",
      "ISOMITTED",
      "ISREF",
      "ISTEXT",
      "ISO.CEILING",
      "ISOWEEKNUM",
      "ISPMT",
      "JIS",
      "KURT",
      "LAMBDA",
      "LARGE",
      "LCM",
      "LEFT",
      "LEFTB",
      "LEN",
      "LENB",
      "LET",
      "LINEST",
      "LN",
      "LOG",
      "LOG10",
      "LOGEST",
      "LOGINV",
      "LOGNORM.DIST",
      "LOGNORMDIST",
      "LOGNORM.INV",
      "LOOKUP",
      "LOWER",
      "MAKEARRAY",
      "MAP",
      "MATCH",
      "MAX",
      "MAXA",
      "MAXIFS",
      "MDETERM",
      "MDURATION",
      "MEDIAN",
      "MID",
      "MIDB",
      "MIN",
      "MINIFS",
      "MINA",
      "MINUTE",
      "MINVERSE",
      "MIRR",
      "MMULT",
      "MOD",
      "MODE",
      "MODE.MULT",
      "MODE.SNGL",
      "MONTH",
      "MROUND",
      "MULTINOMIAL",
      "MUNIT",
      "N",
      "NA",
      "NEGBINOM.DIST",
      "NEGBINOMDIST",
      "NETWORKDAYS",
      "NETWORKDAYS.INTL",
      "NOMINAL",
      "NORM.DIST",
      "NORMDIST",
      "NORMINV",
      "NORM.INV",
      "NORM.S.DIST",
      "NORMSDIST",
      "NORM.S.INV",
      "NORMSINV",
      "NOT",
      "NOW",
      "NPER",
      "NPV",
      "NUMBERVALUE",
      "OCT2BIN",
      "OCT2DEC",
      "OCT2HEX",
      "ODD",
      "ODDFPRICE",
      "ODDFYIELD",
      "ODDLPRICE",
      "ODDLYIELD",
      "OFFSET",
      "OR",
      "PDURATION",
      "PEARSON",
      "PERCENTILE.EXC",
      "PERCENTILE.INC",
      "PERCENTILE",
      "PERCENTRANK.EXC",
      "PERCENTRANK.INC",
      "PERCENTRANK",
      "PERMUT",
      "PERMUTATIONA",
      "PHI",
      "PHONETIC",
      "PI",
      "PMT",
      "POISSON.DIST",
      "POISSON",
      "POWER",
      "PPMT",
      "PRICE",
      "PRICEDISC",
      "PRICEMAT",
      "PROB",
      "PRODUCT",
      "PROPER",
      "PV",
      "QUARTILE",
      "QUARTILE.EXC",
      "QUARTILE.INC",
      "QUOTIENT",
      "RADIANS",
      "RAND",
      "RANDARRAY",
      "RANDBETWEEN",
      "RANK.AVG",
      "RANK.EQ",
      "RANK",
      "RATE",
      "RECEIVED",
      "REDUCE",
      "REGISTER.ID",
      "REPLACE",
      "REPLACEB",
      "REPT",
      "RIGHT",
      "RIGHTB",
      "ROMAN",
      "ROUND",
      "ROUNDDOWN",
      "ROUNDUP",
      "ROW",
      "ROWS",
      "RRI",
      "RSQ",
      "RTD",
      "SCAN",
      "SEARCH",
      "SEARCHB",
      "SEC",
      "SECH",
      "SECOND",
      "SEQUENCE",
      "SERIESSUM",
      "SHEET",
      "SHEETS",
      "SIGN",
      "SIN",
      "SINH",
      "SKEW",
      "SKEW.P",
      "SLN",
      "SLOPE",
      "SMALL",
      "SORT",
      "SORTBY",
      "SQRT",
      "SQRTPI",
      "SQL.REQUEST",
      "STANDARDIZE",
      "STOCKHISTORY",
      "STDEV",
      "STDEV.P",
      "STDEV.S",
      "STDEVA",
      "STDEVP",
      "STDEVPA",
      "STEYX",
      "SUBSTITUTE",
      "SUBTOTAL",
      "SUM",
      "SUMIF",
      "SUMIFS",
      "SUMPRODUCT",
      "SUMSQ",
      "SUMX2MY2",
      "SUMX2PY2",
      "SUMXMY2",
      "SWITCH",
      "SYD",
      "T",
      "TAN",
      "TANH",
      "TAKE",
      "TBILLEQ",
      "TBILLPRICE",
      "TBILLYIELD",
      "T.DIST",
      "T.DIST.2T",
      "T.DIST.RT",
      "TDIST",
      "TEXT",
      "TEXTAFTER",
      "TEXTBEFORE",
      "TEXTJOIN",
      "TEXTSPLIT",
      "TIME",
      "TIMEVALUE",
      "T.INV",
      "T.INV.2T",
      "TINV",
      "TOCOL",
      "TOROW",
      "TODAY",
      "TRANSPOSE",
      "TREND",
      "TRIM",
      "TRIMMEAN",
      "TRUE",
      "TRUNC",
      "T.TEST",
      "TTEST",
      "TYPE",
      "UNICHAR",
      "UNICODE",
      "UNIQUE",
      "UPPER",
      "VALUE",
      "VALUETOTEXT",
      "VAR",
      "VAR.P",
      "VAR.S",
      "VARA",
      "VARP",
      "VARPA",
      "VDB",
      "VLOOKUP",
      "VSTACK",
      "WEBSERVICE",
      "WEEKDAY",
      "WEEKNUM",
      "WEIBULL",
      "WEIBULL.DIST",
      "WORKDAY",
      "WORKDAY.INTL",
      "WRAPCOLS",
      "WRAPROWS",
      "XIRR",
      "XLOOKUP",
      "XMATCH",
      "XNPV",
      "XOR",
      "YEAR",
      "YEARFRAC",
      "YIELD",
      "YIELDDISC",
      "YIELDMAT",
      "Z.TEST",
      "ZTEST"
    ];
    return {
      name: "Excel formulae",
      aliases: [
        "xlsx",
        "xls"
      ],
      case_insensitive: true,
      keywords: {
        $pattern: /[a-zA-Z][\w\.]*/,
        built_in: BUILT_INS2
      },
      contains: [
        {
          /* matches a beginning equal sign found in Excel formula examples */
          begin: /^=/,
          end: /[^=]/,
          returnEnd: true,
          illegal: /=/,
          /* only allow single equal sign at front of line */
          relevance: 10
        },
        /* technically, there can be more than 2 letters in column names, but this prevents conflict with some keywords */
        {
          /* matches a reference to a single cell */
          className: "symbol",
          begin: /\b[A-Z]{1,2}\d+\b/,
          end: /[^\d]/,
          excludeEnd: true,
          relevance: 0
        },
        {
          /* matches a reference to a range of cells */
          className: "symbol",
          begin: /[A-Z]{0,2}\d*:[A-Z]{0,2}\d*/,
          relevance: 0
        },
        hljs.BACKSLASH_ESCAPE,
        hljs.QUOTE_STRING_MODE,
        {
          className: "number",
          begin: hljs.NUMBER_RE + "(%)?",
          relevance: 0
        },
        /* Excel formula comments are done by putting the comment in a function call to N() */
        hljs.COMMENT(
          /\bN\(/,
          /\)/,
          {
            excludeBegin: true,
            excludeEnd: true,
            illegal: /\n/
          }
        )
      ]
    };
  }
  function fix(hljs) {
    return {
      name: "FIX",
      contains: [
        {
          begin: /[^\u2401\u0001]+/,
          end: /[\u2401\u0001]/,
          excludeEnd: true,
          returnBegin: true,
          returnEnd: false,
          contains: [
            {
              begin: /([^\u2401\u0001=]+)/,
              end: /=([^\u2401\u0001=]+)/,
              returnEnd: true,
              returnBegin: false,
              className: "attr"
            },
            {
              begin: /=/,
              end: /([\u2401\u0001])/,
              excludeEnd: true,
              excludeBegin: true,
              className: "string"
            }
          ]
        }
      ],
      case_insensitive: true
    };
  }
  function flix(hljs) {
    const CHAR = {
      className: "string",
      begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
    };
    const STRING = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"'
        }
      ]
    };
    const NAME = {
      className: "title",
      relevance: 0,
      begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/
    };
    const METHOD = {
      className: "function",
      beginKeywords: "def",
      end: /[:={\[(\n;]/,
      excludeEnd: true,
      contains: [NAME]
    };
    return {
      name: "Flix",
      keywords: {
        keyword: [
          "case",
          "class",
          "def",
          "else",
          "enum",
          "if",
          "impl",
          "import",
          "in",
          "lat",
          "rel",
          "index",
          "let",
          "match",
          "namespace",
          "switch",
          "type",
          "yield",
          "with"
        ],
        literal: [
          "true",
          "false"
        ]
      },
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        CHAR,
        STRING,
        METHOD,
        hljs.C_NUMBER_MODE
      ]
    };
  }
  function fortran(hljs) {
    const regex = hljs.regex;
    const PARAMS = {
      className: "params",
      begin: "\\(",
      end: "\\)"
    };
    const COMMENT2 = { variants: [
      hljs.COMMENT("!", "$", { relevance: 0 }),
      // allow FORTRAN 77 style comments
      hljs.COMMENT("^C[ ]", "$", { relevance: 0 }),
      hljs.COMMENT("^C$", "$", { relevance: 0 })
    ] };
    const OPTIONAL_NUMBER_SUFFIX = /(_[a-z_\d]+)?/;
    const OPTIONAL_NUMBER_EXP = /([de][+-]?\d+)?/;
    const NUMBER = {
      className: "number",
      variants: [
        { begin: regex.concat(/\b\d+/, /\.(\d*)/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
        { begin: regex.concat(/\b\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
        { begin: regex.concat(/\.\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) }
      ],
      relevance: 0
    };
    const FUNCTION_DEF = {
      className: "function",
      beginKeywords: "subroutine function program",
      illegal: "[${=\\n]",
      contains: [
        hljs.UNDERSCORE_TITLE_MODE,
        PARAMS
      ]
    };
    const STRING = {
      className: "string",
      relevance: 0,
      variants: [
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE
      ]
    };
    const KEYWORDS2 = [
      "kind",
      "do",
      "concurrent",
      "local",
      "shared",
      "while",
      "private",
      "call",
      "intrinsic",
      "where",
      "elsewhere",
      "type",
      "endtype",
      "endmodule",
      "endselect",
      "endinterface",
      "end",
      "enddo",
      "endif",
      "if",
      "forall",
      "endforall",
      "only",
      "contains",
      "default",
      "return",
      "stop",
      "then",
      "block",
      "endblock",
      "endassociate",
      "public",
      "subroutine|10",
      "function",
      "program",
      ".and.",
      ".or.",
      ".not.",
      ".le.",
      ".eq.",
      ".ge.",
      ".gt.",
      ".lt.",
      "goto",
      "save",
      "else",
      "use",
      "module",
      "select",
      "case",
      "access",
      "blank",
      "direct",
      "exist",
      "file",
      "fmt",
      "form",
      "formatted",
      "iostat",
      "name",
      "named",
      "nextrec",
      "number",
      "opened",
      "rec",
      "recl",
      "sequential",
      "status",
      "unformatted",
      "unit",
      "continue",
      "format",
      "pause",
      "cycle",
      "exit",
      "c_null_char",
      "c_alert",
      "c_backspace",
      "c_form_feed",
      "flush",
      "wait",
      "decimal",
      "round",
      "iomsg",
      "synchronous",
      "nopass",
      "non_overridable",
      "pass",
      "protected",
      "volatile",
      "abstract",
      "extends",
      "import",
      "non_intrinsic",
      "value",
      "deferred",
      "generic",
      "final",
      "enumerator",
      "class",
      "associate",
      "bind",
      "enum",
      "c_int",
      "c_short",
      "c_long",
      "c_long_long",
      "c_signed_char",
      "c_size_t",
      "c_int8_t",
      "c_int16_t",
      "c_int32_t",
      "c_int64_t",
      "c_int_least8_t",
      "c_int_least16_t",
      "c_int_least32_t",
      "c_int_least64_t",
      "c_int_fast8_t",
      "c_int_fast16_t",
      "c_int_fast32_t",
      "c_int_fast64_t",
      "c_intmax_t",
      "C_intptr_t",
      "c_float",
      "c_double",
      "c_long_double",
      "c_float_complex",
      "c_double_complex",
      "c_long_double_complex",
      "c_bool",
      "c_char",
      "c_null_ptr",
      "c_null_funptr",
      "c_new_line",
      "c_carriage_return",
      "c_horizontal_tab",
      "c_vertical_tab",
      "iso_c_binding",
      "c_loc",
      "c_funloc",
      "c_associated",
      "c_f_pointer",
      "c_ptr",
      "c_funptr",
      "iso_fortran_env",
      "character_storage_size",
      "error_unit",
      "file_storage_size",
      "input_unit",
      "iostat_end",
      "iostat_eor",
      "numeric_storage_size",
      "output_unit",
      "c_f_procpointer",
      "ieee_arithmetic",
      "ieee_support_underflow_control",
      "ieee_get_underflow_mode",
      "ieee_set_underflow_mode",
      "newunit",
      "contiguous",
      "recursive",
      "pad",
      "position",
      "action",
      "delim",
      "readwrite",
      "eor",
      "advance",
      "nml",
      "interface",
      "procedure",
      "namelist",
      "include",
      "sequence",
      "elemental",
      "pure",
      "impure",
      "integer",
      "real",
      "character",
      "complex",
      "logical",
      "codimension",
      "dimension",
      "allocatable|10",
      "parameter",
      "external",
      "implicit|10",
      "none",
      "double",
      "precision",
      "assign",
      "intent",
      "optional",
      "pointer",
      "target",
      "in",
      "out",
      "common",
      "equivalence",
      "data"
    ];
    const LITERALS2 = [
      ".False.",
      ".True."
    ];
    const BUILT_INS2 = [
      "alog",
      "alog10",
      "amax0",
      "amax1",
      "amin0",
      "amin1",
      "amod",
      "cabs",
      "ccos",
      "cexp",
      "clog",
      "csin",
      "csqrt",
      "dabs",
      "dacos",
      "dasin",
      "datan",
      "datan2",
      "dcos",
      "dcosh",
      "ddim",
      "dexp",
      "dint",
      "dlog",
      "dlog10",
      "dmax1",
      "dmin1",
      "dmod",
      "dnint",
      "dsign",
      "dsin",
      "dsinh",
      "dsqrt",
      "dtan",
      "dtanh",
      "float",
      "iabs",
      "idim",
      "idint",
      "idnint",
      "ifix",
      "isign",
      "max0",
      "max1",
      "min0",
      "min1",
      "sngl",
      "algama",
      "cdabs",
      "cdcos",
      "cdexp",
      "cdlog",
      "cdsin",
      "cdsqrt",
      "cqabs",
      "cqcos",
      "cqexp",
      "cqlog",
      "cqsin",
      "cqsqrt",
      "dcmplx",
      "dconjg",
      "derf",
      "derfc",
      "dfloat",
      "dgamma",
      "dimag",
      "dlgama",
      "iqint",
      "qabs",
      "qacos",
      "qasin",
      "qatan",
      "qatan2",
      "qcmplx",
      "qconjg",
      "qcos",
      "qcosh",
      "qdim",
      "qerf",
      "qerfc",
      "qexp",
      "qgamma",
      "qimag",
      "qlgama",
      "qlog",
      "qlog10",
      "qmax1",
      "qmin1",
      "qmod",
      "qnint",
      "qsign",
      "qsin",
      "qsinh",
      "qsqrt",
      "qtan",
      "qtanh",
      "abs",
      "acos",
      "aimag",
      "aint",
      "anint",
      "asin",
      "atan",
      "atan2",
      "char",
      "cmplx",
      "conjg",
      "cos",
      "cosh",
      "exp",
      "ichar",
      "index",
      "int",
      "log",
      "log10",
      "max",
      "min",
      "nint",
      "sign",
      "sin",
      "sinh",
      "sqrt",
      "tan",
      "tanh",
      "print",
      "write",
      "dim",
      "lge",
      "lgt",
      "lle",
      "llt",
      "mod",
      "nullify",
      "allocate",
      "deallocate",
      "adjustl",
      "adjustr",
      "all",
      "allocated",
      "any",
      "associated",
      "bit_size",
      "btest",
      "ceiling",
      "count",
      "cshift",
      "date_and_time",
      "digits",
      "dot_product",
      "eoshift",
      "epsilon",
      "exponent",
      "floor",
      "fraction",
      "huge",
      "iand",
      "ibclr",
      "ibits",
      "ibset",
      "ieor",
      "ior",
      "ishft",
      "ishftc",
      "lbound",
      "len_trim",
      "matmul",
      "maxexponent",
      "maxloc",
      "maxval",
      "merge",
      "minexponent",
      "minloc",
      "minval",
      "modulo",
      "mvbits",
      "nearest",
      "pack",
      "present",
      "product",
      "radix",
      "random_number",
      "random_seed",
      "range",
      "repeat",
      "reshape",
      "rrspacing",
      "scale",
      "scan",
      "selected_int_kind",
      "selected_real_kind",
      "set_exponent",
      "shape",
      "size",
      "spacing",
      "spread",
      "sum",
      "system_clock",
      "tiny",
      "transpose",
      "trim",
      "ubound",
      "unpack",
      "verify",
      "achar",
      "iachar",
      "transfer",
      "dble",
      "entry",
      "dprod",
      "cpu_time",
      "command_argument_count",
      "get_command",
      "get_command_argument",
      "get_environment_variable",
      "is_iostat_end",
      "ieee_arithmetic",
      "ieee_support_underflow_control",
      "ieee_get_underflow_mode",
      "ieee_set_underflow_mode",
      "is_iostat_eor",
      "move_alloc",
      "new_line",
      "selected_char_kind",
      "same_type_as",
      "extends_type_of",
      "acosh",
      "asinh",
      "atanh",
      "bessel_j0",
      "bessel_j1",
      "bessel_jn",
      "bessel_y0",
      "bessel_y1",
      "bessel_yn",
      "erf",
      "erfc",
      "erfc_scaled",
      "gamma",
      "log_gamma",
      "hypot",
      "norm2",
      "atomic_define",
      "atomic_ref",
      "execute_command_line",
      "leadz",
      "trailz",
      "storage_size",
      "merge_bits",
      "bge",
      "bgt",
      "ble",
      "blt",
      "dshiftl",
      "dshiftr",
      "findloc",
      "iall",
      "iany",
      "iparity",
      "image_index",
      "lcobound",
      "ucobound",
      "maskl",
      "maskr",
      "num_images",
      "parity",
      "popcnt",
      "poppar",
      "shifta",
      "shiftl",
      "shiftr",
      "this_image",
      "sync",
      "change",
      "team",
      "co_broadcast",
      "co_max",
      "co_min",
      "co_sum",
      "co_reduce"
    ];
    return {
      name: "Fortran",
      case_insensitive: true,
      aliases: [
        "f90",
        "f95"
      ],
      keywords: {
        $pattern: /\b[a-z][a-z0-9_]+\b|\.[a-z][a-z0-9_]+\./,
        keyword: KEYWORDS2,
        literal: LITERALS2,
        built_in: BUILT_INS2
      },
      illegal: /\/\*/,
      contains: [
        STRING,
        FUNCTION_DEF,
        // allow `C = value` for assignments so they aren't misdetected
        // as Fortran 77 style comments
        {
          begin: /^C\s*=(?!=)/,
          relevance: 0
        },
        COMMENT2,
        NUMBER
      ]
    };
  }
  function escape$1(value) {
    return new RegExp(value.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"), "m");
  }
  function source$2(re) {
    if (!re)
      return null;
    if (typeof re === "string")
      return re;
    return re.source;
  }
  function lookahead$2(re) {
    return concat$2("(?=", re, ")");
  }
  function concat$2(...args) {
    const joined = args.map((x) => source$2(x)).join("");
    return joined;
  }
  function stripOptionsFromArgs$2(args) {
    const opts = args[args.length - 1];
    if (typeof opts === "object" && opts.constructor === Object) {
      args.splice(args.length - 1, 1);
      return opts;
    } else {
      return {};
    }
  }
  function either$2(...args) {
    const opts = stripOptionsFromArgs$2(args);
    const joined = "(" + (opts.capture ? "" : "?:") + args.map((x) => source$2(x)).join("|") + ")";
    return joined;
  }
  function fsharp(hljs) {
    const KEYWORDS2 = [
      "abstract",
      "and",
      "as",
      "assert",
      "base",
      "begin",
      "class",
      "default",
      "delegate",
      "do",
      "done",
      "downcast",
      "downto",
      "elif",
      "else",
      "end",
      "exception",
      "extern",
      // "false", // literal
      "finally",
      "fixed",
      "for",
      "fun",
      "function",
      "global",
      "if",
      "in",
      "inherit",
      "inline",
      "interface",
      "internal",
      "lazy",
      "let",
      "match",
      "member",
      "module",
      "mutable",
      "namespace",
      "new",
      // "not", // built_in
      // "null", // literal
      "of",
      "open",
      "or",
      "override",
      "private",
      "public",
      "rec",
      "return",
      "static",
      "struct",
      "then",
      "to",
      // "true", // literal
      "try",
      "type",
      "upcast",
      "use",
      "val",
      "void",
      "when",
      "while",
      "with",
      "yield"
    ];
    const BANG_KEYWORD_MODE = {
      // monad builder keywords (matches before non-bang keywords)
      scope: "keyword",
      match: /\b(yield|return|let|do|match|use)!/
    };
    const PREPROCESSOR_KEYWORDS = [
      "if",
      "else",
      "endif",
      "line",
      "nowarn",
      "light",
      "r",
      "i",
      "I",
      "load",
      "time",
      "help",
      "quit"
    ];
    const LITERALS2 = [
      "true",
      "false",
      "null",
      "Some",
      "None",
      "Ok",
      "Error",
      "infinity",
      "infinityf",
      "nan",
      "nanf"
    ];
    const SPECIAL_IDENTIFIERS = [
      "__LINE__",
      "__SOURCE_DIRECTORY__",
      "__SOURCE_FILE__"
    ];
    const KNOWN_TYPES = [
      // basic types
      "bool",
      "byte",
      "sbyte",
      "int8",
      "int16",
      "int32",
      "uint8",
      "uint16",
      "uint32",
      "int",
      "uint",
      "int64",
      "uint64",
      "nativeint",
      "unativeint",
      "decimal",
      "float",
      "double",
      "float32",
      "single",
      "char",
      "string",
      "unit",
      "bigint",
      // other native types or lowercase aliases
      "option",
      "voption",
      "list",
      "array",
      "seq",
      "byref",
      "exn",
      "inref",
      "nativeptr",
      "obj",
      "outref",
      "voidptr",
      // other important FSharp types
      "Result"
    ];
    const BUILTINS = [
      // Somewhat arbitrary list of builtin functions and values.
      // Most of them are declared in Microsoft.FSharp.Core
      // I tried to stay relevant by adding only the most idiomatic
      // and most used symbols that are not already declared as types.
      "not",
      "ref",
      "raise",
      "reraise",
      "dict",
      "readOnlyDict",
      "set",
      "get",
      "enum",
      "sizeof",
      "typeof",
      "typedefof",
      "nameof",
      "nullArg",
      "invalidArg",
      "invalidOp",
      "id",
      "fst",
      "snd",
      "ignore",
      "lock",
      "using",
      "box",
      "unbox",
      "tryUnbox",
      "printf",
      "printfn",
      "sprintf",
      "eprintf",
      "eprintfn",
      "fprintf",
      "fprintfn",
      "failwith",
      "failwithf"
    ];
    const ALL_KEYWORDS = {
      keyword: KEYWORDS2,
      literal: LITERALS2,
      built_in: BUILTINS,
      "variable.constant": SPECIAL_IDENTIFIERS
    };
    const ML_COMMENT = hljs.COMMENT(/\(\*(?!\))/, /\*\)/, {
      contains: ["self"]
    });
    const COMMENT2 = {
      variants: [
        ML_COMMENT,
        hljs.C_LINE_COMMENT_MODE
      ]
    };
    const IDENTIFIER_RE = /[a-zA-Z_](\w|')*/;
    const QUOTED_IDENTIFIER = {
      scope: "variable",
      begin: /``/,
      end: /``/
    };
    const BEGIN_GENERIC_TYPE_SYMBOL_RE = /\B('|\^)/;
    const GENERIC_TYPE_SYMBOL = {
      scope: "symbol",
      variants: [
        // the type name is a quoted identifier:
        { match: concat$2(BEGIN_GENERIC_TYPE_SYMBOL_RE, /``.*?``/) },
        // the type name is a normal identifier (we don't use IDENTIFIER_RE because there cannot be another apostrophe here):
        { match: concat$2(BEGIN_GENERIC_TYPE_SYMBOL_RE, hljs.UNDERSCORE_IDENT_RE) }
      ],
      relevance: 0
    };
    const makeOperatorMode = function({ includeEqual }) {
      let allOperatorChars;
      if (includeEqual)
        allOperatorChars = "!%&*+-/<=>@^|~?";
      else
        allOperatorChars = "!%&*+-/<>@^|~?";
      const OPERATOR_CHARS = Array.from(allOperatorChars);
      const OPERATOR_CHAR_RE = concat$2("[", ...OPERATOR_CHARS.map(escape$1), "]");
      const OPERATOR_CHAR_OR_DOT_RE = either$2(OPERATOR_CHAR_RE, /\./);
      const OPERATOR_FIRST_CHAR_OF_MULTIPLE_RE = concat$2(OPERATOR_CHAR_OR_DOT_RE, lookahead$2(OPERATOR_CHAR_OR_DOT_RE));
      const SYMBOLIC_OPERATOR_RE = either$2(
        concat$2(OPERATOR_FIRST_CHAR_OF_MULTIPLE_RE, OPERATOR_CHAR_OR_DOT_RE, "*"),
        // Matches at least 2 chars operators
        concat$2(OPERATOR_CHAR_RE, "+")
        // Matches at least one char operators
      );
      return {
        scope: "operator",
        match: either$2(
          // symbolic operators:
          SYMBOLIC_OPERATOR_RE,
          // other symbolic keywords:
          // Type casting and conversion operators:
          /:\?>/,
          /:\?/,
          /:>/,
          /:=/,
          // Reference cell assignment
          /::?/,
          // : or ::
          /\$/
        ),
        // A single $ can be used as an operator
        relevance: 0
      };
    };
    const OPERATOR = makeOperatorMode({ includeEqual: true });
    const OPERATOR_WITHOUT_EQUAL = makeOperatorMode({ includeEqual: false });
    const makeTypeAnnotationMode = function(prefix, prefixScope) {
      return {
        begin: concat$2(
          // a type annotation is a
          prefix,
          // should be a colon or the 'of' keyword
          lookahead$2(
            // that has to be followed by
            concat$2(
              /\s*/,
              // optional space
              either$2(
                // then either of:
                /\w/,
                // word
                /'/,
                // generic type name
                /\^/,
                // generic type name
                /#/,
                // flexible type name
                /``/,
                // quoted type name
                /\(/,
                // parens type expression
                /{\|/
                // anonymous type annotation
              )
            )
          )
        ),
        beginScope: prefixScope,
        // BUG: because ending with \n is necessary for some cases, multi-line type annotations are not properly supported.
        // Examples where \n is required at the end:
        // - abstract member definitions in classes: abstract Property : int * string
        // - return type annotations: let f f' = f' () : returnTypeAnnotation
        // - record fields definitions: { A : int \n B : string }
        end: lookahead$2(
          either$2(
            /\n/,
            /=/
          )
        ),
        relevance: 0,
        // we need the known types, and we need the type constraint keywords and literals. e.g.: when 'a : null
        keywords: hljs.inherit(ALL_KEYWORDS, { type: KNOWN_TYPES }),
        contains: [
          COMMENT2,
          GENERIC_TYPE_SYMBOL,
          hljs.inherit(QUOTED_IDENTIFIER, { scope: null }),
          // match to avoid strange patterns inside that may break the parsing
          OPERATOR_WITHOUT_EQUAL
        ]
      };
    };
    const TYPE_ANNOTATION = makeTypeAnnotationMode(/:/, "operator");
    const DISCRIMINATED_UNION_TYPE_ANNOTATION = makeTypeAnnotationMode(/\bof\b/, "keyword");
    const TYPE_DECLARATION = {
      begin: [
        /(^|\s+)/,
        // prevents matching the following: `match s.stype with`
        /type/,
        /\s+/,
        IDENTIFIER_RE
      ],
      beginScope: {
        2: "keyword",
        4: "title.class"
      },
      end: lookahead$2(/\(|=|$/),
      keywords: ALL_KEYWORDS,
      // match keywords in type constraints. e.g.: when 'a : null
      contains: [
        COMMENT2,
        hljs.inherit(QUOTED_IDENTIFIER, { scope: null }),
        // match to avoid strange patterns inside that may break the parsing
        GENERIC_TYPE_SYMBOL,
        {
          // For visual consistency, highlight type brackets as operators.
          scope: "operator",
          match: /<|>/
        },
        TYPE_ANNOTATION
        // generic types can have constraints, which are type annotations. e.g. type MyType<'T when 'T : delegate<obj * string>> =
      ]
    };
    const COMPUTATION_EXPRESSION = {
      // computation expressions:
      scope: "computation-expression",
      // BUG: might conflict with record deconstruction. e.g. let f { Name = name } = name // will highlight f
      match: /\b[_a-z]\w*(?=\s*\{)/
    };
    const PREPROCESSOR = {
      // preprocessor directives and fsi commands:
      begin: [
        /^\s*/,
        concat$2(/#/, either$2(...PREPROCESSOR_KEYWORDS)),
        /\b/
      ],
      beginScope: { 2: "meta" },
      end: lookahead$2(/\s|$/)
    };
    const NUMBER = {
      variants: [
        hljs.BINARY_NUMBER_MODE,
        hljs.C_NUMBER_MODE
      ]
    };
    const QUOTED_STRING = {
      scope: "string",
      begin: /"/,
      end: /"/,
      contains: [
        hljs.BACKSLASH_ESCAPE
      ]
    };
    const VERBATIM_STRING = {
      scope: "string",
      begin: /@"/,
      end: /"/,
      contains: [
        {
          match: /""/
          // escaped "
        },
        hljs.BACKSLASH_ESCAPE
      ]
    };
    const TRIPLE_QUOTED_STRING = {
      scope: "string",
      begin: /"""/,
      end: /"""/,
      relevance: 2
    };
    const SUBST = {
      scope: "subst",
      begin: /\{/,
      end: /\}/,
      keywords: ALL_KEYWORDS
    };
    const INTERPOLATED_STRING = {
      scope: "string",
      begin: /\$"/,
      end: /"/,
      contains: [
        {
          match: /\{\{/
          // escaped {
        },
        {
          match: /\}\}/
          // escaped }
        },
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ]
    };
    const INTERPOLATED_VERBATIM_STRING = {
      scope: "string",
      begin: /(\$@|@\$)"/,
      end: /"/,
      contains: [
        {
          match: /\{\{/
          // escaped {
        },
        {
          match: /\}\}/
          // escaped }
        },
        {
          match: /""/
        },
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ]
    };
    const INTERPOLATED_TRIPLE_QUOTED_STRING = {
      scope: "string",
      begin: /\$"""/,
      end: /"""/,
      contains: [
        {
          match: /\{\{/
          // escaped {
        },
        {
          match: /\}\}/
          // escaped }
        },
        SUBST
      ],
      relevance: 2
    };
    const CHAR_LITERAL = {
      scope: "string",
      match: concat$2(
        /'/,
        either$2(
          /[^\\']/,
          // either a single non escaped char...
          /\\(?:.|\d{3}|x[a-fA-F\d]{2}|u[a-fA-F\d]{4}|U[a-fA-F\d]{8})/
          // ...or an escape sequence
        ),
        /'/
      )
    };
    SUBST.contains = [
      INTERPOLATED_VERBATIM_STRING,
      INTERPOLATED_STRING,
      VERBATIM_STRING,
      QUOTED_STRING,
      CHAR_LITERAL,
      BANG_KEYWORD_MODE,
      COMMENT2,
      QUOTED_IDENTIFIER,
      TYPE_ANNOTATION,
      COMPUTATION_EXPRESSION,
      PREPROCESSOR,
      NUMBER,
      GENERIC_TYPE_SYMBOL,
      OPERATOR
    ];
    const STRING = {
      variants: [
        INTERPOLATED_TRIPLE_QUOTED_STRING,
        INTERPOLATED_VERBATIM_STRING,
        INTERPOLATED_STRING,
        TRIPLE_QUOTED_STRING,
        VERBATIM_STRING,
        QUOTED_STRING,
        CHAR_LITERAL
      ]
    };
    return {
      name: "F#",
      aliases: [
        "fs",
        "f#"
      ],
      keywords: ALL_KEYWORDS,
      illegal: /\/\*/,
      classNameAliases: {
        "computation-expression": "keyword"
      },
      contains: [
        BANG_KEYWORD_MODE,
        STRING,
        COMMENT2,
        QUOTED_IDENTIFIER,
        TYPE_DECLARATION,
        {
          // e.g. [<Attributes("")>] or [<``module``: MyCustomAttributeThatWorksOnModules>]
          // or [<Sealed; NoEquality; NoComparison; CompiledName("FSharpAsync`1")>]
          scope: "meta",
          begin: /\[</,
          end: />\]/,
          relevance: 2,
          contains: [
            QUOTED_IDENTIFIER,
            // can contain any constant value
            TRIPLE_QUOTED_STRING,
            VERBATIM_STRING,
            QUOTED_STRING,
            CHAR_LITERAL,
            NUMBER
          ]
        },
        DISCRIMINATED_UNION_TYPE_ANNOTATION,
        TYPE_ANNOTATION,
        COMPUTATION_EXPRESSION,
        PREPROCESSOR,
        NUMBER,
        GENERIC_TYPE_SYMBOL,
        OPERATOR
      ]
    };
  }
  function gams(hljs) {
    const regex = hljs.regex;
    const KEYWORDS2 = {
      keyword: "abort acronym acronyms alias all and assign binary card diag display else eq file files for free ge gt if integer le loop lt maximizing minimizing model models ne negative no not option options or ord positive prod put putpage puttl repeat sameas semicont semiint smax smin solve sos1 sos2 sum system table then until using while xor yes",
      literal: "eps inf na",
      built_in: "abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power randBinomial randLinear randTriangle round rPower sigmoid sign signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion handleCollect handleDelete handleStatus handleSubmit heapFree heapLimit heapSize jobHandle jobKill jobStatus jobTerminate licenseLevel licenseStatus maxExecError sleep timeClose timeComp timeElapsed timeExec timeStart"
    };
    const PARAMS = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      excludeBegin: true,
      excludeEnd: true
    };
    const SYMBOLS = {
      className: "symbol",
      variants: [
        { begin: /=[lgenxc]=/ },
        { begin: /\$/ }
      ]
    };
    const QSTR = {
      // One-line quoted comment string
      className: "comment",
      variants: [
        {
          begin: "'",
          end: "'"
        },
        {
          begin: '"',
          end: '"'
        }
      ],
      illegal: "\\n",
      contains: [hljs.BACKSLASH_ESCAPE]
    };
    const ASSIGNMENT = {
      begin: "/",
      end: "/",
      keywords: KEYWORDS2,
      contains: [
        QSTR,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        hljs.C_NUMBER_MODE
      ]
    };
    const COMMENT_WORD = /[a-z0-9&#*=?@\\><:,()$[\]_.{}!+%^-]+/;
    const DESCTEXT = {
      // Parameter/set/variable description text
      begin: /[a-z][a-z0-9_]*(\([a-z0-9_, ]*\))?[ \t]+/,
      excludeBegin: true,
      end: "$",
      endsWithParent: true,
      contains: [
        QSTR,
        ASSIGNMENT,
        {
          className: "comment",
          // one comment word, then possibly more
          begin: regex.concat(
            COMMENT_WORD,
            // [ ] because \s would be too broad (matching newlines)
            regex.anyNumberOfTimes(regex.concat(/[ ]+/, COMMENT_WORD))
          ),
          relevance: 0
        }
      ]
    };
    return {
      name: "GAMS",
      aliases: ["gms"],
      case_insensitive: true,
      keywords: KEYWORDS2,
      contains: [
        hljs.COMMENT(/^\$ontext/, /^\$offtext/),
        {
          className: "meta",
          begin: "^\\$[a-z0-9]+",
          end: "$",
          returnBegin: true,
          contains: [
            {
              className: "keyword",
              begin: "^\\$[a-z0-9]+"
            }
          ]
        },
        hljs.COMMENT("^\\*", "$"),
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        // Declarations
        {
          beginKeywords: "set sets parameter parameters variable variables scalar scalars equation equations",
          end: ";",
          contains: [
            hljs.COMMENT("^\\*", "$"),
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.APOS_STRING_MODE,
            ASSIGNMENT,
            DESCTEXT
          ]
        },
        {
          // table environment
          beginKeywords: "table",
          end: ";",
          returnBegin: true,
          contains: [
            {
              // table header row
              beginKeywords: "table",
              end: "$",
              contains: [DESCTEXT]
            },
            hljs.COMMENT("^\\*", "$"),
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.APOS_STRING_MODE,
            hljs.C_NUMBER_MODE
            // Table does not contain DESCTEXT or ASSIGNMENT
          ]
        },
        // Function definitions
        {
          className: "function",
          begin: /^[a-z][a-z0-9_,\-+' ()$]+\.{2}/,
          returnBegin: true,
          contains: [
            {
              // Function title
              className: "title",
              begin: /^[a-z0-9_]+/
            },
            PARAMS,
            SYMBOLS
          ]
        },
        hljs.C_NUMBER_MODE,
        SYMBOLS
      ]
    };
  }
  function gauss(hljs) {
    const KEYWORDS2 = {
      keyword: "bool break call callexe checkinterrupt clear clearg closeall cls comlog compile continue create debug declare delete disable dlibrary dllcall do dos ed edit else elseif enable end endfor endif endp endo errorlog errorlogat expr external fn for format goto gosub graph if keyword let lib library line load loadarray loadexe loadf loadk loadm loadp loads loadx local locate loopnextindex lprint lpwidth lshow matrix msym ndpclex new open output outwidth plot plotsym pop prcsn print printdos proc push retp return rndcon rndmod rndmult rndseed run save saveall screen scroll setarray show sparse stop string struct system trace trap threadfor threadendfor threadbegin threadjoin threadstat threadend until use while winprint ne ge le gt lt and xor or not eq eqv",
      built_in: "abs acf aconcat aeye amax amean AmericanBinomCall AmericanBinomCall_Greeks AmericanBinomCall_ImpVol AmericanBinomPut AmericanBinomPut_Greeks AmericanBinomPut_ImpVol AmericanBSCall AmericanBSCall_Greeks AmericanBSCall_ImpVol AmericanBSPut AmericanBSPut_Greeks AmericanBSPut_ImpVol amin amult annotationGetDefaults annotationSetBkd annotationSetFont annotationSetLineColor annotationSetLineStyle annotationSetLineThickness annualTradingDays arccos arcsin areshape arrayalloc arrayindex arrayinit arraytomat asciiload asclabel astd astds asum atan atan2 atranspose axmargin balance band bandchol bandcholsol bandltsol bandrv bandsolpd bar base10 begwind besselj bessely beta box boxcox cdfBeta cdfBetaInv cdfBinomial cdfBinomialInv cdfBvn cdfBvn2 cdfBvn2e cdfCauchy cdfCauchyInv cdfChic cdfChii cdfChinc cdfChincInv cdfExp cdfExpInv cdfFc cdfFnc cdfFncInv cdfGam cdfGenPareto cdfHyperGeo cdfLaplace cdfLaplaceInv cdfLogistic cdfLogisticInv cdfmControlCreate cdfMvn cdfMvn2e cdfMvnce cdfMvne cdfMvt2e cdfMvtce cdfMvte cdfN cdfN2 cdfNc cdfNegBinomial cdfNegBinomialInv cdfNi cdfPoisson cdfPoissonInv cdfRayleigh cdfRayleighInv cdfTc cdfTci cdfTnc cdfTvn cdfWeibull cdfWeibullInv cdir ceil ChangeDir chdir chiBarSquare chol choldn cholsol cholup chrs close code cols colsf combinate combinated complex con cond conj cons ConScore contour conv convertsatostr convertstrtosa corrm corrms corrvc corrx corrxs cos cosh counts countwts crossprd crout croutp csrcol csrlin csvReadM csvReadSA cumprodc cumsumc curve cvtos datacreate datacreatecomplex datalist dataload dataloop dataopen datasave date datestr datestring datestrymd dayinyr dayofweek dbAddDatabase dbClose dbCommit dbCreateQuery dbExecQuery dbGetConnectOptions dbGetDatabaseName dbGetDriverName dbGetDrivers dbGetHostName dbGetLastErrorNum dbGetLastErrorText dbGetNumericalPrecPolicy dbGetPassword dbGetPort dbGetTableHeaders dbGetTables dbGetUserName dbHasFeature dbIsDriverAvailable dbIsOpen dbIsOpenError dbOpen dbQueryBindValue dbQueryClear dbQueryCols dbQueryExecPrepared dbQueryFetchAllM dbQueryFetchAllSA dbQueryFetchOneM dbQueryFetchOneSA dbQueryFinish dbQueryGetBoundValue dbQueryGetBoundValues dbQueryGetField dbQueryGetLastErrorNum dbQueryGetLastErrorText dbQueryGetLastInsertID dbQueryGetLastQuery dbQueryGetPosition dbQueryIsActive dbQueryIsForwardOnly dbQueryIsNull dbQueryIsSelect dbQueryIsValid dbQueryPrepare dbQueryRows dbQuerySeek dbQuerySeekFirst dbQuerySeekLast dbQuerySeekNext dbQuerySeekPrevious dbQuerySetForwardOnly dbRemoveDatabase dbRollback dbSetConnectOptions dbSetDatabaseName dbSetHostName dbSetNumericalPrecPolicy dbSetPort dbSetUserName dbTransaction DeleteFile delif delrows denseToSp denseToSpRE denToZero design det detl dfft dffti diag diagrv digamma doswin DOSWinCloseall DOSWinOpen dotfeq dotfeqmt dotfge dotfgemt dotfgt dotfgtmt dotfle dotflemt dotflt dotfltmt dotfne dotfnemt draw drop dsCreate dstat dstatmt dstatmtControlCreate dtdate dtday dttime dttodtv dttostr dttoutc dtvnormal dtvtodt dtvtoutc dummy dummybr dummydn eig eigh eighv eigv elapsedTradingDays endwind envget eof eqSolve eqSolvemt eqSolvemtControlCreate eqSolvemtOutCreate eqSolveset erf erfc erfccplx erfcplx error etdays ethsec etstr EuropeanBinomCall EuropeanBinomCall_Greeks EuropeanBinomCall_ImpVol EuropeanBinomPut EuropeanBinomPut_Greeks EuropeanBinomPut_ImpVol EuropeanBSCall EuropeanBSCall_Greeks EuropeanBSCall_ImpVol EuropeanBSPut EuropeanBSPut_Greeks EuropeanBSPut_ImpVol exctsmpl exec execbg exp extern eye fcheckerr fclearerr feq feqmt fflush fft ffti fftm fftmi fftn fge fgemt fgets fgetsa fgetsat fgetst fgt fgtmt fileinfo filesa fle flemt floor flt fltmt fmod fne fnemt fonts fopen formatcv formatnv fputs fputst fseek fstrerror ftell ftocv ftos ftostrC gamma gammacplx gammaii gausset gdaAppend gdaCreate gdaDStat gdaDStatMat gdaGetIndex gdaGetName gdaGetNames gdaGetOrders gdaGetType gdaGetTypes gdaGetVarInfo gdaIsCplx gdaLoad gdaPack gdaRead gdaReadByIndex gdaReadSome gdaReadSparse gdaReadStruct gdaReportVarInfo gdaSave gdaUpdate gdaUpdateAndPack gdaVars gdaWrite gdaWrite32 gdaWriteSome getarray getdims getf getGAUSShome getmatrix getmatrix4D getname getnamef getNextTradingDay getNextWeekDay getnr getorders getpath getPreviousTradingDay getPreviousWeekDay getRow getscalar3D getscalar4D getTrRow getwind glm gradcplx gradMT gradMTm gradMTT gradMTTm gradp graphprt graphset hasimag header headermt hess hessMT hessMTg hessMTgw hessMTm hessMTmw hessMTT hessMTTg hessMTTgw hessMTTm hessMTw hessp hist histf histp hsec imag indcv indexcat indices indices2 indicesf indicesfn indnv indsav integrate1d integrateControlCreate intgrat2 intgrat3 inthp1 inthp2 inthp3 inthp4 inthpControlCreate intquad1 intquad2 intquad3 intrleav intrleavsa intrsect intsimp inv invpd invswp iscplx iscplxf isden isinfnanmiss ismiss key keyav keyw lag lag1 lagn lapEighb lapEighi lapEighvb lapEighvi lapgEig lapgEigh lapgEighv lapgEigv lapgSchur lapgSvdcst lapgSvds lapgSvdst lapSvdcusv lapSvds lapSvdusv ldlp ldlsol linSolve listwise ln lncdfbvn lncdfbvn2 lncdfmvn lncdfn lncdfn2 lncdfnc lnfact lngammacplx lnpdfmvn lnpdfmvt lnpdfn lnpdft loadd loadstruct loadwind loess loessmt loessmtControlCreate log loglog logx logy lower lowmat lowmat1 ltrisol lu lusol machEpsilon make makevars makewind margin matalloc matinit mattoarray maxbytes maxc maxindc maxv maxvec mbesselei mbesselei0 mbesselei1 mbesseli mbesseli0 mbesseli1 meanc median mergeby mergevar minc minindc minv miss missex missrv moment momentd movingave movingaveExpwgt movingaveWgt nextindex nextn nextnevn nextwind ntos null null1 numCombinations ols olsmt olsmtControlCreate olsqr olsqr2 olsqrmt ones optn optnevn orth outtyp pacf packedToSp packr parse pause pdfCauchy pdfChi pdfExp pdfGenPareto pdfHyperGeo pdfLaplace pdfLogistic pdfn pdfPoisson pdfRayleigh pdfWeibull pi pinv pinvmt plotAddArrow plotAddBar plotAddBox plotAddHist plotAddHistF plotAddHistP plotAddPolar plotAddScatter plotAddShape plotAddTextbox plotAddTS plotAddXY plotArea plotBar plotBox plotClearLayout plotContour plotCustomLayout plotGetDefaults plotHist plotHistF plotHistP plotLayout plotLogLog plotLogX plotLogY plotOpenWindow plotPolar plotSave plotScatter plotSetAxesPen plotSetBar plotSetBarFill plotSetBarStacked plotSetBkdColor plotSetFill plotSetGrid plotSetLegend plotSetLineColor plotSetLineStyle plotSetLineSymbol plotSetLineThickness plotSetNewWindow plotSetTitle plotSetWhichYAxis plotSetXAxisShow plotSetXLabel plotSetXRange plotSetXTicInterval plotSetXTicLabel plotSetYAxisShow plotSetYLabel plotSetYRange plotSetZAxisShow plotSetZLabel plotSurface plotTS plotXY polar polychar polyeval polygamma polyint polymake polymat polymroot polymult polyroot pqgwin previousindex princomp printfm printfmt prodc psi putarray putf putvals pvCreate pvGetIndex pvGetParNames pvGetParVector pvLength pvList pvPack pvPacki pvPackm pvPackmi pvPacks pvPacksi pvPacksm pvPacksmi pvPutParVector pvTest pvUnpack QNewton QNewtonmt QNewtonmtControlCreate QNewtonmtOutCreate QNewtonSet QProg QProgmt QProgmtInCreate qqr qqre qqrep qr qre qrep qrsol qrtsol qtyr qtyre qtyrep quantile quantiled qyr qyre qyrep qz rank rankindx readr real reclassify reclassifyCuts recode recserar recsercp recserrc rerun rescale reshape rets rev rfft rffti rfftip rfftn rfftnp rfftp rndBernoulli rndBeta rndBinomial rndCauchy rndChiSquare rndCon rndCreateState rndExp rndGamma rndGeo rndGumbel rndHyperGeo rndi rndKMbeta rndKMgam rndKMi rndKMn rndKMnb rndKMp rndKMu rndKMvm rndLaplace rndLCbeta rndLCgam rndLCi rndLCn rndLCnb rndLCp rndLCu rndLCvm rndLogNorm rndMTu rndMVn rndMVt rndn rndnb rndNegBinomial rndp rndPoisson rndRayleigh rndStateSkip rndu rndvm rndWeibull rndWishart rotater round rows rowsf rref sampleData satostrC saved saveStruct savewind scale scale3d scalerr scalinfnanmiss scalmiss schtoc schur searchsourcepath seekr select selif seqa seqm setdif setdifsa setvars setvwrmode setwind shell shiftr sin singleindex sinh sleep solpd sortc sortcc sortd sorthc sorthcc sortind sortindc sortmc sortr sortrc spBiconjGradSol spChol spConjGradSol spCreate spDenseSubmat spDiagRvMat spEigv spEye spLDL spline spLU spNumNZE spOnes spreadSheetReadM spreadSheetReadSA spreadSheetWrite spScale spSubmat spToDense spTrTDense spTScalar spZeros sqpSolve sqpSolveMT sqpSolveMTControlCreate sqpSolveMTlagrangeCreate sqpSolveMToutCreate sqpSolveSet sqrt statements stdc stdsc stocv stof strcombine strindx strlen strput strrindx strsect strsplit strsplitPad strtodt strtof strtofcplx strtriml strtrimr strtrunc strtruncl strtruncpad strtruncr submat subscat substute subvec sumc sumr surface svd svd1 svd2 svdcusv svds svdusv sysstate tab tan tanh tempname time timedt timestr timeutc title tkf2eps tkf2ps tocart todaydt toeplitz token topolar trapchk trigamma trimr trunc type typecv typef union unionsa uniqindx uniqindxsa unique uniquesa upmat upmat1 upper utctodt utctodtv utrisol vals varCovMS varCovXS varget vargetl varmall varmares varput varputl vartypef vcm vcms vcx vcxs vec vech vecr vector vget view viewxyz vlist vnamecv volume vput vread vtypecv wait waitc walkindex where window writer xlabel xlsGetSheetCount xlsGetSheetSize xlsGetSheetTypes xlsMakeRange xlsReadM xlsReadSA xlsWrite xlsWriteM xlsWriteSA xpnd xtics xy xyz ylabel ytics zeros zeta zlabel ztics cdfEmpirical dot h5create h5open h5read h5readAttribute h5write h5writeAttribute ldl plotAddErrorBar plotAddSurface plotCDFEmpirical plotSetColormap plotSetContourLabels plotSetLegendFont plotSetTextInterpreter plotSetXTicCount plotSetYTicCount plotSetZLevels powerm strjoin sylvester strtrim",
      literal: "DB_AFTER_LAST_ROW DB_ALL_TABLES DB_BATCH_OPERATIONS DB_BEFORE_FIRST_ROW DB_BLOB DB_EVENT_NOTIFICATIONS DB_FINISH_QUERY DB_HIGH_PRECISION DB_LAST_INSERT_ID DB_LOW_PRECISION_DOUBLE DB_LOW_PRECISION_INT32 DB_LOW_PRECISION_INT64 DB_LOW_PRECISION_NUMBERS DB_MULTIPLE_RESULT_SETS DB_NAMED_PLACEHOLDERS DB_POSITIONAL_PLACEHOLDERS DB_PREPARED_QUERIES DB_QUERY_SIZE DB_SIMPLE_LOCKING DB_SYSTEM_TABLES DB_TABLES DB_TRANSACTIONS DB_UNICODE DB_VIEWS __STDIN __STDOUT __STDERR __FILE_DIR"
    };
    const AT_COMMENT_MODE = hljs.COMMENT("@", "@");
    const PREPROCESSOR = {
      className: "meta",
      begin: "#",
      end: "$",
      keywords: { keyword: "define definecs|10 undef ifdef ifndef iflight ifdllcall ifmac ifos2win ifunix else endif lineson linesoff srcfile srcline" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        {
          beginKeywords: "include",
          end: "$",
          keywords: { keyword: "include" },
          contains: [
            {
              className: "string",
              begin: '"',
              end: '"',
              illegal: "\\n"
            }
          ]
        },
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        AT_COMMENT_MODE
      ]
    };
    const STRUCT_TYPE = {
      begin: /\bstruct\s+/,
      end: /\s/,
      keywords: "struct",
      contains: [
        {
          className: "type",
          begin: hljs.UNDERSCORE_IDENT_RE,
          relevance: 0
        }
      ]
    };
    const PARSE_PARAMS = [
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        excludeBegin: true,
        excludeEnd: true,
        endsWithParent: true,
        relevance: 0,
        contains: [
          {
            // dots
            className: "literal",
            begin: /\.\.\./
          },
          hljs.C_NUMBER_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          AT_COMMENT_MODE,
          STRUCT_TYPE
        ]
      }
    ];
    const FUNCTION_DEF = {
      className: "title",
      begin: hljs.UNDERSCORE_IDENT_RE,
      relevance: 0
    };
    const DEFINITION = function(beginKeywords2, end2, inherits) {
      const mode = hljs.inherit(
        {
          className: "function",
          beginKeywords: beginKeywords2,
          end: end2,
          excludeEnd: true,
          contains: [].concat(PARSE_PARAMS)
        },
        {}
      );
      mode.contains.push(FUNCTION_DEF);
      mode.contains.push(hljs.C_NUMBER_MODE);
      mode.contains.push(hljs.C_BLOCK_COMMENT_MODE);
      mode.contains.push(AT_COMMENT_MODE);
      return mode;
    };
    const BUILT_IN_REF = {
      // these are explicitly named internal function calls
      className: "built_in",
      begin: "\\b(" + KEYWORDS2.built_in.split(" ").join("|") + ")\\b"
    };
    const STRING_REF = {
      className: "string",
      begin: '"',
      end: '"',
      contains: [hljs.BACKSLASH_ESCAPE],
      relevance: 0
    };
    const FUNCTION_REF = {
      // className: "fn_ref",
      begin: hljs.UNDERSCORE_IDENT_RE + "\\s*\\(",
      returnBegin: true,
      keywords: KEYWORDS2,
      relevance: 0,
      contains: [
        { beginKeywords: KEYWORDS2.keyword },
        BUILT_IN_REF,
        {
          // ambiguously named function calls get a relevance of 0
          className: "built_in",
          begin: hljs.UNDERSCORE_IDENT_RE,
          relevance: 0
        }
      ]
    };
    const FUNCTION_REF_PARAMS = {
      // className: "fn_ref_params",
      begin: /\(/,
      end: /\)/,
      relevance: 0,
      keywords: {
        built_in: KEYWORDS2.built_in,
        literal: KEYWORDS2.literal
      },
      contains: [
        hljs.C_NUMBER_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        AT_COMMENT_MODE,
        BUILT_IN_REF,
        FUNCTION_REF,
        STRING_REF,
        "self"
      ]
    };
    FUNCTION_REF.contains.push(FUNCTION_REF_PARAMS);
    return {
      name: "GAUSS",
      aliases: ["gss"],
      case_insensitive: true,
      // language is case-insensitive
      keywords: KEYWORDS2,
      illegal: /(\{[%#]|[%#]\}| <- )/,
      contains: [
        hljs.C_NUMBER_MODE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        AT_COMMENT_MODE,
        STRING_REF,
        PREPROCESSOR,
        {
          className: "keyword",
          begin: /\bexternal (matrix|string|array|sparse matrix|struct|proc|keyword|fn)/
        },
        DEFINITION("proc keyword", ";"),
        DEFINITION("fn", "="),
        {
          beginKeywords: "for threadfor",
          end: /;/,
          // end: /\(/,
          relevance: 0,
          contains: [
            hljs.C_BLOCK_COMMENT_MODE,
            AT_COMMENT_MODE,
            FUNCTION_REF_PARAMS
          ]
        },
        {
          // custom method guard
          // excludes method names from keyword processing
          variants: [
            { begin: hljs.UNDERSCORE_IDENT_RE + "\\." + hljs.UNDERSCORE_IDENT_RE },
            { begin: hljs.UNDERSCORE_IDENT_RE + "\\s*=" }
          ],
          relevance: 0
        },
        FUNCTION_REF,
        STRUCT_TYPE
      ]
    };
  }
  function gcode(hljs) {
    const regex = hljs.regex;
    const GCODE_KEYWORDS = {
      $pattern: /[A-Z]+|%/,
      keyword: [
        // conditions
        "THEN",
        "ELSE",
        "ENDIF",
        "IF",
        // controls
        "GOTO",
        "DO",
        "WHILE",
        "WH",
        "END",
        "CALL",
        // scoping
        "SUB",
        "ENDSUB",
        // comparisons
        "EQ",
        "NE",
        "LT",
        "GT",
        "LE",
        "GE",
        "AND",
        "OR",
        "XOR",
        // start/end of program
        "%"
      ],
      built_in: [
        "ATAN",
        "ABS",
        "ACOS",
        "ASIN",
        "COS",
        "EXP",
        "FIX",
        "FUP",
        "ROUND",
        "LN",
        "SIN",
        "SQRT",
        "TAN",
        "EXISTS"
      ]
    };
    const LETTER_BOUNDARY_RE = /\b/;
    function LETTER_BOUNDARY_CALLBACK(matchdata, response) {
      if (matchdata.index === 0) {
        return;
      }
      const charBeforeMatch = matchdata.input[matchdata.index - 1];
      if (charBeforeMatch >= "0" && charBeforeMatch <= "9") {
        return;
      }
      if (charBeforeMatch === "_") {
        return;
      }
      response.ignoreMatch();
    }
    const NUMBER_RE2 = /[+-]?((\.\d+)|(\d+)(\.\d*)?)/;
    const GENERAL_MISC_FUNCTION_RE = /[GM]\s*\d+(\.\d+)?/;
    const TOOLS_RE = /T\s*\d+/;
    const SUBROUTINE_RE = /O\s*\d+/;
    const SUBROUTINE_NAMED_RE = /O<.+>/;
    const AXES_RE = /[ABCUVWXYZ]\s*/;
    const PARAMETERS_RE = /[FHIJKPQRS]\s*/;
    const GCODE_CODE = [
      // comments
      hljs.COMMENT(/\(/, /\)/),
      hljs.COMMENT(/;/, /$/),
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.C_NUMBER_MODE,
      // gcodes
      {
        scope: "title.function",
        variants: [
          // G General functions: G0, G5.1, G5.2, …
          // M Misc functions: M0, M55.6, M199, …
          { match: regex.concat(LETTER_BOUNDARY_RE, GENERAL_MISC_FUNCTION_RE) },
          {
            begin: GENERAL_MISC_FUNCTION_RE,
            "on:begin": LETTER_BOUNDARY_CALLBACK
          },
          // T Tools
          { match: regex.concat(LETTER_BOUNDARY_RE, TOOLS_RE) },
          {
            begin: TOOLS_RE,
            "on:begin": LETTER_BOUNDARY_CALLBACK
          }
        ]
      },
      {
        scope: "symbol",
        variants: [
          // O Subroutine ID: O100, O110, …
          { match: regex.concat(LETTER_BOUNDARY_RE, SUBROUTINE_RE) },
          {
            begin: SUBROUTINE_RE,
            "on:begin": LETTER_BOUNDARY_CALLBACK
          },
          // O Subroutine name: O<some>, …
          { match: regex.concat(LETTER_BOUNDARY_RE, SUBROUTINE_NAMED_RE) },
          {
            begin: SUBROUTINE_NAMED_RE,
            "on:begin": LETTER_BOUNDARY_CALLBACK
          },
          // Checksum at end of line: *71, *199, …
          { match: /\*\s*\d+\s*$/ }
        ]
      },
      {
        scope: "operator",
        // N Line number: N1, N2, N1020, …
        match: /^N\s*\d+/
      },
      {
        scope: "variable",
        match: /-?#\s*\d+/
      },
      {
        scope: "property",
        // Physical axes,
        variants: [
          { match: regex.concat(LETTER_BOUNDARY_RE, AXES_RE, NUMBER_RE2) },
          {
            begin: regex.concat(AXES_RE, NUMBER_RE2),
            "on:begin": LETTER_BOUNDARY_CALLBACK
          }
        ]
      },
      {
        scope: "params",
        // Different types of parameters
        variants: [
          { match: regex.concat(LETTER_BOUNDARY_RE, PARAMETERS_RE, NUMBER_RE2) },
          {
            begin: regex.concat(PARAMETERS_RE, NUMBER_RE2),
            "on:begin": LETTER_BOUNDARY_CALLBACK
          }
        ]
      }
    ];
    return {
      name: "G-code (ISO 6983)",
      aliases: ["nc"],
      // Some implementations (CNC controls) of G-code are interoperable with uppercase and lowercase letters seamlessly.
      // However, most prefer all uppercase and uppercase is customary.
      case_insensitive: true,
      // TODO: post v12 with the use of look-behind this can be enabled
      disableAutodetect: true,
      keywords: GCODE_KEYWORDS,
      contains: GCODE_CODE
    };
  }
  function gherkin(hljs) {
    return {
      name: "Gherkin",
      aliases: ["feature"],
      keywords: "Feature Background Ability Business Need Scenario Scenarios Scenario Outline Scenario Template Examples Given And Then But When",
      contains: [
        {
          className: "symbol",
          begin: "\\*",
          relevance: 0
        },
        {
          className: "meta",
          begin: "@[^@\\s]+"
        },
        {
          begin: "\\|",
          end: "\\|\\w*$",
          contains: [
            {
              className: "string",
              begin: "[^|]+"
            }
          ]
        },
        {
          className: "variable",
          begin: "<",
          end: ">"
        },
        hljs.HASH_COMMENT_MODE,
        {
          className: "string",
          begin: '"""',
          end: '"""'
        },
        hljs.QUOTE_STRING_MODE
      ]
    };
  }
  function glsl(hljs) {
    return {
      name: "GLSL",
      keywords: {
        keyword: (
          // Statements
          "break continue discard do else for if return while switch case default attribute binding buffer ccw centroid centroid varying coherent column_major const cw depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip triangles triangles_adjacency uniform varying vertices volatile writeonly"
        ),
        type: "atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void",
        built_in: (
          // Constants
          "gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow"
        ),
        literal: "true false"
      },
      illegal: '"',
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$"
        }
      ]
    };
  }
  function gml(hljs) {
    const KEYWORDS2 = [
      "#endregion",
      "#macro",
      "#region",
      "and",
      "begin",
      "break",
      "case",
      "constructor",
      "continue",
      "default",
      "delete",
      "div",
      "do",
      "else",
      "end",
      "enum",
      "exit",
      "for",
      "function",
      "globalvar",
      "if",
      "mod",
      "new",
      "not",
      "or",
      "repeat",
      "return",
      "static",
      "switch",
      "then",
      "until",
      "var",
      "while",
      "with",
      "xor"
    ];
    const BUILT_INS2 = [
      "abs",
      "alarm_get",
      "alarm_set",
      "angle_difference",
      "animcurve_channel_evaluate",
      "animcurve_channel_new",
      "animcurve_create",
      "animcurve_destroy",
      "animcurve_exists",
      "animcurve_get",
      "animcurve_get_channel",
      "animcurve_get_channel_index",
      "animcurve_point_new",
      "ansi_char",
      "application_get_position",
      "application_surface_draw_enable",
      "application_surface_enable",
      "application_surface_is_enabled",
      "arccos",
      "arcsin",
      "arctan",
      "arctan2",
      "array_all",
      "array_any",
      "array_concat",
      "array_contains",
      "array_contains_ext",
      "array_copy",
      "array_copy_while",
      "array_create",
      "array_create_ext",
      "array_delete",
      "array_equals",
      "array_filter",
      "array_filter_ext",
      "array_find_index",
      "array_first",
      "array_foreach",
      "array_get",
      "array_get_index",
      "array_insert",
      "array_intersection",
      "array_last",
      "array_length",
      "array_map",
      "array_map_ext",
      "array_pop",
      "array_push",
      "array_reduce",
      "array_resize",
      "array_reverse",
      "array_reverse_ext",
      "array_set",
      "array_shuffle",
      "array_shuffle_ext",
      "array_sort",
      "array_union",
      "array_unique",
      "array_unique_ext",
      "asset_add_tags",
      "asset_clear_tags",
      "asset_get_ids",
      "asset_get_index",
      "asset_get_tags",
      "asset_get_type",
      "asset_has_any_tag",
      "asset_has_tags",
      "asset_remove_tags",
      "audio_bus_clear_emitters",
      "audio_bus_create",
      "audio_bus_get_emitters",
      "audio_channel_num",
      "audio_create_buffer_sound",
      "audio_create_play_queue",
      "audio_create_stream",
      "audio_create_sync_group",
      "audio_debug",
      "audio_destroy_stream",
      "audio_destroy_sync_group",
      "audio_effect_create",
      "audio_emitter_bus",
      "audio_emitter_create",
      "audio_emitter_exists",
      "audio_emitter_falloff",
      "audio_emitter_free",
      "audio_emitter_gain",
      "audio_emitter_get_bus",
      "audio_emitter_get_gain",
      "audio_emitter_get_listener_mask",
      "audio_emitter_get_pitch",
      "audio_emitter_get_vx",
      "audio_emitter_get_vy",
      "audio_emitter_get_vz",
      "audio_emitter_get_x",
      "audio_emitter_get_y",
      "audio_emitter_get_z",
      "audio_emitter_pitch",
      "audio_emitter_position",
      "audio_emitter_set_listener_mask",
      "audio_emitter_velocity",
      "audio_exists",
      "audio_falloff_set_model",
      "audio_free_buffer_sound",
      "audio_free_play_queue",
      "audio_get_listener_count",
      "audio_get_listener_info",
      "audio_get_listener_mask",
      "audio_get_master_gain",
      "audio_get_name",
      "audio_get_recorder_count",
      "audio_get_recorder_info",
      "audio_get_type",
      "audio_group_get_assets",
      "audio_group_get_gain",
      "audio_group_is_loaded",
      "audio_group_load",
      "audio_group_load_progress",
      "audio_group_name",
      "audio_group_set_gain",
      "audio_group_stop_all",
      "audio_group_unload",
      "audio_is_paused",
      "audio_is_playing",
      "audio_listener_get_data",
      "audio_listener_orientation",
      "audio_listener_position",
      "audio_listener_set_orientation",
      "audio_listener_set_position",
      "audio_listener_set_velocity",
      "audio_listener_velocity",
      "audio_master_gain",
      "audio_pause_all",
      "audio_pause_sound",
      "audio_pause_sync_group",
      "audio_play_in_sync_group",
      "audio_play_sound",
      "audio_play_sound_at",
      "audio_play_sound_ext",
      "audio_play_sound_on",
      "audio_queue_sound",
      "audio_resume_all",
      "audio_resume_sound",
      "audio_resume_sync_group",
      "audio_set_listener_mask",
      "audio_set_master_gain",
      "audio_sound_gain",
      "audio_sound_get_audio_group",
      "audio_sound_get_gain",
      "audio_sound_get_listener_mask",
      "audio_sound_get_loop",
      "audio_sound_get_loop_end",
      "audio_sound_get_loop_start",
      "audio_sound_get_pitch",
      "audio_sound_get_track_position",
      "audio_sound_is_playable",
      "audio_sound_length",
      "audio_sound_loop",
      "audio_sound_loop_end",
      "audio_sound_loop_start",
      "audio_sound_pitch",
      "audio_sound_set_listener_mask",
      "audio_sound_set_track_position",
      "audio_start_recording",
      "audio_start_sync_group",
      "audio_stop_all",
      "audio_stop_recording",
      "audio_stop_sound",
      "audio_stop_sync_group",
      "audio_sync_group_debug",
      "audio_sync_group_get_track_pos",
      "audio_sync_group_is_paused",
      "audio_sync_group_is_playing",
      "audio_system_is_available",
      "audio_system_is_initialised",
      "base64_decode",
      "base64_encode",
      "bool",
      "browser_input_capture",
      "buffer_async_group_begin",
      "buffer_async_group_end",
      "buffer_async_group_option",
      "buffer_base64_decode",
      "buffer_base64_decode_ext",
      "buffer_base64_encode",
      "buffer_compress",
      "buffer_copy",
      "buffer_copy_from_vertex_buffer",
      "buffer_copy_stride",
      "buffer_crc32",
      "buffer_create",
      "buffer_create_from_vertex_buffer",
      "buffer_create_from_vertex_buffer_ext",
      "buffer_decompress",
      "buffer_delete",
      "buffer_exists",
      "buffer_fill",
      "buffer_get_address",
      "buffer_get_alignment",
      "buffer_get_size",
      "buffer_get_surface",
      "buffer_get_type",
      "buffer_load",
      "buffer_load_async",
      "buffer_load_ext",
      "buffer_load_partial",
      "buffer_md5",
      "buffer_peek",
      "buffer_poke",
      "buffer_read",
      "buffer_resize",
      "buffer_save",
      "buffer_save_async",
      "buffer_save_ext",
      "buffer_seek",
      "buffer_set_surface",
      "buffer_set_used_size",
      "buffer_sha1",
      "buffer_sizeof",
      "buffer_tell",
      "buffer_write",
      "call_cancel",
      "call_later",
      "camera_apply",
      "camera_copy_transforms",
      "camera_create",
      "camera_create_view",
      "camera_destroy",
      "camera_get_active",
      "camera_get_begin_script",
      "camera_get_default",
      "camera_get_end_script",
      "camera_get_proj_mat",
      "camera_get_update_script",
      "camera_get_view_angle",
      "camera_get_view_border_x",
      "camera_get_view_border_y",
      "camera_get_view_height",
      "camera_get_view_mat",
      "camera_get_view_speed_x",
      "camera_get_view_speed_y",
      "camera_get_view_target",
      "camera_get_view_width",
      "camera_get_view_x",
      "camera_get_view_y",
      "camera_set_begin_script",
      "camera_set_default",
      "camera_set_end_script",
      "camera_set_proj_mat",
      "camera_set_update_script",
      "camera_set_view_angle",
      "camera_set_view_border",
      "camera_set_view_mat",
      "camera_set_view_pos",
      "camera_set_view_size",
      "camera_set_view_speed",
      "camera_set_view_target",
      "ceil",
      "choose",
      "chr",
      "clamp",
      "clickable_add",
      "clickable_add_ext",
      "clickable_change",
      "clickable_change_ext",
      "clickable_delete",
      "clickable_exists",
      "clickable_set_style",
      "clipboard_get_text",
      "clipboard_has_text",
      "clipboard_set_text",
      "cloud_file_save",
      "cloud_string_save",
      "cloud_synchronise",
      "code_is_compiled",
      "collision_circle",
      "collision_circle_list",
      "collision_ellipse",
      "collision_ellipse_list",
      "collision_line",
      "collision_line_list",
      "collision_point",
      "collision_point_list",
      "collision_rectangle",
      "collision_rectangle_list",
      "color_get_blue",
      "color_get_green",
      "color_get_hue",
      "color_get_red",
      "color_get_saturation",
      "color_get_value",
      "colour_get_blue",
      "colour_get_green",
      "colour_get_hue",
      "colour_get_red",
      "colour_get_saturation",
      "colour_get_value",
      "cos",
      "darccos",
      "darcsin",
      "darctan",
      "darctan2",
      "date_compare_date",
      "date_compare_datetime",
      "date_compare_time",
      "date_create_datetime",
      "date_current_datetime",
      "date_date_of",
      "date_date_string",
      "date_datetime_string",
      "date_day_span",
      "date_days_in_month",
      "date_days_in_year",
      "date_get_day",
      "date_get_day_of_year",
      "date_get_hour",
      "date_get_hour_of_year",
      "date_get_minute",
      "date_get_minute_of_year",
      "date_get_month",
      "date_get_second",
      "date_get_second_of_year",
      "date_get_timezone",
      "date_get_week",
      "date_get_weekday",
      "date_get_year",
      "date_hour_span",
      "date_inc_day",
      "date_inc_hour",
      "date_inc_minute",
      "date_inc_month",
      "date_inc_second",
      "date_inc_week",
      "date_inc_year",
      "date_is_today",
      "date_leap_year",
      "date_minute_span",
      "date_month_span",
      "date_second_span",
      "date_set_timezone",
      "date_time_of",
      "date_time_string",
      "date_valid_datetime",
      "date_week_span",
      "date_year_span",
      "db_to_lin",
      "dbg_add_font_glyphs",
      "dbg_button",
      "dbg_checkbox",
      "dbg_color",
      "dbg_colour",
      "dbg_drop_down",
      "dbg_same_line",
      "dbg_section",
      "dbg_section_delete",
      "dbg_section_exists",
      "dbg_slider",
      "dbg_slider_int",
      "dbg_sprite",
      "dbg_text",
      "dbg_text_input",
      "dbg_view",
      "dbg_view_delete",
      "dbg_view_exists",
      "dbg_watch",
      "dcos",
      "debug_event",
      "debug_get_callstack",
      "degtorad",
      "device_get_tilt_x",
      "device_get_tilt_y",
      "device_get_tilt_z",
      "device_is_keypad_open",
      "device_mouse_check_button",
      "device_mouse_check_button_pressed",
      "device_mouse_check_button_released",
      "device_mouse_dbclick_enable",
      "device_mouse_raw_x",
      "device_mouse_raw_y",
      "device_mouse_x",
      "device_mouse_x_to_gui",
      "device_mouse_y",
      "device_mouse_y_to_gui",
      "directory_create",
      "directory_destroy",
      "directory_exists",
      "display_get_dpi_x",
      "display_get_dpi_y",
      "display_get_frequency",
      "display_get_gui_height",
      "display_get_gui_width",
      "display_get_height",
      "display_get_orientation",
      "display_get_sleep_margin",
      "display_get_timing_method",
      "display_get_width",
      "display_mouse_get_x",
      "display_mouse_get_y",
      "display_mouse_set",
      "display_reset",
      "display_set_gui_maximise",
      "display_set_gui_maximize",
      "display_set_gui_size",
      "display_set_sleep_margin",
      "display_set_timing_method",
      "display_set_ui_visibility",
      "distance_to_object",
      "distance_to_point",
      "dot_product",
      "dot_product_3d",
      "dot_product_3d_normalised",
      "dot_product_3d_normalized",
      "dot_product_normalised",
      "dot_product_normalized",
      "draw_arrow",
      "draw_button",
      "draw_circle",
      "draw_circle_color",
      "draw_circle_colour",
      "draw_clear",
      "draw_clear_alpha",
      "draw_ellipse",
      "draw_ellipse_color",
      "draw_ellipse_colour",
      "draw_enable_drawevent",
      "draw_enable_skeleton_blendmodes",
      "draw_enable_swf_aa",
      "draw_flush",
      "draw_get_alpha",
      "draw_get_color",
      "draw_get_colour",
      "draw_get_enable_skeleton_blendmodes",
      "draw_get_font",
      "draw_get_halign",
      "draw_get_lighting",
      "draw_get_swf_aa_level",
      "draw_get_valign",
      "draw_getpixel",
      "draw_getpixel_ext",
      "draw_healthbar",
      "draw_highscore",
      "draw_light_define_ambient",
      "draw_light_define_direction",
      "draw_light_define_point",
      "draw_light_enable",
      "draw_light_get",
      "draw_light_get_ambient",
      "draw_line",
      "draw_line_color",
      "draw_line_colour",
      "draw_line_width",
      "draw_line_width_color",
      "draw_line_width_colour",
      "draw_path",
      "draw_point",
      "draw_point_color",
      "draw_point_colour",
      "draw_primitive_begin",
      "draw_primitive_begin_texture",
      "draw_primitive_end",
      "draw_rectangle",
      "draw_rectangle_color",
      "draw_rectangle_colour",
      "draw_roundrect",
      "draw_roundrect_color",
      "draw_roundrect_color_ext",
      "draw_roundrect_colour",
      "draw_roundrect_colour_ext",
      "draw_roundrect_ext",
      "draw_self",
      "draw_set_alpha",
      "draw_set_circle_precision",
      "draw_set_color",
      "draw_set_colour",
      "draw_set_font",
      "draw_set_halign",
      "draw_set_lighting",
      "draw_set_swf_aa_level",
      "draw_set_valign",
      "draw_skeleton",
      "draw_skeleton_collision",
      "draw_skeleton_instance",
      "draw_skeleton_time",
      "draw_sprite",
      "draw_sprite_ext",
      "draw_sprite_general",
      "draw_sprite_part",
      "draw_sprite_part_ext",
      "draw_sprite_pos",
      "draw_sprite_stretched",
      "draw_sprite_stretched_ext",
      "draw_sprite_tiled",
      "draw_sprite_tiled_ext",
      "draw_surface",
      "draw_surface_ext",
      "draw_surface_general",
      "draw_surface_part",
      "draw_surface_part_ext",
      "draw_surface_stretched",
      "draw_surface_stretched_ext",
      "draw_surface_tiled",
      "draw_surface_tiled_ext",
      "draw_text",
      "draw_text_color",
      "draw_text_colour",
      "draw_text_ext",
      "draw_text_ext_color",
      "draw_text_ext_colour",
      "draw_text_ext_transformed",
      "draw_text_ext_transformed_color",
      "draw_text_ext_transformed_colour",
      "draw_text_transformed",
      "draw_text_transformed_color",
      "draw_text_transformed_colour",
      "draw_texture_flush",
      "draw_tile",
      "draw_tilemap",
      "draw_triangle",
      "draw_triangle_color",
      "draw_triangle_colour",
      "draw_vertex",
      "draw_vertex_color",
      "draw_vertex_colour",
      "draw_vertex_texture",
      "draw_vertex_texture_color",
      "draw_vertex_texture_colour",
      "ds_exists",
      "ds_grid_add",
      "ds_grid_add_disk",
      "ds_grid_add_grid_region",
      "ds_grid_add_region",
      "ds_grid_clear",
      "ds_grid_copy",
      "ds_grid_create",
      "ds_grid_destroy",
      "ds_grid_get",
      "ds_grid_get_disk_max",
      "ds_grid_get_disk_mean",
      "ds_grid_get_disk_min",
      "ds_grid_get_disk_sum",
      "ds_grid_get_max",
      "ds_grid_get_mean",
      "ds_grid_get_min",
      "ds_grid_get_sum",
      "ds_grid_height",
      "ds_grid_multiply",
      "ds_grid_multiply_disk",
      "ds_grid_multiply_grid_region",
      "ds_grid_multiply_region",
      "ds_grid_read",
      "ds_grid_resize",
      "ds_grid_set",
      "ds_grid_set_disk",
      "ds_grid_set_grid_region",
      "ds_grid_set_region",
      "ds_grid_shuffle",
      "ds_grid_sort",
      "ds_grid_to_mp_grid",
      "ds_grid_value_disk_exists",
      "ds_grid_value_disk_x",
      "ds_grid_value_disk_y",
      "ds_grid_value_exists",
      "ds_grid_value_x",
      "ds_grid_value_y",
      "ds_grid_width",
      "ds_grid_write",
      "ds_list_add",
      "ds_list_clear",
      "ds_list_copy",
      "ds_list_create",
      "ds_list_delete",
      "ds_list_destroy",
      "ds_list_empty",
      "ds_list_find_index",
      "ds_list_find_value",
      "ds_list_insert",
      "ds_list_is_list",
      "ds_list_is_map",
      "ds_list_mark_as_list",
      "ds_list_mark_as_map",
      "ds_list_read",
      "ds_list_replace",
      "ds_list_set",
      "ds_list_shuffle",
      "ds_list_size",
      "ds_list_sort",
      "ds_list_write",
      "ds_map_add",
      "ds_map_add_list",
      "ds_map_add_map",
      "ds_map_clear",
      "ds_map_copy",
      "ds_map_create",
      "ds_map_delete",
      "ds_map_destroy",
      "ds_map_empty",
      "ds_map_exists",
      "ds_map_find_first",
      "ds_map_find_last",
      "ds_map_find_next",
      "ds_map_find_previous",
      "ds_map_find_value",
      "ds_map_is_list",
      "ds_map_is_map",
      "ds_map_keys_to_array",
      "ds_map_read",
      "ds_map_replace",
      "ds_map_replace_list",
      "ds_map_replace_map",
      "ds_map_secure_load",
      "ds_map_secure_load_buffer",
      "ds_map_secure_save",
      "ds_map_secure_save_buffer",
      "ds_map_set",
      "ds_map_size",
      "ds_map_values_to_array",
      "ds_map_write",
      "ds_priority_add",
      "ds_priority_change_priority",
      "ds_priority_clear",
      "ds_priority_copy",
      "ds_priority_create",
      "ds_priority_delete_max",
      "ds_priority_delete_min",
      "ds_priority_delete_value",
      "ds_priority_destroy",
      "ds_priority_empty",
      "ds_priority_find_max",
      "ds_priority_find_min",
      "ds_priority_find_priority",
      "ds_priority_read",
      "ds_priority_size",
      "ds_priority_write",
      "ds_queue_clear",
      "ds_queue_copy",
      "ds_queue_create",
      "ds_queue_dequeue",
      "ds_queue_destroy",
      "ds_queue_empty",
      "ds_queue_enqueue",
      "ds_queue_head",
      "ds_queue_read",
      "ds_queue_size",
      "ds_queue_tail",
      "ds_queue_write",
      "ds_set_precision",
      "ds_stack_clear",
      "ds_stack_copy",
      "ds_stack_create",
      "ds_stack_destroy",
      "ds_stack_empty",
      "ds_stack_pop",
      "ds_stack_push",
      "ds_stack_read",
      "ds_stack_size",
      "ds_stack_top",
      "ds_stack_write",
      "dsin",
      "dtan",
      "effect_clear",
      "effect_create_above",
      "effect_create_below",
      "effect_create_depth",
      "effect_create_layer",
      "environment_get_variable",
      "event_inherited",
      "event_perform",
      "event_perform_async",
      "event_perform_object",
      "event_user",
      "exception_unhandled_handler",
      "exp",
      "extension_exists",
      "extension_get_option_count",
      "extension_get_option_names",
      "extension_get_option_value",
      "extension_get_options",
      "extension_get_version",
      "external_call",
      "external_define",
      "external_free",
      "file_attributes",
      "file_bin_close",
      "file_bin_open",
      "file_bin_position",
      "file_bin_read_byte",
      "file_bin_rewrite",
      "file_bin_seek",
      "file_bin_size",
      "file_bin_write_byte",
      "file_copy",
      "file_delete",
      "file_exists",
      "file_find_close",
      "file_find_first",
      "file_find_next",
      "file_rename",
      "file_text_close",
      "file_text_eof",
      "file_text_eoln",
      "file_text_open_append",
      "file_text_open_from_string",
      "file_text_open_read",
      "file_text_open_write",
      "file_text_read_real",
      "file_text_read_string",
      "file_text_readln",
      "file_text_write_real",
      "file_text_write_string",
      "file_text_writeln",
      "filename_change_ext",
      "filename_dir",
      "filename_drive",
      "filename_ext",
      "filename_name",
      "filename_path",
      "floor",
      "font_add",
      "font_add_enable_aa",
      "font_add_get_enable_aa",
      "font_add_sprite",
      "font_add_sprite_ext",
      "font_cache_glyph",
      "font_delete",
      "font_enable_effects",
      "font_enable_sdf",
      "font_exists",
      "font_get_bold",
      "font_get_first",
      "font_get_fontname",
      "font_get_info",
      "font_get_italic",
      "font_get_last",
      "font_get_name",
      "font_get_sdf_enabled",
      "font_get_sdf_spread",
      "font_get_size",
      "font_get_texture",
      "font_get_uvs",
      "font_replace_sprite",
      "font_replace_sprite_ext",
      "font_sdf_spread",
      "font_set_cache_size",
      "frac",
      "fx_create",
      "fx_get_name",
      "fx_get_parameter",
      "fx_get_parameter_names",
      "fx_get_parameters",
      "fx_get_single_layer",
      "fx_set_parameter",
      "fx_set_parameters",
      "fx_set_single_layer",
      "game_change",
      "game_end",
      "game_get_speed",
      "game_load",
      "game_load_buffer",
      "game_restart",
      "game_save",
      "game_save_buffer",
      "game_set_speed",
      "gamepad_axis_count",
      "gamepad_axis_value",
      "gamepad_button_check",
      "gamepad_button_check_pressed",
      "gamepad_button_check_released",
      "gamepad_button_count",
      "gamepad_button_value",
      "gamepad_get_axis_deadzone",
      "gamepad_get_button_threshold",
      "gamepad_get_description",
      "gamepad_get_device_count",
      "gamepad_get_guid",
      "gamepad_get_mapping",
      "gamepad_get_option",
      "gamepad_hat_count",
      "gamepad_hat_value",
      "gamepad_is_connected",
      "gamepad_is_supported",
      "gamepad_remove_mapping",
      "gamepad_set_axis_deadzone",
      "gamepad_set_button_threshold",
      "gamepad_set_color",
      "gamepad_set_colour",
      "gamepad_set_option",
      "gamepad_set_vibration",
      "gamepad_test_mapping",
      "gc_collect",
      "gc_enable",
      "gc_get_stats",
      "gc_get_target_frame_time",
      "gc_is_enabled",
      "gc_target_frame_time",
      "gesture_double_tap_distance",
      "gesture_double_tap_time",
      "gesture_drag_distance",
      "gesture_drag_time",
      "gesture_flick_speed",
      "gesture_get_double_tap_distance",
      "gesture_get_double_tap_time",
      "gesture_get_drag_distance",
      "gesture_get_drag_time",
      "gesture_get_flick_speed",
      "gesture_get_pinch_angle_away",
      "gesture_get_pinch_angle_towards",
      "gesture_get_pinch_distance",
      "gesture_get_rotate_angle",
      "gesture_get_rotate_time",
      "gesture_get_tap_count",
      "gesture_pinch_angle_away",
      "gesture_pinch_angle_towards",
      "gesture_pinch_distance",
      "gesture_rotate_angle",
      "gesture_rotate_time",
      "gesture_tap_count",
      "get_integer",
      "get_integer_async",
      "get_login_async",
      "get_open_filename",
      "get_open_filename_ext",
      "get_save_filename",
      "get_save_filename_ext",
      "get_string",
      "get_string_async",
      "get_timer",
      "gif_add_surface",
      "gif_open",
      "gif_save",
      "gif_save_buffer",
      "gml_pragma",
      "gml_release_mode",
      "gpu_get_alphatestenable",
      "gpu_get_alphatestref",
      "gpu_get_blendenable",
      "gpu_get_blendmode",
      "gpu_get_blendmode_dest",
      "gpu_get_blendmode_destalpha",
      "gpu_get_blendmode_ext",
      "gpu_get_blendmode_ext_sepalpha",
      "gpu_get_blendmode_src",
      "gpu_get_blendmode_srcalpha",
      "gpu_get_colorwriteenable",
      "gpu_get_colourwriteenable",
      "gpu_get_cullmode",
      "gpu_get_depth",
      "gpu_get_fog",
      "gpu_get_state",
      "gpu_get_tex_filter",
      "gpu_get_tex_filter_ext",
      "gpu_get_tex_max_aniso",
      "gpu_get_tex_max_aniso_ext",
      "gpu_get_tex_max_mip",
      "gpu_get_tex_max_mip_ext",
      "gpu_get_tex_min_mip",
      "gpu_get_tex_min_mip_ext",
      "gpu_get_tex_mip_bias",
      "gpu_get_tex_mip_bias_ext",
      "gpu_get_tex_mip_enable",
      "gpu_get_tex_mip_enable_ext",
      "gpu_get_tex_mip_filter",
      "gpu_get_tex_mip_filter_ext",
      "gpu_get_tex_repeat",
      "gpu_get_tex_repeat_ext",
      "gpu_get_texfilter",
      "gpu_get_texfilter_ext",
      "gpu_get_texrepeat",
      "gpu_get_texrepeat_ext",
      "gpu_get_zfunc",
      "gpu_get_ztestenable",
      "gpu_get_zwriteenable",
      "gpu_pop_state",
      "gpu_push_state",
      "gpu_set_alphatestenable",
      "gpu_set_alphatestref",
      "gpu_set_blendenable",
      "gpu_set_blendmode",
      "gpu_set_blendmode_ext",
      "gpu_set_blendmode_ext_sepalpha",
      "gpu_set_colorwriteenable",
      "gpu_set_colourwriteenable",
      "gpu_set_cullmode",
      "gpu_set_depth",
      "gpu_set_fog",
      "gpu_set_state",
      "gpu_set_tex_filter",
      "gpu_set_tex_filter_ext",
      "gpu_set_tex_max_aniso",
      "gpu_set_tex_max_aniso_ext",
      "gpu_set_tex_max_mip",
      "gpu_set_tex_max_mip_ext",
      "gpu_set_tex_min_mip",
      "gpu_set_tex_min_mip_ext",
      "gpu_set_tex_mip_bias",
      "gpu_set_tex_mip_bias_ext",
      "gpu_set_tex_mip_enable",
      "gpu_set_tex_mip_enable_ext",
      "gpu_set_tex_mip_filter",
      "gpu_set_tex_mip_filter_ext",
      "gpu_set_tex_repeat",
      "gpu_set_tex_repeat_ext",
      "gpu_set_texfilter",
      "gpu_set_texfilter_ext",
      "gpu_set_texrepeat",
      "gpu_set_texrepeat_ext",
      "gpu_set_zfunc",
      "gpu_set_ztestenable",
      "gpu_set_zwriteenable",
      "handle_parse",
      "highscore_add",
      "highscore_clear",
      "highscore_name",
      "highscore_value",
      "http_get",
      "http_get_file",
      "http_get_request_crossorigin",
      "http_post_string",
      "http_request",
      "http_set_request_crossorigin",
      "iap_acquire",
      "iap_activate",
      "iap_consume",
      "iap_enumerate_products",
      "iap_product_details",
      "iap_purchase_details",
      "iap_restore_all",
      "iap_status",
      "ini_close",
      "ini_key_delete",
      "ini_key_exists",
      "ini_open",
      "ini_open_from_string",
      "ini_read_real",
      "ini_read_string",
      "ini_section_delete",
      "ini_section_exists",
      "ini_write_real",
      "ini_write_string",
      "instance_activate_all",
      "instance_activate_layer",
      "instance_activate_object",
      "instance_activate_region",
      "instance_change",
      "instance_copy",
      "instance_create_depth",
      "instance_create_layer",
      "instance_deactivate_all",
      "instance_deactivate_layer",
      "instance_deactivate_object",
      "instance_deactivate_region",
      "instance_destroy",
      "instance_exists",
      "instance_find",
      "instance_furthest",
      "instance_id_get",
      "instance_nearest",
      "instance_number",
      "instance_place",
      "instance_place_list",
      "instance_position",
      "instance_position_list",
      "instanceof",
      "int64",
      "io_clear",
      "irandom",
      "irandom_range",
      "is_array",
      "is_bool",
      "is_callable",
      "is_debug_overlay_open",
      "is_handle",
      "is_infinity",
      "is_instanceof",
      "is_int32",
      "is_int64",
      "is_keyboard_used_debug_overlay",
      "is_method",
      "is_mouse_over_debug_overlay",
      "is_nan",
      "is_numeric",
      "is_ptr",
      "is_real",
      "is_string",
      "is_struct",
      "is_undefined",
      "json_decode",
      "json_encode",
      "json_parse",
      "json_stringify",
      "keyboard_check",
      "keyboard_check_direct",
      "keyboard_check_pressed",
      "keyboard_check_released",
      "keyboard_clear",
      "keyboard_get_map",
      "keyboard_get_numlock",
      "keyboard_key_press",
      "keyboard_key_release",
      "keyboard_set_map",
      "keyboard_set_numlock",
      "keyboard_unset_map",
      "keyboard_virtual_height",
      "keyboard_virtual_hide",
      "keyboard_virtual_show",
      "keyboard_virtual_status",
      "layer_add_instance",
      "layer_background_alpha",
      "layer_background_blend",
      "layer_background_change",
      "layer_background_create",
      "layer_background_destroy",
      "layer_background_exists",
      "layer_background_get_alpha",
      "layer_background_get_blend",
      "layer_background_get_htiled",
      "layer_background_get_id",
      "layer_background_get_index",
      "layer_background_get_speed",
      "layer_background_get_sprite",
      "layer_background_get_stretch",
      "layer_background_get_visible",
      "layer_background_get_vtiled",
      "layer_background_get_xscale",
      "layer_background_get_yscale",
      "layer_background_htiled",
      "layer_background_index",
      "layer_background_speed",
      "layer_background_sprite",
      "layer_background_stretch",
      "layer_background_visible",
      "layer_background_vtiled",
      "layer_background_xscale",
      "layer_background_yscale",
      "layer_clear_fx",
      "layer_create",
      "layer_depth",
      "layer_destroy",
      "layer_destroy_instances",
      "layer_element_move",
      "layer_enable_fx",
      "layer_exists",
      "layer_force_draw_depth",
      "layer_fx_is_enabled",
      "layer_get_all",
      "layer_get_all_elements",
      "layer_get_depth",
      "layer_get_element_layer",
      "layer_get_element_type",
      "layer_get_forced_depth",
      "layer_get_fx",
      "layer_get_hspeed",
      "layer_get_id",
      "layer_get_id_at_depth",
      "layer_get_name",
      "layer_get_script_begin",
      "layer_get_script_end",
      "layer_get_shader",
      "layer_get_target_room",
      "layer_get_visible",
      "layer_get_vspeed",
      "layer_get_x",
      "layer_get_y",
      "layer_has_instance",
      "layer_hspeed",
      "layer_instance_get_instance",
      "layer_is_draw_depth_forced",
      "layer_reset_target_room",
      "layer_script_begin",
      "layer_script_end",
      "layer_sequence_angle",
      "layer_sequence_create",
      "layer_sequence_destroy",
      "layer_sequence_exists",
      "layer_sequence_get_angle",
      "layer_sequence_get_headdir",
      "layer_sequence_get_headpos",
      "layer_sequence_get_instance",
      "layer_sequence_get_length",
      "layer_sequence_get_sequence",
      "layer_sequence_get_speedscale",
      "layer_sequence_get_x",
      "layer_sequence_get_xscale",
      "layer_sequence_get_y",
      "layer_sequence_get_yscale",
      "layer_sequence_headdir",
      "layer_sequence_headpos",
      "layer_sequence_is_finished",
      "layer_sequence_is_paused",
      "layer_sequence_pause",
      "layer_sequence_play",
      "layer_sequence_speedscale",
      "layer_sequence_x",
      "layer_sequence_xscale",
      "layer_sequence_y",
      "layer_sequence_yscale",
      "layer_set_fx",
      "layer_set_target_room",
      "layer_set_visible",
      "layer_shader",
      "layer_sprite_alpha",
      "layer_sprite_angle",
      "layer_sprite_blend",
      "layer_sprite_change",
      "layer_sprite_create",
      "layer_sprite_destroy",
      "layer_sprite_exists",
      "layer_sprite_get_alpha",
      "layer_sprite_get_angle",
      "layer_sprite_get_blend",
      "layer_sprite_get_id",
      "layer_sprite_get_index",
      "layer_sprite_get_speed",
      "layer_sprite_get_sprite",
      "layer_sprite_get_x",
      "layer_sprite_get_xscale",
      "layer_sprite_get_y",
      "layer_sprite_get_yscale",
      "layer_sprite_index",
      "layer_sprite_speed",
      "layer_sprite_x",
      "layer_sprite_xscale",
      "layer_sprite_y",
      "layer_sprite_yscale",
      "layer_tile_alpha",
      "layer_tile_blend",
      "layer_tile_change",
      "layer_tile_create",
      "layer_tile_destroy",
      "layer_tile_exists",
      "layer_tile_get_alpha",
      "layer_tile_get_blend",
      "layer_tile_get_region",
      "layer_tile_get_sprite",
      "layer_tile_get_visible",
      "layer_tile_get_x",
      "layer_tile_get_xscale",
      "layer_tile_get_y",
      "layer_tile_get_yscale",
      "layer_tile_region",
      "layer_tile_visible",
      "layer_tile_x",
      "layer_tile_xscale",
      "layer_tile_y",
      "layer_tile_yscale",
      "layer_tilemap_create",
      "layer_tilemap_destroy",
      "layer_tilemap_exists",
      "layer_tilemap_get_id",
      "layer_vspeed",
      "layer_x",
      "layer_y",
      "lengthdir_x",
      "lengthdir_y",
      "lerp",
      "lin_to_db",
      "ln",
      "load_csv",
      "log10",
      "log2",
      "logn",
      "make_color_hsv",
      "make_color_rgb",
      "make_colour_hsv",
      "make_colour_rgb",
      "math_get_epsilon",
      "math_set_epsilon",
      "matrix_build",
      "matrix_build_identity",
      "matrix_build_lookat",
      "matrix_build_projection_ortho",
      "matrix_build_projection_perspective",
      "matrix_build_projection_perspective_fov",
      "matrix_get",
      "matrix_multiply",
      "matrix_set",
      "matrix_stack_clear",
      "matrix_stack_is_empty",
      "matrix_stack_pop",
      "matrix_stack_push",
      "matrix_stack_set",
      "matrix_stack_top",
      "matrix_transform_vertex",
      "max",
      "md5_file",
      "md5_string_unicode",
      "md5_string_utf8",
      "mean",
      "median",
      "merge_color",
      "merge_colour",
      "method",
      "method_call",
      "method_get_index",
      "method_get_self",
      "min",
      "motion_add",
      "motion_set",
      "mouse_check_button",
      "mouse_check_button_pressed",
      "mouse_check_button_released",
      "mouse_clear",
      "mouse_wheel_down",
      "mouse_wheel_up",
      "move_and_collide",
      "move_bounce_all",
      "move_bounce_solid",
      "move_contact_all",
      "move_contact_solid",
      "move_outside_all",
      "move_outside_solid",
      "move_random",
      "move_snap",
      "move_towards_point",
      "move_wrap",
      "mp_grid_add_cell",
      "mp_grid_add_instances",
      "mp_grid_add_rectangle",
      "mp_grid_clear_all",
      "mp_grid_clear_cell",
      "mp_grid_clear_rectangle",
      "mp_grid_create",
      "mp_grid_destroy",
      "mp_grid_draw",
      "mp_grid_get_cell",
      "mp_grid_path",
      "mp_grid_to_ds_grid",
      "mp_linear_path",
      "mp_linear_path_object",
      "mp_linear_step",
      "mp_linear_step_object",
      "mp_potential_path",
      "mp_potential_path_object",
      "mp_potential_settings",
      "mp_potential_step",
      "mp_potential_step_object",
      "nameof",
      "network_connect",
      "network_connect_async",
      "network_connect_raw",
      "network_connect_raw_async",
      "network_create_server",
      "network_create_server_raw",
      "network_create_socket",
      "network_create_socket_ext",
      "network_destroy",
      "network_resolve",
      "network_send_broadcast",
      "network_send_packet",
      "network_send_raw",
      "network_send_udp",
      "network_send_udp_raw",
      "network_set_config",
      "network_set_timeout",
      "object_exists",
      "object_get_mask",
      "object_get_name",
      "object_get_parent",
      "object_get_persistent",
      "object_get_physics",
      "object_get_solid",
      "object_get_sprite",
      "object_get_visible",
      "object_is_ancestor",
      "object_set_mask",
      "object_set_persistent",
      "object_set_solid",
      "object_set_sprite",
      "object_set_visible",
      "ord",
      "os_check_permission",
      "os_get_config",
      "os_get_info",
      "os_get_language",
      "os_get_region",
      "os_is_network_connected",
      "os_is_paused",
      "os_lock_orientation",
      "os_powersave_enable",
      "os_request_permission",
      "os_set_orientation_lock",
      "parameter_count",
      "parameter_string",
      "part_emitter_burst",
      "part_emitter_clear",
      "part_emitter_create",
      "part_emitter_delay",
      "part_emitter_destroy",
      "part_emitter_destroy_all",
      "part_emitter_enable",
      "part_emitter_exists",
      "part_emitter_interval",
      "part_emitter_region",
      "part_emitter_relative",
      "part_emitter_stream",
      "part_particles_burst",
      "part_particles_clear",
      "part_particles_count",
      "part_particles_create",
      "part_particles_create_color",
      "part_particles_create_colour",
      "part_system_angle",
      "part_system_automatic_draw",
      "part_system_automatic_update",
      "part_system_clear",
      "part_system_color",
      "part_system_colour",
      "part_system_create",
      "part_system_create_layer",
      "part_system_depth",
      "part_system_destroy",
      "part_system_draw_order",
      "part_system_drawit",
      "part_system_exists",
      "part_system_get_info",
      "part_system_get_layer",
      "part_system_global_space",
      "part_system_layer",
      "part_system_position",
      "part_system_update",
      "part_type_alpha1",
      "part_type_alpha2",
      "part_type_alpha3",
      "part_type_blend",
      "part_type_clear",
      "part_type_color1",
      "part_type_color2",
      "part_type_color3",
      "part_type_color_hsv",
      "part_type_color_mix",
      "part_type_color_rgb",
      "part_type_colour1",
      "part_type_colour2",
      "part_type_colour3",
      "part_type_colour_hsv",
      "part_type_colour_mix",
      "part_type_colour_rgb",
      "part_type_create",
      "part_type_death",
      "part_type_destroy",
      "part_type_direction",
      "part_type_exists",
      "part_type_gravity",
      "part_type_life",
      "part_type_orientation",
      "part_type_scale",
      "part_type_shape",
      "part_type_size",
      "part_type_size_x",
      "part_type_size_y",
      "part_type_speed",
      "part_type_sprite",
      "part_type_step",
      "part_type_subimage",
      "particle_exists",
      "particle_get_info",
      "path_add",
      "path_add_point",
      "path_append",
      "path_assign",
      "path_change_point",
      "path_clear_points",
      "path_delete",
      "path_delete_point",
      "path_duplicate",
      "path_end",
      "path_exists",
      "path_flip",
      "path_get_closed",
      "path_get_kind",
      "path_get_length",
      "path_get_name",
      "path_get_number",
      "path_get_point_speed",
      "path_get_point_x",
      "path_get_point_y",
      "path_get_precision",
      "path_get_speed",
      "path_get_x",
      "path_get_y",
      "path_insert_point",
      "path_mirror",
      "path_rescale",
      "path_reverse",
      "path_rotate",
      "path_set_closed",
      "path_set_kind",
      "path_set_precision",
      "path_shift",
      "path_start",
      "physics_apply_angular_impulse",
      "physics_apply_force",
      "physics_apply_impulse",
      "physics_apply_local_force",
      "physics_apply_local_impulse",
      "physics_apply_torque",
      "physics_draw_debug",
      "physics_fixture_add_point",
      "physics_fixture_bind",
      "physics_fixture_bind_ext",
      "physics_fixture_create",
      "physics_fixture_delete",
      "physics_fixture_set_angular_damping",
      "physics_fixture_set_awake",
      "physics_fixture_set_box_shape",
      "physics_fixture_set_chain_shape",
      "physics_fixture_set_circle_shape",
      "physics_fixture_set_collision_group",
      "physics_fixture_set_density",
      "physics_fixture_set_edge_shape",
      "physics_fixture_set_friction",
      "physics_fixture_set_kinematic",
      "physics_fixture_set_linear_damping",
      "physics_fixture_set_polygon_shape",
      "physics_fixture_set_restitution",
      "physics_fixture_set_sensor",
      "physics_get_density",
      "physics_get_friction",
      "physics_get_restitution",
      "physics_joint_delete",
      "physics_joint_distance_create",
      "physics_joint_enable_motor",
      "physics_joint_friction_create",
      "physics_joint_gear_create",
      "physics_joint_get_value",
      "physics_joint_prismatic_create",
      "physics_joint_pulley_create",
      "physics_joint_revolute_create",
      "physics_joint_rope_create",
      "physics_joint_set_value",
      "physics_joint_weld_create",
      "physics_joint_wheel_create",
      "physics_mass_properties",
      "physics_particle_count",
      "physics_particle_create",
      "physics_particle_delete",
      "physics_particle_delete_region_box",
      "physics_particle_delete_region_circle",
      "physics_particle_delete_region_poly",
      "physics_particle_draw",
      "physics_particle_draw_ext",
      "physics_particle_get_damping",
      "physics_particle_get_data",
      "physics_particle_get_data_particle",
      "physics_particle_get_density",
      "physics_particle_get_gravity_scale",
      "physics_particle_get_group_flags",
      "physics_particle_get_max_count",
      "physics_particle_get_radius",
      "physics_particle_group_add_point",
      "physics_particle_group_begin",
      "physics_particle_group_box",
      "physics_particle_group_circle",
      "physics_particle_group_count",
      "physics_particle_group_delete",
      "physics_particle_group_end",
      "physics_particle_group_get_ang_vel",
      "physics_particle_group_get_angle",
      "physics_particle_group_get_centre_x",
      "physics_particle_group_get_centre_y",
      "physics_particle_group_get_data",
      "physics_particle_group_get_inertia",
      "physics_particle_group_get_mass",
      "physics_particle_group_get_vel_x",
      "physics_particle_group_get_vel_y",
      "physics_particle_group_get_x",
      "physics_particle_group_get_y",
      "physics_particle_group_join",
      "physics_particle_group_polygon",
      "physics_particle_set_category_flags",
      "physics_particle_set_damping",
      "physics_particle_set_density",
      "physics_particle_set_flags",
      "physics_particle_set_gravity_scale",
      "physics_particle_set_group_flags",
      "physics_particle_set_max_count",
      "physics_particle_set_radius",
      "physics_pause_enable",
      "physics_remove_fixture",
      "physics_set_density",
      "physics_set_friction",
      "physics_set_restitution",
      "physics_test_overlap",
      "physics_world_create",
      "physics_world_draw_debug",
      "physics_world_gravity",
      "physics_world_update_iterations",
      "physics_world_update_speed",
      "place_empty",
      "place_free",
      "place_meeting",
      "place_snapped",
      "point_direction",
      "point_distance",
      "point_distance_3d",
      "point_in_circle",
      "point_in_rectangle",
      "point_in_triangle",
      "position_change",
      "position_destroy",
      "position_empty",
      "position_meeting",
      "power",
      "ptr",
      "radtodeg",
      "random",
      "random_get_seed",
      "random_range",
      "random_set_seed",
      "randomise",
      "randomize",
      "real",
      "rectangle_in_circle",
      "rectangle_in_rectangle",
      "rectangle_in_triangle",
      "ref_create",
      "rollback_chat",
      "rollback_create_game",
      "rollback_define_extra_network_latency",
      "rollback_define_input",
      "rollback_define_input_frame_delay",
      "rollback_define_mock_input",
      "rollback_define_player",
      "rollback_display_events",
      "rollback_get_info",
      "rollback_get_input",
      "rollback_get_player_prefs",
      "rollback_join_game",
      "rollback_leave_game",
      "rollback_set_player_prefs",
      "rollback_start_game",
      "rollback_sync_on_frame",
      "rollback_use_late_join",
      "rollback_use_manual_start",
      "rollback_use_player_prefs",
      "rollback_use_random_input",
      "room_add",
      "room_assign",
      "room_duplicate",
      "room_exists",
      "room_get_camera",
      "room_get_info",
      "room_get_name",
      "room_get_viewport",
      "room_goto",
      "room_goto_next",
      "room_goto_previous",
      "room_instance_add",
      "room_instance_clear",
      "room_next",
      "room_previous",
      "room_restart",
      "room_set_camera",
      "room_set_height",
      "room_set_persistent",
      "room_set_view_enabled",
      "room_set_viewport",
      "room_set_width",
      "round",
      "scheduler_resolution_get",
      "scheduler_resolution_set",
      "screen_save",
      "screen_save_part",
      "script_execute",
      "script_execute_ext",
      "script_exists",
      "script_get_name",
      "sequence_create",
      "sequence_destroy",
      "sequence_exists",
      "sequence_get",
      "sequence_get_objects",
      "sequence_instance_override_object",
      "sequence_keyframe_new",
      "sequence_keyframedata_new",
      "sequence_track_new",
      "sha1_file",
      "sha1_string_unicode",
      "sha1_string_utf8",
      "shader_current",
      "shader_enable_corner_id",
      "shader_get_name",
      "shader_get_sampler_index",
      "shader_get_uniform",
      "shader_is_compiled",
      "shader_reset",
      "shader_set",
      "shader_set_uniform_f",
      "shader_set_uniform_f_array",
      "shader_set_uniform_f_buffer",
      "shader_set_uniform_i",
      "shader_set_uniform_i_array",
      "shader_set_uniform_matrix",
      "shader_set_uniform_matrix_array",
      "shaders_are_supported",
      "shop_leave_rating",
      "show_debug_message",
      "show_debug_message_ext",
      "show_debug_overlay",
      "show_error",
      "show_message",
      "show_message_async",
      "show_question",
      "show_question_async",
      "sign",
      "sin",
      "skeleton_animation_clear",
      "skeleton_animation_get",
      "skeleton_animation_get_duration",
      "skeleton_animation_get_event_frames",
      "skeleton_animation_get_ext",
      "skeleton_animation_get_frame",
      "skeleton_animation_get_frames",
      "skeleton_animation_get_position",
      "skeleton_animation_is_finished",
      "skeleton_animation_is_looping",
      "skeleton_animation_list",
      "skeleton_animation_mix",
      "skeleton_animation_set",
      "skeleton_animation_set_ext",
      "skeleton_animation_set_frame",
      "skeleton_animation_set_position",
      "skeleton_attachment_create",
      "skeleton_attachment_create_color",
      "skeleton_attachment_create_colour",
      "skeleton_attachment_destroy",
      "skeleton_attachment_exists",
      "skeleton_attachment_get",
      "skeleton_attachment_replace",
      "skeleton_attachment_replace_color",
      "skeleton_attachment_replace_colour",
      "skeleton_attachment_set",
      "skeleton_bone_data_get",
      "skeleton_bone_data_set",
      "skeleton_bone_list",
      "skeleton_bone_state_get",
      "skeleton_bone_state_set",
      "skeleton_collision_draw_set",
      "skeleton_find_slot",
      "skeleton_get_bounds",
      "skeleton_get_minmax",
      "skeleton_get_num_bounds",
      "skeleton_skin_create",
      "skeleton_skin_get",
      "skeleton_skin_list",
      "skeleton_skin_set",
      "skeleton_slot_alpha_get",
      "skeleton_slot_color_get",
      "skeleton_slot_color_set",
      "skeleton_slot_colour_get",
      "skeleton_slot_colour_set",
      "skeleton_slot_data",
      "skeleton_slot_data_instance",
      "skeleton_slot_list",
      "sprite_add",
      "sprite_add_ext",
      "sprite_add_from_surface",
      "sprite_assign",
      "sprite_collision_mask",
      "sprite_create_from_surface",
      "sprite_delete",
      "sprite_duplicate",
      "sprite_exists",
      "sprite_flush",
      "sprite_flush_multi",
      "sprite_get_bbox_bottom",
      "sprite_get_bbox_left",
      "sprite_get_bbox_mode",
      "sprite_get_bbox_right",
      "sprite_get_bbox_top",
      "sprite_get_height",
      "sprite_get_info",
      "sprite_get_name",
      "sprite_get_nineslice",
      "sprite_get_number",
      "sprite_get_speed",
      "sprite_get_speed_type",
      "sprite_get_texture",
      "sprite_get_tpe",
      "sprite_get_uvs",
      "sprite_get_width",
      "sprite_get_xoffset",
      "sprite_get_yoffset",
      "sprite_merge",
      "sprite_nineslice_create",
      "sprite_prefetch",
      "sprite_prefetch_multi",
      "sprite_replace",
      "sprite_save",
      "sprite_save_strip",
      "sprite_set_alpha_from_sprite",
      "sprite_set_bbox",
      "sprite_set_bbox_mode",
      "sprite_set_cache_size",
      "sprite_set_cache_size_ext",
      "sprite_set_nineslice",
      "sprite_set_offset",
      "sprite_set_speed",
      "sqr",
      "sqrt",
      "static_get",
      "static_set",
      "string",
      "string_byte_at",
      "string_byte_length",
      "string_char_at",
      "string_concat",
      "string_concat_ext",
      "string_copy",
      "string_count",
      "string_delete",
      "string_digits",
      "string_ends_with",
      "string_ext",
      "string_foreach",
      "string_format",
      "string_hash_to_newline",
      "string_height",
      "string_height_ext",
      "string_insert",
      "string_join",
      "string_join_ext",
      "string_last_pos",
      "string_last_pos_ext",
      "string_length",
      "string_letters",
      "string_lettersdigits",
      "string_lower",
      "string_ord_at",
      "string_pos",
      "string_pos_ext",
      "string_repeat",
      "string_replace",
      "string_replace_all",
      "string_set_byte_at",
      "string_split",
      "string_split_ext",
      "string_starts_with",
      "string_trim",
      "string_trim_end",
      "string_trim_start",
      "string_upper",
      "string_width",
      "string_width_ext",
      "struct_exists",
      "struct_foreach",
      "struct_get",
      "struct_get_from_hash",
      "struct_get_names",
      "struct_names_count",
      "struct_remove",
      "struct_set",
      "struct_set_from_hash",
      "surface_copy",
      "surface_copy_part",
      "surface_create",
      "surface_create_ext",
      "surface_depth_disable",
      "surface_exists",
      "surface_format_is_supported",
      "surface_free",
      "surface_get_depth_disable",
      "surface_get_format",
      "surface_get_height",
      "surface_get_target",
      "surface_get_target_ext",
      "surface_get_texture",
      "surface_get_width",
      "surface_getpixel",
      "surface_getpixel_ext",
      "surface_reset_target",
      "surface_resize",
      "surface_save",
      "surface_save_part",
      "surface_set_target",
      "surface_set_target_ext",
      "tag_get_asset_ids",
      "tag_get_assets",
      "tan",
      "texture_debug_messages",
      "texture_flush",
      "texture_get_height",
      "texture_get_texel_height",
      "texture_get_texel_width",
      "texture_get_uvs",
      "texture_get_width",
      "texture_global_scale",
      "texture_is_ready",
      "texture_prefetch",
      "texture_set_stage",
      "texturegroup_get_fonts",
      "texturegroup_get_names",
      "texturegroup_get_sprites",
      "texturegroup_get_status",
      "texturegroup_get_textures",
      "texturegroup_get_tilesets",
      "texturegroup_load",
      "texturegroup_set_mode",
      "texturegroup_unload",
      "tile_get_empty",
      "tile_get_flip",
      "tile_get_index",
      "tile_get_mirror",
      "tile_get_rotate",
      "tile_set_empty",
      "tile_set_flip",
      "tile_set_index",
      "tile_set_mirror",
      "tile_set_rotate",
      "tilemap_clear",
      "tilemap_get",
      "tilemap_get_at_pixel",
      "tilemap_get_cell_x_at_pixel",
      "tilemap_get_cell_y_at_pixel",
      "tilemap_get_frame",
      "tilemap_get_global_mask",
      "tilemap_get_height",
      "tilemap_get_mask",
      "tilemap_get_tile_height",
      "tilemap_get_tile_width",
      "tilemap_get_tileset",
      "tilemap_get_width",
      "tilemap_get_x",
      "tilemap_get_y",
      "tilemap_set",
      "tilemap_set_at_pixel",
      "tilemap_set_global_mask",
      "tilemap_set_height",
      "tilemap_set_mask",
      "tilemap_set_width",
      "tilemap_tileset",
      "tilemap_x",
      "tilemap_y",
      "tileset_get_info",
      "tileset_get_name",
      "tileset_get_texture",
      "tileset_get_uvs",
      "time_bpm_to_seconds",
      "time_seconds_to_bpm",
      "time_source_create",
      "time_source_destroy",
      "time_source_exists",
      "time_source_get_children",
      "time_source_get_parent",
      "time_source_get_period",
      "time_source_get_reps_completed",
      "time_source_get_reps_remaining",
      "time_source_get_state",
      "time_source_get_time_remaining",
      "time_source_get_units",
      "time_source_pause",
      "time_source_reconfigure",
      "time_source_reset",
      "time_source_resume",
      "time_source_start",
      "time_source_stop",
      "timeline_add",
      "timeline_clear",
      "timeline_delete",
      "timeline_exists",
      "timeline_get_name",
      "timeline_max_moment",
      "timeline_moment_add_script",
      "timeline_moment_clear",
      "timeline_size",
      "typeof",
      "url_get_domain",
      "url_open",
      "url_open_ext",
      "url_open_full",
      "uwp_device_touchscreen_available",
      "uwp_livetile_badge_clear",
      "uwp_livetile_badge_notification",
      "uwp_livetile_notification_begin",
      "uwp_livetile_notification_end",
      "uwp_livetile_notification_expiry",
      "uwp_livetile_notification_image_add",
      "uwp_livetile_notification_secondary_begin",
      "uwp_livetile_notification_tag",
      "uwp_livetile_notification_template_add",
      "uwp_livetile_notification_text_add",
      "uwp_livetile_queue_enable",
      "uwp_livetile_tile_clear",
      "uwp_secondarytile_badge_clear",
      "uwp_secondarytile_badge_notification",
      "uwp_secondarytile_delete",
      "uwp_secondarytile_pin",
      "uwp_secondarytile_tile_clear",
      "variable_clone",
      "variable_get_hash",
      "variable_global_exists",
      "variable_global_get",
      "variable_global_set",
      "variable_instance_exists",
      "variable_instance_get",
      "variable_instance_get_names",
      "variable_instance_names_count",
      "variable_instance_set",
      "variable_struct_exists",
      "variable_struct_get",
      "variable_struct_get_names",
      "variable_struct_names_count",
      "variable_struct_remove",
      "variable_struct_set",
      "vertex_argb",
      "vertex_begin",
      "vertex_color",
      "vertex_colour",
      "vertex_create_buffer",
      "vertex_create_buffer_ext",
      "vertex_create_buffer_from_buffer",
      "vertex_create_buffer_from_buffer_ext",
      "vertex_delete_buffer",
      "vertex_end",
      "vertex_float1",
      "vertex_float2",
      "vertex_float3",
      "vertex_float4",
      "vertex_format_add_color",
      "vertex_format_add_colour",
      "vertex_format_add_custom",
      "vertex_format_add_normal",
      "vertex_format_add_position",
      "vertex_format_add_position_3d",
      "vertex_format_add_texcoord",
      "vertex_format_begin",
      "vertex_format_delete",
      "vertex_format_end",
      "vertex_format_get_info",
      "vertex_freeze",
      "vertex_get_buffer_size",
      "vertex_get_number",
      "vertex_normal",
      "vertex_position",
      "vertex_position_3d",
      "vertex_submit",
      "vertex_submit_ext",
      "vertex_texcoord",
      "vertex_ubyte4",
      "vertex_update_buffer_from_buffer",
      "vertex_update_buffer_from_vertex",
      "video_close",
      "video_draw",
      "video_enable_loop",
      "video_get_duration",
      "video_get_format",
      "video_get_position",
      "video_get_status",
      "video_get_volume",
      "video_is_looping",
      "video_open",
      "video_pause",
      "video_resume",
      "video_seek_to",
      "video_set_volume",
      "view_get_camera",
      "view_get_hport",
      "view_get_surface_id",
      "view_get_visible",
      "view_get_wport",
      "view_get_xport",
      "view_get_yport",
      "view_set_camera",
      "view_set_hport",
      "view_set_surface_id",
      "view_set_visible",
      "view_set_wport",
      "view_set_xport",
      "view_set_yport",
      "virtual_key_add",
      "virtual_key_delete",
      "virtual_key_hide",
      "virtual_key_show",
      "wallpaper_set_config",
      "wallpaper_set_subscriptions",
      "weak_ref_alive",
      "weak_ref_any_alive",
      "weak_ref_create",
      "window_center",
      "window_device",
      "window_enable_borderless_fullscreen",
      "window_get_borderless_fullscreen",
      "window_get_caption",
      "window_get_color",
      "window_get_colour",
      "window_get_cursor",
      "window_get_fullscreen",
      "window_get_height",
      "window_get_showborder",
      "window_get_visible_rects",
      "window_get_width",
      "window_get_x",
      "window_get_y",
      "window_handle",
      "window_has_focus",
      "window_mouse_get_delta_x",
      "window_mouse_get_delta_y",
      "window_mouse_get_locked",
      "window_mouse_get_x",
      "window_mouse_get_y",
      "window_mouse_set",
      "window_mouse_set_locked",
      "window_set_caption",
      "window_set_color",
      "window_set_colour",
      "window_set_cursor",
      "window_set_fullscreen",
      "window_set_max_height",
      "window_set_max_width",
      "window_set_min_height",
      "window_set_min_width",
      "window_set_position",
      "window_set_rectangle",
      "window_set_showborder",
      "window_set_size",
      "window_view_mouse_get_x",
      "window_view_mouse_get_y",
      "window_views_mouse_get_x",
      "window_views_mouse_get_y",
      "winphone_tile_background_color",
      "winphone_tile_background_colour",
      "zip_add_file",
      "zip_create",
      "zip_save",
      "zip_unzip",
      "zip_unzip_async"
    ];
    const SYMBOLS = [
      "AudioEffect",
      "AudioEffectType",
      "AudioLFOType",
      "GM_build_date",
      "GM_build_type",
      "GM_is_sandboxed",
      "GM_project_filename",
      "GM_runtime_version",
      "GM_version",
      "NaN",
      "_GMFILE_",
      "_GMFUNCTION_",
      "_GMLINE_",
      "alignmentH",
      "alignmentV",
      "all",
      "animcurvetype_bezier",
      "animcurvetype_catmullrom",
      "animcurvetype_linear",
      "asset_animationcurve",
      "asset_font",
      "asset_object",
      "asset_path",
      "asset_room",
      "asset_script",
      "asset_sequence",
      "asset_shader",
      "asset_sound",
      "asset_sprite",
      "asset_tiles",
      "asset_timeline",
      "asset_unknown",
      "audio_3D",
      "audio_bus_main",
      "audio_falloff_exponent_distance",
      "audio_falloff_exponent_distance_clamped",
      "audio_falloff_exponent_distance_scaled",
      "audio_falloff_inverse_distance",
      "audio_falloff_inverse_distance_clamped",
      "audio_falloff_inverse_distance_scaled",
      "audio_falloff_linear_distance",
      "audio_falloff_linear_distance_clamped",
      "audio_falloff_none",
      "audio_mono",
      "audio_stereo",
      "bboxkind_diamond",
      "bboxkind_ellipse",
      "bboxkind_precise",
      "bboxkind_rectangular",
      "bboxmode_automatic",
      "bboxmode_fullimage",
      "bboxmode_manual",
      "bm_add",
      "bm_dest_alpha",
      "bm_dest_color",
      "bm_dest_colour",
      "bm_inv_dest_alpha",
      "bm_inv_dest_color",
      "bm_inv_dest_colour",
      "bm_inv_src_alpha",
      "bm_inv_src_color",
      "bm_inv_src_colour",
      "bm_max",
      "bm_normal",
      "bm_one",
      "bm_src_alpha",
      "bm_src_alpha_sat",
      "bm_src_color",
      "bm_src_colour",
      "bm_subtract",
      "bm_zero",
      "browser_chrome",
      "browser_edge",
      "browser_firefox",
      "browser_ie",
      "browser_ie_mobile",
      "browser_not_a_browser",
      "browser_opera",
      "browser_safari",
      "browser_safari_mobile",
      "browser_tizen",
      "browser_unknown",
      "browser_windows_store",
      "buffer_bool",
      "buffer_f16",
      "buffer_f32",
      "buffer_f64",
      "buffer_fast",
      "buffer_fixed",
      "buffer_grow",
      "buffer_s16",
      "buffer_s32",
      "buffer_s8",
      "buffer_seek_end",
      "buffer_seek_relative",
      "buffer_seek_start",
      "buffer_string",
      "buffer_text",
      "buffer_u16",
      "buffer_u32",
      "buffer_u64",
      "buffer_u8",
      "buffer_vbuffer",
      "buffer_wrap",
      "c_aqua",
      "c_black",
      "c_blue",
      "c_dkgray",
      "c_dkgrey",
      "c_fuchsia",
      "c_gray",
      "c_green",
      "c_grey",
      "c_lime",
      "c_ltgray",
      "c_ltgrey",
      "c_maroon",
      "c_navy",
      "c_olive",
      "c_orange",
      "c_purple",
      "c_red",
      "c_silver",
      "c_teal",
      "c_white",
      "c_yellow",
      "cache_directory",
      "characterSpacing",
      "cmpfunc_always",
      "cmpfunc_equal",
      "cmpfunc_greater",
      "cmpfunc_greaterequal",
      "cmpfunc_less",
      "cmpfunc_lessequal",
      "cmpfunc_never",
      "cmpfunc_notequal",
      "coreColor",
      "coreColour",
      "cr_appstart",
      "cr_arrow",
      "cr_beam",
      "cr_cross",
      "cr_default",
      "cr_drag",
      "cr_handpoint",
      "cr_hourglass",
      "cr_none",
      "cr_size_all",
      "cr_size_nesw",
      "cr_size_ns",
      "cr_size_nwse",
      "cr_size_we",
      "cr_uparrow",
      "cull_clockwise",
      "cull_counterclockwise",
      "cull_noculling",
      "device_emulator",
      "device_ios_ipad",
      "device_ios_ipad_retina",
      "device_ios_iphone",
      "device_ios_iphone5",
      "device_ios_iphone6",
      "device_ios_iphone6plus",
      "device_ios_iphone_retina",
      "device_ios_unknown",
      "device_tablet",
      "display_landscape",
      "display_landscape_flipped",
      "display_portrait",
      "display_portrait_flipped",
      "dll_cdecl",
      "dll_stdcall",
      "dropShadowEnabled",
      "dropShadowEnabled",
      "ds_type_grid",
      "ds_type_list",
      "ds_type_map",
      "ds_type_priority",
      "ds_type_queue",
      "ds_type_stack",
      "ef_cloud",
      "ef_ellipse",
      "ef_explosion",
      "ef_firework",
      "ef_flare",
      "ef_rain",
      "ef_ring",
      "ef_smoke",
      "ef_smokeup",
      "ef_snow",
      "ef_spark",
      "ef_star",
      "effectsEnabled",
      "effectsEnabled",
      "ev_alarm",
      "ev_animation_end",
      "ev_animation_event",
      "ev_animation_update",
      "ev_async_audio_playback",
      "ev_async_audio_playback_ended",
      "ev_async_audio_recording",
      "ev_async_dialog",
      "ev_async_push_notification",
      "ev_async_save_load",
      "ev_async_save_load",
      "ev_async_social",
      "ev_async_system_event",
      "ev_async_web",
      "ev_async_web_cloud",
      "ev_async_web_iap",
      "ev_async_web_image_load",
      "ev_async_web_networking",
      "ev_async_web_steam",
      "ev_audio_playback",
      "ev_audio_playback_ended",
      "ev_audio_recording",
      "ev_boundary",
      "ev_boundary_view0",
      "ev_boundary_view1",
      "ev_boundary_view2",
      "ev_boundary_view3",
      "ev_boundary_view4",
      "ev_boundary_view5",
      "ev_boundary_view6",
      "ev_boundary_view7",
      "ev_broadcast_message",
      "ev_cleanup",
      "ev_collision",
      "ev_create",
      "ev_destroy",
      "ev_dialog_async",
      "ev_draw",
      "ev_draw_begin",
      "ev_draw_end",
      "ev_draw_normal",
      "ev_draw_post",
      "ev_draw_pre",
      "ev_end_of_path",
      "ev_game_end",
      "ev_game_start",
      "ev_gesture",
      "ev_gesture_double_tap",
      "ev_gesture_drag_end",
      "ev_gesture_drag_start",
      "ev_gesture_dragging",
      "ev_gesture_flick",
      "ev_gesture_pinch_end",
      "ev_gesture_pinch_in",
      "ev_gesture_pinch_out",
      "ev_gesture_pinch_start",
      "ev_gesture_rotate_end",
      "ev_gesture_rotate_start",
      "ev_gesture_rotating",
      "ev_gesture_tap",
      "ev_global_gesture_double_tap",
      "ev_global_gesture_drag_end",
      "ev_global_gesture_drag_start",
      "ev_global_gesture_dragging",
      "ev_global_gesture_flick",
      "ev_global_gesture_pinch_end",
      "ev_global_gesture_pinch_in",
      "ev_global_gesture_pinch_out",
      "ev_global_gesture_pinch_start",
      "ev_global_gesture_rotate_end",
      "ev_global_gesture_rotate_start",
      "ev_global_gesture_rotating",
      "ev_global_gesture_tap",
      "ev_global_left_button",
      "ev_global_left_press",
      "ev_global_left_release",
      "ev_global_middle_button",
      "ev_global_middle_press",
      "ev_global_middle_release",
      "ev_global_right_button",
      "ev_global_right_press",
      "ev_global_right_release",
      "ev_gui",
      "ev_gui_begin",
      "ev_gui_end",
      "ev_joystick1_button1",
      "ev_joystick1_button2",
      "ev_joystick1_button3",
      "ev_joystick1_button4",
      "ev_joystick1_button5",
      "ev_joystick1_button6",
      "ev_joystick1_button7",
      "ev_joystick1_button8",
      "ev_joystick1_down",
      "ev_joystick1_left",
      "ev_joystick1_right",
      "ev_joystick1_up",
      "ev_joystick2_button1",
      "ev_joystick2_button2",
      "ev_joystick2_button3",
      "ev_joystick2_button4",
      "ev_joystick2_button5",
      "ev_joystick2_button6",
      "ev_joystick2_button7",
      "ev_joystick2_button8",
      "ev_joystick2_down",
      "ev_joystick2_left",
      "ev_joystick2_right",
      "ev_joystick2_up",
      "ev_keyboard",
      "ev_keypress",
      "ev_keyrelease",
      "ev_left_button",
      "ev_left_press",
      "ev_left_release",
      "ev_middle_button",
      "ev_middle_press",
      "ev_middle_release",
      "ev_mouse",
      "ev_mouse_enter",
      "ev_mouse_leave",
      "ev_mouse_wheel_down",
      "ev_mouse_wheel_up",
      "ev_no_button",
      "ev_no_more_health",
      "ev_no_more_lives",
      "ev_other",
      "ev_outside",
      "ev_outside_view0",
      "ev_outside_view1",
      "ev_outside_view2",
      "ev_outside_view3",
      "ev_outside_view4",
      "ev_outside_view5",
      "ev_outside_view6",
      "ev_outside_view7",
      "ev_pre_create",
      "ev_push_notification",
      "ev_right_button",
      "ev_right_press",
      "ev_right_release",
      "ev_room_end",
      "ev_room_start",
      "ev_social",
      "ev_step",
      "ev_step_begin",
      "ev_step_end",
      "ev_step_normal",
      "ev_system_event",
      "ev_trigger",
      "ev_user0",
      "ev_user1",
      "ev_user10",
      "ev_user11",
      "ev_user12",
      "ev_user13",
      "ev_user14",
      "ev_user15",
      "ev_user2",
      "ev_user3",
      "ev_user4",
      "ev_user5",
      "ev_user6",
      "ev_user7",
      "ev_user8",
      "ev_user9",
      "ev_web_async",
      "ev_web_cloud",
      "ev_web_iap",
      "ev_web_image_load",
      "ev_web_networking",
      "ev_web_sound_load",
      "ev_web_steam",
      "fa_archive",
      "fa_bottom",
      "fa_center",
      "fa_directory",
      "fa_hidden",
      "fa_left",
      "fa_middle",
      "fa_none",
      "fa_readonly",
      "fa_right",
      "fa_sysfile",
      "fa_top",
      "fa_volumeid",
      "false",
      "frameSizeX",
      "frameSizeY",
      "gamespeed_fps",
      "gamespeed_microseconds",
      "global",
      "glowColor",
      "glowColour",
      "glowEnabled",
      "glowEnabled",
      "glowEnd",
      "glowStart",
      "gp_axis_acceleration_x",
      "gp_axis_acceleration_y",
      "gp_axis_acceleration_z",
      "gp_axis_angular_velocity_x",
      "gp_axis_angular_velocity_y",
      "gp_axis_angular_velocity_z",
      "gp_axis_orientation_w",
      "gp_axis_orientation_x",
      "gp_axis_orientation_y",
      "gp_axis_orientation_z",
      "gp_axislh",
      "gp_axislv",
      "gp_axisrh",
      "gp_axisrv",
      "gp_face1",
      "gp_face2",
      "gp_face3",
      "gp_face4",
      "gp_padd",
      "gp_padl",
      "gp_padr",
      "gp_padu",
      "gp_select",
      "gp_shoulderl",
      "gp_shoulderlb",
      "gp_shoulderr",
      "gp_shoulderrb",
      "gp_start",
      "gp_stickl",
      "gp_stickr",
      "iap_available",
      "iap_canceled",
      "iap_ev_consume",
      "iap_ev_product",
      "iap_ev_purchase",
      "iap_ev_restore",
      "iap_ev_storeload",
      "iap_failed",
      "iap_purchased",
      "iap_refunded",
      "iap_status_available",
      "iap_status_loading",
      "iap_status_processing",
      "iap_status_restoring",
      "iap_status_unavailable",
      "iap_status_uninitialised",
      "iap_storeload_failed",
      "iap_storeload_ok",
      "iap_unavailable",
      "infinity",
      "kbv_autocapitalize_characters",
      "kbv_autocapitalize_none",
      "kbv_autocapitalize_sentences",
      "kbv_autocapitalize_words",
      "kbv_returnkey_continue",
      "kbv_returnkey_default",
      "kbv_returnkey_done",
      "kbv_returnkey_emergency",
      "kbv_returnkey_go",
      "kbv_returnkey_google",
      "kbv_returnkey_join",
      "kbv_returnkey_next",
      "kbv_returnkey_route",
      "kbv_returnkey_search",
      "kbv_returnkey_send",
      "kbv_returnkey_yahoo",
      "kbv_type_ascii",
      "kbv_type_default",
      "kbv_type_email",
      "kbv_type_numbers",
      "kbv_type_phone",
      "kbv_type_phone_name",
      "kbv_type_url",
      "layerelementtype_background",
      "layerelementtype_instance",
      "layerelementtype_oldtilemap",
      "layerelementtype_particlesystem",
      "layerelementtype_sequence",
      "layerelementtype_sprite",
      "layerelementtype_tile",
      "layerelementtype_tilemap",
      "layerelementtype_undefined",
      "leaderboard_type_number",
      "leaderboard_type_time_mins_secs",
      "lighttype_dir",
      "lighttype_point",
      "lineSpacing",
      "m_axisx",
      "m_axisx_gui",
      "m_axisy",
      "m_axisy_gui",
      "m_scroll_down",
      "m_scroll_up",
      "matrix_projection",
      "matrix_view",
      "matrix_world",
      "mb_any",
      "mb_left",
      "mb_middle",
      "mb_none",
      "mb_right",
      "mb_side1",
      "mb_side2",
      "mip_markedonly",
      "mip_off",
      "mip_on",
      "network_config_avoid_time_wait",
      "network_config_connect_timeout",
      "network_config_disable_multicast",
      "network_config_disable_reliable_udp",
      "network_config_enable_multicast",
      "network_config_enable_reliable_udp",
      "network_config_use_non_blocking_socket",
      "network_config_websocket_protocol",
      "network_connect_active",
      "network_connect_blocking",
      "network_connect_nonblocking",
      "network_connect_none",
      "network_connect_passive",
      "network_send_binary",
      "network_send_text",
      "network_socket_bluetooth",
      "network_socket_tcp",
      "network_socket_udp",
      "network_socket_ws",
      "network_socket_wss",
      "network_type_connect",
      "network_type_data",
      "network_type_disconnect",
      "network_type_down",
      "network_type_non_blocking_connect",
      "network_type_up",
      "network_type_up_failed",
      "nineslice_blank",
      "nineslice_bottom",
      "nineslice_center",
      "nineslice_centre",
      "nineslice_hide",
      "nineslice_left",
      "nineslice_mirror",
      "nineslice_repeat",
      "nineslice_right",
      "nineslice_stretch",
      "nineslice_top",
      "noone",
      "of_challenge_lose",
      "of_challenge_tie",
      "of_challenge_win",
      "os_android",
      "os_gdk",
      "os_gxgames",
      "os_ios",
      "os_linux",
      "os_macosx",
      "os_operagx",
      "os_permission_denied",
      "os_permission_denied_dont_request",
      "os_permission_granted",
      "os_ps3",
      "os_ps4",
      "os_ps5",
      "os_psvita",
      "os_switch",
      "os_tvos",
      "os_unknown",
      "os_uwp",
      "os_win8native",
      "os_windows",
      "os_winphone",
      "os_xboxone",
      "os_xboxseriesxs",
      "other",
      "outlineColor",
      "outlineColour",
      "outlineDist",
      "outlineEnabled",
      "outlineEnabled",
      "paragraphSpacing",
      "path_action_continue",
      "path_action_restart",
      "path_action_reverse",
      "path_action_stop",
      "phy_debug_render_aabb",
      "phy_debug_render_collision_pairs",
      "phy_debug_render_coms",
      "phy_debug_render_core_shapes",
      "phy_debug_render_joints",
      "phy_debug_render_obb",
      "phy_debug_render_shapes",
      "phy_joint_anchor_1_x",
      "phy_joint_anchor_1_y",
      "phy_joint_anchor_2_x",
      "phy_joint_anchor_2_y",
      "phy_joint_angle",
      "phy_joint_angle_limits",
      "phy_joint_damping_ratio",
      "phy_joint_frequency",
      "phy_joint_length_1",
      "phy_joint_length_2",
      "phy_joint_lower_angle_limit",
      "phy_joint_max_force",
      "phy_joint_max_length",
      "phy_joint_max_motor_force",
      "phy_joint_max_motor_torque",
      "phy_joint_max_torque",
      "phy_joint_motor_force",
      "phy_joint_motor_speed",
      "phy_joint_motor_torque",
      "phy_joint_reaction_force_x",
      "phy_joint_reaction_force_y",
      "phy_joint_reaction_torque",
      "phy_joint_speed",
      "phy_joint_translation",
      "phy_joint_upper_angle_limit",
      "phy_particle_data_flag_category",
      "phy_particle_data_flag_color",
      "phy_particle_data_flag_colour",
      "phy_particle_data_flag_position",
      "phy_particle_data_flag_typeflags",
      "phy_particle_data_flag_velocity",
      "phy_particle_flag_colormixing",
      "phy_particle_flag_colourmixing",
      "phy_particle_flag_elastic",
      "phy_particle_flag_powder",
      "phy_particle_flag_spring",
      "phy_particle_flag_tensile",
      "phy_particle_flag_viscous",
      "phy_particle_flag_wall",
      "phy_particle_flag_water",
      "phy_particle_flag_zombie",
      "phy_particle_group_flag_rigid",
      "phy_particle_group_flag_solid",
      "pi",
      "pointer_invalid",
      "pointer_null",
      "pr_linelist",
      "pr_linestrip",
      "pr_pointlist",
      "pr_trianglefan",
      "pr_trianglelist",
      "pr_trianglestrip",
      "ps_distr_gaussian",
      "ps_distr_invgaussian",
      "ps_distr_linear",
      "ps_mode_burst",
      "ps_mode_stream",
      "ps_shape_diamond",
      "ps_shape_ellipse",
      "ps_shape_line",
      "ps_shape_rectangle",
      "pt_shape_circle",
      "pt_shape_cloud",
      "pt_shape_disk",
      "pt_shape_explosion",
      "pt_shape_flare",
      "pt_shape_line",
      "pt_shape_pixel",
      "pt_shape_ring",
      "pt_shape_smoke",
      "pt_shape_snow",
      "pt_shape_spark",
      "pt_shape_sphere",
      "pt_shape_square",
      "pt_shape_star",
      "rollback_chat_message",
      "rollback_connect_error",
      "rollback_connect_info",
      "rollback_connected_to_peer",
      "rollback_connection_rejected",
      "rollback_disconnected_from_peer",
      "rollback_end_game",
      "rollback_game_full",
      "rollback_game_info",
      "rollback_game_interrupted",
      "rollback_game_resumed",
      "rollback_high_latency",
      "rollback_player_prefs",
      "rollback_protocol_rejected",
      "rollback_synchronized_with_peer",
      "rollback_synchronizing_with_peer",
      "self",
      "seqaudiokey_loop",
      "seqaudiokey_oneshot",
      "seqdir_left",
      "seqdir_right",
      "seqinterpolation_assign",
      "seqinterpolation_lerp",
      "seqplay_loop",
      "seqplay_oneshot",
      "seqplay_pingpong",
      "seqtextkey_bottom",
      "seqtextkey_center",
      "seqtextkey_justify",
      "seqtextkey_left",
      "seqtextkey_middle",
      "seqtextkey_right",
      "seqtextkey_top",
      "seqtracktype_audio",
      "seqtracktype_bool",
      "seqtracktype_clipmask",
      "seqtracktype_clipmask_mask",
      "seqtracktype_clipmask_subject",
      "seqtracktype_color",
      "seqtracktype_colour",
      "seqtracktype_empty",
      "seqtracktype_graphic",
      "seqtracktype_group",
      "seqtracktype_instance",
      "seqtracktype_message",
      "seqtracktype_moment",
      "seqtracktype_particlesystem",
      "seqtracktype_real",
      "seqtracktype_sequence",
      "seqtracktype_spriteframes",
      "seqtracktype_string",
      "seqtracktype_text",
      "shadowColor",
      "shadowColour",
      "shadowOffsetX",
      "shadowOffsetY",
      "shadowSoftness",
      "sprite_add_ext_error_cancelled",
      "sprite_add_ext_error_decompressfailed",
      "sprite_add_ext_error_loadfailed",
      "sprite_add_ext_error_setupfailed",
      "sprite_add_ext_error_spritenotfound",
      "sprite_add_ext_error_unknown",
      "spritespeed_framespergameframe",
      "spritespeed_framespersecond",
      "surface_r16float",
      "surface_r32float",
      "surface_r8unorm",
      "surface_rg8unorm",
      "surface_rgba16float",
      "surface_rgba32float",
      "surface_rgba4unorm",
      "surface_rgba8unorm",
      "texturegroup_status_fetched",
      "texturegroup_status_loaded",
      "texturegroup_status_loading",
      "texturegroup_status_unloaded",
      "tf_anisotropic",
      "tf_linear",
      "tf_point",
      "thickness",
      "tile_flip",
      "tile_index_mask",
      "tile_mirror",
      "tile_rotate",
      "time_source_expire_after",
      "time_source_expire_nearest",
      "time_source_game",
      "time_source_global",
      "time_source_state_active",
      "time_source_state_initial",
      "time_source_state_paused",
      "time_source_state_stopped",
      "time_source_units_frames",
      "time_source_units_seconds",
      "timezone_local",
      "timezone_utc",
      "tm_countvsyncs",
      "tm_sleep",
      "tm_systemtiming",
      "true",
      "ty_real",
      "ty_string",
      "undefined",
      "vertex_type_color",
      "vertex_type_colour",
      "vertex_type_float1",
      "vertex_type_float2",
      "vertex_type_float3",
      "vertex_type_float4",
      "vertex_type_ubyte4",
      "vertex_usage_binormal",
      "vertex_usage_blendindices",
      "vertex_usage_blendweight",
      "vertex_usage_color",
      "vertex_usage_colour",
      "vertex_usage_depth",
      "vertex_usage_fog",
      "vertex_usage_normal",
      "vertex_usage_position",
      "vertex_usage_psize",
      "vertex_usage_sample",
      "vertex_usage_tangent",
      "vertex_usage_texcoord",
      "video_format_rgba",
      "video_format_yuv",
      "video_status_closed",
      "video_status_paused",
      "video_status_playing",
      "video_status_preparing",
      "vk_add",
      "vk_alt",
      "vk_anykey",
      "vk_backspace",
      "vk_control",
      "vk_decimal",
      "vk_delete",
      "vk_divide",
      "vk_down",
      "vk_end",
      "vk_enter",
      "vk_escape",
      "vk_f1",
      "vk_f10",
      "vk_f11",
      "vk_f12",
      "vk_f2",
      "vk_f3",
      "vk_f4",
      "vk_f5",
      "vk_f6",
      "vk_f7",
      "vk_f8",
      "vk_f9",
      "vk_home",
      "vk_insert",
      "vk_lalt",
      "vk_lcontrol",
      "vk_left",
      "vk_lshift",
      "vk_multiply",
      "vk_nokey",
      "vk_numpad0",
      "vk_numpad1",
      "vk_numpad2",
      "vk_numpad3",
      "vk_numpad4",
      "vk_numpad5",
      "vk_numpad6",
      "vk_numpad7",
      "vk_numpad8",
      "vk_numpad9",
      "vk_pagedown",
      "vk_pageup",
      "vk_pause",
      "vk_printscreen",
      "vk_ralt",
      "vk_rcontrol",
      "vk_return",
      "vk_right",
      "vk_rshift",
      "vk_shift",
      "vk_space",
      "vk_subtract",
      "vk_tab",
      "vk_up",
      "wallpaper_config",
      "wallpaper_subscription_data",
      "wrap"
    ];
    const LANGUAGE_VARIABLES = [
      "alarm",
      "application_surface",
      "argument",
      "argument0",
      "argument1",
      "argument2",
      "argument3",
      "argument4",
      "argument5",
      "argument6",
      "argument7",
      "argument8",
      "argument9",
      "argument10",
      "argument11",
      "argument12",
      "argument13",
      "argument14",
      "argument15",
      "argument_count",
      "async_load",
      "background_color",
      "background_colour",
      "background_showcolor",
      "background_showcolour",
      "bbox_bottom",
      "bbox_left",
      "bbox_right",
      "bbox_top",
      "browser_height",
      "browser_width",
      "colour?ColourTrack",
      "current_day",
      "current_hour",
      "current_minute",
      "current_month",
      "current_second",
      "current_time",
      "current_weekday",
      "current_year",
      "cursor_sprite",
      "debug_mode",
      "delta_time",
      "depth",
      "direction",
      "display_aa",
      "drawn_by_sequence",
      "event_action",
      "event_data",
      "event_number",
      "event_object",
      "event_type",
      "font_texture_page_size",
      "fps",
      "fps_real",
      "friction",
      "game_display_name",
      "game_id",
      "game_project_name",
      "game_save_id",
      "gravity",
      "gravity_direction",
      "health",
      "hspeed",
      "iap_data",
      "id",
      "image_alpha",
      "image_angle",
      "image_blend",
      "image_index",
      "image_number",
      "image_speed",
      "image_xscale",
      "image_yscale",
      "in_collision_tree",
      "in_sequence",
      "instance_count",
      "instance_id",
      "keyboard_key",
      "keyboard_lastchar",
      "keyboard_lastkey",
      "keyboard_string",
      "layer",
      "lives",
      "longMessage",
      "managed",
      "mask_index",
      "message",
      "mouse_button",
      "mouse_lastbutton",
      "mouse_x",
      "mouse_y",
      "object_index",
      "os_browser",
      "os_device",
      "os_type",
      "os_version",
      "path_endaction",
      "path_index",
      "path_orientation",
      "path_position",
      "path_positionprevious",
      "path_scale",
      "path_speed",
      "persistent",
      "phy_active",
      "phy_angular_damping",
      "phy_angular_velocity",
      "phy_bullet",
      "phy_col_normal_x",
      "phy_col_normal_y",
      "phy_collision_points",
      "phy_collision_x",
      "phy_collision_y",
      "phy_com_x",
      "phy_com_y",
      "phy_dynamic",
      "phy_fixed_rotation",
      "phy_inertia",
      "phy_kinematic",
      "phy_linear_damping",
      "phy_linear_velocity_x",
      "phy_linear_velocity_y",
      "phy_mass",
      "phy_position_x",
      "phy_position_xprevious",
      "phy_position_y",
      "phy_position_yprevious",
      "phy_rotation",
      "phy_sleeping",
      "phy_speed",
      "phy_speed_x",
      "phy_speed_y",
      "player_avatar_sprite",
      "player_avatar_url",
      "player_id",
      "player_local",
      "player_type",
      "player_user_id",
      "program_directory",
      "rollback_api_server",
      "rollback_confirmed_frame",
      "rollback_current_frame",
      "rollback_event_id",
      "rollback_event_param",
      "rollback_game_running",
      "room",
      "room_first",
      "room_height",
      "room_last",
      "room_persistent",
      "room_speed",
      "room_width",
      "score",
      "script",
      "sequence_instance",
      "solid",
      "speed",
      "sprite_height",
      "sprite_index",
      "sprite_width",
      "sprite_xoffset",
      "sprite_yoffset",
      "stacktrace",
      "temp_directory",
      "timeline_index",
      "timeline_loop",
      "timeline_position",
      "timeline_running",
      "timeline_speed",
      "view_camera",
      "view_current",
      "view_enabled",
      "view_hport",
      "view_surface_id",
      "view_visible",
      "view_wport",
      "view_xport",
      "view_yport",
      "visible",
      "vspeed",
      "webgl_enabled",
      "working_directory",
      "x",
      "xprevious",
      "xstart",
      "y",
      "yprevious",
      "ystart"
    ];
    return {
      name: "GML",
      case_insensitive: false,
      // language is case-insensitive
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_INS2,
        symbol: SYMBOLS,
        "variable.language": LANGUAGE_VARIABLES
      },
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE
      ]
    };
  }
  function golo(hljs) {
    const KEYWORDS2 = [
      "println",
      "readln",
      "print",
      "import",
      "module",
      "function",
      "local",
      "return",
      "let",
      "var",
      "while",
      "for",
      "foreach",
      "times",
      "in",
      "case",
      "when",
      "match",
      "with",
      "break",
      "continue",
      "augment",
      "augmentation",
      "each",
      "find",
      "filter",
      "reduce",
      "if",
      "then",
      "else",
      "otherwise",
      "try",
      "catch",
      "finally",
      "raise",
      "throw",
      "orIfNull",
      "DynamicObject|10",
      "DynamicVariable",
      "struct",
      "Observable",
      "map",
      "set",
      "vector",
      "list",
      "array"
    ];
    return {
      name: "Golo",
      keywords: {
        keyword: KEYWORDS2,
        literal: [
          "true",
          "false",
          "null"
        ]
      },
      contains: [
        hljs.HASH_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "@[A-Za-z]+"
        }
      ]
    };
  }
  function gradle(hljs) {
    const KEYWORDS2 = [
      "task",
      "project",
      "allprojects",
      "subprojects",
      "artifacts",
      "buildscript",
      "configurations",
      "dependencies",
      "repositories",
      "sourceSets",
      "description",
      "delete",
      "from",
      "into",
      "include",
      "exclude",
      "source",
      "classpath",
      "destinationDir",
      "includes",
      "options",
      "sourceCompatibility",
      "targetCompatibility",
      "group",
      "flatDir",
      "doLast",
      "doFirst",
      "flatten",
      "todir",
      "fromdir",
      "ant",
      "def",
      "abstract",
      "break",
      "case",
      "catch",
      "continue",
      "default",
      "do",
      "else",
      "extends",
      "final",
      "finally",
      "for",
      "if",
      "implements",
      "instanceof",
      "native",
      "new",
      "private",
      "protected",
      "public",
      "return",
      "static",
      "switch",
      "synchronized",
      "throw",
      "throws",
      "transient",
      "try",
      "volatile",
      "while",
      "strictfp",
      "package",
      "import",
      "false",
      "null",
      "super",
      "this",
      "true",
      "antlrtask",
      "checkstyle",
      "codenarc",
      "copy",
      "boolean",
      "byte",
      "char",
      "class",
      "double",
      "float",
      "int",
      "interface",
      "long",
      "short",
      "void",
      "compile",
      "runTime",
      "file",
      "fileTree",
      "abs",
      "any",
      "append",
      "asList",
      "asWritable",
      "call",
      "collect",
      "compareTo",
      "count",
      "div",
      "dump",
      "each",
      "eachByte",
      "eachFile",
      "eachLine",
      "every",
      "find",
      "findAll",
      "flatten",
      "getAt",
      "getErr",
      "getIn",
      "getOut",
      "getText",
      "grep",
      "immutable",
      "inject",
      "inspect",
      "intersect",
      "invokeMethods",
      "isCase",
      "join",
      "leftShift",
      "minus",
      "multiply",
      "newInputStream",
      "newOutputStream",
      "newPrintWriter",
      "newReader",
      "newWriter",
      "next",
      "plus",
      "pop",
      "power",
      "previous",
      "print",
      "println",
      "push",
      "putAt",
      "read",
      "readBytes",
      "readLines",
      "reverse",
      "reverseEach",
      "round",
      "size",
      "sort",
      "splitEachLine",
      "step",
      "subMap",
      "times",
      "toInteger",
      "toList",
      "tokenize",
      "upto",
      "waitForOrKill",
      "withPrintWriter",
      "withReader",
      "withStream",
      "withWriter",
      "withWriterAppend",
      "write",
      "writeLine"
    ];
    return {
      name: "Gradle",
      case_insensitive: true,
      keywords: KEYWORDS2,
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.NUMBER_MODE,
        hljs.REGEXP_MODE
      ]
    };
  }
  function variants(variants2, obj = {}) {
    obj.variants = variants2;
    return obj;
  }
  function groovy(hljs) {
    const regex = hljs.regex;
    const IDENT_RE2 = "[A-Za-z0-9_$]+";
    const COMMENT2 = variants([
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.COMMENT(
        "/\\*\\*",
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              // eat up @'s in emails to prevent them to be recognized as doctags
              begin: /\w+@/,
              relevance: 0
            },
            {
              className: "doctag",
              begin: "@[A-Za-z]+"
            }
          ]
        }
      )
    ]);
    const REGEXP = {
      className: "regexp",
      begin: /~?\/[^\/\n]+\//,
      contains: [hljs.BACKSLASH_ESCAPE]
    };
    const NUMBER = variants([
      hljs.BINARY_NUMBER_MODE,
      hljs.C_NUMBER_MODE
    ]);
    const STRING = variants(
      [
        {
          begin: /"""/,
          end: /"""/
        },
        {
          begin: /'''/,
          end: /'''/
        },
        {
          begin: "\\$/",
          end: "/\\$",
          relevance: 10
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE
      ],
      { className: "string" }
    );
    const CLASS_DEFINITION = {
      match: [
        /(class|interface|trait|enum|record|extends|implements)/,
        /\s+/,
        hljs.UNDERSCORE_IDENT_RE
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    const TYPES2 = [
      "byte",
      "short",
      "char",
      "int",
      "long",
      "boolean",
      "float",
      "double",
      "void"
    ];
    const KEYWORDS2 = [
      // groovy specific keywords
      "def",
      "as",
      "in",
      "assert",
      "trait",
      // common keywords with Java
      "abstract",
      "static",
      "volatile",
      "transient",
      "public",
      "private",
      "protected",
      "synchronized",
      "final",
      "class",
      "interface",
      "enum",
      "if",
      "else",
      "for",
      "while",
      "switch",
      "case",
      "break",
      "default",
      "continue",
      "throw",
      "throws",
      "try",
      "catch",
      "finally",
      "implements",
      "extends",
      "new",
      "import",
      "package",
      "return",
      "instanceof",
      "var"
    ];
    return {
      name: "Groovy",
      keywords: {
        "variable.language": "this super",
        literal: "true false null",
        type: TYPES2,
        keyword: KEYWORDS2
      },
      contains: [
        hljs.SHEBANG({
          binary: "groovy",
          relevance: 10
        }),
        COMMENT2,
        STRING,
        REGEXP,
        NUMBER,
        CLASS_DEFINITION,
        {
          className: "meta",
          begin: "@[A-Za-z]+",
          relevance: 0
        },
        {
          // highlight map keys and named parameters as attrs
          className: "attr",
          begin: IDENT_RE2 + "[ 	]*:",
          relevance: 0
        },
        {
          // catch middle element of the ternary operator
          // to avoid highlight it as a label, named parameter, or map key
          begin: /\?/,
          end: /:/,
          relevance: 0,
          contains: [
            COMMENT2,
            STRING,
            REGEXP,
            NUMBER,
            "self"
          ]
        },
        {
          // highlight labeled statements
          className: "symbol",
          begin: "^[ 	]*" + regex.lookahead(IDENT_RE2 + ":"),
          excludeBegin: true,
          end: IDENT_RE2 + ":",
          relevance: 0
        }
      ],
      illegal: /#|<\//
    };
  }
  function haml(hljs) {
    return {
      name: "HAML",
      case_insensitive: true,
      contains: [
        {
          className: "meta",
          begin: "^!!!( (5|1\\.1|Strict|Frameset|Basic|Mobile|RDFa|XML\\b.*))?$",
          relevance: 10
        },
        // FIXME these comments should be allowed to span indented lines
        hljs.COMMENT(
          "^\\s*(!=#|=#|-#|/).*$",
          null,
          { relevance: 0 }
        ),
        {
          begin: "^\\s*(-|=|!=)(?!#)",
          end: /$/,
          subLanguage: "ruby",
          excludeBegin: true,
          excludeEnd: true
        },
        {
          className: "tag",
          begin: "^\\s*%",
          contains: [
            {
              className: "selector-tag",
              begin: "\\w+"
            },
            {
              className: "selector-id",
              begin: "#[\\w-]+"
            },
            {
              className: "selector-class",
              begin: "\\.[\\w-]+"
            },
            {
              begin: /\{\s*/,
              end: /\s*\}/,
              contains: [
                {
                  begin: ":\\w+\\s*=>",
                  end: ",\\s+",
                  returnBegin: true,
                  endsWithParent: true,
                  contains: [
                    {
                      className: "attr",
                      begin: ":\\w+"
                    },
                    hljs.APOS_STRING_MODE,
                    hljs.QUOTE_STRING_MODE,
                    {
                      begin: "\\w+",
                      relevance: 0
                    }
                  ]
                }
              ]
            },
            {
              begin: "\\(\\s*",
              end: "\\s*\\)",
              excludeEnd: true,
              contains: [
                {
                  begin: "\\w+\\s*=",
                  end: "\\s+",
                  returnBegin: true,
                  endsWithParent: true,
                  contains: [
                    {
                      className: "attr",
                      begin: "\\w+",
                      relevance: 0
                    },
                    hljs.APOS_STRING_MODE,
                    hljs.QUOTE_STRING_MODE,
                    {
                      begin: "\\w+",
                      relevance: 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        { begin: "^\\s*[=~]\\s*" },
        {
          begin: /#\{/,
          end: /\}/,
          subLanguage: "ruby",
          excludeBegin: true,
          excludeEnd: true
        }
      ]
    };
  }
  function handlebars(hljs) {
    const regex = hljs.regex;
    const BUILT_INS2 = {
      $pattern: /[\w.\/]+/,
      built_in: [
        "action",
        "bindattr",
        "collection",
        "component",
        "concat",
        "debugger",
        "each",
        "each-in",
        "get",
        "hash",
        "if",
        "in",
        "input",
        "link-to",
        "loc",
        "log",
        "lookup",
        "mut",
        "outlet",
        "partial",
        "query-params",
        "render",
        "template",
        "textarea",
        "unbound",
        "unless",
        "view",
        "with",
        "yield"
      ]
    };
    const LITERALS2 = {
      $pattern: /[\w.\/]+/,
      literal: [
        "true",
        "false",
        "undefined",
        "null"
      ]
    };
    const DOUBLE_QUOTED_ID_REGEX = /""|"[^"]+"/;
    const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;
    const BRACKET_QUOTED_ID_REGEX = /\[\]|\[[^\]]+\]/;
    const PLAIN_ID_REGEX = /[^\s!"#%&'()*+,.\/;<=>@\[\\\]^`{|}~]+/;
    const PATH_DELIMITER_REGEX = /(\.|\/)/;
    const ANY_ID = regex.either(
      DOUBLE_QUOTED_ID_REGEX,
      SINGLE_QUOTED_ID_REGEX,
      BRACKET_QUOTED_ID_REGEX,
      PLAIN_ID_REGEX
    );
    const IDENTIFIER_REGEX = regex.concat(
      regex.optional(/\.|\.\/|\//),
      // relative or absolute path
      ANY_ID,
      regex.anyNumberOfTimes(regex.concat(
        PATH_DELIMITER_REGEX,
        ANY_ID
      ))
    );
    const HASH_PARAM_REGEX = regex.concat(
      "(",
      BRACKET_QUOTED_ID_REGEX,
      "|",
      PLAIN_ID_REGEX,
      ")(?==)"
    );
    const HELPER_NAME_OR_PATH_EXPRESSION = { begin: IDENTIFIER_REGEX };
    const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, { keywords: LITERALS2 });
    const SUB_EXPRESSION = {
      begin: /\(/,
      end: /\)/
      // the "contains" is added below when all necessary sub-modes are defined
    };
    const HASH = {
      // fka "attribute-assignment", parameters of the form 'key=value'
      className: "attr",
      begin: HASH_PARAM_REGEX,
      relevance: 0,
      starts: {
        begin: /=/,
        end: /=/,
        starts: { contains: [
          hljs.NUMBER_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.APOS_STRING_MODE,
          HELPER_PARAMETER,
          SUB_EXPRESSION
        ] }
      }
    };
    const BLOCK_PARAMS = {
      // parameters of the form '{{#with x as | y |}}...{{/with}}'
      begin: /as\s+\|/,
      keywords: { keyword: "as" },
      end: /\|/,
      contains: [
        {
          // define sub-mode in order to prevent highlighting of block-parameter named "as"
          begin: /\w+/
        }
      ]
    };
    const HELPER_PARAMETERS = {
      contains: [
        hljs.NUMBER_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        BLOCK_PARAMS,
        HASH,
        HELPER_PARAMETER,
        SUB_EXPRESSION
      ],
      returnEnd: true
      // the property "end" is defined through inheritance when the mode is used. If depends
      // on the surrounding mode, but "endsWithParent" does not work here (i.e. it includes the
      // end-token of the surrounding mode)
    };
    const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
      className: "name",
      keywords: BUILT_INS2,
      starts: hljs.inherit(HELPER_PARAMETERS, { end: /\)/ })
    });
    SUB_EXPRESSION.contains = [SUB_EXPRESSION_CONTENTS];
    const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
      keywords: BUILT_INS2,
      className: "name",
      starts: hljs.inherit(HELPER_PARAMETERS, { end: /\}\}/ })
    });
    const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
      keywords: BUILT_INS2,
      className: "name"
    });
    const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
      className: "name",
      keywords: BUILT_INS2,
      starts: hljs.inherit(HELPER_PARAMETERS, { end: /\}\}/ })
    });
    const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {
      begin: /\\\{\{/,
      skip: true
    };
    const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {
      begin: /\\\\(?=\{\{)/,
      skip: true
    };
    return {
      name: "Handlebars",
      aliases: [
        "hbs",
        "html.hbs",
        "html.handlebars",
        "htmlbars"
      ],
      case_insensitive: true,
      subLanguage: "xml",
      contains: [
        ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,
        PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,
        hljs.COMMENT(/\{\{!--/, /--\}\}/),
        hljs.COMMENT(/\{\{!/, /\}\}/),
        {
          // open raw block "{{{{raw}}}} content not evaluated {{{{/raw}}}}"
          className: "template-tag",
          begin: /\{\{\{\{(?!\/)/,
          end: /\}\}\}\}/,
          contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],
          starts: {
            end: /\{\{\{\{\//,
            returnEnd: true,
            subLanguage: "xml"
          }
        },
        {
          // close raw block
          className: "template-tag",
          begin: /\{\{\{\{\//,
          end: /\}\}\}\}/,
          contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]
        },
        {
          // open block statement
          className: "template-tag",
          begin: /\{\{#/,
          end: /\}\}/,
          contains: [OPENING_BLOCK_MUSTACHE_CONTENTS]
        },
        {
          className: "template-tag",
          begin: /\{\{(?=else\}\})/,
          end: /\}\}/,
          keywords: "else"
        },
        {
          className: "template-tag",
          begin: /\{\{(?=else if)/,
          end: /\}\}/,
          keywords: "else if"
        },
        {
          // closing block statement
          className: "template-tag",
          begin: /\{\{\//,
          end: /\}\}/,
          contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]
        },
        {
          // template variable or helper-call that is NOT html-escaped
          className: "template-variable",
          begin: /\{\{\{/,
          end: /\}\}\}/,
          contains: [BASIC_MUSTACHE_CONTENTS]
        },
        {
          // template variable or helper-call that is html-escaped
          className: "template-variable",
          begin: /\{\{/,
          end: /\}\}/,
          contains: [BASIC_MUSTACHE_CONTENTS]
        }
      ]
    };
  }
  function haskell(hljs) {
    const decimalDigits2 = "([0-9]_*)+";
    const hexDigits2 = "([0-9a-fA-F]_*)+";
    const binaryDigits = "([01]_*)+";
    const octalDigits = "([0-7]_*)+";
    const ascSymbol = "[!#$%&*+.\\/<=>?@\\\\^~-]";
    const uniSymbol = "(\\p{S}|\\p{P})";
    const special = "[(),;\\[\\]`|{}]";
    const symbol = `(${ascSymbol}|(?!(${special}|[_:"']))${uniSymbol})`;
    const COMMENT2 = { variants: [
      // Double dash forms a valid comment only if it's not part of legal lexeme.
      // See: Haskell 98 report: https://www.haskell.org/onlinereport/lexemes.html
      //
      // The commented code does the job, but we can't use negative lookbehind,
      // due to poor support by Safari browser.
      // > hljs.COMMENT(`(?<!${symbol})--+(?!${symbol})`, '$'),
      // So instead, we'll add a no-markup rule before the COMMENT rule in the rules list
      // to match the problematic infix operators that contain double dash.
      hljs.COMMENT("--+", "$"),
      hljs.COMMENT(
        /\{-/,
        /-\}/,
        { contains: ["self"] }
      )
    ] };
    const PRAGMA = {
      className: "meta",
      begin: /\{-#/,
      end: /#-\}/
    };
    const PREPROCESSOR = {
      className: "meta",
      begin: "^#",
      end: "$"
    };
    const CONSTRUCTOR = {
      className: "type",
      begin: "\\b[A-Z][\\w']*",
      // TODO: other constructors (build-in, infix).
      relevance: 0
    };
    const LIST = {
      begin: "\\(",
      end: "\\)",
      illegal: '"',
      contains: [
        PRAGMA,
        PREPROCESSOR,
        {
          className: "type",
          begin: "\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"
        },
        hljs.inherit(hljs.TITLE_MODE, { begin: "[_a-z][\\w']*" }),
        COMMENT2
      ]
    };
    const RECORD = {
      begin: /\{/,
      end: /\}/,
      contains: LIST.contains
    };
    const NUMBER = {
      className: "number",
      relevance: 0,
      variants: [
        // decimal floating-point-literal (subsumes decimal-literal)
        { match: `\\b(${decimalDigits2})(\\.(${decimalDigits2}))?([eE][+-]?(${decimalDigits2}))?\\b` },
        // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
        { match: `\\b0[xX]_*(${hexDigits2})(\\.(${hexDigits2}))?([pP][+-]?(${decimalDigits2}))?\\b` },
        // octal-literal
        { match: `\\b0[oO](${octalDigits})\\b` },
        // binary-literal
        { match: `\\b0[bB](${binaryDigits})\\b` }
      ]
    };
    return {
      name: "Haskell",
      aliases: ["hs"],
      keywords: "let in if then else case of where do module import hiding qualified type data newtype deriving class instance as default infix infixl infixr foreign export ccall stdcall cplusplus jvm dotnet safe unsafe family forall mdo proc rec",
      unicodeRegex: true,
      contains: [
        // Top-level constructions.
        {
          beginKeywords: "module",
          end: "where",
          keywords: "module where",
          contains: [
            LIST,
            COMMENT2
          ],
          illegal: "\\W\\.|;"
        },
        {
          begin: "\\bimport\\b",
          end: "$",
          keywords: "import qualified as hiding",
          contains: [
            LIST,
            COMMENT2
          ],
          illegal: "\\W\\.|;"
        },
        {
          className: "class",
          begin: "^(\\s*)?(class|instance)\\b",
          end: "where",
          keywords: "class family instance where",
          contains: [
            CONSTRUCTOR,
            LIST,
            COMMENT2
          ]
        },
        {
          className: "class",
          begin: "\\b(data|(new)?type)\\b",
          end: "$",
          keywords: "data family type newtype deriving",
          contains: [
            PRAGMA,
            CONSTRUCTOR,
            LIST,
            RECORD,
            COMMENT2
          ]
        },
        {
          beginKeywords: "default",
          end: "$",
          contains: [
            CONSTRUCTOR,
            LIST,
            COMMENT2
          ]
        },
        {
          beginKeywords: "infix infixl infixr",
          end: "$",
          contains: [
            hljs.C_NUMBER_MODE,
            COMMENT2
          ]
        },
        {
          begin: "\\bforeign\\b",
          end: "$",
          keywords: "foreign import export ccall stdcall cplusplus jvm dotnet safe unsafe",
          contains: [
            CONSTRUCTOR,
            hljs.QUOTE_STRING_MODE,
            COMMENT2
          ]
        },
        {
          className: "meta",
          begin: "#!\\/usr\\/bin\\/env runhaskell",
          end: "$"
        },
        // "Whitespaces".
        PRAGMA,
        PREPROCESSOR,
        // Literals and names.
        // Single characters.
        {
          scope: "string",
          begin: /'(?=\\?.')/,
          end: /'/,
          contains: [
            {
              scope: "char.escape",
              match: /\\./
            }
          ]
        },
        hljs.QUOTE_STRING_MODE,
        NUMBER,
        CONSTRUCTOR,
        hljs.inherit(hljs.TITLE_MODE, { begin: "^[_a-z][\\w']*" }),
        // No markup, prevents infix operators from being recognized as comments.
        { begin: `(?!-)${symbol}--+|--+(?!-)${symbol}` },
        COMMENT2,
        {
          // No markup, relevance booster
          begin: "->|<-"
        }
      ]
    };
  }
  function haxe(hljs) {
    const IDENT_RE2 = "[a-zA-Z_$][a-zA-Z0-9_$]*";
    const HAXE_NUMBER_RE = /(-?)(\b0[xX][a-fA-F0-9_]+|(\b\d+(\.[\d_]*)?|\.[\d_]+)(([eE][-+]?\d+)|i32|u32|i64|f64)?)/;
    const HAXE_BASIC_TYPES = "Int Float String Bool Dynamic Void Array ";
    return {
      name: "Haxe",
      aliases: ["hx"],
      keywords: {
        keyword: "abstract break case cast catch continue default do dynamic else enum extern final for function here if import in inline is macro never new override package private get set public return static super switch this throw trace try typedef untyped using var while " + HAXE_BASIC_TYPES,
        built_in: "trace this",
        literal: "true false null _"
      },
      contains: [
        {
          className: "string",
          // interpolate-able strings
          begin: "'",
          end: "'",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            {
              className: "subst",
              // interpolation
              begin: /\$\{/,
              end: /\}/
            },
            {
              className: "subst",
              // interpolation
              begin: /\$/,
              end: /\W\}/
            }
          ]
        },
        hljs.QUOTE_STRING_MODE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "number",
          begin: HAXE_NUMBER_RE,
          relevance: 0
        },
        {
          className: "variable",
          begin: "\\$" + IDENT_RE2
        },
        {
          className: "meta",
          // compiler meta
          begin: /@:?/,
          end: /\(|$/,
          excludeEnd: true
        },
        {
          className: "meta",
          // compiler conditionals
          begin: "#",
          end: "$",
          keywords: { keyword: "if else elseif end error" }
        },
        {
          className: "type",
          // function types
          begin: /:[ \t]*/,
          end: /[^A-Za-z0-9_ \t\->]/,
          excludeBegin: true,
          excludeEnd: true,
          relevance: 0
        },
        {
          className: "type",
          // types
          begin: /:[ \t]*/,
          end: /\W/,
          excludeBegin: true,
          excludeEnd: true
        },
        {
          className: "type",
          // instantiation
          beginKeywords: "new",
          end: /\W/,
          excludeBegin: true,
          excludeEnd: true
        },
        {
          className: "title.class",
          // enums
          beginKeywords: "enum",
          end: /\{/,
          contains: [hljs.TITLE_MODE]
        },
        {
          className: "title.class",
          // abstracts
          begin: "\\babstract\\b(?=\\s*" + hljs.IDENT_RE + "\\s*\\()",
          end: /[\{$]/,
          contains: [
            {
              className: "type",
              begin: /\(/,
              end: /\)/,
              excludeBegin: true,
              excludeEnd: true
            },
            {
              className: "type",
              begin: /from +/,
              end: /\W/,
              excludeBegin: true,
              excludeEnd: true
            },
            {
              className: "type",
              begin: /to +/,
              end: /\W/,
              excludeBegin: true,
              excludeEnd: true
            },
            hljs.TITLE_MODE
          ],
          keywords: { keyword: "abstract from to" }
        },
        {
          className: "title.class",
          // classes
          begin: /\b(class|interface) +/,
          end: /[\{$]/,
          excludeEnd: true,
          keywords: "class interface",
          contains: [
            {
              className: "keyword",
              begin: /\b(extends|implements) +/,
              keywords: "extends implements",
              contains: [
                {
                  className: "type",
                  begin: hljs.IDENT_RE,
                  relevance: 0
                }
              ]
            },
            hljs.TITLE_MODE
          ]
        },
        {
          className: "title.function",
          beginKeywords: "function",
          end: /\(/,
          excludeEnd: true,
          illegal: /\S/,
          contains: [hljs.TITLE_MODE]
        }
      ],
      illegal: /<\//
    };
  }
  function hsp(hljs) {
    return {
      name: "HSP",
      case_insensitive: true,
      keywords: {
        $pattern: /[\w._]+/,
        keyword: "goto gosub return break repeat loop continue wait await dim sdim foreach dimtype dup dupptr end stop newmod delmod mref run exgoto on mcall assert logmes newlab resume yield onexit onerror onkey onclick oncmd exist delete mkdir chdir dirlist bload bsave bcopy memfile if else poke wpoke lpoke getstr chdpm memexpand memcpy memset notesel noteadd notedel noteload notesave randomize noteunsel noteget split strrep setease button chgdisp exec dialog mmload mmplay mmstop mci pset pget syscolor mes print title pos circle cls font sysfont objsize picload color palcolor palette redraw width gsel gcopy gzoom gmode bmpsave hsvcolor getkey listbox chkbox combox input mesbox buffer screen bgscr mouse objsel groll line clrobj boxf objprm objmode stick grect grotate gsquare gradf objimage objskip objenable celload celdiv celput newcom querycom delcom cnvstow comres axobj winobj sendmsg comevent comevarg sarrayconv callfunc cnvwtos comevdisp libptr system hspstat hspver stat cnt err strsize looplev sublev iparam wparam lparam refstr refdval int rnd strlen length length2 length3 length4 vartype gettime peek wpeek lpeek varptr varuse noteinfo instr abs limit getease str strmid strf getpath strtrim sin cos tan atan sqrt double absf expf logf limitf powf geteasef mousex mousey mousew hwnd hinstance hdc ginfo objinfo dirinfo sysinfo thismod __hspver__ __hsp30__ __date__ __time__ __line__ __file__ _debug __hspdef__ and or xor not screen_normal screen_palette screen_hide screen_fixedsize screen_tool screen_frame gmode_gdi gmode_mem gmode_rgb0 gmode_alpha gmode_rgb0alpha gmode_add gmode_sub gmode_pixela ginfo_mx ginfo_my ginfo_act ginfo_sel ginfo_wx1 ginfo_wy1 ginfo_wx2 ginfo_wy2 ginfo_vx ginfo_vy ginfo_sizex ginfo_sizey ginfo_winx ginfo_winy ginfo_mesx ginfo_mesy ginfo_r ginfo_g ginfo_b ginfo_paluse ginfo_dispx ginfo_dispy ginfo_cx ginfo_cy ginfo_intid ginfo_newid ginfo_sx ginfo_sy objinfo_mode objinfo_bmscr objinfo_hwnd notemax notesize dir_cur dir_exe dir_win dir_sys dir_cmdline dir_desktop dir_mydoc dir_tv font_normal font_bold font_italic font_underline font_strikeout font_antialias objmode_normal objmode_guifont objmode_usefont gsquare_grad msgothic msmincho do until while wend for next _break _continue switch case default swbreak swend ddim ldim alloc m_pi rad2deg deg2rad ease_linear ease_quad_in ease_quad_out ease_quad_inout ease_cubic_in ease_cubic_out ease_cubic_inout ease_quartic_in ease_quartic_out ease_quartic_inout ease_bounce_in ease_bounce_out ease_bounce_inout ease_shake_in ease_shake_out ease_shake_inout ease_loop"
      },
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        {
          // multi-line string
          className: "string",
          begin: /\{"/,
          end: /"\}/,
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        hljs.COMMENT(";", "$", { relevance: 0 }),
        {
          // pre-processor
          className: "meta",
          begin: "#",
          end: "$",
          keywords: { keyword: "addion cfunc cmd cmpopt comfunc const defcfunc deffunc define else endif enum epack func global if ifdef ifndef include modcfunc modfunc modinit modterm module pack packopt regcmd runtime undef usecom uselib" },
          contains: [
            hljs.inherit(hljs.QUOTE_STRING_MODE, { className: "string" }),
            hljs.NUMBER_MODE,
            hljs.C_NUMBER_MODE,
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          // label
          className: "symbol",
          begin: "^\\*(\\w+|@)"
        },
        hljs.NUMBER_MODE,
        hljs.C_NUMBER_MODE
      ]
    };
  }
  function http(hljs) {
    const regex = hljs.regex;
    const VERSION = "HTTP/([32]|1\\.[01])";
    const HEADER_NAME = /[A-Za-z][A-Za-z0-9-]*/;
    const HEADER = {
      className: "attribute",
      begin: regex.concat("^", HEADER_NAME, "(?=\\:\\s)"),
      starts: { contains: [
        {
          className: "punctuation",
          begin: /: /,
          relevance: 0,
          starts: {
            end: "$",
            relevance: 0
          }
        }
      ] }
    };
    const HEADERS_AND_BODY = [
      HEADER,
      {
        begin: "\\n\\n",
        starts: {
          subLanguage: [],
          endsWithParent: true
        }
      }
    ];
    return {
      name: "HTTP",
      aliases: ["https"],
      illegal: /\S/,
      contains: [
        // response
        {
          begin: "^(?=" + VERSION + " \\d{3})",
          end: /$/,
          contains: [
            {
              className: "meta",
              begin: VERSION
            },
            {
              className: "number",
              begin: "\\b\\d{3}\\b"
            }
          ],
          starts: {
            end: /\b\B/,
            illegal: /\S/,
            contains: HEADERS_AND_BODY
          }
        },
        // request
        {
          begin: "(?=^[A-Z]+ (.*?) " + VERSION + "$)",
          end: /$/,
          contains: [
            {
              className: "string",
              begin: " ",
              end: " ",
              excludeBegin: true,
              excludeEnd: true
            },
            {
              className: "meta",
              begin: VERSION
            },
            {
              className: "keyword",
              begin: "[A-Z]+"
            }
          ],
          starts: {
            end: /\b\B/,
            illegal: /\S/,
            contains: HEADERS_AND_BODY
          }
        },
        // to allow headers to work even without a preamble
        hljs.inherit(HEADER, { relevance: 0 })
      ]
    };
  }
  function hy(hljs) {
    const SYMBOLSTART = "a-zA-Z_\\-!.?+*=<>&#'";
    const SYMBOL_RE = "[" + SYMBOLSTART + "][" + SYMBOLSTART + "0-9/;:]*";
    const keywords2 = {
      $pattern: SYMBOL_RE,
      built_in: (
        // keywords
        "!= % %= & &= * ** **= *= *map + += , --build-class-- --import-- -= . / // //= /= < << <<= <= = > >= >> >>= @ @= ^ ^= abs accumulate all and any ap-compose ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast callable calling-module-name car case cdr chain chr coll? combinations compile compress cond cons cons? continue count curry cut cycle dec def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first flatten float? fn fnc fnr for for* format fraction genexpr gensym get getattr global globals group-by hasattr hash hex id identity if if* if-not if-python2 import in inc input instance? integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass iter iterable? iterate iterator? keyword keyword? lambda last len let lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all map max merge-with method-decorator min multi-decorator multicombinations name neg? next none? nonlocal not not-in not? nth numeric? oct odd? open or ord partition permutations pos? post-route postwalk pow prewalk print product profile/calls profile/cpu put-route quasiquote quote raise range read read-str recursive-replace reduce remove repeat repeatedly repr require rest round route route-with-methods rwm second seq set-comp setattr setv some sorted string string? sum switch symbol? take take-nth take-while tee try unless unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms xi xor yield yield-from zero? zip zip-longest | |= ~"
      )
    };
    const SIMPLE_NUMBER_RE = "[-+]?\\d+(\\.\\d+)?";
    const SYMBOL = {
      begin: SYMBOL_RE,
      relevance: 0
    };
    const NUMBER = {
      className: "number",
      begin: SIMPLE_NUMBER_RE,
      relevance: 0
    };
    const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
    const COMMENT2 = hljs.COMMENT(
      ";",
      "$",
      { relevance: 0 }
    );
    const LITERAL = {
      className: "literal",
      begin: /\b([Tt]rue|[Ff]alse|nil|None)\b/
    };
    const COLLECTION = {
      begin: "[\\[\\{]",
      end: "[\\]\\}]",
      relevance: 0
    };
    const HINT = {
      className: "comment",
      begin: "\\^" + SYMBOL_RE
    };
    const HINT_COL = hljs.COMMENT("\\^\\{", "\\}");
    const KEY = {
      className: "symbol",
      begin: "[:]{1,2}" + SYMBOL_RE
    };
    const LIST = {
      begin: "\\(",
      end: "\\)"
    };
    const BODY = {
      endsWithParent: true,
      relevance: 0
    };
    const NAME = {
      className: "name",
      relevance: 0,
      keywords: keywords2,
      begin: SYMBOL_RE,
      starts: BODY
    };
    const DEFAULT_CONTAINS = [
      LIST,
      STRING,
      HINT,
      HINT_COL,
      COMMENT2,
      KEY,
      COLLECTION,
      NUMBER,
      LITERAL,
      SYMBOL
    ];
    LIST.contains = [
      hljs.COMMENT("comment", ""),
      NAME,
      BODY
    ];
    BODY.contains = DEFAULT_CONTAINS;
    COLLECTION.contains = DEFAULT_CONTAINS;
    return {
      name: "Hy",
      aliases: ["hylang"],
      illegal: /\S/,
      contains: [
        hljs.SHEBANG(),
        LIST,
        STRING,
        HINT,
        HINT_COL,
        COMMENT2,
        KEY,
        COLLECTION,
        NUMBER,
        LITERAL
      ]
    };
  }
  function inform7(hljs) {
    const START_BRACKET = "\\[";
    const END_BRACKET = "\\]";
    return {
      name: "Inform 7",
      aliases: ["i7"],
      case_insensitive: true,
      keywords: {
        // Some keywords more or less unique to I7, for relevance.
        keyword: (
          // kind:
          "thing room person man woman animal container supporter backdrop door scenery open closed locked inside gender is are say understand kind of rule"
        )
      },
      contains: [
        {
          className: "string",
          begin: '"',
          end: '"',
          relevance: 0,
          contains: [
            {
              className: "subst",
              begin: START_BRACKET,
              end: END_BRACKET
            }
          ]
        },
        {
          className: "section",
          begin: /^(Volume|Book|Part|Chapter|Section|Table)\b/,
          end: "$"
        },
        {
          // Rule definition
          // This is here for relevance.
          begin: /^(Check|Carry out|Report|Instead of|To|Rule|When|Before|After)\b/,
          end: ":",
          contains: [
            {
              // Rule name
              begin: "\\(This",
              end: "\\)"
            }
          ]
        },
        {
          className: "comment",
          begin: START_BRACKET,
          end: END_BRACKET,
          contains: ["self"]
        }
      ]
    };
  }
  function irpf90(hljs) {
    const regex = hljs.regex;
    const PARAMS = {
      className: "params",
      begin: "\\(",
      end: "\\)"
    };
    const OPTIONAL_NUMBER_SUFFIX = /(_[a-z_\d]+)?/;
    const OPTIONAL_NUMBER_EXP = /([de][+-]?\d+)?/;
    const NUMBER = {
      className: "number",
      variants: [
        { begin: regex.concat(/\b\d+/, /\.(\d*)/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
        { begin: regex.concat(/\b\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
        { begin: regex.concat(/\.\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) }
      ],
      relevance: 0
    };
    const F_KEYWORDS = {
      literal: ".False. .True.",
      keyword: "kind do while private call intrinsic where elsewhere type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. goto save else use module select case access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit continue format pause cycle exit c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg synchronous nopass non_overridable pass protected volatile abstract extends import non_intrinsic value deferred generic final enumerator class associate bind enum c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure integer real character complex logical dimension allocatable|10 parameter external implicit|10 none double precision assign intent optional pointer target in out common equivalence data begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read",
      built_in: "alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr num_images parity popcnt poppar shifta shiftl shiftr this_image IRP_ALIGN irp_here"
    };
    return {
      name: "IRPF90",
      case_insensitive: true,
      keywords: F_KEYWORDS,
      illegal: /\/\*/,
      contains: [
        hljs.inherit(hljs.APOS_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        hljs.inherit(hljs.QUOTE_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        {
          className: "function",
          beginKeywords: "subroutine function program",
          illegal: "[${=\\n]",
          contains: [
            hljs.UNDERSCORE_TITLE_MODE,
            PARAMS
          ]
        },
        hljs.COMMENT("!", "$", { relevance: 0 }),
        hljs.COMMENT("begin_doc", "end_doc", { relevance: 10 }),
        NUMBER
      ]
    };
  }
  function isbl(hljs) {
    const UNDERSCORE_IDENT_RE2 = "[A-Za-zА-Яа-яёЁ_!][A-Za-zА-Яа-яёЁ_0-9]*";
    const FUNCTION_NAME_IDENT_RE = "[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]*";
    const KEYWORD = "and и else иначе endexcept endfinally endforeach конецвсе endif конецесли endwhile конецпока except exitfor finally foreach все if если in в not не or или try while пока ";
    const sysres_constants = "SYSRES_CONST_ACCES_RIGHT_TYPE_EDIT SYSRES_CONST_ACCES_RIGHT_TYPE_FULL SYSRES_CONST_ACCES_RIGHT_TYPE_VIEW SYSRES_CONST_ACCESS_MODE_REQUISITE_CODE SYSRES_CONST_ACCESS_NO_ACCESS_VIEW SYSRES_CONST_ACCESS_NO_ACCESS_VIEW_CODE SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW SYSRES_CONST_ACCESS_RIGHTS_VIEW_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_TYPE_CHANGE SYSRES_CONST_ACCESS_TYPE_CHANGE_CODE SYSRES_CONST_ACCESS_TYPE_EXISTS SYSRES_CONST_ACCESS_TYPE_EXISTS_CODE SYSRES_CONST_ACCESS_TYPE_FULL SYSRES_CONST_ACCESS_TYPE_FULL_CODE SYSRES_CONST_ACCESS_TYPE_VIEW SYSRES_CONST_ACCESS_TYPE_VIEW_CODE SYSRES_CONST_ACTION_TYPE_ABORT SYSRES_CONST_ACTION_TYPE_ACCEPT SYSRES_CONST_ACTION_TYPE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ADD_ATTACHMENT SYSRES_CONST_ACTION_TYPE_CHANGE_CARD SYSRES_CONST_ACTION_TYPE_CHANGE_KIND SYSRES_CONST_ACTION_TYPE_CHANGE_STORAGE SYSRES_CONST_ACTION_TYPE_CONTINUE SYSRES_CONST_ACTION_TYPE_COPY SYSRES_CONST_ACTION_TYPE_CREATE SYSRES_CONST_ACTION_TYPE_CREATE_VERSION SYSRES_CONST_ACTION_TYPE_DELETE SYSRES_CONST_ACTION_TYPE_DELETE_ATTACHMENT SYSRES_CONST_ACTION_TYPE_DELETE_VERSION SYSRES_CONST_ACTION_TYPE_DISABLE_DELEGATE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ENABLE_DELEGATE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE_AND_PASSWORD SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_PASSWORD SYSRES_CONST_ACTION_TYPE_EXPORT_WITH_LOCK SYSRES_CONST_ACTION_TYPE_EXPORT_WITHOUT_LOCK SYSRES_CONST_ACTION_TYPE_IMPORT_WITH_UNLOCK SYSRES_CONST_ACTION_TYPE_IMPORT_WITHOUT_UNLOCK SYSRES_CONST_ACTION_TYPE_LIFE_CYCLE_STAGE SYSRES_CONST_ACTION_TYPE_LOCK SYSRES_CONST_ACTION_TYPE_LOCK_FOR_SERVER SYSRES_CONST_ACTION_TYPE_LOCK_MODIFY SYSRES_CONST_ACTION_TYPE_MARK_AS_READED SYSRES_CONST_ACTION_TYPE_MARK_AS_UNREADED SYSRES_CONST_ACTION_TYPE_MODIFY SYSRES_CONST_ACTION_TYPE_MODIFY_CARD SYSRES_CONST_ACTION_TYPE_MOVE_TO_ARCHIVE SYSRES_CONST_ACTION_TYPE_OFF_ENCRYPTION SYSRES_CONST_ACTION_TYPE_PASSWORD_CHANGE SYSRES_CONST_ACTION_TYPE_PERFORM SYSRES_CONST_ACTION_TYPE_RECOVER_FROM_LOCAL_COPY SYSRES_CONST_ACTION_TYPE_RESTART SYSRES_CONST_ACTION_TYPE_RESTORE_FROM_ARCHIVE SYSRES_CONST_ACTION_TYPE_REVISION SYSRES_CONST_ACTION_TYPE_SEND_BY_MAIL SYSRES_CONST_ACTION_TYPE_SIGN SYSRES_CONST_ACTION_TYPE_START SYSRES_CONST_ACTION_TYPE_UNLOCK SYSRES_CONST_ACTION_TYPE_UNLOCK_FROM_SERVER SYSRES_CONST_ACTION_TYPE_VERSION_STATE SYSRES_CONST_ACTION_TYPE_VERSION_VISIBILITY SYSRES_CONST_ACTION_TYPE_VIEW SYSRES_CONST_ACTION_TYPE_VIEW_SHADOW_COPY SYSRES_CONST_ACTION_TYPE_WORKFLOW_DESCRIPTION_MODIFY SYSRES_CONST_ACTION_TYPE_WRITE_HISTORY SYSRES_CONST_ACTIVE_VERSION_STATE_PICK_VALUE SYSRES_CONST_ADD_REFERENCE_MODE_NAME SYSRES_CONST_ADDITION_REQUISITE_CODE SYSRES_CONST_ADDITIONAL_PARAMS_REQUISITE_CODE SYSRES_CONST_ADITIONAL_JOB_END_DATE_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_READ_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_START_DATE_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_STATE_REQUISITE_NAME SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE_ACTION SYSRES_CONST_ALL_ACCEPT_CONDITION_RUS SYSRES_CONST_ALL_USERS_GROUP SYSRES_CONST_ALL_USERS_GROUP_NAME SYSRES_CONST_ALL_USERS_SERVER_GROUP_NAME SYSRES_CONST_ALLOWED_ACCESS_TYPE_CODE SYSRES_CONST_ALLOWED_ACCESS_TYPE_NAME SYSRES_CONST_APP_VIEWER_TYPE_REQUISITE_CODE SYSRES_CONST_APPROVING_SIGNATURE_NAME SYSRES_CONST_APPROVING_SIGNATURE_REQUISITE_CODE SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE_CODE SYSRES_CONST_ATTACH_TYPE_COMPONENT_TOKEN SYSRES_CONST_ATTACH_TYPE_DOC SYSRES_CONST_ATTACH_TYPE_EDOC SYSRES_CONST_ATTACH_TYPE_FOLDER SYSRES_CONST_ATTACH_TYPE_JOB SYSRES_CONST_ATTACH_TYPE_REFERENCE SYSRES_CONST_ATTACH_TYPE_TASK SYSRES_CONST_AUTH_ENCODED_PASSWORD SYSRES_CONST_AUTH_ENCODED_PASSWORD_CODE SYSRES_CONST_AUTH_NOVELL SYSRES_CONST_AUTH_PASSWORD SYSRES_CONST_AUTH_PASSWORD_CODE SYSRES_CONST_AUTH_WINDOWS SYSRES_CONST_AUTHENTICATING_SIGNATURE_NAME SYSRES_CONST_AUTHENTICATING_SIGNATURE_REQUISITE_CODE SYSRES_CONST_AUTO_ENUM_METHOD_FLAG SYSRES_CONST_AUTO_NUMERATION_CODE SYSRES_CONST_AUTO_STRONG_ENUM_METHOD_FLAG SYSRES_CONST_AUTOTEXT_NAME_REQUISITE_CODE SYSRES_CONST_AUTOTEXT_TEXT_REQUISITE_CODE SYSRES_CONST_AUTOTEXT_USAGE_ALL SYSRES_CONST_AUTOTEXT_USAGE_ALL_CODE SYSRES_CONST_AUTOTEXT_USAGE_SIGN SYSRES_CONST_AUTOTEXT_USAGE_SIGN_CODE SYSRES_CONST_AUTOTEXT_USAGE_WORK SYSRES_CONST_AUTOTEXT_USAGE_WORK_CODE SYSRES_CONST_AUTOTEXT_USE_ANYWHERE_CODE SYSRES_CONST_AUTOTEXT_USE_ON_SIGNING_CODE SYSRES_CONST_AUTOTEXT_USE_ON_WORK_CODE SYSRES_CONST_BEGIN_DATE_REQUISITE_CODE SYSRES_CONST_BLACK_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_BLUE_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_BTN_PART SYSRES_CONST_CALCULATED_ROLE_TYPE_CODE SYSRES_CONST_CALL_TYPE_VARIABLE_BUTTON_VALUE SYSRES_CONST_CALL_TYPE_VARIABLE_PROGRAM_VALUE SYSRES_CONST_CANCEL_MESSAGE_FUNCTION_RESULT SYSRES_CONST_CARD_PART SYSRES_CONST_CARD_REFERENCE_MODE_NAME SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_ENCRYPT_VALUE SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_AND_ENCRYPT_VALUE SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_VALUE SYSRES_CONST_CHECK_PARAM_VALUE_DATE_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_FLOAT_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_INTEGER_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_PICK_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_REEFRENCE_PARAM_TYPE SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_FEMININE SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_CODE_COMPONENT_TYPE_ADMIN SYSRES_CONST_CODE_COMPONENT_TYPE_DEVELOPER SYSRES_CONST_CODE_COMPONENT_TYPE_DOCS SYSRES_CONST_CODE_COMPONENT_TYPE_EDOC_CARDS SYSRES_CONST_CODE_COMPONENT_TYPE_EXTERNAL_EXECUTABLE SYSRES_CONST_CODE_COMPONENT_TYPE_OTHER SYSRES_CONST_CODE_COMPONENT_TYPE_REFERENCE SYSRES_CONST_CODE_COMPONENT_TYPE_REPORT SYSRES_CONST_CODE_COMPONENT_TYPE_SCRIPT SYSRES_CONST_CODE_COMPONENT_TYPE_URL SYSRES_CONST_CODE_REQUISITE_ACCESS SYSRES_CONST_CODE_REQUISITE_CODE SYSRES_CONST_CODE_REQUISITE_COMPONENT SYSRES_CONST_CODE_REQUISITE_DESCRIPTION SYSRES_CONST_CODE_REQUISITE_EXCLUDE_COMPONENT SYSRES_CONST_CODE_REQUISITE_RECORD SYSRES_CONST_COMMENT_REQ_CODE SYSRES_CONST_COMMON_SETTINGS_REQUISITE_CODE SYSRES_CONST_COMP_CODE_GRD SYSRES_CONST_COMPONENT_GROUP_TYPE_REQUISITE_CODE SYSRES_CONST_COMPONENT_TYPE_ADMIN_COMPONENTS SYSRES_CONST_COMPONENT_TYPE_DEVELOPER_COMPONENTS SYSRES_CONST_COMPONENT_TYPE_DOCS SYSRES_CONST_COMPONENT_TYPE_EDOC_CARDS SYSRES_CONST_COMPONENT_TYPE_EDOCS SYSRES_CONST_COMPONENT_TYPE_EXTERNAL_EXECUTABLE SYSRES_CONST_COMPONENT_TYPE_OTHER SYSRES_CONST_COMPONENT_TYPE_REFERENCE_TYPES SYSRES_CONST_COMPONENT_TYPE_REFERENCES SYSRES_CONST_COMPONENT_TYPE_REPORTS SYSRES_CONST_COMPONENT_TYPE_SCRIPTS SYSRES_CONST_COMPONENT_TYPE_URL SYSRES_CONST_COMPONENTS_REMOTE_SERVERS_VIEW_CODE SYSRES_CONST_CONDITION_BLOCK_DESCRIPTION SYSRES_CONST_CONST_FIRM_STATUS_COMMON SYSRES_CONST_CONST_FIRM_STATUS_INDIVIDUAL SYSRES_CONST_CONST_NEGATIVE_VALUE SYSRES_CONST_CONST_POSITIVE_VALUE SYSRES_CONST_CONST_SERVER_STATUS_DONT_REPLICATE SYSRES_CONST_CONST_SERVER_STATUS_REPLICATE SYSRES_CONST_CONTENTS_REQUISITE_CODE SYSRES_CONST_DATA_TYPE_BOOLEAN SYSRES_CONST_DATA_TYPE_DATE SYSRES_CONST_DATA_TYPE_FLOAT SYSRES_CONST_DATA_TYPE_INTEGER SYSRES_CONST_DATA_TYPE_PICK SYSRES_CONST_DATA_TYPE_REFERENCE SYSRES_CONST_DATA_TYPE_STRING SYSRES_CONST_DATA_TYPE_TEXT SYSRES_CONST_DATA_TYPE_VARIANT SYSRES_CONST_DATE_CLOSE_REQ_CODE SYSRES_CONST_DATE_FORMAT_DATE_ONLY_CHAR SYSRES_CONST_DATE_OPEN_REQ_CODE SYSRES_CONST_DATE_REQUISITE SYSRES_CONST_DATE_REQUISITE_CODE SYSRES_CONST_DATE_REQUISITE_NAME SYSRES_CONST_DATE_REQUISITE_TYPE SYSRES_CONST_DATE_TYPE_CHAR SYSRES_CONST_DATETIME_FORMAT_VALUE SYSRES_CONST_DEA_ACCESS_RIGHTS_ACTION_CODE SYSRES_CONST_DESCRIPTION_LOCALIZE_ID_REQUISITE_CODE SYSRES_CONST_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_DET1_PART SYSRES_CONST_DET2_PART SYSRES_CONST_DET3_PART SYSRES_CONST_DET4_PART SYSRES_CONST_DET5_PART SYSRES_CONST_DET6_PART SYSRES_CONST_DETAIL_DATASET_KEY_REQUISITE_CODE SYSRES_CONST_DETAIL_PICK_REQUISITE_CODE SYSRES_CONST_DETAIL_REQ_CODE SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_CODE SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_NAME SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_CODE SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_NAME SYSRES_CONST_DOCUMENT_STORAGES_CODE SYSRES_CONST_DOCUMENT_TEMPLATES_TYPE_NAME SYSRES_CONST_DOUBLE_REQUISITE_CODE SYSRES_CONST_EDITOR_CLOSE_FILE_OBSERV_TYPE_CODE SYSRES_CONST_EDITOR_CLOSE_PROCESS_OBSERV_TYPE_CODE SYSRES_CONST_EDITOR_TYPE_REQUISITE_CODE SYSRES_CONST_EDITORS_APPLICATION_NAME_REQUISITE_CODE SYSRES_CONST_EDITORS_CREATE_SEVERAL_PROCESSES_REQUISITE_CODE SYSRES_CONST_EDITORS_EXTENSION_REQUISITE_CODE SYSRES_CONST_EDITORS_OBSERVER_BY_PROCESS_TYPE SYSRES_CONST_EDITORS_REFERENCE_CODE SYSRES_CONST_EDITORS_REPLACE_SPEC_CHARS_REQUISITE_CODE SYSRES_CONST_EDITORS_USE_PLUGINS_REQUISITE_CODE SYSRES_CONST_EDITORS_VIEW_DOCUMENT_OPENED_TO_EDIT_CODE SYSRES_CONST_EDOC_CARD_TYPE_REQUISITE_CODE SYSRES_CONST_EDOC_CARD_TYPES_LINK_REQUISITE_CODE SYSRES_CONST_EDOC_CERTIFICATE_AND_PASSWORD_ENCODE_CODE SYSRES_CONST_EDOC_CERTIFICATE_ENCODE_CODE SYSRES_CONST_EDOC_DATE_REQUISITE_CODE SYSRES_CONST_EDOC_KIND_REFERENCE_CODE SYSRES_CONST_EDOC_KINDS_BY_TEMPLATE_ACTION_CODE SYSRES_CONST_EDOC_MANAGE_ACCESS_CODE SYSRES_CONST_EDOC_NONE_ENCODE_CODE SYSRES_CONST_EDOC_NUMBER_REQUISITE_CODE SYSRES_CONST_EDOC_PASSWORD_ENCODE_CODE SYSRES_CONST_EDOC_READONLY_ACCESS_CODE SYSRES_CONST_EDOC_SHELL_LIFE_TYPE_VIEW_VALUE SYSRES_CONST_EDOC_SIZE_RESTRICTION_PRIORITY_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_CHECK_ACCESS_RIGHTS_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_COMPUTER_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_DATABASE_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_EDIT_IN_STORAGE_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_LOCAL_PATH_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_SHARED_SOURCE_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_TEMPLATE_REQUISITE_CODE SYSRES_CONST_EDOC_TYPES_REFERENCE_CODE SYSRES_CONST_EDOC_VERSION_ACTIVE_STAGE_CODE SYSRES_CONST_EDOC_VERSION_DESIGN_STAGE_CODE SYSRES_CONST_EDOC_VERSION_OBSOLETE_STAGE_CODE SYSRES_CONST_EDOC_WRITE_ACCES_CODE SYSRES_CONST_EDOCUMENT_CARD_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE SYSRES_CONST_ENCODE_CERTIFICATE_TYPE_CODE SYSRES_CONST_END_DATE_REQUISITE_CODE SYSRES_CONST_ENUMERATION_TYPE_REQUISITE_CODE SYSRES_CONST_EXECUTE_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_EXECUTIVE_FILE_STORAGE_TYPE SYSRES_CONST_EXIST_CONST SYSRES_CONST_EXIST_VALUE SYSRES_CONST_EXPORT_LOCK_TYPE_ASK SYSRES_CONST_EXPORT_LOCK_TYPE_WITH_LOCK SYSRES_CONST_EXPORT_LOCK_TYPE_WITHOUT_LOCK SYSRES_CONST_EXPORT_VERSION_TYPE_ASK SYSRES_CONST_EXPORT_VERSION_TYPE_LAST SYSRES_CONST_EXPORT_VERSION_TYPE_LAST_ACTIVE SYSRES_CONST_EXTENSION_REQUISITE_CODE SYSRES_CONST_FILTER_NAME_REQUISITE_CODE SYSRES_CONST_FILTER_REQUISITE_CODE SYSRES_CONST_FILTER_TYPE_COMMON_CODE SYSRES_CONST_FILTER_TYPE_COMMON_NAME SYSRES_CONST_FILTER_TYPE_USER_CODE SYSRES_CONST_FILTER_TYPE_USER_NAME SYSRES_CONST_FILTER_VALUE_REQUISITE_NAME SYSRES_CONST_FLOAT_NUMBER_FORMAT_CHAR SYSRES_CONST_FLOAT_REQUISITE_TYPE SYSRES_CONST_FOLDER_AUTHOR_VALUE SYSRES_CONST_FOLDER_KIND_ANY_OBJECTS SYSRES_CONST_FOLDER_KIND_COMPONENTS SYSRES_CONST_FOLDER_KIND_EDOCS SYSRES_CONST_FOLDER_KIND_JOBS SYSRES_CONST_FOLDER_KIND_TASKS SYSRES_CONST_FOLDER_TYPE_COMMON SYSRES_CONST_FOLDER_TYPE_COMPONENT SYSRES_CONST_FOLDER_TYPE_FAVORITES SYSRES_CONST_FOLDER_TYPE_INBOX SYSRES_CONST_FOLDER_TYPE_OUTBOX SYSRES_CONST_FOLDER_TYPE_QUICK_LAUNCH SYSRES_CONST_FOLDER_TYPE_SEARCH SYSRES_CONST_FOLDER_TYPE_SHORTCUTS SYSRES_CONST_FOLDER_TYPE_USER SYSRES_CONST_FROM_DICTIONARY_ENUM_METHOD_FLAG SYSRES_CONST_FULL_SUBSTITUTE_TYPE SYSRES_CONST_FULL_SUBSTITUTE_TYPE_CODE SYSRES_CONST_FUNCTION_CANCEL_RESULT SYSRES_CONST_FUNCTION_CATEGORY_SYSTEM SYSRES_CONST_FUNCTION_CATEGORY_USER SYSRES_CONST_FUNCTION_FAILURE_RESULT SYSRES_CONST_FUNCTION_SAVE_RESULT SYSRES_CONST_GENERATED_REQUISITE SYSRES_CONST_GREEN_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_GROUP_ACCOUNT_TYPE_VALUE_CODE SYSRES_CONST_GROUP_CATEGORY_NORMAL_CODE SYSRES_CONST_GROUP_CATEGORY_NORMAL_NAME SYSRES_CONST_GROUP_CATEGORY_SERVICE_CODE SYSRES_CONST_GROUP_CATEGORY_SERVICE_NAME SYSRES_CONST_GROUP_COMMON_CATEGORY_FIELD_VALUE SYSRES_CONST_GROUP_FULL_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_RIGHTS_T_REQUISITE_CODE SYSRES_CONST_GROUP_SERVER_CODES_REQUISITE_CODE SYSRES_CONST_GROUP_SERVER_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_SERVICE_CATEGORY_FIELD_VALUE SYSRES_CONST_GROUP_USER_REQUISITE_CODE SYSRES_CONST_GROUPS_REFERENCE_CODE SYSRES_CONST_GROUPS_REQUISITE_CODE SYSRES_CONST_HIDDEN_MODE_NAME SYSRES_CONST_HIGH_LVL_REQUISITE_CODE SYSRES_CONST_HISTORY_ACTION_CREATE_CODE SYSRES_CONST_HISTORY_ACTION_DELETE_CODE SYSRES_CONST_HISTORY_ACTION_EDIT_CODE SYSRES_CONST_HOUR_CHAR SYSRES_CONST_ID_REQUISITE_CODE SYSRES_CONST_IDSPS_REQUISITE_CODE SYSRES_CONST_IMAGE_MODE_COLOR SYSRES_CONST_IMAGE_MODE_GREYSCALE SYSRES_CONST_IMAGE_MODE_MONOCHROME SYSRES_CONST_IMPORTANCE_HIGH SYSRES_CONST_IMPORTANCE_LOW SYSRES_CONST_IMPORTANCE_NORMAL SYSRES_CONST_IN_DESIGN_VERSION_STATE_PICK_VALUE SYSRES_CONST_INCOMING_WORK_RULE_TYPE_CODE SYSRES_CONST_INT_REQUISITE SYSRES_CONST_INT_REQUISITE_TYPE SYSRES_CONST_INTEGER_NUMBER_FORMAT_CHAR SYSRES_CONST_INTEGER_TYPE_CHAR SYSRES_CONST_IS_GENERATED_REQUISITE_NEGATIVE_VALUE SYSRES_CONST_IS_PUBLIC_ROLE_REQUISITE_CODE SYSRES_CONST_IS_REMOTE_USER_NEGATIVE_VALUE SYSRES_CONST_IS_REMOTE_USER_POSITIVE_VALUE SYSRES_CONST_IS_STORED_REQUISITE_NEGATIVE_VALUE SYSRES_CONST_IS_STORED_REQUISITE_STORED_VALUE SYSRES_CONST_ITALIC_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_JOB_BLOCK_DESCRIPTION SYSRES_CONST_JOB_KIND_CONTROL_JOB SYSRES_CONST_JOB_KIND_JOB SYSRES_CONST_JOB_KIND_NOTICE SYSRES_CONST_JOB_STATE_ABORTED SYSRES_CONST_JOB_STATE_COMPLETE SYSRES_CONST_JOB_STATE_WORKING SYSRES_CONST_KIND_REQUISITE_CODE SYSRES_CONST_KIND_REQUISITE_NAME SYSRES_CONST_KINDS_CREATE_SHADOW_COPIES_REQUISITE_CODE SYSRES_CONST_KINDS_DEFAULT_EDOC_LIFE_STAGE_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALL_TEPLATES_ALLOWED_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALLOW_LIFE_CYCLE_STAGE_CHANGING_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALLOW_MULTIPLE_ACTIVE_VERSIONS_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_SHARE_ACCES_RIGHTS_BY_DEFAULT_CODE SYSRES_CONST_KINDS_EDOC_TEMPLATE_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_TYPE_REQUISITE_CODE SYSRES_CONST_KINDS_SIGNERS_REQUISITES_CODE SYSRES_CONST_KOD_INPUT_TYPE SYSRES_CONST_LAST_UPDATE_DATE_REQUISITE_CODE SYSRES_CONST_LIFE_CYCLE_START_STAGE_REQUISITE_CODE SYSRES_CONST_LILAC_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_LINK_OBJECT_KIND_COMPONENT SYSRES_CONST_LINK_OBJECT_KIND_DOCUMENT SYSRES_CONST_LINK_OBJECT_KIND_EDOC SYSRES_CONST_LINK_OBJECT_KIND_FOLDER SYSRES_CONST_LINK_OBJECT_KIND_JOB SYSRES_CONST_LINK_OBJECT_KIND_REFERENCE SYSRES_CONST_LINK_OBJECT_KIND_TASK SYSRES_CONST_LINK_REF_TYPE_REQUISITE_CODE SYSRES_CONST_LIST_REFERENCE_MODE_NAME SYSRES_CONST_LOCALIZATION_DICTIONARY_MAIN_VIEW_CODE SYSRES_CONST_MAIN_VIEW_CODE SYSRES_CONST_MANUAL_ENUM_METHOD_FLAG SYSRES_CONST_MASTER_COMP_TYPE_REQUISITE_CODE SYSRES_CONST_MASTER_TABLE_REC_ID_REQUISITE_CODE SYSRES_CONST_MAXIMIZED_MODE_NAME SYSRES_CONST_ME_VALUE SYSRES_CONST_MESSAGE_ATTENTION_CAPTION SYSRES_CONST_MESSAGE_CONFIRMATION_CAPTION SYSRES_CONST_MESSAGE_ERROR_CAPTION SYSRES_CONST_MESSAGE_INFORMATION_CAPTION SYSRES_CONST_MINIMIZED_MODE_NAME SYSRES_CONST_MINUTE_CHAR SYSRES_CONST_MODULE_REQUISITE_CODE SYSRES_CONST_MONITORING_BLOCK_DESCRIPTION SYSRES_CONST_MONTH_FORMAT_VALUE SYSRES_CONST_NAME_LOCALIZE_ID_REQUISITE_CODE SYSRES_CONST_NAME_REQUISITE_CODE SYSRES_CONST_NAME_SINGULAR_REQUISITE_CODE SYSRES_CONST_NAMEAN_INPUT_TYPE SYSRES_CONST_NEGATIVE_PICK_VALUE SYSRES_CONST_NEGATIVE_VALUE SYSRES_CONST_NO SYSRES_CONST_NO_PICK_VALUE SYSRES_CONST_NO_SIGNATURE_REQUISITE_CODE SYSRES_CONST_NO_VALUE SYSRES_CONST_NONE_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_NORMAL_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_NORMAL_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_NORMAL_MODE_NAME SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_CODE SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_NAME SYSRES_CONST_NOTE_REQUISITE_CODE SYSRES_CONST_NOTICE_BLOCK_DESCRIPTION SYSRES_CONST_NUM_REQUISITE SYSRES_CONST_NUM_STR_REQUISITE_CODE SYSRES_CONST_NUMERATION_AUTO_NOT_STRONG SYSRES_CONST_NUMERATION_AUTO_STRONG SYSRES_CONST_NUMERATION_FROM_DICTONARY SYSRES_CONST_NUMERATION_MANUAL SYSRES_CONST_NUMERIC_TYPE_CHAR SYSRES_CONST_NUMREQ_REQUISITE_CODE SYSRES_CONST_OBSOLETE_VERSION_STATE_PICK_VALUE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_CODE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_FEMININE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_OPTIONAL_FORM_COMP_REQCODE_PREFIX SYSRES_CONST_ORANGE_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_ORIGINALREF_REQUISITE_CODE SYSRES_CONST_OURFIRM_REF_CODE SYSRES_CONST_OURFIRM_REQUISITE_CODE SYSRES_CONST_OURFIRM_VAR SYSRES_CONST_OUTGOING_WORK_RULE_TYPE_CODE SYSRES_CONST_PICK_NEGATIVE_RESULT SYSRES_CONST_PICK_POSITIVE_RESULT SYSRES_CONST_PICK_REQUISITE SYSRES_CONST_PICK_REQUISITE_TYPE SYSRES_CONST_PICK_TYPE_CHAR SYSRES_CONST_PLAN_STATUS_REQUISITE_CODE SYSRES_CONST_PLATFORM_VERSION_COMMENT SYSRES_CONST_PLUGINS_SETTINGS_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_POSITIVE_PICK_VALUE SYSRES_CONST_POWER_TO_CREATE_ACTION_CODE SYSRES_CONST_POWER_TO_SIGN_ACTION_CODE SYSRES_CONST_PRIORITY_REQUISITE_CODE SYSRES_CONST_QUALIFIED_TASK_TYPE SYSRES_CONST_QUALIFIED_TASK_TYPE_CODE SYSRES_CONST_RECSTAT_REQUISITE_CODE SYSRES_CONST_RED_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_REF_ID_T_REF_TYPE_REQUISITE_CODE SYSRES_CONST_REF_REQUISITE SYSRES_CONST_REF_REQUISITE_TYPE SYSRES_CONST_REF_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE SYSRES_CONST_REFERENCE_RECORD_HISTORY_CREATE_ACTION_CODE SYSRES_CONST_REFERENCE_RECORD_HISTORY_DELETE_ACTION_CODE SYSRES_CONST_REFERENCE_RECORD_HISTORY_MODIFY_ACTION_CODE SYSRES_CONST_REFERENCE_TYPE_CHAR SYSRES_CONST_REFERENCE_TYPE_REQUISITE_NAME SYSRES_CONST_REFERENCES_ADD_PARAMS_REQUISITE_CODE SYSRES_CONST_REFERENCES_DISPLAY_REQUISITE_REQUISITE_CODE SYSRES_CONST_REMOTE_SERVER_STATUS_WORKING SYSRES_CONST_REMOTE_SERVER_TYPE_MAIN SYSRES_CONST_REMOTE_SERVER_TYPE_SECONDARY SYSRES_CONST_REMOTE_USER_FLAG_VALUE_CODE SYSRES_CONST_REPORT_APP_EDITOR_INTERNAL SYSRES_CONST_REPORT_BASE_REPORT_ID_REQUISITE_CODE SYSRES_CONST_REPORT_BASE_REPORT_REQUISITE_CODE SYSRES_CONST_REPORT_SCRIPT_REQUISITE_CODE SYSRES_CONST_REPORT_TEMPLATE_REQUISITE_CODE SYSRES_CONST_REPORT_VIEWER_CODE_REQUISITE_CODE SYSRES_CONST_REQ_ALLOW_COMPONENT_DEFAULT_VALUE SYSRES_CONST_REQ_ALLOW_RECORD_DEFAULT_VALUE SYSRES_CONST_REQ_ALLOW_SERVER_COMPONENT_DEFAULT_VALUE SYSRES_CONST_REQ_MODE_AVAILABLE_CODE SYSRES_CONST_REQ_MODE_EDIT_CODE SYSRES_CONST_REQ_MODE_HIDDEN_CODE SYSRES_CONST_REQ_MODE_NOT_AVAILABLE_CODE SYSRES_CONST_REQ_MODE_VIEW_CODE SYSRES_CONST_REQ_NUMBER_REQUISITE_CODE SYSRES_CONST_REQ_SECTION_VALUE SYSRES_CONST_REQ_TYPE_VALUE SYSRES_CONST_REQUISITE_FORMAT_BY_UNIT SYSRES_CONST_REQUISITE_FORMAT_DATE_FULL SYSRES_CONST_REQUISITE_FORMAT_DATE_TIME SYSRES_CONST_REQUISITE_FORMAT_LEFT SYSRES_CONST_REQUISITE_FORMAT_RIGHT SYSRES_CONST_REQUISITE_FORMAT_WITHOUT_UNIT SYSRES_CONST_REQUISITE_NUMBER_REQUISITE_CODE SYSRES_CONST_REQUISITE_SECTION_ACTIONS SYSRES_CONST_REQUISITE_SECTION_BUTTON SYSRES_CONST_REQUISITE_SECTION_BUTTONS SYSRES_CONST_REQUISITE_SECTION_CARD SYSRES_CONST_REQUISITE_SECTION_TABLE SYSRES_CONST_REQUISITE_SECTION_TABLE10 SYSRES_CONST_REQUISITE_SECTION_TABLE11 SYSRES_CONST_REQUISITE_SECTION_TABLE12 SYSRES_CONST_REQUISITE_SECTION_TABLE13 SYSRES_CONST_REQUISITE_SECTION_TABLE14 SYSRES_CONST_REQUISITE_SECTION_TABLE15 SYSRES_CONST_REQUISITE_SECTION_TABLE16 SYSRES_CONST_REQUISITE_SECTION_TABLE17 SYSRES_CONST_REQUISITE_SECTION_TABLE18 SYSRES_CONST_REQUISITE_SECTION_TABLE19 SYSRES_CONST_REQUISITE_SECTION_TABLE2 SYSRES_CONST_REQUISITE_SECTION_TABLE20 SYSRES_CONST_REQUISITE_SECTION_TABLE21 SYSRES_CONST_REQUISITE_SECTION_TABLE22 SYSRES_CONST_REQUISITE_SECTION_TABLE23 SYSRES_CONST_REQUISITE_SECTION_TABLE24 SYSRES_CONST_REQUISITE_SECTION_TABLE3 SYSRES_CONST_REQUISITE_SECTION_TABLE4 SYSRES_CONST_REQUISITE_SECTION_TABLE5 SYSRES_CONST_REQUISITE_SECTION_TABLE6 SYSRES_CONST_REQUISITE_SECTION_TABLE7 SYSRES_CONST_REQUISITE_SECTION_TABLE8 SYSRES_CONST_REQUISITE_SECTION_TABLE9 SYSRES_CONST_REQUISITES_PSEUDOREFERENCE_REQUISITE_NUMBER_REQUISITE_CODE SYSRES_CONST_RIGHT_ALIGNMENT_CODE SYSRES_CONST_ROLES_REFERENCE_CODE SYSRES_CONST_ROUTE_STEP_AFTER_RUS SYSRES_CONST_ROUTE_STEP_AND_CONDITION_RUS SYSRES_CONST_ROUTE_STEP_OR_CONDITION_RUS SYSRES_CONST_ROUTE_TYPE_COMPLEX SYSRES_CONST_ROUTE_TYPE_PARALLEL SYSRES_CONST_ROUTE_TYPE_SERIAL SYSRES_CONST_SBDATASETDESC_NEGATIVE_VALUE SYSRES_CONST_SBDATASETDESC_POSITIVE_VALUE SYSRES_CONST_SBVIEWSDESC_POSITIVE_VALUE SYSRES_CONST_SCRIPT_BLOCK_DESCRIPTION SYSRES_CONST_SEARCH_BY_TEXT_REQUISITE_CODE SYSRES_CONST_SEARCHES_COMPONENT_CONTENT SYSRES_CONST_SEARCHES_CRITERIA_ACTION_NAME SYSRES_CONST_SEARCHES_EDOC_CONTENT SYSRES_CONST_SEARCHES_FOLDER_CONTENT SYSRES_CONST_SEARCHES_JOB_CONTENT SYSRES_CONST_SEARCHES_REFERENCE_CODE SYSRES_CONST_SEARCHES_TASK_CONTENT SYSRES_CONST_SECOND_CHAR SYSRES_CONST_SECTION_REQUISITE_ACTIONS_VALUE SYSRES_CONST_SECTION_REQUISITE_CARD_VALUE SYSRES_CONST_SECTION_REQUISITE_CODE SYSRES_CONST_SECTION_REQUISITE_DETAIL_1_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_2_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_3_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_4_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_5_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_6_VALUE SYSRES_CONST_SELECT_REFERENCE_MODE_NAME SYSRES_CONST_SELECT_TYPE_SELECTABLE SYSRES_CONST_SELECT_TYPE_SELECTABLE_ONLY_CHILD SYSRES_CONST_SELECT_TYPE_SELECTABLE_WITH_CHILD SYSRES_CONST_SELECT_TYPE_UNSLECTABLE SYSRES_CONST_SERVER_TYPE_MAIN SYSRES_CONST_SERVICE_USER_CATEGORY_FIELD_VALUE SYSRES_CONST_SETTINGS_USER_REQUISITE_CODE SYSRES_CONST_SIGNATURE_AND_ENCODE_CERTIFICATE_TYPE_CODE SYSRES_CONST_SIGNATURE_CERTIFICATE_TYPE_CODE SYSRES_CONST_SINGULAR_TITLE_REQUISITE_CODE SYSRES_CONST_SQL_SERVER_AUTHENTIFICATION_FLAG_VALUE_CODE SYSRES_CONST_SQL_SERVER_ENCODE_AUTHENTIFICATION_FLAG_VALUE_CODE SYSRES_CONST_STANDART_ROUTE_REFERENCE_CODE SYSRES_CONST_STANDART_ROUTE_REFERENCE_COMMENT_REQUISITE_CODE SYSRES_CONST_STANDART_ROUTES_GROUPS_REFERENCE_CODE SYSRES_CONST_STATE_REQ_NAME SYSRES_CONST_STATE_REQUISITE_ACTIVE_VALUE SYSRES_CONST_STATE_REQUISITE_CLOSED_VALUE SYSRES_CONST_STATE_REQUISITE_CODE SYSRES_CONST_STATIC_ROLE_TYPE_CODE SYSRES_CONST_STATUS_PLAN_DEFAULT_VALUE SYSRES_CONST_STATUS_VALUE_AUTOCLEANING SYSRES_CONST_STATUS_VALUE_BLUE_SQUARE SYSRES_CONST_STATUS_VALUE_COMPLETE SYSRES_CONST_STATUS_VALUE_GREEN_SQUARE SYSRES_CONST_STATUS_VALUE_ORANGE_SQUARE SYSRES_CONST_STATUS_VALUE_PURPLE_SQUARE SYSRES_CONST_STATUS_VALUE_RED_SQUARE SYSRES_CONST_STATUS_VALUE_SUSPEND SYSRES_CONST_STATUS_VALUE_YELLOW_SQUARE SYSRES_CONST_STDROUTE_SHOW_TO_USERS_REQUISITE_CODE SYSRES_CONST_STORAGE_TYPE_FILE SYSRES_CONST_STORAGE_TYPE_SQL_SERVER SYSRES_CONST_STR_REQUISITE SYSRES_CONST_STRIKEOUT_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_STRING_FORMAT_LEFT_ALIGN_CHAR SYSRES_CONST_STRING_FORMAT_RIGHT_ALIGN_CHAR SYSRES_CONST_STRING_REQUISITE_CODE SYSRES_CONST_STRING_REQUISITE_TYPE SYSRES_CONST_STRING_TYPE_CHAR SYSRES_CONST_SUBSTITUTES_PSEUDOREFERENCE_CODE SYSRES_CONST_SUBTASK_BLOCK_DESCRIPTION SYSRES_CONST_SYSTEM_SETTING_CURRENT_USER_PARAM_VALUE SYSRES_CONST_SYSTEM_SETTING_EMPTY_VALUE_PARAM_VALUE SYSRES_CONST_SYSTEM_VERSION_COMMENT SYSRES_CONST_TASK_ACCESS_TYPE_ALL SYSRES_CONST_TASK_ACCESS_TYPE_ALL_MEMBERS SYSRES_CONST_TASK_ACCESS_TYPE_MANUAL SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION_AND_PASSWORD SYSRES_CONST_TASK_ENCODE_TYPE_NONE SYSRES_CONST_TASK_ENCODE_TYPE_PASSWORD SYSRES_CONST_TASK_ROUTE_ALL_CONDITION SYSRES_CONST_TASK_ROUTE_AND_CONDITION SYSRES_CONST_TASK_ROUTE_OR_CONDITION SYSRES_CONST_TASK_STATE_ABORTED SYSRES_CONST_TASK_STATE_COMPLETE SYSRES_CONST_TASK_STATE_CONTINUED SYSRES_CONST_TASK_STATE_CONTROL SYSRES_CONST_TASK_STATE_INIT SYSRES_CONST_TASK_STATE_WORKING SYSRES_CONST_TASK_TITLE SYSRES_CONST_TASK_TYPES_GROUPS_REFERENCE_CODE SYSRES_CONST_TASK_TYPES_REFERENCE_CODE SYSRES_CONST_TEMPLATES_REFERENCE_CODE SYSRES_CONST_TEST_DATE_REQUISITE_NAME SYSRES_CONST_TEST_DEV_DATABASE_NAME SYSRES_CONST_TEST_DEV_SYSTEM_CODE SYSRES_CONST_TEST_EDMS_DATABASE_NAME SYSRES_CONST_TEST_EDMS_MAIN_CODE SYSRES_CONST_TEST_EDMS_MAIN_DB_NAME SYSRES_CONST_TEST_EDMS_SECOND_CODE SYSRES_CONST_TEST_EDMS_SECOND_DB_NAME SYSRES_CONST_TEST_EDMS_SYSTEM_CODE SYSRES_CONST_TEST_NUMERIC_REQUISITE_NAME SYSRES_CONST_TEXT_REQUISITE SYSRES_CONST_TEXT_REQUISITE_CODE SYSRES_CONST_TEXT_REQUISITE_TYPE SYSRES_CONST_TEXT_TYPE_CHAR SYSRES_CONST_TYPE_CODE_REQUISITE_CODE SYSRES_CONST_TYPE_REQUISITE_CODE SYSRES_CONST_UNDEFINED_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_UNITS_SECTION_ID_REQUISITE_CODE SYSRES_CONST_UNITS_SECTION_REQUISITE_CODE SYSRES_CONST_UNOPERATING_RECORD_FLAG_VALUE_CODE SYSRES_CONST_UNSTORED_DATA_REQUISITE_CODE SYSRES_CONST_UNSTORED_DATA_REQUISITE_NAME SYSRES_CONST_USE_ACCESS_TYPE_CODE SYSRES_CONST_USE_ACCESS_TYPE_NAME SYSRES_CONST_USER_ACCOUNT_TYPE_VALUE_CODE SYSRES_CONST_USER_ADDITIONAL_INFORMATION_REQUISITE_CODE SYSRES_CONST_USER_AND_GROUP_ID_FROM_PSEUDOREFERENCE_REQUISITE_CODE SYSRES_CONST_USER_CATEGORY_NORMAL SYSRES_CONST_USER_CERTIFICATE_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_STATE_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_SUBJECT_NAME_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_THUMBPRINT_REQUISITE_CODE SYSRES_CONST_USER_COMMON_CATEGORY SYSRES_CONST_USER_COMMON_CATEGORY_CODE SYSRES_CONST_USER_FULL_NAME_REQUISITE_CODE SYSRES_CONST_USER_GROUP_TYPE_REQUISITE_CODE SYSRES_CONST_USER_LOGIN_REQUISITE_CODE SYSRES_CONST_USER_REMOTE_CONTROLLER_REQUISITE_CODE SYSRES_CONST_USER_REMOTE_SYSTEM_REQUISITE_CODE SYSRES_CONST_USER_RIGHTS_T_REQUISITE_CODE SYSRES_CONST_USER_SERVER_NAME_REQUISITE_CODE SYSRES_CONST_USER_SERVICE_CATEGORY SYSRES_CONST_USER_SERVICE_CATEGORY_CODE SYSRES_CONST_USER_STATUS_ADMINISTRATOR_CODE SYSRES_CONST_USER_STATUS_ADMINISTRATOR_NAME SYSRES_CONST_USER_STATUS_DEVELOPER_CODE SYSRES_CONST_USER_STATUS_DEVELOPER_NAME SYSRES_CONST_USER_STATUS_DISABLED_CODE SYSRES_CONST_USER_STATUS_DISABLED_NAME SYSRES_CONST_USER_STATUS_SYSTEM_DEVELOPER_CODE SYSRES_CONST_USER_STATUS_USER_CODE SYSRES_CONST_USER_STATUS_USER_NAME SYSRES_CONST_USER_STATUS_USER_NAME_DEPRECATED SYSRES_CONST_USER_TYPE_FIELD_VALUE_USER SYSRES_CONST_USER_TYPE_REQUISITE_CODE SYSRES_CONST_USERS_CONTROLLER_REQUISITE_CODE SYSRES_CONST_USERS_IS_MAIN_SERVER_REQUISITE_CODE SYSRES_CONST_USERS_REFERENCE_CODE SYSRES_CONST_USERS_REGISTRATION_CERTIFICATES_ACTION_NAME SYSRES_CONST_USERS_REQUISITE_CODE SYSRES_CONST_USERS_SYSTEM_REQUISITE_CODE SYSRES_CONST_USERS_USER_ACCESS_RIGHTS_TYPR_REQUISITE_CODE SYSRES_CONST_USERS_USER_AUTHENTICATION_REQUISITE_CODE SYSRES_CONST_USERS_USER_COMPONENT_REQUISITE_CODE SYSRES_CONST_USERS_USER_GROUP_REQUISITE_CODE SYSRES_CONST_USERS_VIEW_CERTIFICATES_ACTION_NAME SYSRES_CONST_VIEW_DEFAULT_CODE SYSRES_CONST_VIEW_DEFAULT_NAME SYSRES_CONST_VIEWER_REQUISITE_CODE SYSRES_CONST_WAITING_BLOCK_DESCRIPTION SYSRES_CONST_WIZARD_FORM_LABEL_TEST_STRING  SYSRES_CONST_WIZARD_QUERY_PARAM_HEIGHT_ETALON_STRING SYSRES_CONST_WIZARD_REFERENCE_COMMENT_REQUISITE_CODE SYSRES_CONST_WORK_RULES_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_WORK_TIME_CALENDAR_REFERENCE_CODE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE_RUS SYSRES_CONST_WORK_WORKFLOW_SOFT_ROUTE_TYPE_VALUE_CODE_RUS SYSRES_CONST_WORKFLOW_ROUTE_TYPR_HARD SYSRES_CONST_WORKFLOW_ROUTE_TYPR_SOFT SYSRES_CONST_XML_ENCODING SYSRES_CONST_XREC_STAT_REQUISITE_CODE SYSRES_CONST_XRECID_FIELD_NAME SYSRES_CONST_YES SYSRES_CONST_YES_NO_2_REQUISITE_CODE SYSRES_CONST_YES_NO_REQUISITE_CODE SYSRES_CONST_YES_NO_T_REF_TYPE_REQUISITE_CODE SYSRES_CONST_YES_PICK_VALUE SYSRES_CONST_YES_VALUE ";
    const base_constants = "CR FALSE nil NO_VALUE NULL TAB TRUE YES_VALUE ";
    const base_group_name_constants = "ADMINISTRATORS_GROUP_NAME CUSTOMIZERS_GROUP_NAME DEVELOPERS_GROUP_NAME SERVICE_USERS_GROUP_NAME ";
    const decision_block_properties_constants = "DECISION_BLOCK_FIRST_OPERAND_PROPERTY DECISION_BLOCK_NAME_PROPERTY DECISION_BLOCK_OPERATION_PROPERTY DECISION_BLOCK_RESULT_TYPE_PROPERTY DECISION_BLOCK_SECOND_OPERAND_PROPERTY ";
    const file_extension_constants = "ANY_FILE_EXTENTION COMPRESSED_DOCUMENT_EXTENSION EXTENDED_DOCUMENT_EXTENSION SHORT_COMPRESSED_DOCUMENT_EXTENSION SHORT_EXTENDED_DOCUMENT_EXTENSION ";
    const job_block_properties_constants = "JOB_BLOCK_ABORT_DEADLINE_PROPERTY JOB_BLOCK_AFTER_FINISH_EVENT JOB_BLOCK_AFTER_QUERY_PARAMETERS_EVENT JOB_BLOCK_ATTACHMENT_PROPERTY JOB_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY JOB_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY JOB_BLOCK_BEFORE_QUERY_PARAMETERS_EVENT JOB_BLOCK_BEFORE_START_EVENT JOB_BLOCK_CREATED_JOBS_PROPERTY JOB_BLOCK_DEADLINE_PROPERTY JOB_BLOCK_EXECUTION_RESULTS_PROPERTY JOB_BLOCK_IS_PARALLEL_PROPERTY JOB_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY JOB_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY JOB_BLOCK_JOB_TEXT_PROPERTY JOB_BLOCK_NAME_PROPERTY JOB_BLOCK_NEED_SIGN_ON_PERFORM_PROPERTY JOB_BLOCK_PERFORMER_PROPERTY JOB_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY JOB_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY JOB_BLOCK_SUBJECT_PROPERTY ";
    const language_code_constants = "ENGLISH_LANGUAGE_CODE RUSSIAN_LANGUAGE_CODE ";
    const launching_external_applications_constants = "smHidden smMaximized smMinimized smNormal wmNo wmYes ";
    const link_kind_constants = "COMPONENT_TOKEN_LINK_KIND DOCUMENT_LINK_KIND EDOCUMENT_LINK_KIND FOLDER_LINK_KIND JOB_LINK_KIND REFERENCE_LINK_KIND TASK_LINK_KIND ";
    const lock_type_constants = "COMPONENT_TOKEN_LOCK_TYPE EDOCUMENT_VERSION_LOCK_TYPE ";
    const monitor_block_properties_constants = "MONITOR_BLOCK_AFTER_FINISH_EVENT MONITOR_BLOCK_BEFORE_START_EVENT MONITOR_BLOCK_DEADLINE_PROPERTY MONITOR_BLOCK_INTERVAL_PROPERTY MONITOR_BLOCK_INTERVAL_TYPE_PROPERTY MONITOR_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY MONITOR_BLOCK_NAME_PROPERTY MONITOR_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY MONITOR_BLOCK_SEARCH_SCRIPT_PROPERTY ";
    const notice_block_properties_constants = "NOTICE_BLOCK_AFTER_FINISH_EVENT NOTICE_BLOCK_ATTACHMENT_PROPERTY NOTICE_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY NOTICE_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY NOTICE_BLOCK_BEFORE_START_EVENT NOTICE_BLOCK_CREATED_NOTICES_PROPERTY NOTICE_BLOCK_DEADLINE_PROPERTY NOTICE_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY NOTICE_BLOCK_NAME_PROPERTY NOTICE_BLOCK_NOTICE_TEXT_PROPERTY NOTICE_BLOCK_PERFORMER_PROPERTY NOTICE_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY NOTICE_BLOCK_SUBJECT_PROPERTY ";
    const object_events_constants = "dseAfterCancel dseAfterClose dseAfterDelete dseAfterDeleteOutOfTransaction dseAfterInsert dseAfterOpen dseAfterScroll dseAfterUpdate dseAfterUpdateOutOfTransaction dseBeforeCancel dseBeforeClose dseBeforeDelete dseBeforeDetailUpdate dseBeforeInsert dseBeforeOpen dseBeforeUpdate dseOnAnyRequisiteChange dseOnCloseRecord dseOnDeleteError dseOnOpenRecord dseOnPrepareUpdate dseOnUpdateError dseOnUpdateRatifiedRecord dseOnValidDelete dseOnValidUpdate reOnChange reOnChangeValues SELECTION_BEGIN_ROUTE_EVENT SELECTION_END_ROUTE_EVENT ";
    const object_params_constants = "CURRENT_PERIOD_IS_REQUIRED PREVIOUS_CARD_TYPE_NAME SHOW_RECORD_PROPERTIES_FORM ";
    const other_constants = "ACCESS_RIGHTS_SETTING_DIALOG_CODE ADMINISTRATOR_USER_CODE ANALYTIC_REPORT_TYPE asrtHideLocal asrtHideRemote CALCULATED_ROLE_TYPE_CODE COMPONENTS_REFERENCE_DEVELOPER_VIEW_CODE DCTS_TEST_PROTOCOLS_FOLDER_PATH E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED_BY_USER E_EDOC_VERSION_ALREDY_SIGNED E_EDOC_VERSION_ALREDY_SIGNED_BY_USER EDOC_TYPES_CODE_REQUISITE_FIELD_NAME EDOCUMENTS_ALIAS_NAME FILES_FOLDER_PATH FILTER_OPERANDS_DELIMITER FILTER_OPERATIONS_DELIMITER FORMCARD_NAME FORMLIST_NAME GET_EXTENDED_DOCUMENT_EXTENSION_CREATION_MODE GET_EXTENDED_DOCUMENT_EXTENSION_IMPORT_MODE INTEGRATED_REPORT_TYPE IS_BUILDER_APPLICATION_ROLE IS_BUILDER_APPLICATION_ROLE2 IS_BUILDER_USERS ISBSYSDEV LOG_FOLDER_PATH mbCancel mbNo mbNoToAll mbOK mbYes mbYesToAll MEMORY_DATASET_DESRIPTIONS_FILENAME mrNo mrNoToAll mrYes mrYesToAll MULTIPLE_SELECT_DIALOG_CODE NONOPERATING_RECORD_FLAG_FEMININE NONOPERATING_RECORD_FLAG_MASCULINE OPERATING_RECORD_FLAG_FEMININE OPERATING_RECORD_FLAG_MASCULINE PROFILING_SETTINGS_COMMON_SETTINGS_CODE_VALUE PROGRAM_INITIATED_LOOKUP_ACTION ratDelete ratEdit ratInsert REPORT_TYPE REQUIRED_PICK_VALUES_VARIABLE rmCard rmList SBRTE_PROGID_DEV SBRTE_PROGID_RELEASE STATIC_ROLE_TYPE_CODE SUPPRESS_EMPTY_TEMPLATE_CREATION SYSTEM_USER_CODE UPDATE_DIALOG_DATASET USED_IN_OBJECT_HINT_PARAM USER_INITIATED_LOOKUP_ACTION USER_NAME_FORMAT USER_SELECTION_RESTRICTIONS WORKFLOW_TEST_PROTOCOLS_FOLDER_PATH ELS_SUBTYPE_CONTROL_NAME ELS_FOLDER_KIND_CONTROL_NAME REPEAT_PROCESS_CURRENT_OBJECT_EXCEPTION_NAME ";
    const privileges_constants = "PRIVILEGE_COMPONENT_FULL_ACCESS PRIVILEGE_DEVELOPMENT_EXPORT PRIVILEGE_DEVELOPMENT_IMPORT PRIVILEGE_DOCUMENT_DELETE PRIVILEGE_ESD PRIVILEGE_FOLDER_DELETE PRIVILEGE_MANAGE_ACCESS_RIGHTS PRIVILEGE_MANAGE_REPLICATION PRIVILEGE_MANAGE_SESSION_SERVER PRIVILEGE_OBJECT_FULL_ACCESS PRIVILEGE_OBJECT_VIEW PRIVILEGE_RESERVE_LICENSE PRIVILEGE_SYSTEM_CUSTOMIZE PRIVILEGE_SYSTEM_DEVELOP PRIVILEGE_SYSTEM_INSTALL PRIVILEGE_TASK_DELETE PRIVILEGE_USER_PLUGIN_SETTINGS_CUSTOMIZE PRIVILEGES_PSEUDOREFERENCE_CODE ";
    const pseudoreference_code_constants = "ACCESS_TYPES_PSEUDOREFERENCE_CODE ALL_AVAILABLE_COMPONENTS_PSEUDOREFERENCE_CODE ALL_AVAILABLE_PRIVILEGES_PSEUDOREFERENCE_CODE ALL_REPLICATE_COMPONENTS_PSEUDOREFERENCE_CODE AVAILABLE_DEVELOPERS_COMPONENTS_PSEUDOREFERENCE_CODE COMPONENTS_PSEUDOREFERENCE_CODE FILTRATER_SETTINGS_CONFLICTS_PSEUDOREFERENCE_CODE GROUPS_PSEUDOREFERENCE_CODE RECEIVE_PROTOCOL_PSEUDOREFERENCE_CODE REFERENCE_REQUISITE_PSEUDOREFERENCE_CODE REFERENCE_REQUISITES_PSEUDOREFERENCE_CODE REFTYPES_PSEUDOREFERENCE_CODE REPLICATION_SEANCES_DIARY_PSEUDOREFERENCE_CODE SEND_PROTOCOL_PSEUDOREFERENCE_CODE SUBSTITUTES_PSEUDOREFERENCE_CODE SYSTEM_SETTINGS_PSEUDOREFERENCE_CODE UNITS_PSEUDOREFERENCE_CODE USERS_PSEUDOREFERENCE_CODE VIEWERS_PSEUDOREFERENCE_CODE ";
    const requisite_ISBCertificateType_values_constants = "CERTIFICATE_TYPE_ENCRYPT CERTIFICATE_TYPE_SIGN CERTIFICATE_TYPE_SIGN_AND_ENCRYPT ";
    const requisite_ISBEDocStorageType_values_constants = "STORAGE_TYPE_FILE STORAGE_TYPE_NAS_CIFS STORAGE_TYPE_SAPERION STORAGE_TYPE_SQL_SERVER ";
    const requisite_compType2_values_constants = "COMPTYPE2_REQUISITE_DOCUMENTS_VALUE COMPTYPE2_REQUISITE_TASKS_VALUE COMPTYPE2_REQUISITE_FOLDERS_VALUE COMPTYPE2_REQUISITE_REFERENCES_VALUE ";
    const requisite_name_constants = "SYSREQ_CODE SYSREQ_COMPTYPE2 SYSREQ_CONST_AVAILABLE_FOR_WEB SYSREQ_CONST_COMMON_CODE SYSREQ_CONST_COMMON_VALUE SYSREQ_CONST_FIRM_CODE SYSREQ_CONST_FIRM_STATUS SYSREQ_CONST_FIRM_VALUE SYSREQ_CONST_SERVER_STATUS SYSREQ_CONTENTS SYSREQ_DATE_OPEN SYSREQ_DATE_CLOSE SYSREQ_DESCRIPTION SYSREQ_DESCRIPTION_LOCALIZE_ID SYSREQ_DOUBLE SYSREQ_EDOC_ACCESS_TYPE SYSREQ_EDOC_AUTHOR SYSREQ_EDOC_CREATED SYSREQ_EDOC_DELEGATE_RIGHTS_REQUISITE_CODE SYSREQ_EDOC_EDITOR SYSREQ_EDOC_ENCODE_TYPE SYSREQ_EDOC_ENCRYPTION_PLUGIN_NAME SYSREQ_EDOC_ENCRYPTION_PLUGIN_VERSION SYSREQ_EDOC_EXPORT_DATE SYSREQ_EDOC_EXPORTER SYSREQ_EDOC_KIND SYSREQ_EDOC_LIFE_STAGE_NAME SYSREQ_EDOC_LOCKED_FOR_SERVER_CODE SYSREQ_EDOC_MODIFIED SYSREQ_EDOC_NAME SYSREQ_EDOC_NOTE SYSREQ_EDOC_QUALIFIED_ID SYSREQ_EDOC_SESSION_KEY SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_NAME SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_VERSION SYSREQ_EDOC_SIGNATURE_TYPE SYSREQ_EDOC_SIGNED SYSREQ_EDOC_STORAGE SYSREQ_EDOC_STORAGES_ARCHIVE_STORAGE SYSREQ_EDOC_STORAGES_CHECK_RIGHTS SYSREQ_EDOC_STORAGES_COMPUTER_NAME SYSREQ_EDOC_STORAGES_EDIT_IN_STORAGE SYSREQ_EDOC_STORAGES_EXECUTIVE_STORAGE SYSREQ_EDOC_STORAGES_FUNCTION SYSREQ_EDOC_STORAGES_INITIALIZED SYSREQ_EDOC_STORAGES_LOCAL_PATH SYSREQ_EDOC_STORAGES_SAPERION_DATABASE_NAME SYSREQ_EDOC_STORAGES_SEARCH_BY_TEXT SYSREQ_EDOC_STORAGES_SERVER_NAME SYSREQ_EDOC_STORAGES_SHARED_SOURCE_NAME SYSREQ_EDOC_STORAGES_TYPE SYSREQ_EDOC_TEXT_MODIFIED SYSREQ_EDOC_TYPE_ACT_CODE SYSREQ_EDOC_TYPE_ACT_DESCRIPTION SYSREQ_EDOC_TYPE_ACT_DESCRIPTION_LOCALIZE_ID SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE_EXISTS SYSREQ_EDOC_TYPE_ACT_SECTION SYSREQ_EDOC_TYPE_ADD_PARAMS SYSREQ_EDOC_TYPE_COMMENT SYSREQ_EDOC_TYPE_EVENT_TEXT SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID SYSREQ_EDOC_TYPE_NAME_LOCALIZE_ID SYSREQ_EDOC_TYPE_NUMERATION_METHOD SYSREQ_EDOC_TYPE_PSEUDO_REQUISITE_CODE SYSREQ_EDOC_TYPE_REQ_CODE SYSREQ_EDOC_TYPE_REQ_DESCRIPTION SYSREQ_EDOC_TYPE_REQ_DESCRIPTION_LOCALIZE_ID SYSREQ_EDOC_TYPE_REQ_IS_LEADING SYSREQ_EDOC_TYPE_REQ_IS_REQUIRED SYSREQ_EDOC_TYPE_REQ_NUMBER SYSREQ_EDOC_TYPE_REQ_ON_CHANGE SYSREQ_EDOC_TYPE_REQ_ON_CHANGE_EXISTS SYSREQ_EDOC_TYPE_REQ_ON_SELECT SYSREQ_EDOC_TYPE_REQ_ON_SELECT_KIND SYSREQ_EDOC_TYPE_REQ_SECTION SYSREQ_EDOC_TYPE_VIEW_CARD SYSREQ_EDOC_TYPE_VIEW_CODE SYSREQ_EDOC_TYPE_VIEW_COMMENT SYSREQ_EDOC_TYPE_VIEW_IS_MAIN SYSREQ_EDOC_TYPE_VIEW_NAME SYSREQ_EDOC_TYPE_VIEW_NAME_LOCALIZE_ID SYSREQ_EDOC_VERSION_AUTHOR SYSREQ_EDOC_VERSION_CRC SYSREQ_EDOC_VERSION_DATA SYSREQ_EDOC_VERSION_EDITOR SYSREQ_EDOC_VERSION_EXPORT_DATE SYSREQ_EDOC_VERSION_EXPORTER SYSREQ_EDOC_VERSION_HIDDEN SYSREQ_EDOC_VERSION_LIFE_STAGE SYSREQ_EDOC_VERSION_MODIFIED SYSREQ_EDOC_VERSION_NOTE SYSREQ_EDOC_VERSION_SIGNATURE_TYPE SYSREQ_EDOC_VERSION_SIGNED SYSREQ_EDOC_VERSION_SIZE SYSREQ_EDOC_VERSION_SOURCE SYSREQ_EDOC_VERSION_TEXT_MODIFIED SYSREQ_EDOCKIND_DEFAULT_VERSION_STATE_CODE SYSREQ_FOLDER_KIND SYSREQ_FUNC_CATEGORY SYSREQ_FUNC_COMMENT SYSREQ_FUNC_GROUP SYSREQ_FUNC_GROUP_COMMENT SYSREQ_FUNC_GROUP_NUMBER SYSREQ_FUNC_HELP SYSREQ_FUNC_PARAM_DEF_VALUE SYSREQ_FUNC_PARAM_IDENT SYSREQ_FUNC_PARAM_NUMBER SYSREQ_FUNC_PARAM_TYPE SYSREQ_FUNC_TEXT SYSREQ_GROUP_CATEGORY SYSREQ_ID SYSREQ_LAST_UPDATE SYSREQ_LEADER_REFERENCE SYSREQ_LINE_NUMBER SYSREQ_MAIN_RECORD_ID SYSREQ_NAME SYSREQ_NAME_LOCALIZE_ID SYSREQ_NOTE SYSREQ_ORIGINAL_RECORD SYSREQ_OUR_FIRM SYSREQ_PROFILING_SETTINGS_BATCH_LOGING SYSREQ_PROFILING_SETTINGS_BATCH_SIZE SYSREQ_PROFILING_SETTINGS_PROFILING_ENABLED SYSREQ_PROFILING_SETTINGS_SQL_PROFILING_ENABLED SYSREQ_PROFILING_SETTINGS_START_LOGGED SYSREQ_RECORD_STATUS SYSREQ_REF_REQ_FIELD_NAME SYSREQ_REF_REQ_FORMAT SYSREQ_REF_REQ_GENERATED SYSREQ_REF_REQ_LENGTH SYSREQ_REF_REQ_PRECISION SYSREQ_REF_REQ_REFERENCE SYSREQ_REF_REQ_SECTION SYSREQ_REF_REQ_STORED SYSREQ_REF_REQ_TOKENS SYSREQ_REF_REQ_TYPE SYSREQ_REF_REQ_VIEW SYSREQ_REF_TYPE_ACT_CODE SYSREQ_REF_TYPE_ACT_DESCRIPTION SYSREQ_REF_TYPE_ACT_DESCRIPTION_LOCALIZE_ID SYSREQ_REF_TYPE_ACT_ON_EXECUTE SYSREQ_REF_TYPE_ACT_ON_EXECUTE_EXISTS SYSREQ_REF_TYPE_ACT_SECTION SYSREQ_REF_TYPE_ADD_PARAMS SYSREQ_REF_TYPE_COMMENT SYSREQ_REF_TYPE_COMMON_SETTINGS SYSREQ_REF_TYPE_DISPLAY_REQUISITE_NAME SYSREQ_REF_TYPE_EVENT_TEXT SYSREQ_REF_TYPE_MAIN_LEADING_REF SYSREQ_REF_TYPE_NAME_IN_SINGULAR SYSREQ_REF_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID SYSREQ_REF_TYPE_NAME_LOCALIZE_ID SYSREQ_REF_TYPE_NUMERATION_METHOD SYSREQ_REF_TYPE_REQ_CODE SYSREQ_REF_TYPE_REQ_DESCRIPTION SYSREQ_REF_TYPE_REQ_DESCRIPTION_LOCALIZE_ID SYSREQ_REF_TYPE_REQ_IS_CONTROL SYSREQ_REF_TYPE_REQ_IS_FILTER SYSREQ_REF_TYPE_REQ_IS_LEADING SYSREQ_REF_TYPE_REQ_IS_REQUIRED SYSREQ_REF_TYPE_REQ_NUMBER SYSREQ_REF_TYPE_REQ_ON_CHANGE SYSREQ_REF_TYPE_REQ_ON_CHANGE_EXISTS SYSREQ_REF_TYPE_REQ_ON_SELECT SYSREQ_REF_TYPE_REQ_ON_SELECT_KIND SYSREQ_REF_TYPE_REQ_SECTION SYSREQ_REF_TYPE_VIEW_CARD SYSREQ_REF_TYPE_VIEW_CODE SYSREQ_REF_TYPE_VIEW_COMMENT SYSREQ_REF_TYPE_VIEW_IS_MAIN SYSREQ_REF_TYPE_VIEW_NAME SYSREQ_REF_TYPE_VIEW_NAME_LOCALIZE_ID SYSREQ_REFERENCE_TYPE_ID SYSREQ_STATE SYSREQ_STATЕ SYSREQ_SYSTEM_SETTINGS_VALUE SYSREQ_TYPE SYSREQ_UNIT SYSREQ_UNIT_ID SYSREQ_USER_GROUPS_GROUP_FULL_NAME SYSREQ_USER_GROUPS_GROUP_NAME SYSREQ_USER_GROUPS_GROUP_SERVER_NAME SYSREQ_USERS_ACCESS_RIGHTS SYSREQ_USERS_AUTHENTICATION SYSREQ_USERS_CATEGORY SYSREQ_USERS_COMPONENT SYSREQ_USERS_COMPONENT_USER_IS_PUBLIC SYSREQ_USERS_DOMAIN SYSREQ_USERS_FULL_USER_NAME SYSREQ_USERS_GROUP SYSREQ_USERS_IS_MAIN_SERVER SYSREQ_USERS_LOGIN SYSREQ_USERS_REFERENCE_USER_IS_PUBLIC SYSREQ_USERS_STATUS SYSREQ_USERS_USER_CERTIFICATE SYSREQ_USERS_USER_CERTIFICATE_INFO SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_NAME SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_VERSION SYSREQ_USERS_USER_CERTIFICATE_STATE SYSREQ_USERS_USER_CERTIFICATE_SUBJECT_NAME SYSREQ_USERS_USER_CERTIFICATE_THUMBPRINT SYSREQ_USERS_USER_DEFAULT_CERTIFICATE SYSREQ_USERS_USER_DESCRIPTION SYSREQ_USERS_USER_GLOBAL_NAME SYSREQ_USERS_USER_LOGIN SYSREQ_USERS_USER_MAIN_SERVER SYSREQ_USERS_USER_TYPE SYSREQ_WORK_RULES_FOLDER_ID ";
    const result_constants = "RESULT_VAR_NAME RESULT_VAR_NAME_ENG ";
    const rule_identification_constants = "AUTO_NUMERATION_RULE_ID CANT_CHANGE_ID_REQUISITE_RULE_ID CANT_CHANGE_OURFIRM_REQUISITE_RULE_ID CHECK_CHANGING_REFERENCE_RECORD_USE_RULE_ID CHECK_CODE_REQUISITE_RULE_ID CHECK_DELETING_REFERENCE_RECORD_USE_RULE_ID CHECK_FILTRATER_CHANGES_RULE_ID CHECK_RECORD_INTERVAL_RULE_ID CHECK_REFERENCE_INTERVAL_RULE_ID CHECK_REQUIRED_DATA_FULLNESS_RULE_ID CHECK_REQUIRED_REQUISITES_FULLNESS_RULE_ID MAKE_RECORD_UNRATIFIED_RULE_ID RESTORE_AUTO_NUMERATION_RULE_ID SET_FIRM_CONTEXT_FROM_RECORD_RULE_ID SET_FIRST_RECORD_IN_LIST_FORM_RULE_ID SET_IDSPS_VALUE_RULE_ID SET_NEXT_CODE_VALUE_RULE_ID SET_OURFIRM_BOUNDS_RULE_ID SET_OURFIRM_REQUISITE_RULE_ID ";
    const script_block_properties_constants = "SCRIPT_BLOCK_AFTER_FINISH_EVENT SCRIPT_BLOCK_BEFORE_START_EVENT SCRIPT_BLOCK_EXECUTION_RESULTS_PROPERTY SCRIPT_BLOCK_NAME_PROPERTY SCRIPT_BLOCK_SCRIPT_PROPERTY ";
    const subtask_block_properties_constants = "SUBTASK_BLOCK_ABORT_DEADLINE_PROPERTY SUBTASK_BLOCK_AFTER_FINISH_EVENT SUBTASK_BLOCK_ASSIGN_PARAMS_EVENT SUBTASK_BLOCK_ATTACHMENTS_PROPERTY SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY SUBTASK_BLOCK_BEFORE_START_EVENT SUBTASK_BLOCK_CREATED_TASK_PROPERTY SUBTASK_BLOCK_CREATION_EVENT SUBTASK_BLOCK_DEADLINE_PROPERTY SUBTASK_BLOCK_IMPORTANCE_PROPERTY SUBTASK_BLOCK_INITIATOR_PROPERTY SUBTASK_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY SUBTASK_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY SUBTASK_BLOCK_JOBS_TYPE_PROPERTY SUBTASK_BLOCK_NAME_PROPERTY SUBTASK_BLOCK_PARALLEL_ROUTE_PROPERTY SUBTASK_BLOCK_PERFORMERS_PROPERTY SUBTASK_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY SUBTASK_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY SUBTASK_BLOCK_REQUIRE_SIGN_PROPERTY SUBTASK_BLOCK_STANDARD_ROUTE_PROPERTY SUBTASK_BLOCK_START_EVENT SUBTASK_BLOCK_STEP_CONTROL_PROPERTY SUBTASK_BLOCK_SUBJECT_PROPERTY SUBTASK_BLOCK_TASK_CONTROL_PROPERTY SUBTASK_BLOCK_TEXT_PROPERTY SUBTASK_BLOCK_UNLOCK_ATTACHMENTS_ON_STOP_PROPERTY SUBTASK_BLOCK_USE_STANDARD_ROUTE_PROPERTY SUBTASK_BLOCK_WAIT_FOR_TASK_COMPLETE_PROPERTY ";
    const system_component_constants = "SYSCOMP_CONTROL_JOBS SYSCOMP_FOLDERS SYSCOMP_JOBS SYSCOMP_NOTICES SYSCOMP_TASKS ";
    const system_dialogs_constants = "SYSDLG_CREATE_EDOCUMENT SYSDLG_CREATE_EDOCUMENT_VERSION SYSDLG_CURRENT_PERIOD SYSDLG_EDIT_FUNCTION_HELP SYSDLG_EDOCUMENT_KINDS_FOR_TEMPLATE SYSDLG_EXPORT_MULTIPLE_EDOCUMENTS SYSDLG_EXPORT_SINGLE_EDOCUMENT SYSDLG_IMPORT_EDOCUMENT SYSDLG_MULTIPLE_SELECT SYSDLG_SETUP_ACCESS_RIGHTS SYSDLG_SETUP_DEFAULT_RIGHTS SYSDLG_SETUP_FILTER_CONDITION SYSDLG_SETUP_SIGN_RIGHTS SYSDLG_SETUP_TASK_OBSERVERS SYSDLG_SETUP_TASK_ROUTE SYSDLG_SETUP_USERS_LIST SYSDLG_SIGN_EDOCUMENT SYSDLG_SIGN_MULTIPLE_EDOCUMENTS ";
    const system_reference_names_constants = "SYSREF_ACCESS_RIGHTS_TYPES SYSREF_ADMINISTRATION_HISTORY SYSREF_ALL_AVAILABLE_COMPONENTS SYSREF_ALL_AVAILABLE_PRIVILEGES SYSREF_ALL_REPLICATING_COMPONENTS SYSREF_AVAILABLE_DEVELOPERS_COMPONENTS SYSREF_CALENDAR_EVENTS SYSREF_COMPONENT_TOKEN_HISTORY SYSREF_COMPONENT_TOKENS SYSREF_COMPONENTS SYSREF_CONSTANTS SYSREF_DATA_RECEIVE_PROTOCOL SYSREF_DATA_SEND_PROTOCOL SYSREF_DIALOGS SYSREF_DIALOGS_REQUISITES SYSREF_EDITORS SYSREF_EDOC_CARDS SYSREF_EDOC_TYPES SYSREF_EDOCUMENT_CARD_REQUISITES SYSREF_EDOCUMENT_CARD_TYPES SYSREF_EDOCUMENT_CARD_TYPES_REFERENCE SYSREF_EDOCUMENT_CARDS SYSREF_EDOCUMENT_HISTORY SYSREF_EDOCUMENT_KINDS SYSREF_EDOCUMENT_REQUISITES SYSREF_EDOCUMENT_SIGNATURES SYSREF_EDOCUMENT_TEMPLATES SYSREF_EDOCUMENT_TEXT_STORAGES SYSREF_EDOCUMENT_VIEWS SYSREF_FILTERER_SETUP_CONFLICTS SYSREF_FILTRATER_SETTING_CONFLICTS SYSREF_FOLDER_HISTORY SYSREF_FOLDERS SYSREF_FUNCTION_GROUPS SYSREF_FUNCTION_PARAMS SYSREF_FUNCTIONS SYSREF_JOB_HISTORY SYSREF_LINKS SYSREF_LOCALIZATION_DICTIONARY SYSREF_LOCALIZATION_LANGUAGES SYSREF_MODULES SYSREF_PRIVILEGES SYSREF_RECORD_HISTORY SYSREF_REFERENCE_REQUISITES SYSREF_REFERENCE_TYPE_VIEWS SYSREF_REFERENCE_TYPES SYSREF_REFERENCES SYSREF_REFERENCES_REQUISITES SYSREF_REMOTE_SERVERS SYSREF_REPLICATION_SESSIONS_LOG SYSREF_REPLICATION_SESSIONS_PROTOCOL SYSREF_REPORTS SYSREF_ROLES SYSREF_ROUTE_BLOCK_GROUPS SYSREF_ROUTE_BLOCKS SYSREF_SCRIPTS SYSREF_SEARCHES SYSREF_SERVER_EVENTS SYSREF_SERVER_EVENTS_HISTORY SYSREF_STANDARD_ROUTE_GROUPS SYSREF_STANDARD_ROUTES SYSREF_STATUSES SYSREF_SYSTEM_SETTINGS SYSREF_TASK_HISTORY SYSREF_TASK_KIND_GROUPS SYSREF_TASK_KINDS SYSREF_TASK_RIGHTS SYSREF_TASK_SIGNATURES SYSREF_TASKS SYSREF_UNITS SYSREF_USER_GROUPS SYSREF_USER_GROUPS_REFERENCE SYSREF_USER_SUBSTITUTION SYSREF_USERS SYSREF_USERS_REFERENCE SYSREF_VIEWERS SYSREF_WORKING_TIME_CALENDARS ";
    const table_name_constants = "ACCESS_RIGHTS_TABLE_NAME EDMS_ACCESS_TABLE_NAME EDOC_TYPES_TABLE_NAME ";
    const test_constants = "TEST_DEV_DB_NAME TEST_DEV_SYSTEM_CODE TEST_EDMS_DB_NAME TEST_EDMS_MAIN_CODE TEST_EDMS_MAIN_DB_NAME TEST_EDMS_SECOND_CODE TEST_EDMS_SECOND_DB_NAME TEST_EDMS_SYSTEM_CODE TEST_ISB5_MAIN_CODE TEST_ISB5_SECOND_CODE TEST_SQL_SERVER_2005_NAME TEST_SQL_SERVER_NAME ";
    const using_the_dialog_windows_constants = "ATTENTION_CAPTION cbsCommandLinks cbsDefault CONFIRMATION_CAPTION ERROR_CAPTION INFORMATION_CAPTION mrCancel mrOk ";
    const using_the_document_constants = "EDOC_VERSION_ACTIVE_STAGE_CODE EDOC_VERSION_DESIGN_STAGE_CODE EDOC_VERSION_OBSOLETE_STAGE_CODE ";
    const using_the_EA_and_encryption_constants = "cpDataEnciphermentEnabled cpDigitalSignatureEnabled cpID cpIssuer cpPluginVersion cpSerial cpSubjectName cpSubjSimpleName cpValidFromDate cpValidToDate ";
    const using_the_ISBL_editor_constants = "ISBL_SYNTAX NO_SYNTAX XML_SYNTAX ";
    const wait_block_properties_constants = "WAIT_BLOCK_AFTER_FINISH_EVENT WAIT_BLOCK_BEFORE_START_EVENT WAIT_BLOCK_DEADLINE_PROPERTY WAIT_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY WAIT_BLOCK_NAME_PROPERTY WAIT_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY ";
    const sysres_common_constants = "SYSRES_COMMON SYSRES_CONST SYSRES_MBFUNC SYSRES_SBDATA SYSRES_SBGUI SYSRES_SBINTF SYSRES_SBREFDSC SYSRES_SQLERRORS SYSRES_SYSCOMP ";
    const CONSTANTS = sysres_constants + base_constants + base_group_name_constants + decision_block_properties_constants + file_extension_constants + job_block_properties_constants + language_code_constants + launching_external_applications_constants + link_kind_constants + lock_type_constants + monitor_block_properties_constants + notice_block_properties_constants + object_events_constants + object_params_constants + other_constants + privileges_constants + pseudoreference_code_constants + requisite_ISBCertificateType_values_constants + requisite_ISBEDocStorageType_values_constants + requisite_compType2_values_constants + requisite_name_constants + result_constants + rule_identification_constants + script_block_properties_constants + subtask_block_properties_constants + system_component_constants + system_dialogs_constants + system_reference_names_constants + table_name_constants + test_constants + using_the_dialog_windows_constants + using_the_document_constants + using_the_EA_and_encryption_constants + using_the_ISBL_editor_constants + wait_block_properties_constants + sysres_common_constants;
    const TAccountType = "atUser atGroup atRole ";
    const TActionEnabledMode = "aemEnabledAlways aemDisabledAlways aemEnabledOnBrowse aemEnabledOnEdit aemDisabledOnBrowseEmpty ";
    const TAddPosition = "apBegin apEnd ";
    const TAlignment = "alLeft alRight ";
    const TAreaShowMode = "asmNever asmNoButCustomize asmAsLastTime asmYesButCustomize asmAlways ";
    const TCertificateInvalidationReason = "cirCommon cirRevoked ";
    const TCertificateType = "ctSignature ctEncode ctSignatureEncode ";
    const TCheckListBoxItemState = "clbUnchecked clbChecked clbGrayed ";
    const TCloseOnEsc = "ceISB ceAlways ceNever ";
    const TCompType = "ctDocument ctReference ctScript ctUnknown ctReport ctDialog ctFunction ctFolder ctEDocument ctTask ctJob ctNotice ctControlJob ";
    const TConditionFormat = "cfInternal cfDisplay ";
    const TConnectionIntent = "ciUnspecified ciWrite ciRead ";
    const TContentKind = "ckFolder ckEDocument ckTask ckJob ckComponentToken ckAny ckReference ckScript ckReport ckDialog ";
    const TControlType = "ctISBLEditor ctBevel ctButton ctCheckListBox ctComboBox ctComboEdit ctGrid ctDBCheckBox ctDBComboBox ctDBEdit ctDBEllipsis ctDBMemo ctDBNavigator ctDBRadioGroup ctDBStatusLabel ctEdit ctGroupBox ctInplaceHint ctMemo ctPanel ctListBox ctRadioButton ctRichEdit ctTabSheet ctWebBrowser ctImage ctHyperLink ctLabel ctDBMultiEllipsis ctRibbon ctRichView ctInnerPanel ctPanelGroup ctBitButton ";
    const TCriterionContentType = "cctDate cctInteger cctNumeric cctPick cctReference cctString cctText ";
    const TCultureType = "cltInternal cltPrimary cltGUI ";
    const TDataSetEventType = "dseBeforeOpen dseAfterOpen dseBeforeClose dseAfterClose dseOnValidDelete dseBeforeDelete dseAfterDelete dseAfterDeleteOutOfTransaction dseOnDeleteError dseBeforeInsert dseAfterInsert dseOnValidUpdate dseBeforeUpdate dseOnUpdateRatifiedRecord dseAfterUpdate dseAfterUpdateOutOfTransaction dseOnUpdateError dseAfterScroll dseOnOpenRecord dseOnCloseRecord dseBeforeCancel dseAfterCancel dseOnUpdateDeadlockError dseBeforeDetailUpdate dseOnPrepareUpdate dseOnAnyRequisiteChange ";
    const TDataSetState = "dssEdit dssInsert dssBrowse dssInActive ";
    const TDateFormatType = "dftDate dftShortDate dftDateTime dftTimeStamp ";
    const TDateOffsetType = "dotDays dotHours dotMinutes dotSeconds ";
    const TDateTimeKind = "dtkndLocal dtkndUTC ";
    const TDeaAccessRights = "arNone arView arEdit arFull ";
    const TDocumentDefaultAction = "ddaView ddaEdit ";
    const TEditMode = "emLock emEdit emSign emExportWithLock emImportWithUnlock emChangeVersionNote emOpenForModify emChangeLifeStage emDelete emCreateVersion emImport emUnlockExportedWithLock emStart emAbort emReInit emMarkAsReaded emMarkAsUnreaded emPerform emAccept emResume emChangeRights emEditRoute emEditObserver emRecoveryFromLocalCopy emChangeWorkAccessType emChangeEncodeTypeToCertificate emChangeEncodeTypeToPassword emChangeEncodeTypeToNone emChangeEncodeTypeToCertificatePassword emChangeStandardRoute emGetText emOpenForView emMoveToStorage emCreateObject emChangeVersionHidden emDeleteVersion emChangeLifeCycleStage emApprovingSign emExport emContinue emLockFromEdit emUnLockForEdit emLockForServer emUnlockFromServer emDelegateAccessRights emReEncode ";
    const TEditorCloseObservType = "ecotFile ecotProcess ";
    const TEdmsApplicationAction = "eaGet eaCopy eaCreate eaCreateStandardRoute ";
    const TEDocumentLockType = "edltAll edltNothing edltQuery ";
    const TEDocumentStepShowMode = "essmText essmCard ";
    const TEDocumentStepVersionType = "esvtLast esvtLastActive esvtSpecified ";
    const TEDocumentStorageFunction = "edsfExecutive edsfArchive ";
    const TEDocumentStorageType = "edstSQLServer edstFile ";
    const TEDocumentVersionSourceType = "edvstNone edvstEDocumentVersionCopy edvstFile edvstTemplate edvstScannedFile ";
    const TEDocumentVersionState = "vsDefault vsDesign vsActive vsObsolete ";
    const TEncodeType = "etNone etCertificate etPassword etCertificatePassword ";
    const TExceptionCategory = "ecException ecWarning ecInformation ";
    const TExportedSignaturesType = "estAll estApprovingOnly ";
    const TExportedVersionType = "evtLast evtLastActive evtQuery ";
    const TFieldDataType = "fdtString fdtNumeric fdtInteger fdtDate fdtText fdtUnknown fdtWideString fdtLargeInteger ";
    const TFolderType = "ftInbox ftOutbox ftFavorites ftCommonFolder ftUserFolder ftComponents ftQuickLaunch ftShortcuts ftSearch ";
    const TGridRowHeight = "grhAuto grhX1 grhX2 grhX3 ";
    const THyperlinkType = "hltText hltRTF hltHTML ";
    const TImageFileFormat = "iffBMP iffJPEG iffMultiPageTIFF iffSinglePageTIFF iffTIFF iffPNG ";
    const TImageMode = "im8bGrayscale im24bRGB im1bMonochrome ";
    const TImageType = "itBMP itJPEG itWMF itPNG ";
    const TInplaceHintKind = "ikhInformation ikhWarning ikhError ikhNoIcon ";
    const TISBLContext = "icUnknown icScript icFunction icIntegratedReport icAnalyticReport icDataSetEventHandler icActionHandler icFormEventHandler icLookUpEventHandler icRequisiteChangeEventHandler icBeforeSearchEventHandler icRoleCalculation icSelectRouteEventHandler icBlockPropertyCalculation icBlockQueryParamsEventHandler icChangeSearchResultEventHandler icBlockEventHandler icSubTaskInitEventHandler icEDocDataSetEventHandler icEDocLookUpEventHandler icEDocActionHandler icEDocFormEventHandler icEDocRequisiteChangeEventHandler icStructuredConversionRule icStructuredConversionEventBefore icStructuredConversionEventAfter icWizardEventHandler icWizardFinishEventHandler icWizardStepEventHandler icWizardStepFinishEventHandler icWizardActionEnableEventHandler icWizardActionExecuteEventHandler icCreateJobsHandler icCreateNoticesHandler icBeforeLookUpEventHandler icAfterLookUpEventHandler icTaskAbortEventHandler icWorkflowBlockActionHandler icDialogDataSetEventHandler icDialogActionHandler icDialogLookUpEventHandler icDialogRequisiteChangeEventHandler icDialogFormEventHandler icDialogValidCloseEventHandler icBlockFormEventHandler icTaskFormEventHandler icReferenceMethod icEDocMethod icDialogMethod icProcessMessageHandler ";
    const TItemShow = "isShow isHide isByUserSettings ";
    const TJobKind = "jkJob jkNotice jkControlJob ";
    const TJoinType = "jtInner jtLeft jtRight jtFull jtCross ";
    const TLabelPos = "lbpAbove lbpBelow lbpLeft lbpRight ";
    const TLicensingType = "eltPerConnection eltPerUser ";
    const TLifeCycleStageFontColor = "sfcUndefined sfcBlack sfcGreen sfcRed sfcBlue sfcOrange sfcLilac ";
    const TLifeCycleStageFontStyle = "sfsItalic sfsStrikeout sfsNormal ";
    const TLockableDevelopmentComponentType = "ldctStandardRoute ldctWizard ldctScript ldctFunction ldctRouteBlock ldctIntegratedReport ldctAnalyticReport ldctReferenceType ldctEDocumentType ldctDialog ldctServerEvents ";
    const TMaxRecordCountRestrictionType = "mrcrtNone mrcrtUser mrcrtMaximal mrcrtCustom ";
    const TRangeValueType = "vtEqual vtGreaterOrEqual vtLessOrEqual vtRange ";
    const TRelativeDate = "rdYesterday rdToday rdTomorrow rdThisWeek rdThisMonth rdThisYear rdNextMonth rdNextWeek rdLastWeek rdLastMonth ";
    const TReportDestination = "rdWindow rdFile rdPrinter ";
    const TReqDataType = "rdtString rdtNumeric rdtInteger rdtDate rdtReference rdtAccount rdtText rdtPick rdtUnknown rdtLargeInteger rdtDocument ";
    const TRequisiteEventType = "reOnChange reOnChangeValues ";
    const TSBTimeType = "ttGlobal ttLocal ttUser ttSystem ";
    const TSearchShowMode = "ssmBrowse ssmSelect ssmMultiSelect ssmBrowseModal ";
    const TSelectMode = "smSelect smLike smCard ";
    const TSignatureType = "stNone stAuthenticating stApproving ";
    const TSignerContentType = "sctString sctStream ";
    const TStringsSortType = "sstAnsiSort sstNaturalSort ";
    const TStringValueType = "svtEqual svtContain ";
    const TStructuredObjectAttributeType = "soatString soatNumeric soatInteger soatDatetime soatReferenceRecord soatText soatPick soatBoolean soatEDocument soatAccount soatIntegerCollection soatNumericCollection soatStringCollection soatPickCollection soatDatetimeCollection soatBooleanCollection soatReferenceRecordCollection soatEDocumentCollection soatAccountCollection soatContents soatUnknown ";
    const TTaskAbortReason = "tarAbortByUser tarAbortByWorkflowException ";
    const TTextValueType = "tvtAllWords tvtExactPhrase tvtAnyWord ";
    const TUserObjectStatus = "usNone usCompleted usRedSquare usBlueSquare usYellowSquare usGreenSquare usOrangeSquare usPurpleSquare usFollowUp ";
    const TUserType = "utUnknown utUser utDeveloper utAdministrator utSystemDeveloper utDisconnected ";
    const TValuesBuildType = "btAnd btDetailAnd btOr btNotOr btOnly ";
    const TViewMode = "vmView vmSelect vmNavigation ";
    const TViewSelectionMode = "vsmSingle vsmMultiple vsmMultipleCheck vsmNoSelection ";
    const TWizardActionType = "wfatPrevious wfatNext wfatCancel wfatFinish ";
    const TWizardFormElementProperty = "wfepUndefined wfepText3 wfepText6 wfepText9 wfepSpinEdit wfepDropDown wfepRadioGroup wfepFlag wfepText12 wfepText15 wfepText18 wfepText21 wfepText24 wfepText27 wfepText30 wfepRadioGroupColumn1 wfepRadioGroupColumn2 wfepRadioGroupColumn3 ";
    const TWizardFormElementType = "wfetQueryParameter wfetText wfetDelimiter wfetLabel ";
    const TWizardParamType = "wptString wptInteger wptNumeric wptBoolean wptDateTime wptPick wptText wptUser wptUserList wptEDocumentInfo wptEDocumentInfoList wptReferenceRecordInfo wptReferenceRecordInfoList wptFolderInfo wptTaskInfo wptContents wptFileName wptDate ";
    const TWizardStepResult = "wsrComplete wsrGoNext wsrGoPrevious wsrCustom wsrCancel wsrGoFinal ";
    const TWizardStepType = "wstForm wstEDocument wstTaskCard wstReferenceRecordCard wstFinal ";
    const TWorkAccessType = "waAll waPerformers waManual ";
    const TWorkflowBlockType = "wsbStart wsbFinish wsbNotice wsbStep wsbDecision wsbWait wsbMonitor wsbScript wsbConnector wsbSubTask wsbLifeCycleStage wsbPause ";
    const TWorkflowDataType = "wdtInteger wdtFloat wdtString wdtPick wdtDateTime wdtBoolean wdtTask wdtJob wdtFolder wdtEDocument wdtReferenceRecord wdtUser wdtGroup wdtRole wdtIntegerCollection wdtFloatCollection wdtStringCollection wdtPickCollection wdtDateTimeCollection wdtBooleanCollection wdtTaskCollection wdtJobCollection wdtFolderCollection wdtEDocumentCollection wdtReferenceRecordCollection wdtUserCollection wdtGroupCollection wdtRoleCollection wdtContents wdtUserList wdtSearchDescription wdtDeadLine wdtPickSet wdtAccountCollection ";
    const TWorkImportance = "wiLow wiNormal wiHigh ";
    const TWorkRouteType = "wrtSoft wrtHard ";
    const TWorkState = "wsInit wsRunning wsDone wsControlled wsAborted wsContinued ";
    const TWorkTextBuildingMode = "wtmFull wtmFromCurrent wtmOnlyCurrent ";
    const ENUMS = TAccountType + TActionEnabledMode + TAddPosition + TAlignment + TAreaShowMode + TCertificateInvalidationReason + TCertificateType + TCheckListBoxItemState + TCloseOnEsc + TCompType + TConditionFormat + TConnectionIntent + TContentKind + TControlType + TCriterionContentType + TCultureType + TDataSetEventType + TDataSetState + TDateFormatType + TDateOffsetType + TDateTimeKind + TDeaAccessRights + TDocumentDefaultAction + TEditMode + TEditorCloseObservType + TEdmsApplicationAction + TEDocumentLockType + TEDocumentStepShowMode + TEDocumentStepVersionType + TEDocumentStorageFunction + TEDocumentStorageType + TEDocumentVersionSourceType + TEDocumentVersionState + TEncodeType + TExceptionCategory + TExportedSignaturesType + TExportedVersionType + TFieldDataType + TFolderType + TGridRowHeight + THyperlinkType + TImageFileFormat + TImageMode + TImageType + TInplaceHintKind + TISBLContext + TItemShow + TJobKind + TJoinType + TLabelPos + TLicensingType + TLifeCycleStageFontColor + TLifeCycleStageFontStyle + TLockableDevelopmentComponentType + TMaxRecordCountRestrictionType + TRangeValueType + TRelativeDate + TReportDestination + TReqDataType + TRequisiteEventType + TSBTimeType + TSearchShowMode + TSelectMode + TSignatureType + TSignerContentType + TStringsSortType + TStringValueType + TStructuredObjectAttributeType + TTaskAbortReason + TTextValueType + TUserObjectStatus + TUserType + TValuesBuildType + TViewMode + TViewSelectionMode + TWizardActionType + TWizardFormElementProperty + TWizardFormElementType + TWizardParamType + TWizardStepResult + TWizardStepType + TWorkAccessType + TWorkflowBlockType + TWorkflowDataType + TWorkImportance + TWorkRouteType + TWorkState + TWorkTextBuildingMode;
    const system_functions = "AddSubString AdjustLineBreaks AmountInWords Analysis ArrayDimCount ArrayHighBound ArrayLowBound ArrayOf ArrayReDim Assert Assigned BeginOfMonth BeginOfPeriod BuildProfilingOperationAnalysis CallProcedure CanReadFile CArrayElement CDataSetRequisite ChangeDate ChangeReferenceDataset Char CharPos CheckParam CheckParamValue CompareStrings ConstantExists ControlState ConvertDateStr Copy CopyFile CreateArray CreateCachedReference CreateConnection CreateDialog CreateDualListDialog CreateEditor CreateException CreateFile CreateFolderDialog CreateInputDialog CreateLinkFile CreateList CreateLock CreateMemoryDataSet CreateObject CreateOpenDialog CreateProgress CreateQuery CreateReference CreateReport CreateSaveDialog CreateScript CreateSQLPivotFunction CreateStringList CreateTreeListSelectDialog CSelectSQL CSQL CSubString CurrentUserID CurrentUserName CurrentVersion DataSetLocateEx DateDiff DateTimeDiff DateToStr DayOfWeek DeleteFile DirectoryExists DisableCheckAccessRights DisableCheckFullShowingRestriction DisableMassTaskSendingRestrictions DropTable DupeString EditText EnableCheckAccessRights EnableCheckFullShowingRestriction EnableMassTaskSendingRestrictions EndOfMonth EndOfPeriod ExceptionExists ExceptionsOff ExceptionsOn Execute ExecuteProcess Exit ExpandEnvironmentVariables ExtractFileDrive ExtractFileExt ExtractFileName ExtractFilePath ExtractParams FileExists FileSize FindFile FindSubString FirmContext ForceDirectories Format FormatDate FormatNumeric FormatSQLDate FormatString FreeException GetComponent GetComponentLaunchParam GetConstant GetLastException GetReferenceRecord GetRefTypeByRefID GetTableID GetTempFolder IfThen In IndexOf InputDialog InputDialogEx InteractiveMode IsFileLocked IsGraphicFile IsNumeric Length LoadString LoadStringFmt LocalTimeToUTC LowerCase Max MessageBox MessageBoxEx MimeDecodeBinary MimeDecodeString MimeEncodeBinary MimeEncodeString Min MoneyInWords MoveFile NewID Now OpenFile Ord Precision Raise ReadCertificateFromFile ReadFile ReferenceCodeByID ReferenceNumber ReferenceRequisiteMode ReferenceRequisiteValue RegionDateSettings RegionNumberSettings RegionTimeSettings RegRead RegWrite RenameFile Replace Round SelectServerCode SelectSQL ServerDateTime SetConstant SetManagedFolderFieldsState ShowConstantsInputDialog ShowMessage Sleep Split SQL SQL2XLSTAB SQLProfilingSendReport StrToDate SubString SubStringCount SystemSetting Time TimeDiff Today Transliterate Trim UpperCase UserStatus UTCToLocalTime ValidateXML VarIsClear VarIsEmpty VarIsNull WorkTimeDiff WriteFile WriteFileEx WriteObjectHistory Анализ БазаДанных БлокЕсть БлокЕстьРасш БлокИнфо БлокСнять БлокСнятьРасш БлокУстановить Ввод ВводМеню ВедС ВедСпр ВерхняяГраницаМассива ВнешПрогр Восст ВременнаяПапка Время ВыборSQL ВыбратьЗапись ВыделитьСтр Вызвать Выполнить ВыпПрогр ГрафическийФайл ГруппаДополнительно ДатаВремяСерв ДеньНедели ДиалогДаНет ДлинаСтр ДобПодстр ЕПусто ЕслиТо ЕЧисло ЗамПодстр ЗаписьСправочника ЗначПоляСпр ИДТипСпр ИзвлечьДиск ИзвлечьИмяФайла ИзвлечьПуть ИзвлечьРасширение ИзмДат ИзменитьРазмерМассива ИзмеренийМассива ИмяОрг ИмяПоляСпр Индекс ИндикаторЗакрыть ИндикаторОткрыть ИндикаторШаг ИнтерактивныйРежим ИтогТблСпр КодВидВедСпр КодВидСпрПоИД КодПоAnalit КодСимвола КодСпр КолПодстр КолПроп КонМес Конст КонстЕсть КонстЗнач КонТран КопироватьФайл КопияСтр КПериод КСтрТблСпр Макс МаксСтрТблСпр Массив Меню МенюРасш Мин НаборДанныхНайтиРасш НаимВидСпр НаимПоAnalit НаимСпр НастроитьПереводыСтрок НачМес НачТран НижняяГраницаМассива НомерСпр НПериод Окно Окр Окружение ОтлИнфДобавить ОтлИнфУдалить Отчет ОтчетАнал ОтчетИнт ПапкаСуществует Пауза ПВыборSQL ПереименоватьФайл Переменные ПереместитьФайл Подстр ПоискПодстр ПоискСтр ПолучитьИДТаблицы ПользовательДополнительно ПользовательИД ПользовательИмя ПользовательСтатус Прервать ПроверитьПараметр ПроверитьПараметрЗнач ПроверитьУсловие РазбСтр РазнВремя РазнДат РазнДатаВремя РазнРабВремя РегУстВрем РегУстДат РегУстЧсл РедТекст РеестрЗапись РеестрСписокИменПарам РеестрЧтение РеквСпр РеквСпрПр Сегодня Сейчас Сервер СерверПроцессИД СертификатФайлСчитать СжПроб Символ СистемаДиректумКод СистемаИнформация СистемаКод Содержит СоединениеЗакрыть СоединениеОткрыть СоздатьДиалог СоздатьДиалогВыбораИзДвухСписков СоздатьДиалогВыбораПапки СоздатьДиалогОткрытияФайла СоздатьДиалогСохраненияФайла СоздатьЗапрос СоздатьИндикатор СоздатьИсключение СоздатьКэшированныйСправочник СоздатьМассив СоздатьНаборДанных СоздатьОбъект СоздатьОтчет СоздатьПапку СоздатьРедактор СоздатьСоединение СоздатьСписок СоздатьСписокСтрок СоздатьСправочник СоздатьСценарий СоздСпр СостСпр Сохр СохрСпр СписокСистем Спр Справочник СпрБлокЕсть СпрБлокСнять СпрБлокСнятьРасш СпрБлокУстановить СпрИзмНабДан СпрКод СпрНомер СпрОбновить СпрОткрыть СпрОтменить СпрПарам СпрПолеЗнач СпрПолеИмя СпрРекв СпрРеквВведЗн СпрРеквНовые СпрРеквПр СпрРеквПредЗн СпрРеквРежим СпрРеквТипТекст СпрСоздать СпрСост СпрСохранить СпрТблИтог СпрТблСтр СпрТблСтрКол СпрТблСтрМакс СпрТблСтрМин СпрТблСтрПред СпрТблСтрСлед СпрТблСтрСозд СпрТблСтрУд СпрТекПредст СпрУдалить СравнитьСтр СтрВерхРегистр СтрНижнРегистр СтрТблСпр СумПроп Сценарий СценарийПарам ТекВерсия ТекОрг Точн Тран Транслитерация УдалитьТаблицу УдалитьФайл УдСпр УдСтрТблСпр Уст УстановкиКонстант ФайлАтрибутСчитать ФайлАтрибутУстановить ФайлВремя ФайлВремяУстановить ФайлВыбрать ФайлЗанят ФайлЗаписать ФайлИскать ФайлКопировать ФайлМожноЧитать ФайлОткрыть ФайлПереименовать ФайлПерекодировать ФайлПереместить ФайлПросмотреть ФайлРазмер ФайлСоздать ФайлСсылкаСоздать ФайлСуществует ФайлСчитать ФайлУдалить ФмтSQLДат ФмтДат ФмтСтр ФмтЧсл Формат ЦМассивЭлемент ЦНаборДанныхРеквизит ЦПодстр ";
    const predefined_variables = "AltState Application CallType ComponentTokens CreatedJobs CreatedNotices ControlState DialogResult Dialogs EDocuments EDocumentVersionSource Folders GlobalIDs Job Jobs InputValue LookUpReference LookUpRequisiteNames LookUpSearch Object ParentComponent Processes References Requisite ReportName Reports Result Scripts Searches SelectedAttachments SelectedItems SelectMode Sender ServerEvents ServiceFactory ShiftState SubTask SystemDialogs Tasks Wizard Wizards Work ВызовСпособ ИмяОтчета РеквЗнач ";
    const interfaces = "IApplication IAccessRights IAccountRepository IAccountSelectionRestrictions IAction IActionList IAdministrationHistoryDescription IAnchors IApplication IArchiveInfo IAttachment IAttachmentList ICheckListBox ICheckPointedList IColumn IComponent IComponentDescription IComponentToken IComponentTokenFactory IComponentTokenInfo ICompRecordInfo IConnection IContents IControl IControlJob IControlJobInfo IControlList ICrypto ICrypto2 ICustomJob ICustomJobInfo ICustomListBox ICustomObjectWizardStep ICustomWork ICustomWorkInfo IDataSet IDataSetAccessInfo IDataSigner IDateCriterion IDateRequisite IDateRequisiteDescription IDateValue IDeaAccessRights IDeaObjectInfo IDevelopmentComponentLock IDialog IDialogFactory IDialogPickRequisiteItems IDialogsFactory IDICSFactory IDocRequisite IDocumentInfo IDualListDialog IECertificate IECertificateInfo IECertificates IEditControl IEditorForm IEdmsExplorer IEdmsObject IEdmsObjectDescription IEdmsObjectFactory IEdmsObjectInfo IEDocument IEDocumentAccessRights IEDocumentDescription IEDocumentEditor IEDocumentFactory IEDocumentInfo IEDocumentStorage IEDocumentVersion IEDocumentVersionListDialog IEDocumentVersionSource IEDocumentWizardStep IEDocVerSignature IEDocVersionState IEnabledMode IEncodeProvider IEncrypter IEvent IEventList IException IExternalEvents IExternalHandler IFactory IField IFileDialog IFolder IFolderDescription IFolderDialog IFolderFactory IFolderInfo IForEach IForm IFormTitle IFormWizardStep IGlobalIDFactory IGlobalIDInfo IGrid IHasher IHistoryDescription IHyperLinkControl IImageButton IImageControl IInnerPanel IInplaceHint IIntegerCriterion IIntegerList IIntegerRequisite IIntegerValue IISBLEditorForm IJob IJobDescription IJobFactory IJobForm IJobInfo ILabelControl ILargeIntegerCriterion ILargeIntegerRequisite ILargeIntegerValue ILicenseInfo ILifeCycleStage IList IListBox ILocalIDInfo ILocalization ILock IMemoryDataSet IMessagingFactory IMetadataRepository INotice INoticeInfo INumericCriterion INumericRequisite INumericValue IObject IObjectDescription IObjectImporter IObjectInfo IObserver IPanelGroup IPickCriterion IPickProperty IPickRequisite IPickRequisiteDescription IPickRequisiteItem IPickRequisiteItems IPickValue IPrivilege IPrivilegeList IProcess IProcessFactory IProcessMessage IProgress IProperty IPropertyChangeEvent IQuery IReference IReferenceCriterion IReferenceEnabledMode IReferenceFactory IReferenceHistoryDescription IReferenceInfo IReferenceRecordCardWizardStep IReferenceRequisiteDescription IReferencesFactory IReferenceValue IRefRequisite IReport IReportFactory IRequisite IRequisiteDescription IRequisiteDescriptionList IRequisiteFactory IRichEdit IRouteStep IRule IRuleList ISchemeBlock IScript IScriptFactory ISearchCriteria ISearchCriterion ISearchDescription ISearchFactory ISearchFolderInfo ISearchForObjectDescription ISearchResultRestrictions ISecuredContext ISelectDialog IServerEvent IServerEventFactory IServiceDialog IServiceFactory ISignature ISignProvider ISignProvider2 ISignProvider3 ISimpleCriterion IStringCriterion IStringList IStringRequisite IStringRequisiteDescription IStringValue ISystemDialogsFactory ISystemInfo ITabSheet ITask ITaskAbortReasonInfo ITaskCardWizardStep ITaskDescription ITaskFactory ITaskInfo ITaskRoute ITextCriterion ITextRequisite ITextValue ITreeListSelectDialog IUser IUserList IValue IView IWebBrowserControl IWizard IWizardAction IWizardFactory IWizardFormElement IWizardParam IWizardPickParam IWizardReferenceParam IWizardStep IWorkAccessRights IWorkDescription IWorkflowAskableParam IWorkflowAskableParams IWorkflowBlock IWorkflowBlockResult IWorkflowEnabledMode IWorkflowParam IWorkflowPickParam IWorkflowReferenceParam IWorkState IWorkTreeCustomNode IWorkTreeJobNode IWorkTreeTaskNode IXMLEditorForm SBCrypto ";
    const BUILTIN = CONSTANTS + ENUMS;
    const CLASS = predefined_variables;
    const LITERAL = "null true false nil ";
    const NUMBERS = {
      className: "number",
      begin: hljs.NUMBER_RE,
      relevance: 0
    };
    const STRINGS2 = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "'",
          end: "'"
        }
      ]
    };
    const DOCTAGS = {
      className: "doctag",
      begin: "\\b(?:TODO|DONE|BEGIN|END|STUB|CHG|FIXME|NOTE|BUG|XXX)\\b",
      relevance: 0
    };
    const ISBL_LINE_COMMENT_MODE = {
      className: "comment",
      begin: "//",
      end: "$",
      relevance: 0,
      contains: [
        hljs.PHRASAL_WORDS_MODE,
        DOCTAGS
      ]
    };
    const ISBL_BLOCK_COMMENT_MODE = {
      className: "comment",
      begin: "/\\*",
      end: "\\*/",
      relevance: 0,
      contains: [
        hljs.PHRASAL_WORDS_MODE,
        DOCTAGS
      ]
    };
    const COMMENTS = { variants: [
      ISBL_LINE_COMMENT_MODE,
      ISBL_BLOCK_COMMENT_MODE
    ] };
    const KEYWORDS2 = {
      $pattern: UNDERSCORE_IDENT_RE2,
      keyword: KEYWORD,
      built_in: BUILTIN,
      class: CLASS,
      literal: LITERAL
    };
    const METHODS = {
      begin: "\\.\\s*" + hljs.UNDERSCORE_IDENT_RE,
      keywords: KEYWORDS2,
      relevance: 0
    };
    const TYPES2 = {
      className: "type",
      begin: ":[ \\t]*(" + interfaces.trim().replace(/\s/g, "|") + ")",
      end: "[ \\t]*=",
      excludeEnd: true
    };
    const VARIABLES = {
      className: "variable",
      keywords: KEYWORDS2,
      begin: UNDERSCORE_IDENT_RE2,
      relevance: 0,
      contains: [
        TYPES2,
        METHODS
      ]
    };
    const FUNCTION_TITLE = FUNCTION_NAME_IDENT_RE + "\\(";
    const TITLE_MODE2 = {
      className: "title",
      keywords: {
        $pattern: UNDERSCORE_IDENT_RE2,
        built_in: system_functions
      },
      begin: FUNCTION_TITLE,
      end: "\\(",
      returnBegin: true,
      excludeEnd: true
    };
    const FUNCTIONS = {
      className: "function",
      begin: FUNCTION_TITLE,
      end: "\\)$",
      returnBegin: true,
      keywords: KEYWORDS2,
      illegal: "[\\[\\]\\|\\$\\?%,~#@]",
      contains: [
        TITLE_MODE2,
        METHODS,
        VARIABLES,
        STRINGS2,
        NUMBERS,
        COMMENTS
      ]
    };
    return {
      name: "ISBL",
      case_insensitive: true,
      keywords: KEYWORDS2,
      illegal: "\\$|\\?|%|,|;$|~|#|@|</",
      contains: [
        FUNCTIONS,
        TYPES2,
        METHODS,
        VARIABLES,
        STRINGS2,
        NUMBERS,
        COMMENTS
      ]
    };
  }
  function jbossCli(hljs) {
    const PARAM = {
      begin: /[\w-]+ *=/,
      returnBegin: true,
      relevance: 0,
      contains: [
        {
          className: "attr",
          begin: /[\w-]+/
        }
      ]
    };
    const PARAMSBLOCK = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      contains: [PARAM],
      relevance: 0
    };
    const OPERATION = {
      className: "function",
      begin: /:[\w\-.]+/,
      relevance: 0
    };
    const PATH = {
      className: "string",
      begin: /\B([\/.])[\w\-.\/=]+/
    };
    const COMMAND_PARAMS = {
      className: "params",
      begin: /--[\w\-=\/]+/
    };
    return {
      name: "JBoss CLI",
      aliases: ["wildfly-cli"],
      keywords: {
        $pattern: "[a-z-]+",
        keyword: "alias batch cd clear command connect connection-factory connection-info data-source deploy deployment-info deployment-overlay echo echo-dmr help history if jdbc-driver-info jms-queue|20 jms-topic|20 ls patch pwd quit read-attribute read-operation reload rollout-plan run-batch set shutdown try unalias undeploy unset version xa-data-source",
        // module
        literal: "true false"
      },
      contains: [
        hljs.HASH_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        COMMAND_PARAMS,
        OPERATION,
        PATH,
        PARAMSBLOCK
      ]
    };
  }
  function julia(hljs) {
    const VARIABLE_NAME_RE = "[A-Za-z_\\u00A1-\\uFFFF][A-Za-z_0-9\\u00A1-\\uFFFF]*";
    const KEYWORD_LIST = [
      "baremodule",
      "begin",
      "break",
      "catch",
      "ccall",
      "const",
      "continue",
      "do",
      "else",
      "elseif",
      "end",
      "export",
      "false",
      "finally",
      "for",
      "function",
      "global",
      "if",
      "import",
      "in",
      "isa",
      "let",
      "local",
      "macro",
      "module",
      "quote",
      "return",
      "true",
      "try",
      "using",
      "where",
      "while"
    ];
    const LITERAL_LIST = [
      "ARGS",
      "C_NULL",
      "DEPOT_PATH",
      "ENDIAN_BOM",
      "ENV",
      "Inf",
      "Inf16",
      "Inf32",
      "Inf64",
      "InsertionSort",
      "LOAD_PATH",
      "MergeSort",
      "NaN",
      "NaN16",
      "NaN32",
      "NaN64",
      "PROGRAM_FILE",
      "QuickSort",
      "RoundDown",
      "RoundFromZero",
      "RoundNearest",
      "RoundNearestTiesAway",
      "RoundNearestTiesUp",
      "RoundToZero",
      "RoundUp",
      "VERSION|0",
      "devnull",
      "false",
      "im",
      "missing",
      "nothing",
      "pi",
      "stderr",
      "stdin",
      "stdout",
      "true",
      "undef",
      "π",
      "ℯ"
    ];
    const BUILT_IN_LIST = [
      "AbstractArray",
      "AbstractChannel",
      "AbstractChar",
      "AbstractDict",
      "AbstractDisplay",
      "AbstractFloat",
      "AbstractIrrational",
      "AbstractMatrix",
      "AbstractRange",
      "AbstractSet",
      "AbstractString",
      "AbstractUnitRange",
      "AbstractVecOrMat",
      "AbstractVector",
      "Any",
      "ArgumentError",
      "Array",
      "AssertionError",
      "BigFloat",
      "BigInt",
      "BitArray",
      "BitMatrix",
      "BitSet",
      "BitVector",
      "Bool",
      "BoundsError",
      "CapturedException",
      "CartesianIndex",
      "CartesianIndices",
      "Cchar",
      "Cdouble",
      "Cfloat",
      "Channel",
      "Char",
      "Cint",
      "Cintmax_t",
      "Clong",
      "Clonglong",
      "Cmd",
      "Colon",
      "Complex",
      "ComplexF16",
      "ComplexF32",
      "ComplexF64",
      "CompositeException",
      "Condition",
      "Cptrdiff_t",
      "Cshort",
      "Csize_t",
      "Cssize_t",
      "Cstring",
      "Cuchar",
      "Cuint",
      "Cuintmax_t",
      "Culong",
      "Culonglong",
      "Cushort",
      "Cvoid",
      "Cwchar_t",
      "Cwstring",
      "DataType",
      "DenseArray",
      "DenseMatrix",
      "DenseVecOrMat",
      "DenseVector",
      "Dict",
      "DimensionMismatch",
      "Dims",
      "DivideError",
      "DomainError",
      "EOFError",
      "Enum",
      "ErrorException",
      "Exception",
      "ExponentialBackOff",
      "Expr",
      "Float16",
      "Float32",
      "Float64",
      "Function",
      "GlobalRef",
      "HTML",
      "IO",
      "IOBuffer",
      "IOContext",
      "IOStream",
      "IdDict",
      "IndexCartesian",
      "IndexLinear",
      "IndexStyle",
      "InexactError",
      "InitError",
      "Int",
      "Int128",
      "Int16",
      "Int32",
      "Int64",
      "Int8",
      "Integer",
      "InterruptException",
      "InvalidStateException",
      "Irrational",
      "KeyError",
      "LinRange",
      "LineNumberNode",
      "LinearIndices",
      "LoadError",
      "MIME",
      "Matrix",
      "Method",
      "MethodError",
      "Missing",
      "MissingException",
      "Module",
      "NTuple",
      "NamedTuple",
      "Nothing",
      "Number",
      "OrdinalRange",
      "OutOfMemoryError",
      "OverflowError",
      "Pair",
      "PartialQuickSort",
      "PermutedDimsArray",
      "Pipe",
      "ProcessFailedException",
      "Ptr",
      "QuoteNode",
      "Rational",
      "RawFD",
      "ReadOnlyMemoryError",
      "Real",
      "ReentrantLock",
      "Ref",
      "Regex",
      "RegexMatch",
      "RoundingMode",
      "SegmentationFault",
      "Set",
      "Signed",
      "Some",
      "StackOverflowError",
      "StepRange",
      "StepRangeLen",
      "StridedArray",
      "StridedMatrix",
      "StridedVecOrMat",
      "StridedVector",
      "String",
      "StringIndexError",
      "SubArray",
      "SubString",
      "SubstitutionString",
      "Symbol",
      "SystemError",
      "Task",
      "TaskFailedException",
      "Text",
      "TextDisplay",
      "Timer",
      "Tuple",
      "Type",
      "TypeError",
      "TypeVar",
      "UInt",
      "UInt128",
      "UInt16",
      "UInt32",
      "UInt64",
      "UInt8",
      "UndefInitializer",
      "UndefKeywordError",
      "UndefRefError",
      "UndefVarError",
      "Union",
      "UnionAll",
      "UnitRange",
      "Unsigned",
      "Val",
      "Vararg",
      "VecElement",
      "VecOrMat",
      "Vector",
      "VersionNumber",
      "WeakKeyDict",
      "WeakRef"
    ];
    const KEYWORDS2 = {
      $pattern: VARIABLE_NAME_RE,
      keyword: KEYWORD_LIST,
      literal: LITERAL_LIST,
      built_in: BUILT_IN_LIST
    };
    const DEFAULT = {
      keywords: KEYWORDS2,
      illegal: /<\//
    };
    const NUMBER = {
      className: "number",
      // supported numeric literals:
      //  * binary literal (e.g. 0x10)
      //  * octal literal (e.g. 0o76543210)
      //  * hexadecimal literal (e.g. 0xfedcba876543210)
      //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)
      //  * decimal literal (e.g. 9876543210, 100_000_000)
      //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)
      begin: /(\b0x[\d_]*(\.[\d_]*)?|0x\.\d[\d_]*)p[-+]?\d+|\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\b\d[\d_]*(\.[\d_]*)?|\.\d[\d_]*)([eEfF][-+]?\d+)?/,
      relevance: 0
    };
    const CHAR = {
      className: "string",
      begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
    };
    const INTERPOLATION = {
      className: "subst",
      begin: /\$\(/,
      end: /\)/,
      keywords: KEYWORDS2
    };
    const INTERPOLATED_VARIABLE = {
      className: "variable",
      begin: "\\$" + VARIABLE_NAME_RE
    };
    const STRING = {
      className: "string",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        INTERPOLATION,
        INTERPOLATED_VARIABLE
      ],
      variants: [
        {
          begin: /\w*"""/,
          end: /"""\w*/,
          relevance: 10
        },
        {
          begin: /\w*"/,
          end: /"\w*/
        }
      ]
    };
    const COMMAND = {
      className: "string",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        INTERPOLATION,
        INTERPOLATED_VARIABLE
      ],
      begin: "`",
      end: "`"
    };
    const MACROCALL = {
      className: "meta",
      begin: "@" + VARIABLE_NAME_RE
    };
    const COMMENT2 = {
      className: "comment",
      variants: [
        {
          begin: "#=",
          end: "=#",
          relevance: 10
        },
        {
          begin: "#",
          end: "$"
        }
      ]
    };
    DEFAULT.name = "Julia";
    DEFAULT.contains = [
      NUMBER,
      CHAR,
      STRING,
      COMMAND,
      MACROCALL,
      COMMENT2,
      hljs.HASH_COMMENT_MODE,
      {
        className: "keyword",
        begin: "\\b(((abstract|primitive)\\s+)type|(mutable\\s+)?struct)\\b"
      },
      { begin: /<:/ }
      // relevance booster
    ];
    INTERPOLATION.contains = DEFAULT.contains;
    return DEFAULT;
  }
  function juliaRepl(hljs) {
    return {
      name: "Julia REPL",
      contains: [
        {
          className: "meta.prompt",
          begin: /^julia>/,
          relevance: 10,
          starts: {
            // end the highlighting if we are on a new line and the line does not have at
            // least six spaces in the beginning
            end: /^(?![ ]{6})/,
            subLanguage: "julia"
          }
        }
      ],
      // jldoctest Markdown blocks are used in the Julia manual and package docs indicate
      // code snippets that should be verified when the documentation is built. They can be
      // either REPL-like or script-like, but are usually REPL-like and therefore we apply
      // julia-repl highlighting to them. More information can be found in Documenter's
      // manual: https://juliadocs.github.io/Documenter.jl/latest/man/doctests.html
      aliases: ["jldoctest"]
    };
  }
  function lasso(hljs) {
    const LASSO_IDENT_RE = "[a-zA-Z_][\\w.]*";
    const LASSO_ANGLE_RE = "<\\?(lasso(script)?|=)";
    const LASSO_CLOSE_RE = "\\]|\\?>";
    const LASSO_KEYWORDS = {
      $pattern: LASSO_IDENT_RE + "|&[lg]t;",
      literal: "true false none minimal full all void and or not bw nbw ew new cn ncn lt lte gt gte eq neq rx nrx ft",
      built_in: "array date decimal duration integer map pair string tag xml null boolean bytes keyword list locale queue set stack staticarray local var variable global data self inherited currentcapture givenblock",
      keyword: "cache database_names database_schemanames database_tablenames define_tag define_type email_batch encode_set html_comment handle handle_error header if inline iterate ljax_target link link_currentaction link_currentgroup link_currentrecord link_detail link_firstgroup link_firstrecord link_lastgroup link_lastrecord link_nextgroup link_nextrecord link_prevgroup link_prevrecord log loop namespace_using output_none portal private protect records referer referrer repeating resultset rows search_args search_arguments select sort_args sort_arguments thread_atomic value_list while abort case else fail_if fail_ifnot fail if_empty if_false if_null if_true loop_abort loop_continue loop_count params params_up return return_value run_children soap_definetag soap_lastrequest soap_lastresponse tag_name ascending average by define descending do equals frozen group handle_failure import in into join let match max min on order parent protected provide public require returnhome skip split_thread sum take thread to trait type where with yield yieldhome"
    };
    const HTML_COMMENT = hljs.COMMENT(
      "<!--",
      "-->",
      { relevance: 0 }
    );
    const LASSO_NOPROCESS = {
      className: "meta",
      begin: "\\[noprocess\\]",
      starts: {
        end: "\\[/noprocess\\]",
        returnEnd: true,
        contains: [HTML_COMMENT]
      }
    };
    const LASSO_START = {
      className: "meta",
      begin: "\\[/noprocess|" + LASSO_ANGLE_RE
    };
    const LASSO_DATAMEMBER = {
      className: "symbol",
      begin: "'" + LASSO_IDENT_RE + "'"
    };
    const LASSO_CODE = [
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.inherit(hljs.C_NUMBER_MODE, { begin: hljs.C_NUMBER_RE + "|(-?infinity|NaN)\\b" }),
      hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
      hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
      {
        className: "string",
        begin: "`",
        end: "`"
      },
      {
        // variables
        variants: [
          { begin: "[#$]" + LASSO_IDENT_RE },
          {
            begin: "#",
            end: "\\d+",
            illegal: "\\W"
          }
        ]
      },
      {
        className: "type",
        begin: "::\\s*",
        end: LASSO_IDENT_RE,
        illegal: "\\W"
      },
      {
        className: "params",
        variants: [
          {
            begin: "-(?!infinity)" + LASSO_IDENT_RE,
            relevance: 0
          },
          { begin: "(\\.\\.\\.)" }
        ]
      },
      {
        begin: /(->|\.)\s*/,
        relevance: 0,
        contains: [LASSO_DATAMEMBER]
      },
      {
        className: "class",
        beginKeywords: "define",
        returnEnd: true,
        end: "\\(|=>",
        contains: [hljs.inherit(hljs.TITLE_MODE, { begin: LASSO_IDENT_RE + "(=(?!>))?|[-+*/%](?!>)" })]
      }
    ];
    return {
      name: "Lasso",
      aliases: [
        "ls",
        "lassoscript"
      ],
      case_insensitive: true,
      keywords: LASSO_KEYWORDS,
      contains: [
        {
          className: "meta",
          begin: LASSO_CLOSE_RE,
          relevance: 0,
          starts: {
            // markup
            end: "\\[|" + LASSO_ANGLE_RE,
            returnEnd: true,
            relevance: 0,
            contains: [HTML_COMMENT]
          }
        },
        LASSO_NOPROCESS,
        LASSO_START,
        {
          className: "meta",
          begin: "\\[no_square_brackets",
          starts: {
            end: "\\[/no_square_brackets\\]",
            // not implemented in the language
            keywords: LASSO_KEYWORDS,
            contains: [
              {
                className: "meta",
                begin: LASSO_CLOSE_RE,
                relevance: 0,
                starts: {
                  end: "\\[noprocess\\]|" + LASSO_ANGLE_RE,
                  returnEnd: true,
                  contains: [HTML_COMMENT]
                }
              },
              LASSO_NOPROCESS,
              LASSO_START
            ].concat(LASSO_CODE)
          }
        },
        {
          className: "meta",
          begin: "\\[",
          relevance: 0
        },
        {
          className: "meta",
          begin: "^#!",
          end: "lasso9$",
          relevance: 10
        }
      ].concat(LASSO_CODE)
    };
  }
  function latex(hljs) {
    const regex = hljs.regex;
    const KNOWN_CONTROL_WORDS = regex.either(...[
      "(?:NeedsTeXFormat|RequirePackage|GetIdInfo)",
      "Provides(?:Expl)?(?:Package|Class|File)",
      "(?:DeclareOption|ProcessOptions)",
      "(?:documentclass|usepackage|input|include)",
      "makeat(?:letter|other)",
      "ExplSyntax(?:On|Off)",
      "(?:new|renew|provide)?command",
      "(?:re)newenvironment",
      "(?:New|Renew|Provide|Declare)(?:Expandable)?DocumentCommand",
      "(?:New|Renew|Provide|Declare)DocumentEnvironment",
      "(?:(?:e|g|x)?def|let)",
      "(?:begin|end)",
      "(?:part|chapter|(?:sub){0,2}section|(?:sub)?paragraph)",
      "caption",
      "(?:label|(?:eq|page|name)?ref|(?:paren|foot|super)?cite)",
      "(?:alpha|beta|[Gg]amma|[Dd]elta|(?:var)?epsilon|zeta|eta|[Tt]heta|vartheta)",
      "(?:iota|(?:var)?kappa|[Ll]ambda|mu|nu|[Xx]i|[Pp]i|varpi|(?:var)rho)",
      "(?:[Ss]igma|varsigma|tau|[Uu]psilon|[Pp]hi|varphi|chi|[Pp]si|[Oo]mega)",
      "(?:frac|sum|prod|lim|infty|times|sqrt|leq|geq|left|right|middle|[bB]igg?)",
      "(?:[lr]angle|q?quad|[lcvdi]?dots|d?dot|hat|tilde|bar)"
    ].map((word) => word + "(?![a-zA-Z@:_])"));
    const L3_REGEX = new RegExp([
      // A function \module_function_name:signature or \__module_function_name:signature,
      // where both module and function_name need at least two characters and
      // function_name may contain single underscores.
      "(?:__)?[a-zA-Z]{2,}_[a-zA-Z](?:_?[a-zA-Z])+:[a-zA-Z]*",
      // A variable \scope_module_and_name_type or \scope__module_ane_name_type,
      // where scope is one of l, g or c, type needs at least two characters
      // and module_and_name may contain single underscores.
      "[lgc]__?[a-zA-Z](?:_?[a-zA-Z])*_[a-zA-Z]{2,}",
      // A quark \q_the_name or \q__the_name or
      // scan mark \s_the_name or \s__vthe_name,
      // where variable_name needs at least two characters and
      // may contain single underscores.
      "[qs]__?[a-zA-Z](?:_?[a-zA-Z])+",
      // Other LaTeX3 macro names that are not covered by the three rules above.
      "use(?:_i)?:[a-zA-Z]*",
      "(?:else|fi|or):",
      "(?:if|cs|exp):w",
      "(?:hbox|vbox):n",
      "::[a-zA-Z]_unbraced",
      "::[a-zA-Z:]"
    ].map((pattern) => pattern + "(?![a-zA-Z:_])").join("|"));
    const L2_VARIANTS = [
      { begin: /[a-zA-Z@]+/ },
      // control word
      { begin: /[^a-zA-Z@]?/ }
      // control symbol
    ];
    const DOUBLE_CARET_VARIANTS = [
      { begin: /\^{6}[0-9a-f]{6}/ },
      { begin: /\^{5}[0-9a-f]{5}/ },
      { begin: /\^{4}[0-9a-f]{4}/ },
      { begin: /\^{3}[0-9a-f]{3}/ },
      { begin: /\^{2}[0-9a-f]{2}/ },
      { begin: /\^{2}[\u0000-\u007f]/ }
    ];
    const CONTROL_SEQUENCE = {
      className: "keyword",
      begin: /\\/,
      relevance: 0,
      contains: [
        {
          endsParent: true,
          begin: KNOWN_CONTROL_WORDS
        },
        {
          endsParent: true,
          begin: L3_REGEX
        },
        {
          endsParent: true,
          variants: DOUBLE_CARET_VARIANTS
        },
        {
          endsParent: true,
          relevance: 0,
          variants: L2_VARIANTS
        }
      ]
    };
    const MACRO_PARAM = {
      className: "params",
      relevance: 0,
      begin: /#+\d?/
    };
    const DOUBLE_CARET_CHAR = {
      // relevance: 1
      variants: DOUBLE_CARET_VARIANTS
    };
    const SPECIAL_CATCODE = {
      className: "built_in",
      relevance: 0,
      begin: /[$&^_]/
    };
    const MAGIC_COMMENT = {
      className: "meta",
      begin: /% ?!(T[eE]X|tex|BIB|bib)/,
      end: "$",
      relevance: 10
    };
    const COMMENT2 = hljs.COMMENT(
      "%",
      "$",
      { relevance: 0 }
    );
    const EVERYTHING_BUT_VERBATIM = [
      CONTROL_SEQUENCE,
      MACRO_PARAM,
      DOUBLE_CARET_CHAR,
      SPECIAL_CATCODE,
      MAGIC_COMMENT,
      COMMENT2
    ];
    const BRACE_GROUP_NO_VERBATIM = {
      begin: /\{/,
      end: /\}/,
      relevance: 0,
      contains: [
        "self",
        ...EVERYTHING_BUT_VERBATIM
      ]
    };
    const ARGUMENT_BRACES = hljs.inherit(
      BRACE_GROUP_NO_VERBATIM,
      {
        relevance: 0,
        endsParent: true,
        contains: [
          BRACE_GROUP_NO_VERBATIM,
          ...EVERYTHING_BUT_VERBATIM
        ]
      }
    );
    const ARGUMENT_BRACKETS = {
      begin: /\[/,
      end: /\]/,
      endsParent: true,
      relevance: 0,
      contains: [
        BRACE_GROUP_NO_VERBATIM,
        ...EVERYTHING_BUT_VERBATIM
      ]
    };
    const SPACE_GOBBLER = {
      begin: /\s+/,
      relevance: 0
    };
    const ARGUMENT_M = [ARGUMENT_BRACES];
    const ARGUMENT_O = [ARGUMENT_BRACKETS];
    const ARGUMENT_AND_THEN = function(arg, starts_mode) {
      return {
        contains: [SPACE_GOBBLER],
        starts: {
          relevance: 0,
          contains: arg,
          starts: starts_mode
        }
      };
    };
    const CSNAME = function(csname, starts_mode) {
      return {
        begin: "\\\\" + csname + "(?![a-zA-Z@:_])",
        keywords: {
          $pattern: /\\[a-zA-Z]+/,
          keyword: "\\" + csname
        },
        relevance: 0,
        contains: [SPACE_GOBBLER],
        starts: starts_mode
      };
    };
    const BEGIN_ENV = function(envname, starts_mode) {
      return hljs.inherit(
        {
          begin: "\\\\begin(?=[ 	]*(\\r?\\n[ 	]*)?\\{" + envname + "\\})",
          keywords: {
            $pattern: /\\[a-zA-Z]+/,
            keyword: "\\begin"
          },
          relevance: 0
        },
        ARGUMENT_AND_THEN(ARGUMENT_M, starts_mode)
      );
    };
    const VERBATIM_DELIMITED_EQUAL = (innerName = "string") => {
      return hljs.END_SAME_AS_BEGIN({
        className: innerName,
        begin: /(.|\r?\n)/,
        end: /(.|\r?\n)/,
        excludeBegin: true,
        excludeEnd: true,
        endsParent: true
      });
    };
    const VERBATIM_DELIMITED_ENV = function(envname) {
      return {
        className: "string",
        end: "(?=\\\\end\\{" + envname + "\\})"
      };
    };
    const VERBATIM_DELIMITED_BRACES = (innerName = "string") => {
      return {
        relevance: 0,
        begin: /\{/,
        starts: {
          endsParent: true,
          contains: [
            {
              className: innerName,
              end: /(?=\})/,
              endsParent: true,
              contains: [
                {
                  begin: /\{/,
                  end: /\}/,
                  relevance: 0,
                  contains: ["self"]
                }
              ]
            }
          ]
        }
      };
    };
    const VERBATIM = [
      ...[
        "verb",
        "lstinline"
      ].map((csname) => CSNAME(csname, { contains: [VERBATIM_DELIMITED_EQUAL()] })),
      CSNAME("mint", ARGUMENT_AND_THEN(ARGUMENT_M, { contains: [VERBATIM_DELIMITED_EQUAL()] })),
      CSNAME("mintinline", ARGUMENT_AND_THEN(ARGUMENT_M, { contains: [
        VERBATIM_DELIMITED_BRACES(),
        VERBATIM_DELIMITED_EQUAL()
      ] })),
      CSNAME("url", { contains: [
        VERBATIM_DELIMITED_BRACES("link"),
        VERBATIM_DELIMITED_BRACES("link")
      ] }),
      CSNAME("hyperref", { contains: [VERBATIM_DELIMITED_BRACES("link")] }),
      CSNAME("href", ARGUMENT_AND_THEN(ARGUMENT_O, { contains: [VERBATIM_DELIMITED_BRACES("link")] })),
      ...[].concat(...[
        "",
        "\\*"
      ].map((suffix) => [
        BEGIN_ENV("verbatim" + suffix, VERBATIM_DELIMITED_ENV("verbatim" + suffix)),
        BEGIN_ENV("filecontents" + suffix, ARGUMENT_AND_THEN(ARGUMENT_M, VERBATIM_DELIMITED_ENV("filecontents" + suffix))),
        ...[
          "",
          "B",
          "L"
        ].map(
          (prefix) => BEGIN_ENV(prefix + "Verbatim" + suffix, ARGUMENT_AND_THEN(ARGUMENT_O, VERBATIM_DELIMITED_ENV(prefix + "Verbatim" + suffix)))
        )
      ])),
      BEGIN_ENV("minted", ARGUMENT_AND_THEN(ARGUMENT_O, ARGUMENT_AND_THEN(ARGUMENT_M, VERBATIM_DELIMITED_ENV("minted"))))
    ];
    return {
      name: "LaTeX",
      aliases: ["tex"],
      contains: [
        ...VERBATIM,
        ...EVERYTHING_BUT_VERBATIM
      ]
    };
  }
  function ldif(hljs) {
    return {
      name: "LDIF",
      contains: [
        {
          className: "attribute",
          match: "^dn(?=:)",
          relevance: 10
        },
        {
          className: "attribute",
          match: "^\\w+(?=:)"
        },
        {
          className: "literal",
          match: "^-"
        },
        hljs.HASH_COMMENT_MODE
      ]
    };
  }
  function leaf(hljs) {
    const IDENT = /([A-Za-z_][A-Za-z_0-9]*)?/;
    const LITERALS2 = [
      "true",
      "false",
      "in"
    ];
    const PARAMS = {
      scope: "params",
      begin: /\(/,
      end: /\)(?=\:?)/,
      endsParent: true,
      relevance: 7,
      contains: [
        {
          scope: "string",
          begin: '"',
          end: '"'
        },
        {
          scope: "keyword",
          match: LITERALS2.join("|")
        },
        {
          scope: "variable",
          match: /[A-Za-z_][A-Za-z_0-9]*/
        },
        {
          scope: "operator",
          match: /\+|\-|\*|\/|\%|\=\=|\=|\!|\>|\<|\&\&|\|\|/
        }
      ]
    };
    const INSIDE_DISPATCH = {
      match: [
        IDENT,
        /(?=\()/
      ],
      scope: {
        1: "keyword"
      },
      contains: [PARAMS]
    };
    PARAMS.contains.unshift(INSIDE_DISPATCH);
    return {
      name: "Leaf",
      contains: [
        // #ident():
        {
          match: [
            /#+/,
            IDENT,
            /(?=\()/
          ],
          scope: {
            1: "punctuation",
            2: "keyword"
          },
          // will start up after the ending `)` match from line ~44
          // just to grab the trailing `:` if we can match it
          starts: {
            contains: [
              {
                match: /\:/,
                scope: "punctuation"
              }
            ]
          },
          contains: [
            PARAMS
          ]
        },
        // #ident or #ident:
        {
          match: [
            /#+/,
            IDENT,
            /:?/
          ],
          scope: {
            1: "punctuation",
            2: "keyword",
            3: "punctuation"
          }
        }
      ]
    };
  }
  function lisp(hljs) {
    const LISP_IDENT_RE = "[a-zA-Z_\\-+\\*\\/<=>&#][a-zA-Z0-9_\\-+*\\/<=>&#!]*";
    const MEC_RE = "\\|[^]*?\\|";
    const LISP_SIMPLE_NUMBER_RE = "(-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|-)?\\d+)?";
    const LITERAL = {
      className: "literal",
      begin: "\\b(t{1}|nil)\\b"
    };
    const NUMBER = {
      className: "number",
      variants: [
        {
          begin: LISP_SIMPLE_NUMBER_RE,
          relevance: 0
        },
        { begin: "#(b|B)[0-1]+(/[0-1]+)?" },
        { begin: "#(o|O)[0-7]+(/[0-7]+)?" },
        { begin: "#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?" },
        {
          begin: "#(c|C)\\(" + LISP_SIMPLE_NUMBER_RE + " +" + LISP_SIMPLE_NUMBER_RE,
          end: "\\)"
        }
      ]
    };
    const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
    const COMMENT2 = hljs.COMMENT(
      ";",
      "$",
      { relevance: 0 }
    );
    const VARIABLE = {
      begin: "\\*",
      end: "\\*"
    };
    const KEYWORD = {
      className: "symbol",
      begin: "[:&]" + LISP_IDENT_RE
    };
    const IDENT = {
      begin: LISP_IDENT_RE,
      relevance: 0
    };
    const MEC = { begin: MEC_RE };
    const QUOTED_LIST = {
      begin: "\\(",
      end: "\\)",
      contains: [
        "self",
        LITERAL,
        STRING,
        NUMBER,
        IDENT
      ]
    };
    const QUOTED = {
      contains: [
        NUMBER,
        STRING,
        VARIABLE,
        KEYWORD,
        QUOTED_LIST,
        IDENT
      ],
      variants: [
        {
          begin: "['`]\\(",
          end: "\\)"
        },
        {
          begin: "\\(quote ",
          end: "\\)",
          keywords: { name: "quote" }
        },
        { begin: "'" + MEC_RE }
      ]
    };
    const QUOTED_ATOM = { variants: [
      { begin: "'" + LISP_IDENT_RE },
      { begin: "#'" + LISP_IDENT_RE + "(::" + LISP_IDENT_RE + ")*" }
    ] };
    const LIST = {
      begin: "\\(\\s*",
      end: "\\)"
    };
    const BODY = {
      endsWithParent: true,
      relevance: 0
    };
    LIST.contains = [
      {
        className: "name",
        variants: [
          {
            begin: LISP_IDENT_RE,
            relevance: 0
          },
          { begin: MEC_RE }
        ]
      },
      BODY
    ];
    BODY.contains = [
      QUOTED,
      QUOTED_ATOM,
      LIST,
      LITERAL,
      NUMBER,
      STRING,
      COMMENT2,
      VARIABLE,
      KEYWORD,
      MEC,
      IDENT
    ];
    return {
      name: "Lisp",
      illegal: /\S/,
      contains: [
        NUMBER,
        hljs.SHEBANG(),
        LITERAL,
        STRING,
        COMMENT2,
        QUOTED,
        QUOTED_ATOM,
        LIST,
        IDENT
      ]
    };
  }
  function livecodeserver(hljs) {
    const VARIABLE = {
      className: "variable",
      variants: [
        { begin: "\\b([gtps][A-Z]{1}[a-zA-Z0-9]*)(\\[.+\\])?(?:\\s*?)" },
        { begin: "\\$_[A-Z]+" }
      ],
      relevance: 0
    };
    const COMMENT_MODES = [
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.HASH_COMMENT_MODE,
      hljs.COMMENT("--", "$"),
      hljs.COMMENT("[^:]//", "$")
    ];
    const TITLE1 = hljs.inherit(hljs.TITLE_MODE, { variants: [
      { begin: "\\b_*rig[A-Z][A-Za-z0-9_\\-]*" },
      { begin: "\\b_[a-z0-9\\-]+" }
    ] });
    const TITLE2 = hljs.inherit(hljs.TITLE_MODE, { begin: "\\b([A-Za-z0-9_\\-]+)\\b" });
    return {
      name: "LiveCode",
      case_insensitive: false,
      keywords: {
        keyword: "$_COOKIE $_FILES $_GET $_GET_BINARY $_GET_RAW $_POST $_POST_BINARY $_POST_RAW $_SESSION $_SERVER codepoint codepoints segment segments codeunit codeunits sentence sentences trueWord trueWords paragraph after byte bytes english the until http forever descending using line real8 with seventh for stdout finally element word words fourth before black ninth sixth characters chars stderr uInt1 uInt1s uInt2 uInt2s stdin string lines relative rel any fifth items from middle mid at else of catch then third it file milliseconds seconds second secs sec int1 int1s int4 int4s internet int2 int2s normal text item last long detailed effective uInt4 uInt4s repeat end repeat URL in try into switch to words https token binfile each tenth as ticks tick system real4 by dateItems without char character ascending eighth whole dateTime numeric short first ftp integer abbreviated abbr abbrev private case while if div mod wrap and or bitAnd bitNot bitOr bitXor among not in a an within contains ends with begins the keys of keys",
        literal: "SIX TEN FORMFEED NINE ZERO NONE SPACE FOUR FALSE COLON CRLF PI COMMA ENDOFFILE EOF EIGHT FIVE QUOTE EMPTY ONE TRUE RETURN CR LINEFEED RIGHT BACKSLASH NULL SEVEN TAB THREE TWO six ten formfeed nine zero none space four false colon crlf pi comma endoffile eof eight five quote empty one true return cr linefeed right backslash null seven tab three two RIVERSION RISTATE FILE_READ_MODE FILE_WRITE_MODE FILE_WRITE_MODE DIR_WRITE_MODE FILE_READ_UMASK FILE_WRITE_UMASK DIR_READ_UMASK DIR_WRITE_UMASK",
        built_in: "put abs acos aliasReference annuity arrayDecode arrayEncode asin atan atan2 average avg avgDev base64Decode base64Encode baseConvert binaryDecode binaryEncode byteOffset byteToNum cachedURL cachedURLs charToNum cipherNames codepointOffset codepointProperty codepointToNum codeunitOffset commandNames compound compress constantNames cos date dateFormat decompress difference directories diskSpace DNSServers exp exp1 exp2 exp10 extents files flushEvents folders format functionNames geometricMean global globals hasMemory harmonicMean hostAddress hostAddressToName hostName hostNameToAddress isNumber ISOToMac itemOffset keys len length libURLErrorData libUrlFormData libURLftpCommand libURLLastHTTPHeaders libURLLastRHHeaders libUrlMultipartFormAddPart libUrlMultipartFormData libURLVersion lineOffset ln ln1 localNames log log2 log10 longFilePath lower macToISO matchChunk matchText matrixMultiply max md5Digest median merge messageAuthenticationCode messageDigest millisec millisecs millisecond milliseconds min monthNames nativeCharToNum normalizeText num number numToByte numToChar numToCodepoint numToNativeChar offset open openfiles openProcesses openProcessIDs openSockets paragraphOffset paramCount param params peerAddress pendingMessages platform popStdDev populationStandardDeviation populationVariance popVariance processID random randomBytes replaceText result revCreateXMLTree revCreateXMLTreeFromFile revCurrentRecord revCurrentRecordIsFirst revCurrentRecordIsLast revDatabaseColumnCount revDatabaseColumnIsNull revDatabaseColumnLengths revDatabaseColumnNames revDatabaseColumnNamed revDatabaseColumnNumbered revDatabaseColumnTypes revDatabaseConnectResult revDatabaseCursors revDatabaseID revDatabaseTableNames revDatabaseType revDataFromQuery revdb_closeCursor revdb_columnbynumber revdb_columncount revdb_columnisnull revdb_columnlengths revdb_columnnames revdb_columntypes revdb_commit revdb_connect revdb_connections revdb_connectionerr revdb_currentrecord revdb_cursorconnection revdb_cursorerr revdb_cursors revdb_dbtype revdb_disconnect revdb_execute revdb_iseof revdb_isbof revdb_movefirst revdb_movelast revdb_movenext revdb_moveprev revdb_query revdb_querylist revdb_recordcount revdb_rollback revdb_tablenames revGetDatabaseDriverPath revNumberOfRecords revOpenDatabase revOpenDatabases revQueryDatabase revQueryDatabaseBlob revQueryResult revQueryIsAtStart revQueryIsAtEnd revUnixFromMacPath revXMLAttribute revXMLAttributes revXMLAttributeValues revXMLChildContents revXMLChildNames revXMLCreateTreeFromFileWithNamespaces revXMLCreateTreeWithNamespaces revXMLDataFromXPathQuery revXMLEvaluateXPath revXMLFirstChild revXMLMatchingNode revXMLNextSibling revXMLNodeContents revXMLNumberOfChildren revXMLParent revXMLPreviousSibling revXMLRootNode revXMLRPC_CreateRequest revXMLRPC_Documents revXMLRPC_Error revXMLRPC_GetHost revXMLRPC_GetMethod revXMLRPC_GetParam revXMLText revXMLRPC_Execute revXMLRPC_GetParamCount revXMLRPC_GetParamNode revXMLRPC_GetParamType revXMLRPC_GetPath revXMLRPC_GetPort revXMLRPC_GetProtocol revXMLRPC_GetRequest revXMLRPC_GetResponse revXMLRPC_GetSocket revXMLTree revXMLTrees revXMLValidateDTD revZipDescribeItem revZipEnumerateItems revZipOpenArchives round sampVariance sec secs seconds sentenceOffset sha1Digest shell shortFilePath sin specialFolderPath sqrt standardDeviation statRound stdDev sum sysError systemVersion tan tempName textDecode textEncode tick ticks time to tokenOffset toLower toUpper transpose truewordOffset trunc uniDecode uniEncode upper URLDecode URLEncode URLStatus uuid value variableNames variance version waitDepth weekdayNames wordOffset xsltApplyStylesheet xsltApplyStylesheetFromFile xsltLoadStylesheet xsltLoadStylesheetFromFile add breakpoint cancel clear local variable file word line folder directory URL close socket process combine constant convert create new alias folder directory decrypt delete variable word line folder directory URL dispatch divide do encrypt filter get include intersect kill libURLDownloadToFile libURLFollowHttpRedirects libURLftpUpload libURLftpUploadFile libURLresetAll libUrlSetAuthCallback libURLSetDriver libURLSetCustomHTTPHeaders libUrlSetExpect100 libURLSetFTPListCommand libURLSetFTPMode libURLSetFTPStopTime libURLSetStatusCallback load extension loadedExtensions multiply socket prepare process post seek rel relative read from process rename replace require resetAll resolve revAddXMLNode revAppendXML revCloseCursor revCloseDatabase revCommitDatabase revCopyFile revCopyFolder revCopyXMLNode revDeleteFolder revDeleteXMLNode revDeleteAllXMLTrees revDeleteXMLTree revExecuteSQL revGoURL revInsertXMLNode revMoveFolder revMoveToFirstRecord revMoveToLastRecord revMoveToNextRecord revMoveToPreviousRecord revMoveToRecord revMoveXMLNode revPutIntoXMLNode revRollBackDatabase revSetDatabaseDriverPath revSetXMLAttribute revXMLRPC_AddParam revXMLRPC_DeleteAllDocuments revXMLAddDTD revXMLRPC_Free revXMLRPC_FreeAll revXMLRPC_DeleteDocument revXMLRPC_DeleteParam revXMLRPC_SetHost revXMLRPC_SetMethod revXMLRPC_SetPort revXMLRPC_SetProtocol revXMLRPC_SetSocket revZipAddItemWithData revZipAddItemWithFile revZipAddUncompressedItemWithData revZipAddUncompressedItemWithFile revZipCancel revZipCloseArchive revZipDeleteItem revZipExtractItemToFile revZipExtractItemToVariable revZipSetProgressCallback revZipRenameItem revZipReplaceItemWithData revZipReplaceItemWithFile revZipOpenArchive send set sort split start stop subtract symmetric union unload vectorDotProduct wait write"
      },
      contains: [
        VARIABLE,
        {
          className: "keyword",
          begin: "\\bend\\sif\\b"
        },
        {
          className: "function",
          beginKeywords: "function",
          end: "$",
          contains: [
            VARIABLE,
            TITLE2,
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.BINARY_NUMBER_MODE,
            hljs.C_NUMBER_MODE,
            TITLE1
          ]
        },
        {
          className: "function",
          begin: "\\bend\\s+",
          end: "$",
          keywords: "end",
          contains: [
            TITLE2,
            TITLE1
          ],
          relevance: 0
        },
        {
          beginKeywords: "command on",
          end: "$",
          contains: [
            VARIABLE,
            TITLE2,
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.BINARY_NUMBER_MODE,
            hljs.C_NUMBER_MODE,
            TITLE1
          ]
        },
        {
          className: "meta",
          variants: [
            {
              begin: "<\\?(rev|lc|livecode)",
              relevance: 10
            },
            { begin: "<\\?" },
            { begin: "\\?>" }
          ]
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.BINARY_NUMBER_MODE,
        hljs.C_NUMBER_MODE,
        TITLE1
      ].concat(COMMENT_MODES),
      illegal: ";$|^\\[|^=|&|\\{"
    };
  }
  const KEYWORDS$2 = [
    "as",
    // for exports
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    // JS handles these with a special rule
    // "get",
    // "set",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends",
    // It's reached stage 3, which is "recommended for implementation":
    "using"
  ];
  const LITERALS$2 = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ];
  const TYPES$2 = [
    // Fundamental objects
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    // numbers and dates
    "Math",
    "Date",
    "Number",
    "BigInt",
    // text
    "String",
    "RegExp",
    // Indexed collections
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    // Keyed collections
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    // Structured data
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    // Control abstraction objects
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    // Reflection
    "Reflect",
    "Proxy",
    // Internationalization
    "Intl",
    // WebAssembly
    "WebAssembly"
  ];
  const ERROR_TYPES$2 = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ];
  const BUILT_IN_GLOBALS$2 = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ];
  const BUILT_INS$2 = [].concat(
    BUILT_IN_GLOBALS$2,
    TYPES$2,
    ERROR_TYPES$2
  );
  function livescript(hljs) {
    const LIVESCRIPT_BUILT_INS = [
      "npm",
      "print"
    ];
    const LIVESCRIPT_LITERALS = [
      "yes",
      "no",
      "on",
      "off",
      "it",
      "that",
      "void"
    ];
    const LIVESCRIPT_KEYWORDS = [
      "then",
      "unless",
      "until",
      "loop",
      "of",
      "by",
      "when",
      "and",
      "or",
      "is",
      "isnt",
      "not",
      "it",
      "that",
      "otherwise",
      "from",
      "to",
      "til",
      "fallthrough",
      "case",
      "enum",
      "native",
      "list",
      "map",
      "__hasProp",
      "__extends",
      "__slice",
      "__bind",
      "__indexOf"
    ];
    const KEYWORDS$12 = {
      keyword: KEYWORDS$2.concat(LIVESCRIPT_KEYWORDS),
      literal: LITERALS$2.concat(LIVESCRIPT_LITERALS),
      built_in: BUILT_INS$2.concat(LIVESCRIPT_BUILT_INS)
    };
    const JS_IDENT_RE = "[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*";
    const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
    const SUBST = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: KEYWORDS$12
    };
    const SUBST_SIMPLE = {
      className: "subst",
      begin: /#[A-Za-z$_]/,
      end: /(?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,
      keywords: KEYWORDS$12
    };
    const EXPRESSIONS = [
      hljs.BINARY_NUMBER_MODE,
      {
        className: "number",
        begin: "(\\b0[xX][a-fA-F0-9_]+)|(\\b\\d(\\d|_\\d)*(\\.(\\d(\\d|_\\d)*)?)?(_*[eE]([-+]\\d(_\\d|\\d)*)?)?[_a-z]*)",
        relevance: 0,
        starts: {
          end: "(\\s*/)?",
          relevance: 0
        }
        // a number tries to eat the following slash to prevent treating it as a regexp
      },
      {
        className: "string",
        variants: [
          {
            begin: /'''/,
            end: /'''/,
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: /'/,
            end: /'/,
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: /"""/,
            end: /"""/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST,
              SUBST_SIMPLE
            ]
          },
          {
            begin: /"/,
            end: /"/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST,
              SUBST_SIMPLE
            ]
          },
          {
            begin: /\\/,
            end: /(\s|$)/,
            excludeEnd: true
          }
        ]
      },
      {
        className: "regexp",
        variants: [
          {
            begin: "//",
            end: "//[gim]*",
            contains: [
              SUBST,
              hljs.HASH_COMMENT_MODE
            ]
          },
          {
            // regex can't start with space to parse x / 2 / 3 as two divisions
            // regex can't start with *, and it supports an "illegal" in the main mode
            begin: /\/(?![ *])(\\.|[^\\\n])*?\/[gim]*(?=\W)/
          }
        ]
      },
      { begin: "@" + JS_IDENT_RE },
      {
        begin: "``",
        end: "``",
        excludeBegin: true,
        excludeEnd: true,
        subLanguage: "javascript"
      }
    ];
    SUBST.contains = EXPRESSIONS;
    const PARAMS = {
      className: "params",
      begin: "\\(",
      returnBegin: true,
      /* We need another contained nameless mode to not have every nested
      pair of parens to be called "params" */
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: KEYWORDS$12,
          contains: ["self"].concat(EXPRESSIONS)
        }
      ]
    };
    const SYMBOLS = { begin: "(#=>|=>|\\|>>|-?->|!->)" };
    const CLASS_DEFINITION = {
      variants: [
        { match: [
          /class\s+/,
          JS_IDENT_RE,
          /\s+extends\s+/,
          JS_IDENT_RE
        ] },
        { match: [
          /class\s+/,
          JS_IDENT_RE
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: KEYWORDS$12
    };
    return {
      name: "LiveScript",
      aliases: ["ls"],
      keywords: KEYWORDS$12,
      illegal: /\/\*/,
      contains: EXPRESSIONS.concat([
        hljs.COMMENT("\\/\\*", "\\*\\/"),
        hljs.HASH_COMMENT_MODE,
        SYMBOLS,
        // relevance booster
        {
          className: "function",
          contains: [
            TITLE,
            PARAMS
          ],
          returnBegin: true,
          variants: [
            {
              begin: "(" + JS_IDENT_RE + "\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B->\\*?",
              end: "->\\*?"
            },
            {
              begin: "(" + JS_IDENT_RE + "\\s*(?:=|:=)\\s*)?!?(\\(.*\\)\\s*)?\\B[-~]{1,2}>\\*?",
              end: "[-~]{1,2}>\\*?"
            },
            {
              begin: "(" + JS_IDENT_RE + "\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B!?[-~]{1,2}>\\*?",
              end: "!?[-~]{1,2}>\\*?"
            }
          ]
        },
        CLASS_DEFINITION,
        {
          begin: JS_IDENT_RE + ":",
          end: ":",
          returnBegin: true,
          returnEnd: true,
          relevance: 0
        }
      ])
    };
  }
  function llvm(hljs) {
    const regex = hljs.regex;
    const IDENT_RE2 = /([-a-zA-Z$._][\w$.-]*)/;
    const TYPE = {
      className: "type",
      begin: /\bi\d+(?=\s|\b)/
    };
    const OPERATOR = {
      className: "operator",
      relevance: 0,
      begin: /=/
    };
    const PUNCTUATION2 = {
      className: "punctuation",
      relevance: 0,
      begin: /,/
    };
    const NUMBER = {
      className: "number",
      variants: [
        { begin: /[su]?0[xX][KMLHR]?[a-fA-F0-9]+/ },
        { begin: /[-+]?\d+(?:[.]\d+)?(?:[eE][-+]?\d+(?:[.]\d+)?)?/ }
      ],
      relevance: 0
    };
    const LABEL = {
      className: "symbol",
      variants: [
        { begin: /^\s*[a-z]+:/ }
        // labels
      ],
      relevance: 0
    };
    const VARIABLE = {
      className: "variable",
      variants: [
        { begin: regex.concat(/%/, IDENT_RE2) },
        { begin: /%\d+/ },
        { begin: /#\d+/ }
      ]
    };
    const FUNCTION = {
      className: "title",
      variants: [
        { begin: regex.concat(/@/, IDENT_RE2) },
        { begin: /@\d+/ },
        { begin: regex.concat(/!/, IDENT_RE2) },
        { begin: regex.concat(/!\d+/, IDENT_RE2) },
        // https://llvm.org/docs/LangRef.html#namedmetadatastructure
        // obviously a single digit can also be used in this fashion
        { begin: /!\d+/ }
      ]
    };
    return {
      name: "LLVM IR",
      // TODO: split into different categories of keywords
      keywords: {
        keyword: "begin end true false declare define global constant private linker_private internal available_externally linkonce linkonce_odr weak weak_odr appending dllimport dllexport common default hidden protected extern_weak external thread_local zeroinitializer undef null to tail target triple datalayout volatile nuw nsw nnan ninf nsz arcp fast exact inbounds align addrspace section alias module asm sideeffect gc dbg linker_private_weak attributes blockaddress initialexec localdynamic localexec prefix unnamed_addr ccc fastcc coldcc x86_stdcallcc x86_fastcallcc arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ptx_kernel intel_ocl_bicc msp430_intrcc spir_func spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc cc c signext zeroext inreg sret nounwind noreturn noalias nocapture byval nest readnone readonly inlinehint noinline alwaysinline optsize ssp sspreq noredzone noimplicitfloat naked builtin cold nobuiltin noduplicate nonlazybind optnone returns_twice sanitize_address sanitize_memory sanitize_thread sspstrong uwtable returned type opaque eq ne slt sgt sle sge ult ugt ule uge oeq one olt ogt ole oge ord uno ueq une x acq_rel acquire alignstack atomic catch cleanup filter inteldialect max min monotonic nand personality release seq_cst singlethread umax umin unordered xchg add fadd sub fsub mul fmul udiv sdiv fdiv urem srem frem shl lshr ashr and or xor icmp fcmp phi call trunc zext sext fptrunc fpext uitofp sitofp fptoui fptosi inttoptr ptrtoint bitcast addrspacecast select va_arg ret br switch invoke unwind unreachable indirectbr landingpad resume malloc alloca free load store getelementptr extractelement insertelement shufflevector getresult extractvalue insertvalue atomicrmw cmpxchg fence argmemonly",
        type: "void half bfloat float double fp128 x86_fp80 ppc_fp128 x86_amx x86_mmx ptr label token metadata opaque"
      },
      contains: [
        TYPE,
        // this matches "empty comments"...
        // ...because it's far more likely this is a statement terminator in
        // another language than an actual comment
        hljs.COMMENT(/;\s*$/, null, { relevance: 0 }),
        hljs.COMMENT(/;/, /$/),
        {
          className: "string",
          begin: /"/,
          end: /"/,
          contains: [
            {
              className: "char.escape",
              match: /\\\d\d/
            }
          ]
        },
        FUNCTION,
        PUNCTUATION2,
        OPERATOR,
        VARIABLE,
        LABEL,
        NUMBER
      ]
    };
  }
  function lsl(hljs) {
    const LSL_STRING_ESCAPE_CHARS = {
      className: "subst",
      begin: /\\[tn"\\]/
    };
    const LSL_STRINGS = {
      className: "string",
      begin: '"',
      end: '"',
      contains: [LSL_STRING_ESCAPE_CHARS]
    };
    const LSL_NUMBERS = {
      className: "number",
      relevance: 0,
      begin: hljs.C_NUMBER_RE
    };
    const LSL_CONSTANTS = {
      className: "literal",
      variants: [
        { begin: "\\b(PI|TWO_PI|PI_BY_TWO|DEG_TO_RAD|RAD_TO_DEG|SQRT2)\\b" },
        { begin: "\\b(XP_ERROR_(EXPERIENCES_DISABLED|EXPERIENCE_(DISABLED|SUSPENDED)|INVALID_(EXPERIENCE|PARAMETERS)|KEY_NOT_FOUND|MATURITY_EXCEEDED|NONE|NOT_(FOUND|PERMITTED(_LAND)?)|NO_EXPERIENCE|QUOTA_EXCEEDED|RETRY_UPDATE|STORAGE_EXCEPTION|STORE_DISABLED|THROTTLED|UNKNOWN_ERROR)|JSON_APPEND|STATUS_(PHYSICS|ROTATE_[XYZ]|PHANTOM|SANDBOX|BLOCK_GRAB(_OBJECT)?|(DIE|RETURN)_AT_EDGE|CAST_SHADOWS|OK|MALFORMED_PARAMS|TYPE_MISMATCH|BOUNDS_ERROR|NOT_(FOUND|SUPPORTED)|INTERNAL_ERROR|WHITELIST_FAILED)|AGENT(_(BY_(LEGACY_|USER)NAME|FLYING|ATTACHMENTS|SCRIPTED|MOUSELOOK|SITTING|ON_OBJECT|AWAY|WALKING|IN_AIR|TYPING|CROUCHING|BUSY|ALWAYS_RUN|AUTOPILOT|LIST_(PARCEL(_OWNER)?|REGION)))?|CAMERA_(PITCH|DISTANCE|BEHINDNESS_(ANGLE|LAG)|(FOCUS|POSITION)(_(THRESHOLD|LOCKED|LAG))?|FOCUS_OFFSET|ACTIVE)|ANIM_ON|LOOP|REVERSE|PING_PONG|SMOOTH|ROTATE|SCALE|ALL_SIDES|LINK_(ROOT|SET|ALL_(OTHERS|CHILDREN)|THIS)|ACTIVE|PASS(IVE|_(ALWAYS|IF_NOT_HANDLED|NEVER))|SCRIPTED|CONTROL_(FWD|BACK|(ROT_)?(LEFT|RIGHT)|UP|DOWN|(ML_)?LBUTTON)|PERMISSION_(RETURN_OBJECTS|DEBIT|OVERRIDE_ANIMATIONS|SILENT_ESTATE_MANAGEMENT|TAKE_CONTROLS|TRIGGER_ANIMATION|ATTACH|CHANGE_LINKS|(CONTROL|TRACK)_CAMERA|TELEPORT)|INVENTORY_(TEXTURE|SOUND|OBJECT|SCRIPT|LANDMARK|CLOTHING|NOTECARD|BODYPART|ANIMATION|GESTURE|ALL|NONE)|CHANGED_(INVENTORY|COLOR|SHAPE|SCALE|TEXTURE|LINK|ALLOWED_DROP|OWNER|REGION(_START)?|TELEPORT|MEDIA)|OBJECT_(CLICK_ACTION|HOVER_HEIGHT|LAST_OWNER_ID|(PHYSICS|SERVER|STREAMING)_COST|UNKNOWN_DETAIL|CHARACTER_TIME|PHANTOM|PHYSICS|TEMP_(ATTACHED|ON_REZ)|NAME|DESC|POS|PRIM_(COUNT|EQUIVALENCE)|RETURN_(PARCEL(_OWNER)?|REGION)|REZZER_KEY|ROO?T|VELOCITY|OMEGA|OWNER|GROUP(_TAG)?|CREATOR|ATTACHED_(POINT|SLOTS_AVAILABLE)|RENDER_WEIGHT|(BODY_SHAPE|PATHFINDING)_TYPE|(RUNNING|TOTAL)_SCRIPT_COUNT|TOTAL_INVENTORY_COUNT|SCRIPT_(MEMORY|TIME))|TYPE_(INTEGER|FLOAT|STRING|KEY|VECTOR|ROTATION|INVALID)|(DEBUG|PUBLIC)_CHANNEL|ATTACH_(AVATAR_CENTER|CHEST|HEAD|BACK|PELVIS|MOUTH|CHIN|NECK|NOSE|BELLY|[LR](SHOULDER|HAND|FOOT|EAR|EYE|[UL](ARM|LEG)|HIP)|(LEFT|RIGHT)_PEC|HUD_(CENTER_[12]|TOP_(RIGHT|CENTER|LEFT)|BOTTOM(_(RIGHT|LEFT))?)|[LR]HAND_RING1|TAIL_(BASE|TIP)|[LR]WING|FACE_(JAW|[LR]EAR|[LR]EYE|TOUNGE)|GROIN|HIND_[LR]FOOT)|LAND_(LEVEL|RAISE|LOWER|SMOOTH|NOISE|REVERT)|DATA_(ONLINE|NAME|BORN|SIM_(POS|STATUS|RATING)|PAYINFO)|PAYMENT_INFO_(ON_FILE|USED)|REMOTE_DATA_(CHANNEL|REQUEST|REPLY)|PSYS_(PART_(BF_(ZERO|ONE(_MINUS_(DEST_COLOR|SOURCE_(ALPHA|COLOR)))?|DEST_COLOR|SOURCE_(ALPHA|COLOR))|BLEND_FUNC_(DEST|SOURCE)|FLAGS|(START|END)_(COLOR|ALPHA|SCALE|GLOW)|MAX_AGE|(RIBBON|WIND|INTERP_(COLOR|SCALE)|BOUNCE|FOLLOW_(SRC|VELOCITY)|TARGET_(POS|LINEAR)|EMISSIVE)_MASK)|SRC_(MAX_AGE|PATTERN|ANGLE_(BEGIN|END)|BURST_(RATE|PART_COUNT|RADIUS|SPEED_(MIN|MAX))|ACCEL|TEXTURE|TARGET_KEY|OMEGA|PATTERN_(DROP|EXPLODE|ANGLE(_CONE(_EMPTY)?)?)))|VEHICLE_(REFERENCE_FRAME|TYPE_(NONE|SLED|CAR|BOAT|AIRPLANE|BALLOON)|(LINEAR|ANGULAR)_(FRICTION_TIMESCALE|MOTOR_DIRECTION)|LINEAR_MOTOR_OFFSET|HOVER_(HEIGHT|EFFICIENCY|TIMESCALE)|BUOYANCY|(LINEAR|ANGULAR)_(DEFLECTION_(EFFICIENCY|TIMESCALE)|MOTOR_(DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(EFFICIENCY|TIMESCALE)|BANKING_(EFFICIENCY|MIX|TIMESCALE)|FLAG_(NO_DEFLECTION_UP|LIMIT_(ROLL_ONLY|MOTOR_UP)|HOVER_((WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(ALLOW_UNSIT|ALPHA_MODE(_(BLEND|EMISSIVE|MASK|NONE))?|NORMAL|SPECULAR|TYPE(_(BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(_(STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(NONE|LOW|MEDIUM|HIGH)|BUMP_(NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(DEFAULT|PLANAR)|SCRIPTED_SIT_ONLY|SCULPT_(TYPE_(SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(MIRROR|INVERT))|PHYSICS(_(SHAPE_(CONVEX|NONE|PRIM|TYPE)))?|(POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIT_TARGET|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(ALT_IMAGE_ENABLE|CONTROLS|(CURRENT|HOME)_URL|AUTO_(LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(WIDTH|HEIGHT)_PIXELS|WHITELIST(_ENABLE)?|PERMS_(INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(STANDARD|MINI)|PERM_(NONE|OWNER|GROUP|ANYONE)|MAX_(URL_LENGTH|WHITELIST_(SIZE|COUNT)|(WIDTH|HEIGHT)_PIXELS)))|MASK_(BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(MEDIA_COMMAND_(STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(ALLOW_(FLY|(GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(GROUP_)?OBJECTS)|USE_(ACCESS_(GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(GROUP|ALL)_OBJECT_ENTRY)|COUNT_(TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(HIDE|DEFAULT)|REGION_FLAG_(ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(METHOD|MIMETYPE|BODY_(MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|SIT_(INVALID_(AGENT|LINK_OBJECT)|NO(T_EXPERIENCE|_(ACCESS|EXPERIENCE_PERMISSION|SIT_TARGET)))|STRING_(TRIM(_(HEAD|TAIL))?)|CLICK_ACTION_(NONE|TOUCH|SIT|BUY|PAY|OPEN(_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(NONE|SCRIPT_MEMORY)|RC_(DATA_FLAGS|DETECT_PHANTOM|GET_(LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(TYPES|AGENTS|(NON)?PHYSICAL|LAND))|RCERR_(CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(ALLOWED_(AGENT|GROUP)_(ADD|REMOVE)|BANNED_AGENT_(ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(COMMAND|CMD_(PLAY|STOP|PAUSE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(CMD_((SMOOTH_)?STOP|JUMP)|DESIRED_(TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(_([ABCD]|NONE))?|MAX_(DECEL|TURN_RADIUS|(ACCEL|SPEED)))|PURSUIT_(OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(EVADE_(HIDDEN|SPOTTED)|FAILURE_(DYNAMIC_PATHFINDING_DISABLED|INVALID_(GOAL|START)|NO_(NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(PARCEL_)?UNREACHABLE)|(GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(_(FAST|NONE|SLOW))?|CONTENT_TYPE_(ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(RADIUS|STATIC)|(PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_(AVATAR|CHARACTER|EXCLUSION_VOLUME|LEGACY_LINKSET|MATERIAL_VOLUME|OTHER|STATIC_OBSTACLE|WALKABLE)|SIM_STAT_PCT_CHARS_STEPPED)\\b" },
        { begin: "\\b(FALSE|TRUE)\\b" },
        { begin: "\\b(ZERO_ROTATION)\\b" },
        { begin: "\\b(EOF|JSON_(ARRAY|DELETE|FALSE|INVALID|NULL|NUMBER|OBJECT|STRING|TRUE)|NULL_KEY|TEXTURE_(BLANK|DEFAULT|MEDIA|PLYWOOD|TRANSPARENT)|URL_REQUEST_(GRANTED|DENIED))\\b" },
        { begin: "\\b(ZERO_VECTOR|TOUCH_INVALID_(TEXCOORD|VECTOR))\\b" }
      ]
    };
    const LSL_FUNCTIONS = {
      className: "built_in",
      begin: "\\b(ll(AgentInExperience|(Create|DataSize|Delete|KeyCount|Keys|Read|Update)KeyValue|GetExperience(Details|ErrorMessage)|ReturnObjectsBy(ID|Owner)|Json(2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(Mag|Norm|Dist)|Rot(Between|2(Euler|Fwd|Left|Up))|(Euler|Axes)2Rot|Whisper|(Region|Owner)?Say|Shout|Listen(Control|Remove)?|Sensor(Repeat|Remove)?|Detected(Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|([GS]et)(AnimationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(Scale|Offset|Rotate)Texture|(Rot)?Target(Remove)?|(Stop)?MoveToTarget|Apply(Rotational)?Impulse|Set(KeyframedMotion|ContentType|RegionPos|(Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(Queueing|Radius)|Vehicle(Type|(Float|Vector|Rotation)Param)|(Touch|Sit)?Text|Camera(Eye|At)Offset|PrimitiveParams|ClickAction|Link(Alpha|Color|PrimitiveParams(Fast)?|Texture(Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get((Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(PrimitiveParams|Number(OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(Details|PermMask|PrimCount)|Parcel(MaxPrims|Details|Prim(Count|Owners))|Attached(List)?|(SPMax|Free|Used)Memory|Region(Name|TimeDilation|FPS|Corner|AgentCount)|Root(Position|Rotation)|UnixTime|(Parcel|Region)Flags|(Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(Prims|NotecardLines|Sides)|Animation(List)?|(Camera|Local)(Pos|Rot)|Vel|Accel|Omega|Time(stamp|OfDay)|(Object|CenterOf)?Mass|MassMKS|Energy|Owner|(Owner)?Key|SunDirection|Texture(Offset|Scale|Rot)|Inventory(Number|Name|Key|Type|Creator|PermMask)|Permissions(Key)?|StartParameter|List(Length|EntryType)|Date|Agent(Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(Name|State))|(Get|Reset|GetAndReset)Time|PlaySound(Slave)?|LoopSound(Master|Slave)?|(Trigger|Stop|Preload)Sound|((Get|Delete)Sub|Insert)String|To(Upper|Lower)|Give(InventoryList|Money)|RezObject|(Stop)?LookAt|Sleep|CollisionFilter|(Take|Release)Controls|DetachFromAvatar|AttachToAvatar(Temp)?|InstantMessage|(GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(Length|Trim)|(Start|Stop)Animation|TargetOmega|Request(Experience)?Permissions|(Create|Break)Link|BreakAllLinks|(Give|Remove)Inventory|Water|PassTouches|Request(Agent|Inventory)Data|TeleportAgent(Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(Axis|Angle)|A(cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(CSV|Integer|Json|Float|String|Key|Vector|Rot|List(Strided)?)|DeleteSubList|List(Statistics|Sort|Randomize|(Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(Slope|Normal|Contour)|GroundRepel|(Set|Remove)VehicleFlags|SitOnLink|(AvatarOn)?(Link)?SitTarget|Script(Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(Integer|String)ToBase64|XorBase64|Log(10)?|Base64To(String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(Load|Release|(E|Une)scape)URL|ParcelMedia(CommandList|Query)|ModPow|MapDestination|(RemoveFrom|AddTo|Reset)Land(Pass|Ban)List|(Set|Clear)CameraParams|HTTP(Request|Response)|TextBox|DetectedTouch(UV|Face|Pos|(N|Bin)ormal|ST)|(MD5|SHA1|DumpList2)String|Request(Secure)?URL|Clear(Prim|Link)Media|(Link)?ParticleSystem|(Get|Request)(Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\\b"
    };
    return {
      name: "LSL (Linden Scripting Language)",
      illegal: ":",
      contains: [
        LSL_STRINGS,
        {
          className: "comment",
          variants: [
            hljs.COMMENT("//", "$"),
            hljs.COMMENT("/\\*", "\\*/")
          ],
          relevance: 0
        },
        LSL_NUMBERS,
        {
          className: "section",
          variants: [
            { begin: "\\b(state|default)\\b" },
            { begin: "\\b(state_(entry|exit)|touch(_(start|end))?|(land_)?collision(_(start|end))?|timer|listen|(no_)?sensor|control|(not_)?at_(rot_)?target|money|email|experience_permissions(_denied)?|run_time_permissions|changed|attach|dataserver|moving_(start|end)|link_message|(on|object)_rez|remote_data|http_re(sponse|quest)|path_update|transaction_result)\\b" }
          ]
        },
        LSL_FUNCTIONS,
        LSL_CONSTANTS,
        {
          className: "type",
          begin: "\\b(integer|float|string|key|vector|quaternion|rotation|list)\\b"
        }
      ]
    };
  }
  const SYSTEM_SYMBOLS = [
    "AASTriangle",
    "AbelianGroup",
    "Abort",
    "AbortKernels",
    "AbortProtect",
    "AbortScheduledTask",
    "Above",
    "Abs",
    "AbsArg",
    "AbsArgPlot",
    "Absolute",
    "AbsoluteCorrelation",
    "AbsoluteCorrelationFunction",
    "AbsoluteCurrentValue",
    "AbsoluteDashing",
    "AbsoluteFileName",
    "AbsoluteOptions",
    "AbsolutePointSize",
    "AbsoluteThickness",
    "AbsoluteTime",
    "AbsoluteTiming",
    "AcceptanceThreshold",
    "AccountingForm",
    "Accumulate",
    "Accuracy",
    "AccuracyGoal",
    "AcousticAbsorbingValue",
    "AcousticImpedanceValue",
    "AcousticNormalVelocityValue",
    "AcousticPDEComponent",
    "AcousticPressureCondition",
    "AcousticRadiationValue",
    "AcousticSoundHardValue",
    "AcousticSoundSoftCondition",
    "ActionDelay",
    "ActionMenu",
    "ActionMenuBox",
    "ActionMenuBoxOptions",
    "Activate",
    "Active",
    "ActiveClassification",
    "ActiveClassificationObject",
    "ActiveItem",
    "ActivePrediction",
    "ActivePredictionObject",
    "ActiveStyle",
    "AcyclicGraphQ",
    "AddOnHelpPath",
    "AddSides",
    "AddTo",
    "AddToSearchIndex",
    "AddUsers",
    "AdjacencyGraph",
    "AdjacencyList",
    "AdjacencyMatrix",
    "AdjacentMeshCells",
    "Adjugate",
    "AdjustmentBox",
    "AdjustmentBoxOptions",
    "AdjustTimeSeriesForecast",
    "AdministrativeDivisionData",
    "AffineHalfSpace",
    "AffineSpace",
    "AffineStateSpaceModel",
    "AffineTransform",
    "After",
    "AggregatedEntityClass",
    "AggregationLayer",
    "AircraftData",
    "AirportData",
    "AirPressureData",
    "AirSoundAttenuation",
    "AirTemperatureData",
    "AiryAi",
    "AiryAiPrime",
    "AiryAiZero",
    "AiryBi",
    "AiryBiPrime",
    "AiryBiZero",
    "AlgebraicIntegerQ",
    "AlgebraicNumber",
    "AlgebraicNumberDenominator",
    "AlgebraicNumberNorm",
    "AlgebraicNumberPolynomial",
    "AlgebraicNumberTrace",
    "AlgebraicRules",
    "AlgebraicRulesData",
    "Algebraics",
    "AlgebraicUnitQ",
    "Alignment",
    "AlignmentMarker",
    "AlignmentPoint",
    "All",
    "AllowAdultContent",
    "AllowChatServices",
    "AllowedCloudExtraParameters",
    "AllowedCloudParameterExtensions",
    "AllowedDimensions",
    "AllowedFrequencyRange",
    "AllowedHeads",
    "AllowGroupClose",
    "AllowIncomplete",
    "AllowInlineCells",
    "AllowKernelInitialization",
    "AllowLooseGrammar",
    "AllowReverseGroupClose",
    "AllowScriptLevelChange",
    "AllowVersionUpdate",
    "AllTrue",
    "Alphabet",
    "AlphabeticOrder",
    "AlphabeticSort",
    "AlphaChannel",
    "AlternateImage",
    "AlternatingFactorial",
    "AlternatingGroup",
    "AlternativeHypothesis",
    "Alternatives",
    "AltitudeMethod",
    "AmbientLight",
    "AmbiguityFunction",
    "AmbiguityList",
    "Analytic",
    "AnatomyData",
    "AnatomyForm",
    "AnatomyPlot3D",
    "AnatomySkinStyle",
    "AnatomyStyling",
    "AnchoredSearch",
    "And",
    "AndersonDarlingTest",
    "AngerJ",
    "AngleBisector",
    "AngleBracket",
    "AnglePath",
    "AnglePath3D",
    "AngleVector",
    "AngularGauge",
    "Animate",
    "AnimatedImage",
    "AnimationCycleOffset",
    "AnimationCycleRepetitions",
    "AnimationDirection",
    "AnimationDisplayTime",
    "AnimationRate",
    "AnimationRepetitions",
    "AnimationRunning",
    "AnimationRunTime",
    "AnimationTimeIndex",
    "AnimationVideo",
    "Animator",
    "AnimatorBox",
    "AnimatorBoxOptions",
    "AnimatorElements",
    "Annotate",
    "Annotation",
    "AnnotationDelete",
    "AnnotationKeys",
    "AnnotationRules",
    "AnnotationValue",
    "Annuity",
    "AnnuityDue",
    "Annulus",
    "AnomalyDetection",
    "AnomalyDetector",
    "AnomalyDetectorFunction",
    "Anonymous",
    "Antialiasing",
    "Antihermitian",
    "AntihermitianMatrixQ",
    "Antisymmetric",
    "AntisymmetricMatrixQ",
    "Antonyms",
    "AnyOrder",
    "AnySubset",
    "AnyTrue",
    "Apart",
    "ApartSquareFree",
    "APIFunction",
    "Appearance",
    "AppearanceElements",
    "AppearanceRules",
    "AppellF1",
    "Append",
    "AppendCheck",
    "AppendLayer",
    "AppendTo",
    "Application",
    "Apply",
    "ApplyReaction",
    "ApplySides",
    "ApplyTo",
    "ArcCos",
    "ArcCosh",
    "ArcCot",
    "ArcCoth",
    "ArcCsc",
    "ArcCsch",
    "ArcCurvature",
    "ARCHProcess",
    "ArcLength",
    "ArcSec",
    "ArcSech",
    "ArcSin",
    "ArcSinDistribution",
    "ArcSinh",
    "ArcTan",
    "ArcTanh",
    "Area",
    "Arg",
    "ArgMax",
    "ArgMin",
    "ArgumentCountQ",
    "ArgumentsOptions",
    "ARIMAProcess",
    "ArithmeticGeometricMean",
    "ARMAProcess",
    "Around",
    "AroundReplace",
    "ARProcess",
    "Array",
    "ArrayComponents",
    "ArrayDepth",
    "ArrayFilter",
    "ArrayFlatten",
    "ArrayMesh",
    "ArrayPad",
    "ArrayPlot",
    "ArrayPlot3D",
    "ArrayQ",
    "ArrayReduce",
    "ArrayResample",
    "ArrayReshape",
    "ArrayRules",
    "Arrays",
    "Arrow",
    "Arrow3DBox",
    "ArrowBox",
    "Arrowheads",
    "ASATriangle",
    "Ask",
    "AskAppend",
    "AskConfirm",
    "AskDisplay",
    "AskedQ",
    "AskedValue",
    "AskFunction",
    "AskState",
    "AskTemplateDisplay",
    "AspectRatio",
    "AspectRatioFixed",
    "Assert",
    "AssessmentFunction",
    "AssessmentResultObject",
    "AssociateTo",
    "Association",
    "AssociationFormat",
    "AssociationMap",
    "AssociationQ",
    "AssociationThread",
    "AssumeDeterministic",
    "Assuming",
    "Assumptions",
    "AstroAngularSeparation",
    "AstroBackground",
    "AstroCenter",
    "AstroDistance",
    "AstroGraphics",
    "AstroGridLines",
    "AstroGridLinesStyle",
    "AstronomicalData",
    "AstroPosition",
    "AstroProjection",
    "AstroRange",
    "AstroRangePadding",
    "AstroReferenceFrame",
    "AstroStyling",
    "AstroZoomLevel",
    "Asymptotic",
    "AsymptoticDSolveValue",
    "AsymptoticEqual",
    "AsymptoticEquivalent",
    "AsymptoticExpectation",
    "AsymptoticGreater",
    "AsymptoticGreaterEqual",
    "AsymptoticIntegrate",
    "AsymptoticLess",
    "AsymptoticLessEqual",
    "AsymptoticOutputTracker",
    "AsymptoticProbability",
    "AsymptoticProduct",
    "AsymptoticRSolveValue",
    "AsymptoticSolve",
    "AsymptoticSum",
    "Asynchronous",
    "AsynchronousTaskObject",
    "AsynchronousTasks",
    "Atom",
    "AtomCoordinates",
    "AtomCount",
    "AtomDiagramCoordinates",
    "AtomLabels",
    "AtomLabelStyle",
    "AtomList",
    "AtomQ",
    "AttachCell",
    "AttachedCell",
    "AttentionLayer",
    "Attributes",
    "Audio",
    "AudioAmplify",
    "AudioAnnotate",
    "AudioAnnotationLookup",
    "AudioBlockMap",
    "AudioCapture",
    "AudioChannelAssignment",
    "AudioChannelCombine",
    "AudioChannelMix",
    "AudioChannels",
    "AudioChannelSeparate",
    "AudioData",
    "AudioDelay",
    "AudioDelete",
    "AudioDevice",
    "AudioDistance",
    "AudioEncoding",
    "AudioFade",
    "AudioFrequencyShift",
    "AudioGenerator",
    "AudioIdentify",
    "AudioInputDevice",
    "AudioInsert",
    "AudioInstanceQ",
    "AudioIntervals",
    "AudioJoin",
    "AudioLabel",
    "AudioLength",
    "AudioLocalMeasurements",
    "AudioLooping",
    "AudioLoudness",
    "AudioMeasurements",
    "AudioNormalize",
    "AudioOutputDevice",
    "AudioOverlay",
    "AudioPad",
    "AudioPan",
    "AudioPartition",
    "AudioPause",
    "AudioPitchShift",
    "AudioPlay",
    "AudioPlot",
    "AudioQ",
    "AudioRecord",
    "AudioReplace",
    "AudioResample",
    "AudioReverb",
    "AudioReverse",
    "AudioSampleRate",
    "AudioSpectralMap",
    "AudioSpectralTransformation",
    "AudioSplit",
    "AudioStop",
    "AudioStream",
    "AudioStreams",
    "AudioTimeStretch",
    "AudioTrackApply",
    "AudioTrackSelection",
    "AudioTrim",
    "AudioType",
    "AugmentedPolyhedron",
    "AugmentedSymmetricPolynomial",
    "Authenticate",
    "Authentication",
    "AuthenticationDialog",
    "AutoAction",
    "Autocomplete",
    "AutocompletionFunction",
    "AutoCopy",
    "AutocorrelationTest",
    "AutoDelete",
    "AutoEvaluateEvents",
    "AutoGeneratedPackage",
    "AutoIndent",
    "AutoIndentSpacings",
    "AutoItalicWords",
    "AutoloadPath",
    "AutoMatch",
    "Automatic",
    "AutomaticImageSize",
    "AutoMultiplicationSymbol",
    "AutoNumberFormatting",
    "AutoOpenNotebooks",
    "AutoOpenPalettes",
    "AutoOperatorRenderings",
    "AutoQuoteCharacters",
    "AutoRefreshed",
    "AutoRemove",
    "AutorunSequencing",
    "AutoScaling",
    "AutoScroll",
    "AutoSpacing",
    "AutoStyleOptions",
    "AutoStyleWords",
    "AutoSubmitting",
    "Axes",
    "AxesEdge",
    "AxesLabel",
    "AxesOrigin",
    "AxesStyle",
    "AxiomaticTheory",
    "Axis",
    "Axis3DBox",
    "Axis3DBoxOptions",
    "AxisBox",
    "AxisBoxOptions",
    "AxisLabel",
    "AxisObject",
    "AxisStyle",
    "BabyMonsterGroupB",
    "Back",
    "BackFaceColor",
    "BackFaceGlowColor",
    "BackFaceOpacity",
    "BackFaceSpecularColor",
    "BackFaceSpecularExponent",
    "BackFaceSurfaceAppearance",
    "BackFaceTexture",
    "Background",
    "BackgroundAppearance",
    "BackgroundTasksSettings",
    "Backslash",
    "Backsubstitution",
    "Backward",
    "Ball",
    "Band",
    "BandpassFilter",
    "BandstopFilter",
    "BarabasiAlbertGraphDistribution",
    "BarChart",
    "BarChart3D",
    "BarcodeImage",
    "BarcodeRecognize",
    "BaringhausHenzeTest",
    "BarLegend",
    "BarlowProschanImportance",
    "BarnesG",
    "BarOrigin",
    "BarSpacing",
    "BartlettHannWindow",
    "BartlettWindow",
    "BaseDecode",
    "BaseEncode",
    "BaseForm",
    "Baseline",
    "BaselinePosition",
    "BaseStyle",
    "BasicRecurrentLayer",
    "BatchNormalizationLayer",
    "BatchSize",
    "BatesDistribution",
    "BattleLemarieWavelet",
    "BayesianMaximization",
    "BayesianMaximizationObject",
    "BayesianMinimization",
    "BayesianMinimizationObject",
    "Because",
    "BeckmannDistribution",
    "Beep",
    "Before",
    "Begin",
    "BeginDialogPacket",
    "BeginPackage",
    "BellB",
    "BellY",
    "Below",
    "BenfordDistribution",
    "BeniniDistribution",
    "BenktanderGibratDistribution",
    "BenktanderWeibullDistribution",
    "BernoulliB",
    "BernoulliDistribution",
    "BernoulliGraphDistribution",
    "BernoulliProcess",
    "BernsteinBasis",
    "BesagL",
    "BesselFilterModel",
    "BesselI",
    "BesselJ",
    "BesselJZero",
    "BesselK",
    "BesselY",
    "BesselYZero",
    "Beta",
    "BetaBinomialDistribution",
    "BetaDistribution",
    "BetaNegativeBinomialDistribution",
    "BetaPrimeDistribution",
    "BetaRegularized",
    "Between",
    "BetweennessCentrality",
    "Beveled",
    "BeveledPolyhedron",
    "BezierCurve",
    "BezierCurve3DBox",
    "BezierCurve3DBoxOptions",
    "BezierCurveBox",
    "BezierCurveBoxOptions",
    "BezierFunction",
    "BilateralFilter",
    "BilateralLaplaceTransform",
    "BilateralZTransform",
    "Binarize",
    "BinaryDeserialize",
    "BinaryDistance",
    "BinaryFormat",
    "BinaryImageQ",
    "BinaryRead",
    "BinaryReadList",
    "BinarySerialize",
    "BinaryWrite",
    "BinCounts",
    "BinLists",
    "BinnedVariogramList",
    "Binomial",
    "BinomialDistribution",
    "BinomialPointProcess",
    "BinomialProcess",
    "BinormalDistribution",
    "BiorthogonalSplineWavelet",
    "BioSequence",
    "BioSequenceBackTranslateList",
    "BioSequenceComplement",
    "BioSequenceInstances",
    "BioSequenceModify",
    "BioSequencePlot",
    "BioSequenceQ",
    "BioSequenceReverseComplement",
    "BioSequenceTranscribe",
    "BioSequenceTranslate",
    "BipartiteGraphQ",
    "BiquadraticFilterModel",
    "BirnbaumImportance",
    "BirnbaumSaundersDistribution",
    "BitAnd",
    "BitClear",
    "BitGet",
    "BitLength",
    "BitNot",
    "BitOr",
    "BitRate",
    "BitSet",
    "BitShiftLeft",
    "BitShiftRight",
    "BitXor",
    "BiweightLocation",
    "BiweightMidvariance",
    "Black",
    "BlackmanHarrisWindow",
    "BlackmanNuttallWindow",
    "BlackmanWindow",
    "Blank",
    "BlankForm",
    "BlankNullSequence",
    "BlankSequence",
    "Blend",
    "Block",
    "BlockchainAddressData",
    "BlockchainBase",
    "BlockchainBlockData",
    "BlockchainContractValue",
    "BlockchainData",
    "BlockchainGet",
    "BlockchainKeyEncode",
    "BlockchainPut",
    "BlockchainTokenData",
    "BlockchainTransaction",
    "BlockchainTransactionData",
    "BlockchainTransactionSign",
    "BlockchainTransactionSubmit",
    "BlockDiagonalMatrix",
    "BlockLowerTriangularMatrix",
    "BlockMap",
    "BlockRandom",
    "BlockUpperTriangularMatrix",
    "BlomqvistBeta",
    "BlomqvistBetaTest",
    "Blue",
    "Blur",
    "Blurring",
    "BodePlot",
    "BohmanWindow",
    "Bold",
    "Bond",
    "BondCount",
    "BondLabels",
    "BondLabelStyle",
    "BondList",
    "BondQ",
    "Bookmarks",
    "Boole",
    "BooleanConsecutiveFunction",
    "BooleanConvert",
    "BooleanCountingFunction",
    "BooleanFunction",
    "BooleanGraph",
    "BooleanMaxterms",
    "BooleanMinimize",
    "BooleanMinterms",
    "BooleanQ",
    "BooleanRegion",
    "Booleans",
    "BooleanStrings",
    "BooleanTable",
    "BooleanVariables",
    "BorderDimensions",
    "BorelTannerDistribution",
    "Bottom",
    "BottomHatTransform",
    "BoundaryDiscretizeGraphics",
    "BoundaryDiscretizeRegion",
    "BoundaryMesh",
    "BoundaryMeshRegion",
    "BoundaryMeshRegionQ",
    "BoundaryStyle",
    "BoundedRegionQ",
    "BoundingRegion",
    "Bounds",
    "Box",
    "BoxBaselineShift",
    "BoxData",
    "BoxDimensions",
    "Boxed",
    "Boxes",
    "BoxForm",
    "BoxFormFormatTypes",
    "BoxFrame",
    "BoxID",
    "BoxMargins",
    "BoxMatrix",
    "BoxObject",
    "BoxRatios",
    "BoxRotation",
    "BoxRotationPoint",
    "BoxStyle",
    "BoxWhiskerChart",
    "Bra",
    "BracketingBar",
    "BraKet",
    "BrayCurtisDistance",
    "BreadthFirstScan",
    "Break",
    "BridgeData",
    "BrightnessEqualize",
    "BroadcastStationData",
    "Brown",
    "BrownForsytheTest",
    "BrownianBridgeProcess",
    "BrowserCategory",
    "BSplineBasis",
    "BSplineCurve",
    "BSplineCurve3DBox",
    "BSplineCurve3DBoxOptions",
    "BSplineCurveBox",
    "BSplineCurveBoxOptions",
    "BSplineFunction",
    "BSplineSurface",
    "BSplineSurface3DBox",
    "BSplineSurface3DBoxOptions",
    "BubbleChart",
    "BubbleChart3D",
    "BubbleScale",
    "BubbleSizes",
    "BuckyballGraph",
    "BuildCompiledComponent",
    "BuildingData",
    "BulletGauge",
    "BusinessDayQ",
    "ButterflyGraph",
    "ButterworthFilterModel",
    "Button",
    "ButtonBar",
    "ButtonBox",
    "ButtonBoxOptions",
    "ButtonCell",
    "ButtonContents",
    "ButtonData",
    "ButtonEvaluator",
    "ButtonExpandable",
    "ButtonFrame",
    "ButtonFunction",
    "ButtonMargins",
    "ButtonMinHeight",
    "ButtonNote",
    "ButtonNotebook",
    "ButtonSource",
    "ButtonStyle",
    "ButtonStyleMenuListing",
    "Byte",
    "ByteArray",
    "ByteArrayFormat",
    "ByteArrayFormatQ",
    "ByteArrayQ",
    "ByteArrayToString",
    "ByteCount",
    "ByteOrdering",
    "C",
    "CachedValue",
    "CacheGraphics",
    "CachePersistence",
    "CalendarConvert",
    "CalendarData",
    "CalendarType",
    "Callout",
    "CalloutMarker",
    "CalloutStyle",
    "CallPacket",
    "CanberraDistance",
    "Cancel",
    "CancelButton",
    "CandlestickChart",
    "CanonicalGraph",
    "CanonicalizePolygon",
    "CanonicalizePolyhedron",
    "CanonicalizeRegion",
    "CanonicalName",
    "CanonicalWarpingCorrespondence",
    "CanonicalWarpingDistance",
    "CantorMesh",
    "CantorStaircase",
    "Canvas",
    "Cap",
    "CapForm",
    "CapitalDifferentialD",
    "Capitalize",
    "CapsuleShape",
    "CaptureRunning",
    "CaputoD",
    "CardinalBSplineBasis",
    "CarlemanLinearize",
    "CarlsonRC",
    "CarlsonRD",
    "CarlsonRE",
    "CarlsonRF",
    "CarlsonRG",
    "CarlsonRJ",
    "CarlsonRK",
    "CarlsonRM",
    "CarmichaelLambda",
    "CaseOrdering",
    "Cases",
    "CaseSensitive",
    "Cashflow",
    "Casoratian",
    "Cast",
    "Catalan",
    "CatalanNumber",
    "Catch",
    "CategoricalDistribution",
    "Catenate",
    "CatenateLayer",
    "CauchyDistribution",
    "CauchyMatrix",
    "CauchyPointProcess",
    "CauchyWindow",
    "CayleyGraph",
    "CDF",
    "CDFDeploy",
    "CDFInformation",
    "CDFWavelet",
    "Ceiling",
    "CelestialSystem",
    "Cell",
    "CellAutoOverwrite",
    "CellBaseline",
    "CellBoundingBox",
    "CellBracketOptions",
    "CellChangeTimes",
    "CellContents",
    "CellContext",
    "CellDingbat",
    "CellDingbatMargin",
    "CellDynamicExpression",
    "CellEditDuplicate",
    "CellElementsBoundingBox",
    "CellElementSpacings",
    "CellEpilog",
    "CellEvaluationDuplicate",
    "CellEvaluationFunction",
    "CellEvaluationLanguage",
    "CellEventActions",
    "CellFrame",
    "CellFrameColor",
    "CellFrameLabelMargins",
    "CellFrameLabels",
    "CellFrameMargins",
    "CellFrameStyle",
    "CellGroup",
    "CellGroupData",
    "CellGrouping",
    "CellGroupingRules",
    "CellHorizontalScrolling",
    "CellID",
    "CellInsertionPointCell",
    "CellLabel",
    "CellLabelAutoDelete",
    "CellLabelMargins",
    "CellLabelPositioning",
    "CellLabelStyle",
    "CellLabelTemplate",
    "CellMargins",
    "CellObject",
    "CellOpen",
    "CellPrint",
    "CellProlog",
    "Cells",
    "CellSize",
    "CellStyle",
    "CellTags",
    "CellTrayPosition",
    "CellTrayWidgets",
    "CellularAutomaton",
    "CensoredDistribution",
    "Censoring",
    "Center",
    "CenterArray",
    "CenterDot",
    "CenteredInterval",
    "CentralFeature",
    "CentralMoment",
    "CentralMomentGeneratingFunction",
    "Cepstrogram",
    "CepstrogramArray",
    "CepstrumArray",
    "CForm",
    "ChampernowneNumber",
    "ChangeOptions",
    "ChannelBase",
    "ChannelBrokerAction",
    "ChannelDatabin",
    "ChannelHistoryLength",
    "ChannelListen",
    "ChannelListener",
    "ChannelListeners",
    "ChannelListenerWait",
    "ChannelObject",
    "ChannelPreSendFunction",
    "ChannelReceiverFunction",
    "ChannelSend",
    "ChannelSubscribers",
    "ChanVeseBinarize",
    "Character",
    "CharacterCounts",
    "CharacterEncoding",
    "CharacterEncodingsPath",
    "CharacteristicFunction",
    "CharacteristicPolynomial",
    "CharacterName",
    "CharacterNormalize",
    "CharacterRange",
    "Characters",
    "ChartBaseStyle",
    "ChartElementData",
    "ChartElementDataFunction",
    "ChartElementFunction",
    "ChartElements",
    "ChartLabels",
    "ChartLayout",
    "ChartLegends",
    "ChartStyle",
    "Chebyshev1FilterModel",
    "Chebyshev2FilterModel",
    "ChebyshevDistance",
    "ChebyshevT",
    "ChebyshevU",
    "Check",
    "CheckAbort",
    "CheckAll",
    "CheckArguments",
    "Checkbox",
    "CheckboxBar",
    "CheckboxBox",
    "CheckboxBoxOptions",
    "ChemicalConvert",
    "ChemicalData",
    "ChemicalFormula",
    "ChemicalInstance",
    "ChemicalReaction",
    "ChessboardDistance",
    "ChiDistribution",
    "ChineseRemainder",
    "ChiSquareDistribution",
    "ChoiceButtons",
    "ChoiceDialog",
    "CholeskyDecomposition",
    "Chop",
    "ChromaticityPlot",
    "ChromaticityPlot3D",
    "ChromaticPolynomial",
    "Circle",
    "CircleBox",
    "CircleDot",
    "CircleMinus",
    "CirclePlus",
    "CirclePoints",
    "CircleThrough",
    "CircleTimes",
    "CirculantGraph",
    "CircularArcThrough",
    "CircularOrthogonalMatrixDistribution",
    "CircularQuaternionMatrixDistribution",
    "CircularRealMatrixDistribution",
    "CircularSymplecticMatrixDistribution",
    "CircularUnitaryMatrixDistribution",
    "Circumsphere",
    "CityData",
    "ClassifierFunction",
    "ClassifierInformation",
    "ClassifierMeasurements",
    "ClassifierMeasurementsObject",
    "Classify",
    "ClassPriors",
    "Clear",
    "ClearAll",
    "ClearAttributes",
    "ClearCookies",
    "ClearPermissions",
    "ClearSystemCache",
    "ClebschGordan",
    "ClickPane",
    "ClickToCopy",
    "ClickToCopyEnabled",
    "Clip",
    "ClipboardNotebook",
    "ClipFill",
    "ClippingStyle",
    "ClipPlanes",
    "ClipPlanesStyle",
    "ClipRange",
    "Clock",
    "ClockGauge",
    "ClockwiseContourIntegral",
    "Close",
    "Closed",
    "CloseKernels",
    "ClosenessCentrality",
    "Closing",
    "ClosingAutoSave",
    "ClosingEvent",
    "CloudAccountData",
    "CloudBase",
    "CloudConnect",
    "CloudConnections",
    "CloudDeploy",
    "CloudDirectory",
    "CloudDisconnect",
    "CloudEvaluate",
    "CloudExport",
    "CloudExpression",
    "CloudExpressions",
    "CloudFunction",
    "CloudGet",
    "CloudImport",
    "CloudLoggingData",
    "CloudObject",
    "CloudObjectInformation",
    "CloudObjectInformationData",
    "CloudObjectNameFormat",
    "CloudObjects",
    "CloudObjectURLType",
    "CloudPublish",
    "CloudPut",
    "CloudRenderingMethod",
    "CloudSave",
    "CloudShare",
    "CloudSubmit",
    "CloudSymbol",
    "CloudUnshare",
    "CloudUserID",
    "ClusterClassify",
    "ClusterDissimilarityFunction",
    "ClusteringComponents",
    "ClusteringMeasurements",
    "ClusteringTree",
    "CMYKColor",
    "Coarse",
    "CodeAssistOptions",
    "Coefficient",
    "CoefficientArrays",
    "CoefficientDomain",
    "CoefficientList",
    "CoefficientRules",
    "CoifletWavelet",
    "Collect",
    "CollinearPoints",
    "Colon",
    "ColonForm",
    "ColorBalance",
    "ColorCombine",
    "ColorConvert",
    "ColorCoverage",
    "ColorData",
    "ColorDataFunction",
    "ColorDetect",
    "ColorDistance",
    "ColorFunction",
    "ColorFunctionBinning",
    "ColorFunctionScaling",
    "Colorize",
    "ColorNegate",
    "ColorOutput",
    "ColorProfileData",
    "ColorQ",
    "ColorQuantize",
    "ColorReplace",
    "ColorRules",
    "ColorSelectorSettings",
    "ColorSeparate",
    "ColorSetter",
    "ColorSetterBox",
    "ColorSetterBoxOptions",
    "ColorSlider",
    "ColorsNear",
    "ColorSpace",
    "ColorToneMapping",
    "Column",
    "ColumnAlignments",
    "ColumnBackgrounds",
    "ColumnForm",
    "ColumnLines",
    "ColumnsEqual",
    "ColumnSpacings",
    "ColumnWidths",
    "CombinatorB",
    "CombinatorC",
    "CombinatorI",
    "CombinatorK",
    "CombinatorS",
    "CombinatorW",
    "CombinatorY",
    "CombinedEntityClass",
    "CombinerFunction",
    "CometData",
    "CommonDefaultFormatTypes",
    "Commonest",
    "CommonestFilter",
    "CommonName",
    "CommonUnits",
    "CommunityBoundaryStyle",
    "CommunityGraphPlot",
    "CommunityLabels",
    "CommunityRegionStyle",
    "CompanyData",
    "CompatibleUnitQ",
    "CompilationOptions",
    "CompilationTarget",
    "Compile",
    "Compiled",
    "CompiledCodeFunction",
    "CompiledComponent",
    "CompiledExpressionDeclaration",
    "CompiledFunction",
    "CompiledLayer",
    "CompilerCallback",
    "CompilerEnvironment",
    "CompilerEnvironmentAppend",
    "CompilerEnvironmentAppendTo",
    "CompilerEnvironmentObject",
    "CompilerOptions",
    "Complement",
    "ComplementedEntityClass",
    "CompleteGraph",
    "CompleteGraphQ",
    "CompleteIntegral",
    "CompleteKaryTree",
    "CompletionsListPacket",
    "Complex",
    "ComplexArrayPlot",
    "ComplexContourPlot",
    "Complexes",
    "ComplexExpand",
    "ComplexInfinity",
    "ComplexityFunction",
    "ComplexListPlot",
    "ComplexPlot",
    "ComplexPlot3D",
    "ComplexRegionPlot",
    "ComplexStreamPlot",
    "ComplexVectorPlot",
    "ComponentMeasurements",
    "ComponentwiseContextMenu",
    "Compose",
    "ComposeList",
    "ComposeSeries",
    "CompositeQ",
    "Composition",
    "CompoundElement",
    "CompoundExpression",
    "CompoundPoissonDistribution",
    "CompoundPoissonProcess",
    "CompoundRenewalProcess",
    "Compress",
    "CompressedData",
    "CompressionLevel",
    "ComputeUncertainty",
    "ConcaveHullMesh",
    "Condition",
    "ConditionalExpression",
    "Conditioned",
    "Cone",
    "ConeBox",
    "ConfidenceLevel",
    "ConfidenceRange",
    "ConfidenceTransform",
    "ConfigurationPath",
    "Confirm",
    "ConfirmAssert",
    "ConfirmBy",
    "ConfirmMatch",
    "ConfirmQuiet",
    "ConformationMethod",
    "ConformAudio",
    "ConformImages",
    "Congruent",
    "ConicGradientFilling",
    "ConicHullRegion",
    "ConicHullRegion3DBox",
    "ConicHullRegion3DBoxOptions",
    "ConicHullRegionBox",
    "ConicHullRegionBoxOptions",
    "ConicOptimization",
    "Conjugate",
    "ConjugateTranspose",
    "Conjunction",
    "Connect",
    "ConnectedComponents",
    "ConnectedGraphComponents",
    "ConnectedGraphQ",
    "ConnectedMeshComponents",
    "ConnectedMoleculeComponents",
    "ConnectedMoleculeQ",
    "ConnectionSettings",
    "ConnectLibraryCallbackFunction",
    "ConnectSystemModelComponents",
    "ConnectSystemModelController",
    "ConnesWindow",
    "ConoverTest",
    "ConservativeConvectionPDETerm",
    "ConsoleMessage",
    "Constant",
    "ConstantArray",
    "ConstantArrayLayer",
    "ConstantImage",
    "ConstantPlusLayer",
    "ConstantRegionQ",
    "Constants",
    "ConstantTimesLayer",
    "ConstellationData",
    "ConstrainedMax",
    "ConstrainedMin",
    "Construct",
    "Containing",
    "ContainsAll",
    "ContainsAny",
    "ContainsExactly",
    "ContainsNone",
    "ContainsOnly",
    "ContentDetectorFunction",
    "ContentFieldOptions",
    "ContentLocationFunction",
    "ContentObject",
    "ContentPadding",
    "ContentsBoundingBox",
    "ContentSelectable",
    "ContentSize",
    "Context",
    "ContextMenu",
    "Contexts",
    "ContextToFileName",
    "Continuation",
    "Continue",
    "ContinuedFraction",
    "ContinuedFractionK",
    "ContinuousAction",
    "ContinuousMarkovProcess",
    "ContinuousTask",
    "ContinuousTimeModelQ",
    "ContinuousWaveletData",
    "ContinuousWaveletTransform",
    "ContourDetect",
    "ContourGraphics",
    "ContourIntegral",
    "ContourLabels",
    "ContourLines",
    "ContourPlot",
    "ContourPlot3D",
    "Contours",
    "ContourShading",
    "ContourSmoothing",
    "ContourStyle",
    "ContraharmonicMean",
    "ContrastiveLossLayer",
    "Control",
    "ControlActive",
    "ControlAlignment",
    "ControlGroupContentsBox",
    "ControllabilityGramian",
    "ControllabilityMatrix",
    "ControllableDecomposition",
    "ControllableModelQ",
    "ControllerDuration",
    "ControllerInformation",
    "ControllerInformationData",
    "ControllerLinking",
    "ControllerManipulate",
    "ControllerMethod",
    "ControllerPath",
    "ControllerState",
    "ControlPlacement",
    "ControlsRendering",
    "ControlType",
    "ConvectionPDETerm",
    "Convergents",
    "ConversionOptions",
    "ConversionRules",
    "ConvertToPostScript",
    "ConvertToPostScriptPacket",
    "ConvexHullMesh",
    "ConvexHullRegion",
    "ConvexOptimization",
    "ConvexPolygonQ",
    "ConvexPolyhedronQ",
    "ConvexRegionQ",
    "ConvolutionLayer",
    "Convolve",
    "ConwayGroupCo1",
    "ConwayGroupCo2",
    "ConwayGroupCo3",
    "CookieFunction",
    "Cookies",
    "CoordinateBoundingBox",
    "CoordinateBoundingBoxArray",
    "CoordinateBounds",
    "CoordinateBoundsArray",
    "CoordinateChartData",
    "CoordinatesToolOptions",
    "CoordinateTransform",
    "CoordinateTransformData",
    "CoplanarPoints",
    "CoprimeQ",
    "Coproduct",
    "CopulaDistribution",
    "Copyable",
    "CopyDatabin",
    "CopyDirectory",
    "CopyFile",
    "CopyFunction",
    "CopyTag",
    "CopyToClipboard",
    "CoreNilpotentDecomposition",
    "CornerFilter",
    "CornerNeighbors",
    "Correlation",
    "CorrelationDistance",
    "CorrelationFunction",
    "CorrelationTest",
    "Cos",
    "Cosh",
    "CoshIntegral",
    "CosineDistance",
    "CosineWindow",
    "CosIntegral",
    "Cot",
    "Coth",
    "CoulombF",
    "CoulombG",
    "CoulombH1",
    "CoulombH2",
    "Count",
    "CountDistinct",
    "CountDistinctBy",
    "CounterAssignments",
    "CounterBox",
    "CounterBoxOptions",
    "CounterClockwiseContourIntegral",
    "CounterEvaluator",
    "CounterFunction",
    "CounterIncrements",
    "CounterStyle",
    "CounterStyleMenuListing",
    "CountRoots",
    "CountryData",
    "Counts",
    "CountsBy",
    "Covariance",
    "CovarianceEstimatorFunction",
    "CovarianceFunction",
    "CoxianDistribution",
    "CoxIngersollRossProcess",
    "CoxModel",
    "CoxModelFit",
    "CramerVonMisesTest",
    "CreateArchive",
    "CreateCellID",
    "CreateChannel",
    "CreateCloudExpression",
    "CreateCompilerEnvironment",
    "CreateDatabin",
    "CreateDataStructure",
    "CreateDataSystemModel",
    "CreateDialog",
    "CreateDirectory",
    "CreateDocument",
    "CreateFile",
    "CreateIntermediateDirectories",
    "CreateLicenseEntitlement",
    "CreateManagedLibraryExpression",
    "CreateNotebook",
    "CreatePacletArchive",
    "CreatePalette",
    "CreatePermissionsGroup",
    "CreateScheduledTask",
    "CreateSearchIndex",
    "CreateSystemModel",
    "CreateTemporary",
    "CreateTypeInstance",
    "CreateUUID",
    "CreateWindow",
    "CriterionFunction",
    "CriticalityFailureImportance",
    "CriticalitySuccessImportance",
    "CriticalSection",
    "Cross",
    "CrossEntropyLossLayer",
    "CrossingCount",
    "CrossingDetect",
    "CrossingPolygon",
    "CrossMatrix",
    "Csc",
    "Csch",
    "CSGRegion",
    "CSGRegionQ",
    "CSGRegionTree",
    "CTCLossLayer",
    "Cube",
    "CubeRoot",
    "Cubics",
    "Cuboid",
    "CuboidBox",
    "CuboidBoxOptions",
    "Cumulant",
    "CumulantGeneratingFunction",
    "CumulativeFeatureImpactPlot",
    "Cup",
    "CupCap",
    "Curl",
    "CurlyDoubleQuote",
    "CurlyQuote",
    "CurrencyConvert",
    "CurrentDate",
    "CurrentImage",
    "CurrentNotebookImage",
    "CurrentScreenImage",
    "CurrentValue",
    "Curry",
    "CurryApplied",
    "CurvatureFlowFilter",
    "CurveClosed",
    "Cyan",
    "CycleGraph",
    "CycleIndexPolynomial",
    "Cycles",
    "CyclicGroup",
    "Cyclotomic",
    "Cylinder",
    "CylinderBox",
    "CylinderBoxOptions",
    "CylindricalDecomposition",
    "CylindricalDecompositionFunction",
    "D",
    "DagumDistribution",
    "DamData",
    "DamerauLevenshteinDistance",
    "DampingFactor",
    "Darker",
    "Dashed",
    "Dashing",
    "DatabaseConnect",
    "DatabaseDisconnect",
    "DatabaseReference",
    "Databin",
    "DatabinAdd",
    "DatabinRemove",
    "Databins",
    "DatabinSubmit",
    "DatabinUpload",
    "DataCompression",
    "DataDistribution",
    "DataRange",
    "DataReversed",
    "Dataset",
    "DatasetDisplayPanel",
    "DatasetTheme",
    "DataStructure",
    "DataStructureQ",
    "Date",
    "DateBounds",
    "Dated",
    "DateDelimiters",
    "DateDifference",
    "DatedUnit",
    "DateFormat",
    "DateFunction",
    "DateGranularity",
    "DateHistogram",
    "DateInterval",
    "DateList",
    "DateListLogPlot",
    "DateListPlot",
    "DateListStepPlot",
    "DateObject",
    "DateObjectQ",
    "DateOverlapsQ",
    "DatePattern",
    "DatePlus",
    "DateRange",
    "DateReduction",
    "DateScale",
    "DateSelect",
    "DateString",
    "DateTicksFormat",
    "DateValue",
    "DateWithinQ",
    "DaubechiesWavelet",
    "DavisDistribution",
    "DawsonF",
    "DayCount",
    "DayCountConvention",
    "DayHemisphere",
    "DaylightQ",
    "DayMatchQ",
    "DayName",
    "DayNightTerminator",
    "DayPlus",
    "DayRange",
    "DayRound",
    "DeBruijnGraph",
    "DeBruijnSequence",
    "Debug",
    "DebugTag",
    "Decapitalize",
    "Decimal",
    "DecimalForm",
    "DeclareCompiledComponent",
    "DeclareKnownSymbols",
    "DeclarePackage",
    "Decompose",
    "DeconvolutionLayer",
    "Decrement",
    "Decrypt",
    "DecryptFile",
    "DedekindEta",
    "DeepSpaceProbeData",
    "Default",
    "Default2DTool",
    "Default3DTool",
    "DefaultAttachedCellStyle",
    "DefaultAxesStyle",
    "DefaultBaseStyle",
    "DefaultBoxStyle",
    "DefaultButton",
    "DefaultColor",
    "DefaultControlPlacement",
    "DefaultDockedCellStyle",
    "DefaultDuplicateCellStyle",
    "DefaultDuration",
    "DefaultElement",
    "DefaultFaceGridsStyle",
    "DefaultFieldHintStyle",
    "DefaultFont",
    "DefaultFontProperties",
    "DefaultFormatType",
    "DefaultFrameStyle",
    "DefaultFrameTicksStyle",
    "DefaultGridLinesStyle",
    "DefaultInlineFormatType",
    "DefaultInputFormatType",
    "DefaultLabelStyle",
    "DefaultMenuStyle",
    "DefaultNaturalLanguage",
    "DefaultNewCellStyle",
    "DefaultNewInlineCellStyle",
    "DefaultNotebook",
    "DefaultOptions",
    "DefaultOutputFormatType",
    "DefaultPrintPrecision",
    "DefaultStyle",
    "DefaultStyleDefinitions",
    "DefaultTextFormatType",
    "DefaultTextInlineFormatType",
    "DefaultTicksStyle",
    "DefaultTooltipStyle",
    "DefaultValue",
    "DefaultValues",
    "Defer",
    "DefineExternal",
    "DefineInputStreamMethod",
    "DefineOutputStreamMethod",
    "DefineResourceFunction",
    "Definition",
    "Degree",
    "DegreeCentrality",
    "DegreeGraphDistribution",
    "DegreeLexicographic",
    "DegreeReverseLexicographic",
    "DEigensystem",
    "DEigenvalues",
    "Deinitialization",
    "Del",
    "DelaunayMesh",
    "Delayed",
    "Deletable",
    "Delete",
    "DeleteAdjacentDuplicates",
    "DeleteAnomalies",
    "DeleteBorderComponents",
    "DeleteCases",
    "DeleteChannel",
    "DeleteCloudExpression",
    "DeleteContents",
    "DeleteDirectory",
    "DeleteDuplicates",
    "DeleteDuplicatesBy",
    "DeleteElements",
    "DeleteFile",
    "DeleteMissing",
    "DeleteObject",
    "DeletePermissionsKey",
    "DeleteSearchIndex",
    "DeleteSmallComponents",
    "DeleteStopwords",
    "DeleteWithContents",
    "DeletionWarning",
    "DelimitedArray",
    "DelimitedSequence",
    "Delimiter",
    "DelimiterAutoMatching",
    "DelimiterFlashTime",
    "DelimiterMatching",
    "Delimiters",
    "DeliveryFunction",
    "Dendrogram",
    "Denominator",
    "DensityGraphics",
    "DensityHistogram",
    "DensityPlot",
    "DensityPlot3D",
    "DependentVariables",
    "Deploy",
    "Deployed",
    "Depth",
    "DepthFirstScan",
    "Derivative",
    "DerivativeFilter",
    "DerivativePDETerm",
    "DerivedKey",
    "DescriptorStateSpace",
    "DesignMatrix",
    "DestroyAfterEvaluation",
    "Det",
    "DeviceClose",
    "DeviceConfigure",
    "DeviceExecute",
    "DeviceExecuteAsynchronous",
    "DeviceObject",
    "DeviceOpen",
    "DeviceOpenQ",
    "DeviceRead",
    "DeviceReadBuffer",
    "DeviceReadLatest",
    "DeviceReadList",
    "DeviceReadTimeSeries",
    "Devices",
    "DeviceStreams",
    "DeviceWrite",
    "DeviceWriteBuffer",
    "DGaussianWavelet",
    "DiacriticalPositioning",
    "Diagonal",
    "DiagonalizableMatrixQ",
    "DiagonalMatrix",
    "DiagonalMatrixQ",
    "Dialog",
    "DialogIndent",
    "DialogInput",
    "DialogLevel",
    "DialogNotebook",
    "DialogProlog",
    "DialogReturn",
    "DialogSymbols",
    "Diamond",
    "DiamondMatrix",
    "DiceDissimilarity",
    "DictionaryLookup",
    "DictionaryWordQ",
    "DifferenceDelta",
    "DifferenceOrder",
    "DifferenceQuotient",
    "DifferenceRoot",
    "DifferenceRootReduce",
    "Differences",
    "DifferentialD",
    "DifferentialRoot",
    "DifferentialRootReduce",
    "DifferentiatorFilter",
    "DiffusionPDETerm",
    "DiggleGatesPointProcess",
    "DiggleGrattonPointProcess",
    "DigitalSignature",
    "DigitBlock",
    "DigitBlockMinimum",
    "DigitCharacter",
    "DigitCount",
    "DigitQ",
    "DihedralAngle",
    "DihedralGroup",
    "Dilation",
    "DimensionalCombinations",
    "DimensionalMeshComponents",
    "DimensionReduce",
    "DimensionReducerFunction",
    "DimensionReduction",
    "Dimensions",
    "DiracComb",
    "DiracDelta",
    "DirectedEdge",
    "DirectedEdges",
    "DirectedGraph",
    "DirectedGraphQ",
    "DirectedInfinity",
    "Direction",
    "DirectionalLight",
    "Directive",
    "Directory",
    "DirectoryName",
    "DirectoryQ",
    "DirectoryStack",
    "DirichletBeta",
    "DirichletCharacter",
    "DirichletCondition",
    "DirichletConvolve",
    "DirichletDistribution",
    "DirichletEta",
    "DirichletL",
    "DirichletLambda",
    "DirichletTransform",
    "DirichletWindow",
    "DisableConsolePrintPacket",
    "DisableFormatting",
    "DiscreteAsymptotic",
    "DiscreteChirpZTransform",
    "DiscreteConvolve",
    "DiscreteDelta",
    "DiscreteHadamardTransform",
    "DiscreteIndicator",
    "DiscreteInputOutputModel",
    "DiscreteLimit",
    "DiscreteLQEstimatorGains",
    "DiscreteLQRegulatorGains",
    "DiscreteLyapunovSolve",
    "DiscreteMarkovProcess",
    "DiscreteMaxLimit",
    "DiscreteMinLimit",
    "DiscretePlot",
    "DiscretePlot3D",
    "DiscreteRatio",
    "DiscreteRiccatiSolve",
    "DiscreteShift",
    "DiscreteTimeModelQ",
    "DiscreteUniformDistribution",
    "DiscreteVariables",
    "DiscreteWaveletData",
    "DiscreteWaveletPacketTransform",
    "DiscreteWaveletTransform",
    "DiscretizeGraphics",
    "DiscretizeRegion",
    "Discriminant",
    "DisjointQ",
    "Disjunction",
    "Disk",
    "DiskBox",
    "DiskBoxOptions",
    "DiskMatrix",
    "DiskSegment",
    "Dispatch",
    "DispatchQ",
    "DispersionEstimatorFunction",
    "Display",
    "DisplayAllSteps",
    "DisplayEndPacket",
    "DisplayForm",
    "DisplayFunction",
    "DisplayPacket",
    "DisplayRules",
    "DisplayString",
    "DisplayTemporary",
    "DisplayWith",
    "DisplayWithRef",
    "DisplayWithVariable",
    "DistanceFunction",
    "DistanceMatrix",
    "DistanceTransform",
    "Distribute",
    "Distributed",
    "DistributedContexts",
    "DistributeDefinitions",
    "DistributionChart",
    "DistributionDomain",
    "DistributionFitTest",
    "DistributionParameterAssumptions",
    "DistributionParameterQ",
    "Dithering",
    "Div",
    "Divergence",
    "Divide",
    "DivideBy",
    "Dividers",
    "DivideSides",
    "Divisible",
    "Divisors",
    "DivisorSigma",
    "DivisorSum",
    "DMSList",
    "DMSString",
    "Do",
    "DockedCell",
    "DockedCells",
    "DocumentGenerator",
    "DocumentGeneratorInformation",
    "DocumentGeneratorInformationData",
    "DocumentGenerators",
    "DocumentNotebook",
    "DocumentWeightingRules",
    "Dodecahedron",
    "DomainRegistrationInformation",
    "DominantColors",
    "DominatorTreeGraph",
    "DominatorVertexList",
    "DOSTextFormat",
    "Dot",
    "DotDashed",
    "DotEqual",
    "DotLayer",
    "DotPlusLayer",
    "Dotted",
    "DoubleBracketingBar",
    "DoubleContourIntegral",
    "DoubleDownArrow",
    "DoubleLeftArrow",
    "DoubleLeftRightArrow",
    "DoubleLeftTee",
    "DoubleLongLeftArrow",
    "DoubleLongLeftRightArrow",
    "DoubleLongRightArrow",
    "DoubleRightArrow",
    "DoubleRightTee",
    "DoubleUpArrow",
    "DoubleUpDownArrow",
    "DoubleVerticalBar",
    "DoublyInfinite",
    "Down",
    "DownArrow",
    "DownArrowBar",
    "DownArrowUpArrow",
    "DownLeftRightVector",
    "DownLeftTeeVector",
    "DownLeftVector",
    "DownLeftVectorBar",
    "DownRightTeeVector",
    "DownRightVector",
    "DownRightVectorBar",
    "Downsample",
    "DownTee",
    "DownTeeArrow",
    "DownValues",
    "DownValuesFunction",
    "DragAndDrop",
    "DrawBackFaces",
    "DrawEdges",
    "DrawFrontFaces",
    "DrawHighlighted",
    "DrazinInverse",
    "Drop",
    "DropoutLayer",
    "DropShadowing",
    "DSolve",
    "DSolveChangeVariables",
    "DSolveValue",
    "Dt",
    "DualLinearProgramming",
    "DualPlanarGraph",
    "DualPolyhedron",
    "DualSystemsModel",
    "DumpGet",
    "DumpSave",
    "DuplicateFreeQ",
    "Duration",
    "Dynamic",
    "DynamicBox",
    "DynamicBoxOptions",
    "DynamicEvaluationTimeout",
    "DynamicGeoGraphics",
    "DynamicImage",
    "DynamicLocation",
    "DynamicModule",
    "DynamicModuleBox",
    "DynamicModuleBoxOptions",
    "DynamicModuleParent",
    "DynamicModuleValues",
    "DynamicName",
    "DynamicNamespace",
    "DynamicReference",
    "DynamicSetting",
    "DynamicUpdating",
    "DynamicWrapper",
    "DynamicWrapperBox",
    "DynamicWrapperBoxOptions",
    "E",
    "EarthImpactData",
    "EarthquakeData",
    "EccentricityCentrality",
    "Echo",
    "EchoEvaluation",
    "EchoFunction",
    "EchoLabel",
    "EchoTiming",
    "EclipseType",
    "EdgeAdd",
    "EdgeBetweennessCentrality",
    "EdgeCapacity",
    "EdgeCapForm",
    "EdgeChromaticNumber",
    "EdgeColor",
    "EdgeConnectivity",
    "EdgeContract",
    "EdgeCost",
    "EdgeCount",
    "EdgeCoverQ",
    "EdgeCycleMatrix",
    "EdgeDashing",
    "EdgeDelete",
    "EdgeDetect",
    "EdgeForm",
    "EdgeIndex",
    "EdgeJoinForm",
    "EdgeLabeling",
    "EdgeLabels",
    "EdgeLabelStyle",
    "EdgeList",
    "EdgeOpacity",
    "EdgeQ",
    "EdgeRenderingFunction",
    "EdgeRules",
    "EdgeShapeFunction",
    "EdgeStyle",
    "EdgeTaggedGraph",
    "EdgeTaggedGraphQ",
    "EdgeTags",
    "EdgeThickness",
    "EdgeTransitiveGraphQ",
    "EdgeValueRange",
    "EdgeValueSizes",
    "EdgeWeight",
    "EdgeWeightedGraphQ",
    "Editable",
    "EditButtonSettings",
    "EditCellTagsSettings",
    "EditDistance",
    "EffectiveInterest",
    "Eigensystem",
    "Eigenvalues",
    "EigenvectorCentrality",
    "Eigenvectors",
    "Element",
    "ElementData",
    "ElementwiseLayer",
    "ElidedForms",
    "Eliminate",
    "EliminationOrder",
    "Ellipsoid",
    "EllipticE",
    "EllipticExp",
    "EllipticExpPrime",
    "EllipticF",
    "EllipticFilterModel",
    "EllipticK",
    "EllipticLog",
    "EllipticNomeQ",
    "EllipticPi",
    "EllipticReducedHalfPeriods",
    "EllipticTheta",
    "EllipticThetaPrime",
    "EmbedCode",
    "EmbeddedHTML",
    "EmbeddedService",
    "EmbeddedSQLEntityClass",
    "EmbeddedSQLExpression",
    "EmbeddingLayer",
    "EmbeddingObject",
    "EmitSound",
    "EmphasizeSyntaxErrors",
    "EmpiricalDistribution",
    "Empty",
    "EmptyGraphQ",
    "EmptyRegion",
    "EmptySpaceF",
    "EnableConsolePrintPacket",
    "Enabled",
    "Enclose",
    "Encode",
    "Encrypt",
    "EncryptedObject",
    "EncryptFile",
    "End",
    "EndAdd",
    "EndDialogPacket",
    "EndOfBuffer",
    "EndOfFile",
    "EndOfLine",
    "EndOfString",
    "EndPackage",
    "EngineEnvironment",
    "EngineeringForm",
    "Enter",
    "EnterExpressionPacket",
    "EnterTextPacket",
    "Entity",
    "EntityClass",
    "EntityClassList",
    "EntityCopies",
    "EntityFunction",
    "EntityGroup",
    "EntityInstance",
    "EntityList",
    "EntityPrefetch",
    "EntityProperties",
    "EntityProperty",
    "EntityPropertyClass",
    "EntityRegister",
    "EntityStore",
    "EntityStores",
    "EntityTypeName",
    "EntityUnregister",
    "EntityValue",
    "Entropy",
    "EntropyFilter",
    "Environment",
    "Epilog",
    "EpilogFunction",
    "Equal",
    "EqualColumns",
    "EqualRows",
    "EqualTilde",
    "EqualTo",
    "EquatedTo",
    "Equilibrium",
    "EquirippleFilterKernel",
    "Equivalent",
    "Erf",
    "Erfc",
    "Erfi",
    "ErlangB",
    "ErlangC",
    "ErlangDistribution",
    "Erosion",
    "ErrorBox",
    "ErrorBoxOptions",
    "ErrorNorm",
    "ErrorPacket",
    "ErrorsDialogSettings",
    "EscapeRadius",
    "EstimatedBackground",
    "EstimatedDistribution",
    "EstimatedPointNormals",
    "EstimatedPointProcess",
    "EstimatedProcess",
    "EstimatedVariogramModel",
    "EstimatorGains",
    "EstimatorRegulator",
    "EuclideanDistance",
    "EulerAngles",
    "EulerCharacteristic",
    "EulerE",
    "EulerGamma",
    "EulerianGraphQ",
    "EulerMatrix",
    "EulerPhi",
    "Evaluatable",
    "Evaluate",
    "Evaluated",
    "EvaluatePacket",
    "EvaluateScheduledTask",
    "EvaluationBox",
    "EvaluationCell",
    "EvaluationCompletionAction",
    "EvaluationData",
    "EvaluationElements",
    "EvaluationEnvironment",
    "EvaluationMode",
    "EvaluationMonitor",
    "EvaluationNotebook",
    "EvaluationObject",
    "EvaluationOrder",
    "EvaluationPrivileges",
    "EvaluationRateLimit",
    "Evaluator",
    "EvaluatorNames",
    "EvenQ",
    "EventData",
    "EventEvaluator",
    "EventHandler",
    "EventHandlerTag",
    "EventLabels",
    "EventSeries",
    "ExactBlackmanWindow",
    "ExactNumberQ",
    "ExactRootIsolation",
    "ExampleData",
    "Except",
    "ExcludedContexts",
    "ExcludedForms",
    "ExcludedLines",
    "ExcludedPhysicalQuantities",
    "ExcludePods",
    "Exclusions",
    "ExclusionsStyle",
    "Exists",
    "Exit",
    "ExitDialog",
    "ExoplanetData",
    "Exp",
    "Expand",
    "ExpandAll",
    "ExpandDenominator",
    "ExpandFileName",
    "ExpandNumerator",
    "Expectation",
    "ExpectationE",
    "ExpectedValue",
    "ExpGammaDistribution",
    "ExpIntegralE",
    "ExpIntegralEi",
    "ExpirationDate",
    "Exponent",
    "ExponentFunction",
    "ExponentialDistribution",
    "ExponentialFamily",
    "ExponentialGeneratingFunction",
    "ExponentialMovingAverage",
    "ExponentialPowerDistribution",
    "ExponentPosition",
    "ExponentStep",
    "Export",
    "ExportAutoReplacements",
    "ExportByteArray",
    "ExportForm",
    "ExportPacket",
    "ExportString",
    "Expression",
    "ExpressionCell",
    "ExpressionGraph",
    "ExpressionPacket",
    "ExpressionTree",
    "ExpressionUUID",
    "ExpToTrig",
    "ExtendedEntityClass",
    "ExtendedGCD",
    "Extension",
    "ExtentElementFunction",
    "ExtentMarkers",
    "ExtentSize",
    "ExternalBundle",
    "ExternalCall",
    "ExternalDataCharacterEncoding",
    "ExternalEvaluate",
    "ExternalFunction",
    "ExternalFunctionName",
    "ExternalIdentifier",
    "ExternalObject",
    "ExternalOptions",
    "ExternalSessionObject",
    "ExternalSessions",
    "ExternalStorageBase",
    "ExternalStorageDownload",
    "ExternalStorageGet",
    "ExternalStorageObject",
    "ExternalStoragePut",
    "ExternalStorageUpload",
    "ExternalTypeSignature",
    "ExternalValue",
    "Extract",
    "ExtractArchive",
    "ExtractLayer",
    "ExtractPacletArchive",
    "ExtremeValueDistribution",
    "FaceAlign",
    "FaceForm",
    "FaceGrids",
    "FaceGridsStyle",
    "FaceRecognize",
    "FacialFeatures",
    "Factor",
    "FactorComplete",
    "Factorial",
    "Factorial2",
    "FactorialMoment",
    "FactorialMomentGeneratingFunction",
    "FactorialPower",
    "FactorInteger",
    "FactorList",
    "FactorSquareFree",
    "FactorSquareFreeList",
    "FactorTerms",
    "FactorTermsList",
    "Fail",
    "Failure",
    "FailureAction",
    "FailureDistribution",
    "FailureQ",
    "False",
    "FareySequence",
    "FARIMAProcess",
    "FeatureDistance",
    "FeatureExtract",
    "FeatureExtraction",
    "FeatureExtractor",
    "FeatureExtractorFunction",
    "FeatureImpactPlot",
    "FeatureNames",
    "FeatureNearest",
    "FeatureSpacePlot",
    "FeatureSpacePlot3D",
    "FeatureTypes",
    "FeatureValueDependencyPlot",
    "FeatureValueImpactPlot",
    "FEDisableConsolePrintPacket",
    "FeedbackLinearize",
    "FeedbackSector",
    "FeedbackSectorStyle",
    "FeedbackType",
    "FEEnableConsolePrintPacket",
    "FetalGrowthData",
    "Fibonacci",
    "Fibonorial",
    "FieldCompletionFunction",
    "FieldHint",
    "FieldHintStyle",
    "FieldMasked",
    "FieldSize",
    "File",
    "FileBaseName",
    "FileByteCount",
    "FileConvert",
    "FileDate",
    "FileExistsQ",
    "FileExtension",
    "FileFormat",
    "FileFormatProperties",
    "FileFormatQ",
    "FileHandler",
    "FileHash",
    "FileInformation",
    "FileName",
    "FileNameDepth",
    "FileNameDialogSettings",
    "FileNameDrop",
    "FileNameForms",
    "FileNameJoin",
    "FileNames",
    "FileNameSetter",
    "FileNameSplit",
    "FileNameTake",
    "FileNameToFormatList",
    "FilePrint",
    "FileSize",
    "FileSystemMap",
    "FileSystemScan",
    "FileSystemTree",
    "FileTemplate",
    "FileTemplateApply",
    "FileType",
    "FilledCurve",
    "FilledCurveBox",
    "FilledCurveBoxOptions",
    "FilledTorus",
    "FillForm",
    "Filling",
    "FillingStyle",
    "FillingTransform",
    "FilteredEntityClass",
    "FilterRules",
    "FinancialBond",
    "FinancialData",
    "FinancialDerivative",
    "FinancialIndicator",
    "Find",
    "FindAnomalies",
    "FindArgMax",
    "FindArgMin",
    "FindChannels",
    "FindClique",
    "FindClusters",
    "FindCookies",
    "FindCurvePath",
    "FindCycle",
    "FindDevices",
    "FindDistribution",
    "FindDistributionParameters",
    "FindDivisions",
    "FindEdgeColoring",
    "FindEdgeCover",
    "FindEdgeCut",
    "FindEdgeIndependentPaths",
    "FindEquationalProof",
    "FindEulerianCycle",
    "FindExternalEvaluators",
    "FindFaces",
    "FindFile",
    "FindFit",
    "FindFormula",
    "FindFundamentalCycles",
    "FindGeneratingFunction",
    "FindGeoLocation",
    "FindGeometricConjectures",
    "FindGeometricTransform",
    "FindGraphCommunities",
    "FindGraphIsomorphism",
    "FindGraphPartition",
    "FindHamiltonianCycle",
    "FindHamiltonianPath",
    "FindHiddenMarkovStates",
    "FindImageText",
    "FindIndependentEdgeSet",
    "FindIndependentVertexSet",
    "FindInstance",
    "FindIntegerNullVector",
    "FindIsomers",
    "FindIsomorphicSubgraph",
    "FindKClan",
    "FindKClique",
    "FindKClub",
    "FindKPlex",
    "FindLibrary",
    "FindLinearRecurrence",
    "FindList",
    "FindMatchingColor",
    "FindMaximum",
    "FindMaximumCut",
    "FindMaximumFlow",
    "FindMaxValue",
    "FindMeshDefects",
    "FindMinimum",
    "FindMinimumCostFlow",
    "FindMinimumCut",
    "FindMinValue",
    "FindMoleculeSubstructure",
    "FindPath",
    "FindPeaks",
    "FindPermutation",
    "FindPlanarColoring",
    "FindPointProcessParameters",
    "FindPostmanTour",
    "FindProcessParameters",
    "FindRegionTransform",
    "FindRepeat",
    "FindRoot",
    "FindSequenceFunction",
    "FindSettings",
    "FindShortestPath",
    "FindShortestTour",
    "FindSpanningTree",
    "FindSubgraphIsomorphism",
    "FindSystemModelEquilibrium",
    "FindTextualAnswer",
    "FindThreshold",
    "FindTransientRepeat",
    "FindVertexColoring",
    "FindVertexCover",
    "FindVertexCut",
    "FindVertexIndependentPaths",
    "Fine",
    "FinishDynamic",
    "FiniteAbelianGroupCount",
    "FiniteGroupCount",
    "FiniteGroupData",
    "First",
    "FirstCase",
    "FirstPassageTimeDistribution",
    "FirstPosition",
    "FischerGroupFi22",
    "FischerGroupFi23",
    "FischerGroupFi24Prime",
    "FisherHypergeometricDistribution",
    "FisherRatioTest",
    "FisherZDistribution",
    "Fit",
    "FitAll",
    "FitRegularization",
    "FittedModel",
    "FixedOrder",
    "FixedPoint",
    "FixedPointList",
    "FlashSelection",
    "Flat",
    "FlatShading",
    "Flatten",
    "FlattenAt",
    "FlattenLayer",
    "FlatTopWindow",
    "FlightData",
    "FlipView",
    "Floor",
    "FlowPolynomial",
    "Fold",
    "FoldList",
    "FoldPair",
    "FoldPairList",
    "FoldWhile",
    "FoldWhileList",
    "FollowRedirects",
    "Font",
    "FontColor",
    "FontFamily",
    "FontForm",
    "FontName",
    "FontOpacity",
    "FontPostScriptName",
    "FontProperties",
    "FontReencoding",
    "FontSize",
    "FontSlant",
    "FontSubstitutions",
    "FontTracking",
    "FontVariations",
    "FontWeight",
    "For",
    "ForAll",
    "ForAllType",
    "ForceVersionInstall",
    "Format",
    "FormatRules",
    "FormatType",
    "FormatTypeAutoConvert",
    "FormatValues",
    "FormBox",
    "FormBoxOptions",
    "FormControl",
    "FormFunction",
    "FormLayoutFunction",
    "FormObject",
    "FormPage",
    "FormProtectionMethod",
    "FormTheme",
    "FormulaData",
    "FormulaLookup",
    "FortranForm",
    "Forward",
    "ForwardBackward",
    "ForwardCloudCredentials",
    "Fourier",
    "FourierCoefficient",
    "FourierCosCoefficient",
    "FourierCosSeries",
    "FourierCosTransform",
    "FourierDCT",
    "FourierDCTFilter",
    "FourierDCTMatrix",
    "FourierDST",
    "FourierDSTMatrix",
    "FourierMatrix",
    "FourierParameters",
    "FourierSequenceTransform",
    "FourierSeries",
    "FourierSinCoefficient",
    "FourierSinSeries",
    "FourierSinTransform",
    "FourierTransform",
    "FourierTrigSeries",
    "FoxH",
    "FoxHReduce",
    "FractionalBrownianMotionProcess",
    "FractionalD",
    "FractionalGaussianNoiseProcess",
    "FractionalPart",
    "FractionBox",
    "FractionBoxOptions",
    "FractionLine",
    "Frame",
    "FrameBox",
    "FrameBoxOptions",
    "Framed",
    "FrameInset",
    "FrameLabel",
    "Frameless",
    "FrameListVideo",
    "FrameMargins",
    "FrameRate",
    "FrameStyle",
    "FrameTicks",
    "FrameTicksStyle",
    "FRatioDistribution",
    "FrechetDistribution",
    "FreeQ",
    "FrenetSerretSystem",
    "FrequencySamplingFilterKernel",
    "FresnelC",
    "FresnelF",
    "FresnelG",
    "FresnelS",
    "Friday",
    "FrobeniusNumber",
    "FrobeniusSolve",
    "FromAbsoluteTime",
    "FromCharacterCode",
    "FromCoefficientRules",
    "FromContinuedFraction",
    "FromDate",
    "FromDateString",
    "FromDigits",
    "FromDMS",
    "FromEntity",
    "FromJulianDate",
    "FromLetterNumber",
    "FromPolarCoordinates",
    "FromRawPointer",
    "FromRomanNumeral",
    "FromSphericalCoordinates",
    "FromUnixTime",
    "Front",
    "FrontEndDynamicExpression",
    "FrontEndEventActions",
    "FrontEndExecute",
    "FrontEndObject",
    "FrontEndResource",
    "FrontEndResourceString",
    "FrontEndStackSize",
    "FrontEndToken",
    "FrontEndTokenExecute",
    "FrontEndValueCache",
    "FrontEndVersion",
    "FrontFaceColor",
    "FrontFaceGlowColor",
    "FrontFaceOpacity",
    "FrontFaceSpecularColor",
    "FrontFaceSpecularExponent",
    "FrontFaceSurfaceAppearance",
    "FrontFaceTexture",
    "Full",
    "FullAxes",
    "FullDefinition",
    "FullForm",
    "FullGraphics",
    "FullInformationOutputRegulator",
    "FullOptions",
    "FullRegion",
    "FullSimplify",
    "Function",
    "FunctionAnalytic",
    "FunctionBijective",
    "FunctionCompile",
    "FunctionCompileExport",
    "FunctionCompileExportByteArray",
    "FunctionCompileExportLibrary",
    "FunctionCompileExportString",
    "FunctionContinuous",
    "FunctionConvexity",
    "FunctionDeclaration",
    "FunctionDiscontinuities",
    "FunctionDomain",
    "FunctionExpand",
    "FunctionInjective",
    "FunctionInterpolation",
    "FunctionLayer",
    "FunctionMeromorphic",
    "FunctionMonotonicity",
    "FunctionPeriod",
    "FunctionPoles",
    "FunctionRange",
    "FunctionSign",
    "FunctionSingularities",
    "FunctionSpace",
    "FunctionSurjective",
    "FussellVeselyImportance",
    "GaborFilter",
    "GaborMatrix",
    "GaborWavelet",
    "GainMargins",
    "GainPhaseMargins",
    "GalaxyData",
    "GalleryView",
    "Gamma",
    "GammaDistribution",
    "GammaRegularized",
    "GapPenalty",
    "GARCHProcess",
    "GatedRecurrentLayer",
    "Gather",
    "GatherBy",
    "GaugeFaceElementFunction",
    "GaugeFaceStyle",
    "GaugeFrameElementFunction",
    "GaugeFrameSize",
    "GaugeFrameStyle",
    "GaugeLabels",
    "GaugeMarkers",
    "GaugeStyle",
    "GaussianFilter",
    "GaussianIntegers",
    "GaussianMatrix",
    "GaussianOrthogonalMatrixDistribution",
    "GaussianSymplecticMatrixDistribution",
    "GaussianUnitaryMatrixDistribution",
    "GaussianWindow",
    "GCD",
    "GegenbauerC",
    "General",
    "GeneralizedLinearModelFit",
    "GenerateAsymmetricKeyPair",
    "GenerateConditions",
    "GeneratedAssetFormat",
    "GeneratedAssetLocation",
    "GeneratedCell",
    "GeneratedCellStyles",
    "GeneratedDocumentBinding",
    "GenerateDerivedKey",
    "GenerateDigitalSignature",
    "GenerateDocument",
    "GeneratedParameters",
    "GeneratedQuantityMagnitudes",
    "GenerateFileSignature",
    "GenerateHTTPResponse",
    "GenerateSecuredAuthenticationKey",
    "GenerateSymmetricKey",
    "GeneratingFunction",
    "GeneratorDescription",
    "GeneratorHistoryLength",
    "GeneratorOutputType",
    "Generic",
    "GenericCylindricalDecomposition",
    "GenomeData",
    "GenomeLookup",
    "GeoAntipode",
    "GeoArea",
    "GeoArraySize",
    "GeoBackground",
    "GeoBoundary",
    "GeoBoundingBox",
    "GeoBounds",
    "GeoBoundsRegion",
    "GeoBoundsRegionBoundary",
    "GeoBubbleChart",
    "GeoCenter",
    "GeoCircle",
    "GeoContourPlot",
    "GeoDensityPlot",
    "GeodesicClosing",
    "GeodesicDilation",
    "GeodesicErosion",
    "GeodesicOpening",
    "GeodesicPolyhedron",
    "GeoDestination",
    "GeodesyData",
    "GeoDirection",
    "GeoDisk",
    "GeoDisplacement",
    "GeoDistance",
    "GeoDistanceList",
    "GeoElevationData",
    "GeoEntities",
    "GeoGraphics",
    "GeoGraphPlot",
    "GeoGraphValuePlot",
    "GeogravityModelData",
    "GeoGridDirectionDifference",
    "GeoGridLines",
    "GeoGridLinesStyle",
    "GeoGridPosition",
    "GeoGridRange",
    "GeoGridRangePadding",
    "GeoGridUnitArea",
    "GeoGridUnitDistance",
    "GeoGridVector",
    "GeoGroup",
    "GeoHemisphere",
    "GeoHemisphereBoundary",
    "GeoHistogram",
    "GeoIdentify",
    "GeoImage",
    "GeoLabels",
    "GeoLength",
    "GeoListPlot",
    "GeoLocation",
    "GeologicalPeriodData",
    "GeomagneticModelData",
    "GeoMarker",
    "GeometricAssertion",
    "GeometricBrownianMotionProcess",
    "GeometricDistribution",
    "GeometricMean",
    "GeometricMeanFilter",
    "GeometricOptimization",
    "GeometricScene",
    "GeometricStep",
    "GeometricStylingRules",
    "GeometricTest",
    "GeometricTransformation",
    "GeometricTransformation3DBox",
    "GeometricTransformation3DBoxOptions",
    "GeometricTransformationBox",
    "GeometricTransformationBoxOptions",
    "GeoModel",
    "GeoNearest",
    "GeoOrientationData",
    "GeoPath",
    "GeoPolygon",
    "GeoPosition",
    "GeoPositionENU",
    "GeoPositionXYZ",
    "GeoProjection",
    "GeoProjectionData",
    "GeoRange",
    "GeoRangePadding",
    "GeoRegionValuePlot",
    "GeoResolution",
    "GeoScaleBar",
    "GeoServer",
    "GeoSmoothHistogram",
    "GeoStreamPlot",
    "GeoStyling",
    "GeoStylingImageFunction",
    "GeoVariant",
    "GeoVector",
    "GeoVectorENU",
    "GeoVectorPlot",
    "GeoVectorXYZ",
    "GeoVisibleRegion",
    "GeoVisibleRegionBoundary",
    "GeoWithinQ",
    "GeoZoomLevel",
    "GestureHandler",
    "GestureHandlerTag",
    "Get",
    "GetContext",
    "GetEnvironment",
    "GetFileName",
    "GetLinebreakInformationPacket",
    "GibbsPointProcess",
    "Glaisher",
    "GlobalClusteringCoefficient",
    "GlobalPreferences",
    "GlobalSession",
    "Glow",
    "GoldenAngle",
    "GoldenRatio",
    "GompertzMakehamDistribution",
    "GoochShading",
    "GoodmanKruskalGamma",
    "GoodmanKruskalGammaTest",
    "Goto",
    "GouraudShading",
    "Grad",
    "Gradient",
    "GradientFilter",
    "GradientFittedMesh",
    "GradientOrientationFilter",
    "GrammarApply",
    "GrammarRules",
    "GrammarToken",
    "Graph",
    "Graph3D",
    "GraphAssortativity",
    "GraphAutomorphismGroup",
    "GraphCenter",
    "GraphComplement",
    "GraphData",
    "GraphDensity",
    "GraphDiameter",
    "GraphDifference",
    "GraphDisjointUnion",
    "GraphDistance",
    "GraphDistanceMatrix",
    "GraphEmbedding",
    "GraphHighlight",
    "GraphHighlightStyle",
    "GraphHub",
    "Graphics",
    "Graphics3D",
    "Graphics3DBox",
    "Graphics3DBoxOptions",
    "GraphicsArray",
    "GraphicsBaseline",
    "GraphicsBox",
    "GraphicsBoxOptions",
    "GraphicsColor",
    "GraphicsColumn",
    "GraphicsComplex",
    "GraphicsComplex3DBox",
    "GraphicsComplex3DBoxOptions",
    "GraphicsComplexBox",
    "GraphicsComplexBoxOptions",
    "GraphicsContents",
    "GraphicsData",
    "GraphicsGrid",
    "GraphicsGridBox",
    "GraphicsGroup",
    "GraphicsGroup3DBox",
    "GraphicsGroup3DBoxOptions",
    "GraphicsGroupBox",
    "GraphicsGroupBoxOptions",
    "GraphicsGrouping",
    "GraphicsHighlightColor",
    "GraphicsRow",
    "GraphicsSpacing",
    "GraphicsStyle",
    "GraphIntersection",
    "GraphJoin",
    "GraphLayerLabels",
    "GraphLayers",
    "GraphLayerStyle",
    "GraphLayout",
    "GraphLinkEfficiency",
    "GraphPeriphery",
    "GraphPlot",
    "GraphPlot3D",
    "GraphPower",
    "GraphProduct",
    "GraphPropertyDistribution",
    "GraphQ",
    "GraphRadius",
    "GraphReciprocity",
    "GraphRoot",
    "GraphStyle",
    "GraphSum",
    "GraphTree",
    "GraphUnion",
    "Gray",
    "GrayLevel",
    "Greater",
    "GreaterEqual",
    "GreaterEqualLess",
    "GreaterEqualThan",
    "GreaterFullEqual",
    "GreaterGreater",
    "GreaterLess",
    "GreaterSlantEqual",
    "GreaterThan",
    "GreaterTilde",
    "GreekStyle",
    "Green",
    "GreenFunction",
    "Grid",
    "GridBaseline",
    "GridBox",
    "GridBoxAlignment",
    "GridBoxBackground",
    "GridBoxDividers",
    "GridBoxFrame",
    "GridBoxItemSize",
    "GridBoxItemStyle",
    "GridBoxOptions",
    "GridBoxSpacings",
    "GridCreationSettings",
    "GridDefaultElement",
    "GridElementStyleOptions",
    "GridFrame",
    "GridFrameMargins",
    "GridGraph",
    "GridLines",
    "GridLinesStyle",
    "GridVideo",
    "GroebnerBasis",
    "GroupActionBase",
    "GroupBy",
    "GroupCentralizer",
    "GroupElementFromWord",
    "GroupElementPosition",
    "GroupElementQ",
    "GroupElements",
    "GroupElementToWord",
    "GroupGenerators",
    "Groupings",
    "GroupMultiplicationTable",
    "GroupOpenerColor",
    "GroupOpenerInsideFrame",
    "GroupOrbits",
    "GroupOrder",
    "GroupPageBreakWithin",
    "GroupSetwiseStabilizer",
    "GroupStabilizer",
    "GroupStabilizerChain",
    "GroupTogetherGrouping",
    "GroupTogetherNestedGrouping",
    "GrowCutComponents",
    "Gudermannian",
    "GuidedFilter",
    "GumbelDistribution",
    "HaarWavelet",
    "HadamardMatrix",
    "HalfLine",
    "HalfNormalDistribution",
    "HalfPlane",
    "HalfSpace",
    "HalftoneShading",
    "HamiltonianGraphQ",
    "HammingDistance",
    "HammingWindow",
    "HandlerFunctions",
    "HandlerFunctionsKeys",
    "HankelH1",
    "HankelH2",
    "HankelMatrix",
    "HankelTransform",
    "HannPoissonWindow",
    "HannWindow",
    "HaradaNortonGroupHN",
    "HararyGraph",
    "HardcorePointProcess",
    "HarmonicMean",
    "HarmonicMeanFilter",
    "HarmonicNumber",
    "Hash",
    "HatchFilling",
    "HatchShading",
    "Haversine",
    "HazardFunction",
    "Head",
    "HeadCompose",
    "HeaderAlignment",
    "HeaderBackground",
    "HeaderDisplayFunction",
    "HeaderLines",
    "Headers",
    "HeaderSize",
    "HeaderStyle",
    "Heads",
    "HeatFluxValue",
    "HeatInsulationValue",
    "HeatOutflowValue",
    "HeatRadiationValue",
    "HeatSymmetryValue",
    "HeatTemperatureCondition",
    "HeatTransferPDEComponent",
    "HeatTransferValue",
    "HeavisideLambda",
    "HeavisidePi",
    "HeavisideTheta",
    "HeldGroupHe",
    "HeldPart",
    "HelmholtzPDEComponent",
    "HelpBrowserLookup",
    "HelpBrowserNotebook",
    "HelpBrowserSettings",
    "HelpViewerSettings",
    "Here",
    "HermiteDecomposition",
    "HermiteH",
    "Hermitian",
    "HermitianMatrixQ",
    "HessenbergDecomposition",
    "Hessian",
    "HeunB",
    "HeunBPrime",
    "HeunC",
    "HeunCPrime",
    "HeunD",
    "HeunDPrime",
    "HeunG",
    "HeunGPrime",
    "HeunT",
    "HeunTPrime",
    "HexadecimalCharacter",
    "Hexahedron",
    "HexahedronBox",
    "HexahedronBoxOptions",
    "HiddenItems",
    "HiddenMarkovProcess",
    "HiddenSurface",
    "Highlighted",
    "HighlightGraph",
    "HighlightImage",
    "HighlightMesh",
    "HighlightString",
    "HighpassFilter",
    "HigmanSimsGroupHS",
    "HilbertCurve",
    "HilbertFilter",
    "HilbertMatrix",
    "Histogram",
    "Histogram3D",
    "HistogramDistribution",
    "HistogramList",
    "HistogramPointDensity",
    "HistogramTransform",
    "HistogramTransformInterpolation",
    "HistoricalPeriodData",
    "HitMissTransform",
    "HITSCentrality",
    "HjorthDistribution",
    "HodgeDual",
    "HoeffdingD",
    "HoeffdingDTest",
    "Hold",
    "HoldAll",
    "HoldAllComplete",
    "HoldComplete",
    "HoldFirst",
    "HoldForm",
    "HoldPattern",
    "HoldRest",
    "HolidayCalendar",
    "HomeDirectory",
    "HomePage",
    "Horizontal",
    "HorizontalForm",
    "HorizontalGauge",
    "HorizontalScrollPosition",
    "HornerForm",
    "HostLookup",
    "HotellingTSquareDistribution",
    "HoytDistribution",
    "HTMLSave",
    "HTTPErrorResponse",
    "HTTPRedirect",
    "HTTPRequest",
    "HTTPRequestData",
    "HTTPResponse",
    "Hue",
    "HumanGrowthData",
    "HumpDownHump",
    "HumpEqual",
    "HurwitzLerchPhi",
    "HurwitzZeta",
    "HyperbolicDistribution",
    "HypercubeGraph",
    "HyperexponentialDistribution",
    "Hyperfactorial",
    "Hypergeometric0F1",
    "Hypergeometric0F1Regularized",
    "Hypergeometric1F1",
    "Hypergeometric1F1Regularized",
    "Hypergeometric2F1",
    "Hypergeometric2F1Regularized",
    "HypergeometricDistribution",
    "HypergeometricPFQ",
    "HypergeometricPFQRegularized",
    "HypergeometricU",
    "Hyperlink",
    "HyperlinkAction",
    "HyperlinkCreationSettings",
    "Hyperplane",
    "Hyphenation",
    "HyphenationOptions",
    "HypoexponentialDistribution",
    "HypothesisTestData",
    "I",
    "IconData",
    "Iconize",
    "IconizedObject",
    "IconRules",
    "Icosahedron",
    "Identity",
    "IdentityMatrix",
    "If",
    "IfCompiled",
    "IgnoreCase",
    "IgnoreDiacritics",
    "IgnoreIsotopes",
    "IgnorePunctuation",
    "IgnoreSpellCheck",
    "IgnoreStereochemistry",
    "IgnoringInactive",
    "Im",
    "Image",
    "Image3D",
    "Image3DProjection",
    "Image3DSlices",
    "ImageAccumulate",
    "ImageAdd",
    "ImageAdjust",
    "ImageAlign",
    "ImageApply",
    "ImageApplyIndexed",
    "ImageAspectRatio",
    "ImageAssemble",
    "ImageAugmentationLayer",
    "ImageBoundingBoxes",
    "ImageCache",
    "ImageCacheValid",
    "ImageCapture",
    "ImageCaptureFunction",
    "ImageCases",
    "ImageChannels",
    "ImageClip",
    "ImageCollage",
    "ImageColorSpace",
    "ImageCompose",
    "ImageContainsQ",
    "ImageContents",
    "ImageConvolve",
    "ImageCooccurrence",
    "ImageCorners",
    "ImageCorrelate",
    "ImageCorrespondingPoints",
    "ImageCrop",
    "ImageData",
    "ImageDeconvolve",
    "ImageDemosaic",
    "ImageDifference",
    "ImageDimensions",
    "ImageDisplacements",
    "ImageDistance",
    "ImageEditMode",
    "ImageEffect",
    "ImageExposureCombine",
    "ImageFeatureTrack",
    "ImageFileApply",
    "ImageFileFilter",
    "ImageFileScan",
    "ImageFilter",
    "ImageFocusCombine",
    "ImageForestingComponents",
    "ImageFormattingWidth",
    "ImageForwardTransformation",
    "ImageGraphics",
    "ImageHistogram",
    "ImageIdentify",
    "ImageInstanceQ",
    "ImageKeypoints",
    "ImageLabels",
    "ImageLegends",
    "ImageLevels",
    "ImageLines",
    "ImageMargins",
    "ImageMarker",
    "ImageMarkers",
    "ImageMeasurements",
    "ImageMesh",
    "ImageMultiply",
    "ImageOffset",
    "ImagePad",
    "ImagePadding",
    "ImagePartition",
    "ImagePeriodogram",
    "ImagePerspectiveTransformation",
    "ImagePosition",
    "ImagePreviewFunction",
    "ImagePyramid",
    "ImagePyramidApply",
    "ImageQ",
    "ImageRangeCache",
    "ImageRecolor",
    "ImageReflect",
    "ImageRegion",
    "ImageResize",
    "ImageResolution",
    "ImageRestyle",
    "ImageRotate",
    "ImageRotated",
    "ImageSaliencyFilter",
    "ImageScaled",
    "ImageScan",
    "ImageSize",
    "ImageSizeAction",
    "ImageSizeCache",
    "ImageSizeMultipliers",
    "ImageSizeRaw",
    "ImageStitch",
    "ImageSubtract",
    "ImageTake",
    "ImageTransformation",
    "ImageTrim",
    "ImageType",
    "ImageValue",
    "ImageValuePositions",
    "ImageVectorscopePlot",
    "ImageWaveformPlot",
    "ImagingDevice",
    "ImplicitD",
    "ImplicitRegion",
    "Implies",
    "Import",
    "ImportAutoReplacements",
    "ImportByteArray",
    "ImportedObject",
    "ImportOptions",
    "ImportString",
    "ImprovementImportance",
    "In",
    "Inactivate",
    "Inactive",
    "InactiveStyle",
    "IncidenceGraph",
    "IncidenceList",
    "IncidenceMatrix",
    "IncludeAromaticBonds",
    "IncludeConstantBasis",
    "IncludedContexts",
    "IncludeDefinitions",
    "IncludeDirectories",
    "IncludeFileExtension",
    "IncludeGeneratorTasks",
    "IncludeHydrogens",
    "IncludeInflections",
    "IncludeMetaInformation",
    "IncludePods",
    "IncludeQuantities",
    "IncludeRelatedTables",
    "IncludeSingularSolutions",
    "IncludeSingularTerm",
    "IncludeWindowTimes",
    "Increment",
    "IndefiniteMatrixQ",
    "Indent",
    "IndentingNewlineSpacings",
    "IndentMaxFraction",
    "IndependenceTest",
    "IndependentEdgeSetQ",
    "IndependentPhysicalQuantity",
    "IndependentUnit",
    "IndependentUnitDimension",
    "IndependentVertexSetQ",
    "Indeterminate",
    "IndeterminateThreshold",
    "IndexCreationOptions",
    "Indexed",
    "IndexEdgeTaggedGraph",
    "IndexGraph",
    "IndexTag",
    "Inequality",
    "InertEvaluate",
    "InertExpression",
    "InexactNumberQ",
    "InexactNumbers",
    "InfiniteFuture",
    "InfiniteLine",
    "InfiniteLineThrough",
    "InfinitePast",
    "InfinitePlane",
    "Infinity",
    "Infix",
    "InflationAdjust",
    "InflationMethod",
    "Information",
    "InformationData",
    "InformationDataGrid",
    "Inherited",
    "InheritScope",
    "InhomogeneousPoissonPointProcess",
    "InhomogeneousPoissonProcess",
    "InitialEvaluationHistory",
    "Initialization",
    "InitializationCell",
    "InitializationCellEvaluation",
    "InitializationCellWarning",
    "InitializationObject",
    "InitializationObjects",
    "InitializationValue",
    "Initialize",
    "InitialSeeding",
    "InlineCounterAssignments",
    "InlineCounterIncrements",
    "InlineRules",
    "Inner",
    "InnerPolygon",
    "InnerPolyhedron",
    "Inpaint",
    "Input",
    "InputAliases",
    "InputAssumptions",
    "InputAutoReplacements",
    "InputField",
    "InputFieldBox",
    "InputFieldBoxOptions",
    "InputForm",
    "InputGrouping",
    "InputNamePacket",
    "InputNotebook",
    "InputPacket",
    "InputPorts",
    "InputSettings",
    "InputStream",
    "InputString",
    "InputStringPacket",
    "InputToBoxFormPacket",
    "Insert",
    "InsertionFunction",
    "InsertionPointObject",
    "InsertLinebreaks",
    "InsertResults",
    "Inset",
    "Inset3DBox",
    "Inset3DBoxOptions",
    "InsetBox",
    "InsetBoxOptions",
    "Insphere",
    "Install",
    "InstallService",
    "InstanceNormalizationLayer",
    "InString",
    "Integer",
    "IntegerDigits",
    "IntegerExponent",
    "IntegerLength",
    "IntegerName",
    "IntegerPart",
    "IntegerPartitions",
    "IntegerQ",
    "IntegerReverse",
    "Integers",
    "IntegerString",
    "Integral",
    "Integrate",
    "IntegrateChangeVariables",
    "Interactive",
    "InteractiveTradingChart",
    "InterfaceSwitched",
    "Interlaced",
    "Interleaving",
    "InternallyBalancedDecomposition",
    "InterpolatingFunction",
    "InterpolatingPolynomial",
    "Interpolation",
    "InterpolationOrder",
    "InterpolationPoints",
    "InterpolationPrecision",
    "Interpretation",
    "InterpretationBox",
    "InterpretationBoxOptions",
    "InterpretationFunction",
    "Interpreter",
    "InterpretTemplate",
    "InterquartileRange",
    "Interrupt",
    "InterruptSettings",
    "IntersectedEntityClass",
    "IntersectingQ",
    "Intersection",
    "Interval",
    "IntervalIntersection",
    "IntervalMarkers",
    "IntervalMarkersStyle",
    "IntervalMemberQ",
    "IntervalSlider",
    "IntervalUnion",
    "Into",
    "Inverse",
    "InverseBetaRegularized",
    "InverseBilateralLaplaceTransform",
    "InverseBilateralZTransform",
    "InverseCDF",
    "InverseChiSquareDistribution",
    "InverseContinuousWaveletTransform",
    "InverseDistanceTransform",
    "InverseEllipticNomeQ",
    "InverseErf",
    "InverseErfc",
    "InverseFourier",
    "InverseFourierCosTransform",
    "InverseFourierSequenceTransform",
    "InverseFourierSinTransform",
    "InverseFourierTransform",
    "InverseFunction",
    "InverseFunctions",
    "InverseGammaDistribution",
    "InverseGammaRegularized",
    "InverseGaussianDistribution",
    "InverseGudermannian",
    "InverseHankelTransform",
    "InverseHaversine",
    "InverseImagePyramid",
    "InverseJacobiCD",
    "InverseJacobiCN",
    "InverseJacobiCS",
    "InverseJacobiDC",
    "InverseJacobiDN",
    "InverseJacobiDS",
    "InverseJacobiNC",
    "InverseJacobiND",
    "InverseJacobiNS",
    "InverseJacobiSC",
    "InverseJacobiSD",
    "InverseJacobiSN",
    "InverseLaplaceTransform",
    "InverseMellinTransform",
    "InversePermutation",
    "InverseRadon",
    "InverseRadonTransform",
    "InverseSeries",
    "InverseShortTimeFourier",
    "InverseSpectrogram",
    "InverseSurvivalFunction",
    "InverseTransformedRegion",
    "InverseWaveletTransform",
    "InverseWeierstrassP",
    "InverseWishartMatrixDistribution",
    "InverseZTransform",
    "Invisible",
    "InvisibleApplication",
    "InvisibleTimes",
    "IPAddress",
    "IrreduciblePolynomialQ",
    "IslandData",
    "IsolatingInterval",
    "IsomorphicGraphQ",
    "IsomorphicSubgraphQ",
    "IsotopeData",
    "Italic",
    "Item",
    "ItemAspectRatio",
    "ItemBox",
    "ItemBoxOptions",
    "ItemDisplayFunction",
    "ItemSize",
    "ItemStyle",
    "ItoProcess",
    "JaccardDissimilarity",
    "JacobiAmplitude",
    "Jacobian",
    "JacobiCD",
    "JacobiCN",
    "JacobiCS",
    "JacobiDC",
    "JacobiDN",
    "JacobiDS",
    "JacobiEpsilon",
    "JacobiNC",
    "JacobiND",
    "JacobiNS",
    "JacobiP",
    "JacobiSC",
    "JacobiSD",
    "JacobiSN",
    "JacobiSymbol",
    "JacobiZeta",
    "JacobiZN",
    "JankoGroupJ1",
    "JankoGroupJ2",
    "JankoGroupJ3",
    "JankoGroupJ4",
    "JarqueBeraALMTest",
    "JohnsonDistribution",
    "Join",
    "JoinAcross",
    "Joined",
    "JoinedCurve",
    "JoinedCurveBox",
    "JoinedCurveBoxOptions",
    "JoinForm",
    "JordanDecomposition",
    "JordanModelDecomposition",
    "JulianDate",
    "JuliaSetBoettcher",
    "JuliaSetIterationCount",
    "JuliaSetPlot",
    "JuliaSetPoints",
    "K",
    "KagiChart",
    "KaiserBesselWindow",
    "KaiserWindow",
    "KalmanEstimator",
    "KalmanFilter",
    "KarhunenLoeveDecomposition",
    "KaryTree",
    "KatzCentrality",
    "KCoreComponents",
    "KDistribution",
    "KEdgeConnectedComponents",
    "KEdgeConnectedGraphQ",
    "KeepExistingVersion",
    "KelvinBei",
    "KelvinBer",
    "KelvinKei",
    "KelvinKer",
    "KendallTau",
    "KendallTauTest",
    "KernelConfiguration",
    "KernelExecute",
    "KernelFunction",
    "KernelMixtureDistribution",
    "KernelObject",
    "Kernels",
    "Ket",
    "Key",
    "KeyCollisionFunction",
    "KeyComplement",
    "KeyDrop",
    "KeyDropFrom",
    "KeyExistsQ",
    "KeyFreeQ",
    "KeyIntersection",
    "KeyMap",
    "KeyMemberQ",
    "KeypointStrength",
    "Keys",
    "KeySelect",
    "KeySort",
    "KeySortBy",
    "KeyTake",
    "KeyUnion",
    "KeyValueMap",
    "KeyValuePattern",
    "Khinchin",
    "KillProcess",
    "KirchhoffGraph",
    "KirchhoffMatrix",
    "KleinInvariantJ",
    "KnapsackSolve",
    "KnightTourGraph",
    "KnotData",
    "KnownUnitQ",
    "KochCurve",
    "KolmogorovSmirnovTest",
    "KroneckerDelta",
    "KroneckerModelDecomposition",
    "KroneckerProduct",
    "KroneckerSymbol",
    "KuiperTest",
    "KumaraswamyDistribution",
    "Kurtosis",
    "KuwaharaFilter",
    "KVertexConnectedComponents",
    "KVertexConnectedGraphQ",
    "LABColor",
    "Label",
    "Labeled",
    "LabeledSlider",
    "LabelingFunction",
    "LabelingSize",
    "LabelStyle",
    "LabelVisibility",
    "LaguerreL",
    "LakeData",
    "LambdaComponents",
    "LambertW",
    "LameC",
    "LameCPrime",
    "LameEigenvalueA",
    "LameEigenvalueB",
    "LameS",
    "LameSPrime",
    "LaminaData",
    "LanczosWindow",
    "LandauDistribution",
    "Language",
    "LanguageCategory",
    "LanguageData",
    "LanguageIdentify",
    "LanguageOptions",
    "LaplaceDistribution",
    "LaplaceTransform",
    "Laplacian",
    "LaplacianFilter",
    "LaplacianGaussianFilter",
    "LaplacianPDETerm",
    "Large",
    "Larger",
    "Last",
    "Latitude",
    "LatitudeLongitude",
    "LatticeData",
    "LatticeReduce",
    "Launch",
    "LaunchKernels",
    "LayeredGraphPlot",
    "LayeredGraphPlot3D",
    "LayerSizeFunction",
    "LayoutInformation",
    "LCHColor",
    "LCM",
    "LeaderSize",
    "LeafCount",
    "LeapVariant",
    "LeapYearQ",
    "LearnDistribution",
    "LearnedDistribution",
    "LearningRate",
    "LearningRateMultipliers",
    "LeastSquares",
    "LeastSquaresFilterKernel",
    "Left",
    "LeftArrow",
    "LeftArrowBar",
    "LeftArrowRightArrow",
    "LeftDownTeeVector",
    "LeftDownVector",
    "LeftDownVectorBar",
    "LeftRightArrow",
    "LeftRightVector",
    "LeftTee",
    "LeftTeeArrow",
    "LeftTeeVector",
    "LeftTriangle",
    "LeftTriangleBar",
    "LeftTriangleEqual",
    "LeftUpDownVector",
    "LeftUpTeeVector",
    "LeftUpVector",
    "LeftUpVectorBar",
    "LeftVector",
    "LeftVectorBar",
    "LegendAppearance",
    "Legended",
    "LegendFunction",
    "LegendLabel",
    "LegendLayout",
    "LegendMargins",
    "LegendMarkers",
    "LegendMarkerSize",
    "LegendreP",
    "LegendreQ",
    "LegendreType",
    "Length",
    "LengthWhile",
    "LerchPhi",
    "Less",
    "LessEqual",
    "LessEqualGreater",
    "LessEqualThan",
    "LessFullEqual",
    "LessGreater",
    "LessLess",
    "LessSlantEqual",
    "LessThan",
    "LessTilde",
    "LetterCharacter",
    "LetterCounts",
    "LetterNumber",
    "LetterQ",
    "Level",
    "LeveneTest",
    "LeviCivitaTensor",
    "LevyDistribution",
    "Lexicographic",
    "LexicographicOrder",
    "LexicographicSort",
    "LibraryDataType",
    "LibraryFunction",
    "LibraryFunctionDeclaration",
    "LibraryFunctionError",
    "LibraryFunctionInformation",
    "LibraryFunctionLoad",
    "LibraryFunctionUnload",
    "LibraryLoad",
    "LibraryUnload",
    "LicenseEntitlementObject",
    "LicenseEntitlements",
    "LicenseID",
    "LicensingSettings",
    "LiftingFilterData",
    "LiftingWaveletTransform",
    "LightBlue",
    "LightBrown",
    "LightCyan",
    "Lighter",
    "LightGray",
    "LightGreen",
    "Lighting",
    "LightingAngle",
    "LightMagenta",
    "LightOrange",
    "LightPink",
    "LightPurple",
    "LightRed",
    "LightSources",
    "LightYellow",
    "Likelihood",
    "Limit",
    "LimitsPositioning",
    "LimitsPositioningTokens",
    "LindleyDistribution",
    "Line",
    "Line3DBox",
    "Line3DBoxOptions",
    "LinearFilter",
    "LinearFractionalOptimization",
    "LinearFractionalTransform",
    "LinearGradientFilling",
    "LinearGradientImage",
    "LinearizingTransformationData",
    "LinearLayer",
    "LinearModelFit",
    "LinearOffsetFunction",
    "LinearOptimization",
    "LinearProgramming",
    "LinearRecurrence",
    "LinearSolve",
    "LinearSolveFunction",
    "LineBox",
    "LineBoxOptions",
    "LineBreak",
    "LinebreakAdjustments",
    "LineBreakChart",
    "LinebreakSemicolonWeighting",
    "LineBreakWithin",
    "LineColor",
    "LineGraph",
    "LineIndent",
    "LineIndentMaxFraction",
    "LineIntegralConvolutionPlot",
    "LineIntegralConvolutionScale",
    "LineLegend",
    "LineOpacity",
    "LineSpacing",
    "LineWrapParts",
    "LinkActivate",
    "LinkClose",
    "LinkConnect",
    "LinkConnectedQ",
    "LinkCreate",
    "LinkError",
    "LinkFlush",
    "LinkFunction",
    "LinkHost",
    "LinkInterrupt",
    "LinkLaunch",
    "LinkMode",
    "LinkObject",
    "LinkOpen",
    "LinkOptions",
    "LinkPatterns",
    "LinkProtocol",
    "LinkRankCentrality",
    "LinkRead",
    "LinkReadHeld",
    "LinkReadyQ",
    "Links",
    "LinkService",
    "LinkWrite",
    "LinkWriteHeld",
    "LiouvilleLambda",
    "List",
    "Listable",
    "ListAnimate",
    "ListContourPlot",
    "ListContourPlot3D",
    "ListConvolve",
    "ListCorrelate",
    "ListCurvePathPlot",
    "ListDeconvolve",
    "ListDensityPlot",
    "ListDensityPlot3D",
    "Listen",
    "ListFormat",
    "ListFourierSequenceTransform",
    "ListInterpolation",
    "ListLineIntegralConvolutionPlot",
    "ListLinePlot",
    "ListLinePlot3D",
    "ListLogLinearPlot",
    "ListLogLogPlot",
    "ListLogPlot",
    "ListPicker",
    "ListPickerBox",
    "ListPickerBoxBackground",
    "ListPickerBoxOptions",
    "ListPlay",
    "ListPlot",
    "ListPlot3D",
    "ListPointPlot3D",
    "ListPolarPlot",
    "ListQ",
    "ListSliceContourPlot3D",
    "ListSliceDensityPlot3D",
    "ListSliceVectorPlot3D",
    "ListStepPlot",
    "ListStreamDensityPlot",
    "ListStreamPlot",
    "ListStreamPlot3D",
    "ListSurfacePlot3D",
    "ListVectorDensityPlot",
    "ListVectorDisplacementPlot",
    "ListVectorDisplacementPlot3D",
    "ListVectorPlot",
    "ListVectorPlot3D",
    "ListZTransform",
    "Literal",
    "LiteralSearch",
    "LiteralType",
    "LoadCompiledComponent",
    "LocalAdaptiveBinarize",
    "LocalCache",
    "LocalClusteringCoefficient",
    "LocalEvaluate",
    "LocalizeDefinitions",
    "LocalizeVariables",
    "LocalObject",
    "LocalObjects",
    "LocalResponseNormalizationLayer",
    "LocalSubmit",
    "LocalSymbol",
    "LocalTime",
    "LocalTimeZone",
    "LocationEquivalenceTest",
    "LocationTest",
    "Locator",
    "LocatorAutoCreate",
    "LocatorBox",
    "LocatorBoxOptions",
    "LocatorCentering",
    "LocatorPane",
    "LocatorPaneBox",
    "LocatorPaneBoxOptions",
    "LocatorRegion",
    "Locked",
    "Log",
    "Log10",
    "Log2",
    "LogBarnesG",
    "LogGamma",
    "LogGammaDistribution",
    "LogicalExpand",
    "LogIntegral",
    "LogisticDistribution",
    "LogisticSigmoid",
    "LogitModelFit",
    "LogLikelihood",
    "LogLinearPlot",
    "LogLogisticDistribution",
    "LogLogPlot",
    "LogMultinormalDistribution",
    "LogNormalDistribution",
    "LogPlot",
    "LogRankTest",
    "LogSeriesDistribution",
    "LongEqual",
    "Longest",
    "LongestCommonSequence",
    "LongestCommonSequencePositions",
    "LongestCommonSubsequence",
    "LongestCommonSubsequencePositions",
    "LongestMatch",
    "LongestOrderedSequence",
    "LongForm",
    "Longitude",
    "LongLeftArrow",
    "LongLeftRightArrow",
    "LongRightArrow",
    "LongShortTermMemoryLayer",
    "Lookup",
    "Loopback",
    "LoopFreeGraphQ",
    "Looping",
    "LossFunction",
    "LowerCaseQ",
    "LowerLeftArrow",
    "LowerRightArrow",
    "LowerTriangularize",
    "LowerTriangularMatrix",
    "LowerTriangularMatrixQ",
    "LowpassFilter",
    "LQEstimatorGains",
    "LQGRegulator",
    "LQOutputRegulatorGains",
    "LQRegulatorGains",
    "LUBackSubstitution",
    "LucasL",
    "LuccioSamiComponents",
    "LUDecomposition",
    "LunarEclipse",
    "LUVColor",
    "LyapunovSolve",
    "LyonsGroupLy",
    "MachineID",
    "MachineName",
    "MachineNumberQ",
    "MachinePrecision",
    "MacintoshSystemPageSetup",
    "Magenta",
    "Magnification",
    "Magnify",
    "MailAddressValidation",
    "MailExecute",
    "MailFolder",
    "MailItem",
    "MailReceiverFunction",
    "MailResponseFunction",
    "MailSearch",
    "MailServerConnect",
    "MailServerConnection",
    "MailSettings",
    "MainSolve",
    "MaintainDynamicCaches",
    "Majority",
    "MakeBoxes",
    "MakeExpression",
    "MakeRules",
    "ManagedLibraryExpressionID",
    "ManagedLibraryExpressionQ",
    "MandelbrotSetBoettcher",
    "MandelbrotSetDistance",
    "MandelbrotSetIterationCount",
    "MandelbrotSetMemberQ",
    "MandelbrotSetPlot",
    "MangoldtLambda",
    "ManhattanDistance",
    "Manipulate",
    "Manipulator",
    "MannedSpaceMissionData",
    "MannWhitneyTest",
    "MantissaExponent",
    "Manual",
    "Map",
    "MapAll",
    "MapApply",
    "MapAt",
    "MapIndexed",
    "MAProcess",
    "MapThread",
    "MarchenkoPasturDistribution",
    "MarcumQ",
    "MardiaCombinedTest",
    "MardiaKurtosisTest",
    "MardiaSkewnessTest",
    "MarginalDistribution",
    "MarkovProcessProperties",
    "Masking",
    "MassConcentrationCondition",
    "MassFluxValue",
    "MassImpermeableBoundaryValue",
    "MassOutflowValue",
    "MassSymmetryValue",
    "MassTransferValue",
    "MassTransportPDEComponent",
    "MatchingDissimilarity",
    "MatchLocalNameQ",
    "MatchLocalNames",
    "MatchQ",
    "Material",
    "MaterialShading",
    "MaternPointProcess",
    "MathematicalFunctionData",
    "MathematicaNotation",
    "MathieuC",
    "MathieuCharacteristicA",
    "MathieuCharacteristicB",
    "MathieuCharacteristicExponent",
    "MathieuCPrime",
    "MathieuGroupM11",
    "MathieuGroupM12",
    "MathieuGroupM22",
    "MathieuGroupM23",
    "MathieuGroupM24",
    "MathieuS",
    "MathieuSPrime",
    "MathMLForm",
    "MathMLText",
    "Matrices",
    "MatrixExp",
    "MatrixForm",
    "MatrixFunction",
    "MatrixLog",
    "MatrixNormalDistribution",
    "MatrixPlot",
    "MatrixPower",
    "MatrixPropertyDistribution",
    "MatrixQ",
    "MatrixRank",
    "MatrixTDistribution",
    "Max",
    "MaxBend",
    "MaxCellMeasure",
    "MaxColorDistance",
    "MaxDate",
    "MaxDetect",
    "MaxDisplayedChildren",
    "MaxDuration",
    "MaxExtraBandwidths",
    "MaxExtraConditions",
    "MaxFeatureDisplacement",
    "MaxFeatures",
    "MaxFilter",
    "MaximalBy",
    "Maximize",
    "MaxItems",
    "MaxIterations",
    "MaxLimit",
    "MaxMemoryUsed",
    "MaxMixtureKernels",
    "MaxOverlapFraction",
    "MaxPlotPoints",
    "MaxPoints",
    "MaxRecursion",
    "MaxStableDistribution",
    "MaxStepFraction",
    "MaxSteps",
    "MaxStepSize",
    "MaxTrainingRounds",
    "MaxValue",
    "MaxwellDistribution",
    "MaxWordGap",
    "McLaughlinGroupMcL",
    "Mean",
    "MeanAbsoluteLossLayer",
    "MeanAround",
    "MeanClusteringCoefficient",
    "MeanDegreeConnectivity",
    "MeanDeviation",
    "MeanFilter",
    "MeanGraphDistance",
    "MeanNeighborDegree",
    "MeanPointDensity",
    "MeanShift",
    "MeanShiftFilter",
    "MeanSquaredLossLayer",
    "Median",
    "MedianDeviation",
    "MedianFilter",
    "MedicalTestData",
    "Medium",
    "MeijerG",
    "MeijerGReduce",
    "MeixnerDistribution",
    "MellinConvolve",
    "MellinTransform",
    "MemberQ",
    "MemoryAvailable",
    "MemoryConstrained",
    "MemoryConstraint",
    "MemoryInUse",
    "MengerMesh",
    "Menu",
    "MenuAppearance",
    "MenuCommandKey",
    "MenuEvaluator",
    "MenuItem",
    "MenuList",
    "MenuPacket",
    "MenuSortingValue",
    "MenuStyle",
    "MenuView",
    "Merge",
    "MergeDifferences",
    "MergingFunction",
    "MersennePrimeExponent",
    "MersennePrimeExponentQ",
    "Mesh",
    "MeshCellCentroid",
    "MeshCellCount",
    "MeshCellHighlight",
    "MeshCellIndex",
    "MeshCellLabel",
    "MeshCellMarker",
    "MeshCellMeasure",
    "MeshCellQuality",
    "MeshCells",
    "MeshCellShapeFunction",
    "MeshCellStyle",
    "MeshConnectivityGraph",
    "MeshCoordinates",
    "MeshFunctions",
    "MeshPrimitives",
    "MeshQualityGoal",
    "MeshRange",
    "MeshRefinementFunction",
    "MeshRegion",
    "MeshRegionQ",
    "MeshShading",
    "MeshStyle",
    "Message",
    "MessageDialog",
    "MessageList",
    "MessageName",
    "MessageObject",
    "MessageOptions",
    "MessagePacket",
    "Messages",
    "MessagesNotebook",
    "MetaCharacters",
    "MetaInformation",
    "MeteorShowerData",
    "Method",
    "MethodOptions",
    "MexicanHatWavelet",
    "MeyerWavelet",
    "Midpoint",
    "MIMETypeToFormatList",
    "Min",
    "MinColorDistance",
    "MinDate",
    "MinDetect",
    "MineralData",
    "MinFilter",
    "MinimalBy",
    "MinimalPolynomial",
    "MinimalStateSpaceModel",
    "Minimize",
    "MinimumTimeIncrement",
    "MinIntervalSize",
    "MinkowskiQuestionMark",
    "MinLimit",
    "MinMax",
    "MinorPlanetData",
    "Minors",
    "MinPointSeparation",
    "MinRecursion",
    "MinSize",
    "MinStableDistribution",
    "Minus",
    "MinusPlus",
    "MinValue",
    "Missing",
    "MissingBehavior",
    "MissingDataMethod",
    "MissingDataRules",
    "MissingQ",
    "MissingString",
    "MissingStyle",
    "MissingValuePattern",
    "MissingValueSynthesis",
    "MittagLefflerE",
    "MixedFractionParts",
    "MixedGraphQ",
    "MixedMagnitude",
    "MixedRadix",
    "MixedRadixQuantity",
    "MixedUnit",
    "MixtureDistribution",
    "Mod",
    "Modal",
    "Mode",
    "ModelPredictiveController",
    "Modular",
    "ModularInverse",
    "ModularLambda",
    "Module",
    "Modulus",
    "MoebiusMu",
    "Molecule",
    "MoleculeAlign",
    "MoleculeContainsQ",
    "MoleculeDraw",
    "MoleculeEquivalentQ",
    "MoleculeFreeQ",
    "MoleculeGraph",
    "MoleculeMatchQ",
    "MoleculeMaximumCommonSubstructure",
    "MoleculeModify",
    "MoleculeName",
    "MoleculePattern",
    "MoleculePlot",
    "MoleculePlot3D",
    "MoleculeProperty",
    "MoleculeQ",
    "MoleculeRecognize",
    "MoleculeSubstructureCount",
    "MoleculeValue",
    "Moment",
    "MomentConvert",
    "MomentEvaluate",
    "MomentGeneratingFunction",
    "MomentOfInertia",
    "Monday",
    "Monitor",
    "MonomialList",
    "MonomialOrder",
    "MonsterGroupM",
    "MoonPhase",
    "MoonPosition",
    "MorletWavelet",
    "MorphologicalBinarize",
    "MorphologicalBranchPoints",
    "MorphologicalComponents",
    "MorphologicalEulerNumber",
    "MorphologicalGraph",
    "MorphologicalPerimeter",
    "MorphologicalTransform",
    "MortalityData",
    "Most",
    "MountainData",
    "MouseAnnotation",
    "MouseAppearance",
    "MouseAppearanceTag",
    "MouseButtons",
    "Mouseover",
    "MousePointerNote",
    "MousePosition",
    "MovieData",
    "MovingAverage",
    "MovingMap",
    "MovingMedian",
    "MoyalDistribution",
    "MultiaxisArrangement",
    "Multicolumn",
    "MultiedgeStyle",
    "MultigraphQ",
    "MultilaunchWarning",
    "MultiLetterItalics",
    "MultiLetterStyle",
    "MultilineFunction",
    "Multinomial",
    "MultinomialDistribution",
    "MultinormalDistribution",
    "MultiplicativeOrder",
    "Multiplicity",
    "MultiplySides",
    "MultiscriptBoxOptions",
    "Multiselection",
    "MultivariateHypergeometricDistribution",
    "MultivariatePoissonDistribution",
    "MultivariateTDistribution",
    "N",
    "NakagamiDistribution",
    "NameQ",
    "Names",
    "NamespaceBox",
    "NamespaceBoxOptions",
    "Nand",
    "NArgMax",
    "NArgMin",
    "NBernoulliB",
    "NBodySimulation",
    "NBodySimulationData",
    "NCache",
    "NCaputoD",
    "NDEigensystem",
    "NDEigenvalues",
    "NDSolve",
    "NDSolveValue",
    "Nearest",
    "NearestFunction",
    "NearestMeshCells",
    "NearestNeighborG",
    "NearestNeighborGraph",
    "NearestTo",
    "NebulaData",
    "NeedlemanWunschSimilarity",
    "Needs",
    "Negative",
    "NegativeBinomialDistribution",
    "NegativeDefiniteMatrixQ",
    "NegativeIntegers",
    "NegativelyOrientedPoints",
    "NegativeMultinomialDistribution",
    "NegativeRationals",
    "NegativeReals",
    "NegativeSemidefiniteMatrixQ",
    "NeighborhoodData",
    "NeighborhoodGraph",
    "Nest",
    "NestedGreaterGreater",
    "NestedLessLess",
    "NestedScriptRules",
    "NestGraph",
    "NestList",
    "NestTree",
    "NestWhile",
    "NestWhileList",
    "NetAppend",
    "NetArray",
    "NetArrayLayer",
    "NetBidirectionalOperator",
    "NetChain",
    "NetDecoder",
    "NetDelete",
    "NetDrop",
    "NetEncoder",
    "NetEvaluationMode",
    "NetExternalObject",
    "NetExtract",
    "NetFlatten",
    "NetFoldOperator",
    "NetGANOperator",
    "NetGraph",
    "NetInformation",
    "NetInitialize",
    "NetInsert",
    "NetInsertSharedArrays",
    "NetJoin",
    "NetMapOperator",
    "NetMapThreadOperator",
    "NetMeasurements",
    "NetModel",
    "NetNestOperator",
    "NetPairEmbeddingOperator",
    "NetPort",
    "NetPortGradient",
    "NetPrepend",
    "NetRename",
    "NetReplace",
    "NetReplacePart",
    "NetSharedArray",
    "NetStateObject",
    "NetTake",
    "NetTrain",
    "NetTrainResultsObject",
    "NetUnfold",
    "NetworkPacketCapture",
    "NetworkPacketRecording",
    "NetworkPacketRecordingDuring",
    "NetworkPacketTrace",
    "NeumannValue",
    "NevilleThetaC",
    "NevilleThetaD",
    "NevilleThetaN",
    "NevilleThetaS",
    "NewPrimitiveStyle",
    "NExpectation",
    "Next",
    "NextCell",
    "NextDate",
    "NextPrime",
    "NextScheduledTaskTime",
    "NeymanScottPointProcess",
    "NFractionalD",
    "NHoldAll",
    "NHoldFirst",
    "NHoldRest",
    "NicholsGridLines",
    "NicholsPlot",
    "NightHemisphere",
    "NIntegrate",
    "NMaximize",
    "NMaxValue",
    "NMinimize",
    "NMinValue",
    "NominalScale",
    "NominalVariables",
    "NonAssociative",
    "NoncentralBetaDistribution",
    "NoncentralChiSquareDistribution",
    "NoncentralFRatioDistribution",
    "NoncentralStudentTDistribution",
    "NonCommutativeMultiply",
    "NonConstants",
    "NondimensionalizationTransform",
    "None",
    "NoneTrue",
    "NonlinearModelFit",
    "NonlinearStateSpaceModel",
    "NonlocalMeansFilter",
    "NonNegative",
    "NonNegativeIntegers",
    "NonNegativeRationals",
    "NonNegativeReals",
    "NonPositive",
    "NonPositiveIntegers",
    "NonPositiveRationals",
    "NonPositiveReals",
    "Nor",
    "NorlundB",
    "Norm",
    "Normal",
    "NormalDistribution",
    "NormalGrouping",
    "NormalizationLayer",
    "Normalize",
    "Normalized",
    "NormalizedSquaredEuclideanDistance",
    "NormalMatrixQ",
    "NormalsFunction",
    "NormFunction",
    "Not",
    "NotCongruent",
    "NotCupCap",
    "NotDoubleVerticalBar",
    "Notebook",
    "NotebookApply",
    "NotebookAutoSave",
    "NotebookBrowseDirectory",
    "NotebookClose",
    "NotebookConvertSettings",
    "NotebookCreate",
    "NotebookDefault",
    "NotebookDelete",
    "NotebookDirectory",
    "NotebookDynamicExpression",
    "NotebookEvaluate",
    "NotebookEventActions",
    "NotebookFileName",
    "NotebookFind",
    "NotebookGet",
    "NotebookImport",
    "NotebookInformation",
    "NotebookInterfaceObject",
    "NotebookLocate",
    "NotebookObject",
    "NotebookOpen",
    "NotebookPath",
    "NotebookPrint",
    "NotebookPut",
    "NotebookRead",
    "Notebooks",
    "NotebookSave",
    "NotebookSelection",
    "NotebooksMenu",
    "NotebookTemplate",
    "NotebookWrite",
    "NotElement",
    "NotEqualTilde",
    "NotExists",
    "NotGreater",
    "NotGreaterEqual",
    "NotGreaterFullEqual",
    "NotGreaterGreater",
    "NotGreaterLess",
    "NotGreaterSlantEqual",
    "NotGreaterTilde",
    "Nothing",
    "NotHumpDownHump",
    "NotHumpEqual",
    "NotificationFunction",
    "NotLeftTriangle",
    "NotLeftTriangleBar",
    "NotLeftTriangleEqual",
    "NotLess",
    "NotLessEqual",
    "NotLessFullEqual",
    "NotLessGreater",
    "NotLessLess",
    "NotLessSlantEqual",
    "NotLessTilde",
    "NotNestedGreaterGreater",
    "NotNestedLessLess",
    "NotPrecedes",
    "NotPrecedesEqual",
    "NotPrecedesSlantEqual",
    "NotPrecedesTilde",
    "NotReverseElement",
    "NotRightTriangle",
    "NotRightTriangleBar",
    "NotRightTriangleEqual",
    "NotSquareSubset",
    "NotSquareSubsetEqual",
    "NotSquareSuperset",
    "NotSquareSupersetEqual",
    "NotSubset",
    "NotSubsetEqual",
    "NotSucceeds",
    "NotSucceedsEqual",
    "NotSucceedsSlantEqual",
    "NotSucceedsTilde",
    "NotSuperset",
    "NotSupersetEqual",
    "NotTilde",
    "NotTildeEqual",
    "NotTildeFullEqual",
    "NotTildeTilde",
    "NotVerticalBar",
    "Now",
    "NoWhitespace",
    "NProbability",
    "NProduct",
    "NProductFactors",
    "NRoots",
    "NSolve",
    "NSolveValues",
    "NSum",
    "NSumTerms",
    "NuclearExplosionData",
    "NuclearReactorData",
    "Null",
    "NullRecords",
    "NullSpace",
    "NullWords",
    "Number",
    "NumberCompose",
    "NumberDecompose",
    "NumberDigit",
    "NumberExpand",
    "NumberFieldClassNumber",
    "NumberFieldDiscriminant",
    "NumberFieldFundamentalUnits",
    "NumberFieldIntegralBasis",
    "NumberFieldNormRepresentatives",
    "NumberFieldRegulator",
    "NumberFieldRootsOfUnity",
    "NumberFieldSignature",
    "NumberForm",
    "NumberFormat",
    "NumberLinePlot",
    "NumberMarks",
    "NumberMultiplier",
    "NumberPadding",
    "NumberPoint",
    "NumberQ",
    "NumberSeparator",
    "NumberSigns",
    "NumberString",
    "Numerator",
    "NumeratorDenominator",
    "NumericalOrder",
    "NumericalSort",
    "NumericArray",
    "NumericArrayQ",
    "NumericArrayType",
    "NumericFunction",
    "NumericQ",
    "NuttallWindow",
    "NValues",
    "NyquistGridLines",
    "NyquistPlot",
    "O",
    "ObjectExistsQ",
    "ObservabilityGramian",
    "ObservabilityMatrix",
    "ObservableDecomposition",
    "ObservableModelQ",
    "OceanData",
    "Octahedron",
    "OddQ",
    "Off",
    "Offset",
    "OLEData",
    "On",
    "ONanGroupON",
    "Once",
    "OneIdentity",
    "Opacity",
    "OpacityFunction",
    "OpacityFunctionScaling",
    "Open",
    "OpenAppend",
    "Opener",
    "OpenerBox",
    "OpenerBoxOptions",
    "OpenerView",
    "OpenFunctionInspectorPacket",
    "Opening",
    "OpenRead",
    "OpenSpecialOptions",
    "OpenTemporary",
    "OpenWrite",
    "Operate",
    "OperatingSystem",
    "OperatorApplied",
    "OptimumFlowData",
    "Optional",
    "OptionalElement",
    "OptionInspectorSettings",
    "OptionQ",
    "Options",
    "OptionsPacket",
    "OptionsPattern",
    "OptionValue",
    "OptionValueBox",
    "OptionValueBoxOptions",
    "Or",
    "Orange",
    "Order",
    "OrderDistribution",
    "OrderedQ",
    "Ordering",
    "OrderingBy",
    "OrderingLayer",
    "Orderless",
    "OrderlessPatternSequence",
    "OrdinalScale",
    "OrnsteinUhlenbeckProcess",
    "Orthogonalize",
    "OrthogonalMatrixQ",
    "Out",
    "Outer",
    "OuterPolygon",
    "OuterPolyhedron",
    "OutputAutoOverwrite",
    "OutputControllabilityMatrix",
    "OutputControllableModelQ",
    "OutputForm",
    "OutputFormData",
    "OutputGrouping",
    "OutputMathEditExpression",
    "OutputNamePacket",
    "OutputPorts",
    "OutputResponse",
    "OutputSizeLimit",
    "OutputStream",
    "Over",
    "OverBar",
    "OverDot",
    "Overflow",
    "OverHat",
    "Overlaps",
    "Overlay",
    "OverlayBox",
    "OverlayBoxOptions",
    "OverlayVideo",
    "Overscript",
    "OverscriptBox",
    "OverscriptBoxOptions",
    "OverTilde",
    "OverVector",
    "OverwriteTarget",
    "OwenT",
    "OwnValues",
    "Package",
    "PackingMethod",
    "PackPaclet",
    "PacletDataRebuild",
    "PacletDirectoryAdd",
    "PacletDirectoryLoad",
    "PacletDirectoryRemove",
    "PacletDirectoryUnload",
    "PacletDisable",
    "PacletEnable",
    "PacletFind",
    "PacletFindRemote",
    "PacletInformation",
    "PacletInstall",
    "PacletInstallSubmit",
    "PacletNewerQ",
    "PacletObject",
    "PacletObjectQ",
    "PacletSite",
    "PacletSiteObject",
    "PacletSiteRegister",
    "PacletSites",
    "PacletSiteUnregister",
    "PacletSiteUpdate",
    "PacletSymbol",
    "PacletUninstall",
    "PacletUpdate",
    "PaddedForm",
    "Padding",
    "PaddingLayer",
    "PaddingSize",
    "PadeApproximant",
    "PadLeft",
    "PadRight",
    "PageBreakAbove",
    "PageBreakBelow",
    "PageBreakWithin",
    "PageFooterLines",
    "PageFooters",
    "PageHeaderLines",
    "PageHeaders",
    "PageHeight",
    "PageRankCentrality",
    "PageTheme",
    "PageWidth",
    "Pagination",
    "PairCorrelationG",
    "PairedBarChart",
    "PairedHistogram",
    "PairedSmoothHistogram",
    "PairedTTest",
    "PairedZTest",
    "PaletteNotebook",
    "PalettePath",
    "PalettesMenuSettings",
    "PalindromeQ",
    "Pane",
    "PaneBox",
    "PaneBoxOptions",
    "Panel",
    "PanelBox",
    "PanelBoxOptions",
    "Paneled",
    "PaneSelector",
    "PaneSelectorBox",
    "PaneSelectorBoxOptions",
    "PaperWidth",
    "ParabolicCylinderD",
    "ParagraphIndent",
    "ParagraphSpacing",
    "ParallelArray",
    "ParallelAxisPlot",
    "ParallelCombine",
    "ParallelDo",
    "Parallelepiped",
    "ParallelEvaluate",
    "Parallelization",
    "Parallelize",
    "ParallelKernels",
    "ParallelMap",
    "ParallelNeeds",
    "Parallelogram",
    "ParallelProduct",
    "ParallelSubmit",
    "ParallelSum",
    "ParallelTable",
    "ParallelTry",
    "Parameter",
    "ParameterEstimator",
    "ParameterMixtureDistribution",
    "ParameterVariables",
    "ParametricConvexOptimization",
    "ParametricFunction",
    "ParametricNDSolve",
    "ParametricNDSolveValue",
    "ParametricPlot",
    "ParametricPlot3D",
    "ParametricRampLayer",
    "ParametricRegion",
    "ParentBox",
    "ParentCell",
    "ParentConnect",
    "ParentDirectory",
    "ParentEdgeLabel",
    "ParentEdgeLabelFunction",
    "ParentEdgeLabelStyle",
    "ParentEdgeShapeFunction",
    "ParentEdgeStyle",
    "ParentEdgeStyleFunction",
    "ParentForm",
    "Parenthesize",
    "ParentList",
    "ParentNotebook",
    "ParetoDistribution",
    "ParetoPickandsDistribution",
    "ParkData",
    "Part",
    "PartBehavior",
    "PartialCorrelationFunction",
    "PartialD",
    "ParticleAcceleratorData",
    "ParticleData",
    "Partition",
    "PartitionGranularity",
    "PartitionsP",
    "PartitionsQ",
    "PartLayer",
    "PartOfSpeech",
    "PartProtection",
    "ParzenWindow",
    "PascalDistribution",
    "PassEventsDown",
    "PassEventsUp",
    "Paste",
    "PasteAutoQuoteCharacters",
    "PasteBoxFormInlineCells",
    "PasteButton",
    "Path",
    "PathGraph",
    "PathGraphQ",
    "Pattern",
    "PatternFilling",
    "PatternReaction",
    "PatternSequence",
    "PatternTest",
    "PauliMatrix",
    "PaulWavelet",
    "Pause",
    "PausedTime",
    "PDF",
    "PeakDetect",
    "PeanoCurve",
    "PearsonChiSquareTest",
    "PearsonCorrelationTest",
    "PearsonDistribution",
    "PenttinenPointProcess",
    "PercentForm",
    "PerfectNumber",
    "PerfectNumberQ",
    "PerformanceGoal",
    "Perimeter",
    "PeriodicBoundaryCondition",
    "PeriodicInterpolation",
    "Periodogram",
    "PeriodogramArray",
    "Permanent",
    "Permissions",
    "PermissionsGroup",
    "PermissionsGroupMemberQ",
    "PermissionsGroups",
    "PermissionsKey",
    "PermissionsKeys",
    "PermutationCycles",
    "PermutationCyclesQ",
    "PermutationGroup",
    "PermutationLength",
    "PermutationList",
    "PermutationListQ",
    "PermutationMatrix",
    "PermutationMax",
    "PermutationMin",
    "PermutationOrder",
    "PermutationPower",
    "PermutationProduct",
    "PermutationReplace",
    "Permutations",
    "PermutationSupport",
    "Permute",
    "PeronaMalikFilter",
    "Perpendicular",
    "PerpendicularBisector",
    "PersistenceLocation",
    "PersistenceTime",
    "PersistentObject",
    "PersistentObjects",
    "PersistentSymbol",
    "PersistentValue",
    "PersonData",
    "PERTDistribution",
    "PetersenGraph",
    "PhaseMargins",
    "PhaseRange",
    "PhongShading",
    "PhysicalSystemData",
    "Pi",
    "Pick",
    "PickedElements",
    "PickMode",
    "PIDData",
    "PIDDerivativeFilter",
    "PIDFeedforward",
    "PIDTune",
    "Piecewise",
    "PiecewiseExpand",
    "PieChart",
    "PieChart3D",
    "PillaiTrace",
    "PillaiTraceTest",
    "PingTime",
    "Pink",
    "PitchRecognize",
    "Pivoting",
    "PixelConstrained",
    "PixelValue",
    "PixelValuePositions",
    "Placed",
    "Placeholder",
    "PlaceholderLayer",
    "PlaceholderReplace",
    "Plain",
    "PlanarAngle",
    "PlanarFaceList",
    "PlanarGraph",
    "PlanarGraphQ",
    "PlanckRadiationLaw",
    "PlaneCurveData",
    "PlanetaryMoonData",
    "PlanetData",
    "PlantData",
    "Play",
    "PlaybackSettings",
    "PlayRange",
    "Plot",
    "Plot3D",
    "Plot3Matrix",
    "PlotDivision",
    "PlotJoined",
    "PlotLabel",
    "PlotLabels",
    "PlotLayout",
    "PlotLegends",
    "PlotMarkers",
    "PlotPoints",
    "PlotRange",
    "PlotRangeClipping",
    "PlotRangeClipPlanesStyle",
    "PlotRangePadding",
    "PlotRegion",
    "PlotStyle",
    "PlotTheme",
    "Pluralize",
    "Plus",
    "PlusMinus",
    "Pochhammer",
    "PodStates",
    "PodWidth",
    "Point",
    "Point3DBox",
    "Point3DBoxOptions",
    "PointBox",
    "PointBoxOptions",
    "PointCountDistribution",
    "PointDensity",
    "PointDensityFunction",
    "PointFigureChart",
    "PointLegend",
    "PointLight",
    "PointProcessEstimator",
    "PointProcessFitTest",
    "PointProcessParameterAssumptions",
    "PointProcessParameterQ",
    "PointSize",
    "PointStatisticFunction",
    "PointValuePlot",
    "PoissonConsulDistribution",
    "PoissonDistribution",
    "PoissonPDEComponent",
    "PoissonPointProcess",
    "PoissonProcess",
    "PoissonWindow",
    "PolarAxes",
    "PolarAxesOrigin",
    "PolarGridLines",
    "PolarPlot",
    "PolarTicks",
    "PoleZeroMarkers",
    "PolyaAeppliDistribution",
    "PolyGamma",
    "Polygon",
    "Polygon3DBox",
    "Polygon3DBoxOptions",
    "PolygonalNumber",
    "PolygonAngle",
    "PolygonBox",
    "PolygonBoxOptions",
    "PolygonCoordinates",
    "PolygonDecomposition",
    "PolygonHoleScale",
    "PolygonIntersections",
    "PolygonScale",
    "Polyhedron",
    "PolyhedronAngle",
    "PolyhedronBox",
    "PolyhedronBoxOptions",
    "PolyhedronCoordinates",
    "PolyhedronData",
    "PolyhedronDecomposition",
    "PolyhedronGenus",
    "PolyLog",
    "PolynomialExpressionQ",
    "PolynomialExtendedGCD",
    "PolynomialForm",
    "PolynomialGCD",
    "PolynomialLCM",
    "PolynomialMod",
    "PolynomialQ",
    "PolynomialQuotient",
    "PolynomialQuotientRemainder",
    "PolynomialReduce",
    "PolynomialRemainder",
    "Polynomials",
    "PolynomialSumOfSquaresList",
    "PoolingLayer",
    "PopupMenu",
    "PopupMenuBox",
    "PopupMenuBoxOptions",
    "PopupView",
    "PopupWindow",
    "Position",
    "PositionIndex",
    "PositionLargest",
    "PositionSmallest",
    "Positive",
    "PositiveDefiniteMatrixQ",
    "PositiveIntegers",
    "PositivelyOrientedPoints",
    "PositiveRationals",
    "PositiveReals",
    "PositiveSemidefiniteMatrixQ",
    "PossibleZeroQ",
    "Postfix",
    "PostScript",
    "Power",
    "PowerDistribution",
    "PowerExpand",
    "PowerMod",
    "PowerModList",
    "PowerRange",
    "PowerSpectralDensity",
    "PowersRepresentations",
    "PowerSymmetricPolynomial",
    "Precedence",
    "PrecedenceForm",
    "Precedes",
    "PrecedesEqual",
    "PrecedesSlantEqual",
    "PrecedesTilde",
    "Precision",
    "PrecisionGoal",
    "PreDecrement",
    "Predict",
    "PredictionRoot",
    "PredictorFunction",
    "PredictorInformation",
    "PredictorMeasurements",
    "PredictorMeasurementsObject",
    "PreemptProtect",
    "PreferencesPath",
    "PreferencesSettings",
    "Prefix",
    "PreIncrement",
    "Prepend",
    "PrependLayer",
    "PrependTo",
    "PreprocessingRules",
    "PreserveColor",
    "PreserveImageOptions",
    "Previous",
    "PreviousCell",
    "PreviousDate",
    "PriceGraphDistribution",
    "PrimaryPlaceholder",
    "Prime",
    "PrimeNu",
    "PrimeOmega",
    "PrimePi",
    "PrimePowerQ",
    "PrimeQ",
    "Primes",
    "PrimeZetaP",
    "PrimitivePolynomialQ",
    "PrimitiveRoot",
    "PrimitiveRootList",
    "PrincipalComponents",
    "PrincipalValue",
    "Print",
    "PrintableASCIIQ",
    "PrintAction",
    "PrintForm",
    "PrintingCopies",
    "PrintingOptions",
    "PrintingPageRange",
    "PrintingStartingPageNumber",
    "PrintingStyleEnvironment",
    "Printout3D",
    "Printout3DPreviewer",
    "PrintPrecision",
    "PrintTemporary",
    "Prism",
    "PrismBox",
    "PrismBoxOptions",
    "PrivateCellOptions",
    "PrivateEvaluationOptions",
    "PrivateFontOptions",
    "PrivateFrontEndOptions",
    "PrivateKey",
    "PrivateNotebookOptions",
    "PrivatePaths",
    "Probability",
    "ProbabilityDistribution",
    "ProbabilityPlot",
    "ProbabilityPr",
    "ProbabilityScalePlot",
    "ProbitModelFit",
    "ProcessConnection",
    "ProcessDirectory",
    "ProcessEnvironment",
    "Processes",
    "ProcessEstimator",
    "ProcessInformation",
    "ProcessObject",
    "ProcessParameterAssumptions",
    "ProcessParameterQ",
    "ProcessStateDomain",
    "ProcessStatus",
    "ProcessTimeDomain",
    "Product",
    "ProductDistribution",
    "ProductLog",
    "ProgressIndicator",
    "ProgressIndicatorBox",
    "ProgressIndicatorBoxOptions",
    "ProgressReporting",
    "Projection",
    "Prolog",
    "PromptForm",
    "ProofObject",
    "PropagateAborts",
    "Properties",
    "Property",
    "PropertyList",
    "PropertyValue",
    "Proportion",
    "Proportional",
    "Protect",
    "Protected",
    "ProteinData",
    "Pruning",
    "PseudoInverse",
    "PsychrometricPropertyData",
    "PublicKey",
    "PublisherID",
    "PulsarData",
    "PunctuationCharacter",
    "Purple",
    "Put",
    "PutAppend",
    "Pyramid",
    "PyramidBox",
    "PyramidBoxOptions",
    "QBinomial",
    "QFactorial",
    "QGamma",
    "QHypergeometricPFQ",
    "QnDispersion",
    "QPochhammer",
    "QPolyGamma",
    "QRDecomposition",
    "QuadraticIrrationalQ",
    "QuadraticOptimization",
    "Quantile",
    "QuantilePlot",
    "Quantity",
    "QuantityArray",
    "QuantityDistribution",
    "QuantityForm",
    "QuantityMagnitude",
    "QuantityQ",
    "QuantityUnit",
    "QuantityVariable",
    "QuantityVariableCanonicalUnit",
    "QuantityVariableDimensions",
    "QuantityVariableIdentifier",
    "QuantityVariablePhysicalQuantity",
    "Quartics",
    "QuartileDeviation",
    "Quartiles",
    "QuartileSkewness",
    "Query",
    "QuestionGenerator",
    "QuestionInterface",
    "QuestionObject",
    "QuestionSelector",
    "QueueingNetworkProcess",
    "QueueingProcess",
    "QueueProperties",
    "Quiet",
    "QuietEcho",
    "Quit",
    "Quotient",
    "QuotientRemainder",
    "RadialAxisPlot",
    "RadialGradientFilling",
    "RadialGradientImage",
    "RadialityCentrality",
    "RadicalBox",
    "RadicalBoxOptions",
    "RadioButton",
    "RadioButtonBar",
    "RadioButtonBox",
    "RadioButtonBoxOptions",
    "Radon",
    "RadonTransform",
    "RamanujanTau",
    "RamanujanTauL",
    "RamanujanTauTheta",
    "RamanujanTauZ",
    "Ramp",
    "Random",
    "RandomArrayLayer",
    "RandomChoice",
    "RandomColor",
    "RandomComplex",
    "RandomDate",
    "RandomEntity",
    "RandomFunction",
    "RandomGeneratorState",
    "RandomGeoPosition",
    "RandomGraph",
    "RandomImage",
    "RandomInstance",
    "RandomInteger",
    "RandomPermutation",
    "RandomPoint",
    "RandomPointConfiguration",
    "RandomPolygon",
    "RandomPolyhedron",
    "RandomPrime",
    "RandomReal",
    "RandomSample",
    "RandomSeed",
    "RandomSeeding",
    "RandomTime",
    "RandomTree",
    "RandomVariate",
    "RandomWalkProcess",
    "RandomWord",
    "Range",
    "RangeFilter",
    "RangeSpecification",
    "RankedMax",
    "RankedMin",
    "RarerProbability",
    "Raster",
    "Raster3D",
    "Raster3DBox",
    "Raster3DBoxOptions",
    "RasterArray",
    "RasterBox",
    "RasterBoxOptions",
    "Rasterize",
    "RasterSize",
    "Rational",
    "RationalExpressionQ",
    "RationalFunctions",
    "Rationalize",
    "Rationals",
    "Ratios",
    "RawArray",
    "RawBoxes",
    "RawData",
    "RawMedium",
    "RayleighDistribution",
    "Re",
    "ReactionBalance",
    "ReactionBalancedQ",
    "ReactionPDETerm",
    "Read",
    "ReadByteArray",
    "ReadLine",
    "ReadList",
    "ReadProtected",
    "ReadString",
    "Real",
    "RealAbs",
    "RealBlockDiagonalForm",
    "RealDigits",
    "RealExponent",
    "Reals",
    "RealSign",
    "Reap",
    "RebuildPacletData",
    "RecalibrationFunction",
    "RecognitionPrior",
    "RecognitionThreshold",
    "ReconstructionMesh",
    "Record",
    "RecordLists",
    "RecordSeparators",
    "Rectangle",
    "RectangleBox",
    "RectangleBoxOptions",
    "RectangleChart",
    "RectangleChart3D",
    "RectangularRepeatingElement",
    "RecurrenceFilter",
    "RecurrenceTable",
    "RecurringDigitsForm",
    "Red",
    "Reduce",
    "RefBox",
    "ReferenceLineStyle",
    "ReferenceMarkers",
    "ReferenceMarkerStyle",
    "Refine",
    "ReflectionMatrix",
    "ReflectionTransform",
    "Refresh",
    "RefreshRate",
    "Region",
    "RegionBinarize",
    "RegionBoundary",
    "RegionBoundaryStyle",
    "RegionBounds",
    "RegionCentroid",
    "RegionCongruent",
    "RegionConvert",
    "RegionDifference",
    "RegionDilation",
    "RegionDimension",
    "RegionDisjoint",
    "RegionDistance",
    "RegionDistanceFunction",
    "RegionEmbeddingDimension",
    "RegionEqual",
    "RegionErosion",
    "RegionFillingStyle",
    "RegionFit",
    "RegionFunction",
    "RegionImage",
    "RegionIntersection",
    "RegionMeasure",
    "RegionMember",
    "RegionMemberFunction",
    "RegionMoment",
    "RegionNearest",
    "RegionNearestFunction",
    "RegionPlot",
    "RegionPlot3D",
    "RegionProduct",
    "RegionQ",
    "RegionResize",
    "RegionSimilar",
    "RegionSize",
    "RegionSymmetricDifference",
    "RegionUnion",
    "RegionWithin",
    "RegisterExternalEvaluator",
    "RegularExpression",
    "Regularization",
    "RegularlySampledQ",
    "RegularPolygon",
    "ReIm",
    "ReImLabels",
    "ReImPlot",
    "ReImStyle",
    "Reinstall",
    "RelationalDatabase",
    "RelationGraph",
    "Release",
    "ReleaseHold",
    "ReliabilityDistribution",
    "ReliefImage",
    "ReliefPlot",
    "RemoteAuthorizationCaching",
    "RemoteBatchJobAbort",
    "RemoteBatchJobObject",
    "RemoteBatchJobs",
    "RemoteBatchMapSubmit",
    "RemoteBatchSubmissionEnvironment",
    "RemoteBatchSubmit",
    "RemoteConnect",
    "RemoteConnectionObject",
    "RemoteEvaluate",
    "RemoteFile",
    "RemoteInputFiles",
    "RemoteKernelObject",
    "RemoteProviderSettings",
    "RemoteRun",
    "RemoteRunProcess",
    "RemovalConditions",
    "Remove",
    "RemoveAlphaChannel",
    "RemoveAsynchronousTask",
    "RemoveAudioStream",
    "RemoveBackground",
    "RemoveChannelListener",
    "RemoveChannelSubscribers",
    "Removed",
    "RemoveDiacritics",
    "RemoveInputStreamMethod",
    "RemoveOutputStreamMethod",
    "RemoveProperty",
    "RemoveScheduledTask",
    "RemoveUsers",
    "RemoveVideoStream",
    "RenameDirectory",
    "RenameFile",
    "RenderAll",
    "RenderingOptions",
    "RenewalProcess",
    "RenkoChart",
    "RepairMesh",
    "Repeated",
    "RepeatedNull",
    "RepeatedString",
    "RepeatedTiming",
    "RepeatingElement",
    "Replace",
    "ReplaceAll",
    "ReplaceAt",
    "ReplaceHeldPart",
    "ReplaceImageValue",
    "ReplaceList",
    "ReplacePart",
    "ReplacePixelValue",
    "ReplaceRepeated",
    "ReplicateLayer",
    "RequiredPhysicalQuantities",
    "Resampling",
    "ResamplingAlgorithmData",
    "ResamplingMethod",
    "Rescale",
    "RescalingTransform",
    "ResetDirectory",
    "ResetScheduledTask",
    "ReshapeLayer",
    "Residue",
    "ResidueSum",
    "ResizeLayer",
    "Resolve",
    "ResolveContextAliases",
    "ResourceAcquire",
    "ResourceData",
    "ResourceFunction",
    "ResourceObject",
    "ResourceRegister",
    "ResourceRemove",
    "ResourceSearch",
    "ResourceSubmissionObject",
    "ResourceSubmit",
    "ResourceSystemBase",
    "ResourceSystemPath",
    "ResourceUpdate",
    "ResourceVersion",
    "ResponseForm",
    "Rest",
    "RestartInterval",
    "Restricted",
    "Resultant",
    "ResumePacket",
    "Return",
    "ReturnCreatesNewCell",
    "ReturnEntersInput",
    "ReturnExpressionPacket",
    "ReturnInputFormPacket",
    "ReturnPacket",
    "ReturnReceiptFunction",
    "ReturnTextPacket",
    "Reverse",
    "ReverseApplied",
    "ReverseBiorthogonalSplineWavelet",
    "ReverseElement",
    "ReverseEquilibrium",
    "ReverseGraph",
    "ReverseSort",
    "ReverseSortBy",
    "ReverseUpEquilibrium",
    "RevolutionAxis",
    "RevolutionPlot3D",
    "RGBColor",
    "RiccatiSolve",
    "RiceDistribution",
    "RidgeFilter",
    "RiemannR",
    "RiemannSiegelTheta",
    "RiemannSiegelZ",
    "RiemannXi",
    "Riffle",
    "Right",
    "RightArrow",
    "RightArrowBar",
    "RightArrowLeftArrow",
    "RightComposition",
    "RightCosetRepresentative",
    "RightDownTeeVector",
    "RightDownVector",
    "RightDownVectorBar",
    "RightTee",
    "RightTeeArrow",
    "RightTeeVector",
    "RightTriangle",
    "RightTriangleBar",
    "RightTriangleEqual",
    "RightUpDownVector",
    "RightUpTeeVector",
    "RightUpVector",
    "RightUpVectorBar",
    "RightVector",
    "RightVectorBar",
    "RipleyK",
    "RipleyRassonRegion",
    "RiskAchievementImportance",
    "RiskReductionImportance",
    "RobustConvexOptimization",
    "RogersTanimotoDissimilarity",
    "RollPitchYawAngles",
    "RollPitchYawMatrix",
    "RomanNumeral",
    "Root",
    "RootApproximant",
    "RootIntervals",
    "RootLocusPlot",
    "RootMeanSquare",
    "RootOfUnityQ",
    "RootReduce",
    "Roots",
    "RootSum",
    "RootTree",
    "Rotate",
    "RotateLabel",
    "RotateLeft",
    "RotateRight",
    "RotationAction",
    "RotationBox",
    "RotationBoxOptions",
    "RotationMatrix",
    "RotationTransform",
    "Round",
    "RoundImplies",
    "RoundingRadius",
    "Row",
    "RowAlignments",
    "RowBackgrounds",
    "RowBox",
    "RowHeights",
    "RowLines",
    "RowMinHeight",
    "RowReduce",
    "RowsEqual",
    "RowSpacings",
    "RSolve",
    "RSolveValue",
    "RudinShapiro",
    "RudvalisGroupRu",
    "Rule",
    "RuleCondition",
    "RuleDelayed",
    "RuleForm",
    "RulePlot",
    "RulerUnits",
    "RulesTree",
    "Run",
    "RunProcess",
    "RunScheduledTask",
    "RunThrough",
    "RuntimeAttributes",
    "RuntimeOptions",
    "RussellRaoDissimilarity",
    "SameAs",
    "SameQ",
    "SameTest",
    "SameTestProperties",
    "SampledEntityClass",
    "SampleDepth",
    "SampledSoundFunction",
    "SampledSoundList",
    "SampleRate",
    "SamplingPeriod",
    "SARIMAProcess",
    "SARMAProcess",
    "SASTriangle",
    "SatelliteData",
    "SatisfiabilityCount",
    "SatisfiabilityInstances",
    "SatisfiableQ",
    "Saturday",
    "Save",
    "Saveable",
    "SaveAutoDelete",
    "SaveConnection",
    "SaveDefinitions",
    "SavitzkyGolayMatrix",
    "SawtoothWave",
    "Scale",
    "Scaled",
    "ScaleDivisions",
    "ScaledMousePosition",
    "ScaleOrigin",
    "ScalePadding",
    "ScaleRanges",
    "ScaleRangeStyle",
    "ScalingFunctions",
    "ScalingMatrix",
    "ScalingTransform",
    "Scan",
    "ScheduledTask",
    "ScheduledTaskActiveQ",
    "ScheduledTaskInformation",
    "ScheduledTaskInformationData",
    "ScheduledTaskObject",
    "ScheduledTasks",
    "SchurDecomposition",
    "ScientificForm",
    "ScientificNotationThreshold",
    "ScorerGi",
    "ScorerGiPrime",
    "ScorerHi",
    "ScorerHiPrime",
    "ScreenRectangle",
    "ScreenStyleEnvironment",
    "ScriptBaselineShifts",
    "ScriptForm",
    "ScriptLevel",
    "ScriptMinSize",
    "ScriptRules",
    "ScriptSizeMultipliers",
    "Scrollbars",
    "ScrollingOptions",
    "ScrollPosition",
    "SearchAdjustment",
    "SearchIndexObject",
    "SearchIndices",
    "SearchQueryString",
    "SearchResultObject",
    "Sec",
    "Sech",
    "SechDistribution",
    "SecondOrderConeOptimization",
    "SectionGrouping",
    "SectorChart",
    "SectorChart3D",
    "SectorOrigin",
    "SectorSpacing",
    "SecuredAuthenticationKey",
    "SecuredAuthenticationKeys",
    "SecurityCertificate",
    "SeedRandom",
    "Select",
    "Selectable",
    "SelectComponents",
    "SelectedCells",
    "SelectedNotebook",
    "SelectFirst",
    "Selection",
    "SelectionAnimate",
    "SelectionCell",
    "SelectionCellCreateCell",
    "SelectionCellDefaultStyle",
    "SelectionCellParentStyle",
    "SelectionCreateCell",
    "SelectionDebuggerTag",
    "SelectionEvaluate",
    "SelectionEvaluateCreateCell",
    "SelectionMove",
    "SelectionPlaceholder",
    "SelectWithContents",
    "SelfLoops",
    "SelfLoopStyle",
    "SemanticImport",
    "SemanticImportString",
    "SemanticInterpretation",
    "SemialgebraicComponentInstances",
    "SemidefiniteOptimization",
    "SendMail",
    "SendMessage",
    "Sequence",
    "SequenceAlignment",
    "SequenceAttentionLayer",
    "SequenceCases",
    "SequenceCount",
    "SequenceFold",
    "SequenceFoldList",
    "SequenceForm",
    "SequenceHold",
    "SequenceIndicesLayer",
    "SequenceLastLayer",
    "SequenceMostLayer",
    "SequencePosition",
    "SequencePredict",
    "SequencePredictorFunction",
    "SequenceReplace",
    "SequenceRestLayer",
    "SequenceReverseLayer",
    "SequenceSplit",
    "Series",
    "SeriesCoefficient",
    "SeriesData",
    "SeriesTermGoal",
    "ServiceConnect",
    "ServiceDisconnect",
    "ServiceExecute",
    "ServiceObject",
    "ServiceRequest",
    "ServiceResponse",
    "ServiceSubmit",
    "SessionSubmit",
    "SessionTime",
    "Set",
    "SetAccuracy",
    "SetAlphaChannel",
    "SetAttributes",
    "Setbacks",
    "SetCloudDirectory",
    "SetCookies",
    "SetDelayed",
    "SetDirectory",
    "SetEnvironment",
    "SetFileDate",
    "SetFileFormatProperties",
    "SetOptions",
    "SetOptionsPacket",
    "SetPermissions",
    "SetPrecision",
    "SetProperty",
    "SetSecuredAuthenticationKey",
    "SetSelectedNotebook",
    "SetSharedFunction",
    "SetSharedVariable",
    "SetStreamPosition",
    "SetSystemModel",
    "SetSystemOptions",
    "Setter",
    "SetterBar",
    "SetterBox",
    "SetterBoxOptions",
    "Setting",
    "SetUsers",
    "Shading",
    "Shallow",
    "ShannonWavelet",
    "ShapiroWilkTest",
    "Share",
    "SharingList",
    "Sharpen",
    "ShearingMatrix",
    "ShearingTransform",
    "ShellRegion",
    "ShenCastanMatrix",
    "ShiftedGompertzDistribution",
    "ShiftRegisterSequence",
    "Short",
    "ShortDownArrow",
    "Shortest",
    "ShortestMatch",
    "ShortestPathFunction",
    "ShortLeftArrow",
    "ShortRightArrow",
    "ShortTimeFourier",
    "ShortTimeFourierData",
    "ShortUpArrow",
    "Show",
    "ShowAutoConvert",
    "ShowAutoSpellCheck",
    "ShowAutoStyles",
    "ShowCellBracket",
    "ShowCellLabel",
    "ShowCellTags",
    "ShowClosedCellArea",
    "ShowCodeAssist",
    "ShowContents",
    "ShowControls",
    "ShowCursorTracker",
    "ShowGroupOpenCloseIcon",
    "ShowGroupOpener",
    "ShowInvisibleCharacters",
    "ShowPageBreaks",
    "ShowPredictiveInterface",
    "ShowSelection",
    "ShowShortBoxForm",
    "ShowSpecialCharacters",
    "ShowStringCharacters",
    "ShowSyntaxStyles",
    "ShrinkingDelay",
    "ShrinkWrapBoundingBox",
    "SiderealTime",
    "SiegelTheta",
    "SiegelTukeyTest",
    "SierpinskiCurve",
    "SierpinskiMesh",
    "Sign",
    "Signature",
    "SignedRankTest",
    "SignedRegionDistance",
    "SignificanceLevel",
    "SignPadding",
    "SignTest",
    "SimilarityRules",
    "SimpleGraph",
    "SimpleGraphQ",
    "SimplePolygonQ",
    "SimplePolyhedronQ",
    "Simplex",
    "Simplify",
    "Sin",
    "Sinc",
    "SinghMaddalaDistribution",
    "SingleEvaluation",
    "SingleLetterItalics",
    "SingleLetterStyle",
    "SingularValueDecomposition",
    "SingularValueList",
    "SingularValuePlot",
    "SingularValues",
    "Sinh",
    "SinhIntegral",
    "SinIntegral",
    "SixJSymbol",
    "Skeleton",
    "SkeletonTransform",
    "SkellamDistribution",
    "Skewness",
    "SkewNormalDistribution",
    "SkinStyle",
    "Skip",
    "SliceContourPlot3D",
    "SliceDensityPlot3D",
    "SliceDistribution",
    "SliceVectorPlot3D",
    "Slider",
    "Slider2D",
    "Slider2DBox",
    "Slider2DBoxOptions",
    "SliderBox",
    "SliderBoxOptions",
    "SlideShowVideo",
    "SlideView",
    "Slot",
    "SlotSequence",
    "Small",
    "SmallCircle",
    "Smaller",
    "SmithDecomposition",
    "SmithDelayCompensator",
    "SmithWatermanSimilarity",
    "SmoothDensityHistogram",
    "SmoothHistogram",
    "SmoothHistogram3D",
    "SmoothKernelDistribution",
    "SmoothPointDensity",
    "SnDispersion",
    "Snippet",
    "SnippetsVideo",
    "SnubPolyhedron",
    "SocialMediaData",
    "Socket",
    "SocketConnect",
    "SocketListen",
    "SocketListener",
    "SocketObject",
    "SocketOpen",
    "SocketReadMessage",
    "SocketReadyQ",
    "Sockets",
    "SocketWaitAll",
    "SocketWaitNext",
    "SoftmaxLayer",
    "SokalSneathDissimilarity",
    "SolarEclipse",
    "SolarSystemFeatureData",
    "SolarTime",
    "SolidAngle",
    "SolidBoundaryLoadValue",
    "SolidData",
    "SolidDisplacementCondition",
    "SolidFixedCondition",
    "SolidMechanicsPDEComponent",
    "SolidMechanicsStrain",
    "SolidMechanicsStress",
    "SolidRegionQ",
    "Solve",
    "SolveAlways",
    "SolveDelayed",
    "SolveValues",
    "Sort",
    "SortBy",
    "SortedBy",
    "SortedEntityClass",
    "Sound",
    "SoundAndGraphics",
    "SoundNote",
    "SoundVolume",
    "SourceLink",
    "SourcePDETerm",
    "Sow",
    "Space",
    "SpaceCurveData",
    "SpaceForm",
    "Spacer",
    "Spacings",
    "Span",
    "SpanAdjustments",
    "SpanCharacterRounding",
    "SpanFromAbove",
    "SpanFromBoth",
    "SpanFromLeft",
    "SpanLineThickness",
    "SpanMaxSize",
    "SpanMinSize",
    "SpanningCharacters",
    "SpanSymmetric",
    "SparseArray",
    "SparseArrayQ",
    "SpatialBinnedPointData",
    "SpatialBoundaryCorrection",
    "SpatialEstimate",
    "SpatialEstimatorFunction",
    "SpatialGraphDistribution",
    "SpatialJ",
    "SpatialMedian",
    "SpatialNoiseLevel",
    "SpatialObservationRegionQ",
    "SpatialPointData",
    "SpatialPointSelect",
    "SpatialRandomnessTest",
    "SpatialTransformationLayer",
    "SpatialTrendFunction",
    "Speak",
    "SpeakerMatchQ",
    "SpearmanRankTest",
    "SpearmanRho",
    "SpeciesData",
    "SpecificityGoal",
    "SpectralLineData",
    "Spectrogram",
    "SpectrogramArray",
    "Specularity",
    "SpeechCases",
    "SpeechInterpreter",
    "SpeechRecognize",
    "SpeechSynthesize",
    "SpellingCorrection",
    "SpellingCorrectionList",
    "SpellingDictionaries",
    "SpellingDictionariesPath",
    "SpellingOptions",
    "Sphere",
    "SphereBox",
    "SphereBoxOptions",
    "SpherePoints",
    "SphericalBesselJ",
    "SphericalBesselY",
    "SphericalHankelH1",
    "SphericalHankelH2",
    "SphericalHarmonicY",
    "SphericalPlot3D",
    "SphericalRegion",
    "SphericalShell",
    "SpheroidalEigenvalue",
    "SpheroidalJoiningFactor",
    "SpheroidalPS",
    "SpheroidalPSPrime",
    "SpheroidalQS",
    "SpheroidalQSPrime",
    "SpheroidalRadialFactor",
    "SpheroidalS1",
    "SpheroidalS1Prime",
    "SpheroidalS2",
    "SpheroidalS2Prime",
    "Splice",
    "SplicedDistribution",
    "SplineClosed",
    "SplineDegree",
    "SplineKnots",
    "SplineWeights",
    "Split",
    "SplitBy",
    "SpokenString",
    "SpotLight",
    "Sqrt",
    "SqrtBox",
    "SqrtBoxOptions",
    "Square",
    "SquaredEuclideanDistance",
    "SquareFreeQ",
    "SquareIntersection",
    "SquareMatrixQ",
    "SquareRepeatingElement",
    "SquaresR",
    "SquareSubset",
    "SquareSubsetEqual",
    "SquareSuperset",
    "SquareSupersetEqual",
    "SquareUnion",
    "SquareWave",
    "SSSTriangle",
    "StabilityMargins",
    "StabilityMarginsStyle",
    "StableDistribution",
    "Stack",
    "StackBegin",
    "StackComplete",
    "StackedDateListPlot",
    "StackedListPlot",
    "StackInhibit",
    "StadiumShape",
    "StandardAtmosphereData",
    "StandardDeviation",
    "StandardDeviationFilter",
    "StandardForm",
    "Standardize",
    "Standardized",
    "StandardOceanData",
    "StandbyDistribution",
    "Star",
    "StarClusterData",
    "StarData",
    "StarGraph",
    "StartAsynchronousTask",
    "StartExternalSession",
    "StartingStepSize",
    "StartOfLine",
    "StartOfString",
    "StartProcess",
    "StartScheduledTask",
    "StartupSound",
    "StartWebSession",
    "StateDimensions",
    "StateFeedbackGains",
    "StateOutputEstimator",
    "StateResponse",
    "StateSpaceModel",
    "StateSpaceRealization",
    "StateSpaceTransform",
    "StateTransformationLinearize",
    "StationaryDistribution",
    "StationaryWaveletPacketTransform",
    "StationaryWaveletTransform",
    "StatusArea",
    "StatusCentrality",
    "StepMonitor",
    "StereochemistryElements",
    "StieltjesGamma",
    "StippleShading",
    "StirlingS1",
    "StirlingS2",
    "StopAsynchronousTask",
    "StoppingPowerData",
    "StopScheduledTask",
    "StrataVariables",
    "StratonovichProcess",
    "StraussHardcorePointProcess",
    "StraussPointProcess",
    "StreamColorFunction",
    "StreamColorFunctionScaling",
    "StreamDensityPlot",
    "StreamMarkers",
    "StreamPlot",
    "StreamPlot3D",
    "StreamPoints",
    "StreamPosition",
    "Streams",
    "StreamScale",
    "StreamStyle",
    "StrictInequalities",
    "String",
    "StringBreak",
    "StringByteCount",
    "StringCases",
    "StringContainsQ",
    "StringCount",
    "StringDelete",
    "StringDrop",
    "StringEndsQ",
    "StringExpression",
    "StringExtract",
    "StringForm",
    "StringFormat",
    "StringFormatQ",
    "StringFreeQ",
    "StringInsert",
    "StringJoin",
    "StringLength",
    "StringMatchQ",
    "StringPadLeft",
    "StringPadRight",
    "StringPart",
    "StringPartition",
    "StringPosition",
    "StringQ",
    "StringRepeat",
    "StringReplace",
    "StringReplaceList",
    "StringReplacePart",
    "StringReverse",
    "StringRiffle",
    "StringRotateLeft",
    "StringRotateRight",
    "StringSkeleton",
    "StringSplit",
    "StringStartsQ",
    "StringTake",
    "StringTakeDrop",
    "StringTemplate",
    "StringToByteArray",
    "StringToStream",
    "StringTrim",
    "StripBoxes",
    "StripOnInput",
    "StripStyleOnPaste",
    "StripWrapperBoxes",
    "StrokeForm",
    "Struckthrough",
    "StructuralImportance",
    "StructuredArray",
    "StructuredArrayHeadQ",
    "StructuredSelection",
    "StruveH",
    "StruveL",
    "Stub",
    "StudentTDistribution",
    "Style",
    "StyleBox",
    "StyleBoxAutoDelete",
    "StyleData",
    "StyleDefinitions",
    "StyleForm",
    "StyleHints",
    "StyleKeyMapping",
    "StyleMenuListing",
    "StyleNameDialogSettings",
    "StyleNames",
    "StylePrint",
    "StyleSheetPath",
    "Subdivide",
    "Subfactorial",
    "Subgraph",
    "SubMinus",
    "SubPlus",
    "SubresultantPolynomialRemainders",
    "SubresultantPolynomials",
    "Subresultants",
    "Subscript",
    "SubscriptBox",
    "SubscriptBoxOptions",
    "Subscripted",
    "Subsequences",
    "Subset",
    "SubsetCases",
    "SubsetCount",
    "SubsetEqual",
    "SubsetMap",
    "SubsetPosition",
    "SubsetQ",
    "SubsetReplace",
    "Subsets",
    "SubStar",
    "SubstitutionSystem",
    "Subsuperscript",
    "SubsuperscriptBox",
    "SubsuperscriptBoxOptions",
    "SubtitleEncoding",
    "SubtitleTrackSelection",
    "Subtract",
    "SubtractFrom",
    "SubtractSides",
    "SubValues",
    "Succeeds",
    "SucceedsEqual",
    "SucceedsSlantEqual",
    "SucceedsTilde",
    "Success",
    "SuchThat",
    "Sum",
    "SumConvergence",
    "SummationLayer",
    "Sunday",
    "SunPosition",
    "Sunrise",
    "Sunset",
    "SuperDagger",
    "SuperMinus",
    "SupernovaData",
    "SuperPlus",
    "Superscript",
    "SuperscriptBox",
    "SuperscriptBoxOptions",
    "Superset",
    "SupersetEqual",
    "SuperStar",
    "Surd",
    "SurdForm",
    "SurfaceAppearance",
    "SurfaceArea",
    "SurfaceColor",
    "SurfaceData",
    "SurfaceGraphics",
    "SurvivalDistribution",
    "SurvivalFunction",
    "SurvivalModel",
    "SurvivalModelFit",
    "SuspendPacket",
    "SuzukiDistribution",
    "SuzukiGroupSuz",
    "SwatchLegend",
    "Switch",
    "Symbol",
    "SymbolName",
    "SymletWavelet",
    "Symmetric",
    "SymmetricDifference",
    "SymmetricGroup",
    "SymmetricKey",
    "SymmetricMatrixQ",
    "SymmetricPolynomial",
    "SymmetricReduction",
    "Symmetrize",
    "SymmetrizedArray",
    "SymmetrizedArrayRules",
    "SymmetrizedDependentComponents",
    "SymmetrizedIndependentComponents",
    "SymmetrizedReplacePart",
    "SynchronousInitialization",
    "SynchronousUpdating",
    "Synonyms",
    "Syntax",
    "SyntaxForm",
    "SyntaxInformation",
    "SyntaxLength",
    "SyntaxPacket",
    "SyntaxQ",
    "SynthesizeMissingValues",
    "SystemCredential",
    "SystemCredentialData",
    "SystemCredentialKey",
    "SystemCredentialKeys",
    "SystemCredentialStoreObject",
    "SystemDialogInput",
    "SystemException",
    "SystemGet",
    "SystemHelpPath",
    "SystemInformation",
    "SystemInformationData",
    "SystemInstall",
    "SystemModel",
    "SystemModeler",
    "SystemModelExamples",
    "SystemModelLinearize",
    "SystemModelMeasurements",
    "SystemModelParametricSimulate",
    "SystemModelPlot",
    "SystemModelProgressReporting",
    "SystemModelReliability",
    "SystemModels",
    "SystemModelSimulate",
    "SystemModelSimulateSensitivity",
    "SystemModelSimulationData",
    "SystemOpen",
    "SystemOptions",
    "SystemProcessData",
    "SystemProcesses",
    "SystemsConnectionsModel",
    "SystemsModelControllerData",
    "SystemsModelDelay",
    "SystemsModelDelayApproximate",
    "SystemsModelDelete",
    "SystemsModelDimensions",
    "SystemsModelExtract",
    "SystemsModelFeedbackConnect",
    "SystemsModelLabels",
    "SystemsModelLinearity",
    "SystemsModelMerge",
    "SystemsModelOrder",
    "SystemsModelParallelConnect",
    "SystemsModelSeriesConnect",
    "SystemsModelStateFeedbackConnect",
    "SystemsModelVectorRelativeOrders",
    "SystemStub",
    "SystemTest",
    "Tab",
    "TabFilling",
    "Table",
    "TableAlignments",
    "TableDepth",
    "TableDirections",
    "TableForm",
    "TableHeadings",
    "TableSpacing",
    "TableView",
    "TableViewBox",
    "TableViewBoxAlignment",
    "TableViewBoxBackground",
    "TableViewBoxHeaders",
    "TableViewBoxItemSize",
    "TableViewBoxItemStyle",
    "TableViewBoxOptions",
    "TabSpacings",
    "TabView",
    "TabViewBox",
    "TabViewBoxOptions",
    "TagBox",
    "TagBoxNote",
    "TagBoxOptions",
    "TaggingRules",
    "TagSet",
    "TagSetDelayed",
    "TagStyle",
    "TagUnset",
    "Take",
    "TakeDrop",
    "TakeLargest",
    "TakeLargestBy",
    "TakeList",
    "TakeSmallest",
    "TakeSmallestBy",
    "TakeWhile",
    "Tally",
    "Tan",
    "Tanh",
    "TargetDevice",
    "TargetFunctions",
    "TargetSystem",
    "TargetUnits",
    "TaskAbort",
    "TaskExecute",
    "TaskObject",
    "TaskRemove",
    "TaskResume",
    "Tasks",
    "TaskSuspend",
    "TaskWait",
    "TautologyQ",
    "TelegraphProcess",
    "TemplateApply",
    "TemplateArgBox",
    "TemplateBox",
    "TemplateBoxOptions",
    "TemplateEvaluate",
    "TemplateExpression",
    "TemplateIf",
    "TemplateObject",
    "TemplateSequence",
    "TemplateSlot",
    "TemplateSlotSequence",
    "TemplateUnevaluated",
    "TemplateVerbatim",
    "TemplateWith",
    "TemporalData",
    "TemporalRegularity",
    "Temporary",
    "TemporaryVariable",
    "TensorContract",
    "TensorDimensions",
    "TensorExpand",
    "TensorProduct",
    "TensorQ",
    "TensorRank",
    "TensorReduce",
    "TensorSymmetry",
    "TensorTranspose",
    "TensorWedge",
    "TerminatedEvaluation",
    "TernaryListPlot",
    "TernaryPlotCorners",
    "TestID",
    "TestReport",
    "TestReportObject",
    "TestResultObject",
    "Tetrahedron",
    "TetrahedronBox",
    "TetrahedronBoxOptions",
    "TeXForm",
    "TeXSave",
    "Text",
    "Text3DBox",
    "Text3DBoxOptions",
    "TextAlignment",
    "TextBand",
    "TextBoundingBox",
    "TextBox",
    "TextCases",
    "TextCell",
    "TextClipboardType",
    "TextContents",
    "TextData",
    "TextElement",
    "TextForm",
    "TextGrid",
    "TextJustification",
    "TextLine",
    "TextPacket",
    "TextParagraph",
    "TextPosition",
    "TextRecognize",
    "TextSearch",
    "TextSearchReport",
    "TextSentences",
    "TextString",
    "TextStructure",
    "TextStyle",
    "TextTranslation",
    "Texture",
    "TextureCoordinateFunction",
    "TextureCoordinateScaling",
    "TextWords",
    "Therefore",
    "ThermodynamicData",
    "ThermometerGauge",
    "Thick",
    "Thickness",
    "Thin",
    "Thinning",
    "ThisLink",
    "ThomasPointProcess",
    "ThompsonGroupTh",
    "Thread",
    "Threaded",
    "ThreadingLayer",
    "ThreeJSymbol",
    "Threshold",
    "Through",
    "Throw",
    "ThueMorse",
    "Thumbnail",
    "Thursday",
    "TickDirection",
    "TickLabelOrientation",
    "TickLabelPositioning",
    "TickLabels",
    "TickLengths",
    "TickPositions",
    "Ticks",
    "TicksStyle",
    "TideData",
    "Tilde",
    "TildeEqual",
    "TildeFullEqual",
    "TildeTilde",
    "TimeConstrained",
    "TimeConstraint",
    "TimeDirection",
    "TimeFormat",
    "TimeGoal",
    "TimelinePlot",
    "TimeObject",
    "TimeObjectQ",
    "TimeRemaining",
    "Times",
    "TimesBy",
    "TimeSeries",
    "TimeSeriesAggregate",
    "TimeSeriesForecast",
    "TimeSeriesInsert",
    "TimeSeriesInvertibility",
    "TimeSeriesMap",
    "TimeSeriesMapThread",
    "TimeSeriesModel",
    "TimeSeriesModelFit",
    "TimeSeriesResample",
    "TimeSeriesRescale",
    "TimeSeriesShift",
    "TimeSeriesThread",
    "TimeSeriesWindow",
    "TimeSystem",
    "TimeSystemConvert",
    "TimeUsed",
    "TimeValue",
    "TimeWarpingCorrespondence",
    "TimeWarpingDistance",
    "TimeZone",
    "TimeZoneConvert",
    "TimeZoneOffset",
    "Timing",
    "Tiny",
    "TitleGrouping",
    "TitsGroupT",
    "ToBoxes",
    "ToCharacterCode",
    "ToColor",
    "ToContinuousTimeModel",
    "ToDate",
    "Today",
    "ToDiscreteTimeModel",
    "ToEntity",
    "ToeplitzMatrix",
    "ToExpression",
    "ToFileName",
    "Together",
    "Toggle",
    "ToggleFalse",
    "Toggler",
    "TogglerBar",
    "TogglerBox",
    "TogglerBoxOptions",
    "ToHeldExpression",
    "ToInvertibleTimeSeries",
    "TokenWords",
    "Tolerance",
    "ToLowerCase",
    "Tomorrow",
    "ToNumberField",
    "TooBig",
    "Tooltip",
    "TooltipBox",
    "TooltipBoxOptions",
    "TooltipDelay",
    "TooltipStyle",
    "ToonShading",
    "Top",
    "TopHatTransform",
    "ToPolarCoordinates",
    "TopologicalSort",
    "ToRadicals",
    "ToRawPointer",
    "ToRules",
    "Torus",
    "TorusGraph",
    "ToSphericalCoordinates",
    "ToString",
    "Total",
    "TotalHeight",
    "TotalLayer",
    "TotalVariationFilter",
    "TotalWidth",
    "TouchPosition",
    "TouchscreenAutoZoom",
    "TouchscreenControlPlacement",
    "ToUpperCase",
    "TourVideo",
    "Tr",
    "Trace",
    "TraceAbove",
    "TraceAction",
    "TraceBackward",
    "TraceDepth",
    "TraceDialog",
    "TraceForward",
    "TraceInternal",
    "TraceLevel",
    "TraceOff",
    "TraceOn",
    "TraceOriginal",
    "TracePrint",
    "TraceScan",
    "TrackCellChangeTimes",
    "TrackedSymbols",
    "TrackingFunction",
    "TracyWidomDistribution",
    "TradingChart",
    "TraditionalForm",
    "TraditionalFunctionNotation",
    "TraditionalNotation",
    "TraditionalOrder",
    "TrainImageContentDetector",
    "TrainingProgressCheckpointing",
    "TrainingProgressFunction",
    "TrainingProgressMeasurements",
    "TrainingProgressReporting",
    "TrainingStoppingCriterion",
    "TrainingUpdateSchedule",
    "TrainTextContentDetector",
    "TransferFunctionCancel",
    "TransferFunctionExpand",
    "TransferFunctionFactor",
    "TransferFunctionModel",
    "TransferFunctionPoles",
    "TransferFunctionTransform",
    "TransferFunctionZeros",
    "TransformationClass",
    "TransformationFunction",
    "TransformationFunctions",
    "TransformationMatrix",
    "TransformedDistribution",
    "TransformedField",
    "TransformedProcess",
    "TransformedRegion",
    "TransitionDirection",
    "TransitionDuration",
    "TransitionEffect",
    "TransitiveClosureGraph",
    "TransitiveReductionGraph",
    "Translate",
    "TranslationOptions",
    "TranslationTransform",
    "Transliterate",
    "Transparent",
    "TransparentColor",
    "Transpose",
    "TransposeLayer",
    "TrapEnterKey",
    "TrapSelection",
    "TravelDirections",
    "TravelDirectionsData",
    "TravelDistance",
    "TravelDistanceList",
    "TravelMethod",
    "TravelTime",
    "Tree",
    "TreeCases",
    "TreeChildren",
    "TreeCount",
    "TreeData",
    "TreeDelete",
    "TreeDepth",
    "TreeElementCoordinates",
    "TreeElementLabel",
    "TreeElementLabelFunction",
    "TreeElementLabelStyle",
    "TreeElementShape",
    "TreeElementShapeFunction",
    "TreeElementSize",
    "TreeElementSizeFunction",
    "TreeElementStyle",
    "TreeElementStyleFunction",
    "TreeExpression",
    "TreeExtract",
    "TreeFold",
    "TreeForm",
    "TreeGraph",
    "TreeGraphQ",
    "TreeInsert",
    "TreeLayout",
    "TreeLeafCount",
    "TreeLeafQ",
    "TreeLeaves",
    "TreeLevel",
    "TreeMap",
    "TreeMapAt",
    "TreeOutline",
    "TreePlot",
    "TreePosition",
    "TreeQ",
    "TreeReplacePart",
    "TreeRules",
    "TreeScan",
    "TreeSelect",
    "TreeSize",
    "TreeTraversalOrder",
    "TrendStyle",
    "Triangle",
    "TriangleCenter",
    "TriangleConstruct",
    "TriangleMeasurement",
    "TriangleWave",
    "TriangularDistribution",
    "TriangulateMesh",
    "Trig",
    "TrigExpand",
    "TrigFactor",
    "TrigFactorList",
    "Trigger",
    "TrigReduce",
    "TrigToExp",
    "TrimmedMean",
    "TrimmedVariance",
    "TropicalStormData",
    "True",
    "TrueQ",
    "TruncatedDistribution",
    "TruncatedPolyhedron",
    "TsallisQExponentialDistribution",
    "TsallisQGaussianDistribution",
    "TTest",
    "Tube",
    "TubeBezierCurveBox",
    "TubeBezierCurveBoxOptions",
    "TubeBox",
    "TubeBoxOptions",
    "TubeBSplineCurveBox",
    "TubeBSplineCurveBoxOptions",
    "Tuesday",
    "TukeyLambdaDistribution",
    "TukeyWindow",
    "TunnelData",
    "Tuples",
    "TuranGraph",
    "TuringMachine",
    "TuttePolynomial",
    "TwoWayRule",
    "Typed",
    "TypeDeclaration",
    "TypeEvaluate",
    "TypeHint",
    "TypeOf",
    "TypeSpecifier",
    "UnateQ",
    "Uncompress",
    "UnconstrainedParameters",
    "Undefined",
    "UnderBar",
    "Underflow",
    "Underlined",
    "Underoverscript",
    "UnderoverscriptBox",
    "UnderoverscriptBoxOptions",
    "Underscript",
    "UnderscriptBox",
    "UnderscriptBoxOptions",
    "UnderseaFeatureData",
    "UndirectedEdge",
    "UndirectedGraph",
    "UndirectedGraphQ",
    "UndoOptions",
    "UndoTrackedVariables",
    "Unequal",
    "UnequalTo",
    "Unevaluated",
    "UniformDistribution",
    "UniformGraphDistribution",
    "UniformPolyhedron",
    "UniformSumDistribution",
    "Uninstall",
    "Union",
    "UnionedEntityClass",
    "UnionPlus",
    "Unique",
    "UniqueElements",
    "UnitaryMatrixQ",
    "UnitBox",
    "UnitConvert",
    "UnitDimensions",
    "Unitize",
    "UnitRootTest",
    "UnitSimplify",
    "UnitStep",
    "UnitSystem",
    "UnitTriangle",
    "UnitVector",
    "UnitVectorLayer",
    "UnityDimensions",
    "UniverseModelData",
    "UniversityData",
    "UnixTime",
    "UnlabeledTree",
    "UnmanageObject",
    "Unprotect",
    "UnregisterExternalEvaluator",
    "UnsameQ",
    "UnsavedVariables",
    "Unset",
    "UnsetShared",
    "Until",
    "UntrackedVariables",
    "Up",
    "UpArrow",
    "UpArrowBar",
    "UpArrowDownArrow",
    "Update",
    "UpdateDynamicObjects",
    "UpdateDynamicObjectsSynchronous",
    "UpdateInterval",
    "UpdatePacletSites",
    "UpdateSearchIndex",
    "UpDownArrow",
    "UpEquilibrium",
    "UpperCaseQ",
    "UpperLeftArrow",
    "UpperRightArrow",
    "UpperTriangularize",
    "UpperTriangularMatrix",
    "UpperTriangularMatrixQ",
    "Upsample",
    "UpSet",
    "UpSetDelayed",
    "UpTee",
    "UpTeeArrow",
    "UpTo",
    "UpValues",
    "URL",
    "URLBuild",
    "URLDecode",
    "URLDispatcher",
    "URLDownload",
    "URLDownloadSubmit",
    "URLEncode",
    "URLExecute",
    "URLExpand",
    "URLFetch",
    "URLFetchAsynchronous",
    "URLParse",
    "URLQueryDecode",
    "URLQueryEncode",
    "URLRead",
    "URLResponseTime",
    "URLSave",
    "URLSaveAsynchronous",
    "URLShorten",
    "URLSubmit",
    "UseEmbeddedLibrary",
    "UseGraphicsRange",
    "UserDefinedWavelet",
    "Using",
    "UsingFrontEnd",
    "UtilityFunction",
    "V2Get",
    "ValenceErrorHandling",
    "ValenceFilling",
    "ValidationLength",
    "ValidationSet",
    "ValueBox",
    "ValueBoxOptions",
    "ValueDimensions",
    "ValueForm",
    "ValuePreprocessingFunction",
    "ValueQ",
    "Values",
    "ValuesData",
    "VandermondeMatrix",
    "Variables",
    "Variance",
    "VarianceEquivalenceTest",
    "VarianceEstimatorFunction",
    "VarianceGammaDistribution",
    "VarianceGammaPointProcess",
    "VarianceTest",
    "VariogramFunction",
    "VariogramModel",
    "VectorAngle",
    "VectorAround",
    "VectorAspectRatio",
    "VectorColorFunction",
    "VectorColorFunctionScaling",
    "VectorDensityPlot",
    "VectorDisplacementPlot",
    "VectorDisplacementPlot3D",
    "VectorGlyphData",
    "VectorGreater",
    "VectorGreaterEqual",
    "VectorLess",
    "VectorLessEqual",
    "VectorMarkers",
    "VectorPlot",
    "VectorPlot3D",
    "VectorPoints",
    "VectorQ",
    "VectorRange",
    "Vectors",
    "VectorScale",
    "VectorScaling",
    "VectorSizes",
    "VectorStyle",
    "Vee",
    "Verbatim",
    "Verbose",
    "VerificationTest",
    "VerifyConvergence",
    "VerifyDerivedKey",
    "VerifyDigitalSignature",
    "VerifyFileSignature",
    "VerifyInterpretation",
    "VerifySecurityCertificates",
    "VerifySolutions",
    "VerifyTestAssumptions",
    "VersionedPreferences",
    "VertexAdd",
    "VertexCapacity",
    "VertexChromaticNumber",
    "VertexColors",
    "VertexComponent",
    "VertexConnectivity",
    "VertexContract",
    "VertexCoordinateRules",
    "VertexCoordinates",
    "VertexCorrelationSimilarity",
    "VertexCosineSimilarity",
    "VertexCount",
    "VertexCoverQ",
    "VertexDataCoordinates",
    "VertexDegree",
    "VertexDelete",
    "VertexDiceSimilarity",
    "VertexEccentricity",
    "VertexInComponent",
    "VertexInComponentGraph",
    "VertexInDegree",
    "VertexIndex",
    "VertexJaccardSimilarity",
    "VertexLabeling",
    "VertexLabels",
    "VertexLabelStyle",
    "VertexList",
    "VertexNormals",
    "VertexOutComponent",
    "VertexOutComponentGraph",
    "VertexOutDegree",
    "VertexQ",
    "VertexRenderingFunction",
    "VertexReplace",
    "VertexShape",
    "VertexShapeFunction",
    "VertexSize",
    "VertexStyle",
    "VertexTextureCoordinates",
    "VertexTransitiveGraphQ",
    "VertexWeight",
    "VertexWeightedGraphQ",
    "Vertical",
    "VerticalBar",
    "VerticalForm",
    "VerticalGauge",
    "VerticalSeparator",
    "VerticalSlider",
    "VerticalTilde",
    "Video",
    "VideoCapture",
    "VideoCombine",
    "VideoDelete",
    "VideoEncoding",
    "VideoExtractFrames",
    "VideoFrameList",
    "VideoFrameMap",
    "VideoGenerator",
    "VideoInsert",
    "VideoIntervals",
    "VideoJoin",
    "VideoMap",
    "VideoMapList",
    "VideoMapTimeSeries",
    "VideoPadding",
    "VideoPause",
    "VideoPlay",
    "VideoQ",
    "VideoRecord",
    "VideoReplace",
    "VideoScreenCapture",
    "VideoSplit",
    "VideoStop",
    "VideoStream",
    "VideoStreams",
    "VideoTimeStretch",
    "VideoTrackSelection",
    "VideoTranscode",
    "VideoTransparency",
    "VideoTrim",
    "ViewAngle",
    "ViewCenter",
    "ViewMatrix",
    "ViewPoint",
    "ViewPointSelectorSettings",
    "ViewPort",
    "ViewProjection",
    "ViewRange",
    "ViewVector",
    "ViewVertical",
    "VirtualGroupData",
    "Visible",
    "VisibleCell",
    "VoiceStyleData",
    "VoigtDistribution",
    "VolcanoData",
    "Volume",
    "VonMisesDistribution",
    "VoronoiMesh",
    "WaitAll",
    "WaitAsynchronousTask",
    "WaitNext",
    "WaitUntil",
    "WakebyDistribution",
    "WalleniusHypergeometricDistribution",
    "WaringYuleDistribution",
    "WarpingCorrespondence",
    "WarpingDistance",
    "WatershedComponents",
    "WatsonUSquareTest",
    "WattsStrogatzGraphDistribution",
    "WaveletBestBasis",
    "WaveletFilterCoefficients",
    "WaveletImagePlot",
    "WaveletListPlot",
    "WaveletMapIndexed",
    "WaveletMatrixPlot",
    "WaveletPhi",
    "WaveletPsi",
    "WaveletScale",
    "WaveletScalogram",
    "WaveletThreshold",
    "WavePDEComponent",
    "WeaklyConnectedComponents",
    "WeaklyConnectedGraphComponents",
    "WeaklyConnectedGraphQ",
    "WeakStationarity",
    "WeatherData",
    "WeatherForecastData",
    "WebAudioSearch",
    "WebColumn",
    "WebElementObject",
    "WeberE",
    "WebExecute",
    "WebImage",
    "WebImageSearch",
    "WebItem",
    "WebPageMetaInformation",
    "WebRow",
    "WebSearch",
    "WebSessionObject",
    "WebSessions",
    "WebWindowObject",
    "Wedge",
    "Wednesday",
    "WeibullDistribution",
    "WeierstrassE1",
    "WeierstrassE2",
    "WeierstrassE3",
    "WeierstrassEta1",
    "WeierstrassEta2",
    "WeierstrassEta3",
    "WeierstrassHalfPeriods",
    "WeierstrassHalfPeriodW1",
    "WeierstrassHalfPeriodW2",
    "WeierstrassHalfPeriodW3",
    "WeierstrassInvariantG2",
    "WeierstrassInvariantG3",
    "WeierstrassInvariants",
    "WeierstrassP",
    "WeierstrassPPrime",
    "WeierstrassSigma",
    "WeierstrassZeta",
    "WeightedAdjacencyGraph",
    "WeightedAdjacencyMatrix",
    "WeightedData",
    "WeightedGraphQ",
    "Weights",
    "WelchWindow",
    "WheelGraph",
    "WhenEvent",
    "Which",
    "While",
    "White",
    "WhiteNoiseProcess",
    "WhitePoint",
    "Whitespace",
    "WhitespaceCharacter",
    "WhittakerM",
    "WhittakerW",
    "WholeCellGroupOpener",
    "WienerFilter",
    "WienerProcess",
    "WignerD",
    "WignerSemicircleDistribution",
    "WikidataData",
    "WikidataSearch",
    "WikipediaData",
    "WikipediaSearch",
    "WilksW",
    "WilksWTest",
    "WindDirectionData",
    "WindingCount",
    "WindingPolygon",
    "WindowClickSelect",
    "WindowElements",
    "WindowFloating",
    "WindowFrame",
    "WindowFrameElements",
    "WindowMargins",
    "WindowMovable",
    "WindowOpacity",
    "WindowPersistentStyles",
    "WindowSelected",
    "WindowSize",
    "WindowStatusArea",
    "WindowTitle",
    "WindowToolbars",
    "WindowWidth",
    "WindSpeedData",
    "WindVectorData",
    "WinsorizedMean",
    "WinsorizedVariance",
    "WishartMatrixDistribution",
    "With",
    "WithCleanup",
    "WithLock",
    "WolframAlpha",
    "WolframAlphaDate",
    "WolframAlphaQuantity",
    "WolframAlphaResult",
    "WolframCloudSettings",
    "WolframLanguageData",
    "Word",
    "WordBoundary",
    "WordCharacter",
    "WordCloud",
    "WordCount",
    "WordCounts",
    "WordData",
    "WordDefinition",
    "WordFrequency",
    "WordFrequencyData",
    "WordList",
    "WordOrientation",
    "WordSearch",
    "WordSelectionFunction",
    "WordSeparators",
    "WordSpacings",
    "WordStem",
    "WordTranslation",
    "WorkingPrecision",
    "WrapAround",
    "Write",
    "WriteLine",
    "WriteString",
    "Wronskian",
    "XMLElement",
    "XMLObject",
    "XMLTemplate",
    "Xnor",
    "Xor",
    "XYZColor",
    "Yellow",
    "Yesterday",
    "YuleDissimilarity",
    "ZernikeR",
    "ZeroSymmetric",
    "ZeroTest",
    "ZeroWidthTimes",
    "Zeta",
    "ZetaZero",
    "ZIPCodeData",
    "ZipfDistribution",
    "ZoomCenter",
    "ZoomFactor",
    "ZTest",
    "ZTransform",
    "$Aborted",
    "$ActivationGroupID",
    "$ActivationKey",
    "$ActivationUserRegistered",
    "$AddOnsDirectory",
    "$AllowDataUpdates",
    "$AllowExternalChannelFunctions",
    "$AllowInternet",
    "$AssertFunction",
    "$Assumptions",
    "$AsynchronousTask",
    "$AudioDecoders",
    "$AudioEncoders",
    "$AudioInputDevices",
    "$AudioOutputDevices",
    "$BaseDirectory",
    "$BasePacletsDirectory",
    "$BatchInput",
    "$BatchOutput",
    "$BlockchainBase",
    "$BoxForms",
    "$ByteOrdering",
    "$CacheBaseDirectory",
    "$Canceled",
    "$ChannelBase",
    "$CharacterEncoding",
    "$CharacterEncodings",
    "$CloudAccountName",
    "$CloudBase",
    "$CloudConnected",
    "$CloudConnection",
    "$CloudCreditsAvailable",
    "$CloudEvaluation",
    "$CloudExpressionBase",
    "$CloudObjectNameFormat",
    "$CloudObjectURLType",
    "$CloudRootDirectory",
    "$CloudSymbolBase",
    "$CloudUserID",
    "$CloudUserUUID",
    "$CloudVersion",
    "$CloudVersionNumber",
    "$CloudWolframEngineVersionNumber",
    "$CommandLine",
    "$CompilationTarget",
    "$CompilerEnvironment",
    "$ConditionHold",
    "$ConfiguredKernels",
    "$Context",
    "$ContextAliases",
    "$ContextPath",
    "$ControlActiveSetting",
    "$Cookies",
    "$CookieStore",
    "$CreationDate",
    "$CryptographicEllipticCurveNames",
    "$CurrentLink",
    "$CurrentTask",
    "$CurrentWebSession",
    "$DataStructures",
    "$DateStringFormat",
    "$DefaultAudioInputDevice",
    "$DefaultAudioOutputDevice",
    "$DefaultFont",
    "$DefaultFrontEnd",
    "$DefaultImagingDevice",
    "$DefaultKernels",
    "$DefaultLocalBase",
    "$DefaultLocalKernel",
    "$DefaultMailbox",
    "$DefaultNetworkInterface",
    "$DefaultPath",
    "$DefaultProxyRules",
    "$DefaultRemoteBatchSubmissionEnvironment",
    "$DefaultRemoteKernel",
    "$DefaultSystemCredentialStore",
    "$Display",
    "$DisplayFunction",
    "$DistributedContexts",
    "$DynamicEvaluation",
    "$Echo",
    "$EmbedCodeEnvironments",
    "$EmbeddableServices",
    "$EntityStores",
    "$Epilog",
    "$EvaluationCloudBase",
    "$EvaluationCloudObject",
    "$EvaluationEnvironment",
    "$ExportFormats",
    "$ExternalIdentifierTypes",
    "$ExternalStorageBase",
    "$Failed",
    "$FinancialDataSource",
    "$FontFamilies",
    "$FormatType",
    "$FrontEnd",
    "$FrontEndSession",
    "$GeneratedAssetLocation",
    "$GeoEntityTypes",
    "$GeoLocation",
    "$GeoLocationCity",
    "$GeoLocationCountry",
    "$GeoLocationPrecision",
    "$GeoLocationSource",
    "$HistoryLength",
    "$HomeDirectory",
    "$HTMLExportRules",
    "$HTTPCookies",
    "$HTTPRequest",
    "$IgnoreEOF",
    "$ImageFormattingWidth",
    "$ImageResolution",
    "$ImagingDevice",
    "$ImagingDevices",
    "$ImportFormats",
    "$IncomingMailSettings",
    "$InitialDirectory",
    "$Initialization",
    "$InitializationContexts",
    "$Input",
    "$InputFileName",
    "$InputStreamMethods",
    "$Inspector",
    "$InstallationDate",
    "$InstallationDirectory",
    "$InterfaceEnvironment",
    "$InterpreterTypes",
    "$IterationLimit",
    "$KernelCount",
    "$KernelID",
    "$Language",
    "$LaunchDirectory",
    "$LibraryPath",
    "$LicenseExpirationDate",
    "$LicenseID",
    "$LicenseProcesses",
    "$LicenseServer",
    "$LicenseSubprocesses",
    "$LicenseType",
    "$Line",
    "$Linked",
    "$LinkSupported",
    "$LoadedFiles",
    "$LocalBase",
    "$LocalSymbolBase",
    "$MachineAddresses",
    "$MachineDomain",
    "$MachineDomains",
    "$MachineEpsilon",
    "$MachineID",
    "$MachineName",
    "$MachinePrecision",
    "$MachineType",
    "$MaxDisplayedChildren",
    "$MaxExtraPrecision",
    "$MaxLicenseProcesses",
    "$MaxLicenseSubprocesses",
    "$MaxMachineNumber",
    "$MaxNumber",
    "$MaxPiecewiseCases",
    "$MaxPrecision",
    "$MaxRootDegree",
    "$MessageGroups",
    "$MessageList",
    "$MessagePrePrint",
    "$Messages",
    "$MinMachineNumber",
    "$MinNumber",
    "$MinorReleaseNumber",
    "$MinPrecision",
    "$MobilePhone",
    "$ModuleNumber",
    "$NetworkConnected",
    "$NetworkInterfaces",
    "$NetworkLicense",
    "$NewMessage",
    "$NewSymbol",
    "$NotebookInlineStorageLimit",
    "$Notebooks",
    "$NoValue",
    "$NumberMarks",
    "$Off",
    "$OperatingSystem",
    "$Output",
    "$OutputForms",
    "$OutputSizeLimit",
    "$OutputStreamMethods",
    "$Packages",
    "$ParentLink",
    "$ParentProcessID",
    "$PasswordFile",
    "$PatchLevelID",
    "$Path",
    "$PathnameSeparator",
    "$PerformanceGoal",
    "$Permissions",
    "$PermissionsGroupBase",
    "$PersistenceBase",
    "$PersistencePath",
    "$PipeSupported",
    "$PlotTheme",
    "$Post",
    "$Pre",
    "$PreferencesDirectory",
    "$PreInitialization",
    "$PrePrint",
    "$PreRead",
    "$PrintForms",
    "$PrintLiteral",
    "$Printout3DPreviewer",
    "$ProcessID",
    "$ProcessorCount",
    "$ProcessorType",
    "$ProductInformation",
    "$ProgramName",
    "$ProgressReporting",
    "$PublisherID",
    "$RandomGeneratorState",
    "$RandomState",
    "$RecursionLimit",
    "$RegisteredDeviceClasses",
    "$RegisteredUserName",
    "$ReleaseNumber",
    "$RequesterAddress",
    "$RequesterCloudUserID",
    "$RequesterCloudUserUUID",
    "$RequesterWolframID",
    "$RequesterWolframUUID",
    "$ResourceSystemBase",
    "$ResourceSystemPath",
    "$RootDirectory",
    "$ScheduledTask",
    "$ScriptCommandLine",
    "$ScriptInputString",
    "$SecuredAuthenticationKeyTokens",
    "$ServiceCreditsAvailable",
    "$Services",
    "$SessionID",
    "$SetParentLink",
    "$SharedFunctions",
    "$SharedVariables",
    "$SoundDisplay",
    "$SoundDisplayFunction",
    "$SourceLink",
    "$SSHAuthentication",
    "$SubtitleDecoders",
    "$SubtitleEncoders",
    "$SummaryBoxDataSizeLimit",
    "$SuppressInputFormHeads",
    "$SynchronousEvaluation",
    "$SyntaxHandler",
    "$System",
    "$SystemCharacterEncoding",
    "$SystemCredentialStore",
    "$SystemID",
    "$SystemMemory",
    "$SystemShell",
    "$SystemTimeZone",
    "$SystemWordLength",
    "$TargetSystems",
    "$TemplatePath",
    "$TemporaryDirectory",
    "$TemporaryPrefix",
    "$TestFileName",
    "$TextStyle",
    "$TimedOut",
    "$TimeUnit",
    "$TimeZone",
    "$TimeZoneEntity",
    "$TopDirectory",
    "$TraceOff",
    "$TraceOn",
    "$TracePattern",
    "$TracePostAction",
    "$TracePreAction",
    "$UnitSystem",
    "$Urgent",
    "$UserAddOnsDirectory",
    "$UserAgentLanguages",
    "$UserAgentMachine",
    "$UserAgentName",
    "$UserAgentOperatingSystem",
    "$UserAgentString",
    "$UserAgentVersion",
    "$UserBaseDirectory",
    "$UserBasePacletsDirectory",
    "$UserDocumentsDirectory",
    "$Username",
    "$UserName",
    "$UserURLBase",
    "$Version",
    "$VersionNumber",
    "$VideoDecoders",
    "$VideoEncoders",
    "$VoiceStyles",
    "$WolframDocumentsDirectory",
    "$WolframID",
    "$WolframUUID"
  ];
  function mathematica(hljs) {
    const regex = hljs.regex;
    const BASE_RE = /([2-9]|[1-2]\d|[3][0-5])\^\^/;
    const BASE_DIGITS_RE = /(\w*\.\w+|\w+\.\w*|\w+)/;
    const NUMBER_RE2 = /(\d*\.\d+|\d+\.\d*|\d+)/;
    const BASE_NUMBER_RE = regex.either(regex.concat(BASE_RE, BASE_DIGITS_RE), NUMBER_RE2);
    const ACCURACY_RE = /``[+-]?(\d*\.\d+|\d+\.\d*|\d+)/;
    const PRECISION_RE = /`([+-]?(\d*\.\d+|\d+\.\d*|\d+))?/;
    const APPROXIMATE_NUMBER_RE = regex.either(ACCURACY_RE, PRECISION_RE);
    const SCIENTIFIC_NOTATION_RE = /\*\^[+-]?\d+/;
    const MATHEMATICA_NUMBER_RE = regex.concat(
      BASE_NUMBER_RE,
      regex.optional(APPROXIMATE_NUMBER_RE),
      regex.optional(SCIENTIFIC_NOTATION_RE)
    );
    const NUMBERS = {
      className: "number",
      relevance: 0,
      begin: MATHEMATICA_NUMBER_RE
    };
    const SYMBOL_RE = /[a-zA-Z$][a-zA-Z0-9$]*/;
    const SYSTEM_SYMBOLS_SET = new Set(SYSTEM_SYMBOLS);
    const SYMBOLS = { variants: [
      {
        className: "builtin-symbol",
        begin: SYMBOL_RE,
        // for performance out of fear of regex.either(...Mathematica.SYSTEM_SYMBOLS)
        "on:begin": (match2, response) => {
          if (!SYSTEM_SYMBOLS_SET.has(match2[0]))
            response.ignoreMatch();
        }
      },
      {
        className: "symbol",
        relevance: 0,
        begin: SYMBOL_RE
      }
    ] };
    const NAMED_CHARACTER = {
      className: "named-character",
      begin: /\\\[[$a-zA-Z][$a-zA-Z0-9]+\]/
    };
    const OPERATORS = {
      className: "operator",
      relevance: 0,
      begin: /[+\-*/,;.:@~=><&|_`'^?!%]+/
    };
    const PATTERNS = {
      className: "pattern",
      relevance: 0,
      begin: /([a-zA-Z$][a-zA-Z0-9$]*)?_+([a-zA-Z$][a-zA-Z0-9$]*)?/
    };
    const SLOTS = {
      className: "slot",
      relevance: 0,
      begin: /#[a-zA-Z$][a-zA-Z0-9$]*|#+[0-9]?/
    };
    const BRACES = {
      className: "brace",
      relevance: 0,
      begin: /[[\](){}]/
    };
    const MESSAGES = {
      className: "message-name",
      relevance: 0,
      begin: regex.concat("::", SYMBOL_RE)
    };
    return {
      name: "Mathematica",
      aliases: [
        "mma",
        "wl"
      ],
      classNameAliases: {
        brace: "punctuation",
        pattern: "type",
        slot: "type",
        symbol: "variable",
        "named-character": "variable",
        "builtin-symbol": "built_in",
        "message-name": "string"
      },
      contains: [
        hljs.COMMENT(/\(\*/, /\*\)/, { contains: ["self"] }),
        PATTERNS,
        SLOTS,
        MESSAGES,
        SYMBOLS,
        NAMED_CHARACTER,
        hljs.QUOTE_STRING_MODE,
        NUMBERS,
        OPERATORS,
        BRACES
      ]
    };
  }
  function matlab(hljs) {
    const TRANSPOSE_RE = "('|\\.')+";
    const TRANSPOSE = {
      relevance: 0,
      contains: [{ begin: TRANSPOSE_RE }]
    };
    return {
      name: "Matlab",
      keywords: {
        keyword: "arguments break case catch classdef continue else elseif end enumeration events for function global if methods otherwise parfor persistent properties return spmd switch try while",
        built_in: "sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i|0 inf nan isnan isinf isfinite j|0 why compan gallery hadamard hankel hilb invhilb magic pascal rosser toeplitz vander wilkinson max min nanmax nanmin mean nanmean type table readtable writetable sortrows sort figure plot plot3 scatter scatter3 cellfun legend intersect ismember procrustes hold num2cell "
      },
      illegal: '(//|"|#|/\\*|\\s+/\\w+)',
      contains: [
        {
          className: "function",
          beginKeywords: "function",
          end: "$",
          contains: [
            hljs.UNDERSCORE_TITLE_MODE,
            {
              className: "params",
              variants: [
                {
                  begin: "\\(",
                  end: "\\)"
                },
                {
                  begin: "\\[",
                  end: "\\]"
                }
              ]
            }
          ]
        },
        {
          className: "built_in",
          begin: /true|false/,
          relevance: 0,
          starts: TRANSPOSE
        },
        {
          begin: "[a-zA-Z][a-zA-Z_0-9]*" + TRANSPOSE_RE,
          relevance: 0
        },
        {
          className: "number",
          begin: hljs.C_NUMBER_RE,
          relevance: 0,
          starts: TRANSPOSE
        },
        {
          className: "string",
          begin: "'",
          end: "'",
          contains: [{ begin: "''" }]
        },
        {
          begin: /\]|\}|\)/,
          relevance: 0,
          starts: TRANSPOSE
        },
        {
          className: "string",
          begin: '"',
          end: '"',
          contains: [{ begin: '""' }],
          starts: TRANSPOSE
        },
        hljs.COMMENT("^\\s*%\\{\\s*$", "^\\s*%\\}\\s*$"),
        hljs.COMMENT("%", "$")
      ]
    };
  }
  function maxima(hljs) {
    const KEYWORDS2 = "if then else elseif for thru do while unless step in and or not";
    const LITERALS2 = "true false unknown inf minf ind und %e %i %pi %phi %gamma";
    const BUILTIN_FUNCTIONS = " abasep abs absint absolute_real_time acos acosh acot acoth acsc acsch activate addcol add_edge add_edges addmatrices addrow add_vertex add_vertices adjacency_matrix adjoin adjoint af agd airy airy_ai airy_bi airy_dai airy_dbi algsys alg_type alias allroots alphacharp alphanumericp amortization %and annuity_fv annuity_pv antid antidiff AntiDifference append appendfile apply apply1 apply2 applyb1 apropos args arit_amortization arithmetic arithsum array arrayapply arrayinfo arraymake arraysetapply ascii asec asech asin asinh askinteger asksign assoc assoc_legendre_p assoc_legendre_q assume assume_external_byte_order asympa at atan atan2 atanh atensimp atom atvalue augcoefmatrix augmented_lagrangian_method av average_degree backtrace bars barsplot barsplot_description base64 base64_decode bashindices batch batchload bc2 bdvac belln benefit_cost bern bernpoly bernstein_approx bernstein_expand bernstein_poly bessel bessel_i bessel_j bessel_k bessel_simplify bessel_y beta beta_incomplete beta_incomplete_generalized beta_incomplete_regularized bezout bfallroots bffac bf_find_root bf_fmin_cobyla bfhzeta bfloat bfloatp bfpsi bfpsi0 bfzeta biconnected_components bimetric binomial bipartition block blockmatrixp bode_gain bode_phase bothcoef box boxplot boxplot_description break bug_report build_info|10 buildq build_sample burn cabs canform canten cardinality carg cartan cartesian_product catch cauchy_matrix cbffac cdf_bernoulli cdf_beta cdf_binomial cdf_cauchy cdf_chi2 cdf_continuous_uniform cdf_discrete_uniform cdf_exp cdf_f cdf_gamma cdf_general_finite_discrete cdf_geometric cdf_gumbel cdf_hypergeometric cdf_laplace cdf_logistic cdf_lognormal cdf_negative_binomial cdf_noncentral_chi2 cdf_noncentral_student_t cdf_normal cdf_pareto cdf_poisson cdf_rank_sum cdf_rayleigh cdf_signed_rank cdf_student_t cdf_weibull cdisplay ceiling central_moment cequal cequalignore cf cfdisrep cfexpand cgeodesic cgreaterp cgreaterpignore changename changevar chaosgame charat charfun charfun2 charlist charp charpoly chdir chebyshev_t chebyshev_u checkdiv check_overlaps chinese cholesky christof chromatic_index chromatic_number cint circulant_graph clear_edge_weight clear_rules clear_vertex_label clebsch_gordan clebsch_graph clessp clesspignore close closefile cmetric coeff coefmatrix cograd col collapse collectterms columnop columnspace columnswap columnvector combination combine comp2pui compare compfile compile compile_file complement_graph complete_bipartite_graph complete_graph complex_number_p components compose_functions concan concat conjugate conmetderiv connected_components connect_vertices cons constant constantp constituent constvalue cont2part content continuous_freq contortion contour_plot contract contract_edge contragrad contrib_ode convert coord copy copy_file copy_graph copylist copymatrix cor cos cosh cot coth cov cov1 covdiff covect covers crc24sum create_graph create_list csc csch csetup cspline ctaylor ct_coordsys ctransform ctranspose cube_graph cuboctahedron_graph cunlisp cv cycle_digraph cycle_graph cylindrical days360 dblint deactivate declare declare_constvalue declare_dimensions declare_fundamental_dimensions declare_fundamental_units declare_qty declare_translated declare_unit_conversion declare_units declare_weights decsym defcon define define_alt_display define_variable defint defmatch defrule defstruct deftaylor degree_sequence del delete deleten delta demo demoivre denom depends derivdegree derivlist describe desolve determinant dfloat dgauss_a dgauss_b dgeev dgemm dgeqrf dgesv dgesvd diag diagmatrix diag_matrix diagmatrixp diameter diff digitcharp dimacs_export dimacs_import dimension dimensionless dimensions dimensions_as_list direct directory discrete_freq disjoin disjointp disolate disp dispcon dispform dispfun dispJordan display disprule dispterms distrib divide divisors divsum dkummer_m dkummer_u dlange dodecahedron_graph dotproduct dotsimp dpart draw draw2d draw3d drawdf draw_file draw_graph dscalar echelon edge_coloring edge_connectivity edges eigens_by_jacobi eigenvalues eigenvectors eighth einstein eivals eivects elapsed_real_time elapsed_run_time ele2comp ele2polynome ele2pui elem elementp elevation_grid elim elim_allbut eliminate eliminate_using ellipse elliptic_e elliptic_ec elliptic_eu elliptic_f elliptic_kc elliptic_pi ematrix empty_graph emptyp endcons entermatrix entertensor entier equal equalp equiv_classes erf erfc erf_generalized erfi errcatch error errormsg errors euler ev eval_string evenp every evolution evolution2d evundiff example exp expand expandwrt expandwrt_factored expint expintegral_chi expintegral_ci expintegral_e expintegral_e1 expintegral_ei expintegral_e_simplify expintegral_li expintegral_shi expintegral_si explicit explose exponentialize express expt exsec extdiff extract_linear_equations extremal_subset ezgcd %f f90 facsum factcomb factor factorfacsum factorial factorout factorsum facts fast_central_elements fast_linsolve fasttimes featurep fernfale fft fib fibtophi fifth filename_merge file_search file_type fillarray findde find_root find_root_abs find_root_error find_root_rel first fix flatten flength float floatnump floor flower_snark flush flush1deriv flushd flushnd flush_output fmin_cobyla forget fortran fourcos fourexpand fourier fourier_elim fourint fourintcos fourintsin foursimp foursin fourth fposition frame_bracket freeof freshline fresnel_c fresnel_s from_adjacency_matrix frucht_graph full_listify fullmap fullmapl fullratsimp fullratsubst fullsetify funcsolve fundamental_dimensions fundamental_units fundef funmake funp fv g0 g1 gamma gamma_greek gamma_incomplete gamma_incomplete_generalized gamma_incomplete_regularized gauss gauss_a gauss_b gaussprob gcd gcdex gcdivide gcfac gcfactor gd generalized_lambert_w genfact gen_laguerre genmatrix gensym geo_amortization geo_annuity_fv geo_annuity_pv geomap geometric geometric_mean geosum get getcurrentdirectory get_edge_weight getenv get_lu_factors get_output_stream_string get_pixel get_plot_option get_tex_environment get_tex_environment_default get_vertex_label gfactor gfactorsum ggf girth global_variances gn gnuplot_close gnuplot_replot gnuplot_reset gnuplot_restart gnuplot_start go Gosper GosperSum gr2d gr3d gradef gramschmidt graph6_decode graph6_encode graph6_export graph6_import graph_center graph_charpoly graph_eigenvalues graph_flow graph_order graph_periphery graph_product graph_size graph_union great_rhombicosidodecahedron_graph great_rhombicuboctahedron_graph grid_graph grind grobner_basis grotzch_graph hamilton_cycle hamilton_path hankel hankel_1 hankel_2 harmonic harmonic_mean hav heawood_graph hermite hessian hgfred hilbertmap hilbert_matrix hipow histogram histogram_description hodge horner hypergeometric i0 i1 %ibes ic1 ic2 ic_convert ichr1 ichr2 icosahedron_graph icosidodecahedron_graph icurvature ident identfor identity idiff idim idummy ieqn %if ifactors iframes ifs igcdex igeodesic_coords ilt image imagpart imetric implicit implicit_derivative implicit_plot indexed_tensor indices induced_subgraph inferencep inference_result infix info_display init_atensor init_ctensor in_neighbors innerproduct inpart inprod inrt integerp integer_partitions integrate intersect intersection intervalp intopois intosum invariant1 invariant2 inverse_fft inverse_jacobi_cd inverse_jacobi_cn inverse_jacobi_cs inverse_jacobi_dc inverse_jacobi_dn inverse_jacobi_ds inverse_jacobi_nc inverse_jacobi_nd inverse_jacobi_ns inverse_jacobi_sc inverse_jacobi_sd inverse_jacobi_sn invert invert_by_adjoint invert_by_lu inv_mod irr is is_biconnected is_bipartite is_connected is_digraph is_edge_in_graph is_graph is_graph_or_digraph ishow is_isomorphic isolate isomorphism is_planar isqrt isreal_p is_sconnected is_tree is_vertex_in_graph items_inference %j j0 j1 jacobi jacobian jacobi_cd jacobi_cn jacobi_cs jacobi_dc jacobi_dn jacobi_ds jacobi_nc jacobi_nd jacobi_ns jacobi_p jacobi_sc jacobi_sd jacobi_sn JF jn join jordan julia julia_set julia_sin %k kdels kdelta kill killcontext kostka kron_delta kronecker_product kummer_m kummer_u kurtosis kurtosis_bernoulli kurtosis_beta kurtosis_binomial kurtosis_chi2 kurtosis_continuous_uniform kurtosis_discrete_uniform kurtosis_exp kurtosis_f kurtosis_gamma kurtosis_general_finite_discrete kurtosis_geometric kurtosis_gumbel kurtosis_hypergeometric kurtosis_laplace kurtosis_logistic kurtosis_lognormal kurtosis_negative_binomial kurtosis_noncentral_chi2 kurtosis_noncentral_student_t kurtosis_normal kurtosis_pareto kurtosis_poisson kurtosis_rayleigh kurtosis_student_t kurtosis_weibull label labels lagrange laguerre lambda lambert_w laplace laplacian_matrix last lbfgs lc2kdt lcharp lc_l lcm lc_u ldefint ldisp ldisplay legendre_p legendre_q leinstein length let letrules letsimp levi_civita lfreeof lgtreillis lhs li liediff limit Lindstedt linear linearinterpol linear_program linear_regression line_graph linsolve listarray list_correlations listify list_matrix_entries list_nc_monomials listoftens listofvars listp lmax lmin load loadfile local locate_matrix_entry log logcontract log_gamma lopow lorentz_gauge lowercasep lpart lratsubst lreduce lriemann lsquares_estimates lsquares_estimates_approximate lsquares_estimates_exact lsquares_mse lsquares_residual_mse lsquares_residuals lsum ltreillis lu_backsub lucas lu_factor %m macroexpand macroexpand1 make_array makebox makefact makegamma make_graph make_level_picture makelist makeOrders make_poly_continent make_poly_country make_polygon make_random_state make_rgb_picture makeset make_string_input_stream make_string_output_stream make_transform mandelbrot mandelbrot_set map mapatom maplist matchdeclare matchfix mat_cond mat_fullunblocker mat_function mathml_display mat_norm matrix matrixmap matrixp matrix_size mattrace mat_trace mat_unblocker max max_clique max_degree max_flow maximize_lp max_independent_set max_matching maybe md5sum mean mean_bernoulli mean_beta mean_binomial mean_chi2 mean_continuous_uniform mean_deviation mean_discrete_uniform mean_exp mean_f mean_gamma mean_general_finite_discrete mean_geometric mean_gumbel mean_hypergeometric mean_laplace mean_logistic mean_lognormal mean_negative_binomial mean_noncentral_chi2 mean_noncentral_student_t mean_normal mean_pareto mean_poisson mean_rayleigh mean_student_t mean_weibull median median_deviation member mesh metricexpandall mgf1_sha1 min min_degree min_edge_cut minfactorial minimalPoly minimize_lp minimum_spanning_tree minor minpack_lsquares minpack_solve min_vertex_cover min_vertex_cut mkdir mnewton mod mode_declare mode_identity ModeMatrix moebius mon2schur mono monomial_dimensions multibernstein_poly multi_display_for_texinfo multi_elem multinomial multinomial_coeff multi_orbit multiplot_mode multi_pui multsym multthru mycielski_graph nary natural_unit nc_degree ncexpt ncharpoly negative_picture neighbors new newcontext newdet new_graph newline newton new_variable next_prime nicedummies niceindices ninth nofix nonarray noncentral_moment nonmetricity nonnegintegerp nonscalarp nonzeroandfreeof notequal nounify nptetrad npv nroots nterms ntermst nthroot nullity nullspace num numbered_boundaries numberp number_to_octets num_distinct_partitions numerval numfactor num_partitions nusum nzeta nzetai nzetar octets_to_number octets_to_oid odd_girth oddp ode2 ode_check odelin oid_to_octets op opena opena_binary openr openr_binary openw openw_binary operatorp opsubst optimize %or orbit orbits ordergreat ordergreatp orderless orderlessp orthogonal_complement orthopoly_recur orthopoly_weight outermap out_neighbors outofpois pade parabolic_cylinder_d parametric parametric_surface parg parGosper parse_string parse_timedate part part2cont partfrac partition partition_set partpol path_digraph path_graph pathname_directory pathname_name pathname_type pdf_bernoulli pdf_beta pdf_binomial pdf_cauchy pdf_chi2 pdf_continuous_uniform pdf_discrete_uniform pdf_exp pdf_f pdf_gamma pdf_general_finite_discrete pdf_geometric pdf_gumbel pdf_hypergeometric pdf_laplace pdf_logistic pdf_lognormal pdf_negative_binomial pdf_noncentral_chi2 pdf_noncentral_student_t pdf_normal pdf_pareto pdf_poisson pdf_rank_sum pdf_rayleigh pdf_signed_rank pdf_student_t pdf_weibull pearson_skewness permanent permut permutation permutations petersen_graph petrov pickapart picture_equalp picturep piechart piechart_description planar_embedding playback plog plot2d plot3d plotdf ploteq plsquares pochhammer points poisdiff poisexpt poisint poismap poisplus poissimp poissubst poistimes poistrim polar polarform polartorect polar_to_xy poly_add poly_buchberger poly_buchberger_criterion poly_colon_ideal poly_content polydecomp poly_depends_p poly_elimination_ideal poly_exact_divide poly_expand poly_expt poly_gcd polygon poly_grobner poly_grobner_equal poly_grobner_member poly_grobner_subsetp poly_ideal_intersection poly_ideal_polysaturation poly_ideal_polysaturation1 poly_ideal_saturation poly_ideal_saturation1 poly_lcm poly_minimization polymod poly_multiply polynome2ele polynomialp poly_normal_form poly_normalize poly_normalize_list poly_polysaturation_extension poly_primitive_part poly_pseudo_divide poly_reduced_grobner poly_reduction poly_saturation_extension poly_s_polynomial poly_subtract polytocompanion pop postfix potential power_mod powerseries powerset prefix prev_prime primep primes principal_components print printf printfile print_graph printpois printprops prodrac product properties propvars psi psubst ptriangularize pui pui2comp pui2ele pui2polynome pui_direct puireduc push put pv qput qrange qty quad_control quad_qag quad_qagi quad_qagp quad_qags quad_qawc quad_qawf quad_qawo quad_qaws quadrilateral quantile quantile_bernoulli quantile_beta quantile_binomial quantile_cauchy quantile_chi2 quantile_continuous_uniform quantile_discrete_uniform quantile_exp quantile_f quantile_gamma quantile_general_finite_discrete quantile_geometric quantile_gumbel quantile_hypergeometric quantile_laplace quantile_logistic quantile_lognormal quantile_negative_binomial quantile_noncentral_chi2 quantile_noncentral_student_t quantile_normal quantile_pareto quantile_poisson quantile_rayleigh quantile_student_t quantile_weibull quartile_skewness quit qunit quotient racah_v racah_w radcan radius random random_bernoulli random_beta random_binomial random_bipartite_graph random_cauchy random_chi2 random_continuous_uniform random_digraph random_discrete_uniform random_exp random_f random_gamma random_general_finite_discrete random_geometric random_graph random_graph1 random_gumbel random_hypergeometric random_laplace random_logistic random_lognormal random_negative_binomial random_network random_noncentral_chi2 random_noncentral_student_t random_normal random_pareto random_permutation random_poisson random_rayleigh random_regular_graph random_student_t random_tournament random_tree random_weibull range rank rat ratcoef ratdenom ratdiff ratdisrep ratexpand ratinterpol rational rationalize ratnumer ratnump ratp ratsimp ratsubst ratvars ratweight read read_array read_binary_array read_binary_list read_binary_matrix readbyte readchar read_hashed_array readline read_list read_matrix read_nested_list readonly read_xpm real_imagpart_to_conjugate realpart realroots rearray rectangle rectform rectform_log_if_constant recttopolar rediff reduce_consts reduce_order region region_boundaries region_boundaries_plus rem remainder remarray rembox remcomps remcon remcoord remfun remfunction remlet remove remove_constvalue remove_dimensions remove_edge remove_fundamental_dimensions remove_fundamental_units remove_plot_option remove_vertex rempart remrule remsym remvalue rename rename_file reset reset_displays residue resolvante resolvante_alternee1 resolvante_bipartite resolvante_diedrale resolvante_klein resolvante_klein3 resolvante_produit_sym resolvante_unitaire resolvante_vierer rest resultant return reveal reverse revert revert2 rgb2level rhs ricci riemann rinvariant risch rk rmdir rncombine romberg room rootscontract round row rowop rowswap rreduce run_testsuite %s save saving scalarp scaled_bessel_i scaled_bessel_i0 scaled_bessel_i1 scalefactors scanmap scatterplot scatterplot_description scene schur2comp sconcat scopy scsimp scurvature sdowncase sec sech second sequal sequalignore set_alt_display setdifference set_draw_defaults set_edge_weight setelmx setequalp setify setp set_partitions set_plot_option set_prompt set_random_state set_tex_environment set_tex_environment_default setunits setup_autoload set_up_dot_simplifications set_vertex_label seventh sexplode sf sha1sum sha256sum shortest_path shortest_weighted_path show showcomps showratvars sierpinskiale sierpinskimap sign signum similaritytransform simp_inequality simplify_sum simplode simpmetderiv simtran sin sinh sinsert sinvertcase sixth skewness skewness_bernoulli skewness_beta skewness_binomial skewness_chi2 skewness_continuous_uniform skewness_discrete_uniform skewness_exp skewness_f skewness_gamma skewness_general_finite_discrete skewness_geometric skewness_gumbel skewness_hypergeometric skewness_laplace skewness_logistic skewness_lognormal skewness_negative_binomial skewness_noncentral_chi2 skewness_noncentral_student_t skewness_normal skewness_pareto skewness_poisson skewness_rayleigh skewness_student_t skewness_weibull slength smake small_rhombicosidodecahedron_graph small_rhombicuboctahedron_graph smax smin smismatch snowmap snub_cube_graph snub_dodecahedron_graph solve solve_rec solve_rec_rat some somrac sort sparse6_decode sparse6_encode sparse6_export sparse6_import specint spherical spherical_bessel_j spherical_bessel_y spherical_hankel1 spherical_hankel2 spherical_harmonic spherical_to_xyz splice split sposition sprint sqfr sqrt sqrtdenest sremove sremovefirst sreverse ssearch ssort sstatus ssubst ssubstfirst staircase standardize standardize_inverse_trig starplot starplot_description status std std1 std_bernoulli std_beta std_binomial std_chi2 std_continuous_uniform std_discrete_uniform std_exp std_f std_gamma std_general_finite_discrete std_geometric std_gumbel std_hypergeometric std_laplace std_logistic std_lognormal std_negative_binomial std_noncentral_chi2 std_noncentral_student_t std_normal std_pareto std_poisson std_rayleigh std_student_t std_weibull stemplot stirling stirling1 stirling2 strim striml strimr string stringout stringp strong_components struve_h struve_l sublis sublist sublist_indices submatrix subsample subset subsetp subst substinpart subst_parallel substpart substring subvar subvarp sum sumcontract summand_to_rec supcase supcontext symbolp symmdifference symmetricp system take_channel take_inference tan tanh taylor taylorinfo taylorp taylor_simplifier taytorat tcl_output tcontract tellrat tellsimp tellsimpafter tentex tenth test_mean test_means_difference test_normality test_proportion test_proportions_difference test_rank_sum test_sign test_signed_rank test_variance test_variance_ratio tex tex1 tex_display texput %th third throw time timedate timer timer_info tldefint tlimit todd_coxeter toeplitz tokens to_lisp topological_sort to_poly to_poly_solve totaldisrep totalfourier totient tpartpol trace tracematrix trace_options transform_sample translate translate_file transpose treefale tree_reduce treillis treinat triangle triangularize trigexpand trigrat trigreduce trigsimp trunc truncate truncated_cube_graph truncated_dodecahedron_graph truncated_icosahedron_graph truncated_tetrahedron_graph tr_warnings_get tube tutte_graph ueivects uforget ultraspherical underlying_graph undiff union unique uniteigenvectors unitp units unit_step unitvector unorder unsum untellrat untimer untrace uppercasep uricci uriemann uvect vandermonde_matrix var var1 var_bernoulli var_beta var_binomial var_chi2 var_continuous_uniform var_discrete_uniform var_exp var_f var_gamma var_general_finite_discrete var_geometric var_gumbel var_hypergeometric var_laplace var_logistic var_lognormal var_negative_binomial var_noncentral_chi2 var_noncentral_student_t var_normal var_pareto var_poisson var_rayleigh var_student_t var_weibull vector vectorpotential vectorsimp verbify vers vertex_coloring vertex_connectivity vertex_degree vertex_distance vertex_eccentricity vertex_in_degree vertex_out_degree vertices vertices_to_cycle vertices_to_path %w weyl wheel_graph wiener_index wigner_3j wigner_6j wigner_9j with_stdout write_binary_data writebyte write_data writefile wronskian xreduce xthru %y Zeilberger zeroequiv zerofor zeromatrix zeromatrixp zeta zgeev zheev zlange zn_add_table zn_carmichael_lambda zn_characteristic_factors zn_determinant zn_factor_generators zn_invert_by_lu zn_log zn_mult_table absboxchar activecontexts adapt_depth additive adim aform algebraic algepsilon algexact aliases allbut all_dotsimp_denoms allocation allsym alphabetic animation antisymmetric arrays askexp assume_pos assume_pos_pred assumescalar asymbol atomgrad atrig1 axes axis_3d axis_bottom axis_left axis_right axis_top azimuth background background_color backsubst berlefact bernstein_explicit besselexpand beta_args_sum_to_integer beta_expand bftorat bftrunc bindtest border boundaries_array box boxchar breakup %c capping cauchysum cbrange cbtics center cflength cframe_flag cnonmet_flag color color_bar color_bar_tics colorbox columns commutative complex cone context contexts contour contour_levels cosnpiflag ctaypov ctaypt ctayswitch ctayvar ct_coords ctorsion_flag ctrgsimp cube current_let_rule_package cylinder data_file_name debugmode decreasing default_let_rule_package delay dependencies derivabbrev derivsubst detout diagmetric diff dim dimensions dispflag display2d|10 display_format_internal distribute_over doallmxops domain domxexpt domxmxops domxnctimes dontfactor doscmxops doscmxplus dot0nscsimp dot0simp dot1simp dotassoc dotconstrules dotdistrib dotexptsimp dotident dotscrules draw_graph_program draw_realpart edge_color edge_coloring edge_partition edge_type edge_width %edispflag elevation %emode endphi endtheta engineering_format_floats enhanced3d %enumer epsilon_lp erfflag erf_representation errormsg error_size error_syms error_type %e_to_numlog eval even evenfun evflag evfun ev_point expandwrt_denom expintexpand expintrep expon expop exptdispflag exptisolate exptsubst facexpand facsum_combine factlim factorflag factorial_expand factors_only fb feature features file_name file_output_append file_search_demo file_search_lisp file_search_maxima|10 file_search_tests file_search_usage file_type_lisp file_type_maxima|10 fill_color fill_density filled_func fixed_vertices flipflag float2bf font font_size fortindent fortspaces fpprec fpprintprec functions gamma_expand gammalim gdet genindex gensumnum GGFCFMAX GGFINFINITY globalsolve gnuplot_command gnuplot_curve_styles gnuplot_curve_titles gnuplot_default_term_command gnuplot_dumb_term_command gnuplot_file_args gnuplot_file_name gnuplot_out_file gnuplot_pdf_term_command gnuplot_pm3d gnuplot_png_term_command gnuplot_postamble gnuplot_preamble gnuplot_ps_term_command gnuplot_svg_term_command gnuplot_term gnuplot_view_args Gosper_in_Zeilberger gradefs grid grid2d grind halfangles head_angle head_both head_length head_type height hypergeometric_representation %iargs ibase icc1 icc2 icounter idummyx ieqnprint ifb ifc1 ifc2 ifg ifgi ifr iframe_bracket_form ifri igeowedge_flag ikt1 ikt2 imaginary inchar increasing infeval infinity inflag infolists inm inmc1 inmc2 intanalysis integer integervalued integrate_use_rootsof integration_constant integration_constant_counter interpolate_color intfaclim ip_grid ip_grid_in irrational isolate_wrt_times iterations itr julia_parameter %k1 %k2 keepfloat key key_pos kinvariant kt label label_alignment label_orientation labels lassociative lbfgs_ncorrections lbfgs_nfeval_max leftjust legend letrat let_rule_packages lfg lg lhospitallim limsubst linear linear_solver linechar linel|10 linenum line_type linewidth line_width linsolve_params linsolvewarn lispdisp listarith listconstvars listdummyvars lmxchar load_pathname loadprint logabs logarc logcb logconcoeffp logexpand lognegint logsimp logx logx_secondary logy logy_secondary logz lriem m1pbranch macroexpansion macros mainvar manual_demo maperror mapprint matrix_element_add matrix_element_mult matrix_element_transpose maxapplydepth maxapplyheight maxima_tempdir|10 maxima_userdir|10 maxnegex MAX_ORD maxposex maxpsifracdenom maxpsifracnum maxpsinegint maxpsiposint maxtayorder mesh_lines_color method mod_big_prime mode_check_errorp mode_checkp mode_check_warnp mod_test mod_threshold modular_linear_solver modulus multiplicative multiplicities myoptions nary negdistrib negsumdispflag newline newtonepsilon newtonmaxiter nextlayerfactor niceindicespref nm nmc noeval nolabels nonegative_lp noninteger nonscalar noun noundisp nouns np npi nticks ntrig numer numer_pbranch obase odd oddfun opacity opproperties opsubst optimprefix optionset orientation origin orthopoly_returns_intervals outative outchar packagefile palette partswitch pdf_file pfeformat phiresolution %piargs piece pivot_count_sx pivot_max_sx plot_format plot_options plot_realpart png_file pochhammer_max_index points pointsize point_size points_joined point_type poislim poisson poly_coefficient_ring poly_elimination_order polyfactor poly_grobner_algorithm poly_grobner_debug poly_monomial_order poly_primary_elimination_order poly_return_term_list poly_secondary_elimination_order poly_top_reduction_only posfun position powerdisp pred prederror primep_number_of_tests product_use_gamma program programmode promote_float_to_bigfloat prompt proportional_axes props psexpand ps_file radexpand radius radsubstflag rassociative ratalgdenom ratchristof ratdenomdivide rateinstein ratepsilon ratfac rational ratmx ratprint ratriemann ratsimpexpons ratvarswitch ratweights ratweyl ratwtlvl real realonly redraw refcheck resolution restart resultant ric riem rmxchar %rnum_list rombergabs rombergit rombergmin rombergtol rootsconmode rootsepsilon run_viewer same_xy same_xyz savedef savefactors scalar scalarmatrixp scale scale_lp setcheck setcheckbreak setval show_edge_color show_edges show_edge_type show_edge_width show_id show_label showtime show_vertex_color show_vertex_size show_vertex_type show_vertices show_weight simp simplified_output simplify_products simpproduct simpsum sinnpiflag solvedecomposes solveexplicit solvefactors solvenullwarn solveradcan solvetrigwarn space sparse sphere spring_embedding_depth sqrtdispflag stardisp startphi starttheta stats_numer stringdisp structures style sublis_apply_lambda subnumsimp sumexpand sumsplitfact surface surface_hide svg_file symmetric tab taylordepth taylor_logexpand taylor_order_coefficients taylor_truncate_polynomials tensorkill terminal testsuite_files thetaresolution timer_devalue title tlimswitch tr track transcompile transform transform_xy translate_fast_arrays transparent transrun tr_array_as_ref tr_bound_function_applyp tr_file_tty_messagesp tr_float_can_branch_complex tr_function_call_default trigexpandplus trigexpandtimes triginverses trigsign trivial_solutions tr_numer tr_optimize_max_loop tr_semicompile tr_state_vars tr_warn_bad_function_calls tr_warn_fexpr tr_warn_meval tr_warn_mode tr_warn_undeclared tr_warn_undefined_variable tstep ttyoff tube_extremes ufg ug %unitexpand unit_vectors uric uriem use_fast_arrays user_preamble usersetunits values vect_cross verbose vertex_color vertex_coloring vertex_partition vertex_size vertex_type view warnings weyl width windowname windowtitle wired_surface wireframe xaxis xaxis_color xaxis_secondary xaxis_type xaxis_width xlabel xlabel_secondary xlength xrange xrange_secondary xtics xtics_axis xtics_rotate xtics_rotate_secondary xtics_secondary xtics_secondary_axis xu_grid x_voxel xy_file xyplane xy_scale yaxis yaxis_color yaxis_secondary yaxis_type yaxis_width ylabel ylabel_secondary ylength yrange yrange_secondary ytics ytics_axis ytics_rotate ytics_rotate_secondary ytics_secondary ytics_secondary_axis yv_grid y_voxel yx_ratio zaxis zaxis_color zaxis_type zaxis_width zeroa zerob zerobern zeta%pi zlabel zlabel_rotate zlength zmin zn_primroot_limit zn_primroot_pretest";
    const SYMBOLS = "_ __ %|0 %%|0";
    return {
      name: "Maxima",
      keywords: {
        $pattern: "[A-Za-z_%][0-9A-Za-z_%]*",
        keyword: KEYWORDS2,
        literal: LITERALS2,
        built_in: BUILTIN_FUNCTIONS,
        symbol: SYMBOLS
      },
      contains: [
        {
          className: "comment",
          begin: "/\\*",
          end: "\\*/",
          contains: ["self"]
        },
        hljs.QUOTE_STRING_MODE,
        {
          className: "number",
          relevance: 0,
          variants: [
            {
              // float number w/ exponent
              // hmm, I wonder if we ought to include other exponent markers?
              begin: "\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Ee][-+]?\\d+\\b"
            },
            {
              // bigfloat number
              begin: "\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Bb][-+]?\\d+\\b",
              relevance: 10
            },
            {
              // float number w/out exponent
              // Doesn't seem to recognize floats which start with '.'
              begin: "\\b(\\.\\d+|\\d+\\.\\d+)\\b"
            },
            {
              // integer in base up to 36
              // Doesn't seem to recognize integers which end with '.'
              begin: "\\b(\\d+|0[0-9A-Za-z]+)\\.?\\b"
            }
          ]
        }
      ],
      illegal: /@/
    };
  }
  function mel(hljs) {
    return {
      name: "MEL",
      keywords: "int float string vector matrix if else switch case default while do for in break continue global proc return about abs addAttr addAttributeEditorNodeHelp addDynamic addNewShelfTab addPP addPanelCategory addPrefixToName advanceToNextDrivenKey affectedNet affects aimConstraint air alias aliasAttr align alignCtx alignCurve alignSurface allViewFit ambientLight angle angleBetween animCone animCurveEditor animDisplay animView annotate appendStringArray applicationName applyAttrPreset applyTake arcLenDimContext arcLengthDimension arclen arrayMapper art3dPaintCtx artAttrCtx artAttrPaintVertexCtx artAttrSkinPaintCtx artAttrTool artBuildPaintMenu artFluidAttrCtx artPuttyCtx artSelectCtx artSetPaintCtx artUserPaintCtx assignCommand assignInputDevice assignViewportFactories attachCurve attachDeviceAttr attachSurface attrColorSliderGrp attrCompatibility attrControlGrp attrEnumOptionMenu attrEnumOptionMenuGrp attrFieldGrp attrFieldSliderGrp attrNavigationControlGrp attrPresetEditWin attributeExists attributeInfo attributeMenu attributeQuery autoKeyframe autoPlace bakeClip bakeFluidShading bakePartialHistory bakeResults bakeSimulation basename basenameEx batchRender bessel bevel bevelPlus binMembership bindSkin blend2 blendShape blendShapeEditor blendShapePanel blendTwoAttr blindDataType boneLattice boundary boxDollyCtx boxZoomCtx bufferCurve buildBookmarkMenu buildKeyframeMenu button buttonManip CBG cacheFile cacheFileCombine cacheFileMerge cacheFileTrack camera cameraView canCreateManip canvas capitalizeString catch catchQuiet ceil changeSubdivComponentDisplayLevel changeSubdivRegion channelBox character characterMap characterOutlineEditor characterize chdir checkBox checkBoxGrp checkDefaultRenderGlobals choice circle circularFillet clamp clear clearCache clip clipEditor clipEditorCurrentTimeCtx clipSchedule clipSchedulerOutliner clipTrimBefore closeCurve closeSurface cluster cmdFileOutput cmdScrollFieldExecuter cmdScrollFieldReporter cmdShell coarsenSubdivSelectionList collision color colorAtPoint colorEditor colorIndex colorIndexSliderGrp colorSliderButtonGrp colorSliderGrp columnLayout commandEcho commandLine commandPort compactHairSystem componentEditor compositingInterop computePolysetVolume condition cone confirmDialog connectAttr connectControl connectDynamic connectJoint connectionInfo constrain constrainValue constructionHistory container containsMultibyte contextInfo control convertFromOldLayers convertIffToPsd convertLightmap convertSolidTx convertTessellation convertUnit copyArray copyFlexor copyKey copySkinWeights cos cpButton cpCache cpClothSet cpCollision cpConstraint cpConvClothToMesh cpForces cpGetSolverAttr cpPanel cpProperty cpRigidCollisionFilter cpSeam cpSetEdit cpSetSolverAttr cpSolver cpSolverTypes cpTool cpUpdateClothUVs createDisplayLayer createDrawCtx createEditor createLayeredPsdFile createMotionField createNewShelf createNode createRenderLayer createSubdivRegion cross crossProduct ctxAbort ctxCompletion ctxEditMode ctxTraverse currentCtx currentTime currentTimeCtx currentUnit curve curveAddPtCtx curveCVCtx curveEPCtx curveEditorCtx curveIntersect curveMoveEPCtx curveOnSurface curveSketchCtx cutKey cycleCheck cylinder dagPose date defaultLightListCheckBox defaultNavigation defineDataServer defineVirtualDevice deformer deg_to_rad delete deleteAttr deleteShadingGroupsAndMaterials deleteShelfTab deleteUI deleteUnusedBrushes delrandstr detachCurve detachDeviceAttr detachSurface deviceEditor devicePanel dgInfo dgdirty dgeval dgtimer dimWhen directKeyCtx directionalLight dirmap dirname disable disconnectAttr disconnectJoint diskCache displacementToPoly displayAffected displayColor displayCull displayLevelOfDetail displayPref displayRGBColor displaySmoothness displayStats displayString displaySurface distanceDimContext distanceDimension doBlur dolly dollyCtx dopeSheetEditor dot dotProduct doubleProfileBirailSurface drag dragAttrContext draggerContext dropoffLocator duplicate duplicateCurve duplicateSurface dynCache dynControl dynExport dynExpression dynGlobals dynPaintEditor dynParticleCtx dynPref dynRelEdPanel dynRelEditor dynamicLoad editAttrLimits editDisplayLayerGlobals editDisplayLayerMembers editRenderLayerAdjustment editRenderLayerGlobals editRenderLayerMembers editor editorTemplate effector emit emitter enableDevice encodeString endString endsWith env equivalent equivalentTol erf error eval evalDeferred evalEcho event exactWorldBoundingBox exclusiveLightCheckBox exec executeForEachObject exists exp expression expressionEditorListen extendCurve extendSurface extrude fcheck fclose feof fflush fgetline fgetword file fileBrowserDialog fileDialog fileExtension fileInfo filetest filletCurve filter filterCurve filterExpand filterStudioImport findAllIntersections findAnimCurves findKeyframe findMenuItem findRelatedSkinCluster finder firstParentOf fitBspline flexor floatEq floatField floatFieldGrp floatScrollBar floatSlider floatSlider2 floatSliderButtonGrp floatSliderGrp floor flow fluidCacheInfo fluidEmitter fluidVoxelInfo flushUndo fmod fontDialog fopen formLayout format fprint frameLayout fread freeFormFillet frewind fromNativePath fwrite gamma gauss geometryConstraint getApplicationVersionAsFloat getAttr getClassification getDefaultBrush getFileList getFluidAttr getInputDeviceRange getMayaPanelTypes getModifiers getPanel getParticleAttr getPluginResource getenv getpid glRender glRenderEditor globalStitch gmatch goal gotoBindPose grabColor gradientControl gradientControlNoAttr graphDollyCtx graphSelectContext graphTrackCtx gravity grid gridLayout group groupObjectsByName HfAddAttractorToAS HfAssignAS HfBuildEqualMap HfBuildFurFiles HfBuildFurImages HfCancelAFR HfConnectASToHF HfCreateAttractor HfDeleteAS HfEditAS HfPerformCreateAS HfRemoveAttractorFromAS HfSelectAttached HfSelectAttractors HfUnAssignAS hardenPointCurve hardware hardwareRenderPanel headsUpDisplay headsUpMessage help helpLine hermite hide hilite hitTest hotBox hotkey hotkeyCheck hsv_to_rgb hudButton hudSlider hudSliderButton hwReflectionMap hwRender hwRenderLoad hyperGraph hyperPanel hyperShade hypot iconTextButton iconTextCheckBox iconTextRadioButton iconTextRadioCollection iconTextScrollList iconTextStaticLabel ikHandle ikHandleCtx ikHandleDisplayScale ikSolver ikSplineHandleCtx ikSystem ikSystemInfo ikfkDisplayMethod illustratorCurves image imfPlugins inheritTransform insertJoint insertJointCtx insertKeyCtx insertKnotCurve insertKnotSurface instance instanceable instancer intField intFieldGrp intScrollBar intSlider intSliderGrp interToUI internalVar intersect iprEngine isAnimCurve isConnected isDirty isParentOf isSameObject isTrue isValidObjectName isValidString isValidUiName isolateSelect itemFilter itemFilterAttr itemFilterRender itemFilterType joint jointCluster jointCtx jointDisplayScale jointLattice keyTangent keyframe keyframeOutliner keyframeRegionCurrentTimeCtx keyframeRegionDirectKeyCtx keyframeRegionDollyCtx keyframeRegionInsertKeyCtx keyframeRegionMoveKeyCtx keyframeRegionScaleKeyCtx keyframeRegionSelectKeyCtx keyframeRegionSetKeyCtx keyframeRegionTrackCtx keyframeStats lassoContext lattice latticeDeformKeyCtx launch launchImageEditor layerButton layeredShaderPort layeredTexturePort layout layoutDialog lightList lightListEditor lightListPanel lightlink lineIntersection linearPrecision linstep listAnimatable listAttr listCameras listConnections listDeviceAttachments listHistory listInputDeviceAxes listInputDeviceButtons listInputDevices listMenuAnnotation listNodeTypes listPanelCategories listRelatives listSets listTransforms listUnselected listerEditor loadFluid loadNewShelf loadPlugin loadPluginLanguageResources loadPrefObjects localizedPanelLabel lockNode loft log longNameOf lookThru ls lsThroughFilter lsType lsUI Mayatomr mag makeIdentity makeLive makePaintable makeRoll makeSingleSurface makeTubeOn makebot manipMoveContext manipMoveLimitsCtx manipOptions manipRotateContext manipRotateLimitsCtx manipScaleContext manipScaleLimitsCtx marker match max memory menu menuBarLayout menuEditor menuItem menuItemToShelf menuSet menuSetPref messageLine min minimizeApp mirrorJoint modelCurrentTimeCtx modelEditor modelPanel mouse movIn movOut move moveIKtoFK moveKeyCtx moveVertexAlongDirection multiProfileBirailSurface mute nParticle nameCommand nameField namespace namespaceInfo newPanelItems newton nodeCast nodeIconButton nodeOutliner nodePreset nodeType noise nonLinear normalConstraint normalize nurbsBoolean nurbsCopyUVSet nurbsCube nurbsEditUV nurbsPlane nurbsSelect nurbsSquare nurbsToPoly nurbsToPolygonsPref nurbsToSubdiv nurbsToSubdivPref nurbsUVSet nurbsViewDirectionVector objExists objectCenter objectLayer objectType objectTypeUI obsoleteProc oceanNurbsPreviewPlane offsetCurve offsetCurveOnSurface offsetSurface openGLExtension openMayaPref optionMenu optionMenuGrp optionVar orbit orbitCtx orientConstraint outlinerEditor outlinerPanel overrideModifier paintEffectsDisplay pairBlend palettePort paneLayout panel panelConfiguration panelHistory paramDimContext paramDimension paramLocator parent parentConstraint particle particleExists particleInstancer particleRenderInfo partition pasteKey pathAnimation pause pclose percent performanceOptions pfxstrokes pickWalk picture pixelMove planarSrf plane play playbackOptions playblast plugAttr plugNode pluginInfo pluginResourceUtil pointConstraint pointCurveConstraint pointLight pointMatrixMult pointOnCurve pointOnSurface pointPosition poleVectorConstraint polyAppend polyAppendFacetCtx polyAppendVertex polyAutoProjection polyAverageNormal polyAverageVertex polyBevel polyBlendColor polyBlindData polyBoolOp polyBridgeEdge polyCacheMonitor polyCheck polyChipOff polyClipboard polyCloseBorder polyCollapseEdge polyCollapseFacet polyColorBlindData polyColorDel polyColorPerVertex polyColorSet polyCompare polyCone polyCopyUV polyCrease polyCreaseCtx polyCreateFacet polyCreateFacetCtx polyCube polyCut polyCutCtx polyCylinder polyCylindricalProjection polyDelEdge polyDelFacet polyDelVertex polyDuplicateAndConnect polyDuplicateEdge polyEditUV polyEditUVShell polyEvaluate polyExtrudeEdge polyExtrudeFacet polyExtrudeVertex polyFlipEdge polyFlipUV polyForceUV polyGeoSampler polyHelix polyInfo polyInstallAction polyLayoutUV polyListComponentConversion polyMapCut polyMapDel polyMapSew polyMapSewMove polyMergeEdge polyMergeEdgeCtx polyMergeFacet polyMergeFacetCtx polyMergeUV polyMergeVertex polyMirrorFace polyMoveEdge polyMoveFacet polyMoveFacetUV polyMoveUV polyMoveVertex polyNormal polyNormalPerVertex polyNormalizeUV polyOptUvs polyOptions polyOutput polyPipe polyPlanarProjection polyPlane polyPlatonicSolid polyPoke polyPrimitive polyPrism polyProjection polyPyramid polyQuad polyQueryBlindData polyReduce polySelect polySelectConstraint polySelectConstraintMonitor polySelectCtx polySelectEditCtx polySeparate polySetToFaceNormal polySewEdge polyShortestPathCtx polySmooth polySoftEdge polySphere polySphericalProjection polySplit polySplitCtx polySplitEdge polySplitRing polySplitVertex polyStraightenUVBorder polySubdivideEdge polySubdivideFacet polyToSubdiv polyTorus polyTransfer polyTriangulate polyUVSet polyUnite polyWedgeFace popen popupMenu pose pow preloadRefEd print progressBar progressWindow projFileViewer projectCurve projectTangent projectionContext projectionManip promptDialog propModCtx propMove psdChannelOutliner psdEditTextureFile psdExport psdTextureFile putenv pwd python querySubdiv quit rad_to_deg radial radioButton radioButtonGrp radioCollection radioMenuItemCollection rampColorPort rand randomizeFollicles randstate rangeControl readTake rebuildCurve rebuildSurface recordAttr recordDevice redo reference referenceEdit referenceQuery refineSubdivSelectionList refresh refreshAE registerPluginResource rehash reloadImage removeJoint removeMultiInstance removePanelCategory rename renameAttr renameSelectionList renameUI render renderGlobalsNode renderInfo renderLayerButton renderLayerParent renderLayerPostProcess renderLayerUnparent renderManip renderPartition renderQualityNode renderSettings renderThumbnailUpdate renderWindowEditor renderWindowSelectContext renderer reorder reorderDeformers requires reroot resampleFluid resetAE resetPfxToPolyCamera resetTool resolutionNode retarget reverseCurve reverseSurface revolve rgb_to_hsv rigidBody rigidSolver roll rollCtx rootOf rot rotate rotationInterpolation roundConstantRadius rowColumnLayout rowLayout runTimeCommand runup sampleImage saveAllShelves saveAttrPreset saveFluid saveImage saveInitialState saveMenu savePrefObjects savePrefs saveShelf saveToolSettings scale scaleBrushBrightness scaleComponents scaleConstraint scaleKey scaleKeyCtx sceneEditor sceneUIReplacement scmh scriptCtx scriptEditorInfo scriptJob scriptNode scriptTable scriptToShelf scriptedPanel scriptedPanelType scrollField scrollLayout sculpt searchPathArray seed selLoadSettings select selectContext selectCurveCV selectKey selectKeyCtx selectKeyframeRegionCtx selectMode selectPref selectPriority selectType selectedNodes selectionConnection separator setAttr setAttrEnumResource setAttrMapping setAttrNiceNameResource setConstraintRestPosition setDefaultShadingGroup setDrivenKeyframe setDynamic setEditCtx setEditor setFluidAttr setFocus setInfinity setInputDeviceMapping setKeyCtx setKeyPath setKeyframe setKeyframeBlendshapeTargetWts setMenuMode setNodeNiceNameResource setNodeTypeFlag setParent setParticleAttr setPfxToPolyCamera setPluginResource setProject setStampDensity setStartupMessage setState setToolTo setUITemplate setXformManip sets shadingConnection shadingGeometryRelCtx shadingLightRelCtx shadingNetworkCompare shadingNode shapeCompare shelfButton shelfLayout shelfTabLayout shellField shortNameOf showHelp showHidden showManipCtx showSelectionInTitle showShadingGroupAttrEditor showWindow sign simplify sin singleProfileBirailSurface size sizeBytes skinCluster skinPercent smoothCurve smoothTangentSurface smoothstep snap2to2 snapKey snapMode snapTogetherCtx snapshot soft softMod softModCtx sort sound soundControl source spaceLocator sphere sphrand spotLight spotLightPreviewPort spreadSheetEditor spring sqrt squareSurface srtContext stackTrace startString startsWith stitchAndExplodeShell stitchSurface stitchSurfacePoints strcmp stringArrayCatenate stringArrayContains stringArrayCount stringArrayInsertAtIndex stringArrayIntersector stringArrayRemove stringArrayRemoveAtIndex stringArrayRemoveDuplicates stringArrayRemoveExact stringArrayToString stringToStringArray strip stripPrefixFromName stroke subdAutoProjection subdCleanTopology subdCollapse subdDuplicateAndConnect subdEditUV subdListComponentConversion subdMapCut subdMapSewMove subdMatchTopology subdMirror subdToBlind subdToPoly subdTransferUVsToCache subdiv subdivCrease subdivDisplaySmoothness substitute substituteAllString substituteGeometry substring surface surfaceSampler surfaceShaderList swatchDisplayPort switchTable symbolButton symbolCheckBox sysFile system tabLayout tan tangentConstraint texLatticeDeformContext texManipContext texMoveContext texMoveUVShellContext texRotateContext texScaleContext texSelectContext texSelectShortestPathCtx texSmudgeUVContext texWinToolCtx text textCurves textField textFieldButtonGrp textFieldGrp textManip textScrollList textToShelf textureDisplacePlane textureHairColor texturePlacementContext textureWindow threadCount threePointArcCtx timeControl timePort timerX toNativePath toggle toggleAxis toggleWindowVisibility tokenize tokenizeList tolerance tolower toolButton toolCollection toolDropped toolHasOptions toolPropertyWindow torus toupper trace track trackCtx transferAttributes transformCompare transformLimits translator trim trunc truncateFluidCache truncateHairCache tumble tumbleCtx turbulence twoPointArcCtx uiRes uiTemplate unassignInputDevice undo undoInfo ungroup uniform unit unloadPlugin untangleUV untitledFileName untrim upAxis updateAE userCtx uvLink uvSnapshot validateShelfName vectorize view2dToolCtx viewCamera viewClipPlane viewFit viewHeadOn viewLookAt viewManip viewPlace viewSet visor volumeAxis vortex waitCursor warning webBrowser webBrowserPrefs whatIs window windowPref wire wireContext workspace wrinkle wrinkleContext writeTake xbmLangPathList xform",
      illegal: "</",
      contains: [
        hljs.C_NUMBER_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "`",
          end: "`",
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          // eats variables
          begin: /[$%@](\^\w\b|#\w+|[^\s\w{]|\{\w+\}|\w+)/
        },
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  function mercury(hljs) {
    const KEYWORDS2 = {
      keyword: "module use_module import_module include_module end_module initialise mutable initialize finalize finalise interface implementation pred mode func type inst solver any_pred any_func is semidet det nondet multi erroneous failure cc_nondet cc_multi typeclass instance where pragma promise external trace atomic or_else require_complete_switch require_det require_semidet require_multi require_nondet require_cc_multi require_cc_nondet require_erroneous require_failure",
      meta: (
        // pragma
        "inline no_inline type_spec source_file fact_table obsolete memo loop_check minimal_model terminates does_not_terminate check_termination promise_equivalent_clauses foreign_proc foreign_decl foreign_code foreign_type foreign_import_module foreign_export_enum foreign_export foreign_enum may_call_mercury will_not_call_mercury thread_safe not_thread_safe maybe_thread_safe promise_pure promise_semipure tabled_for_io local untrailed trailed attach_to_io_state can_pass_as_mercury_type stable will_not_throw_exception may_modify_trail will_not_modify_trail may_duplicate may_not_duplicate affects_liveness does_not_affect_liveness doesnt_affect_liveness no_sharing unknown_sharing sharing"
      ),
      built_in: "some all not if then else true fail false try catch catch_any semidet_true semidet_false semidet_fail impure_true impure semipure"
    };
    const COMMENT2 = hljs.COMMENT("%", "$");
    const NUMCODE = {
      className: "number",
      begin: "0'.\\|0[box][0-9a-fA-F]*"
    };
    const ATOM = hljs.inherit(hljs.APOS_STRING_MODE, { relevance: 0 });
    const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { relevance: 0 });
    const STRING_FMT = {
      className: "subst",
      begin: "\\\\[abfnrtv]\\|\\\\x[0-9a-fA-F]*\\\\\\|%[-+# *.0-9]*[dioxXucsfeEgGp]",
      relevance: 0
    };
    STRING.contains = STRING.contains.slice();
    STRING.contains.push(STRING_FMT);
    const IMPLICATION = {
      className: "built_in",
      variants: [
        { begin: "<=>" },
        {
          begin: "<=",
          relevance: 0
        },
        {
          begin: "=>",
          relevance: 0
        },
        { begin: "/\\\\" },
        { begin: "\\\\/" }
      ]
    };
    const HEAD_BODY_CONJUNCTION = {
      className: "built_in",
      variants: [
        { begin: ":-\\|-->" },
        {
          begin: "=",
          relevance: 0
        }
      ]
    };
    return {
      name: "Mercury",
      aliases: [
        "m",
        "moo"
      ],
      keywords: KEYWORDS2,
      contains: [
        IMPLICATION,
        HEAD_BODY_CONJUNCTION,
        COMMENT2,
        hljs.C_BLOCK_COMMENT_MODE,
        NUMCODE,
        hljs.NUMBER_MODE,
        ATOM,
        STRING,
        {
          // relevance booster
          begin: /:-/
        },
        {
          // relevance booster
          begin: /\.$/
        }
      ]
    };
  }
  function mipsasm(hljs) {
    return {
      name: "MIPS Assembly",
      case_insensitive: true,
      aliases: ["mips"],
      keywords: {
        $pattern: "\\.?" + hljs.IDENT_RE,
        meta: (
          // GNU preprocs
          ".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .ltorg "
        ),
        built_in: "$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 zero at v0 v1 a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 s0 s1 s2 s3 s4 s5 s6 s7 s8 k0 k1 gp sp fp ra $f0 $f1 $f2 $f2 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $f11 $f12 $f13 $f14 $f15 $f16 $f17 $f18 $f19 $f20 $f21 $f22 $f23 $f24 $f25 $f26 $f27 $f28 $f29 $f30 $f31 Context Random EntryLo0 EntryLo1 Context PageMask Wired EntryHi HWREna BadVAddr Count Compare SR IntCtl SRSCtl SRSMap Cause EPC PRId EBase Config Config1 Config2 Config3 LLAddr Debug DEPC DESAVE CacheErr ECC ErrorEPC TagLo DataLo TagHi DataHi WatchLo WatchHi PerfCtl PerfCnt "
        // Coprocessor 0 registers
      },
      contains: [
        {
          className: "keyword",
          begin: "\\b(addi?u?|andi?|b(al)?|beql?|bgez(al)?l?|bgtzl?|blezl?|bltz(al)?l?|bnel?|cl[oz]|divu?|ext|ins|j(al)?|jalr(\\.hb)?|jr(\\.hb)?|lbu?|lhu?|ll|lui|lw[lr]?|maddu?|mfhi|mflo|movn|movz|move|msubu?|mthi|mtlo|mul|multu?|nop|nor|ori?|rotrv?|sb|sc|se[bh]|sh|sllv?|slti?u?|srav?|srlv?|subu?|sw[lr]?|xori?|wsbh|abs\\.[sd]|add\\.[sd]|alnv.ps|bc1[ft]l?|c\\.(s?f|un|u?eq|[ou]lt|[ou]le|ngle?|seq|l[et]|ng[et])\\.[sd]|(ceil|floor|round|trunc)\\.[lw]\\.[sd]|cfc1|cvt\\.d\\.[lsw]|cvt\\.l\\.[dsw]|cvt\\.ps\\.s|cvt\\.s\\.[dlw]|cvt\\.s\\.p[lu]|cvt\\.w\\.[dls]|div\\.[ds]|ldx?c1|luxc1|lwx?c1|madd\\.[sd]|mfc1|mov[fntz]?\\.[ds]|msub\\.[sd]|mth?c1|mul\\.[ds]|neg\\.[ds]|nmadd\\.[ds]|nmsub\\.[ds]|p[lu][lu]\\.ps|recip\\.fmt|r?sqrt\\.[ds]|sdx?c1|sub\\.[ds]|suxc1|swx?c1|break|cache|d?eret|[de]i|ehb|mfc0|mtc0|pause|prefx?|rdhwr|rdpgpr|sdbbp|ssnop|synci?|syscall|teqi?|tgei?u?|tlb(p|r|w[ir])|tlti?u?|tnei?|wait|wrpgpr)",
          end: "\\s"
        },
        // lines ending with ; or # aren't really comments, probably auto-detect fail
        hljs.COMMENT("[;#](?!\\s*$)", "$"),
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "'",
          end: "[^\\\\]'",
          relevance: 0
        },
        {
          className: "title",
          begin: "\\|",
          end: "\\|",
          illegal: "\\n",
          relevance: 0
        },
        {
          className: "number",
          variants: [
            {
              // hex
              begin: "0x[0-9a-f]+"
            },
            {
              // bare number
              begin: "\\b-?\\d+"
            }
          ],
          relevance: 0
        },
        {
          className: "symbol",
          variants: [
            {
              // GNU MIPS syntax
              begin: "^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"
            },
            {
              // numbered local labels
              begin: "^\\s*[0-9]+:"
            },
            {
              // number local label reference (backwards, forwards)
              begin: "[0-9]+[bf]"
            }
          ],
          relevance: 0
        }
      ],
      // forward slashes are not allowed
      illegal: /\//
    };
  }
  function mizar(hljs) {
    return {
      name: "Mizar",
      keywords: "environ vocabularies notations constructors definitions registrations theorems schemes requirements begin end definition registration cluster existence pred func defpred deffunc theorem proof let take assume then thus hence ex for st holds consider reconsider such that and in provided of as from be being by means equals implies iff redefine define now not or attr is mode suppose per cases set thesis contradiction scheme reserve struct correctness compatibility coherence symmetry assymetry reflexivity irreflexivity connectedness uniqueness commutativity idempotence involutiveness projectivity",
      contains: [hljs.COMMENT("::", "$")]
    };
  }
  function mojolicious(hljs) {
    return {
      name: "Mojolicious",
      subLanguage: "xml",
      contains: [
        {
          className: "meta",
          begin: "^__(END|DATA)__$"
        },
        // mojolicious line
        {
          begin: "^\\s*%{1,2}={0,2}",
          end: "$",
          subLanguage: "perl"
        },
        // mojolicious block
        {
          begin: "<%{1,2}={0,2}",
          end: "={0,1}%>",
          subLanguage: "perl",
          excludeBegin: true,
          excludeEnd: true
        }
      ]
    };
  }
  function monkey(hljs) {
    const NUMBER = {
      className: "number",
      relevance: 0,
      variants: [
        { begin: "[$][a-fA-F0-9]+" },
        hljs.NUMBER_MODE
      ]
    };
    const FUNC_DEFINITION = {
      variants: [
        { match: [
          /(function|method)/,
          /\s+/,
          hljs.UNDERSCORE_IDENT_RE
        ] }
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      }
    };
    const CLASS_DEFINITION = {
      variants: [
        { match: [
          /(class|interface|extends|implements)/,
          /\s+/,
          hljs.UNDERSCORE_IDENT_RE
        ] }
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    const BUILT_INS2 = [
      "DebugLog",
      "DebugStop",
      "Error",
      "Print",
      "ACos",
      "ACosr",
      "ASin",
      "ASinr",
      "ATan",
      "ATan2",
      "ATan2r",
      "ATanr",
      "Abs",
      "Abs",
      "Ceil",
      "Clamp",
      "Clamp",
      "Cos",
      "Cosr",
      "Exp",
      "Floor",
      "Log",
      "Max",
      "Max",
      "Min",
      "Min",
      "Pow",
      "Sgn",
      "Sgn",
      "Sin",
      "Sinr",
      "Sqrt",
      "Tan",
      "Tanr",
      "Seed",
      "PI",
      "HALFPI",
      "TWOPI"
    ];
    const LITERALS2 = [
      "true",
      "false",
      "null"
    ];
    const KEYWORDS2 = [
      "public",
      "private",
      "property",
      "continue",
      "exit",
      "extern",
      "new",
      "try",
      "catch",
      "eachin",
      "not",
      "abstract",
      "final",
      "select",
      "case",
      "default",
      "const",
      "local",
      "global",
      "field",
      "end",
      "if",
      "then",
      "else",
      "elseif",
      "endif",
      "while",
      "wend",
      "repeat",
      "until",
      "forever",
      "for",
      "to",
      "step",
      "next",
      "return",
      "module",
      "inline",
      "throw",
      "import",
      // not positive, but these are not literals
      "and",
      "or",
      "shl",
      "shr",
      "mod"
    ];
    return {
      name: "Monkey",
      case_insensitive: true,
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_INS2,
        literal: LITERALS2
      },
      illegal: /\/\*/,
      contains: [
        hljs.COMMENT("#rem", "#end"),
        hljs.COMMENT(
          "'",
          "$",
          { relevance: 0 }
        ),
        FUNC_DEFINITION,
        CLASS_DEFINITION,
        {
          className: "variable.language",
          begin: /\b(self|super)\b/
        },
        {
          className: "meta",
          begin: /\s*#/,
          end: "$",
          keywords: { keyword: "if else elseif endif end then" }
        },
        {
          match: [
            /^\s*/,
            /strict\b/
          ],
          scope: { 2: "meta" }
        },
        {
          beginKeywords: "alias",
          end: "=",
          contains: [hljs.UNDERSCORE_TITLE_MODE]
        },
        hljs.QUOTE_STRING_MODE,
        NUMBER
      ]
    };
  }
  function moonscript(hljs) {
    const KEYWORDS2 = {
      keyword: (
        // Moonscript keywords
        "if then not for in while do return else elseif break continue switch and or unless when class extends super local import export from using"
      ),
      literal: "true false nil",
      built_in: "_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug io math os package string table"
    };
    const JS_IDENT_RE = "[A-Za-z$_][0-9A-Za-z$_]*";
    const SUBST = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: KEYWORDS2
    };
    const EXPRESSIONS = [
      hljs.inherit(
        hljs.C_NUMBER_MODE,
        { starts: {
          end: "(\\s*/)?",
          relevance: 0
        } }
      ),
      // a number tries to eat the following slash to prevent treating it as a regexp
      {
        className: "string",
        variants: [
          {
            begin: /'/,
            end: /'/,
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: /"/,
            end: /"/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ]
          }
        ]
      },
      {
        className: "built_in",
        begin: "@__" + hljs.IDENT_RE
      },
      {
        begin: "@" + hljs.IDENT_RE
        // relevance booster on par with CoffeeScript
      },
      {
        begin: hljs.IDENT_RE + "\\\\" + hljs.IDENT_RE
        // inst\method
      }
    ];
    SUBST.contains = EXPRESSIONS;
    const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
    const POSSIBLE_PARAMS_RE = "(\\(.*\\)\\s*)?\\B[-=]>";
    const PARAMS = {
      className: "params",
      begin: "\\([^\\(]",
      returnBegin: true,
      /* We need another contained nameless mode to not have every nested
      pair of parens to be called "params" */
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: KEYWORDS2,
          contains: ["self"].concat(EXPRESSIONS)
        }
      ]
    };
    return {
      name: "MoonScript",
      aliases: ["moon"],
      keywords: KEYWORDS2,
      illegal: /\/\*/,
      contains: EXPRESSIONS.concat([
        hljs.COMMENT("--", "$"),
        {
          className: "function",
          // function: -> =>
          begin: "^\\s*" + JS_IDENT_RE + "\\s*=\\s*" + POSSIBLE_PARAMS_RE,
          end: "[-=]>",
          returnBegin: true,
          contains: [
            TITLE,
            PARAMS
          ]
        },
        {
          begin: /[\(,:=]\s*/,
          // anonymous function start
          relevance: 0,
          contains: [
            {
              className: "function",
              begin: POSSIBLE_PARAMS_RE,
              end: "[-=]>",
              returnBegin: true,
              contains: [PARAMS]
            }
          ]
        },
        {
          className: "class",
          beginKeywords: "class",
          end: "$",
          illegal: /[:="\[\]]/,
          contains: [
            {
              beginKeywords: "extends",
              endsWithParent: true,
              illegal: /[:="\[\]]/,
              contains: [TITLE]
            },
            TITLE
          ]
        },
        {
          className: "name",
          // table
          begin: JS_IDENT_RE + ":",
          end: ":",
          returnBegin: true,
          returnEnd: true,
          relevance: 0
        }
      ])
    };
  }
  function n1ql(hljs) {
    const KEYWORDS2 = [
      "all",
      "alter",
      "analyze",
      "and",
      "any",
      "array",
      "as",
      "asc",
      "begin",
      "between",
      "binary",
      "boolean",
      "break",
      "bucket",
      "build",
      "by",
      "call",
      "case",
      "cast",
      "cluster",
      "collate",
      "collection",
      "commit",
      "connect",
      "continue",
      "correlate",
      "cover",
      "create",
      "database",
      "dataset",
      "datastore",
      "declare",
      "decrement",
      "delete",
      "derived",
      "desc",
      "describe",
      "distinct",
      "do",
      "drop",
      "each",
      "element",
      "else",
      "end",
      "every",
      "except",
      "exclude",
      "execute",
      "exists",
      "explain",
      "fetch",
      "first",
      "flatten",
      "for",
      "force",
      "from",
      "function",
      "grant",
      "group",
      "gsi",
      "having",
      "if",
      "ignore",
      "ilike",
      "in",
      "include",
      "increment",
      "index",
      "infer",
      "inline",
      "inner",
      "insert",
      "intersect",
      "into",
      "is",
      "join",
      "key",
      "keys",
      "keyspace",
      "known",
      "last",
      "left",
      "let",
      "letting",
      "like",
      "limit",
      "lsm",
      "map",
      "mapping",
      "matched",
      "materialized",
      "merge",
      "minus",
      "namespace",
      "nest",
      "not",
      "number",
      "object",
      "offset",
      "on",
      "option",
      "or",
      "order",
      "outer",
      "over",
      "parse",
      "partition",
      "password",
      "path",
      "pool",
      "prepare",
      "primary",
      "private",
      "privilege",
      "procedure",
      "public",
      "raw",
      "realm",
      "reduce",
      "rename",
      "return",
      "returning",
      "revoke",
      "right",
      "role",
      "rollback",
      "satisfies",
      "schema",
      "select",
      "self",
      "semi",
      "set",
      "show",
      "some",
      "start",
      "statistics",
      "string",
      "system",
      "then",
      "to",
      "transaction",
      "trigger",
      "truncate",
      "under",
      "union",
      "unique",
      "unknown",
      "unnest",
      "unset",
      "update",
      "upsert",
      "use",
      "user",
      "using",
      "validate",
      "value",
      "valued",
      "values",
      "via",
      "view",
      "when",
      "where",
      "while",
      "with",
      "within",
      "work",
      "xor"
    ];
    const LITERALS2 = [
      "true",
      "false",
      "null",
      "missing|5"
    ];
    const BUILT_INS2 = [
      "array_agg",
      "array_append",
      "array_concat",
      "array_contains",
      "array_count",
      "array_distinct",
      "array_ifnull",
      "array_length",
      "array_max",
      "array_min",
      "array_position",
      "array_prepend",
      "array_put",
      "array_range",
      "array_remove",
      "array_repeat",
      "array_replace",
      "array_reverse",
      "array_sort",
      "array_sum",
      "avg",
      "count",
      "max",
      "min",
      "sum",
      "greatest",
      "least",
      "ifmissing",
      "ifmissingornull",
      "ifnull",
      "missingif",
      "nullif",
      "ifinf",
      "ifnan",
      "ifnanorinf",
      "naninf",
      "neginfif",
      "posinfif",
      "clock_millis",
      "clock_str",
      "date_add_millis",
      "date_add_str",
      "date_diff_millis",
      "date_diff_str",
      "date_part_millis",
      "date_part_str",
      "date_trunc_millis",
      "date_trunc_str",
      "duration_to_str",
      "millis",
      "str_to_millis",
      "millis_to_str",
      "millis_to_utc",
      "millis_to_zone_name",
      "now_millis",
      "now_str",
      "str_to_duration",
      "str_to_utc",
      "str_to_zone_name",
      "decode_json",
      "encode_json",
      "encoded_size",
      "poly_length",
      "base64",
      "base64_encode",
      "base64_decode",
      "meta",
      "uuid",
      "abs",
      "acos",
      "asin",
      "atan",
      "atan2",
      "ceil",
      "cos",
      "degrees",
      "e",
      "exp",
      "ln",
      "log",
      "floor",
      "pi",
      "power",
      "radians",
      "random",
      "round",
      "sign",
      "sin",
      "sqrt",
      "tan",
      "trunc",
      "object_length",
      "object_names",
      "object_pairs",
      "object_inner_pairs",
      "object_values",
      "object_inner_values",
      "object_add",
      "object_put",
      "object_remove",
      "object_unwrap",
      "regexp_contains",
      "regexp_like",
      "regexp_position",
      "regexp_replace",
      "contains",
      "initcap",
      "length",
      "lower",
      "ltrim",
      "position",
      "repeat",
      "replace",
      "rtrim",
      "split",
      "substr",
      "title",
      "trim",
      "upper",
      "isarray",
      "isatom",
      "isboolean",
      "isnumber",
      "isobject",
      "isstring",
      "type",
      "toarray",
      "toatom",
      "toboolean",
      "tonumber",
      "toobject",
      "tostring"
    ];
    return {
      name: "N1QL",
      case_insensitive: true,
      contains: [
        {
          beginKeywords: "build create index delete drop explain infer|10 insert merge prepare select update upsert|10",
          end: /;/,
          keywords: {
            keyword: KEYWORDS2,
            literal: LITERALS2,
            built_in: BUILT_INS2
          },
          contains: [
            {
              className: "string",
              begin: "'",
              end: "'",
              contains: [hljs.BACKSLASH_ESCAPE]
            },
            {
              className: "string",
              begin: '"',
              end: '"',
              contains: [hljs.BACKSLASH_ESCAPE]
            },
            {
              className: "symbol",
              begin: "`",
              end: "`",
              contains: [hljs.BACKSLASH_ESCAPE]
            },
            hljs.C_NUMBER_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  function nestedtext(hljs) {
    const NESTED = {
      match: [
        /^\s*(?=\S)/,
        // have to look forward here to avoid polynomial backtracking
        /[^:]+/,
        /:\s*/,
        /$/
      ],
      className: {
        2: "attribute",
        3: "punctuation"
      }
    };
    const DICTIONARY_ITEM = {
      match: [
        /^\s*(?=\S)/,
        // have to look forward here to avoid polynomial backtracking
        /[^:]*[^: ]/,
        /[ ]*:/,
        /[ ]/,
        /.*$/
      ],
      className: {
        2: "attribute",
        3: "punctuation",
        5: "string"
      }
    };
    const STRING = {
      match: [
        /^\s*/,
        />/,
        /[ ]/,
        /.*$/
      ],
      className: {
        2: "punctuation",
        4: "string"
      }
    };
    const LIST_ITEM = {
      variants: [
        { match: [
          /^\s*/,
          /-/,
          /[ ]/,
          /.*$/
        ] },
        { match: [
          /^\s*/,
          /-$/
        ] }
      ],
      className: {
        2: "bullet",
        4: "string"
      }
    };
    return {
      name: "Nested Text",
      aliases: ["nt"],
      contains: [
        hljs.inherit(hljs.HASH_COMMENT_MODE, {
          begin: /^\s*(?=#)/,
          excludeBegin: true
        }),
        LIST_ITEM,
        STRING,
        NESTED,
        DICTIONARY_ITEM
      ]
    };
  }
  function nginx(hljs) {
    const regex = hljs.regex;
    const VAR = {
      className: "variable",
      variants: [
        { begin: /\$\d+/ },
        { begin: /\$\{\w+\}/ },
        { begin: regex.concat(/[$@]/, hljs.UNDERSCORE_IDENT_RE) }
      ]
    };
    const LITERALS2 = [
      "on",
      "off",
      "yes",
      "no",
      "true",
      "false",
      "none",
      "blocked",
      "debug",
      "info",
      "notice",
      "warn",
      "error",
      "crit",
      "select",
      "break",
      "last",
      "permanent",
      "redirect",
      "kqueue",
      "rtsig",
      "epoll",
      "poll",
      "/dev/poll"
    ];
    const DEFAULT = {
      endsWithParent: true,
      keywords: {
        $pattern: /[a-z_]{2,}|\/dev\/poll/,
        literal: LITERALS2
      },
      relevance: 0,
      illegal: "=>",
      contains: [
        hljs.HASH_COMMENT_MODE,
        {
          className: "string",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            VAR
          ],
          variants: [
            {
              begin: /"/,
              end: /"/
            },
            {
              begin: /'/,
              end: /'/
            }
          ]
        },
        // this swallows entire URLs to avoid detecting numbers within
        {
          begin: "([a-z]+):/",
          end: "\\s",
          endsWithParent: true,
          excludeEnd: true,
          contains: [VAR]
        },
        {
          className: "regexp",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            VAR
          ],
          variants: [
            {
              begin: "\\s\\^",
              end: "\\s|\\{|;",
              returnEnd: true
            },
            // regexp locations (~, ~*)
            {
              begin: "~\\*?\\s+",
              end: "\\s|\\{|;",
              returnEnd: true
            },
            // *.example.com
            { begin: "\\*(\\.[a-z\\-]+)+" },
            // sub.example.*
            { begin: "([a-z\\-]+\\.)+\\*" }
          ]
        },
        // IP
        {
          className: "number",
          begin: "\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b"
        },
        // units
        {
          className: "number",
          begin: "\\b\\d+[kKmMgGdshdwy]?\\b",
          relevance: 0
        },
        VAR
      ]
    };
    return {
      name: "Nginx config",
      aliases: ["nginxconf"],
      contains: [
        hljs.HASH_COMMENT_MODE,
        {
          beginKeywords: "upstream location",
          end: /;|\{/,
          contains: DEFAULT.contains,
          keywords: { section: "upstream location" }
        },
        {
          className: "section",
          begin: regex.concat(hljs.UNDERSCORE_IDENT_RE + regex.lookahead(/\s+\{/)),
          relevance: 0
        },
        {
          begin: regex.lookahead(hljs.UNDERSCORE_IDENT_RE + "\\s"),
          end: ";|\\{",
          contains: [
            {
              className: "attribute",
              begin: hljs.UNDERSCORE_IDENT_RE,
              starts: DEFAULT
            }
          ],
          relevance: 0
        }
      ],
      illegal: "[^\\s\\}\\{]"
    };
  }
  function nim(hljs) {
    const TYPES2 = [
      "int",
      "int8",
      "int16",
      "int32",
      "int64",
      "uint",
      "uint8",
      "uint16",
      "uint32",
      "uint64",
      "float",
      "float32",
      "float64",
      "bool",
      "char",
      "string",
      "cstring",
      "pointer",
      "expr",
      "stmt",
      "void",
      "auto",
      "any",
      "range",
      "array",
      "openarray",
      "varargs",
      "seq",
      "set",
      "clong",
      "culong",
      "cchar",
      "cschar",
      "cshort",
      "cint",
      "csize",
      "clonglong",
      "cfloat",
      "cdouble",
      "clongdouble",
      "cuchar",
      "cushort",
      "cuint",
      "culonglong",
      "cstringarray",
      "semistatic"
    ];
    const KEYWORDS2 = [
      "addr",
      "and",
      "as",
      "asm",
      "bind",
      "block",
      "break",
      "case",
      "cast",
      "concept",
      "const",
      "continue",
      "converter",
      "defer",
      "discard",
      "distinct",
      "div",
      "do",
      "elif",
      "else",
      "end",
      "enum",
      "except",
      "export",
      "finally",
      "for",
      "from",
      "func",
      "generic",
      "guarded",
      "if",
      "import",
      "in",
      "include",
      "interface",
      "is",
      "isnot",
      "iterator",
      "let",
      "macro",
      "method",
      "mixin",
      "mod",
      "nil",
      "not",
      "notin",
      "object",
      "of",
      "or",
      "out",
      "proc",
      "ptr",
      "raise",
      "ref",
      "return",
      "shared",
      "shl",
      "shr",
      "static",
      "template",
      "try",
      "tuple",
      "type",
      "using",
      "var",
      "when",
      "while",
      "with",
      "without",
      "xor",
      "yield"
    ];
    const BUILT_INS2 = [
      "stdin",
      "stdout",
      "stderr",
      "result"
    ];
    const LITERALS2 = [
      "true",
      "false"
    ];
    return {
      name: "Nim",
      keywords: {
        keyword: KEYWORDS2,
        literal: LITERALS2,
        type: TYPES2,
        built_in: BUILT_INS2
      },
      contains: [
        {
          className: "meta",
          // Actually pragma
          begin: /\{\./,
          end: /\.\}/,
          relevance: 10
        },
        {
          className: "string",
          begin: /[a-zA-Z]\w*"/,
          end: /"/,
          contains: [{ begin: /""/ }]
        },
        {
          className: "string",
          begin: /([a-zA-Z]\w*)?"""/,
          end: /"""/
        },
        hljs.QUOTE_STRING_MODE,
        {
          className: "type",
          begin: /\b[A-Z]\w+\b/,
          relevance: 0
        },
        {
          className: "number",
          relevance: 0,
          variants: [
            { begin: /\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/ },
            { begin: /\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/ },
            { begin: /\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/ },
            { begin: /\b(\d[_\d]*)('?[iIuUfF](8|16|32|64))?/ }
          ]
        },
        hljs.HASH_COMMENT_MODE
      ]
    };
  }
  function nix(hljs) {
    const regex = hljs.regex;
    const KEYWORDS2 = {
      keyword: [
        "assert",
        "else",
        "if",
        "in",
        "inherit",
        "let",
        "or",
        "rec",
        "then",
        "with"
      ],
      literal: [
        "true",
        "false",
        "null"
      ],
      built_in: [
        // toplevel builtins
        "abort",
        "baseNameOf",
        "builtins",
        "derivation",
        "derivationStrict",
        "dirOf",
        "fetchGit",
        "fetchMercurial",
        "fetchTarball",
        "fetchTree",
        "fromTOML",
        "import",
        "isNull",
        "map",
        "placeholder",
        "removeAttrs",
        "scopedImport",
        "throw",
        "toString"
      ]
    };
    const BUILTINS = {
      scope: "built_in",
      match: regex.either(...[
        "abort",
        "add",
        "addDrvOutputDependencies",
        "addErrorContext",
        "all",
        "any",
        "appendContext",
        "attrNames",
        "attrValues",
        "baseNameOf",
        "bitAnd",
        "bitOr",
        "bitXor",
        "break",
        "builtins",
        "catAttrs",
        "ceil",
        "compareVersions",
        "concatLists",
        "concatMap",
        "concatStringsSep",
        "convertHash",
        "currentSystem",
        "currentTime",
        "deepSeq",
        "derivation",
        "derivationStrict",
        "dirOf",
        "div",
        "elem",
        "elemAt",
        "false",
        "fetchGit",
        "fetchMercurial",
        "fetchTarball",
        "fetchTree",
        "fetchurl",
        "filter",
        "filterSource",
        "findFile",
        "flakeRefToString",
        "floor",
        "foldl'",
        "fromJSON",
        "fromTOML",
        "functionArgs",
        "genList",
        "genericClosure",
        "getAttr",
        "getContext",
        "getEnv",
        "getFlake",
        "groupBy",
        "hasAttr",
        "hasContext",
        "hashFile",
        "hashString",
        "head",
        "import",
        "intersectAttrs",
        "isAttrs",
        "isBool",
        "isFloat",
        "isFunction",
        "isInt",
        "isList",
        "isNull",
        "isPath",
        "isString",
        "langVersion",
        "length",
        "lessThan",
        "listToAttrs",
        "map",
        "mapAttrs",
        "match",
        "mul",
        "nixPath",
        "nixVersion",
        "null",
        "parseDrvName",
        "parseFlakeRef",
        "partition",
        "path",
        "pathExists",
        "placeholder",
        "readDir",
        "readFile",
        "readFileType",
        "removeAttrs",
        "replaceStrings",
        "scopedImport",
        "seq",
        "sort",
        "split",
        "splitVersion",
        "storeDir",
        "storePath",
        "stringLength",
        "sub",
        "substring",
        "tail",
        "throw",
        "toFile",
        "toJSON",
        "toPath",
        "toString",
        "toXML",
        "trace",
        "traceVerbose",
        "true",
        "tryEval",
        "typeOf",
        "unsafeDiscardOutputDependency",
        "unsafeDiscardStringContext",
        "unsafeGetAttrPos",
        "warn",
        "zipAttrsWith"
      ].map((b) => `builtins\\.${b}`)),
      relevance: 10
    };
    const IDENTIFIER_REGEX = "[A-Za-z_][A-Za-z0-9_'-]*";
    const LOOKUP_PATH = {
      scope: "symbol",
      match: new RegExp(`<${IDENTIFIER_REGEX}(/${IDENTIFIER_REGEX})*>`)
    };
    const PATH_PIECE = "[A-Za-z0-9_\\+\\.-]+";
    const PATH = {
      scope: "symbol",
      match: new RegExp(`(\\.\\.|\\.|~)?/(${PATH_PIECE})?(/${PATH_PIECE})*(?=[\\s;])`)
    };
    const OPERATOR_WITHOUT_MINUS_REGEX = regex.either(...[
      "==",
      "=",
      "\\+\\+",
      "\\+",
      "<=",
      "<\\|",
      "<",
      ">=",
      ">",
      "->",
      "//",
      "/",
      "!=",
      "!",
      "\\|\\|",
      "\\|>",
      "\\?",
      "\\*",
      "&&"
    ]);
    const OPERATOR = {
      scope: "operator",
      match: regex.concat(OPERATOR_WITHOUT_MINUS_REGEX, /(?!-)/),
      relevance: 0
    };
    const NUMBER = {
      scope: "number",
      match: new RegExp(`${hljs.NUMBER_RE}(?!-)`),
      relevance: 0
    };
    const MINUS_OPERATOR = {
      variants: [
        {
          scope: "operator",
          beforeMatch: /\s/,
          // The (?!>) is used to ensure this doesn't collide with the '->' operator
          begin: /-(?!>)/
        },
        {
          begin: [
            new RegExp(`${hljs.NUMBER_RE}`),
            /-/,
            /(?!>)/
          ],
          beginScope: {
            1: "number",
            2: "operator"
          }
        },
        {
          begin: [
            OPERATOR_WITHOUT_MINUS_REGEX,
            /-/,
            /(?!>)/
          ],
          beginScope: {
            1: "operator",
            2: "operator"
          }
        }
      ],
      relevance: 0
    };
    const ATTRS = {
      beforeMatch: /(^|\{|;)\s*/,
      begin: new RegExp(`${IDENTIFIER_REGEX}(\\.${IDENTIFIER_REGEX})*\\s*=(?!=)`),
      returnBegin: true,
      relevance: 0,
      contains: [
        {
          scope: "attr",
          match: new RegExp(`${IDENTIFIER_REGEX}(\\.${IDENTIFIER_REGEX})*(?=\\s*=)`),
          relevance: 0.2
        }
      ]
    };
    const NORMAL_ESCAPED_DOLLAR = {
      scope: "char.escape",
      match: /\\\$/
    };
    const INDENTED_ESCAPED_DOLLAR = {
      scope: "char.escape",
      match: /''\$/
    };
    const ANTIQUOTE = {
      scope: "subst",
      begin: /\$\{/,
      end: /\}/,
      keywords: KEYWORDS2
    };
    const ESCAPED_DOUBLEQUOTE = {
      scope: "char.escape",
      match: /'''/
    };
    const ESCAPED_LITERAL = {
      scope: "char.escape",
      match: /\\(?!\$)./
    };
    const STRING = {
      scope: "string",
      variants: [
        {
          begin: "''",
          end: "''",
          contains: [
            INDENTED_ESCAPED_DOLLAR,
            ANTIQUOTE,
            ESCAPED_DOUBLEQUOTE,
            ESCAPED_LITERAL
          ]
        },
        {
          begin: '"',
          end: '"',
          contains: [
            NORMAL_ESCAPED_DOLLAR,
            ANTIQUOTE,
            ESCAPED_LITERAL
          ]
        }
      ]
    };
    const FUNCTION_PARAMS = {
      scope: "params",
      match: new RegExp(`${IDENTIFIER_REGEX}\\s*:(?=\\s)`)
    };
    const EXPRESSIONS = [
      NUMBER,
      hljs.HASH_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.COMMENT(
        /\/\*\*(?!\/)/,
        /\*\//,
        {
          subLanguage: "markdown",
          relevance: 0
        }
      ),
      BUILTINS,
      STRING,
      LOOKUP_PATH,
      PATH,
      FUNCTION_PARAMS,
      ATTRS,
      MINUS_OPERATOR,
      OPERATOR
    ];
    ANTIQUOTE.contains = EXPRESSIONS;
    const REPL = [
      {
        scope: "meta.prompt",
        match: /^nix-repl>(?=\s)/,
        relevance: 10
      },
      {
        scope: "meta",
        beforeMatch: /\s+/,
        begin: /:([a-z]+|\?)/
      }
    ];
    return {
      name: "Nix",
      aliases: ["nixos"],
      keywords: KEYWORDS2,
      contains: EXPRESSIONS.concat(REPL)
    };
  }
  function nodeRepl(hljs) {
    return {
      name: "Node REPL",
      contains: [
        {
          className: "meta.prompt",
          starts: {
            // a space separates the REPL prefix from the actual code
            // this is purely for cleaner HTML output
            end: / |$/,
            starts: {
              end: "$",
              subLanguage: "javascript"
            }
          },
          variants: [
            { begin: /^>(?=[ ]|$)/ },
            { begin: /^\.\.\.(?=[ ]|$)/ }
          ]
        }
      ]
    };
  }
  function nsis(hljs) {
    const regex = hljs.regex;
    const LANGUAGE_CONSTANTS = [
      "ADMINTOOLS",
      "APPDATA",
      "CDBURN_AREA",
      "CMDLINE",
      "COMMONFILES32",
      "COMMONFILES64",
      "COMMONFILES",
      "COOKIES",
      "DESKTOP",
      "DOCUMENTS",
      "EXEDIR",
      "EXEFILE",
      "EXEPATH",
      "FAVORITES",
      "FONTS",
      "HISTORY",
      "HWNDPARENT",
      "INSTDIR",
      "INTERNET_CACHE",
      "LANGUAGE",
      "LOCALAPPDATA",
      "MUSIC",
      "NETHOOD",
      "OUTDIR",
      "PICTURES",
      "PLUGINSDIR",
      "PRINTHOOD",
      "PROFILE",
      "PROGRAMFILES32",
      "PROGRAMFILES64",
      "PROGRAMFILES",
      "QUICKLAUNCH",
      "RECENT",
      "RESOURCES_LOCALIZED",
      "RESOURCES",
      "SENDTO",
      "SMPROGRAMS",
      "SMSTARTUP",
      "STARTMENU",
      "SYSDIR",
      "TEMP",
      "TEMPLATES",
      "VIDEOS",
      "WINDIR"
    ];
    const PARAM_NAMES = [
      "ARCHIVE",
      "FILE_ATTRIBUTE_ARCHIVE",
      "FILE_ATTRIBUTE_NORMAL",
      "FILE_ATTRIBUTE_OFFLINE",
      "FILE_ATTRIBUTE_READONLY",
      "FILE_ATTRIBUTE_SYSTEM",
      "FILE_ATTRIBUTE_TEMPORARY",
      "HKCR",
      "HKCU",
      "HKDD",
      "HKEY_CLASSES_ROOT",
      "HKEY_CURRENT_CONFIG",
      "HKEY_CURRENT_USER",
      "HKEY_DYN_DATA",
      "HKEY_LOCAL_MACHINE",
      "HKEY_PERFORMANCE_DATA",
      "HKEY_USERS",
      "HKLM",
      "HKPD",
      "HKU",
      "IDABORT",
      "IDCANCEL",
      "IDIGNORE",
      "IDNO",
      "IDOK",
      "IDRETRY",
      "IDYES",
      "MB_ABORTRETRYIGNORE",
      "MB_DEFBUTTON1",
      "MB_DEFBUTTON2",
      "MB_DEFBUTTON3",
      "MB_DEFBUTTON4",
      "MB_ICONEXCLAMATION",
      "MB_ICONINFORMATION",
      "MB_ICONQUESTION",
      "MB_ICONSTOP",
      "MB_OK",
      "MB_OKCANCEL",
      "MB_RETRYCANCEL",
      "MB_RIGHT",
      "MB_RTLREADING",
      "MB_SETFOREGROUND",
      "MB_TOPMOST",
      "MB_USERICON",
      "MB_YESNO",
      "NORMAL",
      "OFFLINE",
      "READONLY",
      "SHCTX",
      "SHELL_CONTEXT",
      "SYSTEM|TEMPORARY"
    ];
    const COMPILER_FLAGS = [
      "addincludedir",
      "addplugindir",
      "appendfile",
      "assert",
      "cd",
      "define",
      "delfile",
      "echo",
      "else",
      "endif",
      "error",
      "execute",
      "finalize",
      "getdllversion",
      "gettlbversion",
      "if",
      "ifdef",
      "ifmacrodef",
      "ifmacrondef",
      "ifndef",
      "include",
      "insertmacro",
      "macro",
      "macroend",
      "makensis",
      "packhdr",
      "searchparse",
      "searchreplace",
      "system",
      "tempfile",
      "undef",
      "uninstfinalize",
      "verbose",
      "warning"
    ];
    const CONSTANTS = {
      className: "variable.constant",
      begin: regex.concat(/\$/, regex.either(...LANGUAGE_CONSTANTS))
    };
    const DEFINES = {
      // ${defines}
      className: "variable",
      begin: /\$+\{[\!\w.:-]+\}/
    };
    const VARIABLES = {
      // $variables
      className: "variable",
      begin: /\$+\w[\w\.]*/,
      illegal: /\(\)\{\}/
    };
    const LANGUAGES = {
      // $(language_strings)
      className: "variable",
      begin: /\$+\([\w^.:!-]+\)/
    };
    const PARAMETERS = {
      // command parameters
      className: "params",
      begin: regex.either(...PARAM_NAMES)
    };
    const COMPILER = {
      // !compiler_flags
      className: "keyword",
      begin: regex.concat(
        /!/,
        regex.either(...COMPILER_FLAGS)
      )
    };
    const ESCAPE_CHARS = {
      // $\n, $\r, $\t, $$
      className: "char.escape",
      begin: /\$(\\[nrt]|\$)/
    };
    const PLUGINS = {
      // plug::ins
      className: "title.function",
      begin: /\w+::\w+/
    };
    const STRING = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "'",
          end: "'"
        },
        {
          begin: "`",
          end: "`"
        }
      ],
      illegal: /\n/,
      contains: [
        ESCAPE_CHARS,
        CONSTANTS,
        DEFINES,
        VARIABLES,
        LANGUAGES
      ]
    };
    const KEYWORDS2 = [
      "Abort",
      "AddBrandingImage",
      "AddSize",
      "AllowRootDirInstall",
      "AllowSkipFiles",
      "AutoCloseWindow",
      "BGFont",
      "BGGradient",
      "BrandingText",
      "BringToFront",
      "Call",
      "CallInstDLL",
      "Caption",
      "ChangeUI",
      "CheckBitmap",
      "ClearErrors",
      "CompletedText",
      "ComponentText",
      "CopyFiles",
      "CRCCheck",
      "CreateDirectory",
      "CreateFont",
      "CreateShortCut",
      "Delete",
      "DeleteINISec",
      "DeleteINIStr",
      "DeleteRegKey",
      "DeleteRegValue",
      "DetailPrint",
      "DetailsButtonText",
      "DirText",
      "DirVar",
      "DirVerify",
      "EnableWindow",
      "EnumRegKey",
      "EnumRegValue",
      "Exch",
      "Exec",
      "ExecShell",
      "ExecShellWait",
      "ExecWait",
      "ExpandEnvStrings",
      "File",
      "FileBufSize",
      "FileClose",
      "FileErrorText",
      "FileOpen",
      "FileRead",
      "FileReadByte",
      "FileReadUTF16LE",
      "FileReadWord",
      "FileWriteUTF16LE",
      "FileSeek",
      "FileWrite",
      "FileWriteByte",
      "FileWriteWord",
      "FindClose",
      "FindFirst",
      "FindNext",
      "FindWindow",
      "FlushINI",
      "GetCurInstType",
      "GetCurrentAddress",
      "GetDlgItem",
      "GetDLLVersion",
      "GetDLLVersionLocal",
      "GetErrorLevel",
      "GetFileTime",
      "GetFileTimeLocal",
      "GetFullPathName",
      "GetFunctionAddress",
      "GetInstDirError",
      "GetKnownFolderPath",
      "GetLabelAddress",
      "GetTempFileName",
      "GetWinVer",
      "Goto",
      "HideWindow",
      "Icon",
      "IfAbort",
      "IfErrors",
      "IfFileExists",
      "IfRebootFlag",
      "IfRtlLanguage",
      "IfShellVarContextAll",
      "IfSilent",
      "InitPluginsDir",
      "InstallButtonText",
      "InstallColors",
      "InstallDir",
      "InstallDirRegKey",
      "InstProgressFlags",
      "InstType",
      "InstTypeGetText",
      "InstTypeSetText",
      "Int64Cmp",
      "Int64CmpU",
      "Int64Fmt",
      "IntCmp",
      "IntCmpU",
      "IntFmt",
      "IntOp",
      "IntPtrCmp",
      "IntPtrCmpU",
      "IntPtrOp",
      "IsWindow",
      "LangString",
      "LicenseBkColor",
      "LicenseData",
      "LicenseForceSelection",
      "LicenseLangString",
      "LicenseText",
      "LoadAndSetImage",
      "LoadLanguageFile",
      "LockWindow",
      "LogSet",
      "LogText",
      "ManifestDPIAware",
      "ManifestLongPathAware",
      "ManifestMaxVersionTested",
      "ManifestSupportedOS",
      "MessageBox",
      "MiscButtonText",
      "Name|0",
      "Nop",
      "OutFile",
      "Page",
      "PageCallbacks",
      "PEAddResource",
      "PEDllCharacteristics",
      "PERemoveResource",
      "PESubsysVer",
      "Pop",
      "Push",
      "Quit",
      "ReadEnvStr",
      "ReadINIStr",
      "ReadRegDWORD",
      "ReadRegStr",
      "Reboot",
      "RegDLL",
      "Rename",
      "RequestExecutionLevel",
      "ReserveFile",
      "Return",
      "RMDir",
      "SearchPath",
      "SectionGetFlags",
      "SectionGetInstTypes",
      "SectionGetSize",
      "SectionGetText",
      "SectionIn",
      "SectionSetFlags",
      "SectionSetInstTypes",
      "SectionSetSize",
      "SectionSetText",
      "SendMessage",
      "SetAutoClose",
      "SetBrandingImage",
      "SetCompress",
      "SetCompressor",
      "SetCompressorDictSize",
      "SetCtlColors",
      "SetCurInstType",
      "SetDatablockOptimize",
      "SetDateSave",
      "SetDetailsPrint",
      "SetDetailsView",
      "SetErrorLevel",
      "SetErrors",
      "SetFileAttributes",
      "SetFont",
      "SetOutPath",
      "SetOverwrite",
      "SetRebootFlag",
      "SetRegView",
      "SetShellVarContext",
      "SetSilent",
      "ShowInstDetails",
      "ShowUninstDetails",
      "ShowWindow",
      "SilentInstall",
      "SilentUnInstall",
      "Sleep",
      "SpaceTexts",
      "StrCmp",
      "StrCmpS",
      "StrCpy",
      "StrLen",
      "SubCaption",
      "Unicode",
      "UninstallButtonText",
      "UninstallCaption",
      "UninstallIcon",
      "UninstallSubCaption",
      "UninstallText",
      "UninstPage",
      "UnRegDLL",
      "Var",
      "VIAddVersionKey",
      "VIFileVersion",
      "VIProductVersion",
      "WindowIcon",
      "WriteINIStr",
      "WriteRegBin",
      "WriteRegDWORD",
      "WriteRegExpandStr",
      "WriteRegMultiStr",
      "WriteRegNone",
      "WriteRegStr",
      "WriteUninstaller",
      "XPStyle"
    ];
    const LITERALS2 = [
      "admin",
      "all",
      "auto",
      "both",
      "bottom",
      "bzip2",
      "colored",
      "components",
      "current",
      "custom",
      "directory",
      "false",
      "force",
      "hide",
      "highest",
      "ifdiff",
      "ifnewer",
      "instfiles",
      "lastused",
      "leave",
      "left",
      "license",
      "listonly",
      "lzma",
      "nevershow",
      "none",
      "normal",
      "notset",
      "off",
      "on",
      "open",
      "print",
      "right",
      "show",
      "silent",
      "silentlog",
      "smooth",
      "textonly",
      "top",
      "true",
      "try",
      "un.components",
      "un.custom",
      "un.directory",
      "un.instfiles",
      "un.license",
      "uninstConfirm",
      "user",
      "Win10",
      "Win7",
      "Win8",
      "WinVista",
      "zlib"
    ];
    const FUNCTION_DEFINITION = {
      match: [
        /Function/,
        /\s+/,
        regex.concat(/(\.)?/, hljs.IDENT_RE)
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      }
    };
    const VARIABLE_NAME_RE = /[A-Za-z][\w.]*/;
    const VARIABLE_DEFINITION = {
      match: [
        /Var/,
        /\s+/,
        /(?:\/GLOBAL\s+)?/,
        VARIABLE_NAME_RE
      ],
      scope: {
        1: "keyword",
        3: "params",
        4: "variable"
      }
    };
    return {
      name: "NSIS",
      case_insensitive: true,
      keywords: {
        keyword: KEYWORDS2,
        literal: LITERALS2
      },
      contains: [
        hljs.HASH_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.COMMENT(
          ";",
          "$",
          { relevance: 0 }
        ),
        VARIABLE_DEFINITION,
        FUNCTION_DEFINITION,
        { beginKeywords: "Function PageEx Section SectionGroup FunctionEnd SectionEnd" },
        STRING,
        COMPILER,
        DEFINES,
        VARIABLES,
        LANGUAGES,
        PARAMETERS,
        PLUGINS,
        hljs.NUMBER_MODE
      ]
    };
  }
  function ocaml(hljs) {
    return {
      name: "OCaml",
      aliases: ["ml"],
      keywords: {
        $pattern: "[a-z_]\\w*!?",
        keyword: "and as assert asr begin class constraint do done downto else end exception external for fun function functor if in include inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method mod module mutable new object of open! open or private rec sig struct then to try type val! val virtual when while with parser value",
        built_in: (
          /* built-in types */
          "array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit in_channel out_channel ref"
        ),
        literal: "true false"
      },
      illegal: /\/\/|>>/,
      contains: [
        {
          className: "literal",
          begin: "\\[(\\|\\|)?\\]|\\(\\)",
          relevance: 0
        },
        hljs.COMMENT(
          "\\(\\*",
          "\\*\\)",
          { contains: ["self"] }
        ),
        {
          /* type variable */
          className: "symbol",
          begin: "'[A-Za-z_](?!')[\\w']*"
          /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
        },
        {
          /* polymorphic variant */
          className: "type",
          begin: "`[A-Z][\\w']*"
        },
        {
          /* module or constructor */
          className: "type",
          begin: "\\b[A-Z][\\w']*",
          relevance: 0
        },
        {
          /* don't color identifiers, but safely catch all identifiers with ' */
          begin: "[a-z_]\\w*'[\\w']*",
          relevance: 0
        },
        hljs.inherit(hljs.APOS_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
        {
          className: "number",
          begin: "\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",
          relevance: 0
        },
        {
          begin: /->/
          // relevance booster
        }
      ]
    };
  }
  function openscad(hljs) {
    const SPECIAL_VARS = {
      className: "keyword",
      begin: "\\$(f[asn]|t|vp[rtd]|children)"
    };
    const LITERALS2 = {
      className: "literal",
      begin: "false|true|PI|undef"
    };
    const NUMBERS = {
      className: "number",
      begin: "\\b\\d+(\\.\\d+)?(e-?\\d+)?",
      // adds 1e5, 1e-10
      relevance: 0
    };
    const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
    const PREPRO = {
      className: "meta",
      keywords: { keyword: "include use" },
      begin: "include|use <",
      end: ">"
    };
    const PARAMS = {
      className: "params",
      begin: "\\(",
      end: "\\)",
      contains: [
        "self",
        NUMBERS,
        STRING,
        SPECIAL_VARS,
        LITERALS2
      ]
    };
    const MODIFIERS = {
      begin: "[*!#%]",
      relevance: 0
    };
    const FUNCTIONS = {
      className: "function",
      beginKeywords: "module function",
      end: /=|\{/,
      contains: [
        PARAMS,
        hljs.UNDERSCORE_TITLE_MODE
      ]
    };
    return {
      name: "OpenSCAD",
      aliases: ["scad"],
      keywords: {
        keyword: "function module include use for intersection_for if else \\%",
        literal: "false true PI undef",
        built_in: "circle square polygon text sphere cube cylinder polyhedron translate rotate scale resize mirror multmatrix color offset hull minkowski union difference intersection abs sign sin cos tan acos asin atan atan2 floor round ceil ln log pow sqrt exp rands min max concat lookup str chr search version version_num norm cross parent_module echo import import_dxf dxf_linear_extrude linear_extrude rotate_extrude surface projection render children dxf_cross dxf_dim let assign"
      },
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        NUMBERS,
        PREPRO,
        STRING,
        SPECIAL_VARS,
        MODIFIERS,
        FUNCTIONS
      ]
    };
  }
  function oxygene(hljs) {
    const OXYGENE_KEYWORDS = {
      $pattern: /\.?\w+/,
      keyword: "abstract add and array as asc aspect assembly async begin break block by case class concat const copy constructor continue create default delegate desc distinct div do downto dynamic each else empty end ensure enum equals event except exit extension external false final finalize finalizer finally flags for forward from function future global group has if implementation implements implies in index inherited inline interface into invariants is iterator join locked locking loop matching method mod module namespace nested new nil not notify nullable of old on operator or order out override parallel params partial pinned private procedure property protected public queryable raise read readonly record reintroduce remove repeat require result reverse sealed select self sequence set shl shr skip static step soft take then to true try tuple type union unit unsafe until uses using var virtual raises volatile where while with write xor yield await mapped deprecated stdcall cdecl pascal register safecall overload library platform reference packed strict published autoreleasepool selector strong weak unretained"
    };
    const CURLY_COMMENT = hljs.COMMENT(
      /\{/,
      /\}/,
      { relevance: 0 }
    );
    const PAREN_COMMENT = hljs.COMMENT(
      "\\(\\*",
      "\\*\\)",
      { relevance: 10 }
    );
    const STRING = {
      className: "string",
      begin: "'",
      end: "'",
      contains: [{ begin: "''" }]
    };
    const CHAR_STRING = {
      className: "string",
      begin: "(#\\d+)+"
    };
    const FUNCTION = {
      beginKeywords: "function constructor destructor procedure method",
      end: "[:;]",
      keywords: "function constructor|10 destructor|10 procedure|10 method|10",
      contains: [
        hljs.inherit(hljs.TITLE_MODE, { scope: "title.function" }),
        {
          className: "params",
          begin: "\\(",
          end: "\\)",
          keywords: OXYGENE_KEYWORDS,
          contains: [
            STRING,
            CHAR_STRING
          ]
        },
        CURLY_COMMENT,
        PAREN_COMMENT
      ]
    };
    const SEMICOLON = {
      scope: "punctuation",
      match: /;/,
      relevance: 0
    };
    return {
      name: "Oxygene",
      case_insensitive: true,
      keywords: OXYGENE_KEYWORDS,
      illegal: '("|\\$[G-Zg-z]|\\/\\*|</|=>|->)',
      contains: [
        CURLY_COMMENT,
        PAREN_COMMENT,
        hljs.C_LINE_COMMENT_MODE,
        STRING,
        CHAR_STRING,
        hljs.NUMBER_MODE,
        FUNCTION,
        SEMICOLON
      ]
    };
  }
  function parser3(hljs) {
    const CURLY_SUBCOMMENT = hljs.COMMENT(
      /\{/,
      /\}/,
      { contains: ["self"] }
    );
    return {
      name: "Parser3",
      subLanguage: "xml",
      relevance: 0,
      contains: [
        hljs.COMMENT("^#", "$"),
        hljs.COMMENT(
          /\^rem\{/,
          /\}/,
          {
            relevance: 10,
            contains: [CURLY_SUBCOMMENT]
          }
        ),
        {
          className: "meta",
          begin: "^@(?:BASE|USE|CLASS|OPTIONS)$",
          relevance: 10
        },
        {
          className: "title",
          begin: "@[\\w\\-]+\\[[\\w^;\\-]*\\](?:\\[[\\w^;\\-]*\\])?(?:.*)$"
        },
        {
          className: "variable",
          begin: /\$\{?[\w\-.:]+\}?/
        },
        {
          className: "keyword",
          begin: /\^[\w\-.:]+/
        },
        {
          className: "number",
          begin: "\\^#[0-9a-fA-F]+"
        },
        hljs.C_NUMBER_MODE
      ]
    };
  }
  function pf(hljs) {
    const MACRO = {
      className: "variable",
      begin: /\$[\w\d#@][\w\d_]*/,
      relevance: 0
    };
    const TABLE = {
      className: "variable",
      begin: /<(?!\/)/,
      end: />/
    };
    return {
      name: "Packet Filter config",
      aliases: ["pf.conf"],
      keywords: {
        $pattern: /[a-z0-9_<>-]+/,
        built_in: (
          /* block match pass are "actions" in pf.conf(5), the rest are
           * lexically similar top-level commands.
           */
          "block match pass load anchor|5 antispoof|10 set table"
        ),
        keyword: "in out log quick on rdomain inet inet6 proto from port os to route allow-opts divert-packet divert-reply divert-to flags group icmp-type icmp6-type label once probability recieved-on rtable prio queue tos tag tagged user keep fragment for os drop af-to|10 binat-to|10 nat-to|10 rdr-to|10 bitmask least-stats random round-robin source-hash static-port dup-to reply-to route-to parent bandwidth default min max qlimit block-policy debug fingerprints hostid limit loginterface optimization reassemble ruleset-optimization basic none profile skip state-defaults state-policy timeout const counters persist no modulate synproxy state|5 floating if-bound no-sync pflow|10 sloppy source-track global rule max-src-nodes max-src-states max-src-conn max-src-conn-rate overload flush scrub|5 max-mss min-ttl no-df|10 random-id",
        literal: "all any no-route self urpf-failed egress|5 unknown"
      },
      contains: [
        hljs.HASH_COMMENT_MODE,
        hljs.NUMBER_MODE,
        hljs.QUOTE_STRING_MODE,
        MACRO,
        TABLE
      ]
    };
  }
  function pgsql(hljs) {
    const COMMENT_MODE = hljs.COMMENT("--", "$");
    const UNQUOTED_IDENT = "[a-zA-Z_][a-zA-Z_0-9$]*";
    const DOLLAR_STRING = "\\$([a-zA-Z_]?|[a-zA-Z_][a-zA-Z_0-9]*)\\$";
    const LABEL = "<<\\s*" + UNQUOTED_IDENT + "\\s*>>";
    const SQL_KW = (
      // https://www.postgresql.org/docs/11/static/sql-keywords-appendix.html
      // https://www.postgresql.org/docs/11/static/sql-commands.html
      // SQL commands (starting words)
      "ABORT ALTER ANALYZE BEGIN CALL CHECKPOINT|10 CLOSE CLUSTER COMMENT COMMIT COPY CREATE DEALLOCATE DECLARE DELETE DISCARD DO DROP END EXECUTE EXPLAIN FETCH GRANT IMPORT INSERT LISTEN LOAD LOCK MOVE NOTIFY PREPARE REASSIGN|10 REFRESH REINDEX RELEASE RESET REVOKE ROLLBACK SAVEPOINT SECURITY SELECT SET SHOW START TRUNCATE UNLISTEN|10 UPDATE VACUUM|10 VALUES AGGREGATE COLLATION CONVERSION|10 DATABASE DEFAULT PRIVILEGES DOMAIN TRIGGER EXTENSION FOREIGN WRAPPER|10 TABLE FUNCTION GROUP LANGUAGE LARGE OBJECT MATERIALIZED VIEW OPERATOR CLASS FAMILY POLICY PUBLICATION|10 ROLE RULE SCHEMA SEQUENCE SERVER STATISTICS SUBSCRIPTION SYSTEM TABLESPACE CONFIGURATION DICTIONARY PARSER TEMPLATE TYPE USER MAPPING PREPARED ACCESS METHOD CAST AS TRANSFORM TRANSACTION OWNED TO INTO SESSION AUTHORIZATION INDEX PROCEDURE ASSERTION ALL ANALYSE AND ANY ARRAY ASC ASYMMETRIC|10 BOTH CASE CHECK COLLATE COLUMN CONCURRENTLY|10 CONSTRAINT CROSS DEFERRABLE RANGE DESC DISTINCT ELSE EXCEPT FOR FREEZE|10 FROM FULL HAVING ILIKE IN INITIALLY INNER INTERSECT IS ISNULL JOIN LATERAL LEADING LIKE LIMIT NATURAL NOT NOTNULL NULL OFFSET ON ONLY OR ORDER OUTER OVERLAPS PLACING PRIMARY REFERENCES RETURNING SIMILAR SOME SYMMETRIC TABLESAMPLE THEN TRAILING UNION UNIQUE USING VARIADIC|10 VERBOSE WHEN WHERE WINDOW WITH BY RETURNS INOUT OUT SETOF|10 IF STRICT CURRENT CONTINUE OWNER LOCATION OVER PARTITION WITHIN BETWEEN ESCAPE EXTERNAL INVOKER DEFINER WORK RENAME VERSION CONNECTION CONNECT TABLES TEMP TEMPORARY FUNCTIONS SEQUENCES TYPES SCHEMAS OPTION CASCADE RESTRICT ADD ADMIN EXISTS VALID VALIDATE ENABLE DISABLE REPLICA|10 ALWAYS PASSING COLUMNS PATH REF VALUE OVERRIDING IMMUTABLE STABLE VOLATILE BEFORE AFTER EACH ROW PROCEDURAL ROUTINE NO HANDLER VALIDATOR OPTIONS STORAGE OIDS|10 WITHOUT INHERIT DEPENDS CALLED INPUT LEAKPROOF|10 COST ROWS NOWAIT SEARCH UNTIL ENCRYPTED|10 PASSWORD CONFLICT|10 INSTEAD INHERITS CHARACTERISTICS WRITE CURSOR ALSO STATEMENT SHARE EXCLUSIVE INLINE ISOLATION REPEATABLE READ COMMITTED SERIALIZABLE UNCOMMITTED LOCAL GLOBAL SQL PROCEDURES RECURSIVE SNAPSHOT ROLLUP CUBE TRUSTED|10 INCLUDE FOLLOWING PRECEDING UNBOUNDED RANGE GROUPS UNENCRYPTED|10 SYSID FORMAT DELIMITER HEADER QUOTE ENCODING FILTER OFF FORCE_QUOTE FORCE_NOT_NULL FORCE_NULL COSTS BUFFERS TIMING SUMMARY DISABLE_PAGE_SKIPPING RESTART CYCLE GENERATED IDENTITY DEFERRED IMMEDIATE LEVEL LOGGED UNLOGGED OF NOTHING NONE EXCLUDE ATTRIBUTE USAGE ROUTINES TRUE FALSE NAN INFINITY "
    );
    const ROLE_ATTRS = (
      // only those not in keywrods already
      "SUPERUSER NOSUPERUSER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE INHERIT NOINHERIT LOGIN NOLOGIN REPLICATION NOREPLICATION BYPASSRLS NOBYPASSRLS "
    );
    const PLPGSQL_KW = "ALIAS BEGIN CONSTANT DECLARE END EXCEPTION RETURN PERFORM|10 RAISE GET DIAGNOSTICS STACKED|10 FOREACH LOOP ELSIF EXIT WHILE REVERSE SLICE DEBUG LOG INFO NOTICE WARNING ASSERT OPEN ";
    const TYPES2 = (
      // https://www.postgresql.org/docs/11/static/datatype.html
      "BIGINT INT8 BIGSERIAL SERIAL8 BIT VARYING VARBIT BOOLEAN BOOL BOX BYTEA CHARACTER CHAR VARCHAR CIDR CIRCLE DATE DOUBLE PRECISION FLOAT8 FLOAT INET INTEGER INT INT4 INTERVAL JSON JSONB LINE LSEG|10 MACADDR MACADDR8 MONEY NUMERIC DEC DECIMAL PATH POINT POLYGON REAL FLOAT4 SMALLINT INT2 SMALLSERIAL|10 SERIAL2|10 SERIAL|10 SERIAL4|10 TEXT TIME ZONE TIMETZ|10 TIMESTAMP TIMESTAMPTZ|10 TSQUERY|10 TSVECTOR|10 TXID_SNAPSHOT|10 UUID XML NATIONAL NCHAR INT4RANGE|10 INT8RANGE|10 NUMRANGE|10 TSRANGE|10 TSTZRANGE|10 DATERANGE|10 ANYELEMENT ANYARRAY ANYNONARRAY ANYENUM ANYRANGE CSTRING INTERNAL RECORD PG_DDL_COMMAND VOID UNKNOWN OPAQUE REFCURSOR NAME OID REGPROC|10 REGPROCEDURE|10 REGOPER|10 REGOPERATOR|10 REGCLASS|10 REGTYPE|10 REGROLE|10 REGNAMESPACE|10 REGCONFIG|10 REGDICTIONARY|10 "
    );
    const TYPES_RE = TYPES2.trim().split(" ").map(function(val) {
      return val.split("|")[0];
    }).join("|");
    const SQL_BI = "CURRENT_TIME CURRENT_TIMESTAMP CURRENT_USER CURRENT_CATALOG|10 CURRENT_DATE LOCALTIME LOCALTIMESTAMP CURRENT_ROLE|10 CURRENT_SCHEMA|10 SESSION_USER PUBLIC ";
    const PLPGSQL_BI = "FOUND NEW OLD TG_NAME|10 TG_WHEN|10 TG_LEVEL|10 TG_OP|10 TG_RELID|10 TG_RELNAME|10 TG_TABLE_NAME|10 TG_TABLE_SCHEMA|10 TG_NARGS|10 TG_ARGV|10 TG_EVENT|10 TG_TAG|10 ROW_COUNT RESULT_OID|10 PG_CONTEXT|10 RETURNED_SQLSTATE COLUMN_NAME CONSTRAINT_NAME PG_DATATYPE_NAME|10 MESSAGE_TEXT TABLE_NAME SCHEMA_NAME PG_EXCEPTION_DETAIL|10 PG_EXCEPTION_HINT|10 PG_EXCEPTION_CONTEXT|10 ";
    const PLPGSQL_EXCEPTIONS = (
      // exceptions https://www.postgresql.org/docs/current/static/errcodes-appendix.html
      "SQLSTATE SQLERRM|10 SUCCESSFUL_COMPLETION WARNING DYNAMIC_RESULT_SETS_RETURNED IMPLICIT_ZERO_BIT_PADDING NULL_VALUE_ELIMINATED_IN_SET_FUNCTION PRIVILEGE_NOT_GRANTED PRIVILEGE_NOT_REVOKED STRING_DATA_RIGHT_TRUNCATION DEPRECATED_FEATURE NO_DATA NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED SQL_STATEMENT_NOT_YET_COMPLETE CONNECTION_EXCEPTION CONNECTION_DOES_NOT_EXIST CONNECTION_FAILURE SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION TRANSACTION_RESOLUTION_UNKNOWN PROTOCOL_VIOLATION TRIGGERED_ACTION_EXCEPTION FEATURE_NOT_SUPPORTED INVALID_TRANSACTION_INITIATION LOCATOR_EXCEPTION INVALID_LOCATOR_SPECIFICATION INVALID_GRANTOR INVALID_GRANT_OPERATION INVALID_ROLE_SPECIFICATION DIAGNOSTICS_EXCEPTION STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER CASE_NOT_FOUND CARDINALITY_VIOLATION DATA_EXCEPTION ARRAY_SUBSCRIPT_ERROR CHARACTER_NOT_IN_REPERTOIRE DATETIME_FIELD_OVERFLOW DIVISION_BY_ZERO ERROR_IN_ASSIGNMENT ESCAPE_CHARACTER_CONFLICT INDICATOR_OVERFLOW INTERVAL_FIELD_OVERFLOW INVALID_ARGUMENT_FOR_LOGARITHM INVALID_ARGUMENT_FOR_NTILE_FUNCTION INVALID_ARGUMENT_FOR_NTH_VALUE_FUNCTION INVALID_ARGUMENT_FOR_POWER_FUNCTION INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION INVALID_CHARACTER_VALUE_FOR_CAST INVALID_DATETIME_FORMAT INVALID_ESCAPE_CHARACTER INVALID_ESCAPE_OCTET INVALID_ESCAPE_SEQUENCE NONSTANDARD_USE_OF_ESCAPE_CHARACTER INVALID_INDICATOR_PARAMETER_VALUE INVALID_PARAMETER_VALUE INVALID_REGULAR_EXPRESSION INVALID_ROW_COUNT_IN_LIMIT_CLAUSE INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE INVALID_TABLESAMPLE_ARGUMENT INVALID_TABLESAMPLE_REPEAT INVALID_TIME_ZONE_DISPLACEMENT_VALUE INVALID_USE_OF_ESCAPE_CHARACTER MOST_SPECIFIC_TYPE_MISMATCH NULL_VALUE_NOT_ALLOWED NULL_VALUE_NO_INDICATOR_PARAMETER NUMERIC_VALUE_OUT_OF_RANGE SEQUENCE_GENERATOR_LIMIT_EXCEEDED STRING_DATA_LENGTH_MISMATCH STRING_DATA_RIGHT_TRUNCATION SUBSTRING_ERROR TRIM_ERROR UNTERMINATED_C_STRING ZERO_LENGTH_CHARACTER_STRING FLOATING_POINT_EXCEPTION INVALID_TEXT_REPRESENTATION INVALID_BINARY_REPRESENTATION BAD_COPY_FILE_FORMAT UNTRANSLATABLE_CHARACTER NOT_AN_XML_DOCUMENT INVALID_XML_DOCUMENT INVALID_XML_CONTENT INVALID_XML_COMMENT INVALID_XML_PROCESSING_INSTRUCTION INTEGRITY_CONSTRAINT_VIOLATION RESTRICT_VIOLATION NOT_NULL_VIOLATION FOREIGN_KEY_VIOLATION UNIQUE_VIOLATION CHECK_VIOLATION EXCLUSION_VIOLATION INVALID_CURSOR_STATE INVALID_TRANSACTION_STATE ACTIVE_SQL_TRANSACTION BRANCH_TRANSACTION_ALREADY_ACTIVE HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION READ_ONLY_SQL_TRANSACTION SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED NO_ACTIVE_SQL_TRANSACTION IN_FAILED_SQL_TRANSACTION IDLE_IN_TRANSACTION_SESSION_TIMEOUT INVALID_SQL_STATEMENT_NAME TRIGGERED_DATA_CHANGE_VIOLATION INVALID_AUTHORIZATION_SPECIFICATION INVALID_PASSWORD DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST DEPENDENT_OBJECTS_STILL_EXIST INVALID_TRANSACTION_TERMINATION SQL_ROUTINE_EXCEPTION FUNCTION_EXECUTED_NO_RETURN_STATEMENT MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED INVALID_CURSOR_NAME EXTERNAL_ROUTINE_EXCEPTION CONTAINING_SQL_NOT_PERMITTED MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED EXTERNAL_ROUTINE_INVOCATION_EXCEPTION INVALID_SQLSTATE_RETURNED NULL_VALUE_NOT_ALLOWED TRIGGER_PROTOCOL_VIOLATED SRF_PROTOCOL_VIOLATED EVENT_TRIGGER_PROTOCOL_VIOLATED SAVEPOINT_EXCEPTION INVALID_SAVEPOINT_SPECIFICATION INVALID_CATALOG_NAME INVALID_SCHEMA_NAME TRANSACTION_ROLLBACK TRANSACTION_INTEGRITY_CONSTRAINT_VIOLATION SERIALIZATION_FAILURE STATEMENT_COMPLETION_UNKNOWN DEADLOCK_DETECTED SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION SYNTAX_ERROR INSUFFICIENT_PRIVILEGE CANNOT_COERCE GROUPING_ERROR WINDOWING_ERROR INVALID_RECURSION INVALID_FOREIGN_KEY INVALID_NAME NAME_TOO_LONG RESERVED_NAME DATATYPE_MISMATCH INDETERMINATE_DATATYPE COLLATION_MISMATCH INDETERMINATE_COLLATION WRONG_OBJECT_TYPE GENERATED_ALWAYS UNDEFINED_COLUMN UNDEFINED_FUNCTION UNDEFINED_TABLE UNDEFINED_PARAMETER UNDEFINED_OBJECT DUPLICATE_COLUMN DUPLICATE_CURSOR DUPLICATE_DATABASE DUPLICATE_FUNCTION DUPLICATE_PREPARED_STATEMENT DUPLICATE_SCHEMA DUPLICATE_TABLE DUPLICATE_ALIAS DUPLICATE_OBJECT AMBIGUOUS_COLUMN AMBIGUOUS_FUNCTION AMBIGUOUS_PARAMETER AMBIGUOUS_ALIAS INVALID_COLUMN_REFERENCE INVALID_COLUMN_DEFINITION INVALID_CURSOR_DEFINITION INVALID_DATABASE_DEFINITION INVALID_FUNCTION_DEFINITION INVALID_PREPARED_STATEMENT_DEFINITION INVALID_SCHEMA_DEFINITION INVALID_TABLE_DEFINITION INVALID_OBJECT_DEFINITION WITH_CHECK_OPTION_VIOLATION INSUFFICIENT_RESOURCES DISK_FULL OUT_OF_MEMORY TOO_MANY_CONNECTIONS CONFIGURATION_LIMIT_EXCEEDED PROGRAM_LIMIT_EXCEEDED STATEMENT_TOO_COMPLEX TOO_MANY_COLUMNS TOO_MANY_ARGUMENTS OBJECT_NOT_IN_PREREQUISITE_STATE OBJECT_IN_USE CANT_CHANGE_RUNTIME_PARAM LOCK_NOT_AVAILABLE OPERATOR_INTERVENTION QUERY_CANCELED ADMIN_SHUTDOWN CRASH_SHUTDOWN CANNOT_CONNECT_NOW DATABASE_DROPPED SYSTEM_ERROR IO_ERROR UNDEFINED_FILE DUPLICATE_FILE SNAPSHOT_TOO_OLD CONFIG_FILE_ERROR LOCK_FILE_EXISTS FDW_ERROR FDW_COLUMN_NAME_NOT_FOUND FDW_DYNAMIC_PARAMETER_VALUE_NEEDED FDW_FUNCTION_SEQUENCE_ERROR FDW_INCONSISTENT_DESCRIPTOR_INFORMATION FDW_INVALID_ATTRIBUTE_VALUE FDW_INVALID_COLUMN_NAME FDW_INVALID_COLUMN_NUMBER FDW_INVALID_DATA_TYPE FDW_INVALID_DATA_TYPE_DESCRIPTORS FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER FDW_INVALID_HANDLE FDW_INVALID_OPTION_INDEX FDW_INVALID_OPTION_NAME FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH FDW_INVALID_STRING_FORMAT FDW_INVALID_USE_OF_NULL_POINTER FDW_TOO_MANY_HANDLES FDW_OUT_OF_MEMORY FDW_NO_SCHEMAS FDW_OPTION_NAME_NOT_FOUND FDW_REPLY_HANDLE FDW_SCHEMA_NOT_FOUND FDW_TABLE_NOT_FOUND FDW_UNABLE_TO_CREATE_EXECUTION FDW_UNABLE_TO_CREATE_REPLY FDW_UNABLE_TO_ESTABLISH_CONNECTION PLPGSQL_ERROR RAISE_EXCEPTION NO_DATA_FOUND TOO_MANY_ROWS ASSERT_FAILURE INTERNAL_ERROR DATA_CORRUPTED INDEX_CORRUPTED "
    );
    const FUNCTIONS = (
      // https://www.postgresql.org/docs/11/static/functions-aggregate.html
      "ARRAY_AGG AVG BIT_AND BIT_OR BOOL_AND BOOL_OR COUNT EVERY JSON_AGG JSONB_AGG JSON_OBJECT_AGG JSONB_OBJECT_AGG MAX MIN MODE STRING_AGG SUM XMLAGG CORR COVAR_POP COVAR_SAMP REGR_AVGX REGR_AVGY REGR_COUNT REGR_INTERCEPT REGR_R2 REGR_SLOPE REGR_SXX REGR_SXY REGR_SYY STDDEV STDDEV_POP STDDEV_SAMP VARIANCE VAR_POP VAR_SAMP PERCENTILE_CONT PERCENTILE_DISC ROW_NUMBER RANK DENSE_RANK PERCENT_RANK CUME_DIST NTILE LAG LEAD FIRST_VALUE LAST_VALUE NTH_VALUE NUM_NONNULLS NUM_NULLS ABS CBRT CEIL CEILING DEGREES DIV EXP FLOOR LN LOG MOD PI POWER RADIANS ROUND SCALE SIGN SQRT TRUNC WIDTH_BUCKET RANDOM SETSEED ACOS ACOSD ASIN ASIND ATAN ATAND ATAN2 ATAN2D COS COSD COT COTD SIN SIND TAN TAND BIT_LENGTH CHAR_LENGTH CHARACTER_LENGTH LOWER OCTET_LENGTH OVERLAY POSITION SUBSTRING TREAT TRIM UPPER ASCII BTRIM CHR CONCAT CONCAT_WS CONVERT CONVERT_FROM CONVERT_TO DECODE ENCODE INITCAP LEFT LENGTH LPAD LTRIM MD5 PARSE_IDENT PG_CLIENT_ENCODING QUOTE_IDENT|10 QUOTE_LITERAL|10 QUOTE_NULLABLE|10 REGEXP_MATCH REGEXP_MATCHES REGEXP_REPLACE REGEXP_SPLIT_TO_ARRAY REGEXP_SPLIT_TO_TABLE REPEAT REPLACE REVERSE RIGHT RPAD RTRIM SPLIT_PART STRPOS SUBSTR TO_ASCII TO_HEX TRANSLATE OCTET_LENGTH GET_BIT GET_BYTE SET_BIT SET_BYTE TO_CHAR TO_DATE TO_NUMBER TO_TIMESTAMP AGE CLOCK_TIMESTAMP|10 DATE_PART DATE_TRUNC ISFINITE JUSTIFY_DAYS JUSTIFY_HOURS JUSTIFY_INTERVAL MAKE_DATE MAKE_INTERVAL|10 MAKE_TIME MAKE_TIMESTAMP|10 MAKE_TIMESTAMPTZ|10 NOW STATEMENT_TIMESTAMP|10 TIMEOFDAY TRANSACTION_TIMESTAMP|10 ENUM_FIRST ENUM_LAST ENUM_RANGE AREA CENTER DIAMETER HEIGHT ISCLOSED ISOPEN NPOINTS PCLOSE POPEN RADIUS WIDTH BOX BOUND_BOX CIRCLE LINE LSEG PATH POLYGON ABBREV BROADCAST HOST HOSTMASK MASKLEN NETMASK NETWORK SET_MASKLEN TEXT INET_SAME_FAMILY INET_MERGE MACADDR8_SET7BIT ARRAY_TO_TSVECTOR GET_CURRENT_TS_CONFIG NUMNODE PLAINTO_TSQUERY PHRASETO_TSQUERY WEBSEARCH_TO_TSQUERY QUERYTREE SETWEIGHT STRIP TO_TSQUERY TO_TSVECTOR JSON_TO_TSVECTOR JSONB_TO_TSVECTOR TS_DELETE TS_FILTER TS_HEADLINE TS_RANK TS_RANK_CD TS_REWRITE TSQUERY_PHRASE TSVECTOR_TO_ARRAY TSVECTOR_UPDATE_TRIGGER TSVECTOR_UPDATE_TRIGGER_COLUMN XMLCOMMENT XMLCONCAT XMLELEMENT XMLFOREST XMLPI XMLROOT XMLEXISTS XML_IS_WELL_FORMED XML_IS_WELL_FORMED_DOCUMENT XML_IS_WELL_FORMED_CONTENT XPATH XPATH_EXISTS XMLTABLE XMLNAMESPACES TABLE_TO_XML TABLE_TO_XMLSCHEMA TABLE_TO_XML_AND_XMLSCHEMA QUERY_TO_XML QUERY_TO_XMLSCHEMA QUERY_TO_XML_AND_XMLSCHEMA CURSOR_TO_XML CURSOR_TO_XMLSCHEMA SCHEMA_TO_XML SCHEMA_TO_XMLSCHEMA SCHEMA_TO_XML_AND_XMLSCHEMA DATABASE_TO_XML DATABASE_TO_XMLSCHEMA DATABASE_TO_XML_AND_XMLSCHEMA XMLATTRIBUTES TO_JSON TO_JSONB ARRAY_TO_JSON ROW_TO_JSON JSON_BUILD_ARRAY JSONB_BUILD_ARRAY JSON_BUILD_OBJECT JSONB_BUILD_OBJECT JSON_OBJECT JSONB_OBJECT JSON_ARRAY_LENGTH JSONB_ARRAY_LENGTH JSON_EACH JSONB_EACH JSON_EACH_TEXT JSONB_EACH_TEXT JSON_EXTRACT_PATH JSONB_EXTRACT_PATH JSON_OBJECT_KEYS JSONB_OBJECT_KEYS JSON_POPULATE_RECORD JSONB_POPULATE_RECORD JSON_POPULATE_RECORDSET JSONB_POPULATE_RECORDSET JSON_ARRAY_ELEMENTS JSONB_ARRAY_ELEMENTS JSON_ARRAY_ELEMENTS_TEXT JSONB_ARRAY_ELEMENTS_TEXT JSON_TYPEOF JSONB_TYPEOF JSON_TO_RECORD JSONB_TO_RECORD JSON_TO_RECORDSET JSONB_TO_RECORDSET JSON_STRIP_NULLS JSONB_STRIP_NULLS JSONB_SET JSONB_INSERT JSONB_PRETTY CURRVAL LASTVAL NEXTVAL SETVAL COALESCE NULLIF GREATEST LEAST ARRAY_APPEND ARRAY_CAT ARRAY_NDIMS ARRAY_DIMS ARRAY_FILL ARRAY_LENGTH ARRAY_LOWER ARRAY_POSITION ARRAY_POSITIONS ARRAY_PREPEND ARRAY_REMOVE ARRAY_REPLACE ARRAY_TO_STRING ARRAY_UPPER CARDINALITY STRING_TO_ARRAY UNNEST ISEMPTY LOWER_INC UPPER_INC LOWER_INF UPPER_INF RANGE_MERGE GENERATE_SERIES GENERATE_SUBSCRIPTS CURRENT_DATABASE CURRENT_QUERY CURRENT_SCHEMA|10 CURRENT_SCHEMAS|10 INET_CLIENT_ADDR INET_CLIENT_PORT INET_SERVER_ADDR INET_SERVER_PORT ROW_SECURITY_ACTIVE FORMAT_TYPE TO_REGCLASS TO_REGPROC TO_REGPROCEDURE TO_REGOPER TO_REGOPERATOR TO_REGTYPE TO_REGNAMESPACE TO_REGROLE COL_DESCRIPTION OBJ_DESCRIPTION SHOBJ_DESCRIPTION TXID_CURRENT TXID_CURRENT_IF_ASSIGNED TXID_CURRENT_SNAPSHOT TXID_SNAPSHOT_XIP TXID_SNAPSHOT_XMAX TXID_SNAPSHOT_XMIN TXID_VISIBLE_IN_SNAPSHOT TXID_STATUS CURRENT_SETTING SET_CONFIG BRIN_SUMMARIZE_NEW_VALUES BRIN_SUMMARIZE_RANGE BRIN_DESUMMARIZE_RANGE GIN_CLEAN_PENDING_LIST SUPPRESS_REDUNDANT_UPDATES_TRIGGER LO_FROM_BYTEA LO_PUT LO_GET LO_CREAT LO_CREATE LO_UNLINK LO_IMPORT LO_EXPORT LOREAD LOWRITE GROUPING CAST "
    );
    const FUNCTIONS_RE = FUNCTIONS.trim().split(" ").map(function(val) {
      return val.split("|")[0];
    }).join("|");
    return {
      name: "PostgreSQL",
      aliases: [
        "postgres",
        "postgresql"
      ],
      supersetOf: "sql",
      case_insensitive: true,
      keywords: {
        keyword: SQL_KW + PLPGSQL_KW + ROLE_ATTRS,
        built_in: SQL_BI + PLPGSQL_BI + PLPGSQL_EXCEPTIONS
      },
      // Forbid some cunstructs from other languages to improve autodetect. In fact
      // "[a-z]:" is legal (as part of array slice), but improbabal.
      illegal: /:==|\W\s*\(\*|(^|\s)\$[a-z]|\{\{|[a-z]:\s*$|\.\.\.|TO:|DO:/,
      contains: [
        // special handling of some words, which are reserved only in some contexts
        {
          className: "keyword",
          variants: [
            { begin: /\bTEXT\s*SEARCH\b/ },
            { begin: /\b(PRIMARY|FOREIGN|FOR(\s+NO)?)\s+KEY\b/ },
            { begin: /\bPARALLEL\s+(UNSAFE|RESTRICTED|SAFE)\b/ },
            { begin: /\bSTORAGE\s+(PLAIN|EXTERNAL|EXTENDED|MAIN)\b/ },
            { begin: /\bMATCH\s+(FULL|PARTIAL|SIMPLE)\b/ },
            { begin: /\bNULLS\s+(FIRST|LAST)\b/ },
            { begin: /\bEVENT\s+TRIGGER\b/ },
            { begin: /\b(MAPPING|OR)\s+REPLACE\b/ },
            { begin: /\b(FROM|TO)\s+(PROGRAM|STDIN|STDOUT)\b/ },
            { begin: /\b(SHARE|EXCLUSIVE)\s+MODE\b/ },
            { begin: /\b(LEFT|RIGHT)\s+(OUTER\s+)?JOIN\b/ },
            { begin: /\b(FETCH|MOVE)\s+(NEXT|PRIOR|FIRST|LAST|ABSOLUTE|RELATIVE|FORWARD|BACKWARD)\b/ },
            { begin: /\bPRESERVE\s+ROWS\b/ },
            { begin: /\bDISCARD\s+PLANS\b/ },
            { begin: /\bREFERENCING\s+(OLD|NEW)\b/ },
            { begin: /\bSKIP\s+LOCKED\b/ },
            { begin: /\bGROUPING\s+SETS\b/ },
            { begin: /\b(BINARY|INSENSITIVE|SCROLL|NO\s+SCROLL)\s+(CURSOR|FOR)\b/ },
            { begin: /\b(WITH|WITHOUT)\s+HOLD\b/ },
            { begin: /\bWITH\s+(CASCADED|LOCAL)\s+CHECK\s+OPTION\b/ },
            { begin: /\bEXCLUDE\s+(TIES|NO\s+OTHERS)\b/ },
            { begin: /\bFORMAT\s+(TEXT|XML|JSON|YAML)\b/ },
            { begin: /\bSET\s+((SESSION|LOCAL)\s+)?NAMES\b/ },
            { begin: /\bIS\s+(NOT\s+)?UNKNOWN\b/ },
            { begin: /\bSECURITY\s+LABEL\b/ },
            { begin: /\bSTANDALONE\s+(YES|NO|NO\s+VALUE)\b/ },
            { begin: /\bWITH\s+(NO\s+)?DATA\b/ },
            { begin: /\b(FOREIGN|SET)\s+DATA\b/ },
            { begin: /\bSET\s+(CATALOG|CONSTRAINTS)\b/ },
            { begin: /\b(WITH|FOR)\s+ORDINALITY\b/ },
            { begin: /\bIS\s+(NOT\s+)?DOCUMENT\b/ },
            { begin: /\bXML\s+OPTION\s+(DOCUMENT|CONTENT)\b/ },
            { begin: /\b(STRIP|PRESERVE)\s+WHITESPACE\b/ },
            { begin: /\bNO\s+(ACTION|MAXVALUE|MINVALUE)\b/ },
            { begin: /\bPARTITION\s+BY\s+(RANGE|LIST|HASH)\b/ },
            { begin: /\bAT\s+TIME\s+ZONE\b/ },
            { begin: /\bGRANTED\s+BY\b/ },
            { begin: /\bRETURN\s+(QUERY|NEXT)\b/ },
            { begin: /\b(ATTACH|DETACH)\s+PARTITION\b/ },
            { begin: /\bFORCE\s+ROW\s+LEVEL\s+SECURITY\b/ },
            { begin: /\b(INCLUDING|EXCLUDING)\s+(COMMENTS|CONSTRAINTS|DEFAULTS|IDENTITY|INDEXES|STATISTICS|STORAGE|ALL)\b/ },
            { begin: /\bAS\s+(ASSIGNMENT|IMPLICIT|PERMISSIVE|RESTRICTIVE|ENUM|RANGE)\b/ }
          ]
        },
        // functions named as keywords, followed by '('
        {
          begin: /\b(FORMAT|FAMILY|VERSION)\s*\(/
          // keywords: { built_in: 'FORMAT FAMILY VERSION' }
        },
        // INCLUDE ( ... ) in index_parameters in CREATE TABLE
        {
          begin: /\bINCLUDE\s*\(/,
          keywords: "INCLUDE"
        },
        // not highlight RANGE if not in frame_clause (not 100% correct, but seems satisfactory)
        { begin: /\bRANGE(?!\s*(BETWEEN|UNBOUNDED|CURRENT|[-0-9]+))/ },
        // disable highlighting in commands CREATE AGGREGATE/COLLATION/DATABASE/OPERTOR/TEXT SEARCH .../TYPE
        // and in PL/pgSQL RAISE ... USING
        { begin: /\b(VERSION|OWNER|TEMPLATE|TABLESPACE|CONNECTION\s+LIMIT|PROCEDURE|RESTRICT|JOIN|PARSER|COPY|START|END|COLLATION|INPUT|ANALYZE|STORAGE|LIKE|DEFAULT|DELIMITER|ENCODING|COLUMN|CONSTRAINT|TABLE|SCHEMA)\s*=/ },
        // PG_smth; HAS_some_PRIVILEGE
        {
          // className: 'built_in',
          begin: /\b(PG_\w+?|HAS_[A-Z_]+_PRIVILEGE)\b/,
          relevance: 10
        },
        // extract
        {
          begin: /\bEXTRACT\s*\(/,
          end: /\bFROM\b/,
          returnEnd: true,
          keywords: {
            // built_in: 'EXTRACT',
            type: "CENTURY DAY DECADE DOW DOY EPOCH HOUR ISODOW ISOYEAR MICROSECONDS MILLENNIUM MILLISECONDS MINUTE MONTH QUARTER SECOND TIMEZONE TIMEZONE_HOUR TIMEZONE_MINUTE WEEK YEAR"
          }
        },
        // xmlelement, xmlpi - special NAME
        {
          begin: /\b(XMLELEMENT|XMLPI)\s*\(\s*NAME/,
          keywords: {
            // built_in: 'XMLELEMENT XMLPI',
            keyword: "NAME"
          }
        },
        // xmlparse, xmlserialize
        {
          begin: /\b(XMLPARSE|XMLSERIALIZE)\s*\(\s*(DOCUMENT|CONTENT)/,
          keywords: {
            // built_in: 'XMLPARSE XMLSERIALIZE',
            keyword: "DOCUMENT CONTENT"
          }
        },
        // Sequences. We actually skip everything between CACHE|INCREMENT|MAXVALUE|MINVALUE and
        // nearest following numeric constant. Without with trick we find a lot of "keywords"
        // in 'avrasm' autodetection test...
        {
          beginKeywords: "CACHE INCREMENT MAXVALUE MINVALUE",
          end: hljs.C_NUMBER_RE,
          returnEnd: true,
          keywords: "BY CACHE INCREMENT MAXVALUE MINVALUE"
        },
        // WITH|WITHOUT TIME ZONE as part of datatype
        {
          className: "type",
          begin: /\b(WITH|WITHOUT)\s+TIME\s+ZONE\b/
        },
        // INTERVAL optional fields
        {
          className: "type",
          begin: /\bINTERVAL\s+(YEAR|MONTH|DAY|HOUR|MINUTE|SECOND)(\s+TO\s+(MONTH|HOUR|MINUTE|SECOND))?\b/
        },
        // Pseudo-types which allowed only as return type
        {
          begin: /\bRETURNS\s+(LANGUAGE_HANDLER|TRIGGER|EVENT_TRIGGER|FDW_HANDLER|INDEX_AM_HANDLER|TSM_HANDLER)\b/,
          keywords: {
            keyword: "RETURNS",
            type: "LANGUAGE_HANDLER TRIGGER EVENT_TRIGGER FDW_HANDLER INDEX_AM_HANDLER TSM_HANDLER"
          }
        },
        // Known functions - only when followed by '('
        {
          begin: "\\b(" + FUNCTIONS_RE + ")\\s*\\("
          // keywords: { built_in: FUNCTIONS }
        },
        // Types
        {
          begin: "\\.(" + TYPES_RE + ")\\b"
          // prevent highlight as type, say, 'oid' in 'pgclass.oid'
        },
        {
          begin: "\\b(" + TYPES_RE + ")\\s+PATH\\b",
          // in XMLTABLE
          keywords: {
            keyword: "PATH",
            // hopefully no one would use PATH type in XMLTABLE...
            type: TYPES2.replace("PATH ", "")
          }
        },
        {
          className: "type",
          begin: "\\b(" + TYPES_RE + ")\\b"
        },
        // Strings, see https://www.postgresql.org/docs/11/static/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS
        {
          className: "string",
          begin: "'",
          end: "'",
          contains: [{ begin: "''" }]
        },
        {
          className: "string",
          begin: "(e|E|u&|U&)'",
          end: "'",
          contains: [{ begin: "\\\\." }],
          relevance: 10
        },
        hljs.END_SAME_AS_BEGIN({
          begin: DOLLAR_STRING,
          end: DOLLAR_STRING,
          contains: [
            {
              // actually we want them all except SQL; listed are those with known implementations
              // and XML + JSON just in case
              subLanguage: [
                "pgsql",
                "perl",
                "python",
                "tcl",
                "r",
                "lua",
                "java",
                "php",
                "ruby",
                "bash",
                "scheme",
                "xml",
                "json"
              ],
              endsWithParent: true
            }
          ]
        }),
        // identifiers in quotes
        {
          begin: '"',
          end: '"',
          contains: [{ begin: '""' }]
        },
        // numbers
        hljs.C_NUMBER_MODE,
        // comments
        hljs.C_BLOCK_COMMENT_MODE,
        COMMENT_MODE,
        // PL/pgSQL staff
        // %ROWTYPE, %TYPE, $n
        {
          className: "meta",
          variants: [
            {
              // %TYPE, %ROWTYPE
              begin: "%(ROW)?TYPE",
              relevance: 10
            },
            {
              // $n
              begin: "\\$\\d+"
            },
            {
              // #compiler option
              begin: "^#\\w",
              end: "$"
            }
          ]
        },
        // <<labeles>>
        {
          className: "symbol",
          begin: LABEL,
          relevance: 10
        }
      ]
    };
  }
  function pony(hljs) {
    const KEYWORDS2 = {
      keyword: "actor addressof and as be break class compile_error compile_intrinsic consume continue delegate digestof do else elseif embed end error for fun if ifdef in interface is isnt lambda let match new not object or primitive recover repeat return struct then trait try type until use var where while with xor",
      meta: "iso val tag trn box ref",
      literal: "this false true"
    };
    const TRIPLE_QUOTE_STRING_MODE = {
      className: "string",
      begin: '"""',
      end: '"""',
      relevance: 10
    };
    const QUOTE_STRING_MODE2 = {
      className: "string",
      begin: '"',
      end: '"',
      contains: [hljs.BACKSLASH_ESCAPE]
    };
    const SINGLE_QUOTE_CHAR_MODE = {
      className: "string",
      begin: "'",
      end: "'",
      contains: [hljs.BACKSLASH_ESCAPE],
      relevance: 0
    };
    const TYPE_NAME = {
      className: "type",
      begin: "\\b_?[A-Z][\\w]*",
      relevance: 0
    };
    const PRIMED_NAME = {
      begin: hljs.IDENT_RE + "'",
      relevance: 0
    };
    const NUMBER_MODE2 = {
      className: "number",
      begin: "(-?)(\\b0[xX][a-fA-F0-9]+|\\b0[bB][01]+|(\\b\\d+(_\\d+)?(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",
      relevance: 0
    };
    return {
      name: "Pony",
      keywords: KEYWORDS2,
      contains: [
        TYPE_NAME,
        TRIPLE_QUOTE_STRING_MODE,
        QUOTE_STRING_MODE2,
        SINGLE_QUOTE_CHAR_MODE,
        PRIMED_NAME,
        NUMBER_MODE2,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  function powershell(hljs) {
    const TYPES2 = [
      "string",
      "char",
      "byte",
      "int",
      "long",
      "bool",
      "decimal",
      "single",
      "double",
      "DateTime",
      "xml",
      "array",
      "hashtable",
      "void"
    ];
    const VALID_VERBS = "Add|Clear|Close|Copy|Enter|Exit|Find|Format|Get|Hide|Join|Lock|Move|New|Open|Optimize|Pop|Push|Redo|Remove|Rename|Reset|Resize|Search|Select|Set|Show|Skip|Split|Step|Switch|Undo|Unlock|Watch|Backup|Checkpoint|Compare|Compress|Convert|ConvertFrom|ConvertTo|Dismount|Edit|Expand|Export|Group|Import|Initialize|Limit|Merge|Mount|Out|Publish|Restore|Save|Sync|Unpublish|Update|Approve|Assert|Build|Complete|Confirm|Deny|Deploy|Disable|Enable|Install|Invoke|Register|Request|Restart|Resume|Start|Stop|Submit|Suspend|Uninstall|Unregister|Wait|Debug|Measure|Ping|Repair|Resolve|Test|Trace|Connect|Disconnect|Read|Receive|Send|Write|Block|Grant|Protect|Revoke|Unblock|Unprotect|Use|ForEach|Sort|Tee|Where";
    const COMPARISON_OPERATORS = "-and|-as|-band|-bnot|-bor|-bxor|-casesensitive|-ccontains|-ceq|-cge|-cgt|-cle|-clike|-clt|-cmatch|-cne|-cnotcontains|-cnotlike|-cnotmatch|-contains|-creplace|-csplit|-eq|-exact|-f|-file|-ge|-gt|-icontains|-ieq|-ige|-igt|-ile|-ilike|-ilt|-imatch|-in|-ine|-inotcontains|-inotlike|-inotmatch|-ireplace|-is|-isnot|-isplit|-join|-le|-like|-lt|-match|-ne|-not|-notcontains|-notin|-notlike|-notmatch|-or|-regex|-replace|-shl|-shr|-split|-wildcard|-xor";
    const KEYWORDS2 = {
      $pattern: /-?[A-z\.\-]+\b/,
      keyword: "if else foreach return do while until elseif begin for trap data dynamicparam end break throw param continue finally in switch exit filter try process catch hidden static parameter",
      // "echo" relevance has been set to 0 to avoid auto-detect conflicts with shell transcripts
      built_in: "ac asnp cat cd CFS chdir clc clear clhy cli clp cls clv cnsn compare copy cp cpi cpp curl cvpa dbp del diff dir dnsn ebp echo|0 epal epcsv epsn erase etsn exsn fc fhx fl ft fw gal gbp gc gcb gci gcm gcs gdr gerr ghy gi gin gjb gl gm gmo gp gps gpv group gsn gsnp gsv gtz gu gv gwmi h history icm iex ihy ii ipal ipcsv ipmo ipsn irm ise iwmi iwr kill lp ls man md measure mi mount move mp mv nal ndr ni nmo npssc nsn nv ogv oh popd ps pushd pwd r rbp rcjb rcsn rd rdr ren ri rjb rm rmdir rmo rni rnp rp rsn rsnp rujb rv rvpa rwmi sajb sal saps sasv sbp sc scb select set shcm si sl sleep sls sort sp spjb spps spsv start stz sujb sv swmi tee trcm type wget where wjb write"
      // TODO: 'validate[A-Z]+' can't work in keywords
    };
    const TITLE_NAME_RE = /\w[\w\d]*((-)[\w\d]+)*/;
    const BACKTICK_ESCAPE = {
      begin: "`[\\s\\S]",
      relevance: 0
    };
    const VAR = {
      className: "variable",
      variants: [
        { begin: /\$\B/ },
        {
          className: "keyword",
          begin: /\$this/
        },
        { begin: /\$[\w\d][\w\d_:]*/ }
      ]
    };
    const LITERAL = {
      className: "literal",
      begin: /\$(null|true|false)\b/
    };
    const QUOTE_STRING = {
      className: "string",
      variants: [
        {
          begin: /"/,
          end: /"/
        },
        {
          begin: /@"/,
          end: /^"@/
        }
      ],
      contains: [
        BACKTICK_ESCAPE,
        VAR,
        {
          className: "variable",
          begin: /\$[A-z]/,
          end: /[^A-z]/
        }
      ]
    };
    const APOS_STRING = {
      className: "string",
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /@'/,
          end: /^'@/
        }
      ]
    };
    const PS_HELPTAGS = {
      className: "doctag",
      variants: [
        /* no paramater help tags */
        { begin: /\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/ },
        /* one parameter help tags */
        { begin: /\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+\S+/ }
      ]
    };
    const PS_COMMENT = hljs.inherit(
      hljs.COMMENT(null, null),
      {
        variants: [
          /* single-line comment */
          {
            begin: /#/,
            end: /$/
          },
          /* multi-line comment */
          {
            begin: /<#/,
            end: /#>/
          }
        ],
        contains: [PS_HELPTAGS]
      }
    );
    const CMDLETS = {
      className: "built_in",
      variants: [{ begin: "(".concat(VALID_VERBS, ")+(-)[\\w\\d]+") }]
    };
    const PS_CLASS = {
      className: "class",
      beginKeywords: "class enum",
      end: /\s*[{]/,
      excludeEnd: true,
      relevance: 0,
      contains: [hljs.TITLE_MODE]
    };
    const PS_FUNCTION = {
      className: "function",
      begin: /function\s+/,
      end: /\s*\{|$/,
      excludeEnd: true,
      returnBegin: true,
      relevance: 0,
      contains: [
        {
          begin: "function",
          relevance: 0,
          className: "keyword"
        },
        {
          className: "title",
          begin: TITLE_NAME_RE,
          relevance: 0
        },
        {
          begin: /\(/,
          end: /\)/,
          className: "params",
          relevance: 0,
          contains: [VAR]
        }
        // CMDLETS
      ]
    };
    const PS_USING = {
      begin: /using\s/,
      end: /$/,
      returnBegin: true,
      contains: [
        QUOTE_STRING,
        APOS_STRING,
        {
          className: "keyword",
          begin: /(using|assembly|command|module|namespace|type)/
        }
      ]
    };
    const PS_ARGUMENTS = { variants: [
      // PS literals are pretty verbose so it's a good idea to accent them a bit.
      {
        className: "operator",
        begin: "(".concat(COMPARISON_OPERATORS, ")\\b")
      },
      {
        className: "literal",
        begin: /(-){1,2}[\w\d-]+/,
        relevance: 0
      }
    ] };
    const HASH_SIGNS = {
      className: "selector-tag",
      begin: /@\B/,
      relevance: 0
    };
    const PS_METHODS = {
      className: "function",
      begin: /\[.*\]\s*[\w]+[ ]??\(/,
      end: /$/,
      returnBegin: true,
      relevance: 0,
      contains: [
        {
          className: "keyword",
          begin: "(".concat(
            KEYWORDS2.keyword.toString().replace(
              /\s/g,
              "|"
            ),
            ")\\b"
          ),
          endsParent: true,
          relevance: 0
        },
        hljs.inherit(hljs.TITLE_MODE, { endsParent: true })
      ]
    };
    const GENTLEMANS_SET = [
      // STATIC_MEMBER,
      PS_METHODS,
      PS_COMMENT,
      BACKTICK_ESCAPE,
      hljs.NUMBER_MODE,
      QUOTE_STRING,
      APOS_STRING,
      // PS_NEW_OBJECT_TYPE,
      CMDLETS,
      VAR,
      LITERAL,
      HASH_SIGNS
    ];
    const PS_TYPE = {
      begin: /\[/,
      end: /\]/,
      excludeBegin: true,
      excludeEnd: true,
      relevance: 0,
      contains: [].concat(
        "self",
        GENTLEMANS_SET,
        {
          begin: "(" + TYPES2.join("|") + ")",
          className: "built_in",
          relevance: 0
        },
        {
          className: "type",
          begin: /[\.\w\d]+/,
          relevance: 0
        }
      )
    };
    PS_METHODS.contains.unshift(PS_TYPE);
    return {
      name: "PowerShell",
      aliases: [
        "pwsh",
        "ps",
        "ps1"
      ],
      case_insensitive: true,
      keywords: KEYWORDS2,
      contains: GENTLEMANS_SET.concat(
        PS_CLASS,
        PS_FUNCTION,
        PS_USING,
        PS_ARGUMENTS,
        PS_TYPE
      )
    };
  }
  function processing(hljs) {
    const regex = hljs.regex;
    const BUILT_INS2 = [
      "displayHeight",
      "displayWidth",
      "mouseY",
      "mouseX",
      "mousePressed",
      "pmouseX",
      "pmouseY",
      "key",
      "keyCode",
      "pixels",
      "focused",
      "frameCount",
      "frameRate",
      "height",
      "width",
      "size",
      "createGraphics",
      "beginDraw",
      "createShape",
      "loadShape",
      "PShape",
      "arc",
      "ellipse",
      "line",
      "point",
      "quad",
      "rect",
      "triangle",
      "bezier",
      "bezierDetail",
      "bezierPoint",
      "bezierTangent",
      "curve",
      "curveDetail",
      "curvePoint",
      "curveTangent",
      "curveTightness",
      "shape",
      "shapeMode",
      "beginContour",
      "beginShape",
      "bezierVertex",
      "curveVertex",
      "endContour",
      "endShape",
      "quadraticVertex",
      "vertex",
      "ellipseMode",
      "noSmooth",
      "rectMode",
      "smooth",
      "strokeCap",
      "strokeJoin",
      "strokeWeight",
      "mouseClicked",
      "mouseDragged",
      "mouseMoved",
      "mousePressed",
      "mouseReleased",
      "mouseWheel",
      "keyPressed",
      "keyPressedkeyReleased",
      "keyTyped",
      "print",
      "println",
      "save",
      "saveFrame",
      "day",
      "hour",
      "millis",
      "minute",
      "month",
      "second",
      "year",
      "background",
      "clear",
      "colorMode",
      "fill",
      "noFill",
      "noStroke",
      "stroke",
      "alpha",
      "blue",
      "brightness",
      "color",
      "green",
      "hue",
      "lerpColor",
      "red",
      "saturation",
      "modelX",
      "modelY",
      "modelZ",
      "screenX",
      "screenY",
      "screenZ",
      "ambient",
      "emissive",
      "shininess",
      "specular",
      "add",
      "createImage",
      "beginCamera",
      "camera",
      "endCamera",
      "frustum",
      "ortho",
      "perspective",
      "printCamera",
      "printProjection",
      "cursor",
      "frameRate",
      "noCursor",
      "exit",
      "loop",
      "noLoop",
      "popStyle",
      "pushStyle",
      "redraw",
      "binary",
      "boolean",
      "byte",
      "char",
      "float",
      "hex",
      "int",
      "str",
      "unbinary",
      "unhex",
      "join",
      "match",
      "matchAll",
      "nf",
      "nfc",
      "nfp",
      "nfs",
      "split",
      "splitTokens",
      "trim",
      "append",
      "arrayCopy",
      "concat",
      "expand",
      "reverse",
      "shorten",
      "sort",
      "splice",
      "subset",
      "box",
      "sphere",
      "sphereDetail",
      "createInput",
      "createReader",
      "loadBytes",
      "loadJSONArray",
      "loadJSONObject",
      "loadStrings",
      "loadTable",
      "loadXML",
      "open",
      "parseXML",
      "saveTable",
      "selectFolder",
      "selectInput",
      "beginRaw",
      "beginRecord",
      "createOutput",
      "createWriter",
      "endRaw",
      "endRecord",
      "PrintWritersaveBytes",
      "saveJSONArray",
      "saveJSONObject",
      "saveStream",
      "saveStrings",
      "saveXML",
      "selectOutput",
      "popMatrix",
      "printMatrix",
      "pushMatrix",
      "resetMatrix",
      "rotate",
      "rotateX",
      "rotateY",
      "rotateZ",
      "scale",
      "shearX",
      "shearY",
      "translate",
      "ambientLight",
      "directionalLight",
      "lightFalloff",
      "lights",
      "lightSpecular",
      "noLights",
      "normal",
      "pointLight",
      "spotLight",
      "image",
      "imageMode",
      "loadImage",
      "noTint",
      "requestImage",
      "tint",
      "texture",
      "textureMode",
      "textureWrap",
      "blend",
      "copy",
      "filter",
      "get",
      "loadPixels",
      "set",
      "updatePixels",
      "blendMode",
      "loadShader",
      "PShaderresetShader",
      "shader",
      "createFont",
      "loadFont",
      "text",
      "textFont",
      "textAlign",
      "textLeading",
      "textMode",
      "textSize",
      "textWidth",
      "textAscent",
      "textDescent",
      "abs",
      "ceil",
      "constrain",
      "dist",
      "exp",
      "floor",
      "lerp",
      "log",
      "mag",
      "map",
      "max",
      "min",
      "norm",
      "pow",
      "round",
      "sq",
      "sqrt",
      "acos",
      "asin",
      "atan",
      "atan2",
      "cos",
      "degrees",
      "radians",
      "sin",
      "tan",
      "noise",
      "noiseDetail",
      "noiseSeed",
      "random",
      "randomGaussian",
      "randomSeed"
    ];
    const IDENT = hljs.IDENT_RE;
    const FUNC_NAME = { variants: [
      {
        match: regex.concat(regex.either(...BUILT_INS2), regex.lookahead(/\s*\(/)),
        className: "built_in"
      },
      {
        relevance: 0,
        match: regex.concat(
          /\b(?!for|if|while)/,
          IDENT,
          regex.lookahead(/\s*\(/)
        ),
        className: "title.function"
      }
    ] };
    const NEW_CLASS = {
      match: [
        /new\s+/,
        IDENT
      ],
      className: {
        1: "keyword",
        2: "class.title"
      }
    };
    const PROPERTY = {
      relevance: 0,
      match: [
        /\./,
        IDENT
      ],
      className: { 2: "property" }
    };
    const CLASS = {
      variants: [
        { match: [
          /class/,
          /\s+/,
          IDENT,
          /\s+/,
          /extends/,
          /\s+/,
          IDENT
        ] },
        { match: [
          /class/,
          /\s+/,
          IDENT
        ] }
      ],
      className: {
        1: "keyword",
        3: "title.class",
        5: "keyword",
        7: "title.class.inherited"
      }
    };
    const TYPES2 = [
      "boolean",
      "byte",
      "char",
      "color",
      "double",
      "float",
      "int",
      "long",
      "short"
    ];
    const CLASSES = [
      "BufferedReader",
      "PVector",
      "PFont",
      "PImage",
      "PGraphics",
      "HashMap",
      "String",
      "Array",
      "FloatDict",
      "ArrayList",
      "FloatList",
      "IntDict",
      "IntList",
      "JSONArray",
      "JSONObject",
      "Object",
      "StringDict",
      "StringList",
      "Table",
      "TableRow",
      "XML"
    ];
    const JAVA_KEYWORDS = [
      "abstract",
      "assert",
      "break",
      "case",
      "catch",
      "const",
      "continue",
      "default",
      "else",
      "enum",
      "final",
      "finally",
      "for",
      "if",
      "import",
      "instanceof",
      "long",
      "native",
      "new",
      "package",
      "private",
      "private",
      "protected",
      "protected",
      "public",
      "public",
      "return",
      "static",
      "strictfp",
      "switch",
      "synchronized",
      "throw",
      "throws",
      "transient",
      "try",
      "void",
      "volatile",
      "while"
    ];
    return {
      name: "Processing",
      aliases: ["pde"],
      keywords: {
        keyword: [...JAVA_KEYWORDS],
        literal: "P2D P3D HALF_PI PI QUARTER_PI TAU TWO_PI null true false",
        title: "setup draw",
        variable: "super this",
        built_in: [
          ...BUILT_INS2,
          ...CLASSES
        ],
        type: TYPES2
      },
      contains: [
        CLASS,
        NEW_CLASS,
        FUNC_NAME,
        PROPERTY,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE
      ]
    };
  }
  function profile(hljs) {
    return {
      name: "Python profiler",
      contains: [
        hljs.C_NUMBER_MODE,
        {
          begin: "[a-zA-Z_][\\da-zA-Z_]+\\.[\\da-zA-Z_]{1,3}",
          end: ":",
          excludeEnd: true
        },
        {
          begin: "(ncalls|tottime|cumtime)",
          end: "$",
          keywords: "ncalls tottime|10 cumtime|10 filename",
          relevance: 10
        },
        {
          begin: "function calls",
          end: "$",
          contains: [hljs.C_NUMBER_MODE],
          relevance: 10
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "\\(",
          end: "\\)$",
          excludeBegin: true,
          excludeEnd: true,
          relevance: 0
        }
      ]
    };
  }
  function prolog(hljs) {
    const ATOM = {
      begin: /[a-z][A-Za-z0-9_]*/,
      relevance: 0
    };
    const VAR = {
      className: "symbol",
      variants: [
        { begin: /[A-Z][a-zA-Z0-9_]*/ },
        { begin: /_[A-Za-z0-9_]*/ }
      ],
      relevance: 0
    };
    const PARENTED = {
      begin: /\(/,
      end: /\)/,
      relevance: 0
    };
    const LIST = {
      begin: /\[/,
      end: /\]/
    };
    const LINE_COMMENT = {
      className: "comment",
      begin: /%/,
      end: /$/,
      contains: [hljs.PHRASAL_WORDS_MODE]
    };
    const BACKTICK_STRING = {
      className: "string",
      begin: /`/,
      end: /`/,
      contains: [hljs.BACKSLASH_ESCAPE]
    };
    const CHAR_CODE = {
      className: "string",
      // 0'a etc.
      begin: /0'(\\'|.)/
    };
    const SPACE_CODE = {
      className: "string",
      begin: /0'\\s/
      // 0'\s
    };
    const PRED_OP = {
      // relevance booster
      begin: /:-/
    };
    const inner = [
      ATOM,
      VAR,
      PARENTED,
      PRED_OP,
      LIST,
      LINE_COMMENT,
      hljs.C_BLOCK_COMMENT_MODE,
      hljs.QUOTE_STRING_MODE,
      hljs.APOS_STRING_MODE,
      BACKTICK_STRING,
      CHAR_CODE,
      SPACE_CODE,
      hljs.C_NUMBER_MODE
    ];
    PARENTED.contains = inner;
    LIST.contains = inner;
    return {
      name: "Prolog",
      contains: inner.concat([
        {
          // relevance booster
          begin: /\.$/
        }
      ])
    };
  }
  function properties(hljs) {
    const WS0 = "[ \\t\\f]*";
    const WS1 = "[ \\t\\f]+";
    const EQUAL_DELIM = WS0 + "[:=]" + WS0;
    const WS_DELIM = WS1;
    const DELIM = "(" + EQUAL_DELIM + "|" + WS_DELIM + ")";
    const KEY = "([^\\\\:= \\t\\f\\n]|\\\\.)+";
    const DELIM_AND_VALUE = {
      // skip DELIM
      end: DELIM,
      relevance: 0,
      starts: {
        // value: everything until end of line (again, taking into account backslashes)
        className: "string",
        end: /$/,
        relevance: 0,
        contains: [
          { begin: "\\\\\\\\" },
          { begin: "\\\\\\n" }
        ]
      }
    };
    return {
      name: ".properties",
      disableAutodetect: true,
      case_insensitive: true,
      illegal: /\S/,
      contains: [
        hljs.COMMENT("^\\s*[!#]", "$"),
        // key: everything until whitespace or = or : (taking into account backslashes)
        // case of a key-value pair
        {
          returnBegin: true,
          variants: [
            { begin: KEY + EQUAL_DELIM },
            { begin: KEY + WS_DELIM }
          ],
          contains: [
            {
              className: "attr",
              begin: KEY,
              endsParent: true
            }
          ],
          starts: DELIM_AND_VALUE
        },
        // case of an empty key
        {
          className: "attr",
          begin: KEY + WS0 + "$"
        }
      ]
    };
  }
  function protobuf(hljs) {
    const KEYWORDS2 = [
      "package",
      "import",
      "option",
      "optional",
      "required",
      "repeated",
      "group",
      "oneof"
    ];
    const TYPES2 = [
      "double",
      "float",
      "int32",
      "int64",
      "uint32",
      "uint64",
      "sint32",
      "sint64",
      "fixed32",
      "fixed64",
      "sfixed32",
      "sfixed64",
      "bool",
      "string",
      "bytes"
    ];
    const CLASS_DEFINITION = {
      match: [
        /(message|enum|service)\s+/,
        hljs.IDENT_RE
      ],
      scope: {
        1: "keyword",
        2: "title.class"
      }
    };
    return {
      name: "Protocol Buffers",
      aliases: ["proto"],
      keywords: {
        keyword: KEYWORDS2,
        type: TYPES2,
        literal: [
          "true",
          "false"
        ]
      },
      contains: [
        hljs.QUOTE_STRING_MODE,
        hljs.NUMBER_MODE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        CLASS_DEFINITION,
        {
          className: "function",
          beginKeywords: "rpc",
          end: /[{;]/,
          excludeEnd: true,
          keywords: "rpc returns"
        },
        {
          // match enum items (relevance)
          // BLAH = ...;
          begin: /^\s*[A-Z_]+(?=\s*=[^\n]+;$)/
        }
      ]
    };
  }
  function puppet(hljs) {
    const PUPPET_KEYWORDS = {
      keyword: (
        /* language keywords */
        "and case default else elsif false if in import enherits node or true undef unless main settings $string "
      ),
      literal: (
        /* metaparameters */
        "alias audit before loglevel noop require subscribe tag owner ensure group mode name|0 changes context force incl lens load_path onlyif provider returns root show_diff type_check en_address ip_address realname command environment hour monute month monthday special target weekday creates cwd ogoutput refresh refreshonly tries try_sleep umask backup checksum content ctime force ignore links mtime purge recurse recurselimit replace selinux_ignore_defaults selrange selrole seltype seluser source souirce_permissions sourceselect validate_cmd validate_replacement allowdupe attribute_membership auth_membership forcelocal gid ia_load_module members system host_aliases ip allowed_trunk_vlans description device_url duplex encapsulation etherchannel native_vlan speed principals allow_root auth_class auth_type authenticate_user k_of_n mechanisms rule session_owner shared options device fstype enable hasrestart directory present absent link atboot blockdevice device dump pass remounts poller_tag use message withpath adminfile allow_virtual allowcdrom category configfiles flavor install_options instance package_settings platform responsefile status uninstall_options vendor unless_system_user unless_uid binary control flags hasstatus manifest pattern restart running start stop allowdupe auths expiry gid groups home iterations key_membership keys managehome membership password password_max_age password_min_age profile_membership profiles project purge_ssh_keys role_membership roles salt shell uid baseurl cost descr enabled enablegroups exclude failovermethod gpgcheck gpgkey http_caching include includepkgs keepalive metadata_expire metalink mirrorlist priority protect proxy proxy_password proxy_username repo_gpgcheck s3_enabled skip_if_unavailable sslcacert sslclientcert sslclientkey sslverify mounted"
      ),
      built_in: (
        /* core facts */
        "architecture augeasversion blockdevices boardmanufacturer boardproductname boardserialnumber cfkey dhcp_servers domain ec2_ ec2_userdata facterversion filesystems ldom fqdn gid hardwareisa hardwaremodel hostname id|0 interfaces ipaddress ipaddress_ ipaddress6 ipaddress6_ iphostnumber is_virtual kernel kernelmajversion kernelrelease kernelversion kernelrelease kernelversion lsbdistcodename lsbdistdescription lsbdistid lsbdistrelease lsbmajdistrelease lsbminordistrelease lsbrelease macaddress macaddress_ macosx_buildversion macosx_productname macosx_productversion macosx_productverson_major macosx_productversion_minor manufacturer memoryfree memorysize netmask metmask_ network_ operatingsystem operatingsystemmajrelease operatingsystemrelease osfamily partitions path physicalprocessorcount processor processorcount productname ps puppetversion rubysitedir rubyversion selinux selinux_config_mode selinux_config_policy selinux_current_mode selinux_current_mode selinux_enforced selinux_policyversion serialnumber sp_ sshdsakey sshecdsakey sshrsakey swapencrypted swapfree swapsize timezone type uniqueid uptime uptime_days uptime_hours uptime_seconds uuid virtual vlans xendomains zfs_version zonenae zones zpool_version"
      )
    };
    const COMMENT2 = hljs.COMMENT("#", "$");
    const IDENT_RE2 = "([A-Za-z_]|::)(\\w|::)*";
    const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE2 });
    const VARIABLE = {
      className: "variable",
      begin: "\\$" + IDENT_RE2
    };
    const STRING = {
      className: "string",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        VARIABLE
      ],
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        }
      ]
    };
    return {
      name: "Puppet",
      aliases: ["pp"],
      contains: [
        COMMENT2,
        VARIABLE,
        STRING,
        {
          beginKeywords: "class",
          end: "\\{|;",
          illegal: /=/,
          contains: [
            TITLE,
            COMMENT2
          ]
        },
        {
          beginKeywords: "define",
          end: /\{/,
          contains: [
            {
              className: "section",
              begin: hljs.IDENT_RE,
              endsParent: true
            }
          ]
        },
        {
          begin: hljs.IDENT_RE + "\\s+\\{",
          returnBegin: true,
          end: /\S/,
          contains: [
            {
              className: "keyword",
              begin: hljs.IDENT_RE,
              relevance: 0.2
            },
            {
              begin: /\{/,
              end: /\}/,
              keywords: PUPPET_KEYWORDS,
              relevance: 0,
              contains: [
                STRING,
                COMMENT2,
                {
                  begin: "[a-zA-Z_]+\\s*=>",
                  returnBegin: true,
                  end: "=>",
                  contains: [
                    {
                      className: "attr",
                      begin: hljs.IDENT_RE
                    }
                  ]
                },
                {
                  className: "number",
                  begin: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",
                  relevance: 0
                },
                VARIABLE
              ]
            }
          ],
          relevance: 0
        }
      ]
    };
  }
  function purebasic(hljs) {
    const STRINGS2 = {
      // PB IDE color: #0080FF (Azure Radiance)
      className: "string",
      begin: '(~)?"',
      end: '"',
      illegal: "\\n"
    };
    const CONSTANTS = {
      // PB IDE color: #924B72 (Cannon Pink)
      //  "#" + a letter or underscore + letters, digits or underscores + (optional) "$"
      className: "symbol",
      begin: "#[a-zA-Z_]\\w*\\$?"
    };
    return {
      name: "PureBASIC",
      aliases: [
        "pb",
        "pbi"
      ],
      keywords: (
        // PB IDE color: #006666 (Blue Stone) + Bold
        // Keywords from all version of PureBASIC 5.00 upward ...
        "Align And Array As Break CallDebugger Case CompilerCase CompilerDefault CompilerElse CompilerElseIf CompilerEndIf CompilerEndSelect CompilerError CompilerIf CompilerSelect CompilerWarning Continue Data DataSection Debug DebugLevel Declare DeclareC DeclareCDLL DeclareDLL DeclareModule Default Define Dim DisableASM DisableDebugger DisableExplicit Else ElseIf EnableASM EnableDebugger EnableExplicit End EndDataSection EndDeclareModule EndEnumeration EndIf EndImport EndInterface EndMacro EndModule EndProcedure EndSelect EndStructure EndStructureUnion EndWith Enumeration EnumerationBinary Extends FakeReturn For ForEach ForEver Global Gosub Goto If Import ImportC IncludeBinary IncludeFile IncludePath Interface List Macro MacroExpandedCount Map Module NewList NewMap Next Not Or Procedure ProcedureC ProcedureCDLL ProcedureDLL ProcedureReturn Protected Prototype PrototypeC ReDim Read Repeat Restore Return Runtime Select Shared Static Step Structure StructureUnion Swap Threaded To UndefineMacro Until Until  UnuseModule UseModule Wend While With XIncludeFile XOr"
      ),
      contains: [
        // COMMENTS | PB IDE color: #00AAAA (Persian Green)
        hljs.COMMENT(";", "$", { relevance: 0 }),
        {
          // PROCEDURES DEFINITIONS
          className: "function",
          begin: "\\b(Procedure|Declare)(C|CDLL|DLL)?\\b",
          end: "\\(",
          excludeEnd: true,
          returnBegin: true,
          contains: [
            {
              // PROCEDURE KEYWORDS | PB IDE color: #006666 (Blue Stone) + Bold
              className: "keyword",
              begin: "(Procedure|Declare)(C|CDLL|DLL)?",
              excludeEnd: true
            },
            {
              // PROCEDURE RETURN TYPE SETTING | PB IDE color: #000000 (Black)
              className: "type",
              begin: "\\.\\w*"
              // end: ' ',
            },
            hljs.UNDERSCORE_TITLE_MODE
            // PROCEDURE NAME | PB IDE color: #006666 (Blue Stone)
          ]
        },
        STRINGS2,
        CONSTANTS
      ]
    };
  }
  function q(hljs) {
    const KEYWORDS2 = {
      $pattern: /(`?)[A-Za-z0-9_]+\b/,
      keyword: "do while select delete by update from",
      literal: "0b 1b",
      built_in: "neg not null string reciprocal floor ceiling signum mod xbar xlog and or each scan over prior mmu lsq inv md5 ltime gtime count first var dev med cov cor all any rand sums prds mins maxs fills deltas ratios avgs differ prev next rank reverse iasc idesc asc desc msum mcount mavg mdev xrank mmin mmax xprev rotate distinct group where flip type key til get value attr cut set upsert raze union inter except cross sv vs sublist enlist read0 read1 hopen hclose hdel hsym hcount peach system ltrim rtrim trim lower upper ssr view tables views cols xcols keys xkey xcol xasc xdesc fkeys meta lj aj aj0 ij pj asof uj ww wj wj1 fby xgroup ungroup ej save load rsave rload show csv parse eval min max avg wavg wsum sin cos tan sum",
      type: "`float `double int `timestamp `timespan `datetime `time `boolean `symbol `char `byte `short `long `real `month `date `minute `second `guid"
    };
    return {
      name: "Q",
      aliases: [
        "k",
        "kdb"
      ],
      keywords: KEYWORDS2,
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE
      ]
    };
  }
  function qml(hljs) {
    const regex = hljs.regex;
    const KEYWORDS2 = {
      keyword: "in of on if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await import",
      literal: "true false null undefined NaN Infinity",
      built_in: "eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Behavior bool color coordinate date double enumeration font geocircle georectangle geoshape int list matrix4x4 parent point quaternion real rect size string url variant vector2d vector3d vector4d Promise"
    };
    const QML_IDENT_RE = "[a-zA-Z_][a-zA-Z0-9\\._]*";
    const PROPERTY = {
      className: "keyword",
      begin: "\\bproperty\\b",
      starts: {
        className: "string",
        end: "(:|=|;|,|//|/\\*|$)",
        returnEnd: true
      }
    };
    const SIGNAL = {
      className: "keyword",
      begin: "\\bsignal\\b",
      starts: {
        className: "string",
        end: "(\\(|:|=|;|,|//|/\\*|$)",
        returnEnd: true
      }
    };
    const ID_ID = {
      className: "attribute",
      begin: "\\bid\\s*:",
      starts: {
        className: "string",
        end: QML_IDENT_RE,
        returnEnd: false
      }
    };
    const QML_ATTRIBUTE = {
      begin: QML_IDENT_RE + "\\s*:",
      returnBegin: true,
      contains: [
        {
          className: "attribute",
          begin: QML_IDENT_RE,
          end: "\\s*:",
          excludeEnd: true,
          relevance: 0
        }
      ],
      relevance: 0
    };
    const QML_OBJECT = {
      begin: regex.concat(QML_IDENT_RE, /\s*\{/),
      end: /\{/,
      returnBegin: true,
      relevance: 0,
      contains: [hljs.inherit(hljs.TITLE_MODE, { begin: QML_IDENT_RE })]
    };
    return {
      name: "QML",
      aliases: ["qt"],
      case_insensitive: false,
      keywords: KEYWORDS2,
      contains: [
        {
          className: "meta",
          begin: /^\s*['"]use (strict|asm)['"]/
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        {
          // template string
          className: "string",
          begin: "`",
          end: "`",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            {
              className: "subst",
              begin: "\\$\\{",
              end: "\\}"
            }
          ]
        },
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "number",
          variants: [
            { begin: "\\b(0[bB][01]+)" },
            { begin: "\\b(0[oO][0-7]+)" },
            { begin: hljs.C_NUMBER_RE }
          ],
          relevance: 0
        },
        {
          // "value" container
          begin: "(" + hljs.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
          keywords: "return throw case",
          contains: [
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.REGEXP_MODE,
            {
              // E4X / JSX
              begin: /</,
              end: />\s*[);\]]/,
              relevance: 0,
              subLanguage: "xml"
            }
          ],
          relevance: 0
        },
        SIGNAL,
        PROPERTY,
        {
          className: "function",
          beginKeywords: "function",
          end: /\{/,
          excludeEnd: true,
          contains: [
            hljs.inherit(hljs.TITLE_MODE, { begin: /[A-Za-z$_][0-9A-Za-z$_]*/ }),
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              excludeBegin: true,
              excludeEnd: true,
              contains: [
                hljs.C_LINE_COMMENT_MODE,
                hljs.C_BLOCK_COMMENT_MODE
              ]
            }
          ],
          illegal: /\[|%/
        },
        {
          // hack: prevents detection of keywords after dots
          begin: "\\." + hljs.IDENT_RE,
          relevance: 0
        },
        ID_ID,
        QML_ATTRIBUTE,
        QML_OBJECT
      ],
      illegal: /#/
    };
  }
  function reasonml(hljs) {
    const BUILT_IN_TYPES = [
      "array",
      "bool",
      "bytes",
      "char",
      "exn|5",
      "float",
      "int",
      "int32",
      "int64",
      "list",
      "lazy_t|5",
      "nativeint|5",
      "ref",
      "string",
      "unit"
    ];
    return {
      name: "ReasonML",
      aliases: ["re"],
      keywords: {
        $pattern: /[a-z_]\w*!?/,
        keyword: [
          "and",
          "as",
          "asr",
          "assert",
          "begin",
          "class",
          "constraint",
          "do",
          "done",
          "downto",
          "else",
          "end",
          "esfun",
          "exception",
          "external",
          "for",
          "fun",
          "function",
          "functor",
          "if",
          "in",
          "include",
          "inherit",
          "initializer",
          "land",
          "lazy",
          "let",
          "lor",
          "lsl",
          "lsr",
          "lxor",
          "mod",
          "module",
          "mutable",
          "new",
          "nonrec",
          "object",
          "of",
          "open",
          "or",
          "pri",
          "pub",
          "rec",
          "sig",
          "struct",
          "switch",
          "then",
          "to",
          "try",
          "type",
          "val",
          "virtual",
          "when",
          "while",
          "with"
        ],
        built_in: BUILT_IN_TYPES,
        literal: ["true", "false"]
      },
      illegal: /(:-|:=|\$\{|\+=)/,
      contains: [
        {
          scope: "literal",
          match: /\[(\|\|)?\]|\(\)/,
          relevance: 0
        },
        hljs.C_LINE_COMMENT_MODE,
        hljs.COMMENT(/\/\*/, /\*\//, { illegal: /^(#,\/\/)/ }),
        {
          /* type variable */
          scope: "symbol",
          match: /\'[A-Za-z_](?!\')[\w\']*/
          /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
        },
        {
          /* polymorphic variant */
          scope: "type",
          match: /`[A-Z][\w\']*/
        },
        {
          /* module or constructor */
          scope: "type",
          match: /\b[A-Z][\w\']*/,
          relevance: 0
        },
        {
          /* don't color identifiers, but safely catch all identifiers with ' */
          match: /[a-z_]\w*\'[\w\']*/,
          relevance: 0
        },
        {
          scope: "operator",
          match: /\s+(\|\||\+[\+\.]?|\*[\*\/\.]?|\/[\.]?|\.\.\.|\|>|&&|===?)\s+/,
          relevance: 0
        },
        hljs.inherit(hljs.APOS_STRING_MODE, {
          scope: "string",
          relevance: 0
        }),
        hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
        {
          scope: "number",
          variants: [
            { match: /\b0[xX][a-fA-F0-9_]+[Lln]?/ },
            { match: /\b0[oO][0-7_]+[Lln]?/ },
            { match: /\b0[bB][01_]+[Lln]?/ },
            { match: /\b[0-9][0-9_]*([Lln]|(\.[0-9_]*)?([eE][-+]?[0-9_]+)?)/ }
          ],
          relevance: 0
        }
      ]
    };
  }
  function rib(hljs) {
    return {
      name: "RenderMan RIB",
      keywords: "ArchiveRecord AreaLightSource Atmosphere Attribute AttributeBegin AttributeEnd Basis Begin Blobby Bound Clipping ClippingPlane Color ColorSamples ConcatTransform Cone CoordinateSystem CoordSysTransform CropWindow Curves Cylinder DepthOfField Detail DetailRange Disk Displacement Display End ErrorHandler Exposure Exterior Format FrameAspectRatio FrameBegin FrameEnd GeneralPolygon GeometricApproximation Geometry Hider Hyperboloid Identity Illuminate Imager Interior LightSource MakeCubeFaceEnvironment MakeLatLongEnvironment MakeShadow MakeTexture Matte MotionBegin MotionEnd NuPatch ObjectBegin ObjectEnd ObjectInstance Opacity Option Orientation Paraboloid Patch PatchMesh Perspective PixelFilter PixelSamples PixelVariance Points PointsGeneralPolygons PointsPolygons Polygon Procedural Projection Quantize ReadArchive RelativeDetail ReverseOrientation Rotate Scale ScreenWindow ShadingInterpolation ShadingRate Shutter Sides Skew SolidBegin SolidEnd Sphere SubdivisionMesh Surface TextureCoordinates Torus Transform TransformBegin TransformEnd TransformPoints Translate TrimCurve WorldBegin WorldEnd",
      illegal: "</",
      contains: [
        hljs.HASH_COMMENT_MODE,
        hljs.C_NUMBER_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE
      ]
    };
  }
  function roboconf(hljs) {
    const IDENTIFIER = "[a-zA-Z-_][^\\n{]+\\{";
    const PROPERTY = {
      className: "attribute",
      begin: /[a-zA-Z-_]+/,
      end: /\s*:/,
      excludeEnd: true,
      starts: {
        end: ";",
        relevance: 0,
        contains: [
          {
            className: "variable",
            begin: /\.[a-zA-Z-_]+/
          },
          {
            className: "keyword",
            begin: /\(optional\)/
          }
        ]
      }
    };
    return {
      name: "Roboconf",
      aliases: [
        "graph",
        "instances"
      ],
      case_insensitive: true,
      keywords: "import",
      contains: [
        // Facet sections
        {
          begin: "^facet " + IDENTIFIER,
          end: /\}/,
          keywords: "facet",
          contains: [
            PROPERTY,
            hljs.HASH_COMMENT_MODE
          ]
        },
        // Instance sections
        {
          begin: "^\\s*instance of " + IDENTIFIER,
          end: /\}/,
          keywords: "name count channels instance-data instance-state instance of",
          illegal: /\S/,
          contains: [
            "self",
            PROPERTY,
            hljs.HASH_COMMENT_MODE
          ]
        },
        // Component sections
        {
          begin: "^" + IDENTIFIER,
          end: /\}/,
          contains: [
            PROPERTY,
            hljs.HASH_COMMENT_MODE
          ]
        },
        // Comments
        hljs.HASH_COMMENT_MODE
      ]
    };
  }
  function routeros(hljs) {
    const STATEMENTS = "foreach do while for if from to step else on-error and or not in";
    const GLOBAL_COMMANDS = "global local beep delay put len typeof pick log time set find environment terminal error execute parse resolve toarray tobool toid toip toip6 tonum tostr totime";
    const COMMON_COMMANDS = "add remove enable disable set get print export edit find run debug error info warning";
    const LITERALS2 = "true false yes no nothing nil null";
    const OBJECTS = "traffic-flow traffic-generator firewall scheduler aaa accounting address-list address align area bandwidth-server bfd bgp bridge client clock community config connection console customer default dhcp-client dhcp-server discovery dns e-mail ethernet filter firmware gps graphing group hardware health hotspot identity igmp-proxy incoming instance interface ip ipsec ipv6 irq l2tp-server lcd ldp logging mac-server mac-winbox mangle manual mirror mme mpls nat nd neighbor network note ntp ospf ospf-v3 ovpn-server page peer pim ping policy pool port ppp pppoe-client pptp-server prefix profile proposal proxy queue radius resource rip ripng route routing screen script security-profiles server service service-port settings shares smb sms sniffer snmp snooper socks sstp-server system tool tracking type upgrade upnp user-manager users user vlan secret vrrp watchdog web-access wireless pptp pppoe lan wan layer7-protocol lease simple raw";
    const VAR = {
      className: "variable",
      variants: [
        { begin: /\$[\w\d#@][\w\d_]*/ },
        { begin: /\$\{(.*?)\}/ }
      ]
    };
    const QUOTE_STRING = {
      className: "string",
      begin: /"/,
      end: /"/,
      contains: [
        hljs.BACKSLASH_ESCAPE,
        VAR,
        {
          className: "variable",
          begin: /\$\(/,
          end: /\)/,
          contains: [hljs.BACKSLASH_ESCAPE]
        }
      ]
    };
    const APOS_STRING = {
      className: "string",
      begin: /'/,
      end: /'/
    };
    return {
      name: "MikroTik RouterOS script",
      aliases: ["mikrotik"],
      case_insensitive: true,
      keywords: {
        $pattern: /:?[\w-]+/,
        literal: LITERALS2,
        keyword: STATEMENTS + " :" + STATEMENTS.split(" ").join(" :") + " :" + GLOBAL_COMMANDS.split(" ").join(" :")
      },
      contains: [
        {
          // illegal syntax
          variants: [
            {
              // -- comment
              begin: /\/\*/,
              end: /\*\//
            },
            {
              // Stan comment
              begin: /\/\//,
              end: /$/
            },
            {
              // HTML tags
              begin: /<\//,
              end: />/
            }
          ],
          illegal: /./
        },
        hljs.COMMENT("^#", "$"),
        QUOTE_STRING,
        APOS_STRING,
        VAR,
        // attribute=value
        {
          // > is to avoid matches with => in other grammars
          begin: /[\w-]+=([^\s{}[\]()>]+)/,
          relevance: 0,
          returnBegin: true,
          contains: [
            {
              className: "attribute",
              begin: /[^=]+/
            },
            {
              begin: /=/,
              endsWithParent: true,
              relevance: 0,
              contains: [
                QUOTE_STRING,
                APOS_STRING,
                VAR,
                {
                  className: "literal",
                  begin: "\\b(" + LITERALS2.split(" ").join("|") + ")\\b"
                },
                {
                  // Do not format unclassified values. Needed to exclude highlighting of values as built_in.
                  begin: /("[^"]*"|[^\s{}[\]]+)/
                }
                /*
                {
                  // IPv4 addresses and subnets
                  className: 'number',
                  variants: [
                    {begin: IPADDR_wBITMASK+'(,'+IPADDR_wBITMASK+')*'}, //192.168.0.0/24,1.2.3.0/24
                    {begin: IPADDR+'-'+IPADDR},       // 192.168.0.1-192.168.0.3
                    {begin: IPADDR+'(,'+IPADDR+')*'}, // 192.168.0.1,192.168.0.34,192.168.24.1,192.168.0.1
                  ]
                },
                {
                  // MAC addresses and DHCP Client IDs
                  className: 'number',
                  begin: /\b(1:)?([0-9A-Fa-f]{1,2}[:-]){5}([0-9A-Fa-f]){1,2}\b/,
                },
                */
              ]
            }
          ]
        },
        {
          // HEX values
          className: "number",
          begin: /\*[0-9a-fA-F]+/
        },
        {
          begin: "\\b(" + COMMON_COMMANDS.split(" ").join("|") + ")([\\s[(\\]|])",
          returnBegin: true,
          contains: [
            {
              className: "built_in",
              // 'function',
              begin: /\w+/
            }
          ]
        },
        {
          className: "built_in",
          variants: [
            { begin: "(\\.\\./|/|\\s)((" + OBJECTS.split(" ").join("|") + ");?\\s)+" },
            {
              begin: /\.\./,
              relevance: 0
            }
          ]
        }
      ]
    };
  }
  function rsl(hljs) {
    const BUILT_INS2 = [
      "abs",
      "acos",
      "ambient",
      "area",
      "asin",
      "atan",
      "atmosphere",
      "attribute",
      "calculatenormal",
      "ceil",
      "cellnoise",
      "clamp",
      "comp",
      "concat",
      "cos",
      "degrees",
      "depth",
      "Deriv",
      "diffuse",
      "distance",
      "Du",
      "Dv",
      "environment",
      "exp",
      "faceforward",
      "filterstep",
      "floor",
      "format",
      "fresnel",
      "incident",
      "length",
      "lightsource",
      "log",
      "match",
      "max",
      "min",
      "mod",
      "noise",
      "normalize",
      "ntransform",
      "opposite",
      "option",
      "phong",
      "pnoise",
      "pow",
      "printf",
      "ptlined",
      "radians",
      "random",
      "reflect",
      "refract",
      "renderinfo",
      "round",
      "setcomp",
      "setxcomp",
      "setycomp",
      "setzcomp",
      "shadow",
      "sign",
      "sin",
      "smoothstep",
      "specular",
      "specularbrdf",
      "spline",
      "sqrt",
      "step",
      "tan",
      "texture",
      "textureinfo",
      "trace",
      "transform",
      "vtransform",
      "xcomp",
      "ycomp",
      "zcomp"
    ];
    const TYPES2 = [
      "matrix",
      "float",
      "color",
      "point",
      "normal",
      "vector"
    ];
    const KEYWORDS2 = [
      "while",
      "for",
      "if",
      "do",
      "return",
      "else",
      "break",
      "extern",
      "continue"
    ];
    const CLASS_DEFINITION = {
      match: [
        /(surface|displacement|light|volume|imager)/,
        /\s+/,
        hljs.IDENT_RE
      ],
      scope: {
        1: "keyword",
        3: "title.class"
      }
    };
    return {
      name: "RenderMan RSL",
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_INS2,
        type: TYPES2
      },
      illegal: "</",
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        hljs.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$"
        },
        CLASS_DEFINITION,
        {
          beginKeywords: "illuminate illuminance gather",
          end: "\\("
        }
      ]
    };
  }
  function ruleslanguage(hljs) {
    return {
      name: "Oracle Rules Language",
      keywords: {
        keyword: "BILL_PERIOD BILL_START BILL_STOP RS_EFFECTIVE_START RS_EFFECTIVE_STOP RS_JURIS_CODE RS_OPCO_CODE INTDADDATTRIBUTE|5 INTDADDVMSG|5 INTDBLOCKOP|5 INTDBLOCKOPNA|5 INTDCLOSE|5 INTDCOUNT|5 INTDCOUNTSTATUSCODE|5 INTDCREATEMASK|5 INTDCREATEDAYMASK|5 INTDCREATEFACTORMASK|5 INTDCREATEHANDLE|5 INTDCREATEOVERRIDEDAYMASK|5 INTDCREATEOVERRIDEMASK|5 INTDCREATESTATUSCODEMASK|5 INTDCREATETOUPERIOD|5 INTDDELETE|5 INTDDIPTEST|5 INTDEXPORT|5 INTDGETERRORCODE|5 INTDGETERRORMESSAGE|5 INTDISEQUAL|5 INTDJOIN|5 INTDLOAD|5 INTDLOADACTUALCUT|5 INTDLOADDATES|5 INTDLOADHIST|5 INTDLOADLIST|5 INTDLOADLISTDATES|5 INTDLOADLISTENERGY|5 INTDLOADLISTHIST|5 INTDLOADRELATEDCHANNEL|5 INTDLOADSP|5 INTDLOADSTAGING|5 INTDLOADUOM|5 INTDLOADUOMDATES|5 INTDLOADUOMHIST|5 INTDLOADVERSION|5 INTDOPEN|5 INTDREADFIRST|5 INTDREADNEXT|5 INTDRECCOUNT|5 INTDRELEASE|5 INTDREPLACE|5 INTDROLLAVG|5 INTDROLLPEAK|5 INTDSCALAROP|5 INTDSCALE|5 INTDSETATTRIBUTE|5 INTDSETDSTPARTICIPANT|5 INTDSETSTRING|5 INTDSETVALUE|5 INTDSETVALUESTATUS|5 INTDSHIFTSTARTTIME|5 INTDSMOOTH|5 INTDSORT|5 INTDSPIKETEST|5 INTDSUBSET|5 INTDTOU|5 INTDTOURELEASE|5 INTDTOUVALUE|5 INTDUPDATESTATS|5 INTDVALUE|5 STDEV INTDDELETEEX|5 INTDLOADEXACTUAL|5 INTDLOADEXCUT|5 INTDLOADEXDATES|5 INTDLOADEX|5 INTDLOADEXRELATEDCHANNEL|5 INTDSAVEEX|5 MVLOAD|5 MVLOADACCT|5 MVLOADACCTDATES|5 MVLOADACCTHIST|5 MVLOADDATES|5 MVLOADHIST|5 MVLOADLIST|5 MVLOADLISTDATES|5 MVLOADLISTHIST|5 IF FOR NEXT DONE SELECT END CALL ABORT CLEAR CHANNEL FACTOR LIST NUMBER OVERRIDE SET WEEK DISTRIBUTIONNODE ELSE WHEN THEN OTHERWISE IENUM CSV INCLUDE LEAVE RIDER SAVE DELETE NOVALUE SECTION WARN SAVE_UPDATE DETERMINANT LABEL REPORT REVENUE EACH IN FROM TOTAL CHARGE BLOCK AND OR CSV_FILE RATE_CODE AUXILIARY_DEMAND UIDACCOUNT RS BILL_PERIOD_SELECT HOURS_PER_MONTH INTD_ERROR_STOP SEASON_SCHEDULE_NAME ACCOUNTFACTOR ARRAYUPPERBOUND CALLSTOREDPROC GETADOCONNECTION GETCONNECT GETDATASOURCE GETQUALIFIER GETUSERID HASVALUE LISTCOUNT LISTOP LISTUPDATE LISTVALUE PRORATEFACTOR RSPRORATE SETBINPATH SETDBMONITOR WQ_OPEN BILLINGHOURS DATE DATEFROMFLOAT DATETIMEFROMSTRING DATETIMETOSTRING DATETOFLOAT DAY DAYDIFF DAYNAME DBDATETIME HOUR MINUTE MONTH MONTHDIFF MONTHHOURS MONTHNAME ROUNDDATE SAMEWEEKDAYLASTYEAR SECOND WEEKDAY WEEKDIFF YEAR YEARDAY YEARSTR COMPSUM HISTCOUNT HISTMAX HISTMIN HISTMINNZ HISTVALUE MAXNRANGE MAXRANGE MINRANGE COMPIKVA COMPKVA COMPKVARFROMKQKW COMPLF IDATTR FLAG LF2KW LF2KWH MAXKW POWERFACTOR READING2USAGE AVGSEASON MAXSEASON MONTHLYMERGE SEASONVALUE SUMSEASON ACCTREADDATES ACCTTABLELOAD CONFIGADD CONFIGGET CREATEOBJECT CREATEREPORT EMAILCLIENT EXPBLKMDMUSAGE EXPMDMUSAGE EXPORT_USAGE FACTORINEFFECT GETUSERSPECIFIEDSTOP INEFFECT ISHOLIDAY RUNRATE SAVE_PROFILE SETREPORTTITLE USEREXIT WATFORRUNRATE TO TABLE ACOS ASIN ATAN ATAN2 BITAND CEIL COS COSECANT COSH COTANGENT DIVQUOT DIVREM EXP FABS FLOOR FMOD FREPM FREXPN LOG LOG10 MAX MAXN MIN MINNZ MODF POW ROUND ROUND2VALUE ROUNDINT SECANT SIN SINH SQROOT TAN TANH FLOAT2STRING FLOAT2STRINGNC INSTR LEFT LEN LTRIM MID RIGHT RTRIM STRING STRINGNC TOLOWER TOUPPER TRIM NUMDAYS READ_DATE STAGING",
        built_in: "IDENTIFIER OPTIONS XML_ELEMENT XML_OP XML_ELEMENT_OF DOMDOCCREATE DOMDOCLOADFILE DOMDOCLOADXML DOMDOCSAVEFILE DOMDOCGETROOT DOMDOCADDPI DOMNODEGETNAME DOMNODEGETTYPE DOMNODEGETVALUE DOMNODEGETCHILDCT DOMNODEGETFIRSTCHILD DOMNODEGETSIBLING DOMNODECREATECHILDELEMENT DOMNODESETATTRIBUTE DOMNODEGETCHILDELEMENTCT DOMNODEGETFIRSTCHILDELEMENT DOMNODEGETSIBLINGELEMENT DOMNODEGETATTRIBUTECT DOMNODEGETATTRIBUTEI DOMNODEGETATTRIBUTEBYNAME DOMNODEGETBYNAME"
      },
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE,
        {
          className: "literal",
          variants: [
            {
              // looks like #-comment
              begin: "#\\s+",
              relevance: 0
            },
            { begin: "#[a-zA-Z .]+" }
          ]
        }
      ]
    };
  }
  function sas(hljs) {
    const regex = hljs.regex;
    const SAS_KEYWORDS = [
      "do",
      "if",
      "then",
      "else",
      "end",
      "until",
      "while",
      "abort",
      "array",
      "attrib",
      "by",
      "call",
      "cards",
      "cards4",
      "catname",
      "continue",
      "datalines",
      "datalines4",
      "delete",
      "delim",
      "delimiter",
      "display",
      "dm",
      "drop",
      "endsas",
      "error",
      "file",
      "filename",
      "footnote",
      "format",
      "goto",
      "in",
      "infile",
      "informat",
      "input",
      "keep",
      "label",
      "leave",
      "length",
      "libname",
      "link",
      "list",
      "lostcard",
      "merge",
      "missing",
      "modify",
      "options",
      "output",
      "out",
      "page",
      "put",
      "redirect",
      "remove",
      "rename",
      "replace",
      "retain",
      "return",
      "select",
      "set",
      "skip",
      "startsas",
      "stop",
      "title",
      "update",
      "waitsas",
      "where",
      "window",
      "x|0",
      "systask",
      "add",
      "and",
      "alter",
      "as",
      "cascade",
      "check",
      "create",
      "delete",
      "describe",
      "distinct",
      "drop",
      "foreign",
      "from",
      "group",
      "having",
      "index",
      "insert",
      "into",
      "in",
      "key",
      "like",
      "message",
      "modify",
      "msgtype",
      "not",
      "null",
      "on",
      "or",
      "order",
      "primary",
      "references",
      "reset",
      "restrict",
      "select",
      "set",
      "table",
      "unique",
      "update",
      "validate",
      "view",
      "where"
    ];
    const FUNCTIONS = [
      "abs",
      "addr",
      "airy",
      "arcos",
      "arsin",
      "atan",
      "attrc",
      "attrn",
      "band",
      "betainv",
      "blshift",
      "bnot",
      "bor",
      "brshift",
      "bxor",
      "byte",
      "cdf",
      "ceil",
      "cexist",
      "cinv",
      "close",
      "cnonct",
      "collate",
      "compbl",
      "compound",
      "compress",
      "cos",
      "cosh",
      "css",
      "curobs",
      "cv",
      "daccdb",
      "daccdbsl",
      "daccsl",
      "daccsyd",
      "dacctab",
      "dairy",
      "date",
      "datejul",
      "datepart",
      "datetime",
      "day",
      "dclose",
      "depdb",
      "depdbsl",
      "depdbsl",
      "depsl",
      "depsl",
      "depsyd",
      "depsyd",
      "deptab",
      "deptab",
      "dequote",
      "dhms",
      "dif",
      "digamma",
      "dim",
      "dinfo",
      "dnum",
      "dopen",
      "doptname",
      "doptnum",
      "dread",
      "dropnote",
      "dsname",
      "erf",
      "erfc",
      "exist",
      "exp",
      "fappend",
      "fclose",
      "fcol",
      "fdelete",
      "fetch",
      "fetchobs",
      "fexist",
      "fget",
      "fileexist",
      "filename",
      "fileref",
      "finfo",
      "finv",
      "fipname",
      "fipnamel",
      "fipstate",
      "floor",
      "fnonct",
      "fnote",
      "fopen",
      "foptname",
      "foptnum",
      "fpoint",
      "fpos",
      "fput",
      "fread",
      "frewind",
      "frlen",
      "fsep",
      "fuzz",
      "fwrite",
      "gaminv",
      "gamma",
      "getoption",
      "getvarc",
      "getvarn",
      "hbound",
      "hms",
      "hosthelp",
      "hour",
      "ibessel",
      "index",
      "indexc",
      "indexw",
      "input",
      "inputc",
      "inputn",
      "int",
      "intck",
      "intnx",
      "intrr",
      "irr",
      "jbessel",
      "juldate",
      "kurtosis",
      "lag",
      "lbound",
      "left",
      "length",
      "lgamma",
      "libname",
      "libref",
      "log",
      "log10",
      "log2",
      "logpdf",
      "logpmf",
      "logsdf",
      "lowcase",
      "max",
      "mdy",
      "mean",
      "min",
      "minute",
      "mod",
      "month",
      "mopen",
      "mort",
      "n",
      "netpv",
      "nmiss",
      "normal",
      "note",
      "npv",
      "open",
      "ordinal",
      "pathname",
      "pdf",
      "peek",
      "peekc",
      "pmf",
      "point",
      "poisson",
      "poke",
      "probbeta",
      "probbnml",
      "probchi",
      "probf",
      "probgam",
      "probhypr",
      "probit",
      "probnegb",
      "probnorm",
      "probt",
      "put",
      "putc",
      "putn",
      "qtr",
      "quote",
      "ranbin",
      "rancau",
      "ranexp",
      "rangam",
      "range",
      "rank",
      "rannor",
      "ranpoi",
      "rantbl",
      "rantri",
      "ranuni",
      "repeat",
      "resolve",
      "reverse",
      "rewind",
      "right",
      "round",
      "saving",
      "scan",
      "sdf",
      "second",
      "sign",
      "sin",
      "sinh",
      "skewness",
      "soundex",
      "spedis",
      "sqrt",
      "std",
      "stderr",
      "stfips",
      "stname",
      "stnamel",
      "substr",
      "sum",
      "symget",
      "sysget",
      "sysmsg",
      "sysprod",
      "sysrc",
      "system",
      "tan",
      "tanh",
      "time",
      "timepart",
      "tinv",
      "tnonct",
      "today",
      "translate",
      "tranwrd",
      "trigamma",
      "trim",
      "trimn",
      "trunc",
      "uniform",
      "upcase",
      "uss",
      "var",
      "varfmt",
      "varinfmt",
      "varlabel",
      "varlen",
      "varname",
      "varnum",
      "varray",
      "varrayx",
      "vartype",
      "verify",
      "vformat",
      "vformatd",
      "vformatdx",
      "vformatn",
      "vformatnx",
      "vformatw",
      "vformatwx",
      "vformatx",
      "vinarray",
      "vinarrayx",
      "vinformat",
      "vinformatd",
      "vinformatdx",
      "vinformatn",
      "vinformatnx",
      "vinformatw",
      "vinformatwx",
      "vinformatx",
      "vlabel",
      "vlabelx",
      "vlength",
      "vlengthx",
      "vname",
      "vnamex",
      "vtype",
      "vtypex",
      "weekday",
      "year",
      "yyq",
      "zipfips",
      "zipname",
      "zipnamel",
      "zipstate"
    ];
    const MACRO_FUNCTIONS = [
      "bquote",
      "nrbquote",
      "cmpres",
      "qcmpres",
      "compstor",
      "datatyp",
      "display",
      "do",
      "else",
      "end",
      "eval",
      "global",
      "goto",
      "if",
      "index",
      "input",
      "keydef",
      "label",
      "left",
      "length",
      "let",
      "local",
      "lowcase",
      "macro",
      "mend",
      "nrbquote",
      "nrquote",
      "nrstr",
      "put",
      "qcmpres",
      "qleft",
      "qlowcase",
      "qscan",
      "qsubstr",
      "qsysfunc",
      "qtrim",
      "quote",
      "qupcase",
      "scan",
      "str",
      "substr",
      "superq",
      "syscall",
      "sysevalf",
      "sysexec",
      "sysfunc",
      "sysget",
      "syslput",
      "sysprod",
      "sysrc",
      "sysrput",
      "then",
      "to",
      "trim",
      "unquote",
      "until",
      "upcase",
      "verify",
      "while",
      "window"
    ];
    const LITERALS2 = [
      "null",
      "missing",
      "_all_",
      "_automatic_",
      "_character_",
      "_infile_",
      "_n_",
      "_name_",
      "_null_",
      "_numeric_",
      "_user_",
      "_webout_"
    ];
    return {
      name: "SAS",
      case_insensitive: true,
      keywords: {
        literal: LITERALS2,
        keyword: SAS_KEYWORDS
      },
      contains: [
        {
          // Distinct highlight for proc <proc>, data, run, quit
          className: "keyword",
          begin: /^\s*(proc [\w\d_]+|data|run|quit)[\s;]/
        },
        {
          // Macro variables
          className: "variable",
          begin: /&[a-zA-Z_&][a-zA-Z0-9_]*\.?/
        },
        {
          begin: [
            /^\s*/,
            /datalines;|cards;/,
            /(?:.*\n)+/,
            /^\s*;\s*$/
          ],
          className: {
            2: "keyword",
            3: "string"
          }
        },
        {
          begin: [
            /%mend|%macro/,
            /\s+/,
            /[a-zA-Z_&][a-zA-Z0-9_]*/
          ],
          className: {
            1: "built_in",
            3: "title.function"
          }
        },
        {
          // Built-in macro variables
          className: "built_in",
          begin: "%" + regex.either(...MACRO_FUNCTIONS)
        },
        {
          // User-defined macro functions
          className: "title.function",
          begin: /%[a-zA-Z_][a-zA-Z_0-9]*/
        },
        {
          // TODO: this is most likely an incorrect classification
          // built_in may need more nuance
          // https://github.com/highlightjs/highlight.js/issues/2521
          className: "meta",
          begin: regex.either(...FUNCTIONS) + "(?=\\()"
        },
        {
          className: "string",
          variants: [
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE
          ]
        },
        hljs.COMMENT("\\*", ";"),
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  function scala(hljs) {
    const regex = hljs.regex;
    const ANNOTATION = {
      className: "meta",
      begin: "@[A-Za-z]+"
    };
    const SUBST = {
      className: "subst",
      variants: [
        { begin: "\\$[A-Za-z0-9_]+" },
        {
          begin: /\$\{/,
          end: /\}/
        }
      ]
    };
    const STRING = {
      className: "string",
      variants: [
        {
          begin: '"""',
          end: '"""'
        },
        {
          begin: '"',
          end: '"',
          illegal: "\\n",
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: '[a-z]+"',
          end: '"',
          illegal: "\\n",
          contains: [
            hljs.BACKSLASH_ESCAPE,
            SUBST
          ]
        },
        {
          className: "string",
          begin: '[a-z]+"""',
          end: '"""',
          contains: [SUBST],
          relevance: 10
        }
      ]
    };
    const TYPE = {
      className: "type",
      begin: "\\b[A-Z][A-Za-z0-9_]*",
      relevance: 0
    };
    const NAME = {
      className: "title",
      begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,
      relevance: 0
    };
    const CLASS = {
      className: "class",
      beginKeywords: "class object trait type",
      end: /[:={\[\n;]/,
      excludeEnd: true,
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          beginKeywords: "extends with",
          relevance: 10
        },
        {
          begin: /\[/,
          end: /\]/,
          excludeBegin: true,
          excludeEnd: true,
          relevance: 0,
          contains: [
            TYPE,
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          excludeBegin: true,
          excludeEnd: true,
          relevance: 0,
          contains: [
            TYPE,
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        NAME
      ]
    };
    const METHOD = {
      className: "function",
      beginKeywords: "def",
      end: regex.lookahead(/[:={\[(\n;]/),
      contains: [NAME]
    };
    const EXTENSION = {
      begin: [
        /^\s*/,
        // Is first token on the line
        "extension",
        /\s+(?=[[(])/
        // followed by at least one space and `[` or `(`
      ],
      beginScope: { 2: "keyword" }
    };
    const END = {
      begin: [
        /^\s*/,
        // Is first token on the line
        /end/,
        /\s+/,
        /(extension\b)?/
        // `extension` is the only marker that follows an `end` that cannot be captured by another rule.
      ],
      beginScope: {
        2: "keyword",
        4: "keyword"
      }
    };
    const INLINE_MODES = [
      { match: /\.inline\b/ },
      {
        begin: /\binline(?=\s)/,
        keywords: "inline"
      }
    ];
    const USING_PARAM_CLAUSE = {
      begin: [
        /\(\s*/,
        // Opening `(` of a parameter or argument list
        /using/,
        /\s+(?!\))/
        // Spaces not followed by `)`
      ],
      beginScope: { 2: "keyword" }
    };
    const DIRECTIVE_VALUE = {
      className: "string",
      begin: /\S+/
    };
    const USING_DIRECTIVE = {
      begin: [
        "//>",
        /\s+/,
        /using/,
        /\s+/,
        /\S+/
      ],
      beginScope: {
        1: "comment",
        3: "keyword",
        5: "type"
      },
      end: /$/,
      contains: [
        DIRECTIVE_VALUE
      ]
    };
    return {
      name: "Scala",
      keywords: {
        literal: "true false null",
        keyword: "type yield lazy override def with val var sealed abstract private trait object if then forSome for while do throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit export enum given transparent"
      },
      contains: [
        USING_DIRECTIVE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        STRING,
        TYPE,
        METHOD,
        CLASS,
        hljs.C_NUMBER_MODE,
        EXTENSION,
        END,
        ...INLINE_MODES,
        USING_PARAM_CLAUSE,
        ANNOTATION
      ]
    };
  }
  function scheme(hljs) {
    const SCHEME_IDENT_RE = "[^\\(\\)\\[\\]\\{\\}\",'`;#|\\\\\\s]+";
    const SCHEME_SIMPLE_NUMBER_RE = "(-|\\+)?\\d+([./]\\d+)?";
    const SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + "[+\\-]" + SCHEME_SIMPLE_NUMBER_RE + "i";
    const KEYWORDS2 = {
      $pattern: SCHEME_IDENT_RE,
      built_in: "case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules ' * + , ,@ - ... / ; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"
    };
    const LITERAL = {
      className: "literal",
      begin: "(#t|#f|#\\\\" + SCHEME_IDENT_RE + "|#\\\\.)"
    };
    const NUMBER = {
      className: "number",
      variants: [
        {
          begin: SCHEME_SIMPLE_NUMBER_RE,
          relevance: 0
        },
        {
          begin: SCHEME_COMPLEX_NUMBER_RE,
          relevance: 0
        },
        { begin: "#b[0-1]+(/[0-1]+)?" },
        { begin: "#o[0-7]+(/[0-7]+)?" },
        { begin: "#x[0-9a-f]+(/[0-9a-f]+)?" }
      ]
    };
    const STRING = hljs.QUOTE_STRING_MODE;
    const COMMENT_MODES = [
      hljs.COMMENT(
        ";",
        "$",
        { relevance: 0 }
      ),
      hljs.COMMENT("#\\|", "\\|#")
    ];
    const IDENT = {
      begin: SCHEME_IDENT_RE,
      relevance: 0
    };
    const QUOTED_IDENT = {
      className: "symbol",
      begin: "'" + SCHEME_IDENT_RE
    };
    const BODY = {
      endsWithParent: true,
      relevance: 0
    };
    const QUOTED_LIST = {
      variants: [
        { begin: /'/ },
        { begin: "`" }
      ],
      contains: [
        {
          begin: "\\(",
          end: "\\)",
          contains: [
            "self",
            LITERAL,
            STRING,
            NUMBER,
            IDENT,
            QUOTED_IDENT
          ]
        }
      ]
    };
    const NAME = {
      className: "name",
      relevance: 0,
      begin: SCHEME_IDENT_RE,
      keywords: KEYWORDS2
    };
    const LAMBDA = {
      begin: /lambda/,
      endsWithParent: true,
      returnBegin: true,
      contains: [
        NAME,
        {
          endsParent: true,
          variants: [
            {
              begin: /\(/,
              end: /\)/
            },
            {
              begin: /\[/,
              end: /\]/
            }
          ],
          contains: [IDENT]
        }
      ]
    };
    const LIST = {
      variants: [
        {
          begin: "\\(",
          end: "\\)"
        },
        {
          begin: "\\[",
          end: "\\]"
        }
      ],
      contains: [
        LAMBDA,
        NAME,
        BODY
      ]
    };
    BODY.contains = [
      LITERAL,
      NUMBER,
      STRING,
      IDENT,
      QUOTED_IDENT,
      QUOTED_LIST,
      LIST
    ].concat(COMMENT_MODES);
    return {
      name: "Scheme",
      aliases: ["scm"],
      illegal: /\S/,
      contains: [
        hljs.SHEBANG(),
        NUMBER,
        STRING,
        QUOTED_IDENT,
        QUOTED_LIST,
        LIST
      ].concat(COMMENT_MODES)
    };
  }
  function scilab(hljs) {
    const COMMON_CONTAINS = [
      hljs.C_NUMBER_MODE,
      {
        className: "string",
        begin: `'|"`,
        end: `'|"`,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          { begin: "''" }
        ]
      }
    ];
    return {
      name: "Scilab",
      aliases: ["sci"],
      keywords: {
        $pattern: /%?\w+/,
        keyword: "abort break case clear catch continue do elseif else endfunction end for function global if pause return resume select try then while",
        literal: "%f %F %t %T %pi %eps %inf %nan %e %i %z %s",
        built_in: (
          // Scilab has more than 2000 functions. Just list the most commons
          "abs and acos asin atan ceil cd chdir clearglobal cosh cos cumprod deff disp error exec execstr exists exp eye gettext floor fprintf fread fsolve imag isdef isempty isinfisnan isvector lasterror length load linspace list listfiles log10 log2 log max min msprintf mclose mopen ones or pathconvert poly printf prod pwd rand real round sinh sin size gsort sprintf sqrt strcat strcmps tring sum system tanh tan type typename warning zeros matrix"
        )
      },
      illegal: '("|#|/\\*|\\s+/\\w+)',
      contains: [
        {
          className: "function",
          beginKeywords: "function",
          end: "$",
          contains: [
            hljs.UNDERSCORE_TITLE_MODE,
            {
              className: "params",
              begin: "\\(",
              end: "\\)"
            }
          ]
        },
        // seems to be a guard against [ident]' or [ident].
        // perhaps to prevent attributes from flagging as keywords?
        {
          begin: "[a-zA-Z_][a-zA-Z_0-9]*[\\.']+",
          relevance: 0
        },
        {
          begin: "\\[",
          end: "\\][\\.']*",
          relevance: 0,
          contains: COMMON_CONTAINS
        },
        hljs.COMMENT("//", "$")
      ].concat(COMMON_CONTAINS)
    };
  }
  function smali(hljs) {
    const smali_instr_low_prio = [
      "add",
      "and",
      "cmp",
      "cmpg",
      "cmpl",
      "const",
      "div",
      "double",
      "float",
      "goto",
      "if",
      "int",
      "long",
      "move",
      "mul",
      "neg",
      "new",
      "nop",
      "not",
      "or",
      "rem",
      "return",
      "shl",
      "shr",
      "sput",
      "sub",
      "throw",
      "ushr",
      "xor"
    ];
    const smali_instr_high_prio = [
      "aget",
      "aput",
      "array",
      "check",
      "execute",
      "fill",
      "filled",
      "goto/16",
      "goto/32",
      "iget",
      "instance",
      "invoke",
      "iput",
      "monitor",
      "packed",
      "sget",
      "sparse"
    ];
    const smali_keywords = [
      "transient",
      "constructor",
      "abstract",
      "final",
      "synthetic",
      "public",
      "private",
      "protected",
      "static",
      "bridge",
      "system"
    ];
    return {
      name: "Smali",
      contains: [
        {
          className: "string",
          begin: '"',
          end: '"',
          relevance: 0
        },
        hljs.COMMENT(
          "#",
          "$",
          { relevance: 0 }
        ),
        {
          className: "keyword",
          variants: [
            { begin: "\\s*\\.end\\s[a-zA-Z0-9]*" },
            {
              begin: "^[ ]*\\.[a-zA-Z]*",
              relevance: 0
            },
            {
              begin: "\\s:[a-zA-Z_0-9]*",
              relevance: 0
            },
            { begin: "\\s(" + smali_keywords.join("|") + ")" }
          ]
        },
        {
          className: "built_in",
          variants: [
            { begin: "\\s(" + smali_instr_low_prio.join("|") + ")\\s" },
            {
              begin: "\\s(" + smali_instr_low_prio.join("|") + ")((-|/)[a-zA-Z0-9]+)+\\s",
              relevance: 10
            },
            {
              begin: "\\s(" + smali_instr_high_prio.join("|") + ")((-|/)[a-zA-Z0-9]+)*\\s",
              relevance: 10
            }
          ]
        },
        {
          className: "class",
          begin: "L[^(;:\n]*;",
          relevance: 0
        },
        { begin: "[vp][0-9]+" }
      ]
    };
  }
  function smalltalk(hljs) {
    const VAR_IDENT_RE = "[a-z][a-zA-Z0-9_]*";
    const CHAR = {
      className: "string",
      begin: "\\$.{1}"
    };
    const SYMBOL = {
      className: "symbol",
      begin: "#" + hljs.UNDERSCORE_IDENT_RE
    };
    return {
      name: "Smalltalk",
      aliases: ["st"],
      keywords: [
        "self",
        "super",
        "nil",
        "true",
        "false",
        "thisContext"
      ],
      contains: [
        hljs.COMMENT('"', '"'),
        hljs.APOS_STRING_MODE,
        {
          className: "type",
          begin: "\\b[A-Z][A-Za-z0-9_]*",
          relevance: 0
        },
        {
          begin: VAR_IDENT_RE + ":",
          relevance: 0
        },
        hljs.C_NUMBER_MODE,
        SYMBOL,
        CHAR,
        {
          // This looks more complicated than needed to avoid combinatorial
          // explosion under V8. It effectively means `| var1 var2 ... |` with
          // whitespace adjacent to `|` being optional.
          begin: "\\|[ ]*" + VAR_IDENT_RE + "([ ]+" + VAR_IDENT_RE + ")*[ ]*\\|",
          returnBegin: true,
          end: /\|/,
          illegal: /\S/,
          contains: [{ begin: "(\\|[ ]*)?" + VAR_IDENT_RE }]
        },
        {
          begin: "#\\(",
          end: "\\)",
          contains: [
            hljs.APOS_STRING_MODE,
            CHAR,
            hljs.C_NUMBER_MODE,
            SYMBOL
          ]
        }
      ]
    };
  }
  function sml(hljs) {
    return {
      name: "SML (Standard ML)",
      aliases: ["ml"],
      keywords: {
        $pattern: "[a-z_]\\w*!?",
        keyword: (
          /* according to Definition of Standard ML 97  */
          "abstype and andalso as case datatype do else end eqtype exception fn fun functor handle if in include infix infixr let local nonfix of op open orelse raise rec sharing sig signature struct structure then type val with withtype where while"
        ),
        built_in: (
          /* built-in types according to basis library */
          "array bool char exn int list option order real ref string substring vector unit word"
        ),
        literal: "true false NONE SOME LESS EQUAL GREATER nil"
      },
      illegal: /\/\/|>>/,
      contains: [
        {
          className: "literal",
          begin: /\[(\|\|)?\]|\(\)/,
          relevance: 0
        },
        hljs.COMMENT(
          "\\(\\*",
          "\\*\\)",
          { contains: ["self"] }
        ),
        {
          /* type variable */
          className: "symbol",
          begin: "'[A-Za-z_](?!')[\\w']*"
          /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
        },
        {
          /* polymorphic variant */
          className: "type",
          begin: "`[A-Z][\\w']*"
        },
        {
          /* module or constructor */
          className: "type",
          begin: "\\b[A-Z][\\w']*",
          relevance: 0
        },
        {
          /* don't color identifiers, but safely catch all identifiers with ' */
          begin: "[a-z_]\\w*'[\\w']*"
        },
        hljs.inherit(hljs.APOS_STRING_MODE, {
          className: "string",
          relevance: 0
        }),
        hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
        {
          className: "number",
          begin: "\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",
          relevance: 0
        },
        {
          begin: /[-=]>/
          // relevance booster
        }
      ]
    };
  }
  function sqf(hljs) {
    const VARIABLE = {
      className: "variable",
      begin: /\b_+[a-zA-Z]\w*/
    };
    const FUNCTION = {
      className: "title",
      begin: /[a-zA-Z][a-zA-Z_0-9]*_fnc_[a-zA-Z_0-9]+/
    };
    const STRINGS2 = {
      className: "string",
      variants: [
        {
          begin: '"',
          end: '"',
          contains: [
            {
              begin: '""',
              relevance: 0
            }
          ]
        },
        {
          begin: "'",
          end: "'",
          contains: [
            {
              begin: "''",
              relevance: 0
            }
          ]
        }
      ]
    };
    const KEYWORDS2 = [
      "break",
      "breakWith",
      "breakOut",
      "breakTo",
      "case",
      "catch",
      "continue",
      "continueWith",
      "default",
      "do",
      "else",
      "exit",
      "exitWith",
      "for",
      "forEach",
      "from",
      "if",
      "local",
      "private",
      "switch",
      "step",
      "then",
      "throw",
      "to",
      "try",
      "waitUntil",
      "while",
      "with"
    ];
    const LITERAL = [
      "blufor",
      "civilian",
      "configNull",
      "controlNull",
      "displayNull",
      "diaryRecordNull",
      "east",
      "endl",
      "false",
      "grpNull",
      "independent",
      "lineBreak",
      "locationNull",
      "nil",
      "objNull",
      "opfor",
      "pi",
      "resistance",
      "scriptNull",
      "sideAmbientLife",
      "sideEmpty",
      "sideEnemy",
      "sideFriendly",
      "sideLogic",
      "sideUnknown",
      "taskNull",
      "teamMemberNull",
      "true",
      "west"
    ];
    const BUILT_IN = [
      "abs",
      "accTime",
      "acos",
      "action",
      "actionIDs",
      "actionKeys",
      "actionKeysEx",
      "actionKeysImages",
      "actionKeysNames",
      "actionKeysNamesArray",
      "actionName",
      "actionParams",
      "activateAddons",
      "activatedAddons",
      "activateKey",
      "activeTitleEffectParams",
      "add3DENConnection",
      "add3DENEventHandler",
      "add3DENLayer",
      "addAction",
      "addBackpack",
      "addBackpackCargo",
      "addBackpackCargoGlobal",
      "addBackpackGlobal",
      "addBinocularItem",
      "addCamShake",
      "addCuratorAddons",
      "addCuratorCameraArea",
      "addCuratorEditableObjects",
      "addCuratorEditingArea",
      "addCuratorPoints",
      "addEditorObject",
      "addEventHandler",
      "addForce",
      "addForceGeneratorRTD",
      "addGoggles",
      "addGroupIcon",
      "addHandgunItem",
      "addHeadgear",
      "addItem",
      "addItemCargo",
      "addItemCargoGlobal",
      "addItemPool",
      "addItemToBackpack",
      "addItemToUniform",
      "addItemToVest",
      "addLiveStats",
      "addMagazine",
      "addMagazineAmmoCargo",
      "addMagazineCargo",
      "addMagazineCargoGlobal",
      "addMagazineGlobal",
      "addMagazinePool",
      "addMagazines",
      "addMagazineTurret",
      "addMenu",
      "addMenuItem",
      "addMissionEventHandler",
      "addMPEventHandler",
      "addMusicEventHandler",
      "addonFiles",
      "addOwnedMine",
      "addPlayerScores",
      "addPrimaryWeaponItem",
      "addPublicVariableEventHandler",
      "addRating",
      "addResources",
      "addScore",
      "addScoreSide",
      "addSecondaryWeaponItem",
      "addSwitchableUnit",
      "addTeamMember",
      "addToRemainsCollector",
      "addTorque",
      "addUniform",
      "addUserActionEventHandler",
      "addVehicle",
      "addVest",
      "addWaypoint",
      "addWeapon",
      "addWeaponCargo",
      "addWeaponCargoGlobal",
      "addWeaponGlobal",
      "addWeaponItem",
      "addWeaponPool",
      "addWeaponTurret",
      "addWeaponWithAttachmentsCargo",
      "addWeaponWithAttachmentsCargoGlobal",
      "admin",
      "agent",
      "agents",
      "AGLToASL",
      "aimedAtTarget",
      "aimPos",
      "airDensityCurveRTD",
      "airDensityRTD",
      "airplaneThrottle",
      "airportSide",
      "AISFinishHeal",
      "alive",
      "all3DENEntities",
      "allActiveTitleEffects",
      "allAddonsInfo",
      "allAirports",
      "allControls",
      "allCurators",
      "allCutLayers",
      "allDead",
      "allDeadMen",
      "allDiaryRecords",
      "allDiarySubjects",
      "allDisplays",
      "allEnv3DSoundSources",
      "allGroups",
      "allLODs",
      "allMapMarkers",
      "allMines",
      "allMissionObjects",
      "allObjects",
      "allow3DMode",
      "allowCrewInImmobile",
      "allowCuratorLogicIgnoreAreas",
      "allowDamage",
      "allowDammage",
      "allowedService",
      "allowFileOperations",
      "allowFleeing",
      "allowGetIn",
      "allowService",
      "allowSprint",
      "allPlayers",
      "allSimpleObjects",
      "allSites",
      "allTurrets",
      "allUnits",
      "allUnitsUAV",
      "allUsers",
      "allVariables",
      "ambientTemperature",
      "ammo",
      "ammoOnPylon",
      "and",
      "animate",
      "animateBay",
      "animateDoor",
      "animatePylon",
      "animateSource",
      "animationNames",
      "animationPhase",
      "animationSourcePhase",
      "animationState",
      "apertureParams",
      "append",
      "apply",
      "armoryPoints",
      "arrayIntersect",
      "asin",
      "ASLToAGL",
      "ASLToATL",
      "assert",
      "assignAsCargo",
      "assignAsCargoIndex",
      "assignAsCommander",
      "assignAsDriver",
      "assignAsGunner",
      "assignAsTurret",
      "assignCurator",
      "assignedCargo",
      "assignedCommander",
      "assignedDriver",
      "assignedGroup",
      "assignedGunner",
      "assignedItems",
      "assignedTarget",
      "assignedTeam",
      "assignedVehicle",
      "assignedVehicleRole",
      "assignedVehicles",
      "assignItem",
      "assignTeam",
      "assignToAirport",
      "atan",
      "atan2",
      "atg",
      "ATLToASL",
      "attachedObject",
      "attachedObjects",
      "attachedTo",
      "attachObject",
      "attachTo",
      "attackEnabled",
      "awake",
      "backpack",
      "backpackCargo",
      "backpackContainer",
      "backpackItems",
      "backpackMagazines",
      "backpackSpaceFor",
      "behaviour",
      "benchmark",
      "bezierInterpolation",
      "binocular",
      "binocularItems",
      "binocularMagazine",
      "boundingBox",
      "boundingBoxReal",
      "boundingCenter",
      "brakesDisabled",
      "briefingName",
      "buildingExit",
      "buildingPos",
      "buldozer_EnableRoadDiag",
      "buldozer_IsEnabledRoadDiag",
      "buldozer_LoadNewRoads",
      "buldozer_reloadOperMap",
      "buttonAction",
      "buttonSetAction",
      "cadetMode",
      "calculatePath",
      "calculatePlayerVisibilityByFriendly",
      "call",
      "callExtension",
      "camCommand",
      "camCommit",
      "camCommitPrepared",
      "camCommitted",
      "camConstuctionSetParams",
      "camCreate",
      "camDestroy",
      "cameraEffect",
      "cameraEffectEnableHUD",
      "cameraInterest",
      "cameraOn",
      "cameraView",
      "campaignConfigFile",
      "camPreload",
      "camPreloaded",
      "camPrepareBank",
      "camPrepareDir",
      "camPrepareDive",
      "camPrepareFocus",
      "camPrepareFov",
      "camPrepareFovRange",
      "camPreparePos",
      "camPrepareRelPos",
      "camPrepareTarget",
      "camSetBank",
      "camSetDir",
      "camSetDive",
      "camSetFocus",
      "camSetFov",
      "camSetFovRange",
      "camSetPos",
      "camSetRelPos",
      "camSetTarget",
      "camTarget",
      "camUseNVG",
      "canAdd",
      "canAddItemToBackpack",
      "canAddItemToUniform",
      "canAddItemToVest",
      "cancelSimpleTaskDestination",
      "canDeployWeapon",
      "canFire",
      "canMove",
      "canSlingLoad",
      "canStand",
      "canSuspend",
      "canTriggerDynamicSimulation",
      "canUnloadInCombat",
      "canVehicleCargo",
      "captive",
      "captiveNum",
      "cbChecked",
      "cbSetChecked",
      "ceil",
      "channelEnabled",
      "cheatsEnabled",
      "checkAIFeature",
      "checkVisibility",
      "className",
      "clear3DENAttribute",
      "clear3DENInventory",
      "clearAllItemsFromBackpack",
      "clearBackpackCargo",
      "clearBackpackCargoGlobal",
      "clearForcesRTD",
      "clearGroupIcons",
      "clearItemCargo",
      "clearItemCargoGlobal",
      "clearItemPool",
      "clearMagazineCargo",
      "clearMagazineCargoGlobal",
      "clearMagazinePool",
      "clearOverlay",
      "clearRadio",
      "clearWeaponCargo",
      "clearWeaponCargoGlobal",
      "clearWeaponPool",
      "clientOwner",
      "closeDialog",
      "closeDisplay",
      "closeOverlay",
      "collapseObjectTree",
      "collect3DENHistory",
      "collectiveRTD",
      "collisionDisabledWith",
      "combatBehaviour",
      "combatMode",
      "commandArtilleryFire",
      "commandChat",
      "commander",
      "commandFire",
      "commandFollow",
      "commandFSM",
      "commandGetOut",
      "commandingMenu",
      "commandMove",
      "commandRadio",
      "commandStop",
      "commandSuppressiveFire",
      "commandTarget",
      "commandWatch",
      "comment",
      "commitOverlay",
      "compatibleItems",
      "compatibleMagazines",
      "compile",
      "compileFinal",
      "compileScript",
      "completedFSM",
      "composeText",
      "configClasses",
      "configFile",
      "configHierarchy",
      "configName",
      "configOf",
      "configProperties",
      "configSourceAddonList",
      "configSourceMod",
      "configSourceModList",
      "confirmSensorTarget",
      "connectTerminalToUAV",
      "connectToServer",
      "controlsGroupCtrl",
      "conversationDisabled",
      "copyFromClipboard",
      "copyToClipboard",
      "copyWaypoints",
      "cos",
      "count",
      "countEnemy",
      "countFriendly",
      "countSide",
      "countType",
      "countUnknown",
      "create3DENComposition",
      "create3DENEntity",
      "createAgent",
      "createCenter",
      "createDialog",
      "createDiaryLink",
      "createDiaryRecord",
      "createDiarySubject",
      "createDisplay",
      "createGearDialog",
      "createGroup",
      "createGuardedPoint",
      "createHashMap",
      "createHashMapFromArray",
      "createLocation",
      "createMarker",
      "createMarkerLocal",
      "createMenu",
      "createMine",
      "createMissionDisplay",
      "createMPCampaignDisplay",
      "createSimpleObject",
      "createSimpleTask",
      "createSite",
      "createSoundSource",
      "createTask",
      "createTeam",
      "createTrigger",
      "createUnit",
      "createVehicle",
      "createVehicleCrew",
      "createVehicleLocal",
      "crew",
      "ctAddHeader",
      "ctAddRow",
      "ctClear",
      "ctCurSel",
      "ctData",
      "ctFindHeaderRows",
      "ctFindRowHeader",
      "ctHeaderControls",
      "ctHeaderCount",
      "ctRemoveHeaders",
      "ctRemoveRows",
      "ctrlActivate",
      "ctrlAddEventHandler",
      "ctrlAngle",
      "ctrlAnimateModel",
      "ctrlAnimationPhaseModel",
      "ctrlAt",
      "ctrlAutoScrollDelay",
      "ctrlAutoScrollRewind",
      "ctrlAutoScrollSpeed",
      "ctrlBackgroundColor",
      "ctrlChecked",
      "ctrlClassName",
      "ctrlCommit",
      "ctrlCommitted",
      "ctrlCreate",
      "ctrlDelete",
      "ctrlEnable",
      "ctrlEnabled",
      "ctrlFade",
      "ctrlFontHeight",
      "ctrlForegroundColor",
      "ctrlHTMLLoaded",
      "ctrlIDC",
      "ctrlIDD",
      "ctrlMapAnimAdd",
      "ctrlMapAnimClear",
      "ctrlMapAnimCommit",
      "ctrlMapAnimDone",
      "ctrlMapCursor",
      "ctrlMapMouseOver",
      "ctrlMapPosition",
      "ctrlMapScale",
      "ctrlMapScreenToWorld",
      "ctrlMapSetPosition",
      "ctrlMapWorldToScreen",
      "ctrlModel",
      "ctrlModelDirAndUp",
      "ctrlModelScale",
      "ctrlMousePosition",
      "ctrlParent",
      "ctrlParentControlsGroup",
      "ctrlPosition",
      "ctrlRemoveAllEventHandlers",
      "ctrlRemoveEventHandler",
      "ctrlScale",
      "ctrlScrollValues",
      "ctrlSetActiveColor",
      "ctrlSetAngle",
      "ctrlSetAutoScrollDelay",
      "ctrlSetAutoScrollRewind",
      "ctrlSetAutoScrollSpeed",
      "ctrlSetBackgroundColor",
      "ctrlSetChecked",
      "ctrlSetDisabledColor",
      "ctrlSetEventHandler",
      "ctrlSetFade",
      "ctrlSetFocus",
      "ctrlSetFont",
      "ctrlSetFontH1",
      "ctrlSetFontH1B",
      "ctrlSetFontH2",
      "ctrlSetFontH2B",
      "ctrlSetFontH3",
      "ctrlSetFontH3B",
      "ctrlSetFontH4",
      "ctrlSetFontH4B",
      "ctrlSetFontH5",
      "ctrlSetFontH5B",
      "ctrlSetFontH6",
      "ctrlSetFontH6B",
      "ctrlSetFontHeight",
      "ctrlSetFontHeightH1",
      "ctrlSetFontHeightH2",
      "ctrlSetFontHeightH3",
      "ctrlSetFontHeightH4",
      "ctrlSetFontHeightH5",
      "ctrlSetFontHeightH6",
      "ctrlSetFontHeightSecondary",
      "ctrlSetFontP",
      "ctrlSetFontPB",
      "ctrlSetFontSecondary",
      "ctrlSetForegroundColor",
      "ctrlSetModel",
      "ctrlSetModelDirAndUp",
      "ctrlSetModelScale",
      "ctrlSetMousePosition",
      "ctrlSetPixelPrecision",
      "ctrlSetPosition",
      "ctrlSetPositionH",
      "ctrlSetPositionW",
      "ctrlSetPositionX",
      "ctrlSetPositionY",
      "ctrlSetScale",
      "ctrlSetScrollValues",
      "ctrlSetShadow",
      "ctrlSetStructuredText",
      "ctrlSetText",
      "ctrlSetTextColor",
      "ctrlSetTextColorSecondary",
      "ctrlSetTextSecondary",
      "ctrlSetTextSelection",
      "ctrlSetTooltip",
      "ctrlSetTooltipColorBox",
      "ctrlSetTooltipColorShade",
      "ctrlSetTooltipColorText",
      "ctrlSetTooltipMaxWidth",
      "ctrlSetURL",
      "ctrlSetURLOverlayMode",
      "ctrlShadow",
      "ctrlShow",
      "ctrlShown",
      "ctrlStyle",
      "ctrlText",
      "ctrlTextColor",
      "ctrlTextHeight",
      "ctrlTextSecondary",
      "ctrlTextSelection",
      "ctrlTextWidth",
      "ctrlTooltip",
      "ctrlType",
      "ctrlURL",
      "ctrlURLOverlayMode",
      "ctrlVisible",
      "ctRowControls",
      "ctRowCount",
      "ctSetCurSel",
      "ctSetData",
      "ctSetHeaderTemplate",
      "ctSetRowTemplate",
      "ctSetValue",
      "ctValue",
      "curatorAddons",
      "curatorCamera",
      "curatorCameraArea",
      "curatorCameraAreaCeiling",
      "curatorCoef",
      "curatorEditableObjects",
      "curatorEditingArea",
      "curatorEditingAreaType",
      "curatorMouseOver",
      "curatorPoints",
      "curatorRegisteredObjects",
      "curatorSelected",
      "curatorWaypointCost",
      "current3DENOperation",
      "currentChannel",
      "currentCommand",
      "currentMagazine",
      "currentMagazineDetail",
      "currentMagazineDetailTurret",
      "currentMagazineTurret",
      "currentMuzzle",
      "currentNamespace",
      "currentPilot",
      "currentTask",
      "currentTasks",
      "currentThrowable",
      "currentVisionMode",
      "currentWaypoint",
      "currentWeapon",
      "currentWeaponMode",
      "currentWeaponTurret",
      "currentZeroing",
      "cursorObject",
      "cursorTarget",
      "customChat",
      "customRadio",
      "customWaypointPosition",
      "cutFadeOut",
      "cutObj",
      "cutRsc",
      "cutText",
      "damage",
      "date",
      "dateToNumber",
      "dayTime",
      "deActivateKey",
      "debriefingText",
      "debugFSM",
      "debugLog",
      "decayGraphValues",
      "deg",
      "delete3DENEntities",
      "deleteAt",
      "deleteCenter",
      "deleteCollection",
      "deleteEditorObject",
      "deleteGroup",
      "deleteGroupWhenEmpty",
      "deleteIdentity",
      "deleteLocation",
      "deleteMarker",
      "deleteMarkerLocal",
      "deleteRange",
      "deleteResources",
      "deleteSite",
      "deleteStatus",
      "deleteTeam",
      "deleteVehicle",
      "deleteVehicleCrew",
      "deleteWaypoint",
      "detach",
      "detectedMines",
      "diag_activeMissionFSMs",
      "diag_activeScripts",
      "diag_activeSQFScripts",
      "diag_activeSQSScripts",
      "diag_allMissionEventHandlers",
      "diag_captureFrame",
      "diag_captureFrameToFile",
      "diag_captureSlowFrame",
      "diag_codePerformance",
      "diag_deltaTime",
      "diag_drawmode",
      "diag_dumpCalltraceToLog",
      "diag_dumpScriptAssembly",
      "diag_dumpTerrainSynth",
      "diag_dynamicSimulationEnd",
      "diag_enable",
      "diag_enabled",
      "diag_exportConfig",
      "diag_exportTerrainSVG",
      "diag_fps",
      "diag_fpsmin",
      "diag_frameno",
      "diag_getTerrainSegmentOffset",
      "diag_lightNewLoad",
      "diag_list",
      "diag_localized",
      "diag_log",
      "diag_logSlowFrame",
      "diag_mergeConfigFile",
      "diag_recordTurretLimits",
      "diag_resetFSM",
      "diag_resetshapes",
      "diag_scope",
      "diag_setLightNew",
      "diag_stacktrace",
      "diag_tickTime",
      "diag_toggle",
      "dialog",
      "diarySubjectExists",
      "didJIP",
      "didJIPOwner",
      "difficulty",
      "difficultyEnabled",
      "difficultyEnabledRTD",
      "difficultyOption",
      "direction",
      "directionStabilizationEnabled",
      "directSay",
      "disableAI",
      "disableBrakes",
      "disableCollisionWith",
      "disableConversation",
      "disableDebriefingStats",
      "disableMapIndicators",
      "disableNVGEquipment",
      "disableRemoteSensors",
      "disableSerialization",
      "disableTIEquipment",
      "disableUAVConnectability",
      "disableUserInput",
      "displayAddEventHandler",
      "displayChild",
      "displayCtrl",
      "displayParent",
      "displayRemoveAllEventHandlers",
      "displayRemoveEventHandler",
      "displaySetEventHandler",
      "displayUniqueName",
      "displayUpdate",
      "dissolveTeam",
      "distance",
      "distance2D",
      "distanceSqr",
      "distributionRegion",
      "do3DENAction",
      "doArtilleryFire",
      "doFire",
      "doFollow",
      "doFSM",
      "doGetOut",
      "doMove",
      "doorPhase",
      "doStop",
      "doSuppressiveFire",
      "doTarget",
      "doWatch",
      "drawArrow",
      "drawEllipse",
      "drawIcon",
      "drawIcon3D",
      "drawLaser",
      "drawLine",
      "drawLine3D",
      "drawLink",
      "drawLocation",
      "drawPolygon",
      "drawRectangle",
      "drawTriangle",
      "driver",
      "drop",
      "dynamicSimulationDistance",
      "dynamicSimulationDistanceCoef",
      "dynamicSimulationEnabled",
      "dynamicSimulationSystemEnabled",
      "echo",
      "edit3DENMissionAttributes",
      "editObject",
      "editorSetEventHandler",
      "effectiveCommander",
      "elevatePeriscope",
      "emptyPositions",
      "enableAI",
      "enableAIFeature",
      "enableAimPrecision",
      "enableAttack",
      "enableAudioFeature",
      "enableAutoStartUpRTD",
      "enableAutoTrimRTD",
      "enableCamShake",
      "enableCaustics",
      "enableChannel",
      "enableCollisionWith",
      "enableCopilot",
      "enableDebriefingStats",
      "enableDiagLegend",
      "enableDirectionStabilization",
      "enableDynamicSimulation",
      "enableDynamicSimulationSystem",
      "enableEndDialog",
      "enableEngineArtillery",
      "enableEnvironment",
      "enableFatigue",
      "enableGunLights",
      "enableInfoPanelComponent",
      "enableIRLasers",
      "enableMimics",
      "enablePersonTurret",
      "enableRadio",
      "enableReload",
      "enableRopeAttach",
      "enableSatNormalOnDetail",
      "enableSaving",
      "enableSentences",
      "enableSimulation",
      "enableSimulationGlobal",
      "enableStamina",
      "enableStressDamage",
      "enableTeamSwitch",
      "enableTraffic",
      "enableUAVConnectability",
      "enableUAVWaypoints",
      "enableVehicleCargo",
      "enableVehicleSensor",
      "enableWeaponDisassembly",
      "endLoadingScreen",
      "endMission",
      "engineOn",
      "enginesIsOnRTD",
      "enginesPowerRTD",
      "enginesRpmRTD",
      "enginesTorqueRTD",
      "entities",
      "environmentEnabled",
      "environmentVolume",
      "equipmentDisabled",
      "estimatedEndServerTime",
      "estimatedTimeLeft",
      "evalObjectArgument",
      "everyBackpack",
      "everyContainer",
      "exec",
      "execEditorScript",
      "execFSM",
      "execVM",
      "exp",
      "expectedDestination",
      "exportJIPMessages",
      "eyeDirection",
      "eyePos",
      "face",
      "faction",
      "fadeEnvironment",
      "fadeMusic",
      "fadeRadio",
      "fadeSound",
      "fadeSpeech",
      "failMission",
      "fileExists",
      "fillWeaponsFromPool",
      "find",
      "findAny",
      "findCover",
      "findDisplay",
      "findEditorObject",
      "findEmptyPosition",
      "findEmptyPositionReady",
      "findIf",
      "findNearestEnemy",
      "finishMissionInit",
      "finite",
      "fire",
      "fireAtTarget",
      "firstBackpack",
      "flag",
      "flagAnimationPhase",
      "flagOwner",
      "flagSide",
      "flagTexture",
      "flatten",
      "fleeing",
      "floor",
      "flyInHeight",
      "flyInHeightASL",
      "focusedCtrl",
      "fog",
      "fogForecast",
      "fogParams",
      "forceAddUniform",
      "forceAtPositionRTD",
      "forceCadetDifficulty",
      "forcedMap",
      "forceEnd",
      "forceFlagTexture",
      "forceFollowRoad",
      "forceGeneratorRTD",
      "forceMap",
      "forceRespawn",
      "forceSpeed",
      "forceUnicode",
      "forceWalk",
      "forceWeaponFire",
      "forceWeatherChange",
      "forEachMember",
      "forEachMemberAgent",
      "forEachMemberTeam",
      "forgetTarget",
      "format",
      "formation",
      "formationDirection",
      "formationLeader",
      "formationMembers",
      "formationPosition",
      "formationTask",
      "formatText",
      "formLeader",
      "freeExtension",
      "freeLook",
      "fromEditor",
      "fuel",
      "fullCrew",
      "gearIDCAmmoCount",
      "gearSlotAmmoCount",
      "gearSlotData",
      "gestureState",
      "get",
      "get3DENActionState",
      "get3DENAttribute",
      "get3DENCamera",
      "get3DENConnections",
      "get3DENEntity",
      "get3DENEntityID",
      "get3DENGrid",
      "get3DENIconsVisible",
      "get3DENLayerEntities",
      "get3DENLinesVisible",
      "get3DENMissionAttribute",
      "get3DENMouseOver",
      "get3DENSelected",
      "getAimingCoef",
      "getAllEnv3DSoundControllers",
      "getAllEnvSoundControllers",
      "getAllHitPointsDamage",
      "getAllOwnedMines",
      "getAllPylonsInfo",
      "getAllSoundControllers",
      "getAllUnitTraits",
      "getAmmoCargo",
      "getAnimAimPrecision",
      "getAnimSpeedCoef",
      "getArray",
      "getArtilleryAmmo",
      "getArtilleryComputerSettings",
      "getArtilleryETA",
      "getAssetDLCInfo",
      "getAssignedCuratorLogic",
      "getAssignedCuratorUnit",
      "getAttackTarget",
      "getAudioOptionVolumes",
      "getBackpackCargo",
      "getBleedingRemaining",
      "getBurningValue",
      "getCalculatePlayerVisibilityByFriendly",
      "getCameraViewDirection",
      "getCargoIndex",
      "getCenterOfMass",
      "getClientState",
      "getClientStateNumber",
      "getCompatiblePylonMagazines",
      "getConnectedUAV",
      "getConnectedUAVUnit",
      "getContainerMaxLoad",
      "getCorpse",
      "getCruiseControl",
      "getCursorObjectParams",
      "getCustomAimCoef",
      "getCustomSoundController",
      "getCustomSoundControllerCount",
      "getDammage",
      "getDebriefingText",
      "getDescription",
      "getDir",
      "getDirVisual",
      "getDiverState",
      "getDLCAssetsUsage",
      "getDLCAssetsUsageByName",
      "getDLCs",
      "getDLCUsageTime",
      "getEditorCamera",
      "getEditorMode",
      "getEditorObjectScope",
      "getElevationOffset",
      "getEngineTargetRPMRTD",
      "getEnv3DSoundController",
      "getEnvSoundController",
      "getEventHandlerInfo",
      "getFatigue",
      "getFieldManualStartPage",
      "getForcedFlagTexture",
      "getForcedSpeed",
      "getFriend",
      "getFSMVariable",
      "getFuelCargo",
      "getGraphValues",
      "getGroupIcon",
      "getGroupIconParams",
      "getGroupIcons",
      "getHideFrom",
      "getHit",
      "getHitIndex",
      "getHitPointDamage",
      "getItemCargo",
      "getLighting",
      "getLightingAt",
      "getLoadedModsInfo",
      "getMagazineCargo",
      "getMarkerColor",
      "getMarkerPos",
      "getMarkerSize",
      "getMarkerType",
      "getMass",
      "getMissionConfig",
      "getMissionConfigValue",
      "getMissionDLCs",
      "getMissionLayerEntities",
      "getMissionLayers",
      "getMissionPath",
      "getModelInfo",
      "getMousePosition",
      "getMusicPlayedTime",
      "getNumber",
      "getObjectArgument",
      "getObjectChildren",
      "getObjectDLC",
      "getObjectFOV",
      "getObjectID",
      "getObjectMaterials",
      "getObjectProxy",
      "getObjectScale",
      "getObjectTextures",
      "getObjectType",
      "getObjectViewDistance",
      "getOpticsMode",
      "getOrDefault",
      "getOrDefaultCall",
      "getOxygenRemaining",
      "getPersonUsedDLCs",
      "getPilotCameraDirection",
      "getPilotCameraPosition",
      "getPilotCameraRotation",
      "getPilotCameraTarget",
      "getPiPViewDistance",
      "getPlateNumber",
      "getPlayerChannel",
      "getPlayerID",
      "getPlayerScores",
      "getPlayerUID",
      "getPlayerVoNVolume",
      "getPos",
      "getPosASL",
      "getPosASLVisual",
      "getPosASLW",
      "getPosATL",
      "getPosATLVisual",
      "getPosVisual",
      "getPosWorld",
      "getPosWorldVisual",
      "getPylonMagazines",
      "getRelDir",
      "getRelPos",
      "getRemoteSensorsDisabled",
      "getRepairCargo",
      "getResolution",
      "getRoadInfo",
      "getRotorBrakeRTD",
      "getSensorTargets",
      "getSensorThreats",
      "getShadowDistance",
      "getShotParents",
      "getSlingLoad",
      "getSoundController",
      "getSoundControllerResult",
      "getSpeed",
      "getStamina",
      "getStatValue",
      "getSteamFriendsServers",
      "getSubtitleOptions",
      "getSuppression",
      "getTerrainGrid",
      "getTerrainHeight",
      "getTerrainHeightASL",
      "getTerrainInfo",
      "getText",
      "getTextRaw",
      "getTextureInfo",
      "getTextWidth",
      "getTiParameters",
      "getTotalDLCUsageTime",
      "getTrimOffsetRTD",
      "getTurretLimits",
      "getTurretOpticsMode",
      "getUnitFreefallInfo",
      "getUnitLoadout",
      "getUnitTrait",
      "getUnloadInCombat",
      "getUserInfo",
      "getUserMFDText",
      "getUserMFDValue",
      "getVariable",
      "getVehicleCargo",
      "getVehicleTiPars",
      "getWeaponCargo",
      "getWeaponSway",
      "getWingsOrientationRTD",
      "getWingsPositionRTD",
      "getWPPos",
      "glanceAt",
      "globalChat",
      "globalRadio",
      "goggles",
      "goto",
      "group",
      "groupChat",
      "groupFromNetId",
      "groupIconSelectable",
      "groupIconsVisible",
      "groupID",
      "groupOwner",
      "groupRadio",
      "groups",
      "groupSelectedUnits",
      "groupSelectUnit",
      "gunner",
      "gusts",
      "halt",
      "handgunItems",
      "handgunMagazine",
      "handgunWeapon",
      "handsHit",
      "hashValue",
      "hasInterface",
      "hasPilotCamera",
      "hasWeapon",
      "hcAllGroups",
      "hcGroupParams",
      "hcLeader",
      "hcRemoveAllGroups",
      "hcRemoveGroup",
      "hcSelected",
      "hcSelectGroup",
      "hcSetGroup",
      "hcShowBar",
      "hcShownBar",
      "headgear",
      "hideBody",
      "hideObject",
      "hideObjectGlobal",
      "hideSelection",
      "hint",
      "hintC",
      "hintCadet",
      "hintSilent",
      "hmd",
      "hostMission",
      "htmlLoad",
      "HUDMovementLevels",
      "humidity",
      "image",
      "importAllGroups",
      "importance",
      "in",
      "inArea",
      "inAreaArray",
      "incapacitatedState",
      "inflame",
      "inflamed",
      "infoPanel",
      "infoPanelComponentEnabled",
      "infoPanelComponents",
      "infoPanels",
      "inGameUISetEventHandler",
      "inheritsFrom",
      "initAmbientLife",
      "inPolygon",
      "inputAction",
      "inputController",
      "inputMouse",
      "inRangeOfArtillery",
      "insert",
      "insertEditorObject",
      "intersect",
      "is3DEN",
      "is3DENMultiplayer",
      "is3DENPreview",
      "isAbleToBreathe",
      "isActionMenuVisible",
      "isAgent",
      "isAimPrecisionEnabled",
      "isAllowedCrewInImmobile",
      "isArray",
      "isAutoHoverOn",
      "isAutonomous",
      "isAutoStartUpEnabledRTD",
      "isAutotest",
      "isAutoTrimOnRTD",
      "isAwake",
      "isBleeding",
      "isBurning",
      "isClass",
      "isCollisionLightOn",
      "isCopilotEnabled",
      "isDamageAllowed",
      "isDedicated",
      "isDLCAvailable",
      "isEngineOn",
      "isEqualRef",
      "isEqualTo",
      "isEqualType",
      "isEqualTypeAll",
      "isEqualTypeAny",
      "isEqualTypeArray",
      "isEqualTypeParams",
      "isFilePatchingEnabled",
      "isFinal",
      "isFlashlightOn",
      "isFlatEmpty",
      "isForcedWalk",
      "isFormationLeader",
      "isGameFocused",
      "isGamePaused",
      "isGroupDeletedWhenEmpty",
      "isHidden",
      "isInRemainsCollector",
      "isInstructorFigureEnabled",
      "isIRLaserOn",
      "isKeyActive",
      "isKindOf",
      "isLaserOn",
      "isLightOn",
      "isLocalized",
      "isManualFire",
      "isMarkedForCollection",
      "isMissionProfileNamespaceLoaded",
      "isMultiplayer",
      "isMultiplayerSolo",
      "isNil",
      "isNotEqualRef",
      "isNotEqualTo",
      "isNull",
      "isNumber",
      "isObjectHidden",
      "isObjectRTD",
      "isOnRoad",
      "isPiPEnabled",
      "isPlayer",
      "isRealTime",
      "isRemoteExecuted",
      "isRemoteExecutedJIP",
      "isSaving",
      "isSensorTargetConfirmed",
      "isServer",
      "isShowing3DIcons",
      "isSimpleObject",
      "isSprintAllowed",
      "isStaminaEnabled",
      "isSteamMission",
      "isSteamOverlayEnabled",
      "isStreamFriendlyUIEnabled",
      "isStressDamageEnabled",
      "isText",
      "isTouchingGround",
      "isTurnedOut",
      "isTutHintsEnabled",
      "isUAVConnectable",
      "isUAVConnected",
      "isUIContext",
      "isUniformAllowed",
      "isVehicleCargo",
      "isVehicleRadarOn",
      "isVehicleSensorEnabled",
      "isWalking",
      "isWeaponDeployed",
      "isWeaponRested",
      "itemCargo",
      "items",
      "itemsWithMagazines",
      "join",
      "joinAs",
      "joinAsSilent",
      "joinSilent",
      "joinString",
      "kbAddDatabase",
      "kbAddDatabaseTargets",
      "kbAddTopic",
      "kbHasTopic",
      "kbReact",
      "kbRemoveTopic",
      "kbTell",
      "kbWasSaid",
      "keyImage",
      "keyName",
      "keys",
      "knowsAbout",
      "land",
      "landAt",
      "landResult",
      "language",
      "laserTarget",
      "lbAdd",
      "lbClear",
      "lbColor",
      "lbColorRight",
      "lbCurSel",
      "lbData",
      "lbDelete",
      "lbIsSelected",
      "lbPicture",
      "lbPictureRight",
      "lbSelection",
      "lbSetColor",
      "lbSetColorRight",
      "lbSetCurSel",
      "lbSetData",
      "lbSetPicture",
      "lbSetPictureColor",
      "lbSetPictureColorDisabled",
      "lbSetPictureColorSelected",
      "lbSetPictureRight",
      "lbSetPictureRightColor",
      "lbSetPictureRightColorDisabled",
      "lbSetPictureRightColorSelected",
      "lbSetSelectColor",
      "lbSetSelectColorRight",
      "lbSetSelected",
      "lbSetText",
      "lbSetTextRight",
      "lbSetTooltip",
      "lbSetValue",
      "lbSize",
      "lbSort",
      "lbSortBy",
      "lbSortByValue",
      "lbText",
      "lbTextRight",
      "lbTooltip",
      "lbValue",
      "leader",
      "leaderboardDeInit",
      "leaderboardGetRows",
      "leaderboardInit",
      "leaderboardRequestRowsFriends",
      "leaderboardRequestRowsGlobal",
      "leaderboardRequestRowsGlobalAroundUser",
      "leaderboardsRequestUploadScore",
      "leaderboardsRequestUploadScoreKeepBest",
      "leaderboardState",
      "leaveVehicle",
      "libraryCredits",
      "libraryDisclaimers",
      "lifeState",
      "lightAttachObject",
      "lightDetachObject",
      "lightIsOn",
      "lightnings",
      "limitSpeed",
      "linearConversion",
      "lineIntersects",
      "lineIntersectsObjs",
      "lineIntersectsSurfaces",
      "lineIntersectsWith",
      "linkItem",
      "list",
      "listObjects",
      "listRemoteTargets",
      "listVehicleSensors",
      "ln",
      "lnbAddArray",
      "lnbAddColumn",
      "lnbAddRow",
      "lnbClear",
      "lnbColor",
      "lnbColorRight",
      "lnbCurSelRow",
      "lnbData",
      "lnbDeleteColumn",
      "lnbDeleteRow",
      "lnbGetColumnsPosition",
      "lnbPicture",
      "lnbPictureRight",
      "lnbSetColor",
      "lnbSetColorRight",
      "lnbSetColumnsPos",
      "lnbSetCurSelRow",
      "lnbSetData",
      "lnbSetPicture",
      "lnbSetPictureColor",
      "lnbSetPictureColorRight",
      "lnbSetPictureColorSelected",
      "lnbSetPictureColorSelectedRight",
      "lnbSetPictureRight",
      "lnbSetText",
      "lnbSetTextRight",
      "lnbSetTooltip",
      "lnbSetValue",
      "lnbSize",
      "lnbSort",
      "lnbSortBy",
      "lnbSortByValue",
      "lnbText",
      "lnbTextRight",
      "lnbValue",
      "load",
      "loadAbs",
      "loadBackpack",
      "loadConfig",
      "loadFile",
      "loadGame",
      "loadIdentity",
      "loadMagazine",
      "loadOverlay",
      "loadStatus",
      "loadUniform",
      "loadVest",
      "localize",
      "localNamespace",
      "locationPosition",
      "lock",
      "lockCameraTo",
      "lockCargo",
      "lockDriver",
      "locked",
      "lockedCameraTo",
      "lockedCargo",
      "lockedDriver",
      "lockedInventory",
      "lockedTurret",
      "lockIdentity",
      "lockInventory",
      "lockTurret",
      "lockWp",
      "log",
      "logEntities",
      "logNetwork",
      "logNetworkTerminate",
      "lookAt",
      "lookAtPos",
      "magazineCargo",
      "magazines",
      "magazinesAllTurrets",
      "magazinesAmmo",
      "magazinesAmmoCargo",
      "magazinesAmmoFull",
      "magazinesDetail",
      "magazinesDetailBackpack",
      "magazinesDetailUniform",
      "magazinesDetailVest",
      "magazinesTurret",
      "magazineTurretAmmo",
      "mapAnimAdd",
      "mapAnimClear",
      "mapAnimCommit",
      "mapAnimDone",
      "mapCenterOnCamera",
      "mapGridPosition",
      "markAsFinishedOnSteam",
      "markerAlpha",
      "markerBrush",
      "markerChannel",
      "markerColor",
      "markerDir",
      "markerPolyline",
      "markerPos",
      "markerShadow",
      "markerShape",
      "markerSize",
      "markerText",
      "markerType",
      "matrixMultiply",
      "matrixTranspose",
      "max",
      "maxLoad",
      "members",
      "menuAction",
      "menuAdd",
      "menuChecked",
      "menuClear",
      "menuCollapse",
      "menuData",
      "menuDelete",
      "menuEnable",
      "menuEnabled",
      "menuExpand",
      "menuHover",
      "menuPicture",
      "menuSetAction",
      "menuSetCheck",
      "menuSetData",
      "menuSetPicture",
      "menuSetShortcut",
      "menuSetText",
      "menuSetURL",
      "menuSetValue",
      "menuShortcut",
      "menuShortcutText",
      "menuSize",
      "menuSort",
      "menuText",
      "menuURL",
      "menuValue",
      "merge",
      "min",
      "mineActive",
      "mineDetectedBy",
      "missileTarget",
      "missileTargetPos",
      "missionConfigFile",
      "missionDifficulty",
      "missionEnd",
      "missionName",
      "missionNameSource",
      "missionNamespace",
      "missionProfileNamespace",
      "missionStart",
      "missionVersion",
      "mod",
      "modelToWorld",
      "modelToWorldVisual",
      "modelToWorldVisualWorld",
      "modelToWorldWorld",
      "modParams",
      "moonIntensity",
      "moonPhase",
      "morale",
      "move",
      "move3DENCamera",
      "moveInAny",
      "moveInCargo",
      "moveInCommander",
      "moveInDriver",
      "moveInGunner",
      "moveInTurret",
      "moveObjectToEnd",
      "moveOut",
      "moveTime",
      "moveTo",
      "moveToCompleted",
      "moveToFailed",
      "musicVolume",
      "name",
      "namedProperties",
      "nameSound",
      "nearEntities",
      "nearestBuilding",
      "nearestLocation",
      "nearestLocations",
      "nearestLocationWithDubbing",
      "nearestMines",
      "nearestObject",
      "nearestObjects",
      "nearestTerrainObjects",
      "nearObjects",
      "nearObjectsReady",
      "nearRoads",
      "nearSupplies",
      "nearTargets",
      "needReload",
      "needService",
      "netId",
      "netObjNull",
      "newOverlay",
      "nextMenuItemIndex",
      "nextWeatherChange",
      "nMenuItems",
      "not",
      "numberOfEnginesRTD",
      "numberToDate",
      "objectCurators",
      "objectFromNetId",
      "objectParent",
      "objStatus",
      "onBriefingGroup",
      "onBriefingNotes",
      "onBriefingPlan",
      "onBriefingTeamSwitch",
      "onCommandModeChanged",
      "onDoubleClick",
      "onEachFrame",
      "onGroupIconClick",
      "onGroupIconOverEnter",
      "onGroupIconOverLeave",
      "onHCGroupSelectionChanged",
      "onMapSingleClick",
      "onPlayerConnected",
      "onPlayerDisconnected",
      "onPreloadFinished",
      "onPreloadStarted",
      "onShowNewObject",
      "onTeamSwitch",
      "openCuratorInterface",
      "openDLCPage",
      "openGPS",
      "openMap",
      "openSteamApp",
      "openYoutubeVideo",
      "or",
      "orderGetIn",
      "overcast",
      "overcastForecast",
      "owner",
      "param",
      "params",
      "parseNumber",
      "parseSimpleArray",
      "parseText",
      "parsingNamespace",
      "particlesQuality",
      "periscopeElevation",
      "pickWeaponPool",
      "pitch",
      "pixelGrid",
      "pixelGridBase",
      "pixelGridNoUIScale",
      "pixelH",
      "pixelW",
      "playableSlotsNumber",
      "playableUnits",
      "playAction",
      "playActionNow",
      "player",
      "playerRespawnTime",
      "playerSide",
      "playersNumber",
      "playGesture",
      "playMission",
      "playMove",
      "playMoveNow",
      "playMusic",
      "playScriptedMission",
      "playSound",
      "playSound3D",
      "playSoundUI",
      "pose",
      "position",
      "positionCameraToWorld",
      "posScreenToWorld",
      "posWorldToScreen",
      "ppEffectAdjust",
      "ppEffectCommit",
      "ppEffectCommitted",
      "ppEffectCreate",
      "ppEffectDestroy",
      "ppEffectEnable",
      "ppEffectEnabled",
      "ppEffectForceInNVG",
      "precision",
      "preloadCamera",
      "preloadObject",
      "preloadSound",
      "preloadTitleObj",
      "preloadTitleRsc",
      "preprocessFile",
      "preprocessFileLineNumbers",
      "primaryWeapon",
      "primaryWeaponItems",
      "primaryWeaponMagazine",
      "priority",
      "processDiaryLink",
      "productVersion",
      "profileName",
      "profileNamespace",
      "profileNameSteam",
      "progressLoadingScreen",
      "progressPosition",
      "progressSetPosition",
      "publicVariable",
      "publicVariableClient",
      "publicVariableServer",
      "pushBack",
      "pushBackUnique",
      "putWeaponPool",
      "queryItemsPool",
      "queryMagazinePool",
      "queryWeaponPool",
      "rad",
      "radioChannelAdd",
      "radioChannelCreate",
      "radioChannelInfo",
      "radioChannelRemove",
      "radioChannelSetCallSign",
      "radioChannelSetLabel",
      "radioEnabled",
      "radioVolume",
      "rain",
      "rainbow",
      "rainParams",
      "random",
      "rank",
      "rankId",
      "rating",
      "rectangular",
      "regexFind",
      "regexMatch",
      "regexReplace",
      "registeredTasks",
      "registerTask",
      "reload",
      "reloadEnabled",
      "remoteControl",
      "remoteExec",
      "remoteExecCall",
      "remoteExecutedOwner",
      "remove3DENConnection",
      "remove3DENEventHandler",
      "remove3DENLayer",
      "removeAction",
      "removeAll3DENEventHandlers",
      "removeAllActions",
      "removeAllAssignedItems",
      "removeAllBinocularItems",
      "removeAllContainers",
      "removeAllCuratorAddons",
      "removeAllCuratorCameraAreas",
      "removeAllCuratorEditingAreas",
      "removeAllEventHandlers",
      "removeAllHandgunItems",
      "removeAllItems",
      "removeAllItemsWithMagazines",
      "removeAllMissionEventHandlers",
      "removeAllMPEventHandlers",
      "removeAllMusicEventHandlers",
      "removeAllOwnedMines",
      "removeAllPrimaryWeaponItems",
      "removeAllSecondaryWeaponItems",
      "removeAllUserActionEventHandlers",
      "removeAllWeapons",
      "removeBackpack",
      "removeBackpackGlobal",
      "removeBinocularItem",
      "removeCuratorAddons",
      "removeCuratorCameraArea",
      "removeCuratorEditableObjects",
      "removeCuratorEditingArea",
      "removeDiaryRecord",
      "removeDiarySubject",
      "removeDrawIcon",
      "removeDrawLinks",
      "removeEventHandler",
      "removeFromRemainsCollector",
      "removeGoggles",
      "removeGroupIcon",
      "removeHandgunItem",
      "removeHeadgear",
      "removeItem",
      "removeItemFromBackpack",
      "removeItemFromUniform",
      "removeItemFromVest",
      "removeItems",
      "removeMagazine",
      "removeMagazineGlobal",
      "removeMagazines",
      "removeMagazinesTurret",
      "removeMagazineTurret",
      "removeMenuItem",
      "removeMissionEventHandler",
      "removeMPEventHandler",
      "removeMusicEventHandler",
      "removeOwnedMine",
      "removePrimaryWeaponItem",
      "removeSecondaryWeaponItem",
      "removeSimpleTask",
      "removeSwitchableUnit",
      "removeTeamMember",
      "removeUniform",
      "removeUserActionEventHandler",
      "removeVest",
      "removeWeapon",
      "removeWeaponAttachmentCargo",
      "removeWeaponCargo",
      "removeWeaponGlobal",
      "removeWeaponTurret",
      "reportRemoteTarget",
      "requiredVersion",
      "resetCamShake",
      "resetSubgroupDirection",
      "resize",
      "resources",
      "respawnVehicle",
      "restartEditorCamera",
      "reveal",
      "revealMine",
      "reverse",
      "reversedMouseY",
      "roadAt",
      "roadsConnectedTo",
      "roleDescription",
      "ropeAttachedObjects",
      "ropeAttachedTo",
      "ropeAttachEnabled",
      "ropeAttachTo",
      "ropeCreate",
      "ropeCut",
      "ropeDestroy",
      "ropeDetach",
      "ropeEndPosition",
      "ropeLength",
      "ropes",
      "ropesAttachedTo",
      "ropeSegments",
      "ropeUnwind",
      "ropeUnwound",
      "rotorsForcesRTD",
      "rotorsRpmRTD",
      "round",
      "runInitScript",
      "safeZoneH",
      "safeZoneW",
      "safeZoneWAbs",
      "safeZoneX",
      "safeZoneXAbs",
      "safeZoneY",
      "save3DENInventory",
      "saveGame",
      "saveIdentity",
      "saveJoysticks",
      "saveMissionProfileNamespace",
      "saveOverlay",
      "saveProfileNamespace",
      "saveStatus",
      "saveVar",
      "savingEnabled",
      "say",
      "say2D",
      "say3D",
      "scopeName",
      "score",
      "scoreSide",
      "screenshot",
      "screenToWorld",
      "scriptDone",
      "scriptName",
      "scudState",
      "secondaryWeapon",
      "secondaryWeaponItems",
      "secondaryWeaponMagazine",
      "select",
      "selectBestPlaces",
      "selectDiarySubject",
      "selectedEditorObjects",
      "selectEditorObject",
      "selectionNames",
      "selectionPosition",
      "selectionVectorDirAndUp",
      "selectLeader",
      "selectMax",
      "selectMin",
      "selectNoPlayer",
      "selectPlayer",
      "selectRandom",
      "selectRandomWeighted",
      "selectWeapon",
      "selectWeaponTurret",
      "sendAUMessage",
      "sendSimpleCommand",
      "sendTask",
      "sendTaskResult",
      "sendUDPMessage",
      "sentencesEnabled",
      "serverCommand",
      "serverCommandAvailable",
      "serverCommandExecutable",
      "serverName",
      "serverNamespace",
      "serverTime",
      "set",
      "set3DENAttribute",
      "set3DENAttributes",
      "set3DENGrid",
      "set3DENIconsVisible",
      "set3DENLayer",
      "set3DENLinesVisible",
      "set3DENLogicType",
      "set3DENMissionAttribute",
      "set3DENMissionAttributes",
      "set3DENModelsVisible",
      "set3DENObjectType",
      "set3DENSelected",
      "setAccTime",
      "setActualCollectiveRTD",
      "setAirplaneThrottle",
      "setAirportSide",
      "setAmmo",
      "setAmmoCargo",
      "setAmmoOnPylon",
      "setAnimSpeedCoef",
      "setAperture",
      "setApertureNew",
      "setArmoryPoints",
      "setAttributes",
      "setAutonomous",
      "setBehaviour",
      "setBehaviourStrong",
      "setBleedingRemaining",
      "setBrakesRTD",
      "setCameraInterest",
      "setCamShakeDefParams",
      "setCamShakeParams",
      "setCamUseTi",
      "setCaptive",
      "setCenterOfMass",
      "setCollisionLight",
      "setCombatBehaviour",
      "setCombatMode",
      "setCompassOscillation",
      "setConvoySeparation",
      "setCruiseControl",
      "setCuratorCameraAreaCeiling",
      "setCuratorCoef",
      "setCuratorEditingAreaType",
      "setCuratorWaypointCost",
      "setCurrentChannel",
      "setCurrentTask",
      "setCurrentWaypoint",
      "setCustomAimCoef",
      "SetCustomMissionData",
      "setCustomSoundController",
      "setCustomWeightRTD",
      "setDamage",
      "setDammage",
      "setDate",
      "setDebriefingText",
      "setDefaultCamera",
      "setDestination",
      "setDetailMapBlendPars",
      "setDiaryRecordText",
      "setDiarySubjectPicture",
      "setDir",
      "setDirection",
      "setDrawIcon",
      "setDriveOnPath",
      "setDropInterval",
      "setDynamicSimulationDistance",
      "setDynamicSimulationDistanceCoef",
      "setEditorMode",
      "setEditorObjectScope",
      "setEffectCondition",
      "setEffectiveCommander",
      "setEngineRpmRTD",
      "setFace",
      "setFaceanimation",
      "setFatigue",
      "setFeatureType",
      "setFlagAnimationPhase",
      "setFlagOwner",
      "setFlagSide",
      "setFlagTexture",
      "setFog",
      "setForceGeneratorRTD",
      "setFormation",
      "setFormationTask",
      "setFormDir",
      "setFriend",
      "setFromEditor",
      "setFSMVariable",
      "setFuel",
      "setFuelCargo",
      "setGroupIcon",
      "setGroupIconParams",
      "setGroupIconsSelectable",
      "setGroupIconsVisible",
      "setGroupid",
      "setGroupIdGlobal",
      "setGroupOwner",
      "setGusts",
      "setHideBehind",
      "setHit",
      "setHitIndex",
      "setHitPointDamage",
      "setHorizonParallaxCoef",
      "setHUDMovementLevels",
      "setHumidity",
      "setIdentity",
      "setImportance",
      "setInfoPanel",
      "setLeader",
      "setLightAmbient",
      "setLightAttenuation",
      "setLightBrightness",
      "setLightColor",
      "setLightConePars",
      "setLightDayLight",
      "setLightFlareMaxDistance",
      "setLightFlareSize",
      "setLightIntensity",
      "setLightIR",
      "setLightnings",
      "setLightUseFlare",
      "setLightVolumeShape",
      "setLocalWindParams",
      "setMagazineTurretAmmo",
      "setMarkerAlpha",
      "setMarkerAlphaLocal",
      "setMarkerBrush",
      "setMarkerBrushLocal",
      "setMarkerColor",
      "setMarkerColorLocal",
      "setMarkerDir",
      "setMarkerDirLocal",
      "setMarkerPolyline",
      "setMarkerPolylineLocal",
      "setMarkerPos",
      "setMarkerPosLocal",
      "setMarkerShadow",
      "setMarkerShadowLocal",
      "setMarkerShape",
      "setMarkerShapeLocal",
      "setMarkerSize",
      "setMarkerSizeLocal",
      "setMarkerText",
      "setMarkerTextLocal",
      "setMarkerType",
      "setMarkerTypeLocal",
      "setMass",
      "setMaxLoad",
      "setMimic",
      "setMissileTarget",
      "setMissileTargetPos",
      "setMousePosition",
      "setMusicEffect",
      "setMusicEventHandler",
      "setName",
      "setNameSound",
      "setObjectArguments",
      "setObjectMaterial",
      "setObjectMaterialGlobal",
      "setObjectProxy",
      "setObjectScale",
      "setObjectTexture",
      "setObjectTextureGlobal",
      "setObjectViewDistance",
      "setOpticsMode",
      "setOvercast",
      "setOwner",
      "setOxygenRemaining",
      "setParticleCircle",
      "setParticleClass",
      "setParticleFire",
      "setParticleParams",
      "setParticleRandom",
      "setPilotCameraDirection",
      "setPilotCameraRotation",
      "setPilotCameraTarget",
      "setPilotLight",
      "setPiPEffect",
      "setPiPViewDistance",
      "setPitch",
      "setPlateNumber",
      "setPlayable",
      "setPlayerRespawnTime",
      "setPlayerVoNVolume",
      "setPos",
      "setPosASL",
      "setPosASL2",
      "setPosASLW",
      "setPosATL",
      "setPosition",
      "setPosWorld",
      "setPylonLoadout",
      "setPylonsPriority",
      "setRadioMsg",
      "setRain",
      "setRainbow",
      "setRandomLip",
      "setRank",
      "setRectangular",
      "setRepairCargo",
      "setRotorBrakeRTD",
      "setShadowDistance",
      "setShotParents",
      "setSide",
      "setSimpleTaskAlwaysVisible",
      "setSimpleTaskCustomData",
      "setSimpleTaskDescription",
      "setSimpleTaskDestination",
      "setSimpleTaskTarget",
      "setSimpleTaskType",
      "setSimulWeatherLayers",
      "setSize",
      "setSkill",
      "setSlingLoad",
      "setSoundEffect",
      "setSpeaker",
      "setSpeech",
      "setSpeedMode",
      "setStamina",
      "setStaminaScheme",
      "setStatValue",
      "setSuppression",
      "setSystemOfUnits",
      "setTargetAge",
      "setTaskMarkerOffset",
      "setTaskResult",
      "setTaskState",
      "setTerrainGrid",
      "setTerrainHeight",
      "setText",
      "setTimeMultiplier",
      "setTiParameter",
      "setTitleEffect",
      "setTowParent",
      "setTrafficDensity",
      "setTrafficDistance",
      "setTrafficGap",
      "setTrafficSpeed",
      "setTriggerActivation",
      "setTriggerArea",
      "setTriggerInterval",
      "setTriggerStatements",
      "setTriggerText",
      "setTriggerTimeout",
      "setTriggerType",
      "setTurretLimits",
      "setTurretOpticsMode",
      "setType",
      "setUnconscious",
      "setUnitAbility",
      "setUnitCombatMode",
      "setUnitFreefallHeight",
      "setUnitLoadout",
      "setUnitPos",
      "setUnitPosWeak",
      "setUnitRank",
      "setUnitRecoilCoefficient",
      "setUnitTrait",
      "setUnloadInCombat",
      "setUserActionText",
      "setUserMFDText",
      "setUserMFDValue",
      "setVariable",
      "setVectorDir",
      "setVectorDirAndUp",
      "setVectorUp",
      "setVehicleAmmo",
      "setVehicleAmmoDef",
      "setVehicleArmor",
      "setVehicleCargo",
      "setVehicleId",
      "setVehicleLock",
      "setVehiclePosition",
      "setVehicleRadar",
      "setVehicleReceiveRemoteTargets",
      "setVehicleReportOwnPosition",
      "setVehicleReportRemoteTargets",
      "setVehicleTiPars",
      "setVehicleVarName",
      "setVelocity",
      "setVelocityModelSpace",
      "setVelocityTransformation",
      "setViewDistance",
      "setVisibleIfTreeCollapsed",
      "setWantedRPMRTD",
      "setWaves",
      "setWaypointBehaviour",
      "setWaypointCombatMode",
      "setWaypointCompletionRadius",
      "setWaypointDescription",
      "setWaypointForceBehaviour",
      "setWaypointFormation",
      "setWaypointHousePosition",
      "setWaypointLoiterAltitude",
      "setWaypointLoiterRadius",
      "setWaypointLoiterType",
      "setWaypointName",
      "setWaypointPosition",
      "setWaypointScript",
      "setWaypointSpeed",
      "setWaypointStatements",
      "setWaypointTimeout",
      "setWaypointType",
      "setWaypointVisible",
      "setWeaponReloadingTime",
      "setWeaponZeroing",
      "setWind",
      "setWindDir",
      "setWindForce",
      "setWindStr",
      "setWingForceScaleRTD",
      "setWPPos",
      "show3DIcons",
      "showChat",
      "showCinemaBorder",
      "showCommandingMenu",
      "showCompass",
      "showCuratorCompass",
      "showGps",
      "showHUD",
      "showLegend",
      "showMap",
      "shownArtilleryComputer",
      "shownChat",
      "shownCompass",
      "shownCuratorCompass",
      "showNewEditorObject",
      "shownGps",
      "shownHUD",
      "shownMap",
      "shownPad",
      "shownRadio",
      "shownScoretable",
      "shownSubtitles",
      "shownUAVFeed",
      "shownWarrant",
      "shownWatch",
      "showPad",
      "showRadio",
      "showScoretable",
      "showSubtitles",
      "showUAVFeed",
      "showWarrant",
      "showWatch",
      "showWaypoint",
      "showWaypoints",
      "side",
      "sideChat",
      "sideRadio",
      "simpleTasks",
      "simulationEnabled",
      "simulCloudDensity",
      "simulCloudOcclusion",
      "simulInClouds",
      "simulWeatherSync",
      "sin",
      "size",
      "sizeOf",
      "skill",
      "skillFinal",
      "skipTime",
      "sleep",
      "sliderPosition",
      "sliderRange",
      "sliderSetPosition",
      "sliderSetRange",
      "sliderSetSpeed",
      "sliderSpeed",
      "slingLoadAssistantShown",
      "soldierMagazines",
      "someAmmo",
      "sort",
      "soundVolume",
      "spawn",
      "speaker",
      "speechVolume",
      "speed",
      "speedMode",
      "splitString",
      "sqrt",
      "squadParams",
      "stance",
      "startLoadingScreen",
      "stop",
      "stopEngineRTD",
      "stopped",
      "str",
      "sunOrMoon",
      "supportInfo",
      "suppressFor",
      "surfaceIsWater",
      "surfaceNormal",
      "surfaceTexture",
      "surfaceType",
      "swimInDepth",
      "switchableUnits",
      "switchAction",
      "switchCamera",
      "switchGesture",
      "switchLight",
      "switchMove",
      "synchronizedObjects",
      "synchronizedTriggers",
      "synchronizedWaypoints",
      "synchronizeObjectsAdd",
      "synchronizeObjectsRemove",
      "synchronizeTrigger",
      "synchronizeWaypoint",
      "systemChat",
      "systemOfUnits",
      "systemTime",
      "systemTimeUTC",
      "tan",
      "targetKnowledge",
      "targets",
      "targetsAggregate",
      "targetsQuery",
      "taskAlwaysVisible",
      "taskChildren",
      "taskCompleted",
      "taskCustomData",
      "taskDescription",
      "taskDestination",
      "taskHint",
      "taskMarkerOffset",
      "taskName",
      "taskParent",
      "taskResult",
      "taskState",
      "taskType",
      "teamMember",
      "teamName",
      "teams",
      "teamSwitch",
      "teamSwitchEnabled",
      "teamType",
      "terminate",
      "terrainIntersect",
      "terrainIntersectASL",
      "terrainIntersectAtASL",
      "text",
      "textLog",
      "textLogFormat",
      "tg",
      "time",
      "timeMultiplier",
      "titleCut",
      "titleFadeOut",
      "titleObj",
      "titleRsc",
      "titleText",
      "toArray",
      "toFixed",
      "toLower",
      "toLowerANSI",
      "toString",
      "toUpper",
      "toUpperANSI",
      "triggerActivated",
      "triggerActivation",
      "triggerAmmo",
      "triggerArea",
      "triggerAttachedVehicle",
      "triggerAttachObject",
      "triggerAttachVehicle",
      "triggerDynamicSimulation",
      "triggerInterval",
      "triggerStatements",
      "triggerText",
      "triggerTimeout",
      "triggerTimeoutCurrent",
      "triggerType",
      "trim",
      "turretLocal",
      "turretOwner",
      "turretUnit",
      "tvAdd",
      "tvClear",
      "tvCollapse",
      "tvCollapseAll",
      "tvCount",
      "tvCurSel",
      "tvData",
      "tvDelete",
      "tvExpand",
      "tvExpandAll",
      "tvIsSelected",
      "tvPicture",
      "tvPictureRight",
      "tvSelection",
      "tvSetColor",
      "tvSetCurSel",
      "tvSetData",
      "tvSetPicture",
      "tvSetPictureColor",
      "tvSetPictureColorDisabled",
      "tvSetPictureColorSelected",
      "tvSetPictureRight",
      "tvSetPictureRightColor",
      "tvSetPictureRightColorDisabled",
      "tvSetPictureRightColorSelected",
      "tvSetSelectColor",
      "tvSetSelected",
      "tvSetText",
      "tvSetTooltip",
      "tvSetValue",
      "tvSort",
      "tvSortAll",
      "tvSortByValue",
      "tvSortByValueAll",
      "tvText",
      "tvTooltip",
      "tvValue",
      "type",
      "typeName",
      "typeOf",
      "UAVControl",
      "uiNamespace",
      "uiSleep",
      "unassignCurator",
      "unassignItem",
      "unassignTeam",
      "unassignVehicle",
      "underwater",
      "uniform",
      "uniformContainer",
      "uniformItems",
      "uniformMagazines",
      "uniqueUnitItems",
      "unitAddons",
      "unitAimPosition",
      "unitAimPositionVisual",
      "unitBackpack",
      "unitCombatMode",
      "unitIsUAV",
      "unitPos",
      "unitReady",
      "unitRecoilCoefficient",
      "units",
      "unitsBelowHeight",
      "unitTurret",
      "unlinkItem",
      "unlockAchievement",
      "unregisterTask",
      "updateDrawIcon",
      "updateMenuItem",
      "updateObjectTree",
      "useAIOperMapObstructionTest",
      "useAISteeringComponent",
      "useAudioTimeForMoves",
      "userInputDisabled",
      "values",
      "vectorAdd",
      "vectorCos",
      "vectorCrossProduct",
      "vectorDiff",
      "vectorDir",
      "vectorDirVisual",
      "vectorDistance",
      "vectorDistanceSqr",
      "vectorDotProduct",
      "vectorFromTo",
      "vectorLinearConversion",
      "vectorMagnitude",
      "vectorMagnitudeSqr",
      "vectorModelToWorld",
      "vectorModelToWorldVisual",
      "vectorMultiply",
      "vectorNormalized",
      "vectorUp",
      "vectorUpVisual",
      "vectorWorldToModel",
      "vectorWorldToModelVisual",
      "vehicle",
      "vehicleCargoEnabled",
      "vehicleChat",
      "vehicleMoveInfo",
      "vehicleRadio",
      "vehicleReceiveRemoteTargets",
      "vehicleReportOwnPosition",
      "vehicleReportRemoteTargets",
      "vehicles",
      "vehicleVarName",
      "velocity",
      "velocityModelSpace",
      "verifySignature",
      "vest",
      "vestContainer",
      "vestItems",
      "vestMagazines",
      "viewDistance",
      "visibleCompass",
      "visibleGps",
      "visibleMap",
      "visiblePosition",
      "visiblePositionASL",
      "visibleScoretable",
      "visibleWatch",
      "waves",
      "waypointAttachedObject",
      "waypointAttachedVehicle",
      "waypointAttachObject",
      "waypointAttachVehicle",
      "waypointBehaviour",
      "waypointCombatMode",
      "waypointCompletionRadius",
      "waypointDescription",
      "waypointForceBehaviour",
      "waypointFormation",
      "waypointHousePosition",
      "waypointLoiterAltitude",
      "waypointLoiterRadius",
      "waypointLoiterType",
      "waypointName",
      "waypointPosition",
      "waypoints",
      "waypointScript",
      "waypointsEnabledUAV",
      "waypointShow",
      "waypointSpeed",
      "waypointStatements",
      "waypointTimeout",
      "waypointTimeoutCurrent",
      "waypointType",
      "waypointVisible",
      "weaponAccessories",
      "weaponAccessoriesCargo",
      "weaponCargo",
      "weaponDirection",
      "weaponInertia",
      "weaponLowered",
      "weaponReloadingTime",
      "weapons",
      "weaponsInfo",
      "weaponsItems",
      "weaponsItemsCargo",
      "weaponState",
      "weaponsTurret",
      "weightRTD",
      "WFSideText",
      "wind",
      "windDir",
      "windRTD",
      "windStr",
      "wingsForcesRTD",
      "worldName",
      "worldSize",
      "worldToModel",
      "worldToModelVisual",
      "worldToScreen"
    ];
    const PREPROCESSOR = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: "define undef ifdef ifndef else endif include if",
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        hljs.inherit(STRINGS2, { className: "string" }),
        {
          begin: /<[^\n>]*>/,
          end: /$/,
          illegal: "\\n"
        },
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
    return {
      name: "SQF",
      case_insensitive: true,
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_IN,
        literal: LITERAL
      },
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.NUMBER_MODE,
        VARIABLE,
        FUNCTION,
        STRINGS2,
        PREPROCESSOR
      ],
      illegal: [
        //$ is only valid when used with Hex numbers (e.g. $FF)
        /\$[^a-fA-F0-9]/,
        /\w\$/,
        /\?/,
        //There's no ? in SQF
        /@/,
        //There's no @ in SQF
        // Brute-force-fixing the build error. See https://github.com/highlightjs/highlight.js/pull/3193#issuecomment-843088729
        / \| /,
        // . is only used in numbers
        /[a-zA-Z_]\./,
        /\:\=/,
        /\[\:/
      ]
    };
  }
  function stan(hljs) {
    const regex = hljs.regex;
    const BLOCKS = [
      "functions",
      "model",
      "data",
      "parameters",
      "quantities",
      "transformed",
      "generated"
    ];
    const STATEMENTS = [
      "for",
      "in",
      "if",
      "else",
      "while",
      "break",
      "continue",
      "return"
    ];
    const TYPES2 = [
      "array",
      "tuple",
      "complex",
      "int",
      "real",
      "vector",
      "complex_vector",
      "ordered",
      "positive_ordered",
      "simplex",
      "unit_vector",
      "row_vector",
      "complex_row_vector",
      "matrix",
      "complex_matrix",
      "cholesky_factor_corr|10",
      "cholesky_factor_cov|10",
      "corr_matrix|10",
      "cov_matrix|10",
      "void"
    ];
    const FUNCTIONS = [
      "abs",
      "acos",
      "acosh",
      "add_diag",
      "algebra_solver",
      "algebra_solver_newton",
      "append_array",
      "append_col",
      "append_row",
      "asin",
      "asinh",
      "atan",
      "atan2",
      "atanh",
      "bessel_first_kind",
      "bessel_second_kind",
      "binary_log_loss",
      "block",
      "cbrt",
      "ceil",
      "chol2inv",
      "cholesky_decompose",
      "choose",
      "col",
      "cols",
      "columns_dot_product",
      "columns_dot_self",
      "complex_schur_decompose",
      "complex_schur_decompose_t",
      "complex_schur_decompose_u",
      "conj",
      "cos",
      "cosh",
      "cov_exp_quad",
      "crossprod",
      "csr_extract",
      "csr_extract_u",
      "csr_extract_v",
      "csr_extract_w",
      "csr_matrix_times_vector",
      "csr_to_dense_matrix",
      "cumulative_sum",
      "dae",
      "dae_tol",
      "determinant",
      "diag_matrix",
      "diagonal",
      "diag_post_multiply",
      "diag_pre_multiply",
      "digamma",
      "dims",
      "distance",
      "dot_product",
      "dot_self",
      "eigendecompose",
      "eigendecompose_sym",
      "eigenvalues",
      "eigenvalues_sym",
      "eigenvectors",
      "eigenvectors_sym",
      "erf",
      "erfc",
      "exp",
      "exp2",
      "expm1",
      "falling_factorial",
      "fdim",
      "fft",
      "fft2",
      "floor",
      "fma",
      "fmax",
      "fmin",
      "fmod",
      "gamma_p",
      "gamma_q",
      "generalized_inverse",
      "get_imag",
      "get_real",
      "head",
      "hmm_hidden_state_prob",
      "hmm_marginal",
      "hypot",
      "identity_matrix",
      "inc_beta",
      "integrate_1d",
      "integrate_ode",
      "integrate_ode_adams",
      "integrate_ode_bdf",
      "integrate_ode_rk45",
      "int_step",
      "inv",
      "inv_cloglog",
      "inv_erfc",
      "inverse",
      "inverse_spd",
      "inv_fft",
      "inv_fft2",
      "inv_inc_beta",
      "inv_logit",
      "inv_Phi",
      "inv_sqrt",
      "inv_square",
      "is_inf",
      "is_nan",
      "lambert_w0",
      "lambert_wm1",
      "lbeta",
      "lchoose",
      "ldexp",
      "lgamma",
      "linspaced_array",
      "linspaced_int_array",
      "linspaced_row_vector",
      "linspaced_vector",
      "lmgamma",
      "lmultiply",
      "log",
      "log1m",
      "log1m_exp",
      "log1m_inv_logit",
      "log1p",
      "log1p_exp",
      "log_determinant",
      "log_diff_exp",
      "log_falling_factorial",
      "log_inv_logit",
      "log_inv_logit_diff",
      "logit",
      "log_mix",
      "log_modified_bessel_first_kind",
      "log_rising_factorial",
      "log_softmax",
      "log_sum_exp",
      "machine_precision",
      "map_rect",
      "matrix_exp",
      "matrix_exp_multiply",
      "matrix_power",
      "max",
      "mdivide_left_spd",
      "mdivide_left_tri_low",
      "mdivide_right_spd",
      "mdivide_right_tri_low",
      "mean",
      "min",
      "modified_bessel_first_kind",
      "modified_bessel_second_kind",
      "multiply_lower_tri_self_transpose",
      "negative_infinity",
      "norm",
      "norm1",
      "norm2",
      "not_a_number",
      "num_elements",
      "ode_adams",
      "ode_adams_tol",
      "ode_adjoint_tol_ctl",
      "ode_bdf",
      "ode_bdf_tol",
      "ode_ckrk",
      "ode_ckrk_tol",
      "ode_rk45",
      "ode_rk45_tol",
      "one_hot_array",
      "one_hot_int_array",
      "one_hot_row_vector",
      "one_hot_vector",
      "ones_array",
      "ones_int_array",
      "ones_row_vector",
      "ones_vector",
      "owens_t",
      "Phi",
      "Phi_approx",
      "polar",
      "positive_infinity",
      "pow",
      "print",
      "prod",
      "proj",
      "qr",
      "qr_Q",
      "qr_R",
      "qr_thin",
      "qr_thin_Q",
      "qr_thin_R",
      "quad_form",
      "quad_form_diag",
      "quad_form_sym",
      "quantile",
      "rank",
      "reduce_sum",
      "reject",
      "rep_array",
      "rep_matrix",
      "rep_row_vector",
      "rep_vector",
      "reverse",
      "rising_factorial",
      "round",
      "row",
      "rows",
      "rows_dot_product",
      "rows_dot_self",
      "scale_matrix_exp_multiply",
      "sd",
      "segment",
      "sin",
      "singular_values",
      "sinh",
      "size",
      "softmax",
      "sort_asc",
      "sort_desc",
      "sort_indices_asc",
      "sort_indices_desc",
      "sqrt",
      "square",
      "squared_distance",
      "step",
      "sub_col",
      "sub_row",
      "sum",
      "svd",
      "svd_U",
      "svd_V",
      "symmetrize_from_lower_tri",
      "tail",
      "tan",
      "tanh",
      "target",
      "tcrossprod",
      "tgamma",
      "to_array_1d",
      "to_array_2d",
      "to_complex",
      "to_int",
      "to_matrix",
      "to_row_vector",
      "to_vector",
      "trace",
      "trace_gen_quad_form",
      "trace_quad_form",
      "trigamma",
      "trunc",
      "uniform_simplex",
      "variance",
      "zeros_array",
      "zeros_int_array",
      "zeros_row_vector"
    ];
    const DISTRIBUTIONS = [
      "bernoulli",
      "bernoulli_logit",
      "bernoulli_logit_glm",
      "beta",
      "beta_binomial",
      "beta_proportion",
      "binomial",
      "binomial_logit",
      "categorical",
      "categorical_logit",
      "categorical_logit_glm",
      "cauchy",
      "chi_square",
      "dirichlet",
      "discrete_range",
      "double_exponential",
      "exp_mod_normal",
      "exponential",
      "frechet",
      "gamma",
      "gaussian_dlm_obs",
      "gumbel",
      "hmm_latent",
      "hypergeometric",
      "inv_chi_square",
      "inv_gamma",
      "inv_wishart",
      "inv_wishart_cholesky",
      "lkj_corr",
      "lkj_corr_cholesky",
      "logistic",
      "loglogistic",
      "lognormal",
      "multi_gp",
      "multi_gp_cholesky",
      "multinomial",
      "multinomial_logit",
      "multi_normal",
      "multi_normal_cholesky",
      "multi_normal_prec",
      "multi_student_cholesky_t",
      "multi_student_t",
      "multi_student_t_cholesky",
      "neg_binomial",
      "neg_binomial_2",
      "neg_binomial_2_log",
      "neg_binomial_2_log_glm",
      "normal",
      "normal_id_glm",
      "ordered_logistic",
      "ordered_logistic_glm",
      "ordered_probit",
      "pareto",
      "pareto_type_2",
      "poisson",
      "poisson_log",
      "poisson_log_glm",
      "rayleigh",
      "scaled_inv_chi_square",
      "skew_double_exponential",
      "skew_normal",
      "std_normal",
      "std_normal_log",
      "student_t",
      "uniform",
      "von_mises",
      "weibull",
      "wiener",
      "wishart",
      "wishart_cholesky"
    ];
    const BLOCK_COMMENT = hljs.COMMENT(
      /\/\*/,
      /\*\//,
      {
        relevance: 0,
        contains: [
          {
            scope: "doctag",
            match: /@(return|param)/
          }
        ]
      }
    );
    const INCLUDE = {
      scope: "meta",
      begin: /#include\b/,
      end: /$/,
      contains: [
        {
          match: /[a-z][a-z-._]+/,
          scope: "string"
        },
        hljs.C_LINE_COMMENT_MODE
      ]
    };
    const RANGE_CONSTRAINTS = [
      "lower",
      "upper",
      "offset",
      "multiplier"
    ];
    return {
      name: "Stan",
      aliases: ["stanfuncs"],
      keywords: {
        $pattern: hljs.IDENT_RE,
        title: BLOCKS,
        type: TYPES2,
        keyword: STATEMENTS,
        built_in: FUNCTIONS
      },
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        INCLUDE,
        hljs.HASH_COMMENT_MODE,
        BLOCK_COMMENT,
        {
          scope: "built_in",
          match: /\s(pi|e|sqrt2|log2|log10)(?=\()/,
          relevance: 0
        },
        {
          match: regex.concat(/[<,]\s*/, regex.either(...RANGE_CONSTRAINTS), /\s*=/),
          keywords: RANGE_CONSTRAINTS
        },
        {
          scope: "keyword",
          match: /\btarget(?=\s*\+=)/
        },
        {
          // highlights the 'T' in T[,] for only Stan language distributrions
          match: [
            /~\s*/,
            regex.either(...DISTRIBUTIONS),
            /(?:\(\))/,
            /\s*T(?=\s*\[)/
          ],
          scope: {
            2: "built_in",
            4: "keyword"
          }
        },
        {
          // highlights distributions that end with special endings
          scope: "built_in",
          keywords: DISTRIBUTIONS,
          begin: regex.concat(/\w*/, regex.either(...DISTRIBUTIONS), /(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\s*[\(.*\)])/)
        },
        {
          // highlights distributions after ~
          begin: [
            /~/,
            /\s*/,
            regex.concat(regex.either(...DISTRIBUTIONS), /(?=\s*[\(.*\)])/)
          ],
          scope: { 3: "built_in" }
        },
        {
          // highlights user defined distributions after ~
          begin: [
            /~/,
            /\s*\w+(?=\s*[\(.*\)])/,
            "(?!.*/\b(" + regex.either(...DISTRIBUTIONS) + ")\b)"
          ],
          scope: { 2: "title.function" }
        },
        {
          // highlights user defined distributions with special endings
          scope: "title.function",
          begin: /\w*(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\s*[\(.*\)])/
        },
        {
          scope: "number",
          match: regex.concat(
            // Comes from @RunDevelopment accessed 11/29/2021 at
            // https://github.com/PrismJS/prism/blob/c53ad2e65b7193ab4f03a1797506a54bbb33d5a2/components/prism-stan.js#L56
            // start of big noncapture group which
            // 1. gets numbers that are by themselves
            // 2. numbers that are separated by _
            // 3. numbers that are separted by .
            /(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)/,
            // grabs scientific notation
            // grabs complex numbers with i
            /(?:[eE][+-]?\d+(?:_\d+)*)?i?(?!\w)/
          ),
          relevance: 0
        },
        {
          scope: "string",
          begin: /"/,
          end: /"/
        }
      ]
    };
  }
  function stata(hljs) {
    return {
      name: "Stata",
      aliases: [
        "do",
        "ado"
      ],
      case_insensitive: true,
      keywords: "if else in foreach for forv forva forval forvalu forvalue forvalues by bys bysort xi quietly qui capture about ac ac_7 acprplot acprplot_7 adjust ado adopath adoupdate alpha ameans an ano anov anova anova_estat anova_terms anovadef aorder ap app appe appen append arch arch_dr arch_estat arch_p archlm areg areg_p args arima arima_dr arima_estat arima_p as asmprobit asmprobit_estat asmprobit_lf asmprobit_mfx__dlg asmprobit_p ass asse asser assert avplot avplot_7 avplots avplots_7 bcskew0 bgodfrey bias binreg bip0_lf biplot bipp_lf bipr_lf bipr_p biprobit bitest bitesti bitowt blogit bmemsize boot bootsamp bootstrap bootstrap_8 boxco_l boxco_p boxcox boxcox_6 boxcox_p bprobit br break brier bro brow brows browse brr brrstat bs bs_7 bsampl_w bsample bsample_7 bsqreg bstat bstat_7 bstat_8 bstrap bstrap_7 bubble bubbleplot ca ca_estat ca_p cabiplot camat canon canon_8 canon_8_p canon_estat canon_p cap caprojection capt captu captur capture cat cc cchart cchart_7 cci cd censobs_table centile cf char chdir checkdlgfiles checkestimationsample checkhlpfiles checksum chelp ci cii cl class classutil clear cli clis clist clo clog clog_lf clog_p clogi clogi_sw clogit clogit_lf clogit_p clogitp clogl_sw cloglog clonevar clslistarray cluster cluster_measures cluster_stop cluster_tree cluster_tree_8 clustermat cmdlog cnr cnre cnreg cnreg_p cnreg_sw cnsreg codebook collaps4 collapse colormult_nb colormult_nw compare compress conf confi confir confirm conren cons const constr constra constrai constrain constraint continue contract copy copyright copysource cor corc corr corr2data corr_anti corr_kmo corr_smc corre correl correla correlat correlate corrgram cou coun count cox cox_p cox_sw coxbase coxhaz coxvar cprplot cprplot_7 crc cret cretu cretur creturn cross cs cscript cscript_log csi ct ct_is ctset ctst_5 ctst_st cttost cumsp cumsp_7 cumul cusum cusum_7 cutil d|0 datasig datasign datasigna datasignat datasignatu datasignatur datasignature datetof db dbeta de dec deco decod decode deff des desc descr descri describ describe destring dfbeta dfgls dfuller di di_g dir dirstats dis discard disp disp_res disp_s displ displa display distinct do doe doed doedi doedit dotplot dotplot_7 dprobit drawnorm drop ds ds_util dstdize duplicates durbina dwstat dydx e|0 ed edi edit egen eivreg emdef en enc enco encod encode eq erase ereg ereg_lf ereg_p ereg_sw ereghet ereghet_glf ereghet_glf_sh ereghet_gp ereghet_ilf ereghet_ilf_sh ereghet_ip eret eretu eretur ereturn err erro error esize est est_cfexist est_cfname est_clickable est_expand est_hold est_table est_unhold est_unholdok estat estat_default estat_summ estat_vce_only esti estimates etodow etof etomdy ex exi exit expand expandcl fac fact facto factor factor_estat factor_p factor_pca_rotated factor_rotate factormat fcast fcast_compute fcast_graph fdades fdadesc fdadescr fdadescri fdadescrib fdadescribe fdasav fdasave fdause fh_st file open file read file close file filefilter fillin find_hlp_file findfile findit findit_7 fit fl fli flis flist for5_0 forest forestplot form forma format fpredict frac_154 frac_adj frac_chk frac_cox frac_ddp frac_dis frac_dv frac_in frac_mun frac_pp frac_pq frac_pv frac_wgt frac_xo fracgen fracplot fracplot_7 fracpoly fracpred fron_ex fron_hn fron_p fron_tn fron_tn2 frontier ftodate ftoe ftomdy ftowdate funnel funnelplot g|0 gamhet_glf gamhet_gp gamhet_ilf gamhet_ip gamma gamma_d2 gamma_p gamma_sw gammahet gdi_hexagon gdi_spokes ge gen gene gener genera generat generate genrank genstd genvmean gettoken gl gladder gladder_7 glim_l01 glim_l02 glim_l03 glim_l04 glim_l05 glim_l06 glim_l07 glim_l08 glim_l09 glim_l10 glim_l11 glim_l12 glim_lf glim_mu glim_nw1 glim_nw2 glim_nw3 glim_p glim_v1 glim_v2 glim_v3 glim_v4 glim_v5 glim_v6 glim_v7 glm glm_6 glm_p glm_sw glmpred glo glob globa global glogit glogit_8 glogit_p gmeans gnbre_lf gnbreg gnbreg_5 gnbreg_p gomp_lf gompe_sw gomper_p gompertz gompertzhet gomphet_glf gomphet_glf_sh gomphet_gp gomphet_ilf gomphet_ilf_sh gomphet_ip gphdot gphpen gphprint gprefs gprobi_p gprobit gprobit_8 gr gr7 gr_copy gr_current gr_db gr_describe gr_dir gr_draw gr_draw_replay gr_drop gr_edit gr_editviewopts gr_example gr_example2 gr_export gr_print gr_qscheme gr_query gr_read gr_rename gr_replay gr_save gr_set gr_setscheme gr_table gr_undo gr_use graph graph7 grebar greigen greigen_7 greigen_8 grmeanby grmeanby_7 gs_fileinfo gs_filetype gs_graphinfo gs_stat gsort gwood h|0 hadimvo hareg hausman haver he heck_d2 heckma_p heckman heckp_lf heckpr_p heckprob hel help hereg hetpr_lf hetpr_p hetprob hettest hexdump hilite hist hist_7 histogram hlogit hlu hmeans hotel hotelling hprobit hreg hsearch icd9 icd9_ff icd9p iis impute imtest inbase include inf infi infil infile infix inp inpu input ins insheet insp inspe inspec inspect integ inten intreg intreg_7 intreg_p intrg2_ll intrg_ll intrg_ll2 ipolate iqreg ir irf irf_create irfm iri is_svy is_svysum isid istdize ivprob_1_lf ivprob_lf ivprobit ivprobit_p ivreg ivreg_footnote ivtob_1_lf ivtob_lf ivtobit ivtobit_p jackknife jacknife jknife jknife_6 jknife_8 jkstat joinby kalarma1 kap kap_3 kapmeier kappa kapwgt kdensity kdensity_7 keep ksm ksmirnov ktau kwallis l|0 la lab labbe labbeplot labe label labelbook ladder levels levelsof leverage lfit lfit_p li lincom line linktest lis list lloghet_glf lloghet_glf_sh lloghet_gp lloghet_ilf lloghet_ilf_sh lloghet_ip llogi_sw llogis_p llogist llogistic llogistichet lnorm_lf lnorm_sw lnorma_p lnormal lnormalhet lnormhet_glf lnormhet_glf_sh lnormhet_gp lnormhet_ilf lnormhet_ilf_sh lnormhet_ip lnskew0 loadingplot loc loca local log logi logis_lf logistic logistic_p logit logit_estat logit_p loglogs logrank loneway lookfor lookup lowess lowess_7 lpredict lrecomp lroc lroc_7 lrtest ls lsens lsens_7 lsens_x lstat ltable ltable_7 ltriang lv lvr2plot lvr2plot_7 m|0 ma mac macr macro makecns man manova manova_estat manova_p manovatest mantel mark markin markout marksample mat mat_capp mat_order mat_put_rr mat_rapp mata mata_clear mata_describe mata_drop mata_matdescribe mata_matsave mata_matuse mata_memory mata_mlib mata_mosave mata_rename mata_which matalabel matcproc matlist matname matr matri matrix matrix_input__dlg matstrik mcc mcci md0_ md1_ md1debug_ md2_ md2debug_ mds mds_estat mds_p mdsconfig mdslong mdsmat mdsshepard mdytoe mdytof me_derd mean means median memory memsize menl meqparse mer merg merge meta mfp mfx mhelp mhodds minbound mixed_ll mixed_ll_reparm mkassert mkdir mkmat mkspline ml ml_5 ml_adjs ml_bhhhs ml_c_d ml_check ml_clear ml_cnt ml_debug ml_defd ml_e0 ml_e0_bfgs ml_e0_cycle ml_e0_dfp ml_e0i ml_e1 ml_e1_bfgs ml_e1_bhhh ml_e1_cycle ml_e1_dfp ml_e2 ml_e2_cycle ml_ebfg0 ml_ebfr0 ml_ebfr1 ml_ebh0q ml_ebhh0 ml_ebhr0 ml_ebr0i ml_ecr0i ml_edfp0 ml_edfr0 ml_edfr1 ml_edr0i ml_eds ml_eer0i ml_egr0i ml_elf ml_elf_bfgs ml_elf_bhhh ml_elf_cycle ml_elf_dfp ml_elfi ml_elfs ml_enr0i ml_enrr0 ml_erdu0 ml_erdu0_bfgs ml_erdu0_bhhh ml_erdu0_bhhhq ml_erdu0_cycle ml_erdu0_dfp ml_erdu0_nrbfgs ml_exde ml_footnote ml_geqnr ml_grad0 ml_graph ml_hbhhh ml_hd0 ml_hold ml_init ml_inv ml_log ml_max ml_mlout ml_mlout_8 ml_model ml_nb0 ml_opt ml_p ml_plot ml_query ml_rdgrd ml_repor ml_s_e ml_score ml_searc ml_technique ml_unhold mleval mlf_ mlmatbysum mlmatsum mlog mlogi mlogit mlogit_footnote mlogit_p mlopts mlsum mlvecsum mnl0_ mor more mov move mprobit mprobit_lf mprobit_p mrdu0_ mrdu1_ mvdecode mvencode mvreg mvreg_estat n|0 nbreg nbreg_al nbreg_lf nbreg_p nbreg_sw nestreg net newey newey_7 newey_p news nl nl_7 nl_9 nl_9_p nl_p nl_p_7 nlcom nlcom_p nlexp2 nlexp2_7 nlexp2a nlexp2a_7 nlexp3 nlexp3_7 nlgom3 nlgom3_7 nlgom4 nlgom4_7 nlinit nllog3 nllog3_7 nllog4 nllog4_7 nlog_rd nlogit nlogit_p nlogitgen nlogittree nlpred no nobreak noi nois noisi noisil noisily note notes notes_dlg nptrend numlabel numlist odbc old_ver olo olog ologi ologi_sw ologit ologit_p ologitp on one onew onewa oneway op_colnm op_comp op_diff op_inv op_str opr opro oprob oprob_sw oprobi oprobi_p oprobit oprobitp opts_exclusive order orthog orthpoly ou out outf outfi outfil outfile outs outsh outshe outshee outsheet ovtest pac pac_7 palette parse parse_dissim pause pca pca_8 pca_display pca_estat pca_p pca_rotate pcamat pchart pchart_7 pchi pchi_7 pcorr pctile pentium pergram pergram_7 permute permute_8 personal peto_st pkcollapse pkcross pkequiv pkexamine pkexamine_7 pkshape pksumm pksumm_7 pl plo plot plugin pnorm pnorm_7 poisgof poiss_lf poiss_sw poisso_p poisson poisson_estat post postclose postfile postutil pperron pr prais prais_e prais_e2 prais_p predict predictnl preserve print pro prob probi probit probit_estat probit_p proc_time procoverlay procrustes procrustes_estat procrustes_p profiler prog progr progra program prop proportion prtest prtesti pwcorr pwd q\\s qby qbys qchi qchi_7 qladder qladder_7 qnorm qnorm_7 qqplot qqplot_7 qreg qreg_c qreg_p qreg_sw qu quadchk quantile quantile_7 que quer query range ranksum ratio rchart rchart_7 rcof recast reclink recode reg reg3 reg3_p regdw regr regre regre_p2 regres regres_p regress regress_estat regriv_p remap ren rena renam rename renpfix repeat replace report reshape restore ret retu retur return rm rmdir robvar roccomp roccomp_7 roccomp_8 rocf_lf rocfit rocfit_8 rocgold rocplot rocplot_7 roctab roctab_7 rolling rologit rologit_p rot rota rotat rotate rotatemat rreg rreg_p ru run runtest rvfplot rvfplot_7 rvpplot rvpplot_7 sa safesum sample sampsi sav save savedresults saveold sc sca scal scala scalar scatter scm_mine sco scob_lf scob_p scobi_sw scobit scor score scoreplot scoreplot_help scree screeplot screeplot_help sdtest sdtesti se search separate seperate serrbar serrbar_7 serset set set_defaults sfrancia sh she shel shell shewhart shewhart_7 signestimationsample signrank signtest simul simul_7 simulate simulate_8 sktest sleep slogit slogit_d2 slogit_p smooth snapspan so sor sort spearman spikeplot spikeplot_7 spikeplt spline_x split sqreg sqreg_p sret sretu sretur sreturn ssc st st_ct st_hc st_hcd st_hcd_sh st_is st_issys st_note st_promo st_set st_show st_smpl st_subid stack statsby statsby_8 stbase stci stci_7 stcox stcox_estat stcox_fr stcox_fr_ll stcox_p stcox_sw stcoxkm stcoxkm_7 stcstat stcurv stcurve stcurve_7 stdes stem stepwise stereg stfill stgen stir stjoin stmc stmh stphplot stphplot_7 stphtest stphtest_7 stptime strate strate_7 streg streg_sw streset sts sts_7 stset stsplit stsum sttocc sttoct stvary stweib su suest suest_8 sum summ summa summar summari summariz summarize sunflower sureg survcurv survsum svar svar_p svmat svy svy_disp svy_dreg svy_est svy_est_7 svy_estat svy_get svy_gnbreg_p svy_head svy_header svy_heckman_p svy_heckprob_p svy_intreg_p svy_ivreg_p svy_logistic_p svy_logit_p svy_mlogit_p svy_nbreg_p svy_ologit_p svy_oprobit_p svy_poisson_p svy_probit_p svy_regress_p svy_sub svy_sub_7 svy_x svy_x_7 svy_x_p svydes svydes_8 svygen svygnbreg svyheckman svyheckprob svyintreg svyintreg_7 svyintrg svyivreg svylc svylog_p svylogit svymarkout svymarkout_8 svymean svymlog svymlogit svynbreg svyolog svyologit svyoprob svyoprobit svyopts svypois svypois_7 svypoisson svyprobit svyprobt svyprop svyprop_7 svyratio svyreg svyreg_p svyregress svyset svyset_7 svyset_8 svytab svytab_7 svytest svytotal sw sw_8 swcnreg swcox swereg swilk swlogis swlogit swologit swoprbt swpois swprobit swqreg swtobit swweib symmetry symmi symplot symplot_7 syntax sysdescribe sysdir sysuse szroeter ta tab tab1 tab2 tab_or tabd tabdi tabdis tabdisp tabi table tabodds tabodds_7 tabstat tabu tabul tabula tabulat tabulate te tempfile tempname tempvar tes test testnl testparm teststd tetrachoric time_it timer tis tob tobi tobit tobit_p tobit_sw token tokeni tokeniz tokenize tostring total translate translator transmap treat_ll treatr_p treatreg trim trimfill trnb_cons trnb_mean trpoiss_d2 trunc_ll truncr_p truncreg tsappend tset tsfill tsline tsline_ex tsreport tsrevar tsrline tsset tssmooth tsunab ttest ttesti tut_chk tut_wait tutorial tw tware_st two twoway twoway__fpfit_serset twoway__function_gen twoway__histogram_gen twoway__ipoint_serset twoway__ipoints_serset twoway__kdensity_gen twoway__lfit_serset twoway__normgen_gen twoway__pci_serset twoway__qfit_serset twoway__scatteri_serset twoway__sunflower_gen twoway_ksm_serset ty typ type typeof u|0 unab unabbrev unabcmd update us use uselabel var var_mkcompanion var_p varbasic varfcast vargranger varirf varirf_add varirf_cgraph varirf_create varirf_ctable varirf_describe varirf_dir varirf_drop varirf_erase varirf_graph varirf_ograph varirf_rename varirf_set varirf_table varlist varlmar varnorm varsoc varstable varstable_w varstable_w2 varwle vce vec vec_fevd vec_mkphi vec_p vec_p_w vecirf_create veclmar veclmar_w vecnorm vecnorm_w vecrank vecstable verinst vers versi versio version view viewsource vif vwls wdatetof webdescribe webseek webuse weib1_lf weib2_lf weib_lf weib_lf0 weibhet_glf weibhet_glf_sh weibhet_glfa weibhet_glfa_sh weibhet_gp weibhet_ilf weibhet_ilf_sh weibhet_ilfa weibhet_ilfa_sh weibhet_ip weibu_sw weibul_p weibull weibull_c weibull_s weibullhet wh whelp whi which whil while wilc_st wilcoxon win wind windo window winexec wntestb wntestb_7 wntestq xchart xchart_7 xcorr xcorr_7 xi xi_6 xmlsav xmlsave xmluse xpose xsh xshe xshel xshell xt_iis xt_tis xtab_p xtabond xtbin_p xtclog xtcloglog xtcloglog_8 xtcloglog_d2 xtcloglog_pa_p xtcloglog_re_p xtcnt_p xtcorr xtdata xtdes xtfront_p xtfrontier xtgee xtgee_elink xtgee_estat xtgee_makeivar xtgee_p xtgee_plink xtgls xtgls_p xthaus xthausman xtht_p xthtaylor xtile xtint_p xtintreg xtintreg_8 xtintreg_d2 xtintreg_p xtivp_1 xtivp_2 xtivreg xtline xtline_ex xtlogit xtlogit_8 xtlogit_d2 xtlogit_fe_p xtlogit_pa_p xtlogit_re_p xtmixed xtmixed_estat xtmixed_p xtnb_fe xtnb_lf xtnbreg xtnbreg_pa_p xtnbreg_refe_p xtpcse xtpcse_p xtpois xtpoisson xtpoisson_d2 xtpoisson_pa_p xtpoisson_refe_p xtpred xtprobit xtprobit_8 xtprobit_d2 xtprobit_re_p xtps_fe xtps_lf xtps_ren xtps_ren_8 xtrar_p xtrc xtrc_p xtrchh xtrefe_p xtreg xtreg_be xtreg_fe xtreg_ml xtreg_pa_p xtreg_re xtregar xtrere_p xtset xtsf_ll xtsf_llti xtsum xttab xttest0 xttobit xttobit_8 xttobit_p xttrans yx yxview__barlike_draw yxview_area_draw yxview_bar_draw yxview_dot_draw yxview_dropline_draw yxview_function_draw yxview_iarrow_draw yxview_ilabels_draw yxview_normal_draw yxview_pcarrow_draw yxview_pcbarrow_draw yxview_pccapsym_draw yxview_pcscatter_draw yxview_pcspike_draw yxview_rarea_draw yxview_rbar_draw yxview_rbarm_draw yxview_rcap_draw yxview_rcapsym_draw yxview_rconnected_draw yxview_rline_draw yxview_rscatter_draw yxview_rspike_draw yxview_spike_draw yxview_sunflower_draw zap_s zinb zinb_llf zinb_plf zip zip_llf zip_p zip_plf zt_ct_5 zt_hc_5 zt_hcd_5 zt_is_5 zt_iss_5 zt_sho_5 zt_smp_5 ztbase_5 ztcox_5 ztdes_5 ztereg_5 ztfill_5 ztgen_5 ztir_5 ztjoin_5 ztnb ztnb_p ztp ztp_p zts_5 ztset_5 ztspli_5 ztsum_5 zttoct_5 ztvary_5 ztweib_5",
      contains: [
        {
          className: "symbol",
          begin: /`[a-zA-Z0-9_]+'/
        },
        {
          className: "variable",
          begin: /\$\{?[a-zA-Z0-9_]+\}?/,
          relevance: 0
        },
        {
          className: "string",
          variants: [
            { begin: '`"[^\r\n]*?"\'' },
            { begin: '"[^\r\n"]*"' }
          ]
        },
        {
          className: "built_in",
          variants: [{ begin: "\\b(abs|acos|asin|atan|atan2|atanh|ceil|cloglog|comb|cos|digamma|exp|floor|invcloglog|invlogit|ln|lnfact|lnfactorial|lngamma|log|log10|max|min|mod|reldif|round|sign|sin|sqrt|sum|tan|tanh|trigamma|trunc|betaden|Binomial|binorm|binormal|chi2|chi2tail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|F|Fden|Ftail|gammaden|gammap|ibeta|invbinomial|invchi2|invchi2tail|invF|invFtail|invgammap|invibeta|invnchi2|invnFtail|invnibeta|invnorm|invnormal|invttail|nbetaden|nchi2|nFden|nFtail|nibeta|norm|normal|normalden|normd|npnchi2|tden|ttail|uniform|abbrev|char|index|indexnot|length|lower|ltrim|match|plural|proper|real|regexm|regexr|regexs|reverse|rtrim|string|strlen|strlower|strltrim|strmatch|strofreal|strpos|strproper|strreverse|strrtrim|strtrim|strupper|subinstr|subinword|substr|trim|upper|word|wordcount|_caller|autocode|byteorder|chop|clip|cond|e|epsdouble|epsfloat|group|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|r|recode|replay|return|s|scalar|d|date|day|dow|doy|halfyear|mdy|month|quarter|week|year|d|daily|dofd|dofh|dofm|dofq|dofw|dofy|h|halfyearly|hofd|m|mofd|monthly|q|qofd|quarterly|tin|twithin|w|weekly|wofd|y|yearly|yh|ym|yofd|yq|yw|cholesky|colnumb|colsof|corr|det|diag|diag0cnt|el|get|hadamard|I|inv|invsym|issym|issymmetric|J|matmissing|matuniform|mreldif|nullmat|rownumb|rowsof|sweep|syminv|trace|vec|vecdiag)(?=\\()" }]
        },
        hljs.COMMENT("^[ 	]*\\*.*$", false),
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
  }
  function step21(hljs) {
    const STEP21_IDENT_RE = "[A-Z_][A-Z0-9_.]*";
    const STEP21_KEYWORDS = {
      $pattern: STEP21_IDENT_RE,
      keyword: [
        "HEADER",
        "ENDSEC",
        "DATA"
      ]
    };
    const STEP21_START = {
      className: "meta",
      begin: "ISO-10303-21;",
      relevance: 10
    };
    const STEP21_CLOSE = {
      className: "meta",
      begin: "END-ISO-10303-21;",
      relevance: 10
    };
    return {
      name: "STEP Part 21",
      aliases: [
        "p21",
        "step",
        "stp"
      ],
      case_insensitive: true,
      // STEP 21 is case insensitive in theory, in practice all non-comments are capitalized.
      keywords: STEP21_KEYWORDS,
      contains: [
        STEP21_START,
        STEP21_CLOSE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.COMMENT("/\\*\\*!", "\\*/"),
        hljs.C_NUMBER_MODE,
        hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
        hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
        {
          className: "string",
          begin: "'",
          end: "'"
        },
        {
          className: "symbol",
          variants: [
            {
              begin: "#",
              end: "\\d+",
              illegal: "\\W"
            }
          ]
        }
      ]
    };
  }
  const MODES$4 = (hljs) => {
    return {
      IMPORTANT: {
        scope: "meta",
        begin: "!important"
      },
      BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
      HEXCOLOR: {
        scope: "number",
        begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
      },
      FUNCTION_DISPATCH: {
        className: "built_in",
        begin: /[\w-]+(?=\()/
      },
      ATTRIBUTE_SELECTOR_MODE: {
        scope: "selector-attr",
        begin: /\[/,
        end: /\]/,
        illegal: "$",
        contains: [
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE
        ]
      },
      CSS_NUMBER_MODE: {
        scope: "number",
        begin: hljs.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
        relevance: 0
      },
      CSS_VARIABLE: {
        className: "attr",
        begin: /--[A-Za-z_][A-Za-z0-9_-]*/
      }
    };
  };
  const HTML_TAGS$3 = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "optgroup",
    "option",
    "p",
    "picture",
    "q",
    "quote",
    "samp",
    "section",
    "select",
    "source",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ];
  const SVG_TAGS$3 = [
    "defs",
    "g",
    "marker",
    "mask",
    "pattern",
    "svg",
    "switch",
    "symbol",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feFlood",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMorphology",
    "feOffset",
    "feSpecularLighting",
    "feTile",
    "feTurbulence",
    "linearGradient",
    "radialGradient",
    "stop",
    "circle",
    "ellipse",
    "image",
    "line",
    "path",
    "polygon",
    "polyline",
    "rect",
    "text",
    "use",
    "textPath",
    "tspan",
    "foreignObject",
    "clipPath"
  ];
  const TAGS$3 = [
    ...HTML_TAGS$3,
    ...SVG_TAGS$3
  ];
  const MEDIA_FEATURES$3 = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    // TODO: find a better solution?
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ].sort().reverse();
  const PSEUDO_CLASSES$3 = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    // dir()
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    // has()
    "host",
    // host or host()
    "host-context",
    // host-context()
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    // is()
    "lang",
    // lang()
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    // not()
    "nth-child",
    // nth-child()
    "nth-col",
    // nth-col()
    "nth-last-child",
    // nth-last-child()
    "nth-last-col",
    // nth-last-col()
    "nth-last-of-type",
    //nth-last-of-type()
    "nth-of-type",
    //nth-of-type()
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
    // where()
  ].sort().reverse();
  const PSEUDO_ELEMENTS$3 = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ].sort().reverse();
  const ATTRIBUTES$3 = [
    "accent-color",
    "align-content",
    "align-items",
    "align-self",
    "alignment-baseline",
    "all",
    "anchor-name",
    "animation",
    "animation-composition",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-range",
    "animation-range-end",
    "animation-range-start",
    "animation-timeline",
    "animation-timing-function",
    "appearance",
    "aspect-ratio",
    "backdrop-filter",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-position-x",
    "background-position-y",
    "background-repeat",
    "background-size",
    "baseline-shift",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-end-end-radius",
    "border-end-start-radius",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-start-end-radius",
    "border-start-start-radius",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-align",
    "box-decoration-break",
    "box-direction",
    "box-flex",
    "box-flex-group",
    "box-lines",
    "box-ordinal-group",
    "box-orient",
    "box-pack",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "color-interpolation",
    "color-interpolation-filters",
    "color-profile",
    "color-rendering",
    "color-scheme",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "contain-intrinsic-block-size",
    "contain-intrinsic-height",
    "contain-intrinsic-inline-size",
    "contain-intrinsic-size",
    "contain-intrinsic-width",
    "container",
    "container-name",
    "container-type",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "counter-set",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "cx",
    "cy",
    "direction",
    "display",
    "dominant-baseline",
    "empty-cells",
    "enable-background",
    "field-sizing",
    "fill",
    "fill-opacity",
    "fill-rule",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flood-color",
    "flood-opacity",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-optical-sizing",
    "font-palette",
    "font-size",
    "font-size-adjust",
    "font-smooth",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-synthesis-position",
    "font-synthesis-small-caps",
    "font-synthesis-style",
    "font-synthesis-weight",
    "font-variant",
    "font-variant-alternates",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-emoji",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "forced-color-adjust",
    "gap",
    "glyph-orientation-horizontal",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphenate-character",
    "hyphenate-limit-chars",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "initial-letter",
    "initial-letter-align",
    "inline-size",
    "inset",
    "inset-area",
    "inset-block",
    "inset-block-end",
    "inset-block-start",
    "inset-inline",
    "inset-inline-end",
    "inset-inline-start",
    "isolation",
    "justify-content",
    "justify-items",
    "justify-self",
    "kerning",
    "left",
    "letter-spacing",
    "lighting-color",
    "line-break",
    "line-height",
    "line-height-step",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "margin-trim",
    "marker",
    "marker-end",
    "marker-mid",
    "marker-start",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "masonry-auto-flow",
    "math-depth",
    "math-shift",
    "math-style",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "offset",
    "offset-anchor",
    "offset-distance",
    "offset-path",
    "offset-position",
    "offset-rotate",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-anchor",
    "overflow-block",
    "overflow-clip-margin",
    "overflow-inline",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "overlay",
    "overscroll-behavior",
    "overscroll-behavior-block",
    "overscroll-behavior-inline",
    "overscroll-behavior-x",
    "overscroll-behavior-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "paint-order",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "place-content",
    "place-items",
    "place-self",
    "pointer-events",
    "position",
    "position-anchor",
    "position-visibility",
    "print-color-adjust",
    "quotes",
    "r",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "rotate",
    "row-gap",
    "ruby-align",
    "ruby-position",
    "scale",
    "scroll-behavior",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scroll-timeline",
    "scroll-timeline-axis",
    "scroll-timeline-name",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "shape-rendering",
    "speak",
    "speak-as",
    "src",
    // @font-face
    "stop-color",
    "stop-opacity",
    "stroke",
    "stroke-dasharray",
    "stroke-dashoffset",
    "stroke-linecap",
    "stroke-linejoin",
    "stroke-miterlimit",
    "stroke-opacity",
    "stroke-width",
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-anchor",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-skip",
    "text-decoration-skip-ink",
    "text-decoration-style",
    "text-decoration-thickness",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-size-adjust",
    "text-transform",
    "text-underline-offset",
    "text-underline-position",
    "text-wrap",
    "text-wrap-mode",
    "text-wrap-style",
    "timeline-scope",
    "top",
    "touch-action",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-behavior",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "translate",
    "unicode-bidi",
    "user-modify",
    "user-select",
    "vector-effect",
    "vertical-align",
    "view-timeline",
    "view-timeline-axis",
    "view-timeline-inset",
    "view-timeline-name",
    "view-transition-name",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "white-space-collapse",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "x",
    "y",
    "z-index",
    "zoom"
  ].sort().reverse();
  function stylus(hljs) {
    const modes = MODES$4(hljs);
    const AT_MODIFIERS = "and or not only";
    const VARIABLE = {
      className: "variable",
      begin: "\\$" + hljs.IDENT_RE
    };
    const AT_KEYWORDS = [
      "charset",
      "css",
      "debug",
      "extend",
      "font-face",
      "for",
      "import",
      "include",
      "keyframes",
      "media",
      "mixin",
      "page",
      "warn",
      "while"
    ];
    const LOOKAHEAD_TAG_END = "(?=[.\\s\\n[:,(])";
    const ILLEGAL = [
      "\\?",
      "(\\bReturn\\b)",
      // monkey
      "(\\bEnd\\b)",
      // monkey
      "(\\bend\\b)",
      // vbscript
      "(\\bdef\\b)",
      // gradle
      ";",
      // a whole lot of languages
      "#\\s",
      // markdown
      "\\*\\s",
      // markdown
      "===\\s",
      // markdown
      "\\|",
      "%"
      // prolog
    ];
    return {
      name: "Stylus",
      aliases: ["styl"],
      case_insensitive: false,
      keywords: "if else for in",
      illegal: "(" + ILLEGAL.join("|") + ")",
      contains: [
        // strings
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        // comments
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        // hex colors
        modes.HEXCOLOR,
        // class tag
        {
          begin: "\\.[a-zA-Z][a-zA-Z0-9_-]*" + LOOKAHEAD_TAG_END,
          className: "selector-class"
        },
        // id tag
        {
          begin: "#[a-zA-Z][a-zA-Z0-9_-]*" + LOOKAHEAD_TAG_END,
          className: "selector-id"
        },
        // tags
        {
          begin: "\\b(" + TAGS$3.join("|") + ")" + LOOKAHEAD_TAG_END,
          className: "selector-tag"
        },
        // psuedo selectors
        {
          className: "selector-pseudo",
          begin: "&?:(" + PSEUDO_CLASSES$3.join("|") + ")" + LOOKAHEAD_TAG_END
        },
        {
          className: "selector-pseudo",
          begin: "&?:(:)?(" + PSEUDO_ELEMENTS$3.join("|") + ")" + LOOKAHEAD_TAG_END
        },
        modes.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "keyword",
          begin: /@media/,
          starts: {
            end: /[{;}]/,
            keywords: {
              $pattern: /[a-z-]+/,
              keyword: AT_MODIFIERS,
              attribute: MEDIA_FEATURES$3.join(" ")
            },
            contains: [modes.CSS_NUMBER_MODE]
          }
        },
        // @ keywords
        {
          className: "keyword",
          begin: "@((-(o|moz|ms|webkit)-)?(" + AT_KEYWORDS.join("|") + "))\\b"
        },
        // variables
        VARIABLE,
        // dimension
        modes.CSS_NUMBER_MODE,
        // functions
        //  - only from beginning of line + whitespace
        {
          className: "function",
          begin: "^[a-zA-Z][a-zA-Z0-9_-]*\\(.*\\)",
          illegal: "[\\n]",
          returnBegin: true,
          contains: [
            {
              className: "title",
              begin: "\\b[a-zA-Z][a-zA-Z0-9_-]*"
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              contains: [
                modes.HEXCOLOR,
                VARIABLE,
                hljs.APOS_STRING_MODE,
                modes.CSS_NUMBER_MODE,
                hljs.QUOTE_STRING_MODE
              ]
            }
          ]
        },
        // css variables
        modes.CSS_VARIABLE,
        // attributes
        //  - only from beginning of line + whitespace
        //  - must have whitespace after it
        {
          className: "attribute",
          begin: "\\b(" + ATTRIBUTES$3.join("|") + ")\\b",
          starts: {
            // value container
            end: /;|$/,
            contains: [
              modes.HEXCOLOR,
              VARIABLE,
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              modes.CSS_NUMBER_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              modes.IMPORTANT,
              modes.FUNCTION_DISPATCH
            ],
            illegal: /\./,
            relevance: 0
          }
        },
        modes.FUNCTION_DISPATCH
      ]
    };
  }
  function subunit(hljs) {
    const DETAILS = {
      className: "string",
      begin: "\\[\n(multipart)?",
      end: "\\]\n"
    };
    const TIME = {
      className: "string",
      begin: "\\d{4}-\\d{2}-\\d{2}(\\s+)\\d{2}:\\d{2}:\\d{2}.\\d+Z"
    };
    const PROGRESSVALUE = {
      className: "string",
      begin: "(\\+|-)\\d+"
    };
    const KEYWORDS2 = {
      className: "keyword",
      relevance: 10,
      variants: [
        { begin: "^(test|testing|success|successful|failure|error|skip|xfail|uxsuccess)(:?)\\s+(test)?" },
        { begin: "^progress(:?)(\\s+)?(pop|push)?" },
        { begin: "^tags:" },
        { begin: "^time:" }
      ]
    };
    return {
      name: "SubUnit",
      case_insensitive: true,
      contains: [
        DETAILS,
        TIME,
        PROGRESSVALUE,
        KEYWORDS2
      ]
    };
  }
  function taggerscript(hljs) {
    const NOOP = {
      className: "comment",
      begin: /\$noop\(/,
      end: /\)/,
      contains: [
        { begin: /\\[()]/ },
        {
          begin: /\(/,
          end: /\)/,
          contains: [
            { begin: /\\[()]/ },
            "self"
          ]
        }
      ],
      relevance: 10
    };
    const FUNCTION = {
      className: "keyword",
      begin: /\$[_a-zA-Z0-9]+(?=\()/
    };
    const VARIABLE = {
      className: "variable",
      begin: /%[_a-zA-Z0-9:]+%/
    };
    const ESCAPE_SEQUENCE_UNICODE = {
      className: "symbol",
      begin: /\\u[a-fA-F0-9]{4}/
    };
    const ESCAPE_SEQUENCE = {
      className: "symbol",
      begin: /\\[\\nt$%,()]/
    };
    return {
      name: "Tagger Script",
      contains: [
        NOOP,
        FUNCTION,
        VARIABLE,
        ESCAPE_SEQUENCE,
        ESCAPE_SEQUENCE_UNICODE
      ]
    };
  }
  function tap(hljs) {
    return {
      name: "Test Anything Protocol",
      case_insensitive: true,
      contains: [
        hljs.HASH_COMMENT_MODE,
        // version of format and total amount of testcases
        {
          className: "meta",
          variants: [
            { begin: "^TAP version (\\d+)$" },
            { begin: "^1\\.\\.(\\d+)$" }
          ]
        },
        // YAML block
        {
          begin: /---$/,
          end: "\\.\\.\\.$",
          subLanguage: "yaml",
          relevance: 0
        },
        // testcase number
        {
          className: "number",
          begin: " (\\d+) "
        },
        // testcase status and description
        {
          className: "symbol",
          variants: [
            { begin: "^ok" },
            { begin: "^not ok" }
          ]
        }
      ]
    };
  }
  function tcl(hljs) {
    const regex = hljs.regex;
    const TCL_IDENT = /[a-zA-Z_][a-zA-Z0-9_]*/;
    const NUMBER = {
      className: "number",
      variants: [
        hljs.BINARY_NUMBER_MODE,
        hljs.C_NUMBER_MODE
      ]
    };
    const KEYWORDS2 = [
      "after",
      "append",
      "apply",
      "array",
      "auto_execok",
      "auto_import",
      "auto_load",
      "auto_mkindex",
      "auto_mkindex_old",
      "auto_qualify",
      "auto_reset",
      "bgerror",
      "binary",
      "break",
      "catch",
      "cd",
      "chan",
      "clock",
      "close",
      "concat",
      "continue",
      "dde",
      "dict",
      "encoding",
      "eof",
      "error",
      "eval",
      "exec",
      "exit",
      "expr",
      "fblocked",
      "fconfigure",
      "fcopy",
      "file",
      "fileevent",
      "filename",
      "flush",
      "for",
      "foreach",
      "format",
      "gets",
      "glob",
      "global",
      "history",
      "http",
      "if",
      "incr",
      "info",
      "interp",
      "join",
      "lappend|10",
      "lassign|10",
      "lindex|10",
      "linsert|10",
      "list",
      "llength|10",
      "load",
      "lrange|10",
      "lrepeat|10",
      "lreplace|10",
      "lreverse|10",
      "lsearch|10",
      "lset|10",
      "lsort|10",
      "mathfunc",
      "mathop",
      "memory",
      "msgcat",
      "namespace",
      "open",
      "package",
      "parray",
      "pid",
      "pkg::create",
      "pkg_mkIndex",
      "platform",
      "platform::shell",
      "proc",
      "puts",
      "pwd",
      "read",
      "refchan",
      "regexp",
      "registry",
      "regsub|10",
      "rename",
      "return",
      "safe",
      "scan",
      "seek",
      "set",
      "socket",
      "source",
      "split",
      "string",
      "subst",
      "switch",
      "tcl_endOfWord",
      "tcl_findLibrary",
      "tcl_startOfNextWord",
      "tcl_startOfPreviousWord",
      "tcl_wordBreakAfter",
      "tcl_wordBreakBefore",
      "tcltest",
      "tclvars",
      "tell",
      "time",
      "tm",
      "trace",
      "unknown",
      "unload",
      "unset",
      "update",
      "uplevel",
      "upvar",
      "variable",
      "vwait",
      "while"
    ];
    return {
      name: "Tcl",
      aliases: ["tk"],
      keywords: KEYWORDS2,
      contains: [
        hljs.COMMENT(";[ \\t]*#", "$"),
        hljs.COMMENT("^[ \\t]*#", "$"),
        {
          beginKeywords: "proc",
          end: "[\\{]",
          excludeEnd: true,
          contains: [
            {
              className: "title",
              begin: "[ \\t\\n\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*",
              end: "[ \\t\\n\\r]",
              endsWithParent: true,
              excludeEnd: true
            }
          ]
        },
        {
          className: "variable",
          variants: [
            { begin: regex.concat(
              /\$/,
              regex.optional(/::/),
              TCL_IDENT,
              "(::",
              TCL_IDENT,
              ")*"
            ) },
            {
              begin: "\\$\\{(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*",
              end: "\\}",
              contains: [NUMBER]
            }
          ]
        },
        {
          className: "string",
          contains: [hljs.BACKSLASH_ESCAPE],
          variants: [hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null })]
        },
        NUMBER
      ]
    };
  }
  function thrift(hljs) {
    const TYPES2 = [
      "bool",
      "byte",
      "i16",
      "i32",
      "i64",
      "double",
      "string",
      "binary"
    ];
    const KEYWORDS2 = [
      "namespace",
      "const",
      "typedef",
      "struct",
      "enum",
      "service",
      "exception",
      "void",
      "oneway",
      "set",
      "list",
      "map",
      "required",
      "optional"
    ];
    return {
      name: "Thrift",
      keywords: {
        keyword: KEYWORDS2,
        type: TYPES2,
        literal: "true false"
      },
      contains: [
        hljs.QUOTE_STRING_MODE,
        hljs.NUMBER_MODE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "class",
          beginKeywords: "struct enum service exception",
          end: /\{/,
          illegal: /\n/,
          contains: [
            hljs.inherit(hljs.TITLE_MODE, {
              // hack: eating everything after the first title
              starts: {
                endsWithParent: true,
                excludeEnd: true
              }
            })
          ]
        },
        {
          begin: "\\b(set|list|map)\\s*<",
          keywords: { type: [
            ...TYPES2,
            "set",
            "list",
            "map"
          ] },
          end: ">",
          contains: ["self"]
        }
      ]
    };
  }
  function tp(hljs) {
    const TPID = {
      className: "number",
      begin: "[1-9][0-9]*",
      /* no leading zeros */
      relevance: 0
    };
    const TPLABEL = {
      className: "symbol",
      begin: ":[^\\]]+"
    };
    const TPDATA = {
      className: "built_in",
      begin: "(AR|P|PAYLOAD|PR|R|SR|RSR|LBL|VR|UALM|MESSAGE|UTOOL|UFRAME|TIMER|TIMER_OVERFLOW|JOINT_MAX_SPEED|RESUME_PROG|DIAG_REC)\\[",
      end: "\\]",
      contains: [
        "self",
        TPID,
        TPLABEL
      ]
    };
    const TPIO = {
      className: "built_in",
      begin: "(AI|AO|DI|DO|F|RI|RO|UI|UO|GI|GO|SI|SO)\\[",
      end: "\\]",
      contains: [
        "self",
        TPID,
        hljs.QUOTE_STRING_MODE,
        /* for pos section at bottom */
        TPLABEL
      ]
    };
    const KEYWORDS2 = [
      "ABORT",
      "ACC",
      "ADJUST",
      "AND",
      "AP_LD",
      "BREAK",
      "CALL",
      "CNT",
      "COL",
      "CONDITION",
      "CONFIG",
      "DA",
      "DB",
      "DIV",
      "DETECT",
      "ELSE",
      "END",
      "ENDFOR",
      "ERR_NUM",
      "ERROR_PROG",
      "FINE",
      "FOR",
      "GP",
      "GUARD",
      "INC",
      "IF",
      "JMP",
      "LINEAR_MAX_SPEED",
      "LOCK",
      "MOD",
      "MONITOR",
      "OFFSET",
      "Offset",
      "OR",
      "OVERRIDE",
      "PAUSE",
      "PREG",
      "PTH",
      "RT_LD",
      "RUN",
      "SELECT",
      "SKIP",
      "Skip",
      "TA",
      "TB",
      "TO",
      "TOOL_OFFSET",
      "Tool_Offset",
      "UF",
      "UT",
      "UFRAME_NUM",
      "UTOOL_NUM",
      "UNLOCK",
      "WAIT",
      "X",
      "Y",
      "Z",
      "W",
      "P",
      "R",
      "STRLEN",
      "SUBSTR",
      "FINDSTR",
      "VOFFSET",
      "PROG",
      "ATTR",
      "MN",
      "POS"
    ];
    const LITERALS2 = [
      "ON",
      "OFF",
      "max_speed",
      "LPOS",
      "JPOS",
      "ENABLE",
      "DISABLE",
      "START",
      "STOP",
      "RESET"
    ];
    return {
      name: "TP",
      keywords: {
        keyword: KEYWORDS2,
        literal: LITERALS2
      },
      contains: [
        TPDATA,
        TPIO,
        {
          className: "keyword",
          begin: "/(PROG|ATTR|MN|POS|END)\\b"
        },
        {
          /* this is for cases like ,CALL */
          className: "keyword",
          begin: "(CALL|RUN|POINT_LOGIC|LBL)\\b"
        },
        {
          /* this is for cases like CNT100 where the default lexemes do not
           * separate the keyword and the number */
          className: "keyword",
          begin: "\\b(ACC|CNT|Skip|Offset|PSPD|RT_LD|AP_LD|Tool_Offset)"
        },
        {
          /* to catch numbers that do not have a word boundary on the left */
          className: "number",
          begin: "\\d+(sec|msec|mm/sec|cm/min|inch/min|deg/sec|mm|in|cm)?\\b",
          relevance: 0
        },
        hljs.COMMENT("//", "[;$]"),
        hljs.COMMENT("!", "[;$]"),
        hljs.COMMENT("--eg:", "$"),
        hljs.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: "'",
          end: "'"
        },
        hljs.C_NUMBER_MODE,
        {
          className: "variable",
          begin: "\\$[A-Za-z0-9_]+"
        }
      ]
    };
  }
  function twig(hljs) {
    const regex = hljs.regex;
    const FUNCTION_NAMES = [
      "absolute_url",
      "asset|0",
      "asset_version",
      "attribute",
      "block",
      "constant",
      "controller|0",
      "country_timezones",
      "csrf_token",
      "cycle",
      "date",
      "dump",
      "expression",
      "form|0",
      "form_end",
      "form_errors",
      "form_help",
      "form_label",
      "form_rest",
      "form_row",
      "form_start",
      "form_widget",
      "html_classes",
      "include",
      "is_granted",
      "logout_path",
      "logout_url",
      "max",
      "min",
      "parent",
      "path|0",
      "random",
      "range",
      "relative_path",
      "render",
      "render_esi",
      "source",
      "template_from_string",
      "url|0"
    ];
    const FILTERS = [
      "abs",
      "abbr_class",
      "abbr_method",
      "batch",
      "capitalize",
      "column",
      "convert_encoding",
      "country_name",
      "currency_name",
      "currency_symbol",
      "data_uri",
      "date",
      "date_modify",
      "default",
      "escape",
      "file_excerpt",
      "file_link",
      "file_relative",
      "filter",
      "first",
      "format",
      "format_args",
      "format_args_as_text",
      "format_currency",
      "format_date",
      "format_datetime",
      "format_file",
      "format_file_from_text",
      "format_number",
      "format_time",
      "html_to_markdown",
      "humanize",
      "inky_to_html",
      "inline_css",
      "join",
      "json_encode",
      "keys",
      "language_name",
      "last",
      "length",
      "locale_name",
      "lower",
      "map",
      "markdown",
      "markdown_to_html",
      "merge",
      "nl2br",
      "number_format",
      "raw",
      "reduce",
      "replace",
      "reverse",
      "round",
      "slice",
      "slug",
      "sort",
      "spaceless",
      "split",
      "striptags",
      "timezone_name",
      "title",
      "trans",
      "transchoice",
      "trim",
      "u|0",
      "upper",
      "url_encode",
      "yaml_dump",
      "yaml_encode"
    ];
    let TAG_NAMES = [
      "apply",
      "autoescape",
      "block",
      "cache",
      "deprecated",
      "do",
      "embed",
      "extends",
      "filter",
      "flush",
      "for",
      "form_theme",
      "from",
      "if",
      "import",
      "include",
      "macro",
      "sandbox",
      "set",
      "stopwatch",
      "trans",
      "trans_default_domain",
      "transchoice",
      "use",
      "verbatim",
      "with"
    ];
    TAG_NAMES = TAG_NAMES.concat(TAG_NAMES.map((t2) => `end${t2}`));
    const STRING = {
      scope: "string",
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        }
      ]
    };
    const NUMBER = {
      scope: "number",
      match: /\d+/
    };
    const PARAMS = {
      begin: /\(/,
      end: /\)/,
      excludeBegin: true,
      excludeEnd: true,
      contains: [
        STRING,
        NUMBER
      ]
    };
    const FUNCTIONS = {
      beginKeywords: FUNCTION_NAMES.join(" "),
      keywords: { name: FUNCTION_NAMES },
      relevance: 0,
      contains: [PARAMS]
    };
    const FILTER = {
      match: /\|(?=[A-Za-z_]+:?)/,
      beginScope: "punctuation",
      relevance: 0,
      contains: [
        {
          match: /[A-Za-z_]+:?/,
          keywords: FILTERS
        }
      ]
    };
    const tagNamed = (tagnames, { relevance }) => {
      return {
        beginScope: {
          1: "template-tag",
          3: "name"
        },
        relevance: relevance || 2,
        endScope: "template-tag",
        begin: [
          /\{%/,
          /\s*/,
          regex.either(...tagnames)
        ],
        end: /%\}/,
        keywords: "in",
        contains: [
          FILTER,
          FUNCTIONS,
          STRING,
          NUMBER
        ]
      };
    };
    const CUSTOM_TAG_RE = /[a-z_]+/;
    const TAG = tagNamed(TAG_NAMES, { relevance: 2 });
    const CUSTOM_TAG = tagNamed([CUSTOM_TAG_RE], { relevance: 1 });
    return {
      name: "Twig",
      aliases: ["craftcms"],
      case_insensitive: true,
      subLanguage: "xml",
      contains: [
        hljs.COMMENT(/\{#/, /#\}/),
        TAG,
        CUSTOM_TAG,
        {
          className: "template-variable",
          begin: /\{\{/,
          end: /\}\}/,
          contains: [
            "self",
            FILTER,
            FUNCTIONS,
            STRING,
            NUMBER
          ]
        }
      ]
    };
  }
  function vala(hljs) {
    return {
      name: "Vala",
      keywords: {
        keyword: (
          // Value types
          "char uchar unichar int uint long ulong short ushort int8 int16 int32 int64 uint8 uint16 uint32 uint64 float double bool struct enum string void weak unowned owned async signal static abstract interface override virtual delegate if while do for foreach else switch case break default return try catch public private protected internal using new this get set const stdout stdin stderr var"
        ),
        built_in: "DBus GLib CCode Gee Object Gtk Posix",
        literal: "false true null"
      },
      contains: [
        {
          className: "class",
          beginKeywords: "class interface namespace",
          end: /\{/,
          excludeEnd: true,
          illegal: "[^,:\\n\\s\\.]",
          contains: [hljs.UNDERSCORE_TITLE_MODE]
        },
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "string",
          begin: '"""',
          end: '"""',
          relevance: 5
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE,
        {
          className: "meta",
          begin: "^#",
          end: "$"
        }
      ]
    };
  }
  function vbscript(hljs) {
    const regex = hljs.regex;
    const BUILT_IN_FUNCTIONS = [
      "lcase",
      "month",
      "vartype",
      "instrrev",
      "ubound",
      "setlocale",
      "getobject",
      "rgb",
      "getref",
      "string",
      "weekdayname",
      "rnd",
      "dateadd",
      "monthname",
      "now",
      "day",
      "minute",
      "isarray",
      "cbool",
      "round",
      "formatcurrency",
      "conversions",
      "csng",
      "timevalue",
      "second",
      "year",
      "space",
      "abs",
      "clng",
      "timeserial",
      "fixs",
      "len",
      "asc",
      "isempty",
      "maths",
      "dateserial",
      "atn",
      "timer",
      "isobject",
      "filter",
      "weekday",
      "datevalue",
      "ccur",
      "isdate",
      "instr",
      "datediff",
      "formatdatetime",
      "replace",
      "isnull",
      "right",
      "sgn",
      "array",
      "snumeric",
      "log",
      "cdbl",
      "hex",
      "chr",
      "lbound",
      "msgbox",
      "ucase",
      "getlocale",
      "cos",
      "cdate",
      "cbyte",
      "rtrim",
      "join",
      "hour",
      "oct",
      "typename",
      "trim",
      "strcomp",
      "int",
      "createobject",
      "loadpicture",
      "tan",
      "formatnumber",
      "mid",
      "split",
      "cint",
      "sin",
      "datepart",
      "ltrim",
      "sqr",
      "time",
      "derived",
      "eval",
      "date",
      "formatpercent",
      "exp",
      "inputbox",
      "left",
      "ascw",
      "chrw",
      "regexp",
      "cstr",
      "err"
    ];
    const BUILT_IN_OBJECTS = [
      "server",
      "response",
      "request",
      // take no arguments so can be called without ()
      "scriptengine",
      "scriptenginebuildversion",
      "scriptengineminorversion",
      "scriptenginemajorversion"
    ];
    const BUILT_IN_CALL = {
      begin: regex.concat(regex.either(...BUILT_IN_FUNCTIONS), "\\s*\\("),
      // relevance 0 because this is acting as a beginKeywords really
      relevance: 0,
      keywords: { built_in: BUILT_IN_FUNCTIONS }
    };
    const LITERALS2 = [
      "true",
      "false",
      "null",
      "nothing",
      "empty"
    ];
    const KEYWORDS2 = [
      "call",
      "class",
      "const",
      "dim",
      "do",
      "loop",
      "erase",
      "execute",
      "executeglobal",
      "exit",
      "for",
      "each",
      "next",
      "function",
      "if",
      "then",
      "else",
      "on",
      "error",
      "option",
      "explicit",
      "new",
      "private",
      "property",
      "let",
      "get",
      "public",
      "randomize",
      "redim",
      "rem",
      "select",
      "case",
      "set",
      "stop",
      "sub",
      "while",
      "wend",
      "with",
      "end",
      "to",
      "elseif",
      "is",
      "or",
      "xor",
      "and",
      "not",
      "class_initialize",
      "class_terminate",
      "default",
      "preserve",
      "in",
      "me",
      "byval",
      "byref",
      "step",
      "resume",
      "goto"
    ];
    return {
      name: "VBScript",
      aliases: ["vbs"],
      case_insensitive: true,
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_IN_OBJECTS,
        literal: LITERALS2
      },
      illegal: "//",
      contains: [
        BUILT_IN_CALL,
        hljs.inherit(hljs.QUOTE_STRING_MODE, { contains: [{ begin: '""' }] }),
        hljs.COMMENT(
          /'/,
          /$/,
          { relevance: 0 }
        ),
        hljs.C_NUMBER_MODE
      ]
    };
  }
  function vbscriptHtml(hljs) {
    return {
      name: "VBScript in HTML",
      subLanguage: "xml",
      contains: [
        {
          begin: "<%",
          end: "%>",
          subLanguage: "vbscript"
        }
      ]
    };
  }
  function verilog(hljs) {
    const regex = hljs.regex;
    const KEYWORDS2 = {
      $pattern: /\$?[\w]+(\$[\w]+)*/,
      keyword: [
        "accept_on",
        "alias",
        "always",
        "always_comb",
        "always_ff",
        "always_latch",
        "and",
        "assert",
        "assign",
        "assume",
        "automatic",
        "before",
        "begin",
        "bind",
        "bins",
        "binsof",
        "bit",
        "break",
        "buf|0",
        "bufif0",
        "bufif1",
        "byte",
        "case",
        "casex",
        "casez",
        "cell",
        "chandle",
        "checker",
        "class",
        "clocking",
        "cmos",
        "config",
        "const",
        "constraint",
        "context",
        "continue",
        "cover",
        "covergroup",
        "coverpoint",
        "cross",
        "deassign",
        "default",
        "defparam",
        "design",
        "disable",
        "dist",
        "do",
        "edge",
        "else",
        "end",
        "endcase",
        "endchecker",
        "endclass",
        "endclocking",
        "endconfig",
        "endfunction",
        "endgenerate",
        "endgroup",
        "endinterface",
        "endmodule",
        "endpackage",
        "endprimitive",
        "endprogram",
        "endproperty",
        "endspecify",
        "endsequence",
        "endtable",
        "endtask",
        "enum",
        "event",
        "eventually",
        "expect",
        "export",
        "extends",
        "extern",
        "final",
        "first_match",
        "for",
        "force",
        "foreach",
        "forever",
        "fork",
        "forkjoin",
        "function",
        "generate|5",
        "genvar",
        "global",
        "highz0",
        "highz1",
        "if",
        "iff",
        "ifnone",
        "ignore_bins",
        "illegal_bins",
        "implements",
        "implies",
        "import",
        "incdir",
        "include",
        "initial",
        "inout",
        "input",
        "inside",
        "instance",
        "int",
        "integer",
        "interconnect",
        "interface",
        "intersect",
        "join",
        "join_any",
        "join_none",
        "large",
        "let",
        "liblist",
        "library",
        "local",
        "localparam",
        "logic",
        "longint",
        "macromodule",
        "matches",
        "medium",
        "modport",
        "module",
        "nand",
        "negedge",
        "nettype",
        "new",
        "nexttime",
        "nmos",
        "nor",
        "noshowcancelled",
        "not",
        "notif0",
        "notif1",
        "or",
        "output",
        "package",
        "packed",
        "parameter",
        "pmos",
        "posedge",
        "primitive",
        "priority",
        "program",
        "property",
        "protected",
        "pull0",
        "pull1",
        "pulldown",
        "pullup",
        "pulsestyle_ondetect",
        "pulsestyle_onevent",
        "pure",
        "rand",
        "randc",
        "randcase",
        "randsequence",
        "rcmos",
        "real",
        "realtime",
        "ref",
        "reg",
        "reject_on",
        "release",
        "repeat",
        "restrict",
        "return",
        "rnmos",
        "rpmos",
        "rtran",
        "rtranif0",
        "rtranif1",
        "s_always",
        "s_eventually",
        "s_nexttime",
        "s_until",
        "s_until_with",
        "scalared",
        "sequence",
        "shortint",
        "shortreal",
        "showcancelled",
        "signed",
        "small",
        "soft",
        "solve",
        "specify",
        "specparam",
        "static",
        "string",
        "strong",
        "strong0",
        "strong1",
        "struct",
        "super",
        "supply0",
        "supply1",
        "sync_accept_on",
        "sync_reject_on",
        "table",
        "tagged",
        "task",
        "this",
        "throughout",
        "time",
        "timeprecision",
        "timeunit",
        "tran",
        "tranif0",
        "tranif1",
        "tri",
        "tri0",
        "tri1",
        "triand",
        "trior",
        "trireg",
        "type",
        "typedef",
        "union",
        "unique",
        "unique0",
        "unsigned",
        "until",
        "until_with",
        "untyped",
        "use",
        "uwire",
        "var",
        "vectored",
        "virtual",
        "void",
        "wait",
        "wait_order",
        "wand",
        "weak",
        "weak0",
        "weak1",
        "while",
        "wildcard",
        "wire",
        "with",
        "within",
        "wor",
        "xnor",
        "xor"
      ],
      literal: ["null"],
      built_in: [
        "$finish",
        "$stop",
        "$exit",
        "$fatal",
        "$error",
        "$warning",
        "$info",
        "$realtime",
        "$time",
        "$printtimescale",
        "$bitstoreal",
        "$bitstoshortreal",
        "$itor",
        "$signed",
        "$cast",
        "$bits",
        "$stime",
        "$timeformat",
        "$realtobits",
        "$shortrealtobits",
        "$rtoi",
        "$unsigned",
        "$asserton",
        "$assertkill",
        "$assertpasson",
        "$assertfailon",
        "$assertnonvacuouson",
        "$assertoff",
        "$assertcontrol",
        "$assertpassoff",
        "$assertfailoff",
        "$assertvacuousoff",
        "$isunbounded",
        "$sampled",
        "$fell",
        "$changed",
        "$past_gclk",
        "$fell_gclk",
        "$changed_gclk",
        "$rising_gclk",
        "$steady_gclk",
        "$coverage_control",
        "$coverage_get",
        "$coverage_save",
        "$set_coverage_db_name",
        "$rose",
        "$stable",
        "$past",
        "$rose_gclk",
        "$stable_gclk",
        "$future_gclk",
        "$falling_gclk",
        "$changing_gclk",
        "$display",
        "$coverage_get_max",
        "$coverage_merge",
        "$get_coverage",
        "$load_coverage_db",
        "$typename",
        "$unpacked_dimensions",
        "$left",
        "$low",
        "$increment",
        "$clog2",
        "$ln",
        "$log10",
        "$exp",
        "$sqrt",
        "$pow",
        "$floor",
        "$ceil",
        "$sin",
        "$cos",
        "$tan",
        "$countbits",
        "$onehot",
        "$isunknown",
        "$fatal",
        "$warning",
        "$dimensions",
        "$right",
        "$high",
        "$size",
        "$asin",
        "$acos",
        "$atan",
        "$atan2",
        "$hypot",
        "$sinh",
        "$cosh",
        "$tanh",
        "$asinh",
        "$acosh",
        "$atanh",
        "$countones",
        "$onehot0",
        "$error",
        "$info",
        "$random",
        "$dist_chi_square",
        "$dist_erlang",
        "$dist_exponential",
        "$dist_normal",
        "$dist_poisson",
        "$dist_t",
        "$dist_uniform",
        "$q_initialize",
        "$q_remove",
        "$q_exam",
        "$async$and$array",
        "$async$nand$array",
        "$async$or$array",
        "$async$nor$array",
        "$sync$and$array",
        "$sync$nand$array",
        "$sync$or$array",
        "$sync$nor$array",
        "$q_add",
        "$q_full",
        "$psprintf",
        "$async$and$plane",
        "$async$nand$plane",
        "$async$or$plane",
        "$async$nor$plane",
        "$sync$and$plane",
        "$sync$nand$plane",
        "$sync$or$plane",
        "$sync$nor$plane",
        "$system",
        "$display",
        "$displayb",
        "$displayh",
        "$displayo",
        "$strobe",
        "$strobeb",
        "$strobeh",
        "$strobeo",
        "$write",
        "$readmemb",
        "$readmemh",
        "$writememh",
        "$value$plusargs",
        "$dumpvars",
        "$dumpon",
        "$dumplimit",
        "$dumpports",
        "$dumpportson",
        "$dumpportslimit",
        "$writeb",
        "$writeh",
        "$writeo",
        "$monitor",
        "$monitorb",
        "$monitorh",
        "$monitoro",
        "$writememb",
        "$dumpfile",
        "$dumpoff",
        "$dumpall",
        "$dumpflush",
        "$dumpportsoff",
        "$dumpportsall",
        "$dumpportsflush",
        "$fclose",
        "$fdisplay",
        "$fdisplayb",
        "$fdisplayh",
        "$fdisplayo",
        "$fstrobe",
        "$fstrobeb",
        "$fstrobeh",
        "$fstrobeo",
        "$swrite",
        "$swriteb",
        "$swriteh",
        "$swriteo",
        "$fscanf",
        "$fread",
        "$fseek",
        "$fflush",
        "$feof",
        "$fopen",
        "$fwrite",
        "$fwriteb",
        "$fwriteh",
        "$fwriteo",
        "$fmonitor",
        "$fmonitorb",
        "$fmonitorh",
        "$fmonitoro",
        "$sformat",
        "$sformatf",
        "$fgetc",
        "$ungetc",
        "$fgets",
        "$sscanf",
        "$rewind",
        "$ftell",
        "$ferror"
      ]
    };
    const BUILT_IN_CONSTANTS = [
      "__FILE__",
      "__LINE__"
    ];
    const DIRECTIVES = [
      "begin_keywords",
      "celldefine",
      "default_nettype",
      "default_decay_time",
      "default_trireg_strength",
      "define",
      "delay_mode_distributed",
      "delay_mode_path",
      "delay_mode_unit",
      "delay_mode_zero",
      "else",
      "elsif",
      "end_keywords",
      "endcelldefine",
      "endif",
      "ifdef",
      "ifndef",
      "include",
      "line",
      "nounconnected_drive",
      "pragma",
      "resetall",
      "timescale",
      "unconnected_drive",
      "undef",
      "undefineall"
    ];
    return {
      name: "Verilog",
      aliases: [
        "v",
        "sv",
        "svh"
      ],
      case_insensitive: false,
      keywords: KEYWORDS2,
      contains: [
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        {
          scope: "number",
          contains: [hljs.BACKSLASH_ESCAPE],
          variants: [
            { begin: /\b((\d+'([bhodBHOD]))[0-9xzXZa-fA-F_]+)/ },
            { begin: /\B(('([bhodBHOD]))[0-9xzXZa-fA-F_]+)/ },
            {
              // decimal
              begin: /\b[0-9][0-9_]*/,
              relevance: 0
            }
          ]
        },
        /* parameters to instances */
        {
          scope: "variable",
          variants: [
            { begin: "#\\((?!parameter).+\\)" },
            {
              begin: "\\.\\w+",
              relevance: 0
            }
          ]
        },
        {
          scope: "variable.constant",
          match: regex.concat(/`/, regex.either(...BUILT_IN_CONSTANTS))
        },
        {
          scope: "meta",
          begin: regex.concat(/`/, regex.either(...DIRECTIVES)),
          end: /$|\/\/|\/\*/,
          returnEnd: true,
          keywords: DIRECTIVES
        }
      ]
    };
  }
  function vhdl(hljs) {
    const INTEGER_RE = "\\d(_|\\d)*";
    const EXPONENT_RE = "[eE][-+]?" + INTEGER_RE;
    const DECIMAL_LITERAL_RE = INTEGER_RE + "(\\." + INTEGER_RE + ")?(" + EXPONENT_RE + ")?";
    const BASED_INTEGER_RE = "\\w+";
    const BASED_LITERAL_RE = INTEGER_RE + "#" + BASED_INTEGER_RE + "(\\." + BASED_INTEGER_RE + ")?#(" + EXPONENT_RE + ")?";
    const NUMBER_RE2 = "\\b(" + BASED_LITERAL_RE + "|" + DECIMAL_LITERAL_RE + ")";
    const KEYWORDS2 = [
      "abs",
      "access",
      "after",
      "alias",
      "all",
      "and",
      "architecture",
      "array",
      "assert",
      "assume",
      "assume_guarantee",
      "attribute",
      "begin",
      "block",
      "body",
      "buffer",
      "bus",
      "case",
      "component",
      "configuration",
      "constant",
      "context",
      "cover",
      "disconnect",
      "downto",
      "default",
      "else",
      "elsif",
      "end",
      "entity",
      "exit",
      "fairness",
      "file",
      "for",
      "force",
      "function",
      "generate",
      "generic",
      "group",
      "guarded",
      "if",
      "impure",
      "in",
      "inertial",
      "inout",
      "is",
      "label",
      "library",
      "linkage",
      "literal",
      "loop",
      "map",
      "mod",
      "nand",
      "new",
      "next",
      "nor",
      "not",
      "null",
      "of",
      "on",
      "open",
      "or",
      "others",
      "out",
      "package",
      "parameter",
      "port",
      "postponed",
      "procedure",
      "process",
      "property",
      "protected",
      "pure",
      "range",
      "record",
      "register",
      "reject",
      "release",
      "rem",
      "report",
      "restrict",
      "restrict_guarantee",
      "return",
      "rol",
      "ror",
      "select",
      "sequence",
      "severity",
      "shared",
      "signal",
      "sla",
      "sll",
      "sra",
      "srl",
      "strong",
      "subtype",
      "then",
      "to",
      "transport",
      "type",
      "unaffected",
      "units",
      "until",
      "use",
      "variable",
      "view",
      "vmode",
      "vprop",
      "vunit",
      "wait",
      "when",
      "while",
      "with",
      "xnor",
      "xor"
    ];
    const BUILT_INS2 = [
      "boolean",
      "bit",
      "character",
      "integer",
      "time",
      "delay_length",
      "natural",
      "positive",
      "string",
      "bit_vector",
      "file_open_kind",
      "file_open_status",
      "std_logic",
      "std_logic_vector",
      "unsigned",
      "signed",
      "boolean_vector",
      "integer_vector",
      "std_ulogic",
      "std_ulogic_vector",
      "unresolved_unsigned",
      "u_unsigned",
      "unresolved_signed",
      "u_signed",
      "real_vector",
      "time_vector"
    ];
    const LITERALS2 = [
      // severity_level
      "false",
      "true",
      "note",
      "warning",
      "error",
      "failure",
      // textio
      "line",
      "text",
      "side",
      "width"
    ];
    return {
      name: "VHDL",
      case_insensitive: true,
      keywords: {
        keyword: KEYWORDS2,
        built_in: BUILT_INS2,
        literal: LITERALS2
      },
      illegal: /\{/,
      contains: [
        hljs.C_BLOCK_COMMENT_MODE,
        // VHDL-2008 block commenting.
        hljs.COMMENT("--", "$"),
        hljs.QUOTE_STRING_MODE,
        {
          className: "number",
          begin: NUMBER_RE2,
          relevance: 0
        },
        {
          className: "string",
          begin: "'(U|X|0|1|Z|W|L|H|-)'",
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          className: "symbol",
          begin: "'[A-Za-z](_?[A-Za-z0-9])*",
          contains: [hljs.BACKSLASH_ESCAPE]
        }
      ]
    };
  }
  function vim(hljs) {
    return {
      name: "Vim Script",
      keywords: {
        $pattern: /[!#@\w]+/,
        keyword: (
          // express version except: ! & * < = > !! # @ @@
          "N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank"
        ),
        built_in: (
          // built in func
          "synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv complete_check add getwinposx getqflist getwinposy screencol clearmatches empty extend getcmdpos mzeval garbagecollect setreg ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable shiftwidth max sinh isdirectory synID system inputrestore winline atan visualmode inputlist tabpagewinnr round getregtype mapcheck hasmapto histdel argidx findfile sha256 exists toupper getcmdline taglist string getmatches bufnr strftime winwidth bufexists strtrans tabpagebuflist setcmdpos remote_read printf setloclist getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval resolve libcallnr foldclosedend reverse filter has_key bufname str2float strlen setline getcharmod setbufvar index searchpos shellescape undofile foldclosed setqflist buflisted strchars str2nr virtcol floor remove undotree remote_expr winheight gettabwinvar reltime cursor tabpagenr finddir localtime acos getloclist search tanh matchend rename gettabvar strdisplaywidth type abs py3eval setwinvar tolower wildmenumode log10 spellsuggest bufloaded synconcealed nextnonblank server2client complete settabwinvar executable input wincol setmatches getftype hlID inputsave searchpair or screenrow line settabvar histadd deepcopy strpart remote_peek and eval getftime submatch screenchar winsaveview matchadd mkdir screenattr getfontname libcall reltimestr getfsize winnr invert pow getbufline byte2line soundfold repeat fnameescape tagfiles sin strwidth spellbadword trunc maparg log lispindent hostname setpos globpath remote_foreground getchar synIDattr fnamemodify cscope_connection stridx winbufnr indent min complete_add nr2char searchpairpos inputdialog values matchlist items hlexists strridx browsedir expand fmod pathshorten line2byte argc count getwinvar glob foldtextresult getreg foreground cosh matchdelete has char2nr simplify histget searchdecl iconv winrestcmd pumvisible writefile foldlevel haslocaldir keys cos matchstr foldtext histnr tan tempname getcwd byteidx getbufvar islocked escape eventhandler remote_send serverlist winrestview synstack pyeval prevnonblank readfile cindent filereadable changenr exp"
        )
      },
      illegal: /;/,
      contains: [
        hljs.NUMBER_MODE,
        {
          className: "string",
          begin: "'",
          end: "'",
          illegal: "\\n"
        },
        /*
                A double quote can start either a string or a line comment. Strings are
                ended before the end of a line by another double quote and can contain
                escaped double-quotes and post-escaped line breaks.
        
                Also, any double quote at the beginning of a line is a comment but we
                don't handle that properly at the moment: any double quote inside will
                turn them into a string. Handling it properly will require a smarter
                parser.
                */
        {
          className: "string",
          begin: /"(\\"|\n\\|[^"\n])*"/
        },
        hljs.COMMENT('"', "$"),
        {
          className: "variable",
          begin: /[bwtglsav]:[\w\d_]+/
        },
        {
          begin: [
            /\b(?:function|function!)/,
            /\s+/,
            hljs.IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title"
          },
          end: "$",
          relevance: 0,
          contains: [
            {
              className: "params",
              begin: "\\(",
              end: "\\)"
            }
          ]
        },
        {
          className: "symbol",
          begin: /<[\w-]+>/
        }
      ]
    };
  }
  function wren(hljs) {
    const regex = hljs.regex;
    const IDENT_RE2 = /[a-zA-Z]\w*/;
    const KEYWORDS2 = [
      "as",
      "break",
      "class",
      "construct",
      "continue",
      "else",
      "for",
      "foreign",
      "if",
      "import",
      "in",
      "is",
      "return",
      "static",
      "var",
      "while"
    ];
    const LITERALS2 = [
      "true",
      "false",
      "null"
    ];
    const LANGUAGE_VARS = [
      "this",
      "super"
    ];
    const CORE_CLASSES = [
      "Bool",
      "Class",
      "Fiber",
      "Fn",
      "List",
      "Map",
      "Null",
      "Num",
      "Object",
      "Range",
      "Sequence",
      "String",
      "System"
    ];
    const OPERATORS = [
      "-",
      "~",
      /\*/,
      "%",
      /\.\.\./,
      /\.\./,
      /\+/,
      "<<",
      ">>",
      ">=",
      "<=",
      "<",
      ">",
      /\^/,
      /!=/,
      /!/,
      /\bis\b/,
      "==",
      "&&",
      "&",
      /\|\|/,
      /\|/,
      /\?:/,
      "="
    ];
    const FUNCTION = {
      relevance: 0,
      match: regex.concat(/\b(?!(if|while|for|else|super)\b)/, IDENT_RE2, /(?=\s*[({])/),
      className: "title.function"
    };
    const FUNCTION_DEFINITION = {
      match: regex.concat(
        regex.either(
          regex.concat(/\b(?!(if|while|for|else|super)\b)/, IDENT_RE2),
          regex.either(...OPERATORS)
        ),
        /(?=\s*\([^)]+\)\s*\{)/
      ),
      className: "title.function",
      starts: { contains: [
        {
          begin: /\(/,
          end: /\)/,
          contains: [
            {
              relevance: 0,
              scope: "params",
              match: IDENT_RE2
            }
          ]
        }
      ] }
    };
    const CLASS_DEFINITION = {
      variants: [
        { match: [
          /class\s+/,
          IDENT_RE2,
          /\s+is\s+/,
          IDENT_RE2
        ] },
        { match: [
          /class\s+/,
          IDENT_RE2
        ] }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: KEYWORDS2
    };
    const OPERATOR = {
      relevance: 0,
      match: regex.either(...OPERATORS),
      className: "operator"
    };
    const TRIPLE_STRING = {
      className: "string",
      begin: /"""/,
      end: /"""/
    };
    const PROPERTY = {
      className: "property",
      begin: regex.concat(/\./, regex.lookahead(IDENT_RE2)),
      end: IDENT_RE2,
      excludeBegin: true,
      relevance: 0
    };
    const FIELD = {
      relevance: 0,
      match: regex.concat(/\b_/, IDENT_RE2),
      scope: "variable"
    };
    const CLASS_REFERENCE = {
      relevance: 0,
      match: /\b[A-Z]+[a-z]+([A-Z]+[a-z]+)*/,
      scope: "title.class",
      keywords: { _: CORE_CLASSES }
    };
    const NUMBER = hljs.C_NUMBER_MODE;
    const SETTER = {
      match: [
        IDENT_RE2,
        /\s*/,
        /=/,
        /\s*/,
        /\(/,
        IDENT_RE2,
        /\)\s*\{/
      ],
      scope: {
        1: "title.function",
        3: "operator",
        6: "params"
      }
    };
    const COMMENT_DOCS = hljs.COMMENT(
      /\/\*\*/,
      /\*\//,
      { contains: [
        {
          match: /@[a-z]+/,
          scope: "doctag"
        },
        "self"
      ] }
    );
    const SUBST = {
      scope: "subst",
      begin: /%\(/,
      end: /\)/,
      contains: [
        NUMBER,
        CLASS_REFERENCE,
        FUNCTION,
        FIELD,
        OPERATOR
      ]
    };
    const STRING = {
      scope: "string",
      begin: /"/,
      end: /"/,
      contains: [
        SUBST,
        {
          scope: "char.escape",
          variants: [
            { match: /\\\\|\\["0%abefnrtv]/ },
            { match: /\\x[0-9A-F]{2}/ },
            { match: /\\u[0-9A-F]{4}/ },
            { match: /\\U[0-9A-F]{8}/ }
          ]
        }
      ]
    };
    SUBST.contains.push(STRING);
    const ALL_KWS = [
      ...KEYWORDS2,
      ...LANGUAGE_VARS,
      ...LITERALS2
    ];
    const VARIABLE = {
      relevance: 0,
      match: regex.concat(
        "\\b(?!",
        ALL_KWS.join("|"),
        "\\b)",
        /[a-zA-Z_]\w*(?:[?!]|\b)/
      ),
      className: "variable"
    };
    const ATTRIBUTE = {
      // scope: "meta",
      scope: "comment",
      variants: [
        {
          begin: [
            /#!?/,
            /[A-Za-z_]+(?=\()/
          ],
          beginScope: {
            // 2: "attr"
          },
          keywords: { literal: LITERALS2 },
          contains: [
            // NUMBER,
            // VARIABLE
          ],
          end: /\)/
        },
        {
          begin: [
            /#!?/,
            /[A-Za-z_]+/
          ],
          beginScope: {
            // 2: "attr"
          },
          end: /$/
        }
      ]
    };
    return {
      name: "Wren",
      keywords: {
        keyword: KEYWORDS2,
        "variable.language": LANGUAGE_VARS,
        literal: LITERALS2
      },
      contains: [
        ATTRIBUTE,
        NUMBER,
        STRING,
        TRIPLE_STRING,
        COMMENT_DOCS,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        CLASS_REFERENCE,
        CLASS_DEFINITION,
        SETTER,
        FUNCTION_DEFINITION,
        FUNCTION,
        OPERATOR,
        FIELD,
        PROPERTY,
        VARIABLE
      ]
    };
  }
  function x86asm(hljs) {
    return {
      name: "Intel x86 Assembly",
      case_insensitive: true,
      keywords: {
        $pattern: "[.%]?" + hljs.IDENT_RE,
        keyword: "lock rep repe repz repne repnz xaquire xrelease bnd nobnd aaa aad aam aas adc add and arpl bb0_reset bb1_reset bound bsf bsr bswap bt btc btr bts call cbw cdq cdqe clc cld cli clts cmc cmp cmpsb cmpsd cmpsq cmpsw cmpxchg cmpxchg486 cmpxchg8b cmpxchg16b cpuid cpu_read cpu_write cqo cwd cwde daa das dec div dmint emms enter equ f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr fdivrp femms feni ffree ffreep fiadd ficom ficomp fidiv fidivr fild fimul fincstp finit fist fistp fisttp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave fnstcw fnstenv fnstsw fpatan fprem fprem1 fptan frndint frstor fsave fscale fsetpm fsin fsincos fsqrt fst fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomi fucomip fucomp fucompp fxam fxch fxtract fyl2x fyl2xp1 hlt ibts icebp idiv imul in inc incbin insb insd insw int int01 int1 int03 int3 into invd invpcid invlpg invlpga iret iretd iretq iretw jcxz jecxz jrcxz jmp jmpe lahf lar lds lea leave les lfence lfs lgdt lgs lidt lldt lmsw loadall loadall286 lodsb lodsd lodsq lodsw loop loope loopne loopnz loopz lsl lss ltr mfence monitor mov movd movq movsb movsd movsq movsw movsx movsxd movzx mul mwait neg nop not or out outsb outsd outsw packssdw packsswb packuswb paddb paddd paddsb paddsiw paddsw paddusb paddusw paddw pand pandn pause paveb pavgusb pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pdistib pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pmachriw pmaddwd pmagw pmulhriw pmulhrwa pmulhrwc pmulhw pmullw pmvgezb pmvlzb pmvnzb pmvzb pop popa popad popaw popf popfd popfq popfw por prefetch prefetchw pslld psllq psllw psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsiw psubsw psubusb psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd push pusha pushad pushaw pushf pushfd pushfq pushfw pxor rcl rcr rdshr rdmsr rdpmc rdtsc rdtscp ret retf retn rol ror rdm rsdc rsldt rsm rsts sahf sal salc sar sbb scasb scasd scasq scasw sfence sgdt shl shld shr shrd sidt sldt skinit smi smint smintold smsw stc std sti stosb stosd stosq stosw str sub svdc svldt svts swapgs syscall sysenter sysexit sysret test ud0 ud1 ud2b ud2 ud2a umov verr verw fwait wbinvd wrshr wrmsr xadd xbts xchg xlatb xlat xor cmove cmovz cmovne cmovnz cmova cmovnbe cmovae cmovnb cmovb cmovnae cmovbe cmovna cmovg cmovnle cmovge cmovnl cmovl cmovnge cmovle cmovng cmovc cmovnc cmovo cmovno cmovs cmovns cmovp cmovpe cmovnp cmovpo je jz jne jnz ja jnbe jae jnb jb jnae jbe jna jg jnle jge jnl jl jnge jle jng jc jnc jo jno js jns jpo jnp jpe jp sete setz setne setnz seta setnbe setae setnb setnc setb setnae setcset setbe setna setg setnle setge setnl setl setnge setle setng sets setns seto setno setpe setp setpo setnp addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss cmpordps cmpordss cmpunordps cmpunordss cmpps cmpss comiss cvtpi2ps cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr maxps maxss minps minss movaps movhps movlhps movlps movhlps movmskps movntps movss movups mulps mulss orps rcpps rcpss rsqrtps rsqrtss shufps sqrtps sqrtss stmxcsr subps subss ucomiss unpckhps unpcklps xorps fxrstor fxrstor64 fxsave fxsave64 xgetbv xsetbv xsave xsave64 xsaveopt xsaveopt64 xrstor xrstor64 prefetchnta prefetcht0 prefetcht1 prefetcht2 maskmovq movntq pavgb pavgw pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw psadbw pshufw pf2iw pfnacc pfpnacc pi2fw pswapd maskmovdqu clflush movntdq movnti movntpd movdqa movdqu movdq2q movq2dq paddq pmuludq pshufd pshufhw pshuflw pslldq psrldq psubq punpckhqdq punpcklqdq addpd addsd andnpd andpd cmpeqpd cmpeqsd cmplepd cmplesd cmpltpd cmpltsd cmpneqpd cmpneqsd cmpnlepd cmpnlesd cmpnltpd cmpnltsd cmpordpd cmpordsd cmpunordpd cmpunordsd cmppd comisd cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2pi cvttpd2dq cvttps2dq cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd movmskpd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd subsd ucomisd unpckhpd unpcklpd xorpd addsubpd addsubps haddpd haddps hsubpd hsubps lddqu movddup movshdup movsldup clgi stgi vmcall vmclear vmfunc vmlaunch vmload vmmcall vmptrld vmptrst vmread vmresume vmrun vmsave vmwrite vmxoff vmxon invept invvpid pabsb pabsw pabsd palignr phaddw phaddd phaddsw phsubw phsubd phsubsw pmaddubsw pmulhrsw pshufb psignb psignw psignd extrq insertq movntsd movntss lzcnt blendpd blendps blendvpd blendvps dppd dpps extractps insertps movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd pextrq phminposuw pinsrb pinsrd pinsrq pmaxsb pmaxsd pmaxud pmaxuw pminsb pminsd pminud pminuw pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundpd roundps roundsd roundss crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq popcnt getsec pfrcpv pfrsqrtv movbe aesenc aesenclast aesdec aesdeclast aesimc aeskeygenassist vaesenc vaesenclast vaesdec vaesdeclast vaesimc vaeskeygenassist vaddpd vaddps vaddsd vaddss vaddsubpd vaddsubps vandpd vandps vandnpd vandnps vblendpd vblendps vblendvpd vblendvps vbroadcastss vbroadcastsd vbroadcastf128 vcmpeq_ospd vcmpeqpd vcmplt_ospd vcmpltpd vcmple_ospd vcmplepd vcmpunord_qpd vcmpunordpd vcmpneq_uqpd vcmpneqpd vcmpnlt_uspd vcmpnltpd vcmpnle_uspd vcmpnlepd vcmpord_qpd vcmpordpd vcmpeq_uqpd vcmpnge_uspd vcmpngepd vcmpngt_uspd vcmpngtpd vcmpfalse_oqpd vcmpfalsepd vcmpneq_oqpd vcmpge_ospd vcmpgepd vcmpgt_ospd vcmpgtpd vcmptrue_uqpd vcmptruepd vcmplt_oqpd vcmple_oqpd vcmpunord_spd vcmpneq_uspd vcmpnlt_uqpd vcmpnle_uqpd vcmpord_spd vcmpeq_uspd vcmpnge_uqpd vcmpngt_uqpd vcmpfalse_ospd vcmpneq_ospd vcmpge_oqpd vcmpgt_oqpd vcmptrue_uspd vcmppd vcmpeq_osps vcmpeqps vcmplt_osps vcmpltps vcmple_osps vcmpleps vcmpunord_qps vcmpunordps vcmpneq_uqps vcmpneqps vcmpnlt_usps vcmpnltps vcmpnle_usps vcmpnleps vcmpord_qps vcmpordps vcmpeq_uqps vcmpnge_usps vcmpngeps vcmpngt_usps vcmpngtps vcmpfalse_oqps vcmpfalseps vcmpneq_oqps vcmpge_osps vcmpgeps vcmpgt_osps vcmpgtps vcmptrue_uqps vcmptrueps vcmplt_oqps vcmple_oqps vcmpunord_sps vcmpneq_usps vcmpnlt_uqps vcmpnle_uqps vcmpord_sps vcmpeq_usps vcmpnge_uqps vcmpngt_uqps vcmpfalse_osps vcmpneq_osps vcmpge_oqps vcmpgt_oqps vcmptrue_usps vcmpps vcmpeq_ossd vcmpeqsd vcmplt_ossd vcmpltsd vcmple_ossd vcmplesd vcmpunord_qsd vcmpunordsd vcmpneq_uqsd vcmpneqsd vcmpnlt_ussd vcmpnltsd vcmpnle_ussd vcmpnlesd vcmpord_qsd vcmpordsd vcmpeq_uqsd vcmpnge_ussd vcmpngesd vcmpngt_ussd vcmpngtsd vcmpfalse_oqsd vcmpfalsesd vcmpneq_oqsd vcmpge_ossd vcmpgesd vcmpgt_ossd vcmpgtsd vcmptrue_uqsd vcmptruesd vcmplt_oqsd vcmple_oqsd vcmpunord_ssd vcmpneq_ussd vcmpnlt_uqsd vcmpnle_uqsd vcmpord_ssd vcmpeq_ussd vcmpnge_uqsd vcmpngt_uqsd vcmpfalse_ossd vcmpneq_ossd vcmpge_oqsd vcmpgt_oqsd vcmptrue_ussd vcmpsd vcmpeq_osss vcmpeqss vcmplt_osss vcmpltss vcmple_osss vcmpless vcmpunord_qss vcmpunordss vcmpneq_uqss vcmpneqss vcmpnlt_usss vcmpnltss vcmpnle_usss vcmpnless vcmpord_qss vcmpordss vcmpeq_uqss vcmpnge_usss vcmpngess vcmpngt_usss vcmpngtss vcmpfalse_oqss vcmpfalsess vcmpneq_oqss vcmpge_osss vcmpgess vcmpgt_osss vcmpgtss vcmptrue_uqss vcmptruess vcmplt_oqss vcmple_oqss vcmpunord_sss vcmpneq_usss vcmpnlt_uqss vcmpnle_uqss vcmpord_sss vcmpeq_usss vcmpnge_uqss vcmpngt_uqss vcmpfalse_osss vcmpneq_osss vcmpge_oqss vcmpgt_oqss vcmptrue_usss vcmpss vcomisd vcomiss vcvtdq2pd vcvtdq2ps vcvtpd2dq vcvtpd2ps vcvtps2dq vcvtps2pd vcvtsd2si vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttpd2dq vcvttps2dq vcvttsd2si vcvttss2si vdivpd vdivps vdivsd vdivss vdppd vdpps vextractf128 vextractps vhaddpd vhaddps vhsubpd vhsubps vinsertf128 vinsertps vlddqu vldqqu vldmxcsr vmaskmovdqu vmaskmovps vmaskmovpd vmaxpd vmaxps vmaxsd vmaxss vminpd vminps vminsd vminss vmovapd vmovaps vmovd vmovq vmovddup vmovdqa vmovqqa vmovdqu vmovqqu vmovhlps vmovhpd vmovhps vmovlhps vmovlpd vmovlps vmovmskpd vmovmskps vmovntdq vmovntqq vmovntdqa vmovntpd vmovntps vmovsd vmovshdup vmovsldup vmovss vmovupd vmovups vmpsadbw vmulpd vmulps vmulsd vmulss vorpd vorps vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn vpavgb vpavgw vpblendvb vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq vpermilpd vpermilps vperm2f128 vpextrb vpextrw vpextrd vpextrq vphaddw vphaddd vphaddsw vphminposuw vphsubw vphsubd vphsubsw vpinsrb vpinsrw vpinsrd vpinsrq vpmaddwd vpmaddubsw vpmaxsb vpmaxsw vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss vroundpd vroundps vroundsd vroundss vshufpd vshufps vsqrtpd vsqrtps vsqrtsd vsqrtss vstmxcsr vsubpd vsubps vsubsd vsubss vtestps vtestpd vucomisd vucomiss vunpckhpd vunpckhps vunpcklpd vunpcklps vxorpd vxorps vzeroall vzeroupper pclmullqlqdq pclmulhqlqdq pclmullqhqdq pclmulhqhqdq pclmulqdq vpclmullqlqdq vpclmulhqlqdq vpclmullqhqdq vpclmulhqhqdq vpclmulqdq vfmadd132ps vfmadd132pd vfmadd312ps vfmadd312pd vfmadd213ps vfmadd213pd vfmadd123ps vfmadd123pd vfmadd231ps vfmadd231pd vfmadd321ps vfmadd321pd vfmaddsub132ps vfmaddsub132pd vfmaddsub312ps vfmaddsub312pd vfmaddsub213ps vfmaddsub213pd vfmaddsub123ps vfmaddsub123pd vfmaddsub231ps vfmaddsub231pd vfmaddsub321ps vfmaddsub321pd vfmsub132ps vfmsub132pd vfmsub312ps vfmsub312pd vfmsub213ps vfmsub213pd vfmsub123ps vfmsub123pd vfmsub231ps vfmsub231pd vfmsub321ps vfmsub321pd vfmsubadd132ps vfmsubadd132pd vfmsubadd312ps vfmsubadd312pd vfmsubadd213ps vfmsubadd213pd vfmsubadd123ps vfmsubadd123pd vfmsubadd231ps vfmsubadd231pd vfmsubadd321ps vfmsubadd321pd vfnmadd132ps vfnmadd132pd vfnmadd312ps vfnmadd312pd vfnmadd213ps vfnmadd213pd vfnmadd123ps vfnmadd123pd vfnmadd231ps vfnmadd231pd vfnmadd321ps vfnmadd321pd vfnmsub132ps vfnmsub132pd vfnmsub312ps vfnmsub312pd vfnmsub213ps vfnmsub213pd vfnmsub123ps vfnmsub123pd vfnmsub231ps vfnmsub231pd vfnmsub321ps vfnmsub321pd vfmadd132ss vfmadd132sd vfmadd312ss vfmadd312sd vfmadd213ss vfmadd213sd vfmadd123ss vfmadd123sd vfmadd231ss vfmadd231sd vfmadd321ss vfmadd321sd vfmsub132ss vfmsub132sd vfmsub312ss vfmsub312sd vfmsub213ss vfmsub213sd vfmsub123ss vfmsub123sd vfmsub231ss vfmsub231sd vfmsub321ss vfmsub321sd vfnmadd132ss vfnmadd132sd vfnmadd312ss vfnmadd312sd vfnmadd213ss vfnmadd213sd vfnmadd123ss vfnmadd123sd vfnmadd231ss vfnmadd231sd vfnmadd321ss vfnmadd321sd vfnmsub132ss vfnmsub132sd vfnmsub312ss vfnmsub312sd vfnmsub213ss vfnmsub213sd vfnmsub123ss vfnmsub123sd vfnmsub231ss vfnmsub231sd vfnmsub321ss vfnmsub321sd rdfsbase rdgsbase rdrand wrfsbase wrgsbase vcvtph2ps vcvtps2ph adcx adox rdseed clac stac xstore xcryptecb xcryptcbc xcryptctr xcryptcfb xcryptofb montmul xsha1 xsha256 llwpcb slwpcb lwpval lwpins vfmaddpd vfmaddps vfmaddsd vfmaddss vfmaddsubpd vfmaddsubps vfmsubaddpd vfmsubaddps vfmsubpd vfmsubps vfmsubsd vfmsubss vfnmaddpd vfnmaddps vfnmaddsd vfnmaddss vfnmsubpd vfnmsubps vfnmsubsd vfnmsubss vfrczpd vfrczps vfrczsd vfrczss vpcmov vpcomb vpcomd vpcomq vpcomub vpcomud vpcomuq vpcomuw vpcomw vphaddbd vphaddbq vphaddbw vphadddq vphaddubd vphaddubq vphaddubw vphaddudq vphadduwd vphadduwq vphaddwd vphaddwq vphsubbw vphsubdq vphsubwd vpmacsdd vpmacsdqh vpmacsdql vpmacssdd vpmacssdqh vpmacssdql vpmacsswd vpmacssww vpmacswd vpmacsww vpmadcsswd vpmadcswd vpperm vprotb vprotd vprotq vprotw vpshab vpshad vpshaq vpshaw vpshlb vpshld vpshlq vpshlw vbroadcasti128 vpblendd vpbroadcastb vpbroadcastw vpbroadcastd vpbroadcastq vpermd vpermpd vpermps vpermq vperm2i128 vextracti128 vinserti128 vpmaskmovd vpmaskmovq vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq vgatherdpd vgatherqpd vgatherdps vgatherqps vpgatherdd vpgatherqd vpgatherdq vpgatherqq xabort xbegin xend xtest andn bextr blci blcic blsi blsic blcfill blsfill blcmsk blsmsk blsr blcs bzhi mulx pdep pext rorx sarx shlx shrx tzcnt tzmsk t1mskc valignd valignq vblendmpd vblendmps vbroadcastf32x4 vbroadcastf64x4 vbroadcasti32x4 vbroadcasti64x4 vcompresspd vcompressps vcvtpd2udq vcvtps2udq vcvtsd2usi vcvtss2usi vcvttpd2udq vcvttps2udq vcvttsd2usi vcvttss2usi vcvtudq2pd vcvtudq2ps vcvtusi2sd vcvtusi2ss vexpandpd vexpandps vextractf32x4 vextractf64x4 vextracti32x4 vextracti64x4 vfixupimmpd vfixupimmps vfixupimmsd vfixupimmss vgetexppd vgetexpps vgetexpsd vgetexpss vgetmantpd vgetmantps vgetmantsd vgetmantss vinsertf32x4 vinsertf64x4 vinserti32x4 vinserti64x4 vmovdqa32 vmovdqa64 vmovdqu32 vmovdqu64 vpabsq vpandd vpandnd vpandnq vpandq vpblendmd vpblendmq vpcmpltd vpcmpled vpcmpneqd vpcmpnltd vpcmpnled vpcmpd vpcmpltq vpcmpleq vpcmpneqq vpcmpnltq vpcmpnleq vpcmpq vpcmpequd vpcmpltud vpcmpleud vpcmpnequd vpcmpnltud vpcmpnleud vpcmpud vpcmpequq vpcmpltuq vpcmpleuq vpcmpnequq vpcmpnltuq vpcmpnleuq vpcmpuq vpcompressd vpcompressq vpermi2d vpermi2pd vpermi2ps vpermi2q vpermt2d vpermt2pd vpermt2ps vpermt2q vpexpandd vpexpandq vpmaxsq vpmaxuq vpminsq vpminuq vpmovdb vpmovdw vpmovqb vpmovqd vpmovqw vpmovsdb vpmovsdw vpmovsqb vpmovsqd vpmovsqw vpmovusdb vpmovusdw vpmovusqb vpmovusqd vpmovusqw vpord vporq vprold vprolq vprolvd vprolvq vprord vprorq vprorvd vprorvq vpscatterdd vpscatterdq vpscatterqd vpscatterqq vpsraq vpsravq vpternlogd vpternlogq vptestmd vptestmq vptestnmd vptestnmq vpxord vpxorq vrcp14pd vrcp14ps vrcp14sd vrcp14ss vrndscalepd vrndscaleps vrndscalesd vrndscaless vrsqrt14pd vrsqrt14ps vrsqrt14sd vrsqrt14ss vscalefpd vscalefps vscalefsd vscalefss vscatterdpd vscatterdps vscatterqpd vscatterqps vshuff32x4 vshuff64x2 vshufi32x4 vshufi64x2 kandnw kandw kmovw knotw kortestw korw kshiftlw kshiftrw kunpckbw kxnorw kxorw vpbroadcastmb2q vpbroadcastmw2d vpconflictd vpconflictq vplzcntd vplzcntq vexp2pd vexp2ps vrcp28pd vrcp28ps vrcp28sd vrcp28ss vrsqrt28pd vrsqrt28ps vrsqrt28sd vrsqrt28ss vgatherpf0dpd vgatherpf0dps vgatherpf0qpd vgatherpf0qps vgatherpf1dpd vgatherpf1dps vgatherpf1qpd vgatherpf1qps vscatterpf0dpd vscatterpf0dps vscatterpf0qpd vscatterpf0qps vscatterpf1dpd vscatterpf1dps vscatterpf1qpd vscatterpf1qps prefetchwt1 bndmk bndcl bndcu bndcn bndmov bndldx bndstx sha1rnds4 sha1nexte sha1msg1 sha1msg2 sha256rnds2 sha256msg1 sha256msg2 hint_nop0 hint_nop1 hint_nop2 hint_nop3 hint_nop4 hint_nop5 hint_nop6 hint_nop7 hint_nop8 hint_nop9 hint_nop10 hint_nop11 hint_nop12 hint_nop13 hint_nop14 hint_nop15 hint_nop16 hint_nop17 hint_nop18 hint_nop19 hint_nop20 hint_nop21 hint_nop22 hint_nop23 hint_nop24 hint_nop25 hint_nop26 hint_nop27 hint_nop28 hint_nop29 hint_nop30 hint_nop31 hint_nop32 hint_nop33 hint_nop34 hint_nop35 hint_nop36 hint_nop37 hint_nop38 hint_nop39 hint_nop40 hint_nop41 hint_nop42 hint_nop43 hint_nop44 hint_nop45 hint_nop46 hint_nop47 hint_nop48 hint_nop49 hint_nop50 hint_nop51 hint_nop52 hint_nop53 hint_nop54 hint_nop55 hint_nop56 hint_nop57 hint_nop58 hint_nop59 hint_nop60 hint_nop61 hint_nop62 hint_nop63",
        built_in: (
          // Instruction pointer
          "ip eip rip al ah bl bh cl ch dl dh sil dil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b ax bx cx dx si di bp sp r8w r9w r10w r11w r12w r13w r14w r15w eax ebx ecx edx esi edi ebp esp eip r8d r9d r10d r11d r12d r13d r14d r15d rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 cs ds es fs gs ss st st0 st1 st2 st3 st4 st5 st6 st7 mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 xmm0  xmm1  xmm2  xmm3  xmm4  xmm5  xmm6  xmm7  xmm8  xmm9 xmm10  xmm11 xmm12 xmm13 xmm14 xmm15 xmm16 xmm17 xmm18 xmm19 xmm20 xmm21 xmm22 xmm23 xmm24 xmm25 xmm26 xmm27 xmm28 xmm29 xmm30 xmm31 ymm0  ymm1  ymm2  ymm3  ymm4  ymm5  ymm6  ymm7  ymm8  ymm9 ymm10  ymm11 ymm12 ymm13 ymm14 ymm15 ymm16 ymm17 ymm18 ymm19 ymm20 ymm21 ymm22 ymm23 ymm24 ymm25 ymm26 ymm27 ymm28 ymm29 ymm30 ymm31 zmm0  zmm1  zmm2  zmm3  zmm4  zmm5  zmm6  zmm7  zmm8  zmm9 zmm10  zmm11 zmm12 zmm13 zmm14 zmm15 zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 k0 k1 k2 k3 k4 k5 k6 k7 bnd0 bnd1 bnd2 bnd3 cr0 cr1 cr2 cr3 cr4 cr8 dr0 dr1 dr2 dr3 dr8 tr3 tr4 tr5 tr6 tr7 r0 r1 r2 r3 r4 r5 r6 r7 r0b r1b r2b r3b r4b r5b r6b r7b r0w r1w r2w r3w r4w r5w r6w r7w r0d r1d r2d r3d r4d r5d r6d r7d r0h r1h r2h r3h r0l r1l r2l r3l r4l r5l r6l r7l r8l r9l r10l r11l r12l r13l r14l r15l db dw dd dq dt ddq do dy dz resb resw resd resq rest resdq reso resy resz incbin equ times byte word dword qword nosplit rel abs seg wrt strict near far a32 ptr"
        ),
        meta: "%define %xdefine %+ %undef %defstr %deftok %assign %strcat %strlen %substr %rotate %elif %else %endif %if %ifmacro %ifctx %ifidn %ifidni %ifid %ifnum %ifstr %iftoken %ifempty %ifenv %error %warning %fatal %rep %endrep %include %push %pop %repl %pathsearch %depend %use %arg %stacksize %local %line %comment %endcomment .nolist __FILE__ __LINE__ __SECT__  __BITS__ __OUTPUT_FORMAT__ __DATE__ __TIME__ __DATE_NUM__ __TIME_NUM__ __UTC_DATE__ __UTC_TIME__ __UTC_DATE_NUM__ __UTC_TIME_NUM__  __PASS__ struc endstruc istruc at iend align alignb sectalign daz nodaz up down zero default option assume public bits use16 use32 use64 default section segment absolute extern global common cpu float __utf16__ __utf16le__ __utf16be__ __utf32__ __utf32le__ __utf32be__ __float8__ __float16__ __float32__ __float64__ __float80m__ __float80e__ __float128l__ __float128h__ __Infinity__ __QNaN__ __SNaN__ Inf NaN QNaN SNaN float8 float16 float32 float64 float80m float80e float128l float128h __FLOAT_DAZ__ __FLOAT_ROUND__ __FLOAT__"
      },
      contains: [
        hljs.COMMENT(
          ";",
          "$",
          { relevance: 0 }
        ),
        {
          className: "number",
          variants: [
            // Float number and x87 BCD
            {
              begin: "\\b(?:([0-9][0-9_]*)?\\.[0-9_]*(?:[eE][+-]?[0-9_]+)?|(0[Xx])?[0-9][0-9_]*(\\.[0-9_]*)?(?:[pP](?:[+-]?[0-9_]+)?)?)\\b",
              relevance: 0
            },
            // Hex number in $
            {
              begin: "\\$[0-9][0-9A-Fa-f]*",
              relevance: 0
            },
            // Number in H,D,T,Q,O,B,Y suffix
            { begin: "\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\b" },
            // Number in X,D,T,Q,O,B,Y prefix
            { begin: "\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\b" }
          ]
        },
        // Double quote string
        hljs.QUOTE_STRING_MODE,
        {
          className: "string",
          variants: [
            // Single-quoted string
            {
              begin: "'",
              end: "[^\\\\]'"
            },
            // Backquoted string
            {
              begin: "`",
              end: "[^\\\\]`"
            }
          ],
          relevance: 0
        },
        {
          className: "symbol",
          variants: [
            // Global label and local label
            { begin: "^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)" },
            // Macro-local label
            { begin: "^\\s*%%[A-Za-z0-9_$#@~.?]*:" }
          ],
          relevance: 0
        },
        // Macro parameter
        {
          className: "subst",
          begin: "%[0-9]+",
          relevance: 0
        },
        // Macro parameter
        {
          className: "subst",
          begin: "%!S+",
          relevance: 0
        },
        {
          className: "meta",
          begin: /^\s*\.[\w_-]+/
        }
      ]
    };
  }
  function xl(hljs) {
    const KWS = [
      "if",
      "then",
      "else",
      "do",
      "while",
      "until",
      "for",
      "loop",
      "import",
      "with",
      "is",
      "as",
      "where",
      "when",
      "by",
      "data",
      "constant",
      "integer",
      "real",
      "text",
      "name",
      "boolean",
      "symbol",
      "infix",
      "prefix",
      "postfix",
      "block",
      "tree"
    ];
    const BUILT_INS2 = [
      "in",
      "mod",
      "rem",
      "and",
      "or",
      "xor",
      "not",
      "abs",
      "sign",
      "floor",
      "ceil",
      "sqrt",
      "sin",
      "cos",
      "tan",
      "asin",
      "acos",
      "atan",
      "exp",
      "expm1",
      "log",
      "log2",
      "log10",
      "log1p",
      "pi",
      "at",
      "text_length",
      "text_range",
      "text_find",
      "text_replace",
      "contains",
      "page",
      "slide",
      "basic_slide",
      "title_slide",
      "title",
      "subtitle",
      "fade_in",
      "fade_out",
      "fade_at",
      "clear_color",
      "color",
      "line_color",
      "line_width",
      "texture_wrap",
      "texture_transform",
      "texture",
      "scale_?x",
      "scale_?y",
      "scale_?z?",
      "translate_?x",
      "translate_?y",
      "translate_?z?",
      "rotate_?x",
      "rotate_?y",
      "rotate_?z?",
      "rectangle",
      "circle",
      "ellipse",
      "sphere",
      "path",
      "line_to",
      "move_to",
      "quad_to",
      "curve_to",
      "theme",
      "background",
      "contents",
      "locally",
      "time",
      "mouse_?x",
      "mouse_?y",
      "mouse_buttons"
    ];
    const BUILTIN_MODULES = [
      "ObjectLoader",
      "Animate",
      "MovieCredits",
      "Slides",
      "Filters",
      "Shading",
      "Materials",
      "LensFlare",
      "Mapping",
      "VLCAudioVideo",
      "StereoDecoder",
      "PointCloud",
      "NetworkAccess",
      "RemoteControl",
      "RegExp",
      "ChromaKey",
      "Snowfall",
      "NodeJS",
      "Speech",
      "Charts"
    ];
    const LITERALS2 = [
      "true",
      "false",
      "nil"
    ];
    const KEYWORDS2 = {
      $pattern: /[a-zA-Z][a-zA-Z0-9_?]*/,
      keyword: KWS,
      literal: LITERALS2,
      built_in: BUILT_INS2.concat(BUILTIN_MODULES)
    };
    const DOUBLE_QUOTE_TEXT = {
      className: "string",
      begin: '"',
      end: '"',
      illegal: "\\n"
    };
    const SINGLE_QUOTE_TEXT = {
      className: "string",
      begin: "'",
      end: "'",
      illegal: "\\n"
    };
    const LONG_TEXT = {
      className: "string",
      begin: "<<",
      end: ">>"
    };
    const BASED_NUMBER = {
      className: "number",
      begin: "[0-9]+#[0-9A-Z_]+(\\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?"
    };
    const IMPORT = {
      beginKeywords: "import",
      end: "$",
      keywords: KEYWORDS2,
      contains: [DOUBLE_QUOTE_TEXT]
    };
    const FUNCTION_DEFINITION = {
      className: "function",
      begin: /[a-z][^\n]*->/,
      returnBegin: true,
      end: /->/,
      contains: [
        hljs.inherit(hljs.TITLE_MODE, { starts: {
          endsWithParent: true,
          keywords: KEYWORDS2
        } })
      ]
    };
    return {
      name: "XL",
      aliases: ["tao"],
      keywords: KEYWORDS2,
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        DOUBLE_QUOTE_TEXT,
        SINGLE_QUOTE_TEXT,
        LONG_TEXT,
        FUNCTION_DEFINITION,
        IMPORT,
        BASED_NUMBER,
        hljs.NUMBER_MODE
      ]
    };
  }
  function xquery(_hljs) {
    const KEYWORDS2 = [
      "module",
      "schema",
      "namespace",
      "boundary-space",
      "preserve",
      "no-preserve",
      "strip",
      "default",
      "collation",
      "base-uri",
      "ordering",
      "context",
      "decimal-format",
      "decimal-separator",
      "copy-namespaces",
      "empty-sequence",
      "except",
      "exponent-separator",
      "external",
      "grouping-separator",
      "inherit",
      "no-inherit",
      "lax",
      "minus-sign",
      "per-mille",
      "percent",
      "schema-attribute",
      "schema-element",
      "strict",
      "unordered",
      "zero-digit",
      "declare",
      "import",
      "option",
      "function",
      "validate",
      "variable",
      "for",
      "at",
      "in",
      "let",
      "where",
      "order",
      "group",
      "by",
      "return",
      "if",
      "then",
      "else",
      "tumbling",
      "sliding",
      "window",
      "start",
      "when",
      "only",
      "end",
      "previous",
      "next",
      "stable",
      "ascending",
      "descending",
      "allowing",
      "empty",
      "greatest",
      "least",
      "some",
      "every",
      "satisfies",
      "switch",
      "case",
      "typeswitch",
      "try",
      "catch",
      "and",
      "or",
      "to",
      "union",
      "intersect",
      "instance",
      "of",
      "treat",
      "as",
      "castable",
      "cast",
      "map",
      "array",
      "delete",
      "insert",
      "into",
      "replace",
      "value",
      "rename",
      "copy",
      "modify",
      "update"
    ];
    const TYPES2 = [
      "item",
      "document-node",
      "node",
      "attribute",
      "document",
      "element",
      "comment",
      "namespace",
      "namespace-node",
      "processing-instruction",
      "text",
      "construction",
      "xs:anyAtomicType",
      "xs:untypedAtomic",
      "xs:duration",
      "xs:time",
      "xs:decimal",
      "xs:float",
      "xs:double",
      "xs:gYearMonth",
      "xs:gYear",
      "xs:gMonthDay",
      "xs:gMonth",
      "xs:gDay",
      "xs:boolean",
      "xs:base64Binary",
      "xs:hexBinary",
      "xs:anyURI",
      "xs:QName",
      "xs:NOTATION",
      "xs:dateTime",
      "xs:dateTimeStamp",
      "xs:date",
      "xs:string",
      "xs:normalizedString",
      "xs:token",
      "xs:language",
      "xs:NMTOKEN",
      "xs:Name",
      "xs:NCName",
      "xs:ID",
      "xs:IDREF",
      "xs:ENTITY",
      "xs:integer",
      "xs:nonPositiveInteger",
      "xs:negativeInteger",
      "xs:long",
      "xs:int",
      "xs:short",
      "xs:byte",
      "xs:nonNegativeInteger",
      "xs:unisignedLong",
      "xs:unsignedInt",
      "xs:unsignedShort",
      "xs:unsignedByte",
      "xs:positiveInteger",
      "xs:yearMonthDuration",
      "xs:dayTimeDuration"
    ];
    const LITERALS2 = [
      "eq",
      "ne",
      "lt",
      "le",
      "gt",
      "ge",
      "is",
      "self::",
      "child::",
      "descendant::",
      "descendant-or-self::",
      "attribute::",
      "following::",
      "following-sibling::",
      "parent::",
      "ancestor::",
      "ancestor-or-self::",
      "preceding::",
      "preceding-sibling::",
      "NaN"
    ];
    const BUILT_IN = {
      className: "built_in",
      variants: [
        {
          begin: /\barray:/,
          end: /(?:append|filter|flatten|fold-(?:left|right)|for-each(?:-pair)?|get|head|insert-before|join|put|remove|reverse|size|sort|subarray|tail)\b/
        },
        {
          begin: /\bmap:/,
          end: /(?:contains|entry|find|for-each|get|keys|merge|put|remove|size)\b/
        },
        {
          begin: /\bmath:/,
          end: /(?:a(?:cos|sin|tan[2]?)|cos|exp(?:10)?|log(?:10)?|pi|pow|sin|sqrt|tan)\b/
        },
        {
          begin: /\bop:/,
          end: /\(/,
          excludeEnd: true
        },
        {
          begin: /\bfn:/,
          end: /\(/,
          excludeEnd: true
        },
        // do not highlight inbuilt strings as variable or xml element names
        { begin: /[^</$:'"-]\b(?:abs|accumulator-(?:after|before)|adjust-(?:date(?:Time)?|time)-to-timezone|analyze-string|apply|available-(?:environment-variables|system-properties)|avg|base-uri|boolean|ceiling|codepoints?-(?:equal|to-string)|collation-key|collection|compare|concat|contains(?:-token)?|copy-of|count|current(?:-)?(?:date(?:Time)?|time|group(?:ing-key)?|output-uri|merge-(?:group|key))?data|dateTime|days?-from-(?:date(?:Time)?|duration)|deep-equal|default-(?:collation|language)|distinct-values|document(?:-uri)?|doc(?:-available)?|element-(?:available|with-id)|empty|encode-for-uri|ends-with|environment-variable|error|escape-html-uri|exactly-one|exists|false|filter|floor|fold-(?:left|right)|for-each(?:-pair)?|format-(?:date(?:Time)?|time|integer|number)|function-(?:arity|available|lookup|name)|generate-id|has-children|head|hours-from-(?:dateTime|duration|time)|id(?:ref)?|implicit-timezone|in-scope-prefixes|index-of|innermost|insert-before|iri-to-uri|json-(?:doc|to-xml)|key|lang|last|load-xquery-module|local-name(?:-from-QName)?|(?:lower|upper)-case|matches|max|minutes-from-(?:dateTime|duration|time)|min|months?-from-(?:date(?:Time)?|duration)|name(?:space-uri-?(?:for-prefix|from-QName)?)?|nilled|node-name|normalize-(?:space|unicode)|not|number|one-or-more|outermost|parse-(?:ietf-date|json)|path|position|(?:prefix-from-)?QName|random-number-generator|regex-group|remove|replace|resolve-(?:QName|uri)|reverse|root|round(?:-half-to-even)?|seconds-from-(?:dateTime|duration|time)|snapshot|sort|starts-with|static-base-uri|stream-available|string-?(?:join|length|to-codepoints)?|subsequence|substring-?(?:after|before)?|sum|system-property|tail|timezone-from-(?:date(?:Time)?|time)|tokenize|trace|trans(?:form|late)|true|type-available|unordered|unparsed-(?:entity|text)?-?(?:public-id|uri|available|lines)?|uri-collection|xml-to-json|years?-from-(?:date(?:Time)?|duration)|zero-or-one)\b/ },
        {
          begin: /\blocal:/,
          end: /\(/,
          excludeEnd: true
        },
        {
          begin: /\bzip:/,
          end: /(?:zip-file|(?:xml|html|text|binary)-entry| (?:update-)?entries)\b/
        },
        {
          begin: /\b(?:util|db|functx|app|xdmp|xmldb):/,
          end: /\(/,
          excludeEnd: true
        }
      ]
    };
    const TITLE = {
      className: "title",
      begin: /\bxquery version "[13]\.[01]"\s?(?:encoding ".+")?/,
      end: /;/
    };
    const VAR = {
      className: "variable",
      begin: /[$][\w\-:]+/
    };
    const NUMBER = {
      className: "number",
      begin: /(\b0[0-7_]+)|(\b0x[0-9a-fA-F_]+)|(\b[1-9][0-9_]*(\.[0-9_]+)?)|[0_]\b/,
      relevance: 0
    };
    const STRING = {
      className: "string",
      variants: [
        {
          begin: /"/,
          end: /"/,
          contains: [
            {
              begin: /""/,
              relevance: 0
            }
          ]
        },
        {
          begin: /'/,
          end: /'/,
          contains: [
            {
              begin: /''/,
              relevance: 0
            }
          ]
        }
      ]
    };
    const ANNOTATION = {
      className: "meta",
      begin: /%[\w\-:]+/
    };
    const COMMENT2 = {
      className: "comment",
      begin: /\(:/,
      end: /:\)/,
      relevance: 10,
      contains: [
        {
          className: "doctag",
          begin: /@\w+/
        }
      ]
    };
    const COMPUTED = {
      beginKeywords: "element attribute comment document processing-instruction",
      end: /\{/,
      excludeEnd: true
    };
    const DIRECT = {
      begin: /<([\w._:-]+)(\s+\S*=('|").*('|"))?>/,
      end: /(\/[\w._:-]+>)/,
      subLanguage: "xml",
      contains: [
        {
          begin: /\{/,
          end: /\}/,
          subLanguage: "xquery"
        },
        "self"
      ]
    };
    const CONTAINS = [
      VAR,
      BUILT_IN,
      STRING,
      NUMBER,
      COMMENT2,
      ANNOTATION,
      TITLE,
      COMPUTED,
      DIRECT
    ];
    return {
      name: "XQuery",
      aliases: [
        "xpath",
        "xq",
        "xqm"
      ],
      case_insensitive: false,
      illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,
      keywords: {
        $pattern: /[a-zA-Z$][a-zA-Z0-9_:-]*/,
        keyword: KEYWORDS2,
        type: TYPES2,
        literal: LITERALS2
      },
      contains: CONTAINS
    };
  }
  function zephir(hljs) {
    const STRING = {
      className: "string",
      contains: [hljs.BACKSLASH_ESCAPE],
      variants: [
        hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
        hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null })
      ]
    };
    const TITLE_MODE2 = hljs.UNDERSCORE_TITLE_MODE;
    const NUMBER = { variants: [
      hljs.BINARY_NUMBER_MODE,
      hljs.C_NUMBER_MODE
    ] };
    const KEYWORDS2 = (
      // classes and objects
      "namespace class interface use extends function return abstract final public protected private static deprecated throw try catch Exception echo empty isset instanceof unset let var new const self require if else elseif switch case default do while loop for continue break likely unlikely __LINE__ __FILE__ __DIR__ __FUNCTION__ __CLASS__ __TRAIT__ __METHOD__ __NAMESPACE__ array boolean float double integer object resource string char long unsigned bool int uint ulong uchar true false null undefined"
    );
    return {
      name: "Zephir",
      aliases: ["zep"],
      keywords: KEYWORDS2,
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.COMMENT(
          /\/\*/,
          /\*\//,
          { contains: [
            {
              className: "doctag",
              begin: /@[A-Za-z]+/
            }
          ] }
        ),
        {
          className: "string",
          begin: /<<<['"]?\w+['"]?$/,
          end: /^\w+;/,
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          // swallow composed identifiers to avoid parsing them as keywords
          begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
        },
        {
          className: "function",
          beginKeywords: "function fn",
          end: /[;{]/,
          excludeEnd: true,
          illegal: /\$|\[|%/,
          contains: [
            TITLE_MODE2,
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              keywords: KEYWORDS2,
              contains: [
                "self",
                hljs.C_BLOCK_COMMENT_MODE,
                STRING,
                NUMBER
              ]
            }
          ]
        },
        {
          className: "class",
          beginKeywords: "class interface",
          end: /\{/,
          excludeEnd: true,
          illegal: /[:($"]/,
          contains: [
            { beginKeywords: "extends implements" },
            TITLE_MODE2
          ]
        },
        {
          beginKeywords: "namespace",
          end: /;/,
          illegal: /[.']/,
          contains: [TITLE_MODE2]
        },
        {
          beginKeywords: "use",
          end: /;/,
          contains: [TITLE_MODE2]
        },
        {
          begin: /=>/
          // No markup, just a relevance booster
        },
        STRING,
        NUMBER
      ]
    };
  }
  function cPlusPlus(hljs) {
    const regex = hljs.regex;
    const C_LINE_COMMENT_MODE2 = hljs.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] });
    const DECLTYPE_AUTO_RE = "decltype\\(auto\\)";
    const NAMESPACE_RE = "[a-zA-Z_]\\w*::";
    const TEMPLATE_ARGUMENT_RE = "<[^<>]+>";
    const FUNCTION_TYPE_RE = "(?!struct)(" + DECLTYPE_AUTO_RE + "|" + regex.optional(NAMESPACE_RE) + "[a-zA-Z_]\\w*" + regex.optional(TEMPLATE_ARGUMENT_RE) + ")";
    const CPP_PRIMITIVE_TYPES = {
      className: "type",
      begin: "\\b[a-z\\d_]*_t\\b"
    };
    const CHARACTER_ESCAPES = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)";
    const STRINGS2 = {
      className: "string",
      variants: [
        {
          begin: '(u8?|U|L)?"',
          end: '"',
          illegal: "\\n",
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: "(u8?|U|L)?'(" + CHARACTER_ESCAPES + "|.)",
          end: "'",
          illegal: "."
        },
        hljs.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/
        })
      ]
    };
    const NUMBERS = {
      className: "number",
      variants: [
        // Floating-point literal.
        {
          begin: "[+-]?(?:(?:[0-9](?:'?[0-9])*\\.(?:[0-9](?:'?[0-9])*)?|\\.[0-9](?:'?[0-9])*)(?:[Ee][+-]?[0-9](?:'?[0-9])*)?|[0-9](?:'?[0-9])*[Ee][+-]?[0-9](?:'?[0-9])*|0[Xx](?:[0-9A-Fa-f](?:'?[0-9A-Fa-f])*(?:\\.(?:[0-9A-Fa-f](?:'?[0-9A-Fa-f])*)?)?|\\.[0-9A-Fa-f](?:'?[0-9A-Fa-f])*)[Pp][+-]?[0-9](?:'?[0-9])*)(?:[Ff](?:16|32|64|128)?|(BF|bf)16|[Ll]|)"
        },
        // Integer literal.
        {
          begin: "[+-]?\\b(?:0[Bb][01](?:'?[01])*|0[Xx][0-9A-Fa-f](?:'?[0-9A-Fa-f])*|0(?:'?[0-7])*|[1-9](?:'?[0-9])*)(?:[Uu](?:LL?|ll?)|[Uu][Zz]?|(?:LL?|ll?)[Uu]?|[Zz][Uu]|)"
          // Note: there are user-defined literal suffixes too, but perhaps having the custom suffix not part of the
          // literal highlight actually makes it stand out more.
        }
      ],
      relevance: 0
    };
    const PREPROCESSOR = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        hljs.inherit(STRINGS2, { className: "string" }),
        {
          className: "string",
          begin: /<.*?>/
        },
        C_LINE_COMMENT_MODE2,
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
    const TITLE_MODE2 = {
      className: "title",
      begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,
      relevance: 0
    };
    const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + "\\s*\\(";
    const RESERVED_KEYWORDS = [
      "alignas",
      "alignof",
      "and",
      "and_eq",
      "asm",
      "atomic_cancel",
      "atomic_commit",
      "atomic_noexcept",
      "auto",
      "bitand",
      "bitor",
      "break",
      "case",
      "catch",
      "class",
      "co_await",
      "co_return",
      "co_yield",
      "compl",
      "concept",
      "const_cast|10",
      "consteval",
      "constexpr",
      "constinit",
      "continue",
      "decltype",
      "default",
      "delete",
      "do",
      "dynamic_cast|10",
      "else",
      "enum",
      "explicit",
      "export",
      "extern",
      "false",
      "final",
      "for",
      "friend",
      "goto",
      "if",
      "import",
      "inline",
      "module",
      "mutable",
      "namespace",
      "new",
      "noexcept",
      "not",
      "not_eq",
      "nullptr",
      "operator",
      "or",
      "or_eq",
      "override",
      "private",
      "protected",
      "public",
      "reflexpr",
      "register",
      "reinterpret_cast|10",
      "requires",
      "return",
      "sizeof",
      "static_assert",
      "static_cast|10",
      "struct",
      "switch",
      "synchronized",
      "template",
      "this",
      "thread_local",
      "throw",
      "transaction_safe",
      "transaction_safe_dynamic",
      "true",
      "try",
      "typedef",
      "typeid",
      "typename",
      "union",
      "using",
      "virtual",
      "volatile",
      "while",
      "xor",
      "xor_eq"
    ];
    const RESERVED_TYPES = [
      "bool",
      "char",
      "char16_t",
      "char32_t",
      "char8_t",
      "double",
      "float",
      "int",
      "long",
      "short",
      "void",
      "wchar_t",
      "unsigned",
      "signed",
      "const",
      "static"
    ];
    const TYPE_HINTS = [
      "any",
      "auto_ptr",
      "barrier",
      "binary_semaphore",
      "bitset",
      "complex",
      "condition_variable",
      "condition_variable_any",
      "counting_semaphore",
      "deque",
      "false_type",
      "flat_map",
      "flat_set",
      "future",
      "imaginary",
      "initializer_list",
      "istringstream",
      "jthread",
      "latch",
      "lock_guard",
      "multimap",
      "multiset",
      "mutex",
      "optional",
      "ostringstream",
      "packaged_task",
      "pair",
      "promise",
      "priority_queue",
      "queue",
      "recursive_mutex",
      "recursive_timed_mutex",
      "scoped_lock",
      "set",
      "shared_future",
      "shared_lock",
      "shared_mutex",
      "shared_timed_mutex",
      "shared_ptr",
      "stack",
      "string_view",
      "stringstream",
      "timed_mutex",
      "thread",
      "true_type",
      "tuple",
      "unique_lock",
      "unique_ptr",
      "unordered_map",
      "unordered_multimap",
      "unordered_multiset",
      "unordered_set",
      "variant",
      "vector",
      "weak_ptr",
      "wstring",
      "wstring_view"
    ];
    const FUNCTION_HINTS = [
      "abort",
      "abs",
      "acos",
      "apply",
      "as_const",
      "asin",
      "atan",
      "atan2",
      "calloc",
      "ceil",
      "cerr",
      "cin",
      "clog",
      "cos",
      "cosh",
      "cout",
      "declval",
      "endl",
      "exchange",
      "exit",
      "exp",
      "fabs",
      "floor",
      "fmod",
      "forward",
      "fprintf",
      "fputs",
      "free",
      "frexp",
      "fscanf",
      "future",
      "invoke",
      "isalnum",
      "isalpha",
      "iscntrl",
      "isdigit",
      "isgraph",
      "islower",
      "isprint",
      "ispunct",
      "isspace",
      "isupper",
      "isxdigit",
      "labs",
      "launder",
      "ldexp",
      "log",
      "log10",
      "make_pair",
      "make_shared",
      "make_shared_for_overwrite",
      "make_tuple",
      "make_unique",
      "malloc",
      "memchr",
      "memcmp",
      "memcpy",
      "memset",
      "modf",
      "move",
      "pow",
      "printf",
      "putchar",
      "puts",
      "realloc",
      "scanf",
      "sin",
      "sinh",
      "snprintf",
      "sprintf",
      "sqrt",
      "sscanf",
      "std",
      "stderr",
      "stdin",
      "stdout",
      "strcat",
      "strchr",
      "strcmp",
      "strcpy",
      "strcspn",
      "strlen",
      "strncat",
      "strncmp",
      "strncpy",
      "strpbrk",
      "strrchr",
      "strspn",
      "strstr",
      "swap",
      "tan",
      "tanh",
      "terminate",
      "to_underlying",
      "tolower",
      "toupper",
      "vfprintf",
      "visit",
      "vprintf",
      "vsprintf"
    ];
    const LITERALS2 = [
      "NULL",
      "false",
      "nullopt",
      "nullptr",
      "true"
    ];
    const BUILT_IN = ["_Pragma"];
    const CPP_KEYWORDS = {
      type: RESERVED_TYPES,
      keyword: RESERVED_KEYWORDS,
      literal: LITERALS2,
      built_in: BUILT_IN,
      _type_hints: TYPE_HINTS
    };
    const FUNCTION_DISPATCH = {
      className: "function.dispatch",
      relevance: 0,
      keywords: {
        // Only for relevance, not highlighting.
        _hint: FUNCTION_HINTS
      },
      begin: regex.concat(
        /\b/,
        /(?!decltype)/,
        /(?!if)/,
        /(?!for)/,
        /(?!switch)/,
        /(?!while)/,
        hljs.IDENT_RE,
        regex.lookahead(/(<[^<>]+>|)\s*\(/)
      )
    };
    const EXPRESSION_CONTAINS = [
      FUNCTION_DISPATCH,
      PREPROCESSOR,
      CPP_PRIMITIVE_TYPES,
      C_LINE_COMMENT_MODE2,
      hljs.C_BLOCK_COMMENT_MODE,
      NUMBERS,
      STRINGS2
    ];
    const EXPRESSION_CONTEXT = {
      // This mode covers expression context where we can't expect a function
      // definition and shouldn't highlight anything that looks like one:
      // `return some()`, `else if()`, `(x*sum(1, 2))`
      variants: [
        {
          begin: /=/,
          end: /;/
        },
        {
          begin: /\(/,
          end: /\)/
        },
        {
          beginKeywords: "new throw return else",
          end: /;/
        }
      ],
      keywords: CPP_KEYWORDS,
      contains: EXPRESSION_CONTAINS.concat([
        {
          begin: /\(/,
          end: /\)/,
          keywords: CPP_KEYWORDS,
          contains: EXPRESSION_CONTAINS.concat(["self"]),
          relevance: 0
        }
      ]),
      relevance: 0
    };
    const FUNCTION_DECLARATION = {
      className: "function",
      begin: "(" + FUNCTION_TYPE_RE + "[\\*&\\s]+)+" + FUNCTION_TITLE,
      returnBegin: true,
      end: /[{;=]/,
      excludeEnd: true,
      keywords: CPP_KEYWORDS,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        {
          // to prevent it from being confused as the function title
          begin: DECLTYPE_AUTO_RE,
          keywords: CPP_KEYWORDS,
          relevance: 0
        },
        {
          begin: FUNCTION_TITLE,
          returnBegin: true,
          contains: [TITLE_MODE2],
          relevance: 0
        },
        // needed because we do not have look-behind on the below rule
        // to prevent it from grabbing the final : in a :: pair
        {
          begin: /::/,
          relevance: 0
        },
        // initializers
        {
          begin: /:/,
          endsWithParent: true,
          contains: [
            STRINGS2,
            NUMBERS
          ]
        },
        // allow for multiple declarations, e.g.:
        // extern void f(int), g(char);
        {
          relevance: 0,
          match: /,/
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: CPP_KEYWORDS,
          relevance: 0,
          contains: [
            C_LINE_COMMENT_MODE2,
            hljs.C_BLOCK_COMMENT_MODE,
            STRINGS2,
            NUMBERS,
            CPP_PRIMITIVE_TYPES,
            // Count matching parentheses.
            {
              begin: /\(/,
              end: /\)/,
              keywords: CPP_KEYWORDS,
              relevance: 0,
              contains: [
                "self",
                C_LINE_COMMENT_MODE2,
                hljs.C_BLOCK_COMMENT_MODE,
                STRINGS2,
                NUMBERS,
                CPP_PRIMITIVE_TYPES
              ]
            }
          ]
        },
        CPP_PRIMITIVE_TYPES,
        C_LINE_COMMENT_MODE2,
        hljs.C_BLOCK_COMMENT_MODE,
        PREPROCESSOR
      ]
    };
    return {
      name: "C++",
      aliases: [
        "cc",
        "c++",
        "h++",
        "hpp",
        "hh",
        "hxx",
        "cxx"
      ],
      keywords: CPP_KEYWORDS,
      illegal: "</",
      classNameAliases: { "function.dispatch": "built_in" },
      contains: [].concat(
        EXPRESSION_CONTEXT,
        FUNCTION_DECLARATION,
        FUNCTION_DISPATCH,
        EXPRESSION_CONTAINS,
        [
          PREPROCESSOR,
          {
            // containers: ie, `vector <int> rooms (9);`
            begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function|flat_map|flat_set)\\s*<(?!<)",
            end: ">",
            keywords: CPP_KEYWORDS,
            contains: [
              "self",
              CPP_PRIMITIVE_TYPES
            ]
          },
          {
            begin: hljs.IDENT_RE + "::",
            keywords: CPP_KEYWORDS
          },
          {
            match: [
              // extra complexity to deal with `enum class` and `enum struct`
              /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
              /\s+/,
              /\w+/
            ],
            className: {
              1: "keyword",
              3: "title.class"
            }
          }
        ]
      )
    };
  }
  function arduino(hljs) {
    const ARDUINO_KW = {
      type: [
        "boolean",
        "byte",
        "word",
        "String"
      ],
      built_in: [
        "KeyboardController",
        "MouseController",
        "SoftwareSerial",
        "EthernetServer",
        "EthernetClient",
        "LiquidCrystal",
        "RobotControl",
        "GSMVoiceCall",
        "EthernetUDP",
        "EsploraTFT",
        "HttpClient",
        "RobotMotor",
        "WiFiClient",
        "GSMScanner",
        "FileSystem",
        "Scheduler",
        "GSMServer",
        "YunClient",
        "YunServer",
        "IPAddress",
        "GSMClient",
        "GSMModem",
        "Keyboard",
        "Ethernet",
        "Console",
        "GSMBand",
        "Esplora",
        "Stepper",
        "Process",
        "WiFiUDP",
        "GSM_SMS",
        "Mailbox",
        "USBHost",
        "Firmata",
        "PImage",
        "Client",
        "Server",
        "GSMPIN",
        "FileIO",
        "Bridge",
        "Serial",
        "EEPROM",
        "Stream",
        "Mouse",
        "Audio",
        "Servo",
        "File",
        "Task",
        "GPRS",
        "WiFi",
        "Wire",
        "TFT",
        "GSM",
        "SPI",
        "SD"
      ],
      _hints: [
        "setup",
        "loop",
        "runShellCommandAsynchronously",
        "analogWriteResolution",
        "retrieveCallingNumber",
        "printFirmwareVersion",
        "analogReadResolution",
        "sendDigitalPortPair",
        "noListenOnLocalhost",
        "readJoystickButton",
        "setFirmwareVersion",
        "readJoystickSwitch",
        "scrollDisplayRight",
        "getVoiceCallStatus",
        "scrollDisplayLeft",
        "writeMicroseconds",
        "delayMicroseconds",
        "beginTransmission",
        "getSignalStrength",
        "runAsynchronously",
        "getAsynchronously",
        "listenOnLocalhost",
        "getCurrentCarrier",
        "readAccelerometer",
        "messageAvailable",
        "sendDigitalPorts",
        "lineFollowConfig",
        "countryNameWrite",
        "runShellCommand",
        "readStringUntil",
        "rewindDirectory",
        "readTemperature",
        "setClockDivider",
        "readLightSensor",
        "endTransmission",
        "analogReference",
        "detachInterrupt",
        "countryNameRead",
        "attachInterrupt",
        "encryptionType",
        "readBytesUntil",
        "robotNameWrite",
        "readMicrophone",
        "robotNameRead",
        "cityNameWrite",
        "userNameWrite",
        "readJoystickY",
        "readJoystickX",
        "mouseReleased",
        "openNextFile",
        "scanNetworks",
        "noInterrupts",
        "digitalWrite",
        "beginSpeaker",
        "mousePressed",
        "isActionDone",
        "mouseDragged",
        "displayLogos",
        "noAutoscroll",
        "addParameter",
        "remoteNumber",
        "getModifiers",
        "keyboardRead",
        "userNameRead",
        "waitContinue",
        "processInput",
        "parseCommand",
        "printVersion",
        "readNetworks",
        "writeMessage",
        "blinkVersion",
        "cityNameRead",
        "readMessage",
        "setDataMode",
        "parsePacket",
        "isListening",
        "setBitOrder",
        "beginPacket",
        "isDirectory",
        "motorsWrite",
        "drawCompass",
        "digitalRead",
        "clearScreen",
        "serialEvent",
        "rightToLeft",
        "setTextSize",
        "leftToRight",
        "requestFrom",
        "keyReleased",
        "compassRead",
        "analogWrite",
        "interrupts",
        "WiFiServer",
        "disconnect",
        "playMelody",
        "parseFloat",
        "autoscroll",
        "getPINUsed",
        "setPINUsed",
        "setTimeout",
        "sendAnalog",
        "readSlider",
        "analogRead",
        "beginWrite",
        "createChar",
        "motorsStop",
        "keyPressed",
        "tempoWrite",
        "readButton",
        "subnetMask",
        "debugPrint",
        "macAddress",
        "writeGreen",
        "randomSeed",
        "attachGPRS",
        "readString",
        "sendString",
        "remotePort",
        "releaseAll",
        "mouseMoved",
        "background",
        "getXChange",
        "getYChange",
        "answerCall",
        "getResult",
        "voiceCall",
        "endPacket",
        "constrain",
        "getSocket",
        "writeJSON",
        "getButton",
        "available",
        "connected",
        "findUntil",
        "readBytes",
        "exitValue",
        "readGreen",
        "writeBlue",
        "startLoop",
        "IPAddress",
        "isPressed",
        "sendSysex",
        "pauseMode",
        "gatewayIP",
        "setCursor",
        "getOemKey",
        "tuneWrite",
        "noDisplay",
        "loadImage",
        "switchPIN",
        "onRequest",
        "onReceive",
        "changePIN",
        "playFile",
        "noBuffer",
        "parseInt",
        "overflow",
        "checkPIN",
        "knobRead",
        "beginTFT",
        "bitClear",
        "updateIR",
        "bitWrite",
        "position",
        "writeRGB",
        "highByte",
        "writeRed",
        "setSpeed",
        "readBlue",
        "noStroke",
        "remoteIP",
        "transfer",
        "shutdown",
        "hangCall",
        "beginSMS",
        "endWrite",
        "attached",
        "maintain",
        "noCursor",
        "checkReg",
        "checkPUK",
        "shiftOut",
        "isValid",
        "shiftIn",
        "pulseIn",
        "connect",
        "println",
        "localIP",
        "pinMode",
        "getIMEI",
        "display",
        "noBlink",
        "process",
        "getBand",
        "running",
        "beginSD",
        "drawBMP",
        "lowByte",
        "setBand",
        "release",
        "bitRead",
        "prepare",
        "pointTo",
        "readRed",
        "setMode",
        "noFill",
        "remove",
        "listen",
        "stroke",
        "detach",
        "attach",
        "noTone",
        "exists",
        "buffer",
        "height",
        "bitSet",
        "circle",
        "config",
        "cursor",
        "random",
        "IRread",
        "setDNS",
        "endSMS",
        "getKey",
        "micros",
        "millis",
        "begin",
        "print",
        "write",
        "ready",
        "flush",
        "width",
        "isPIN",
        "blink",
        "clear",
        "press",
        "mkdir",
        "rmdir",
        "close",
        "point",
        "yield",
        "image",
        "BSSID",
        "click",
        "delay",
        "read",
        "text",
        "move",
        "peek",
        "beep",
        "rect",
        "line",
        "open",
        "seek",
        "fill",
        "size",
        "turn",
        "stop",
        "home",
        "find",
        "step",
        "tone",
        "sqrt",
        "RSSI",
        "SSID",
        "end",
        "bit",
        "tan",
        "cos",
        "sin",
        "pow",
        "map",
        "abs",
        "max",
        "min",
        "get",
        "run",
        "put"
      ],
      literal: [
        "DIGITAL_MESSAGE",
        "FIRMATA_STRING",
        "ANALOG_MESSAGE",
        "REPORT_DIGITAL",
        "REPORT_ANALOG",
        "INPUT_PULLUP",
        "SET_PIN_MODE",
        "INTERNAL2V56",
        "SYSTEM_RESET",
        "LED_BUILTIN",
        "INTERNAL1V1",
        "SYSEX_START",
        "INTERNAL",
        "EXTERNAL",
        "DEFAULT",
        "OUTPUT",
        "INPUT",
        "HIGH",
        "LOW"
      ]
    };
    const ARDUINO = cPlusPlus(hljs);
    const kws = (
      /** @type {Record<string,any>} */
      ARDUINO.keywords
    );
    kws.type = [
      ...kws.type,
      ...ARDUINO_KW.type
    ];
    kws.literal = [
      ...kws.literal,
      ...ARDUINO_KW.literal
    ];
    kws.built_in = [
      ...kws.built_in,
      ...ARDUINO_KW.built_in
    ];
    kws._hints = ARDUINO_KW._hints;
    ARDUINO.name = "Arduino";
    ARDUINO.aliases = ["ino"];
    ARDUINO.supersetOf = "cpp";
    return ARDUINO;
  }
  function bash(hljs) {
    const regex = hljs.regex;
    const VAR = {};
    const BRACED_VAR = {
      begin: /\$\{/,
      end: /\}/,
      contains: [
        "self",
        {
          begin: /:-/,
          contains: [VAR]
        }
        // default values
      ]
    };
    Object.assign(VAR, {
      className: "variable",
      variants: [
        { begin: regex.concat(
          /\$[\w\d#@][\w\d_]*/,
          // negative look-ahead tries to avoid matching patterns that are not
          // Perl at all like $ident$, @ident@, etc.
          `(?![\\w\\d])(?![$])`
        ) },
        BRACED_VAR
      ]
    });
    const SUBST = {
      className: "subst",
      begin: /\$\(/,
      end: /\)/,
      contains: [hljs.BACKSLASH_ESCAPE]
    };
    const COMMENT2 = hljs.inherit(
      hljs.COMMENT(),
      {
        match: [
          /(^|\s)/,
          /#.*$/
        ],
        scope: {
          2: "comment"
        }
      }
    );
    const HERE_DOC = {
      begin: /<<-?\s*(?=\w+)/,
      starts: { contains: [
        hljs.END_SAME_AS_BEGIN({
          begin: /(\w+)/,
          end: /(\w+)/,
          className: "string"
        })
      ] }
    };
    const QUOTE_STRING = {
      className: "string",
      begin: /"/,
      end: /"/,
      contains: [
        hljs.BACKSLASH_ESCAPE,
        VAR,
        SUBST
      ]
    };
    SUBST.contains.push(QUOTE_STRING);
    const ESCAPED_QUOTE = {
      match: /\\"/
    };
    const APOS_STRING = {
      className: "string",
      begin: /'/,
      end: /'/
    };
    const ESCAPED_APOS = {
      match: /\\'/
    };
    const ARITHMETIC = {
      begin: /\$?\(\(/,
      end: /\)\)/,
      contains: [
        {
          begin: /\d+#[0-9a-f]+/,
          className: "number"
        },
        hljs.NUMBER_MODE,
        VAR
      ]
    };
    const SH_LIKE_SHELLS = [
      "fish",
      "bash",
      "zsh",
      "sh",
      "csh",
      "ksh",
      "tcsh",
      "dash",
      "scsh"
    ];
    const KNOWN_SHEBANG = hljs.SHEBANG({
      binary: `(${SH_LIKE_SHELLS.join("|")})`,
      relevance: 10
    });
    const FUNCTION = {
      className: "function",
      begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
      returnBegin: true,
      contains: [hljs.inherit(hljs.TITLE_MODE, { begin: /\w[\w\d_]*/ })],
      relevance: 0
    };
    const KEYWORDS2 = [
      "if",
      "then",
      "else",
      "elif",
      "fi",
      "time",
      "for",
      "while",
      "until",
      "in",
      "do",
      "done",
      "case",
      "esac",
      "coproc",
      "function",
      "select"
    ];
    const LITERALS2 = [
      "true",
      "false"
    ];
    const PATH_MODE = { match: /(\/[a-z._-]+)+/ };
    const SHELL_BUILT_INS = [
      "break",
      "cd",
      "continue",
      "eval",
      "exec",
      "exit",
      "export",
      "getopts",
      "hash",
      "pwd",
      "readonly",
      "return",
      "shift",
      "test",
      "times",
      "trap",
      "umask",
      "unset"
    ];
    const BASH_BUILT_INS = [
      "alias",
      "bind",
      "builtin",
      "caller",
      "command",
      "declare",
      "echo",
      "enable",
      "help",
      "let",
      "local",
      "logout",
      "mapfile",
      "printf",
      "read",
      "readarray",
      "source",
      "sudo",
      "type",
      "typeset",
      "ulimit",
      "unalias"
    ];
    const ZSH_BUILT_INS = [
      "autoload",
      "bg",
      "bindkey",
      "bye",
      "cap",
      "chdir",
      "clone",
      "comparguments",
      "compcall",
      "compctl",
      "compdescribe",
      "compfiles",
      "compgroups",
      "compquote",
      "comptags",
      "comptry",
      "compvalues",
      "dirs",
      "disable",
      "disown",
      "echotc",
      "echoti",
      "emulate",
      "fc",
      "fg",
      "float",
      "functions",
      "getcap",
      "getln",
      "history",
      "integer",
      "jobs",
      "kill",
      "limit",
      "log",
      "noglob",
      "popd",
      "print",
      "pushd",
      "pushln",
      "rehash",
      "sched",
      "setcap",
      "setopt",
      "stat",
      "suspend",
      "ttyctl",
      "unfunction",
      "unhash",
      "unlimit",
      "unsetopt",
      "vared",
      "wait",
      "whence",
      "where",
      "which",
      "zcompile",
      "zformat",
      "zftp",
      "zle",
      "zmodload",
      "zparseopts",
      "zprof",
      "zpty",
      "zregexparse",
      "zsocket",
      "zstyle",
      "ztcp"
    ];
    const GNU_CORE_UTILS = [
      "chcon",
      "chgrp",
      "chown",
      "chmod",
      "cp",
      "dd",
      "df",
      "dir",
      "dircolors",
      "ln",
      "ls",
      "mkdir",
      "mkfifo",
      "mknod",
      "mktemp",
      "mv",
      "realpath",
      "rm",
      "rmdir",
      "shred",
      "sync",
      "touch",
      "truncate",
      "vdir",
      "b2sum",
      "base32",
      "base64",
      "cat",
      "cksum",
      "comm",
      "csplit",
      "cut",
      "expand",
      "fmt",
      "fold",
      "head",
      "join",
      "md5sum",
      "nl",
      "numfmt",
      "od",
      "paste",
      "ptx",
      "pr",
      "sha1sum",
      "sha224sum",
      "sha256sum",
      "sha384sum",
      "sha512sum",
      "shuf",
      "sort",
      "split",
      "sum",
      "tac",
      "tail",
      "tr",
      "tsort",
      "unexpand",
      "uniq",
      "wc",
      "arch",
      "basename",
      "chroot",
      "date",
      "dirname",
      "du",
      "echo",
      "env",
      "expr",
      "factor",
      // "false", // keyword literal already
      "groups",
      "hostid",
      "id",
      "link",
      "logname",
      "nice",
      "nohup",
      "nproc",
      "pathchk",
      "pinky",
      "printenv",
      "printf",
      "pwd",
      "readlink",
      "runcon",
      "seq",
      "sleep",
      "stat",
      "stdbuf",
      "stty",
      "tee",
      "test",
      "timeout",
      // "true", // keyword literal already
      "tty",
      "uname",
      "unlink",
      "uptime",
      "users",
      "who",
      "whoami",
      "yes"
    ];
    return {
      name: "Bash",
      aliases: [
        "sh",
        "zsh"
      ],
      keywords: {
        $pattern: /\b[a-z][a-z0-9._-]+\b/,
        keyword: KEYWORDS2,
        literal: LITERALS2,
        built_in: [
          ...SHELL_BUILT_INS,
          ...BASH_BUILT_INS,
          // Shell modifiers
          "set",
          "shopt",
          ...ZSH_BUILT_INS,
          ...GNU_CORE_UTILS
        ]
      },
      contains: [
        KNOWN_SHEBANG,
        // to catch known shells and boost relevancy
        hljs.SHEBANG(),
        // to catch unknown shells but still highlight the shebang
        FUNCTION,
        ARITHMETIC,
        COMMENT2,
        HERE_DOC,
        PATH_MODE,
        QUOTE_STRING,
        ESCAPED_QUOTE,
        APOS_STRING,
        ESCAPED_APOS,
        VAR
      ]
    };
  }
  function c(hljs) {
    const regex = hljs.regex;
    const C_LINE_COMMENT_MODE2 = hljs.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] });
    const DECLTYPE_AUTO_RE = "decltype\\(auto\\)";
    const NAMESPACE_RE = "[a-zA-Z_]\\w*::";
    const TEMPLATE_ARGUMENT_RE = "<[^<>]+>";
    const FUNCTION_TYPE_RE = "(" + DECLTYPE_AUTO_RE + "|" + regex.optional(NAMESPACE_RE) + "[a-zA-Z_]\\w*" + regex.optional(TEMPLATE_ARGUMENT_RE) + ")";
    const TYPES2 = {
      className: "type",
      variants: [
        { begin: "\\b[a-z\\d_]*_t\\b" },
        { match: /\batomic_[a-z]{3,6}\b/ }
      ]
    };
    const CHARACTER_ESCAPES = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)";
    const STRINGS2 = {
      className: "string",
      variants: [
        {
          begin: '(u8?|U|L)?"',
          end: '"',
          illegal: "\\n",
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: "(u8?|U|L)?'(" + CHARACTER_ESCAPES + "|.)",
          end: "'",
          illegal: "."
        },
        hljs.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/
        })
      ]
    };
    const NUMBERS = {
      className: "number",
      variants: [
        { match: /\b(0b[01']+)/ },
        { match: /(-?)\b([\d']+(\.[\d']*)?|\.[\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)/ },
        { match: /(-?)\b(0[xX][a-fA-F0-9]+(?:'[a-fA-F0-9]+)*(?:\.[a-fA-F0-9]*(?:'[a-fA-F0-9]*)*)?(?:[pP][-+]?[0-9]+)?(l|L)?(u|U)?)/ },
        { match: /(-?)\b\d+(?:'\d+)*(?:\.\d*(?:'\d*)*)?(?:[eE][-+]?\d+)?/ }
      ],
      relevance: 0
    };
    const PREPROCESSOR = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef elifdef elifndef include" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        hljs.inherit(STRINGS2, { className: "string" }),
        {
          className: "string",
          begin: /<.*?>/
        },
        C_LINE_COMMENT_MODE2,
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
    const TITLE_MODE2 = {
      className: "title",
      begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,
      relevance: 0
    };
    const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + "\\s*\\(";
    const C_KEYWORDS = [
      "asm",
      "auto",
      "break",
      "case",
      "continue",
      "default",
      "do",
      "else",
      "enum",
      "extern",
      "for",
      "fortran",
      "goto",
      "if",
      "inline",
      "register",
      "restrict",
      "return",
      "sizeof",
      "typeof",
      "typeof_unqual",
      "struct",
      "switch",
      "typedef",
      "union",
      "volatile",
      "while",
      "_Alignas",
      "_Alignof",
      "_Atomic",
      "_Generic",
      "_Noreturn",
      "_Static_assert",
      "_Thread_local",
      // aliases
      "alignas",
      "alignof",
      "noreturn",
      "static_assert",
      "thread_local",
      // not a C keyword but is, for all intents and purposes, treated exactly like one.
      "_Pragma"
    ];
    const C_TYPES = [
      "float",
      "double",
      "signed",
      "unsigned",
      "int",
      "short",
      "long",
      "char",
      "void",
      "_Bool",
      "_BitInt",
      "_Complex",
      "_Imaginary",
      "_Decimal32",
      "_Decimal64",
      "_Decimal96",
      "_Decimal128",
      "_Decimal64x",
      "_Decimal128x",
      "_Float16",
      "_Float32",
      "_Float64",
      "_Float128",
      "_Float32x",
      "_Float64x",
      "_Float128x",
      // modifiers
      "const",
      "static",
      "constexpr",
      // aliases
      "complex",
      "bool",
      "imaginary"
    ];
    const KEYWORDS2 = {
      keyword: C_KEYWORDS,
      type: C_TYPES,
      literal: "true false NULL",
      // TODO: apply hinting work similar to what was done in cpp.js
      built_in: "std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr"
    };
    const EXPRESSION_CONTAINS = [
      PREPROCESSOR,
      TYPES2,
      C_LINE_COMMENT_MODE2,
      hljs.C_BLOCK_COMMENT_MODE,
      NUMBERS,
      STRINGS2
    ];
    const EXPRESSION_CONTEXT = {
      // This mode covers expression context where we can't expect a function
      // definition and shouldn't highlight anything that looks like one:
      // `return some()`, `else if()`, `(x*sum(1, 2))`
      variants: [
        {
          begin: /=/,
          end: /;/
        },
        {
          begin: /\(/,
          end: /\)/
        },
        {
          beginKeywords: "new throw return else",
          end: /;/
        }
      ],
      keywords: KEYWORDS2,
      contains: EXPRESSION_CONTAINS.concat([
        {
          begin: /\(/,
          end: /\)/,
          keywords: KEYWORDS2,
          contains: EXPRESSION_CONTAINS.concat(["self"]),
          relevance: 0
        }
      ]),
      relevance: 0
    };
    const FUNCTION_DECLARATION = {
      begin: "(" + FUNCTION_TYPE_RE + "[\\*&\\s]+)+" + FUNCTION_TITLE,
      returnBegin: true,
      end: /[{;=]/,
      excludeEnd: true,
      keywords: KEYWORDS2,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        {
          // to prevent it from being confused as the function title
          begin: DECLTYPE_AUTO_RE,
          keywords: KEYWORDS2,
          relevance: 0
        },
        {
          begin: FUNCTION_TITLE,
          returnBegin: true,
          contains: [hljs.inherit(TITLE_MODE2, { className: "title.function" })],
          relevance: 0
        },
        // allow for multiple declarations, e.g.:
        // extern void f(int), g(char);
        {
          relevance: 0,
          match: /,/
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: KEYWORDS2,
          relevance: 0,
          contains: [
            C_LINE_COMMENT_MODE2,
            hljs.C_BLOCK_COMMENT_MODE,
            STRINGS2,
            NUMBERS,
            TYPES2,
            // Count matching parentheses.
            {
              begin: /\(/,
              end: /\)/,
              keywords: KEYWORDS2,
              relevance: 0,
              contains: [
                "self",
                C_LINE_COMMENT_MODE2,
                hljs.C_BLOCK_COMMENT_MODE,
                STRINGS2,
                NUMBERS,
                TYPES2
              ]
            }
          ]
        },
        TYPES2,
        C_LINE_COMMENT_MODE2,
        hljs.C_BLOCK_COMMENT_MODE,
        PREPROCESSOR
      ]
    };
    return {
      name: "C",
      aliases: ["h"],
      keywords: KEYWORDS2,
      // Until differentiations are added between `c` and `cpp`, `c` will
      // not be auto-detected to avoid auto-detect conflicts between C and C++
      disableAutodetect: true,
      illegal: "</",
      contains: [].concat(
        EXPRESSION_CONTEXT,
        FUNCTION_DECLARATION,
        EXPRESSION_CONTAINS,
        [
          PREPROCESSOR,
          {
            begin: hljs.IDENT_RE + "::",
            keywords: KEYWORDS2
          },
          {
            className: "class",
            beginKeywords: "enum class struct union",
            end: /[{;:<>=]/,
            contains: [
              { beginKeywords: "final class struct" },
              hljs.TITLE_MODE
            ]
          }
        ]
      ),
      exports: {
        preprocessor: PREPROCESSOR,
        strings: STRINGS2,
        keywords: KEYWORDS2
      }
    };
  }
  function cpp(hljs) {
    const regex = hljs.regex;
    const C_LINE_COMMENT_MODE2 = hljs.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] });
    const DECLTYPE_AUTO_RE = "decltype\\(auto\\)";
    const NAMESPACE_RE = "[a-zA-Z_]\\w*::";
    const TEMPLATE_ARGUMENT_RE = "<[^<>]+>";
    const FUNCTION_TYPE_RE = "(?!struct)(" + DECLTYPE_AUTO_RE + "|" + regex.optional(NAMESPACE_RE) + "[a-zA-Z_]\\w*" + regex.optional(TEMPLATE_ARGUMENT_RE) + ")";
    const CPP_PRIMITIVE_TYPES = {
      className: "type",
      begin: "\\b[a-z\\d_]*_t\\b"
    };
    const CHARACTER_ESCAPES = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)";
    const STRINGS2 = {
      className: "string",
      variants: [
        {
          begin: '(u8?|U|L)?"',
          end: '"',
          illegal: "\\n",
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: "(u8?|U|L)?'(" + CHARACTER_ESCAPES + "|.)",
          end: "'",
          illegal: "."
        },
        hljs.END_SAME_AS_BEGIN({
          begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
          end: /\)([^()\\ ]{0,16})"/
        })
      ]
    };
    const NUMBERS = {
      className: "number",
      variants: [
        // Floating-point literal.
        {
          begin: "[+-]?(?:(?:[0-9](?:'?[0-9])*\\.(?:[0-9](?:'?[0-9])*)?|\\.[0-9](?:'?[0-9])*)(?:[Ee][+-]?[0-9](?:'?[0-9])*)?|[0-9](?:'?[0-9])*[Ee][+-]?[0-9](?:'?[0-9])*|0[Xx](?:[0-9A-Fa-f](?:'?[0-9A-Fa-f])*(?:\\.(?:[0-9A-Fa-f](?:'?[0-9A-Fa-f])*)?)?|\\.[0-9A-Fa-f](?:'?[0-9A-Fa-f])*)[Pp][+-]?[0-9](?:'?[0-9])*)(?:[Ff](?:16|32|64|128)?|(BF|bf)16|[Ll]|)"
        },
        // Integer literal.
        {
          begin: "[+-]?\\b(?:0[Bb][01](?:'?[01])*|0[Xx][0-9A-Fa-f](?:'?[0-9A-Fa-f])*|0(?:'?[0-7])*|[1-9](?:'?[0-9])*)(?:[Uu](?:LL?|ll?)|[Uu][Zz]?|(?:LL?|ll?)[Uu]?|[Zz][Uu]|)"
          // Note: there are user-defined literal suffixes too, but perhaps having the custom suffix not part of the
          // literal highlight actually makes it stand out more.
        }
      ],
      relevance: 0
    };
    const PREPROCESSOR = {
      className: "meta",
      begin: /#\s*[a-z]+\b/,
      end: /$/,
      keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
      contains: [
        {
          begin: /\\\n/,
          relevance: 0
        },
        hljs.inherit(STRINGS2, { className: "string" }),
        {
          className: "string",
          begin: /<.*?>/
        },
        C_LINE_COMMENT_MODE2,
        hljs.C_BLOCK_COMMENT_MODE
      ]
    };
    const TITLE_MODE2 = {
      className: "title",
      begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,
      relevance: 0
    };
    const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + "\\s*\\(";
    const RESERVED_KEYWORDS = [
      "alignas",
      "alignof",
      "and",
      "and_eq",
      "asm",
      "atomic_cancel",
      "atomic_commit",
      "atomic_noexcept",
      "auto",
      "bitand",
      "bitor",
      "break",
      "case",
      "catch",
      "class",
      "co_await",
      "co_return",
      "co_yield",
      "compl",
      "concept",
      "const_cast|10",
      "consteval",
      "constexpr",
      "constinit",
      "continue",
      "decltype",
      "default",
      "delete",
      "do",
      "dynamic_cast|10",
      "else",
      "enum",
      "explicit",
      "export",
      "extern",
      "false",
      "final",
      "for",
      "friend",
      "goto",
      "if",
      "import",
      "inline",
      "module",
      "mutable",
      "namespace",
      "new",
      "noexcept",
      "not",
      "not_eq",
      "nullptr",
      "operator",
      "or",
      "or_eq",
      "override",
      "private",
      "protected",
      "public",
      "reflexpr",
      "register",
      "reinterpret_cast|10",
      "requires",
      "return",
      "sizeof",
      "static_assert",
      "static_cast|10",
      "struct",
      "switch",
      "synchronized",
      "template",
      "this",
      "thread_local",
      "throw",
      "transaction_safe",
      "transaction_safe_dynamic",
      "true",
      "try",
      "typedef",
      "typeid",
      "typename",
      "union",
      "using",
      "virtual",
      "volatile",
      "while",
      "xor",
      "xor_eq"
    ];
    const RESERVED_TYPES = [
      "bool",
      "char",
      "char16_t",
      "char32_t",
      "char8_t",
      "double",
      "float",
      "int",
      "long",
      "short",
      "void",
      "wchar_t",
      "unsigned",
      "signed",
      "const",
      "static"
    ];
    const TYPE_HINTS = [
      "any",
      "auto_ptr",
      "barrier",
      "binary_semaphore",
      "bitset",
      "complex",
      "condition_variable",
      "condition_variable_any",
      "counting_semaphore",
      "deque",
      "false_type",
      "flat_map",
      "flat_set",
      "future",
      "imaginary",
      "initializer_list",
      "istringstream",
      "jthread",
      "latch",
      "lock_guard",
      "multimap",
      "multiset",
      "mutex",
      "optional",
      "ostringstream",
      "packaged_task",
      "pair",
      "promise",
      "priority_queue",
      "queue",
      "recursive_mutex",
      "recursive_timed_mutex",
      "scoped_lock",
      "set",
      "shared_future",
      "shared_lock",
      "shared_mutex",
      "shared_timed_mutex",
      "shared_ptr",
      "stack",
      "string_view",
      "stringstream",
      "timed_mutex",
      "thread",
      "true_type",
      "tuple",
      "unique_lock",
      "unique_ptr",
      "unordered_map",
      "unordered_multimap",
      "unordered_multiset",
      "unordered_set",
      "variant",
      "vector",
      "weak_ptr",
      "wstring",
      "wstring_view"
    ];
    const FUNCTION_HINTS = [
      "abort",
      "abs",
      "acos",
      "apply",
      "as_const",
      "asin",
      "atan",
      "atan2",
      "calloc",
      "ceil",
      "cerr",
      "cin",
      "clog",
      "cos",
      "cosh",
      "cout",
      "declval",
      "endl",
      "exchange",
      "exit",
      "exp",
      "fabs",
      "floor",
      "fmod",
      "forward",
      "fprintf",
      "fputs",
      "free",
      "frexp",
      "fscanf",
      "future",
      "invoke",
      "isalnum",
      "isalpha",
      "iscntrl",
      "isdigit",
      "isgraph",
      "islower",
      "isprint",
      "ispunct",
      "isspace",
      "isupper",
      "isxdigit",
      "labs",
      "launder",
      "ldexp",
      "log",
      "log10",
      "make_pair",
      "make_shared",
      "make_shared_for_overwrite",
      "make_tuple",
      "make_unique",
      "malloc",
      "memchr",
      "memcmp",
      "memcpy",
      "memset",
      "modf",
      "move",
      "pow",
      "printf",
      "putchar",
      "puts",
      "realloc",
      "scanf",
      "sin",
      "sinh",
      "snprintf",
      "sprintf",
      "sqrt",
      "sscanf",
      "std",
      "stderr",
      "stdin",
      "stdout",
      "strcat",
      "strchr",
      "strcmp",
      "strcpy",
      "strcspn",
      "strlen",
      "strncat",
      "strncmp",
      "strncpy",
      "strpbrk",
      "strrchr",
      "strspn",
      "strstr",
      "swap",
      "tan",
      "tanh",
      "terminate",
      "to_underlying",
      "tolower",
      "toupper",
      "vfprintf",
      "visit",
      "vprintf",
      "vsprintf"
    ];
    const LITERALS2 = [
      "NULL",
      "false",
      "nullopt",
      "nullptr",
      "true"
    ];
    const BUILT_IN = ["_Pragma"];
    const CPP_KEYWORDS = {
      type: RESERVED_TYPES,
      keyword: RESERVED_KEYWORDS,
      literal: LITERALS2,
      built_in: BUILT_IN,
      _type_hints: TYPE_HINTS
    };
    const FUNCTION_DISPATCH = {
      className: "function.dispatch",
      relevance: 0,
      keywords: {
        // Only for relevance, not highlighting.
        _hint: FUNCTION_HINTS
      },
      begin: regex.concat(
        /\b/,
        /(?!decltype)/,
        /(?!if)/,
        /(?!for)/,
        /(?!switch)/,
        /(?!while)/,
        hljs.IDENT_RE,
        regex.lookahead(/(<[^<>]+>|)\s*\(/)
      )
    };
    const EXPRESSION_CONTAINS = [
      FUNCTION_DISPATCH,
      PREPROCESSOR,
      CPP_PRIMITIVE_TYPES,
      C_LINE_COMMENT_MODE2,
      hljs.C_BLOCK_COMMENT_MODE,
      NUMBERS,
      STRINGS2
    ];
    const EXPRESSION_CONTEXT = {
      // This mode covers expression context where we can't expect a function
      // definition and shouldn't highlight anything that looks like one:
      // `return some()`, `else if()`, `(x*sum(1, 2))`
      variants: [
        {
          begin: /=/,
          end: /;/
        },
        {
          begin: /\(/,
          end: /\)/
        },
        {
          beginKeywords: "new throw return else",
          end: /;/
        }
      ],
      keywords: CPP_KEYWORDS,
      contains: EXPRESSION_CONTAINS.concat([
        {
          begin: /\(/,
          end: /\)/,
          keywords: CPP_KEYWORDS,
          contains: EXPRESSION_CONTAINS.concat(["self"]),
          relevance: 0
        }
      ]),
      relevance: 0
    };
    const FUNCTION_DECLARATION = {
      className: "function",
      begin: "(" + FUNCTION_TYPE_RE + "[\\*&\\s]+)+" + FUNCTION_TITLE,
      returnBegin: true,
      end: /[{;=]/,
      excludeEnd: true,
      keywords: CPP_KEYWORDS,
      illegal: /[^\w\s\*&:<>.]/,
      contains: [
        {
          // to prevent it from being confused as the function title
          begin: DECLTYPE_AUTO_RE,
          keywords: CPP_KEYWORDS,
          relevance: 0
        },
        {
          begin: FUNCTION_TITLE,
          returnBegin: true,
          contains: [TITLE_MODE2],
          relevance: 0
        },
        // needed because we do not have look-behind on the below rule
        // to prevent it from grabbing the final : in a :: pair
        {
          begin: /::/,
          relevance: 0
        },
        // initializers
        {
          begin: /:/,
          endsWithParent: true,
          contains: [
            STRINGS2,
            NUMBERS
          ]
        },
        // allow for multiple declarations, e.g.:
        // extern void f(int), g(char);
        {
          relevance: 0,
          match: /,/
        },
        {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: CPP_KEYWORDS,
          relevance: 0,
          contains: [
            C_LINE_COMMENT_MODE2,
            hljs.C_BLOCK_COMMENT_MODE,
            STRINGS2,
            NUMBERS,
            CPP_PRIMITIVE_TYPES,
            // Count matching parentheses.
            {
              begin: /\(/,
              end: /\)/,
              keywords: CPP_KEYWORDS,
              relevance: 0,
              contains: [
                "self",
                C_LINE_COMMENT_MODE2,
                hljs.C_BLOCK_COMMENT_MODE,
                STRINGS2,
                NUMBERS,
                CPP_PRIMITIVE_TYPES
              ]
            }
          ]
        },
        CPP_PRIMITIVE_TYPES,
        C_LINE_COMMENT_MODE2,
        hljs.C_BLOCK_COMMENT_MODE,
        PREPROCESSOR
      ]
    };
    return {
      name: "C++",
      aliases: [
        "cc",
        "c++",
        "h++",
        "hpp",
        "hh",
        "hxx",
        "cxx"
      ],
      keywords: CPP_KEYWORDS,
      illegal: "</",
      classNameAliases: { "function.dispatch": "built_in" },
      contains: [].concat(
        EXPRESSION_CONTEXT,
        FUNCTION_DECLARATION,
        FUNCTION_DISPATCH,
        EXPRESSION_CONTAINS,
        [
          PREPROCESSOR,
          {
            // containers: ie, `vector <int> rooms (9);`
            begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function|flat_map|flat_set)\\s*<(?!<)",
            end: ">",
            keywords: CPP_KEYWORDS,
            contains: [
              "self",
              CPP_PRIMITIVE_TYPES
            ]
          },
          {
            begin: hljs.IDENT_RE + "::",
            keywords: CPP_KEYWORDS
          },
          {
            match: [
              // extra complexity to deal with `enum class` and `enum struct`
              /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
              /\s+/,
              /\w+/
            ],
            className: {
              1: "keyword",
              3: "title.class"
            }
          }
        ]
      )
    };
  }
  function csharp(hljs) {
    const BUILT_IN_KEYWORDS = [
      "bool",
      "byte",
      "char",
      "decimal",
      "delegate",
      "double",
      "dynamic",
      "enum",
      "float",
      "int",
      "long",
      "nint",
      "nuint",
      "object",
      "sbyte",
      "short",
      "string",
      "ulong",
      "uint",
      "ushort"
    ];
    const FUNCTION_MODIFIERS = [
      "public",
      "private",
      "protected",
      "static",
      "internal",
      "protected",
      "abstract",
      "async",
      "extern",
      "override",
      "unsafe",
      "virtual",
      "new",
      "sealed",
      "partial"
    ];
    const LITERAL_KEYWORDS = [
      "default",
      "false",
      "null",
      "true"
    ];
    const NORMAL_KEYWORDS = [
      "abstract",
      "as",
      "base",
      "break",
      "case",
      "catch",
      "class",
      "const",
      "continue",
      "do",
      "else",
      "event",
      "explicit",
      "extern",
      "finally",
      "fixed",
      "for",
      "foreach",
      "goto",
      "if",
      "implicit",
      "in",
      "interface",
      "internal",
      "is",
      "lock",
      "namespace",
      "new",
      "operator",
      "out",
      "override",
      "params",
      "private",
      "protected",
      "public",
      "readonly",
      "record",
      "ref",
      "return",
      "scoped",
      "sealed",
      "sizeof",
      "stackalloc",
      "static",
      "struct",
      "switch",
      "this",
      "throw",
      "try",
      "typeof",
      "unchecked",
      "unsafe",
      "using",
      "virtual",
      "void",
      "volatile",
      "while"
    ];
    const CONTEXTUAL_KEYWORDS = [
      "add",
      "alias",
      "and",
      "ascending",
      "args",
      "async",
      "await",
      "by",
      "descending",
      "dynamic",
      "equals",
      "file",
      "from",
      "get",
      "global",
      "group",
      "init",
      "into",
      "join",
      "let",
      "nameof",
      "not",
      "notnull",
      "on",
      "or",
      "orderby",
      "partial",
      "record",
      "remove",
      "required",
      "scoped",
      "select",
      "set",
      "unmanaged",
      "value|0",
      "var",
      "when",
      "where",
      "with",
      "yield"
    ];
    const KEYWORDS2 = {
      keyword: NORMAL_KEYWORDS.concat(CONTEXTUAL_KEYWORDS),
      built_in: BUILT_IN_KEYWORDS,
      literal: LITERAL_KEYWORDS
    };
    const TITLE_MODE2 = hljs.inherit(hljs.TITLE_MODE, { begin: "[a-zA-Z](\\.?\\w)*" });
    const NUMBERS = {
      className: "number",
      variants: [
        { begin: "\\b(0b[01']+)" },
        { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)" },
        { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
      ],
      relevance: 0
    };
    const RAW_STRING = {
      className: "string",
      begin: /"""("*)(?!")(.|\n)*?"""\1/,
      relevance: 1
    };
    const VERBATIM_STRING = {
      className: "string",
      begin: '@"',
      end: '"',
      contains: [{ begin: '""' }]
    };
    const VERBATIM_STRING_NO_LF = hljs.inherit(VERBATIM_STRING, { illegal: /\n/ });
    const SUBST = {
      className: "subst",
      begin: /\{/,
      end: /\}/,
      keywords: KEYWORDS2
    };
    const SUBST_NO_LF = hljs.inherit(SUBST, { illegal: /\n/ });
    const INTERPOLATED_STRING = {
      className: "string",
      begin: /\$"/,
      end: '"',
      illegal: /\n/,
      contains: [
        { begin: /\{\{/ },
        { begin: /\}\}/ },
        hljs.BACKSLASH_ESCAPE,
        SUBST_NO_LF
      ]
    };
    const INTERPOLATED_VERBATIM_STRING = {
      className: "string",
      begin: /\$@"/,
      end: '"',
      contains: [
        { begin: /\{\{/ },
        { begin: /\}\}/ },
        { begin: '""' },
        SUBST
      ]
    };
    const INTERPOLATED_VERBATIM_STRING_NO_LF = hljs.inherit(INTERPOLATED_VERBATIM_STRING, {
      illegal: /\n/,
      contains: [
        { begin: /\{\{/ },
        { begin: /\}\}/ },
        { begin: '""' },
        SUBST_NO_LF
      ]
    });
    SUBST.contains = [
      INTERPOLATED_VERBATIM_STRING,
      INTERPOLATED_STRING,
      VERBATIM_STRING,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      NUMBERS,
      hljs.C_BLOCK_COMMENT_MODE
    ];
    SUBST_NO_LF.contains = [
      INTERPOLATED_VERBATIM_STRING_NO_LF,
      INTERPOLATED_STRING,
      VERBATIM_STRING_NO_LF,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      NUMBERS,
      hljs.inherit(hljs.C_BLOCK_COMMENT_MODE, { illegal: /\n/ })
    ];
    const STRING = { variants: [
      RAW_STRING,
      INTERPOLATED_VERBATIM_STRING,
      INTERPOLATED_STRING,
      VERBATIM_STRING,
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE
    ] };
    const GENERIC_MODIFIER = {
      begin: "<",
      end: ">",
      contains: [
        { beginKeywords: "in out" },
        TITLE_MODE2
      ]
    };
    const TYPE_IDENT_RE = hljs.IDENT_RE + "(<" + hljs.IDENT_RE + "(\\s*,\\s*" + hljs.IDENT_RE + ")*>)?(\\[\\])?";
    const AT_IDENTIFIER = {
      // prevents expressions like `@class` from incorrect flagging
      // `class` as a keyword
      begin: "@" + hljs.IDENT_RE,
      relevance: 0
    };
    return {
      name: "C#",
      aliases: [
        "cs",
        "c#"
      ],
      keywords: KEYWORDS2,
      illegal: /::/,
      contains: [
        hljs.COMMENT(
          "///",
          "$",
          {
            returnBegin: true,
            contains: [
              {
                className: "doctag",
                variants: [
                  {
                    begin: "///",
                    relevance: 0
                  },
                  { begin: "<!--|-->" },
                  {
                    begin: "</?",
                    end: ">"
                  }
                ]
              }
            ]
          }
        ),
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "meta",
          begin: "#",
          end: "$",
          keywords: { keyword: "if else elif endif define undef warning error line region endregion pragma checksum" }
        },
        STRING,
        NUMBERS,
        {
          beginKeywords: "class interface",
          relevance: 0,
          end: /[{;=]/,
          illegal: /[^\s:,]/,
          contains: [
            { beginKeywords: "where class" },
            TITLE_MODE2,
            GENERIC_MODIFIER,
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          beginKeywords: "namespace",
          relevance: 0,
          end: /[{;=]/,
          illegal: /[^\s:]/,
          contains: [
            TITLE_MODE2,
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          beginKeywords: "record",
          relevance: 0,
          end: /[{;=]/,
          illegal: /[^\s:]/,
          contains: [
            TITLE_MODE2,
            GENERIC_MODIFIER,
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          // [Attributes("")]
          className: "meta",
          begin: "^\\s*\\[(?=[\\w])",
          excludeBegin: true,
          end: "\\]",
          excludeEnd: true,
          contains: [
            {
              className: "string",
              begin: /"/,
              end: /"/
            }
          ]
        },
        {
          // Expression keywords prevent 'keyword Name(...)' from being
          // recognized as a function definition
          beginKeywords: "new return throw await else",
          relevance: 0
        },
        {
          className: "function",
          begin: "(" + TYPE_IDENT_RE + "\\s+)+" + hljs.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
          returnBegin: true,
          end: /\s*[{;=]/,
          excludeEnd: true,
          keywords: KEYWORDS2,
          contains: [
            // prevents these from being highlighted `title`
            {
              beginKeywords: FUNCTION_MODIFIERS.join(" "),
              relevance: 0
            },
            {
              begin: hljs.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
              returnBegin: true,
              contains: [
                hljs.TITLE_MODE,
                GENERIC_MODIFIER
              ],
              relevance: 0
            },
            { match: /\(\)/ },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              excludeBegin: true,
              excludeEnd: true,
              keywords: KEYWORDS2,
              relevance: 0,
              contains: [
                STRING,
                NUMBERS,
                hljs.C_BLOCK_COMMENT_MODE
              ]
            },
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        AT_IDENTIFIER
      ]
    };
  }
  const MODES$3 = (hljs) => {
    return {
      IMPORTANT: {
        scope: "meta",
        begin: "!important"
      },
      BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
      HEXCOLOR: {
        scope: "number",
        begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
      },
      FUNCTION_DISPATCH: {
        className: "built_in",
        begin: /[\w-]+(?=\()/
      },
      ATTRIBUTE_SELECTOR_MODE: {
        scope: "selector-attr",
        begin: /\[/,
        end: /\]/,
        illegal: "$",
        contains: [
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE
        ]
      },
      CSS_NUMBER_MODE: {
        scope: "number",
        begin: hljs.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
        relevance: 0
      },
      CSS_VARIABLE: {
        className: "attr",
        begin: /--[A-Za-z_][A-Za-z0-9_-]*/
      }
    };
  };
  const HTML_TAGS$2 = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "optgroup",
    "option",
    "p",
    "picture",
    "q",
    "quote",
    "samp",
    "section",
    "select",
    "source",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ];
  const SVG_TAGS$2 = [
    "defs",
    "g",
    "marker",
    "mask",
    "pattern",
    "svg",
    "switch",
    "symbol",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feFlood",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMorphology",
    "feOffset",
    "feSpecularLighting",
    "feTile",
    "feTurbulence",
    "linearGradient",
    "radialGradient",
    "stop",
    "circle",
    "ellipse",
    "image",
    "line",
    "path",
    "polygon",
    "polyline",
    "rect",
    "text",
    "use",
    "textPath",
    "tspan",
    "foreignObject",
    "clipPath"
  ];
  const TAGS$2 = [
    ...HTML_TAGS$2,
    ...SVG_TAGS$2
  ];
  const MEDIA_FEATURES$2 = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    // TODO: find a better solution?
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ].sort().reverse();
  const PSEUDO_CLASSES$2 = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    // dir()
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    // has()
    "host",
    // host or host()
    "host-context",
    // host-context()
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    // is()
    "lang",
    // lang()
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    // not()
    "nth-child",
    // nth-child()
    "nth-col",
    // nth-col()
    "nth-last-child",
    // nth-last-child()
    "nth-last-col",
    // nth-last-col()
    "nth-last-of-type",
    //nth-last-of-type()
    "nth-of-type",
    //nth-of-type()
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
    // where()
  ].sort().reverse();
  const PSEUDO_ELEMENTS$2 = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ].sort().reverse();
  const ATTRIBUTES$2 = [
    "accent-color",
    "align-content",
    "align-items",
    "align-self",
    "alignment-baseline",
    "all",
    "anchor-name",
    "animation",
    "animation-composition",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-range",
    "animation-range-end",
    "animation-range-start",
    "animation-timeline",
    "animation-timing-function",
    "appearance",
    "aspect-ratio",
    "backdrop-filter",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-position-x",
    "background-position-y",
    "background-repeat",
    "background-size",
    "baseline-shift",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-end-end-radius",
    "border-end-start-radius",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-start-end-radius",
    "border-start-start-radius",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-align",
    "box-decoration-break",
    "box-direction",
    "box-flex",
    "box-flex-group",
    "box-lines",
    "box-ordinal-group",
    "box-orient",
    "box-pack",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "color-interpolation",
    "color-interpolation-filters",
    "color-profile",
    "color-rendering",
    "color-scheme",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "contain-intrinsic-block-size",
    "contain-intrinsic-height",
    "contain-intrinsic-inline-size",
    "contain-intrinsic-size",
    "contain-intrinsic-width",
    "container",
    "container-name",
    "container-type",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "counter-set",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "cx",
    "cy",
    "direction",
    "display",
    "dominant-baseline",
    "empty-cells",
    "enable-background",
    "field-sizing",
    "fill",
    "fill-opacity",
    "fill-rule",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flood-color",
    "flood-opacity",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-optical-sizing",
    "font-palette",
    "font-size",
    "font-size-adjust",
    "font-smooth",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-synthesis-position",
    "font-synthesis-small-caps",
    "font-synthesis-style",
    "font-synthesis-weight",
    "font-variant",
    "font-variant-alternates",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-emoji",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "forced-color-adjust",
    "gap",
    "glyph-orientation-horizontal",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphenate-character",
    "hyphenate-limit-chars",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "initial-letter",
    "initial-letter-align",
    "inline-size",
    "inset",
    "inset-area",
    "inset-block",
    "inset-block-end",
    "inset-block-start",
    "inset-inline",
    "inset-inline-end",
    "inset-inline-start",
    "isolation",
    "justify-content",
    "justify-items",
    "justify-self",
    "kerning",
    "left",
    "letter-spacing",
    "lighting-color",
    "line-break",
    "line-height",
    "line-height-step",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "margin-trim",
    "marker",
    "marker-end",
    "marker-mid",
    "marker-start",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "masonry-auto-flow",
    "math-depth",
    "math-shift",
    "math-style",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "offset",
    "offset-anchor",
    "offset-distance",
    "offset-path",
    "offset-position",
    "offset-rotate",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-anchor",
    "overflow-block",
    "overflow-clip-margin",
    "overflow-inline",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "overlay",
    "overscroll-behavior",
    "overscroll-behavior-block",
    "overscroll-behavior-inline",
    "overscroll-behavior-x",
    "overscroll-behavior-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "paint-order",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "place-content",
    "place-items",
    "place-self",
    "pointer-events",
    "position",
    "position-anchor",
    "position-visibility",
    "print-color-adjust",
    "quotes",
    "r",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "rotate",
    "row-gap",
    "ruby-align",
    "ruby-position",
    "scale",
    "scroll-behavior",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scroll-timeline",
    "scroll-timeline-axis",
    "scroll-timeline-name",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "shape-rendering",
    "speak",
    "speak-as",
    "src",
    // @font-face
    "stop-color",
    "stop-opacity",
    "stroke",
    "stroke-dasharray",
    "stroke-dashoffset",
    "stroke-linecap",
    "stroke-linejoin",
    "stroke-miterlimit",
    "stroke-opacity",
    "stroke-width",
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-anchor",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-skip",
    "text-decoration-skip-ink",
    "text-decoration-style",
    "text-decoration-thickness",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-size-adjust",
    "text-transform",
    "text-underline-offset",
    "text-underline-position",
    "text-wrap",
    "text-wrap-mode",
    "text-wrap-style",
    "timeline-scope",
    "top",
    "touch-action",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-behavior",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "translate",
    "unicode-bidi",
    "user-modify",
    "user-select",
    "vector-effect",
    "vertical-align",
    "view-timeline",
    "view-timeline-axis",
    "view-timeline-inset",
    "view-timeline-name",
    "view-transition-name",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "white-space-collapse",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "x",
    "y",
    "z-index",
    "zoom"
  ].sort().reverse();
  function css(hljs) {
    const regex = hljs.regex;
    const modes = MODES$3(hljs);
    const VENDOR_PREFIX = { begin: /-(webkit|moz|ms|o)-(?=[a-z])/ };
    const AT_MODIFIERS = "and or not only";
    const AT_PROPERTY_RE = /@-?\w[\w]*(-\w+)*/;
    const IDENT_RE2 = "[a-zA-Z-][a-zA-Z0-9_-]*";
    const STRINGS2 = [
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE
    ];
    return {
      name: "CSS",
      case_insensitive: true,
      illegal: /[=|'\$]/,
      keywords: { keyframePosition: "from to" },
      classNameAliases: {
        // for visual continuity with `tag {}` and because we
        // don't have a great class for this?
        keyframePosition: "selector-tag"
      },
      contains: [
        modes.BLOCK_COMMENT,
        VENDOR_PREFIX,
        // to recognize keyframe 40% etc which are outside the scope of our
        // attribute value mode
        modes.CSS_NUMBER_MODE,
        {
          className: "selector-id",
          begin: /#[A-Za-z0-9_-]+/,
          relevance: 0
        },
        {
          className: "selector-class",
          begin: "\\." + IDENT_RE2,
          relevance: 0
        },
        modes.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "selector-pseudo",
          variants: [
            { begin: ":(" + PSEUDO_CLASSES$2.join("|") + ")" },
            { begin: ":(:)?(" + PSEUDO_ELEMENTS$2.join("|") + ")" }
          ]
        },
        // we may actually need this (12/2020)
        // { // pseudo-selector params
        //   begin: /\(/,
        //   end: /\)/,
        //   contains: [ hljs.CSS_NUMBER_MODE ]
        // },
        modes.CSS_VARIABLE,
        {
          className: "attribute",
          begin: "\\b(" + ATTRIBUTES$2.join("|") + ")\\b"
        },
        // attribute values
        {
          begin: /:/,
          end: /[;}{]/,
          contains: [
            modes.BLOCK_COMMENT,
            modes.HEXCOLOR,
            modes.IMPORTANT,
            modes.CSS_NUMBER_MODE,
            ...STRINGS2,
            // needed to highlight these as strings and to avoid issues with
            // illegal characters that might be inside urls that would tigger the
            // languages illegal stack
            {
              begin: /(url|data-uri)\(/,
              end: /\)/,
              relevance: 0,
              // from keywords
              keywords: { built_in: "url data-uri" },
              contains: [
                ...STRINGS2,
                {
                  className: "string",
                  // any character other than `)` as in `url()` will be the start
                  // of a string, which ends with `)` (from the parent mode)
                  begin: /[^)]/,
                  endsWithParent: true,
                  excludeEnd: true
                }
              ]
            },
            modes.FUNCTION_DISPATCH
          ]
        },
        {
          begin: regex.lookahead(/@/),
          end: "[{;]",
          relevance: 0,
          illegal: /:/,
          // break on Less variables @var: ...
          contains: [
            {
              className: "keyword",
              begin: AT_PROPERTY_RE
            },
            {
              begin: /\s/,
              endsWithParent: true,
              excludeEnd: true,
              relevance: 0,
              keywords: {
                $pattern: /[a-z-]+/,
                keyword: AT_MODIFIERS,
                attribute: MEDIA_FEATURES$2.join(" ")
              },
              contains: [
                {
                  begin: /[a-z-]+(?=:)/,
                  className: "attribute"
                },
                ...STRINGS2,
                modes.CSS_NUMBER_MODE
              ]
            }
          ]
        },
        {
          className: "selector-tag",
          begin: "\\b(" + TAGS$2.join("|") + ")\\b"
        }
      ]
    };
  }
  function diff(hljs) {
    const regex = hljs.regex;
    return {
      name: "Diff",
      aliases: ["patch"],
      contains: [
        {
          className: "meta",
          relevance: 10,
          match: regex.either(
            /^@@ +-\d+,\d+ +\+\d+,\d+ +@@/,
            /^\*\*\* +\d+,\d+ +\*\*\*\*$/,
            /^--- +\d+,\d+ +----$/
          )
        },
        {
          className: "comment",
          variants: [
            {
              begin: regex.either(
                /Index: /,
                /^index/,
                /={3,}/,
                /^-{3}/,
                /^\*{3} /,
                /^\+{3}/,
                /^diff --git/
              ),
              end: /$/
            },
            { match: /^\*{15}$/ }
          ]
        },
        {
          className: "addition",
          begin: /^\+/,
          end: /$/
        },
        {
          className: "deletion",
          begin: /^-/,
          end: /$/
        },
        {
          className: "addition",
          begin: /^!/,
          end: /$/
        }
      ]
    };
  }
  function go(hljs) {
    const LITERALS2 = [
      "true",
      "false",
      "iota",
      "nil"
    ];
    const BUILT_INS2 = [
      "append",
      "cap",
      "close",
      "complex",
      "copy",
      "imag",
      "len",
      "make",
      "new",
      "panic",
      "print",
      "println",
      "real",
      "recover",
      "delete"
    ];
    const TYPES2 = [
      "bool",
      "byte",
      "complex64",
      "complex128",
      "error",
      "float32",
      "float64",
      "int8",
      "int16",
      "int32",
      "int64",
      "string",
      "uint8",
      "uint16",
      "uint32",
      "uint64",
      "int",
      "uint",
      "uintptr",
      "rune"
    ];
    const KWS = [
      "break",
      "case",
      "chan",
      "const",
      "continue",
      "default",
      "defer",
      "else",
      "fallthrough",
      "for",
      "func",
      "go",
      "goto",
      "if",
      "import",
      "interface",
      "map",
      "package",
      "range",
      "return",
      "select",
      "struct",
      "switch",
      "type",
      "var"
    ];
    const KEYWORDS2 = {
      keyword: KWS,
      type: TYPES2,
      literal: LITERALS2,
      built_in: BUILT_INS2
    };
    return {
      name: "Go",
      aliases: ["golang"],
      keywords: KEYWORDS2,
      illegal: "</",
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: "string",
          variants: [
            hljs.QUOTE_STRING_MODE,
            hljs.APOS_STRING_MODE,
            {
              begin: "`",
              end: "`"
            }
          ]
        },
        {
          className: "number",
          variants: [
            {
              match: /-?\b0[xX]\.[a-fA-F0-9](_?[a-fA-F0-9])*[pP][+-]?\d(_?\d)*i?/,
              // hex without a present digit before . (making a digit afterwards required)
              relevance: 0
            },
            {
              match: /-?\b0[xX](_?[a-fA-F0-9])+((\.([a-fA-F0-9](_?[a-fA-F0-9])*)?)?[pP][+-]?\d(_?\d)*)?i?/,
              // hex with a present digit before . (making a digit afterwards optional)
              relevance: 0
            },
            {
              match: /-?\b0[oO](_?[0-7])*i?/,
              // leading 0o octal
              relevance: 0
            },
            {
              match: /-?\.\d(_?\d)*([eE][+-]?\d(_?\d)*)?i?/,
              // decimal without a present digit before . (making a digit afterwards required)
              relevance: 0
            },
            {
              match: /-?\b\d(_?\d)*(\.(\d(_?\d)*)?)?([eE][+-]?\d(_?\d)*)?i?/,
              // decimal with a present digit before . (making a digit afterwards optional)
              relevance: 0
            }
          ]
        },
        {
          begin: /:=/
          // relevance booster
        },
        {
          className: "function",
          beginKeywords: "func",
          end: "\\s*(\\{|$)",
          excludeEnd: true,
          contains: [
            hljs.TITLE_MODE,
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              endsParent: true,
              keywords: KEYWORDS2,
              illegal: /["']/
            }
          ]
        }
      ]
    };
  }
  function graphql(hljs) {
    const regex = hljs.regex;
    const GQL_NAME = /[_A-Za-z][_0-9A-Za-z]*/;
    return {
      name: "GraphQL",
      aliases: ["gql"],
      case_insensitive: true,
      disableAutodetect: false,
      keywords: {
        keyword: [
          "query",
          "mutation",
          "subscription",
          "type",
          "input",
          "schema",
          "directive",
          "interface",
          "union",
          "scalar",
          "fragment",
          "enum",
          "on"
        ],
        literal: [
          "true",
          "false",
          "null"
        ]
      },
      contains: [
        hljs.HASH_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.NUMBER_MODE,
        {
          scope: "punctuation",
          match: /[.]{3}/,
          relevance: 0
        },
        {
          scope: "punctuation",
          begin: /[\!\(\)\:\=\[\]\{\|\}]{1}/,
          relevance: 0
        },
        {
          scope: "variable",
          begin: /\$/,
          end: /\W/,
          excludeEnd: true,
          relevance: 0
        },
        {
          scope: "meta",
          match: /@\w+/,
          excludeEnd: true
        },
        {
          scope: "symbol",
          begin: regex.concat(GQL_NAME, regex.lookahead(/\s*:/)),
          relevance: 0
        }
      ],
      illegal: [
        /[;<']/,
        /BEGIN/
      ]
    };
  }
  function ini(hljs) {
    const regex = hljs.regex;
    const NUMBERS = {
      className: "number",
      relevance: 0,
      variants: [
        { begin: /([+-]+)?[\d]+_[\d_]+/ },
        { begin: hljs.NUMBER_RE }
      ]
    };
    const COMMENTS = hljs.COMMENT();
    COMMENTS.variants = [
      {
        begin: /;/,
        end: /$/
      },
      {
        begin: /#/,
        end: /$/
      }
    ];
    const VARIABLES = {
      className: "variable",
      variants: [
        { begin: /\$[\w\d"][\w\d_]*/ },
        { begin: /\$\{(.*?)\}/ }
      ]
    };
    const LITERALS2 = {
      className: "literal",
      begin: /\bon|off|true|false|yes|no\b/
    };
    const STRINGS2 = {
      className: "string",
      contains: [hljs.BACKSLASH_ESCAPE],
      variants: [
        {
          begin: "'''",
          end: "'''",
          relevance: 10
        },
        {
          begin: '"""',
          end: '"""',
          relevance: 10
        },
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "'",
          end: "'"
        }
      ]
    };
    const ARRAY = {
      begin: /\[/,
      end: /\]/,
      contains: [
        COMMENTS,
        LITERALS2,
        VARIABLES,
        STRINGS2,
        NUMBERS,
        "self"
      ],
      relevance: 0
    };
    const BARE_KEY = /[A-Za-z0-9_-]+/;
    const QUOTED_KEY_DOUBLE_QUOTE = /"(\\"|[^"])*"/;
    const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;
    const ANY_KEY = regex.either(
      BARE_KEY,
      QUOTED_KEY_DOUBLE_QUOTE,
      QUOTED_KEY_SINGLE_QUOTE
    );
    const DOTTED_KEY = regex.concat(
      ANY_KEY,
      "(\\s*\\.\\s*",
      ANY_KEY,
      ")*",
      regex.lookahead(/\s*=\s*[^#\s]/)
    );
    return {
      name: "TOML, also INI",
      aliases: ["toml"],
      case_insensitive: true,
      illegal: /\S/,
      contains: [
        COMMENTS,
        {
          className: "section",
          begin: /\[+/,
          end: /\]+/
        },
        {
          begin: DOTTED_KEY,
          className: "attr",
          starts: {
            end: /$/,
            contains: [
              COMMENTS,
              ARRAY,
              LITERALS2,
              VARIABLES,
              STRINGS2,
              NUMBERS
            ]
          }
        }
      ]
    };
  }
  var decimalDigits$1 = "[0-9](_*[0-9])*";
  var frac$1 = `\\.(${decimalDigits$1})`;
  var hexDigits$1 = "[0-9a-fA-F](_*[0-9a-fA-F])*";
  var NUMERIC$1 = {
    className: "number",
    variants: [
      // DecimalFloatingPointLiteral
      // including ExponentPart
      { begin: `(\\b(${decimalDigits$1})((${frac$1})|\\.)?|(${frac$1}))[eE][+-]?(${decimalDigits$1})[fFdD]?\\b` },
      // excluding ExponentPart
      { begin: `\\b(${decimalDigits$1})((${frac$1})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
      { begin: `(${frac$1})[fFdD]?\\b` },
      { begin: `\\b(${decimalDigits$1})[fFdD]\\b` },
      // HexadecimalFloatingPointLiteral
      { begin: `\\b0[xX]((${hexDigits$1})\\.?|(${hexDigits$1})?\\.(${hexDigits$1}))[pP][+-]?(${decimalDigits$1})[fFdD]?\\b` },
      // DecimalIntegerLiteral
      { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
      // HexIntegerLiteral
      { begin: `\\b0[xX](${hexDigits$1})[lL]?\\b` },
      // OctalIntegerLiteral
      { begin: "\\b0(_*[0-7])*[lL]?\\b" },
      // BinaryIntegerLiteral
      { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
    ],
    relevance: 0
  };
  function recurRegex(re, substitution, depth) {
    if (depth === -1)
      return "";
    return re.replace(substitution, (_) => {
      return recurRegex(re, substitution, depth - 1);
    });
  }
  function java(hljs) {
    const regex = hljs.regex;
    const JAVA_IDENT_RE = "[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*";
    const GENERIC_IDENT_RE = JAVA_IDENT_RE + recurRegex("(?:<" + JAVA_IDENT_RE + "~~~(?:\\s*,\\s*" + JAVA_IDENT_RE + "~~~)*>)?", /~~~/g, 2);
    const MAIN_KEYWORDS = [
      "synchronized",
      "abstract",
      "private",
      "var",
      "static",
      "if",
      "const ",
      "for",
      "while",
      "strictfp",
      "finally",
      "protected",
      "import",
      "native",
      "final",
      "void",
      "enum",
      "else",
      "break",
      "transient",
      "catch",
      "instanceof",
      "volatile",
      "case",
      "assert",
      "package",
      "default",
      "public",
      "try",
      "switch",
      "continue",
      "throws",
      "protected",
      "public",
      "private",
      "module",
      "requires",
      "exports",
      "do",
      "sealed",
      "yield",
      "permits",
      "goto",
      "when"
    ];
    const BUILT_INS2 = [
      "super",
      "this"
    ];
    const LITERALS2 = [
      "false",
      "true",
      "null"
    ];
    const TYPES2 = [
      "char",
      "boolean",
      "long",
      "float",
      "int",
      "byte",
      "short",
      "double"
    ];
    const KEYWORDS2 = {
      keyword: MAIN_KEYWORDS,
      literal: LITERALS2,
      type: TYPES2,
      built_in: BUILT_INS2
    };
    const ANNOTATION = {
      className: "meta",
      begin: "@" + JAVA_IDENT_RE,
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          contains: ["self"]
          // allow nested () inside our annotation
        }
      ]
    };
    const PARAMS = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      keywords: KEYWORDS2,
      relevance: 0,
      contains: [hljs.C_BLOCK_COMMENT_MODE],
      endsParent: true
    };
    return {
      name: "Java",
      aliases: ["jsp"],
      keywords: KEYWORDS2,
      illegal: /<\/|#/,
      contains: [
        hljs.COMMENT(
          "/\\*\\*",
          "\\*/",
          {
            relevance: 0,
            contains: [
              {
                // eat up @'s in emails to prevent them to be recognized as doctags
                begin: /\w+@/,
                relevance: 0
              },
              {
                className: "doctag",
                begin: "@[A-Za-z]+"
              }
            ]
          }
        ),
        // relevance boost
        {
          begin: /import java\.[a-z]+\./,
          keywords: "import",
          relevance: 2
        },
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          begin: /"""/,
          end: /"""/,
          className: "string",
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        {
          match: [
            /\b(?:class|interface|enum|extends|implements|new)/,
            /\s+/,
            JAVA_IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          // Exceptions for hyphenated keywords
          match: /non-sealed/,
          scope: "keyword"
        },
        {
          begin: [
            regex.concat(/(?!else)/, JAVA_IDENT_RE),
            /\s+/,
            JAVA_IDENT_RE,
            /\s+/,
            /=(?!=)/
          ],
          className: {
            1: "type",
            3: "variable",
            5: "operator"
          }
        },
        {
          begin: [
            /record/,
            /\s+/,
            JAVA_IDENT_RE
          ],
          className: {
            1: "keyword",
            3: "title.class"
          },
          contains: [
            PARAMS,
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          // Expression keywords prevent 'keyword Name(...)' from being
          // recognized as a function definition
          beginKeywords: "new throw return else",
          relevance: 0
        },
        {
          begin: [
            "(?:" + GENERIC_IDENT_RE + "\\s+)",
            hljs.UNDERSCORE_IDENT_RE,
            /\s*(?=\()/
          ],
          className: { 2: "title.function" },
          keywords: KEYWORDS2,
          contains: [
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              keywords: KEYWORDS2,
              relevance: 0,
              contains: [
                ANNOTATION,
                hljs.APOS_STRING_MODE,
                hljs.QUOTE_STRING_MODE,
                NUMERIC$1,
                hljs.C_BLOCK_COMMENT_MODE
              ]
            },
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        NUMERIC$1,
        ANNOTATION
      ]
    };
  }
  const IDENT_RE$2 = "[A-Za-z$_][0-9A-Za-z$_]*";
  const KEYWORDS$1 = [
    "as",
    // for exports
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    // JS handles these with a special rule
    // "get",
    // "set",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends",
    // It's reached stage 3, which is "recommended for implementation":
    "using"
  ];
  const LITERALS$1 = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ];
  const TYPES$1 = [
    // Fundamental objects
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    // numbers and dates
    "Math",
    "Date",
    "Number",
    "BigInt",
    // text
    "String",
    "RegExp",
    // Indexed collections
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    // Keyed collections
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    // Structured data
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    // Control abstraction objects
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    // Reflection
    "Reflect",
    "Proxy",
    // Internationalization
    "Intl",
    // WebAssembly
    "WebAssembly"
  ];
  const ERROR_TYPES$1 = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ];
  const BUILT_IN_GLOBALS$1 = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ];
  const BUILT_IN_VARIABLES$1 = [
    "arguments",
    "this",
    "super",
    "console",
    "window",
    "document",
    "localStorage",
    "sessionStorage",
    "module",
    "global"
    // Node.js
  ];
  const BUILT_INS$1 = [].concat(
    BUILT_IN_GLOBALS$1,
    TYPES$1,
    ERROR_TYPES$1
  );
  function javascript$1(hljs) {
    const regex = hljs.regex;
    const hasClosingTag = (match2, { after: after2 }) => {
      const tag = "</" + match2[0].slice(1);
      const pos = match2.input.indexOf(tag, after2);
      return pos !== -1;
    };
    const IDENT_RE$12 = IDENT_RE$2;
    const FRAGMENT = {
      begin: "<>",
      end: "</>"
    };
    const XML_SELF_CLOSING = /<[A-Za-z0-9\\._:-]+\s*\/>/;
    const XML_TAG = {
      begin: /<[A-Za-z0-9\\._:-]+/,
      end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
      /**
       * @param {RegExpMatchArray} match
       * @param {CallbackResponse} response
       */
      isTrulyOpeningTag: (match2, response) => {
        const afterMatchIndex = match2[0].length + match2.index;
        const nextChar = match2.input[afterMatchIndex];
        if (
          // HTML should not include another raw `<` inside a tag
          // nested type?
          // `<Array<Array<number>>`, etc.
          nextChar === "<" || // the , gives away that this is not HTML
          // `<T, A extends keyof T, V>`
          nextChar === ","
        ) {
          response.ignoreMatch();
          return;
        }
        if (nextChar === ">") {
          if (!hasClosingTag(match2, { after: afterMatchIndex })) {
            response.ignoreMatch();
          }
        }
        let m;
        const afterMatch = match2.input.substring(afterMatchIndex);
        if (m = afterMatch.match(/^\s*=/)) {
          response.ignoreMatch();
          return;
        }
        if (m = afterMatch.match(/^\s+extends\s+/)) {
          if (m.index === 0) {
            response.ignoreMatch();
            return;
          }
        }
      }
    };
    const KEYWORDS$1$1 = {
      $pattern: IDENT_RE$2,
      keyword: KEYWORDS$1,
      literal: LITERALS$1,
      built_in: BUILT_INS$1,
      "variable.language": BUILT_IN_VARIABLES$1
    };
    const decimalDigits2 = "[0-9](_?[0-9])*";
    const frac2 = `\\.(${decimalDigits2})`;
    const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;
    const NUMBER = {
      className: "number",
      variants: [
        // DecimalLiteral
        { begin: `(\\b(${decimalInteger})((${frac2})|\\.)?|(${frac2}))[eE][+-]?(${decimalDigits2})\\b` },
        { begin: `\\b(${decimalInteger})\\b((${frac2})\\b|\\.)?|(${frac2})\\b` },
        // DecimalBigIntegerLiteral
        { begin: `\\b(0|[1-9](_?[0-9])*)n\\b` },
        // NonDecimalIntegerLiteral
        { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
        { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
        { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
        // LegacyOctalIntegerLiteral (does not include underscore separators)
        // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
        { begin: "\\b0[0-7]+n?\\b" }
      ],
      relevance: 0
    };
    const SUBST = {
      className: "subst",
      begin: "\\$\\{",
      end: "\\}",
      keywords: KEYWORDS$1$1,
      contains: []
      // defined later
    };
    const HTML_TEMPLATE = {
      begin: ".?html`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          SUBST
        ],
        subLanguage: "xml"
      }
    };
    const CSS_TEMPLATE = {
      begin: ".?css`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          SUBST
        ],
        subLanguage: "css"
      }
    };
    const GRAPHQL_TEMPLATE = {
      begin: ".?gql`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          SUBST
        ],
        subLanguage: "graphql"
      }
    };
    const TEMPLATE_STRING = {
      className: "string",
      begin: "`",
      end: "`",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ]
    };
    const JSDOC_COMMENT = hljs.COMMENT(
      /\/\*\*(?!\/)/,
      "\\*/",
      {
        relevance: 0,
        contains: [
          {
            begin: "(?=@[A-Za-z]+)",
            relevance: 0,
            contains: [
              {
                className: "doctag",
                begin: "@[A-Za-z]+"
              },
              {
                className: "type",
                begin: "\\{",
                end: "\\}",
                excludeEnd: true,
                excludeBegin: true,
                relevance: 0
              },
              {
                className: "variable",
                begin: IDENT_RE$12 + "(?=\\s*(-)|$)",
                endsParent: true,
                relevance: 0
              },
              // eat spaces (not newlines) so we can find
              // types or variables
              {
                begin: /(?=[^\n])\s/,
                relevance: 0
              }
            ]
          }
        ]
      }
    );
    const COMMENT2 = {
      className: "comment",
      variants: [
        JSDOC_COMMENT,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.C_LINE_COMMENT_MODE
      ]
    };
    const SUBST_INTERNALS = [
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      HTML_TEMPLATE,
      CSS_TEMPLATE,
      GRAPHQL_TEMPLATE,
      TEMPLATE_STRING,
      // Skip numbers when they are part of a variable name
      { match: /\$\d+/ },
      NUMBER
      // This is intentional:
      // See https://github.com/highlightjs/highlight.js/issues/3288
      // hljs.REGEXP_MODE
    ];
    SUBST.contains = SUBST_INTERNALS.concat({
      // we need to pair up {} inside our subst to prevent
      // it from ending too early by matching another }
      begin: /\{/,
      end: /\}/,
      keywords: KEYWORDS$1$1,
      contains: [
        "self"
      ].concat(SUBST_INTERNALS)
    });
    const SUBST_AND_COMMENTS = [].concat(COMMENT2, SUBST.contains);
    const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
      // eat recursive parens in sub expressions
      {
        begin: /(\s*)\(/,
        end: /\)/,
        keywords: KEYWORDS$1$1,
        contains: ["self"].concat(SUBST_AND_COMMENTS)
      }
    ]);
    const PARAMS = {
      className: "params",
      // convert this to negative lookbehind in v12
      begin: /(\s*)\(/,
      // to match the parms with
      end: /\)/,
      excludeBegin: true,
      excludeEnd: true,
      keywords: KEYWORDS$1$1,
      contains: PARAMS_CONTAINS
    };
    const CLASS_OR_EXTENDS = {
      variants: [
        // class Car extends vehicle
        {
          match: [
            /class/,
            /\s+/,
            IDENT_RE$12,
            /\s+/,
            /extends/,
            /\s+/,
            regex.concat(IDENT_RE$12, "(", regex.concat(/\./, IDENT_RE$12), ")*")
          ],
          scope: {
            1: "keyword",
            3: "title.class",
            5: "keyword",
            7: "title.class.inherited"
          }
        },
        // class Car
        {
          match: [
            /class/,
            /\s+/,
            IDENT_RE$12
          ],
          scope: {
            1: "keyword",
            3: "title.class"
          }
        }
      ]
    };
    const CLASS_REFERENCE = {
      relevance: 0,
      match: regex.either(
        // Hard coded exceptions
        /\bJSON/,
        // Float32Array, OutT
        /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
        // CSSFactory, CSSFactoryT
        /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
        // FPs, FPsT
        /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/
        // P
        // single letters are not highlighted
        // BLAH
        // this will be flagged as a UPPER_CASE_CONSTANT instead
      ),
      className: "title.class",
      keywords: {
        _: [
          // se we still get relevance credit for JS library classes
          ...TYPES$1,
          ...ERROR_TYPES$1
        ]
      }
    };
    const USE_STRICT = {
      label: "use_strict",
      className: "meta",
      relevance: 10,
      begin: /^\s*['"]use (strict|asm)['"]/
    };
    const FUNCTION_DEFINITION = {
      variants: [
        {
          match: [
            /function/,
            /\s+/,
            IDENT_RE$12,
            /(?=\s*\()/
          ]
        },
        // anonymous function
        {
          match: [
            /function/,
            /\s*(?=\()/
          ]
        }
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      label: "func.def",
      contains: [PARAMS],
      illegal: /%/
    };
    const UPPER_CASE_CONSTANT = {
      relevance: 0,
      match: /\b[A-Z][A-Z_0-9]+\b/,
      className: "variable.constant"
    };
    function noneOf(list) {
      return regex.concat("(?!", list.join("|"), ")");
    }
    const FUNCTION_CALL = {
      match: regex.concat(
        /\b/,
        noneOf([
          ...BUILT_IN_GLOBALS$1,
          "super",
          "import"
        ].map((x) => `${x}\\s*\\(`)),
        IDENT_RE$12,
        regex.lookahead(/\s*\(/)
      ),
      className: "title.function",
      relevance: 0
    };
    const PROPERTY_ACCESS = {
      begin: regex.concat(/\./, regex.lookahead(
        regex.concat(IDENT_RE$12, /(?![0-9A-Za-z$_(])/)
      )),
      end: IDENT_RE$12,
      excludeBegin: true,
      keywords: "prototype",
      className: "property",
      relevance: 0
    };
    const GETTER_OR_SETTER = {
      match: [
        /get|set/,
        /\s+/,
        IDENT_RE$12,
        /(?=\()/
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        {
          // eat to avoid empty params
          begin: /\(\)/
        },
        PARAMS
      ]
    };
    const FUNC_LEAD_IN_RE = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + hljs.UNDERSCORE_IDENT_RE + ")\\s*=>";
    const FUNCTION_VARIABLE = {
      match: [
        /const|var|let/,
        /\s+/,
        IDENT_RE$12,
        /\s*/,
        /=\s*/,
        /(async\s*)?/,
        // async is optional
        regex.lookahead(FUNC_LEAD_IN_RE)
      ],
      keywords: "async",
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        PARAMS
      ]
    };
    return {
      name: "JavaScript",
      aliases: ["js", "jsx", "mjs", "cjs"],
      keywords: KEYWORDS$1$1,
      // this will be extended by TypeScript
      exports: { PARAMS_CONTAINS, CLASS_REFERENCE },
      illegal: /#(?![$_A-z])/,
      contains: [
        hljs.SHEBANG({
          label: "shebang",
          binary: "node",
          relevance: 5
        }),
        USE_STRICT,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        HTML_TEMPLATE,
        CSS_TEMPLATE,
        GRAPHQL_TEMPLATE,
        TEMPLATE_STRING,
        COMMENT2,
        // Skip numbers when they are part of a variable name
        { match: /\$\d+/ },
        NUMBER,
        CLASS_REFERENCE,
        {
          scope: "attr",
          match: IDENT_RE$12 + regex.lookahead(":"),
          relevance: 0
        },
        FUNCTION_VARIABLE,
        {
          // "value" container
          begin: "(" + hljs.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
          keywords: "return throw case",
          relevance: 0,
          contains: [
            COMMENT2,
            hljs.REGEXP_MODE,
            {
              className: "function",
              // we have to count the parens to make sure we actually have the
              // correct bounding ( ) before the =>.  There could be any number of
              // sub-expressions inside also surrounded by parens.
              begin: FUNC_LEAD_IN_RE,
              returnBegin: true,
              end: "\\s*=>",
              contains: [
                {
                  className: "params",
                  variants: [
                    {
                      begin: hljs.UNDERSCORE_IDENT_RE,
                      relevance: 0
                    },
                    {
                      className: null,
                      begin: /\(\s*\)/,
                      skip: true
                    },
                    {
                      begin: /(\s*)\(/,
                      end: /\)/,
                      excludeBegin: true,
                      excludeEnd: true,
                      keywords: KEYWORDS$1$1,
                      contains: PARAMS_CONTAINS
                    }
                  ]
                }
              ]
            },
            {
              // could be a comma delimited list of params to a function call
              begin: /,/,
              relevance: 0
            },
            {
              match: /\s+/,
              relevance: 0
            },
            {
              // JSX
              variants: [
                { begin: FRAGMENT.begin, end: FRAGMENT.end },
                { match: XML_SELF_CLOSING },
                {
                  begin: XML_TAG.begin,
                  // we carefully check the opening tag to see if it truly
                  // is a tag and not a false positive
                  "on:begin": XML_TAG.isTrulyOpeningTag,
                  end: XML_TAG.end
                }
              ],
              subLanguage: "xml",
              contains: [
                {
                  begin: XML_TAG.begin,
                  end: XML_TAG.end,
                  skip: true,
                  contains: ["self"]
                }
              ]
            }
          ]
        },
        FUNCTION_DEFINITION,
        {
          // prevent this from getting swallowed up by function
          // since they appear "function like"
          beginKeywords: "while if switch catch for"
        },
        {
          // we have to count the parens to make sure we actually have the correct
          // bounding ( ).  There could be any number of sub-expressions inside
          // also surrounded by parens.
          begin: "\\b(?!function)" + hljs.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
          // end parens
          returnBegin: true,
          label: "func.def",
          contains: [
            PARAMS,
            hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$12, className: "title.function" })
          ]
        },
        // catch ... so it won't trigger the property rule below
        {
          match: /\.\.\./,
          relevance: 0
        },
        PROPERTY_ACCESS,
        // hack: prevents detection of keywords in some circumstances
        // .keyword()
        // $keyword = x
        {
          match: "\\$" + IDENT_RE$12,
          relevance: 0
        },
        {
          match: [/\bconstructor(?=\s*\()/],
          className: { 1: "title.function" },
          contains: [PARAMS]
        },
        FUNCTION_CALL,
        UPPER_CASE_CONSTANT,
        CLASS_OR_EXTENDS,
        GETTER_OR_SETTER,
        {
          match: /\$[(.]/
          // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
        }
      ]
    };
  }
  function json(hljs) {
    const ATTRIBUTE = {
      className: "attr",
      begin: /"(\\.|[^\\"\r\n])*"(?=\s*:)/,
      relevance: 1.01
    };
    const PUNCTUATION2 = {
      match: /[{}[\],:]/,
      className: "punctuation",
      relevance: 0
    };
    const LITERALS2 = [
      "true",
      "false",
      "null"
    ];
    const LITERALS_MODE = {
      scope: "literal",
      beginKeywords: LITERALS2.join(" ")
    };
    return {
      name: "JSON",
      aliases: ["jsonc"],
      keywords: {
        literal: LITERALS2
      },
      contains: [
        ATTRIBUTE,
        PUNCTUATION2,
        hljs.QUOTE_STRING_MODE,
        LITERALS_MODE,
        hljs.C_NUMBER_MODE,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ],
      illegal: "\\S"
    };
  }
  var decimalDigits = "[0-9](_*[0-9])*";
  var frac = `\\.(${decimalDigits})`;
  var hexDigits = "[0-9a-fA-F](_*[0-9a-fA-F])*";
  var NUMERIC = {
    className: "number",
    variants: [
      // DecimalFloatingPointLiteral
      // including ExponentPart
      { begin: `(\\b(${decimalDigits})((${frac})|\\.)?|(${frac}))[eE][+-]?(${decimalDigits})[fFdD]?\\b` },
      // excluding ExponentPart
      { begin: `\\b(${decimalDigits})((${frac})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
      { begin: `(${frac})[fFdD]?\\b` },
      { begin: `\\b(${decimalDigits})[fFdD]\\b` },
      // HexadecimalFloatingPointLiteral
      { begin: `\\b0[xX]((${hexDigits})\\.?|(${hexDigits})?\\.(${hexDigits}))[pP][+-]?(${decimalDigits})[fFdD]?\\b` },
      // DecimalIntegerLiteral
      { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
      // HexIntegerLiteral
      { begin: `\\b0[xX](${hexDigits})[lL]?\\b` },
      // OctalIntegerLiteral
      { begin: "\\b0(_*[0-7])*[lL]?\\b" },
      // BinaryIntegerLiteral
      { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
    ],
    relevance: 0
  };
  function kotlin(hljs) {
    const KEYWORDS2 = {
      keyword: "abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual",
      built_in: "Byte Short Char Int Long Boolean Float Double Void Unit Nothing",
      literal: "true false null"
    };
    const KEYWORDS_WITH_LABEL = {
      className: "keyword",
      begin: /\b(break|continue|return|this)\b/,
      starts: { contains: [
        {
          className: "symbol",
          begin: /@\w+/
        }
      ] }
    };
    const LABEL = {
      className: "symbol",
      begin: hljs.UNDERSCORE_IDENT_RE + "@"
    };
    const SUBST = {
      className: "subst",
      begin: /\$\{/,
      end: /\}/,
      contains: [hljs.C_NUMBER_MODE]
    };
    const VARIABLE = {
      className: "variable",
      begin: "\\$" + hljs.UNDERSCORE_IDENT_RE
    };
    const STRING = {
      className: "string",
      variants: [
        {
          begin: '"""',
          end: '"""(?=[^"])',
          contains: [
            VARIABLE,
            SUBST
          ]
        },
        // Can't use built-in modes easily, as we want to use STRING in the meta
        // context as 'meta-string' and there's no syntax to remove explicitly set
        // classNames in built-in modes.
        {
          begin: "'",
          end: "'",
          illegal: /\n/,
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        {
          begin: '"',
          end: '"',
          illegal: /\n/,
          contains: [
            hljs.BACKSLASH_ESCAPE,
            VARIABLE,
            SUBST
          ]
        }
      ]
    };
    SUBST.contains.push(STRING);
    const ANNOTATION_USE_SITE = {
      className: "meta",
      begin: "@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*" + hljs.UNDERSCORE_IDENT_RE + ")?"
    };
    const ANNOTATION = {
      className: "meta",
      begin: "@" + hljs.UNDERSCORE_IDENT_RE,
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          contains: [
            hljs.inherit(STRING, { className: "string" }),
            "self"
          ]
        }
      ]
    };
    const KOTLIN_NUMBER_MODE = NUMERIC;
    const KOTLIN_NESTED_COMMENT = hljs.COMMENT(
      "/\\*",
      "\\*/",
      { contains: [hljs.C_BLOCK_COMMENT_MODE] }
    );
    const KOTLIN_PAREN_TYPE = { variants: [
      {
        className: "type",
        begin: hljs.UNDERSCORE_IDENT_RE
      },
      {
        begin: /\(/,
        end: /\)/,
        contains: []
        // defined later
      }
    ] };
    const KOTLIN_PAREN_TYPE2 = KOTLIN_PAREN_TYPE;
    KOTLIN_PAREN_TYPE2.variants[1].contains = [KOTLIN_PAREN_TYPE];
    KOTLIN_PAREN_TYPE.variants[1].contains = [KOTLIN_PAREN_TYPE2];
    return {
      name: "Kotlin",
      aliases: [
        "kt",
        "kts"
      ],
      keywords: KEYWORDS2,
      contains: [
        hljs.COMMENT(
          "/\\*\\*",
          "\\*/",
          {
            relevance: 0,
            contains: [
              {
                className: "doctag",
                begin: "@[A-Za-z]+"
              }
            ]
          }
        ),
        hljs.C_LINE_COMMENT_MODE,
        KOTLIN_NESTED_COMMENT,
        KEYWORDS_WITH_LABEL,
        LABEL,
        ANNOTATION_USE_SITE,
        ANNOTATION,
        {
          className: "function",
          beginKeywords: "fun",
          end: "[(]|$",
          returnBegin: true,
          excludeEnd: true,
          keywords: KEYWORDS2,
          relevance: 5,
          contains: [
            {
              begin: hljs.UNDERSCORE_IDENT_RE + "\\s*\\(",
              returnBegin: true,
              relevance: 0,
              contains: [hljs.UNDERSCORE_TITLE_MODE]
            },
            {
              className: "type",
              begin: /</,
              end: />/,
              keywords: "reified",
              relevance: 0
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              endsParent: true,
              keywords: KEYWORDS2,
              relevance: 0,
              contains: [
                {
                  begin: /:/,
                  end: /[=,\/]/,
                  endsWithParent: true,
                  contains: [
                    KOTLIN_PAREN_TYPE,
                    hljs.C_LINE_COMMENT_MODE,
                    KOTLIN_NESTED_COMMENT
                  ],
                  relevance: 0
                },
                hljs.C_LINE_COMMENT_MODE,
                KOTLIN_NESTED_COMMENT,
                ANNOTATION_USE_SITE,
                ANNOTATION,
                STRING,
                hljs.C_NUMBER_MODE
              ]
            },
            KOTLIN_NESTED_COMMENT
          ]
        },
        {
          begin: [
            /class|interface|trait/,
            /\s+/,
            hljs.UNDERSCORE_IDENT_RE
          ],
          beginScope: {
            3: "title.class"
          },
          keywords: "class interface trait",
          end: /[:\{(]|$/,
          excludeEnd: true,
          illegal: "extends implements",
          contains: [
            { beginKeywords: "public protected internal private constructor" },
            hljs.UNDERSCORE_TITLE_MODE,
            {
              className: "type",
              begin: /</,
              end: />/,
              excludeBegin: true,
              excludeEnd: true,
              relevance: 0
            },
            {
              className: "type",
              begin: /[,:]\s*/,
              end: /[<\(,){\s]|$/,
              excludeBegin: true,
              returnEnd: true
            },
            ANNOTATION_USE_SITE,
            ANNOTATION
          ]
        },
        STRING,
        {
          className: "meta",
          begin: "^#!/usr/bin/env",
          end: "$",
          illegal: "\n"
        },
        KOTLIN_NUMBER_MODE
      ]
    };
  }
  const MODES$2 = (hljs) => {
    return {
      IMPORTANT: {
        scope: "meta",
        begin: "!important"
      },
      BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
      HEXCOLOR: {
        scope: "number",
        begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
      },
      FUNCTION_DISPATCH: {
        className: "built_in",
        begin: /[\w-]+(?=\()/
      },
      ATTRIBUTE_SELECTOR_MODE: {
        scope: "selector-attr",
        begin: /\[/,
        end: /\]/,
        illegal: "$",
        contains: [
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE
        ]
      },
      CSS_NUMBER_MODE: {
        scope: "number",
        begin: hljs.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
        relevance: 0
      },
      CSS_VARIABLE: {
        className: "attr",
        begin: /--[A-Za-z_][A-Za-z0-9_-]*/
      }
    };
  };
  const HTML_TAGS$1 = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "optgroup",
    "option",
    "p",
    "picture",
    "q",
    "quote",
    "samp",
    "section",
    "select",
    "source",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ];
  const SVG_TAGS$1 = [
    "defs",
    "g",
    "marker",
    "mask",
    "pattern",
    "svg",
    "switch",
    "symbol",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feFlood",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMorphology",
    "feOffset",
    "feSpecularLighting",
    "feTile",
    "feTurbulence",
    "linearGradient",
    "radialGradient",
    "stop",
    "circle",
    "ellipse",
    "image",
    "line",
    "path",
    "polygon",
    "polyline",
    "rect",
    "text",
    "use",
    "textPath",
    "tspan",
    "foreignObject",
    "clipPath"
  ];
  const TAGS$1 = [
    ...HTML_TAGS$1,
    ...SVG_TAGS$1
  ];
  const MEDIA_FEATURES$1 = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    // TODO: find a better solution?
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ].sort().reverse();
  const PSEUDO_CLASSES$1 = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    // dir()
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    // has()
    "host",
    // host or host()
    "host-context",
    // host-context()
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    // is()
    "lang",
    // lang()
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    // not()
    "nth-child",
    // nth-child()
    "nth-col",
    // nth-col()
    "nth-last-child",
    // nth-last-child()
    "nth-last-col",
    // nth-last-col()
    "nth-last-of-type",
    //nth-last-of-type()
    "nth-of-type",
    //nth-of-type()
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
    // where()
  ].sort().reverse();
  const PSEUDO_ELEMENTS$1 = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ].sort().reverse();
  const ATTRIBUTES$1 = [
    "accent-color",
    "align-content",
    "align-items",
    "align-self",
    "alignment-baseline",
    "all",
    "anchor-name",
    "animation",
    "animation-composition",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-range",
    "animation-range-end",
    "animation-range-start",
    "animation-timeline",
    "animation-timing-function",
    "appearance",
    "aspect-ratio",
    "backdrop-filter",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-position-x",
    "background-position-y",
    "background-repeat",
    "background-size",
    "baseline-shift",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-end-end-radius",
    "border-end-start-radius",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-start-end-radius",
    "border-start-start-radius",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-align",
    "box-decoration-break",
    "box-direction",
    "box-flex",
    "box-flex-group",
    "box-lines",
    "box-ordinal-group",
    "box-orient",
    "box-pack",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "color-interpolation",
    "color-interpolation-filters",
    "color-profile",
    "color-rendering",
    "color-scheme",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "contain-intrinsic-block-size",
    "contain-intrinsic-height",
    "contain-intrinsic-inline-size",
    "contain-intrinsic-size",
    "contain-intrinsic-width",
    "container",
    "container-name",
    "container-type",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "counter-set",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "cx",
    "cy",
    "direction",
    "display",
    "dominant-baseline",
    "empty-cells",
    "enable-background",
    "field-sizing",
    "fill",
    "fill-opacity",
    "fill-rule",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flood-color",
    "flood-opacity",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-optical-sizing",
    "font-palette",
    "font-size",
    "font-size-adjust",
    "font-smooth",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-synthesis-position",
    "font-synthesis-small-caps",
    "font-synthesis-style",
    "font-synthesis-weight",
    "font-variant",
    "font-variant-alternates",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-emoji",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "forced-color-adjust",
    "gap",
    "glyph-orientation-horizontal",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphenate-character",
    "hyphenate-limit-chars",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "initial-letter",
    "initial-letter-align",
    "inline-size",
    "inset",
    "inset-area",
    "inset-block",
    "inset-block-end",
    "inset-block-start",
    "inset-inline",
    "inset-inline-end",
    "inset-inline-start",
    "isolation",
    "justify-content",
    "justify-items",
    "justify-self",
    "kerning",
    "left",
    "letter-spacing",
    "lighting-color",
    "line-break",
    "line-height",
    "line-height-step",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "margin-trim",
    "marker",
    "marker-end",
    "marker-mid",
    "marker-start",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "masonry-auto-flow",
    "math-depth",
    "math-shift",
    "math-style",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "offset",
    "offset-anchor",
    "offset-distance",
    "offset-path",
    "offset-position",
    "offset-rotate",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-anchor",
    "overflow-block",
    "overflow-clip-margin",
    "overflow-inline",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "overlay",
    "overscroll-behavior",
    "overscroll-behavior-block",
    "overscroll-behavior-inline",
    "overscroll-behavior-x",
    "overscroll-behavior-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "paint-order",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "place-content",
    "place-items",
    "place-self",
    "pointer-events",
    "position",
    "position-anchor",
    "position-visibility",
    "print-color-adjust",
    "quotes",
    "r",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "rotate",
    "row-gap",
    "ruby-align",
    "ruby-position",
    "scale",
    "scroll-behavior",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scroll-timeline",
    "scroll-timeline-axis",
    "scroll-timeline-name",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "shape-rendering",
    "speak",
    "speak-as",
    "src",
    // @font-face
    "stop-color",
    "stop-opacity",
    "stroke",
    "stroke-dasharray",
    "stroke-dashoffset",
    "stroke-linecap",
    "stroke-linejoin",
    "stroke-miterlimit",
    "stroke-opacity",
    "stroke-width",
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-anchor",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-skip",
    "text-decoration-skip-ink",
    "text-decoration-style",
    "text-decoration-thickness",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-size-adjust",
    "text-transform",
    "text-underline-offset",
    "text-underline-position",
    "text-wrap",
    "text-wrap-mode",
    "text-wrap-style",
    "timeline-scope",
    "top",
    "touch-action",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-behavior",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "translate",
    "unicode-bidi",
    "user-modify",
    "user-select",
    "vector-effect",
    "vertical-align",
    "view-timeline",
    "view-timeline-axis",
    "view-timeline-inset",
    "view-timeline-name",
    "view-transition-name",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "white-space-collapse",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "x",
    "y",
    "z-index",
    "zoom"
  ].sort().reverse();
  const PSEUDO_SELECTORS = PSEUDO_CLASSES$1.concat(PSEUDO_ELEMENTS$1).sort().reverse();
  function less(hljs) {
    const modes = MODES$2(hljs);
    const PSEUDO_SELECTORS$1 = PSEUDO_SELECTORS;
    const AT_MODIFIERS = "and or not only";
    const IDENT_RE2 = "[\\w-]+";
    const INTERP_IDENT_RE = "(" + IDENT_RE2 + "|@\\{" + IDENT_RE2 + "\\})";
    const RULES = [];
    const VALUE_MODES = [];
    const STRING_MODE = function(c2) {
      return {
        // Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
        className: "string",
        begin: "~?" + c2 + ".*?" + c2
      };
    };
    const IDENT_MODE = function(name, begin, relevance) {
      return {
        className: name,
        begin,
        relevance
      };
    };
    const AT_KEYWORDS = {
      $pattern: /[a-z-]+/,
      keyword: AT_MODIFIERS,
      attribute: MEDIA_FEATURES$1.join(" ")
    };
    const PARENS_MODE = {
      // used only to properly balance nested parens inside mixin call, def. arg list
      begin: "\\(",
      end: "\\)",
      contains: VALUE_MODES,
      keywords: AT_KEYWORDS,
      relevance: 0
    };
    VALUE_MODES.push(
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      STRING_MODE("'"),
      STRING_MODE('"'),
      modes.CSS_NUMBER_MODE,
      // fixme: it does not include dot for numbers like .5em :(
      {
        begin: "(url|data-uri)\\(",
        starts: {
          className: "string",
          end: "[\\)\\n]",
          excludeEnd: true
        }
      },
      modes.HEXCOLOR,
      PARENS_MODE,
      IDENT_MODE("variable", "@@?" + IDENT_RE2, 10),
      IDENT_MODE("variable", "@\\{" + IDENT_RE2 + "\\}"),
      IDENT_MODE("built_in", "~?`[^`]*?`"),
      // inline javascript (or whatever host language) *multiline* string
      {
        // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
        className: "attribute",
        begin: IDENT_RE2 + "\\s*:",
        end: ":",
        returnBegin: true,
        excludeEnd: true
      },
      modes.IMPORTANT,
      { beginKeywords: "and not" },
      modes.FUNCTION_DISPATCH
    );
    const VALUE_WITH_RULESETS = VALUE_MODES.concat({
      begin: /\{/,
      end: /\}/,
      contains: RULES
    });
    const MIXIN_GUARD_MODE = {
      beginKeywords: "when",
      endsWithParent: true,
      contains: [{ beginKeywords: "and not" }].concat(VALUE_MODES)
      // using this form to override VALUE’s 'function' match
    };
    const RULE_MODE = {
      begin: INTERP_IDENT_RE + "\\s*:",
      returnBegin: true,
      end: /[;}]/,
      relevance: 0,
      contains: [
        { begin: /-(webkit|moz|ms|o)-/ },
        modes.CSS_VARIABLE,
        {
          className: "attribute",
          begin: "\\b(" + ATTRIBUTES$1.join("|") + ")\\b",
          end: /(?=:)/,
          starts: {
            endsWithParent: true,
            illegal: "[<=$]",
            relevance: 0,
            contains: VALUE_MODES
          }
        }
      ]
    };
    const AT_RULE_MODE = {
      className: "keyword",
      begin: "@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b",
      starts: {
        end: "[;{}]",
        keywords: AT_KEYWORDS,
        returnEnd: true,
        contains: VALUE_MODES,
        relevance: 0
      }
    };
    const VAR_RULE_MODE = {
      className: "variable",
      variants: [
        // using more strict pattern for higher relevance to increase chances of Less detection.
        // this is *the only* Less specific statement used in most of the sources, so...
        // (we’ll still often loose to the css-parser unless there's '//' comment,
        // simply because 1 variable just can't beat 99 properties :)
        {
          begin: "@" + IDENT_RE2 + "\\s*:",
          relevance: 15
        },
        { begin: "@" + IDENT_RE2 }
      ],
      starts: {
        end: "[;}]",
        returnEnd: true,
        contains: VALUE_WITH_RULESETS
      }
    };
    const SELECTOR_MODE = {
      // first parse unambiguous selectors (i.e. those not starting with tag)
      // then fall into the scary lookahead-discriminator variant.
      // this mode also handles mixin definitions and calls
      variants: [
        {
          begin: "[\\.#:&\\[>]",
          end: "[;{}]"
          // mixin calls end with ';'
        },
        {
          begin: INTERP_IDENT_RE,
          end: /\{/
        }
      ],
      returnBegin: true,
      returnEnd: true,
      illegal: `[<='$"]`,
      relevance: 0,
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        MIXIN_GUARD_MODE,
        IDENT_MODE("keyword", "all\\b"),
        IDENT_MODE("variable", "@\\{" + IDENT_RE2 + "\\}"),
        // otherwise it’s identified as tag
        {
          begin: "\\b(" + TAGS$1.join("|") + ")\\b",
          className: "selector-tag"
        },
        modes.CSS_NUMBER_MODE,
        IDENT_MODE("selector-tag", INTERP_IDENT_RE, 0),
        IDENT_MODE("selector-id", "#" + INTERP_IDENT_RE),
        IDENT_MODE("selector-class", "\\." + INTERP_IDENT_RE, 0),
        IDENT_MODE("selector-tag", "&", 0),
        modes.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "selector-pseudo",
          begin: ":(" + PSEUDO_CLASSES$1.join("|") + ")"
        },
        {
          className: "selector-pseudo",
          begin: ":(:)?(" + PSEUDO_ELEMENTS$1.join("|") + ")"
        },
        {
          begin: /\(/,
          end: /\)/,
          relevance: 0,
          contains: VALUE_WITH_RULESETS
        },
        // argument list of parametric mixins
        { begin: "!important" },
        // eat !important after mixin call or it will be colored as tag
        modes.FUNCTION_DISPATCH
      ]
    };
    const PSEUDO_SELECTOR_MODE = {
      begin: IDENT_RE2 + `:(:)?(${PSEUDO_SELECTORS$1.join("|")})`,
      returnBegin: true,
      contains: [SELECTOR_MODE]
    };
    RULES.push(
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      AT_RULE_MODE,
      VAR_RULE_MODE,
      PSEUDO_SELECTOR_MODE,
      RULE_MODE,
      SELECTOR_MODE,
      MIXIN_GUARD_MODE,
      modes.FUNCTION_DISPATCH
    );
    return {
      name: "Less",
      case_insensitive: true,
      illegal: `[=>'/<($"]`,
      contains: RULES
    };
  }
  function lua(hljs) {
    const OPENING_LONG_BRACKET = "\\[=*\\[";
    const CLOSING_LONG_BRACKET = "\\]=*\\]";
    const LONG_BRACKETS = {
      begin: OPENING_LONG_BRACKET,
      end: CLOSING_LONG_BRACKET,
      contains: ["self"]
    };
    const COMMENTS = [
      hljs.COMMENT("--(?!" + OPENING_LONG_BRACKET + ")", "$"),
      hljs.COMMENT(
        "--" + OPENING_LONG_BRACKET,
        CLOSING_LONG_BRACKET,
        {
          contains: [LONG_BRACKETS],
          relevance: 10
        }
      )
    ];
    return {
      name: "Lua",
      aliases: ["pluto"],
      keywords: {
        $pattern: hljs.UNDERSCORE_IDENT_RE,
        literal: "true false nil",
        keyword: "and break do else elseif end for goto if in local not or repeat return then until while",
        built_in: (
          // Metatags and globals:
          "_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall arg self coroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove"
        )
      },
      contains: COMMENTS.concat([
        {
          className: "function",
          beginKeywords: "function",
          end: "\\)",
          contains: [
            hljs.inherit(hljs.TITLE_MODE, { begin: "([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*" }),
            {
              className: "params",
              begin: "\\(",
              endsWithParent: true,
              contains: COMMENTS
            }
          ].concat(COMMENTS)
        },
        hljs.C_NUMBER_MODE,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        {
          className: "string",
          begin: OPENING_LONG_BRACKET,
          end: CLOSING_LONG_BRACKET,
          contains: [LONG_BRACKETS],
          relevance: 5
        }
      ])
    };
  }
  function makefile(hljs) {
    const VARIABLE = {
      className: "variable",
      variants: [
        {
          begin: "\\$\\(" + hljs.UNDERSCORE_IDENT_RE + "\\)",
          contains: [hljs.BACKSLASH_ESCAPE]
        },
        { begin: /\$[@%<?\^\+\*]/ }
      ]
    };
    const QUOTE_STRING = {
      className: "string",
      begin: /"/,
      end: /"/,
      contains: [
        hljs.BACKSLASH_ESCAPE,
        VARIABLE
      ]
    };
    const FUNC = {
      className: "variable",
      begin: /\$\([\w-]+\s/,
      end: /\)/,
      keywords: { built_in: "subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value" },
      contains: [
        VARIABLE,
        QUOTE_STRING
        // Added QUOTE_STRING as they can be a part of functions
      ]
    };
    const ASSIGNMENT = { begin: "^" + hljs.UNDERSCORE_IDENT_RE + "\\s*(?=[:+?]?=)" };
    const META = {
      className: "meta",
      begin: /^\.PHONY:/,
      end: /$/,
      keywords: {
        $pattern: /[\.\w]+/,
        keyword: ".PHONY"
      }
    };
    const TARGET = {
      className: "section",
      begin: /^[^\s]+:/,
      end: /$/,
      contains: [VARIABLE]
    };
    return {
      name: "Makefile",
      aliases: [
        "mk",
        "mak",
        "make"
      ],
      keywords: {
        $pattern: /[\w-]+/,
        keyword: "define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath"
      },
      contains: [
        hljs.HASH_COMMENT_MODE,
        VARIABLE,
        QUOTE_STRING,
        FUNC,
        ASSIGNMENT,
        META,
        TARGET
      ]
    };
  }
  function markdown(hljs) {
    const regex = hljs.regex;
    const INLINE_HTML = {
      begin: /<\/?[A-Za-z_]/,
      end: ">",
      subLanguage: "xml",
      relevance: 0
    };
    const HORIZONTAL_RULE = {
      begin: "^[-\\*]{3,}",
      end: "$"
    };
    const CODE = {
      className: "code",
      variants: [
        // TODO: fix to allow these to work with sublanguage also
        { begin: "(`{3,})[^`](.|\\n)*?\\1`*[ ]*" },
        { begin: "(~{3,})[^~](.|\\n)*?\\1~*[ ]*" },
        // needed to allow markdown as a sublanguage to work
        {
          begin: "```",
          end: "```+[ ]*$"
        },
        {
          begin: "~~~",
          end: "~~~+[ ]*$"
        },
        { begin: "`.+?`" },
        {
          begin: "(?=^( {4}|\\t))",
          // use contains to gobble up multiple lines to allow the block to be whatever size
          // but only have a single open/close tag vs one per line
          contains: [
            {
              begin: "^( {4}|\\t)",
              end: "(\\n)$"
            }
          ],
          relevance: 0
        }
      ]
    };
    const LIST = {
      className: "bullet",
      begin: "^[ 	]*([*+-]|(\\d+\\.))(?=\\s+)",
      end: "\\s+",
      excludeEnd: true
    };
    const LINK_REFERENCE = {
      begin: /^\[[^\n]+\]:/,
      returnBegin: true,
      contains: [
        {
          className: "symbol",
          begin: /\[/,
          end: /\]/,
          excludeBegin: true,
          excludeEnd: true
        },
        {
          className: "link",
          begin: /:\s*/,
          end: /$/,
          excludeBegin: true
        }
      ]
    };
    const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;
    const LINK = {
      variants: [
        // too much like nested array access in so many languages
        // to have any real relevance
        {
          begin: /\[.+?\]\[.*?\]/,
          relevance: 0
        },
        // popular internet URLs
        {
          begin: /\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,
          relevance: 2
        },
        {
          begin: regex.concat(/\[.+?\]\(/, URL_SCHEME, /:\/\/.*?\)/),
          relevance: 2
        },
        // relative urls
        {
          begin: /\[.+?\]\([./?&#].*?\)/,
          relevance: 1
        },
        // whatever else, lower relevance (might not be a link at all)
        {
          begin: /\[.*?\]\(.*?\)/,
          relevance: 0
        }
      ],
      returnBegin: true,
      contains: [
        {
          // empty strings for alt or link text
          match: /\[(?=\])/
        },
        {
          className: "string",
          relevance: 0,
          begin: "\\[",
          end: "\\]",
          excludeBegin: true,
          returnEnd: true
        },
        {
          className: "link",
          relevance: 0,
          begin: "\\]\\(",
          end: "\\)",
          excludeBegin: true,
          excludeEnd: true
        },
        {
          className: "symbol",
          relevance: 0,
          begin: "\\]\\[",
          end: "\\]",
          excludeBegin: true,
          excludeEnd: true
        }
      ]
    };
    const BOLD = {
      className: "strong",
      contains: [],
      // defined later
      variants: [
        {
          begin: /_{2}(?!\s)/,
          end: /_{2}/
        },
        {
          begin: /\*{2}(?!\s)/,
          end: /\*{2}/
        }
      ]
    };
    const ITALIC = {
      className: "emphasis",
      contains: [],
      // defined later
      variants: [
        {
          begin: /\*(?![*\s])/,
          end: /\*/
        },
        {
          begin: /_(?![_\s])/,
          end: /_/,
          relevance: 0
        }
      ]
    };
    const BOLD_WITHOUT_ITALIC = hljs.inherit(BOLD, { contains: [] });
    const ITALIC_WITHOUT_BOLD = hljs.inherit(ITALIC, { contains: [] });
    BOLD.contains.push(ITALIC_WITHOUT_BOLD);
    ITALIC.contains.push(BOLD_WITHOUT_ITALIC);
    let CONTAINABLE = [
      INLINE_HTML,
      LINK
    ];
    [
      BOLD,
      ITALIC,
      BOLD_WITHOUT_ITALIC,
      ITALIC_WITHOUT_BOLD
    ].forEach((m) => {
      m.contains = m.contains.concat(CONTAINABLE);
    });
    CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);
    const HEADER = {
      className: "section",
      variants: [
        {
          begin: "^#{1,6}",
          end: "$",
          contains: CONTAINABLE
        },
        {
          begin: "(?=^.+?\\n[=-]{2,}$)",
          contains: [
            { begin: "^[=-]*$" },
            {
              begin: "^",
              end: "\\n",
              contains: CONTAINABLE
            }
          ]
        }
      ]
    };
    const BLOCKQUOTE = {
      className: "quote",
      begin: "^>\\s+",
      contains: CONTAINABLE,
      end: "$"
    };
    const ENTITY = {
      //https://spec.commonmark.org/0.31.2/#entity-references
      scope: "literal",
      match: /&([a-zA-Z0-9]+|#[0-9]{1,7}|#[Xx][0-9a-fA-F]{1,6});/
    };
    return {
      name: "Markdown",
      aliases: [
        "md",
        "mkdown",
        "mkd"
      ],
      contains: [
        HEADER,
        INLINE_HTML,
        LIST,
        BOLD,
        ITALIC,
        BLOCKQUOTE,
        CODE,
        HORIZONTAL_RULE,
        LINK,
        LINK_REFERENCE,
        ENTITY
      ]
    };
  }
  function objectivec(hljs) {
    const API_CLASS = {
      className: "built_in",
      begin: "\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"
    };
    const IDENTIFIER_RE = /[a-zA-Z@][a-zA-Z0-9_]*/;
    const TYPES2 = [
      "int",
      "float",
      "char",
      "unsigned",
      "signed",
      "short",
      "long",
      "double",
      "wchar_t",
      "unichar",
      "void",
      "bool",
      "BOOL",
      "id|0",
      "_Bool"
    ];
    const KWS = [
      "while",
      "export",
      "sizeof",
      "typedef",
      "const",
      "struct",
      "for",
      "union",
      "volatile",
      "static",
      "mutable",
      "if",
      "do",
      "return",
      "goto",
      "enum",
      "else",
      "break",
      "extern",
      "asm",
      "case",
      "default",
      "register",
      "explicit",
      "typename",
      "switch",
      "continue",
      "inline",
      "readonly",
      "assign",
      "readwrite",
      "self",
      "@synchronized",
      "id",
      "typeof",
      "nonatomic",
      "IBOutlet",
      "IBAction",
      "strong",
      "weak",
      "copy",
      "in",
      "out",
      "inout",
      "bycopy",
      "byref",
      "oneway",
      "__strong",
      "__weak",
      "__block",
      "__autoreleasing",
      "@private",
      "@protected",
      "@public",
      "@try",
      "@property",
      "@end",
      "@throw",
      "@catch",
      "@finally",
      "@autoreleasepool",
      "@synthesize",
      "@dynamic",
      "@selector",
      "@optional",
      "@required",
      "@encode",
      "@package",
      "@import",
      "@defs",
      "@compatibility_alias",
      "__bridge",
      "__bridge_transfer",
      "__bridge_retained",
      "__bridge_retain",
      "__covariant",
      "__contravariant",
      "__kindof",
      "_Nonnull",
      "_Nullable",
      "_Null_unspecified",
      "__FUNCTION__",
      "__PRETTY_FUNCTION__",
      "__attribute__",
      "getter",
      "setter",
      "retain",
      "unsafe_unretained",
      "nonnull",
      "nullable",
      "null_unspecified",
      "null_resettable",
      "class",
      "instancetype",
      "NS_DESIGNATED_INITIALIZER",
      "NS_UNAVAILABLE",
      "NS_REQUIRES_SUPER",
      "NS_RETURNS_INNER_POINTER",
      "NS_INLINE",
      "NS_AVAILABLE",
      "NS_DEPRECATED",
      "NS_ENUM",
      "NS_OPTIONS",
      "NS_SWIFT_UNAVAILABLE",
      "NS_ASSUME_NONNULL_BEGIN",
      "NS_ASSUME_NONNULL_END",
      "NS_REFINED_FOR_SWIFT",
      "NS_SWIFT_NAME",
      "NS_SWIFT_NOTHROW",
      "NS_DURING",
      "NS_HANDLER",
      "NS_ENDHANDLER",
      "NS_VALUERETURN",
      "NS_VOIDRETURN"
    ];
    const LITERALS2 = [
      "false",
      "true",
      "FALSE",
      "TRUE",
      "nil",
      "YES",
      "NO",
      "NULL"
    ];
    const BUILT_INS2 = [
      "dispatch_once_t",
      "dispatch_queue_t",
      "dispatch_sync",
      "dispatch_async",
      "dispatch_once"
    ];
    const KEYWORDS2 = {
      "variable.language": [
        "this",
        "super"
      ],
      $pattern: IDENTIFIER_RE,
      keyword: KWS,
      literal: LITERALS2,
      built_in: BUILT_INS2,
      type: TYPES2
    };
    const CLASS_KEYWORDS = {
      $pattern: IDENTIFIER_RE,
      keyword: [
        "@interface",
        "@class",
        "@protocol",
        "@implementation"
      ]
    };
    return {
      name: "Objective-C",
      aliases: [
        "mm",
        "objc",
        "obj-c",
        "obj-c++",
        "objective-c++"
      ],
      keywords: KEYWORDS2,
      illegal: "</",
      contains: [
        API_CLASS,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.C_NUMBER_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        {
          className: "string",
          variants: [
            {
              begin: '@"',
              end: '"',
              illegal: "\\n",
              contains: [hljs.BACKSLASH_ESCAPE]
            }
          ]
        },
        {
          className: "meta",
          begin: /#\s*[a-z]+\b/,
          end: /$/,
          keywords: { keyword: "if else elif endif define undef warning error line pragma ifdef ifndef include" },
          contains: [
            {
              begin: /\\\n/,
              relevance: 0
            },
            hljs.inherit(hljs.QUOTE_STRING_MODE, { className: "string" }),
            {
              className: "string",
              begin: /<.*?>/,
              end: /$/,
              illegal: "\\n"
            },
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        },
        {
          className: "class",
          begin: "(" + CLASS_KEYWORDS.keyword.join("|") + ")\\b",
          end: /(\{|$)/,
          excludeEnd: true,
          keywords: CLASS_KEYWORDS,
          contains: [hljs.UNDERSCORE_TITLE_MODE]
        },
        {
          begin: "\\." + hljs.UNDERSCORE_IDENT_RE,
          relevance: 0
        }
      ]
    };
  }
  function perl(hljs) {
    const regex = hljs.regex;
    const KEYWORDS2 = [
      "abs",
      "accept",
      "alarm",
      "and",
      "atan2",
      "bind",
      "binmode",
      "bless",
      "break",
      "caller",
      "chdir",
      "chmod",
      "chomp",
      "chop",
      "chown",
      "chr",
      "chroot",
      "class",
      "close",
      "closedir",
      "connect",
      "continue",
      "cos",
      "crypt",
      "dbmclose",
      "dbmopen",
      "defined",
      "delete",
      "die",
      "do",
      "dump",
      "each",
      "else",
      "elsif",
      "endgrent",
      "endhostent",
      "endnetent",
      "endprotoent",
      "endpwent",
      "endservent",
      "eof",
      "eval",
      "exec",
      "exists",
      "exit",
      "exp",
      "fcntl",
      "field",
      "fileno",
      "flock",
      "for",
      "foreach",
      "fork",
      "format",
      "formline",
      "getc",
      "getgrent",
      "getgrgid",
      "getgrnam",
      "gethostbyaddr",
      "gethostbyname",
      "gethostent",
      "getlogin",
      "getnetbyaddr",
      "getnetbyname",
      "getnetent",
      "getpeername",
      "getpgrp",
      "getpriority",
      "getprotobyname",
      "getprotobynumber",
      "getprotoent",
      "getpwent",
      "getpwnam",
      "getpwuid",
      "getservbyname",
      "getservbyport",
      "getservent",
      "getsockname",
      "getsockopt",
      "given",
      "glob",
      "gmtime",
      "goto",
      "grep",
      "gt",
      "hex",
      "if",
      "index",
      "int",
      "ioctl",
      "join",
      "keys",
      "kill",
      "last",
      "lc",
      "lcfirst",
      "length",
      "link",
      "listen",
      "local",
      "localtime",
      "log",
      "lstat",
      "lt",
      "ma",
      "map",
      "method",
      "mkdir",
      "msgctl",
      "msgget",
      "msgrcv",
      "msgsnd",
      "my",
      "ne",
      "next",
      "no",
      "not",
      "oct",
      "open",
      "opendir",
      "or",
      "ord",
      "our",
      "pack",
      "package",
      "pipe",
      "pop",
      "pos",
      "print",
      "printf",
      "prototype",
      "push",
      "q|0",
      "qq",
      "quotemeta",
      "qw",
      "qx",
      "rand",
      "read",
      "readdir",
      "readline",
      "readlink",
      "readpipe",
      "recv",
      "redo",
      "ref",
      "rename",
      "require",
      "reset",
      "return",
      "reverse",
      "rewinddir",
      "rindex",
      "rmdir",
      "say",
      "scalar",
      "seek",
      "seekdir",
      "select",
      "semctl",
      "semget",
      "semop",
      "send",
      "setgrent",
      "sethostent",
      "setnetent",
      "setpgrp",
      "setpriority",
      "setprotoent",
      "setpwent",
      "setservent",
      "setsockopt",
      "shift",
      "shmctl",
      "shmget",
      "shmread",
      "shmwrite",
      "shutdown",
      "sin",
      "sleep",
      "socket",
      "socketpair",
      "sort",
      "splice",
      "split",
      "sprintf",
      "sqrt",
      "srand",
      "stat",
      "state",
      "study",
      "sub",
      "substr",
      "symlink",
      "syscall",
      "sysopen",
      "sysread",
      "sysseek",
      "system",
      "syswrite",
      "tell",
      "telldir",
      "tie",
      "tied",
      "time",
      "times",
      "tr",
      "truncate",
      "uc",
      "ucfirst",
      "umask",
      "undef",
      "unless",
      "unlink",
      "unpack",
      "unshift",
      "untie",
      "until",
      "use",
      "utime",
      "values",
      "vec",
      "wait",
      "waitpid",
      "wantarray",
      "warn",
      "when",
      "while",
      "write",
      "x|0",
      "xor",
      "y|0"
    ];
    const REGEX_MODIFIERS = /[dualxmsipngr]{0,12}/;
    const PERL_KEYWORDS = {
      $pattern: /[\w.]+/,
      keyword: KEYWORDS2.join(" ")
    };
    const SUBST = {
      className: "subst",
      begin: "[$@]\\{",
      end: "\\}",
      keywords: PERL_KEYWORDS
    };
    const METHOD = {
      begin: /->\{/,
      end: /\}/
      // contains defined later
    };
    const ATTR = {
      scope: "attr",
      match: /\s+:\s*\w+(\s*\(.*?\))?/
    };
    const VAR = {
      scope: "variable",
      variants: [
        { begin: /\$\d/ },
        {
          begin: regex.concat(
            /[$%@](?!")(\^\w\b|#\w+(::\w+)*|\{\w+\}|\w+(::\w*)*)/,
            // negative look-ahead tries to avoid matching patterns that are not
            // Perl at all like $ident$, @ident@, etc.
            `(?![A-Za-z])(?![@$%])`
          )
        },
        {
          // Only $= is a special Perl variable and one can't declare @= or %=.
          begin: /[$%@](?!")[^\s\w{=]|\$=/,
          relevance: 0
        }
      ],
      contains: [ATTR]
    };
    const NUMBER = {
      className: "number",
      variants: [
        // decimal numbers:
        // include the case where a number starts with a dot (eg. .9), and
        // the leading 0? avoids mixing the first and second match on 0.x cases
        { match: /0?\.[0-9][0-9_]+\b/ },
        // include the special versioned number (eg. v5.38)
        { match: /\bv?(0|[1-9][0-9_]*(\.[0-9_]+)?|[1-9][0-9_]*)\b/ },
        // non-decimal numbers:
        { match: /\b0[0-7][0-7_]*\b/ },
        { match: /\b0x[0-9a-fA-F][0-9a-fA-F_]*\b/ },
        { match: /\b0b[0-1][0-1_]*\b/ }
      ],
      relevance: 0
    };
    const STRING_CONTAINS = [
      hljs.BACKSLASH_ESCAPE,
      SUBST,
      VAR
    ];
    const REGEX_DELIMS = [
      /!/,
      /\//,
      /\|/,
      /\?/,
      /'/,
      /"/,
      // valid but infrequent and weird
      /#/
      // valid but infrequent and weird
    ];
    const PAIRED_DOUBLE_RE = (prefix, open2, close2 = "\\1") => {
      const middle = close2 === "\\1" ? close2 : regex.concat(close2, open2);
      return regex.concat(
        regex.concat("(?:", prefix, ")"),
        open2,
        /(?:\\.|[^\\\/])*?/,
        middle,
        /(?:\\.|[^\\\/])*?/,
        close2,
        REGEX_MODIFIERS
      );
    };
    const PAIRED_RE = (prefix, open2, close2) => {
      return regex.concat(
        regex.concat("(?:", prefix, ")"),
        open2,
        /(?:\\.|[^\\\/])*?/,
        close2,
        REGEX_MODIFIERS
      );
    };
    const PERL_DEFAULT_CONTAINS = [
      VAR,
      hljs.HASH_COMMENT_MODE,
      hljs.COMMENT(
        /^=\w/,
        /=cut/,
        { endsWithParent: true }
      ),
      METHOD,
      {
        className: "string",
        contains: STRING_CONTAINS,
        variants: [
          {
            begin: "q[qwxr]?\\s*\\(",
            end: "\\)",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*\\[",
            end: "\\]",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*\\{",
            end: "\\}",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*\\|",
            end: "\\|",
            relevance: 5
          },
          {
            begin: "q[qwxr]?\\s*<",
            end: ">",
            relevance: 5
          },
          {
            begin: "qw\\s+q",
            end: "q",
            relevance: 5
          },
          {
            begin: "'",
            end: "'",
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: '"',
            end: '"'
          },
          {
            begin: "`",
            end: "`",
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: /\{\w+\}/,
            relevance: 0
          },
          {
            begin: "-?\\w+\\s*=>",
            relevance: 0
          }
        ]
      },
      NUMBER,
      {
        // regexp container
        begin: "(\\/\\/|" + hljs.RE_STARTERS_RE + "|\\b(split|return|print|reverse|grep)\\b)\\s*",
        keywords: "split return print reverse grep",
        relevance: 0,
        contains: [
          hljs.HASH_COMMENT_MODE,
          {
            className: "regexp",
            variants: [
              // allow matching common delimiters
              { begin: PAIRED_DOUBLE_RE("s|tr|y", regex.either(...REGEX_DELIMS, { capture: true })) },
              // and then paired delmis
              { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\(", "\\)") },
              { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\[", "\\]") },
              { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\{", "\\}") }
            ],
            relevance: 2
          },
          {
            className: "regexp",
            variants: [
              {
                // could be a comment in many languages so do not count
                // as relevant
                begin: /(m|qr)\/\//,
                relevance: 0
              },
              // prefix is optional with /regex/
              { begin: PAIRED_RE("(?:m|qr)?", /\//, /\//) },
              // allow matching common delimiters
              { begin: PAIRED_RE("m|qr", regex.either(...REGEX_DELIMS, { capture: true }), /\1/) },
              // allow common paired delmins
              { begin: PAIRED_RE("m|qr", /\(/, /\)/) },
              { begin: PAIRED_RE("m|qr", /\[/, /\]/) },
              { begin: PAIRED_RE("m|qr", /\{/, /\}/) }
            ]
          }
        ]
      },
      {
        className: "function",
        beginKeywords: "sub method",
        end: "(\\s*\\(.*?\\))?[;{]",
        excludeEnd: true,
        relevance: 5,
        contains: [hljs.TITLE_MODE, ATTR]
      },
      {
        className: "class",
        beginKeywords: "class",
        end: "[;{]",
        excludeEnd: true,
        relevance: 5,
        contains: [hljs.TITLE_MODE, ATTR, NUMBER]
      },
      {
        begin: "-\\w\\b",
        relevance: 0
      },
      {
        begin: "^__DATA__$",
        end: "^__END__$",
        subLanguage: "mojolicious",
        contains: [
          {
            begin: "^@@.*",
            end: "$",
            className: "comment"
          }
        ]
      }
    ];
    SUBST.contains = PERL_DEFAULT_CONTAINS;
    METHOD.contains = PERL_DEFAULT_CONTAINS;
    return {
      name: "Perl",
      aliases: [
        "pl",
        "pm"
      ],
      keywords: PERL_KEYWORDS,
      contains: PERL_DEFAULT_CONTAINS
    };
  }
  function php(hljs) {
    const regex = hljs.regex;
    const NOT_PERL_ETC = /(?![A-Za-z0-9])(?![$])/;
    const IDENT_RE2 = regex.concat(
      /[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/,
      NOT_PERL_ETC
    );
    const PASCAL_CASE_CLASS_NAME_RE = regex.concat(
      /(\\?[A-Z][a-z0-9_\x7f-\xff]+|\\?[A-Z]+(?=[A-Z][a-z0-9_\x7f-\xff])){1,}/,
      NOT_PERL_ETC
    );
    const UPCASE_NAME_RE = regex.concat(
      /[A-Z]+/,
      NOT_PERL_ETC
    );
    const VARIABLE = {
      scope: "variable",
      match: "\\$+" + IDENT_RE2
    };
    const PREPROCESSOR = {
      scope: "meta",
      variants: [
        { begin: /<\?php/, relevance: 10 },
        // boost for obvious PHP
        { begin: /<\?=/ },
        // less relevant per PSR-1 which says not to use short-tags
        { begin: /<\?/, relevance: 0.1 },
        { begin: /\?>/ }
        // end php tag
      ]
    };
    const SUBST = {
      scope: "subst",
      variants: [
        { begin: /\$\w+/ },
        {
          begin: /\{\$/,
          end: /\}/
        }
      ]
    };
    const SINGLE_QUOTED = hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null });
    const DOUBLE_QUOTED = hljs.inherit(hljs.QUOTE_STRING_MODE, {
      illegal: null,
      contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST)
    });
    const HEREDOC = {
      begin: /<<<[ \t]*(?:(\w+)|"(\w+)")\n/,
      end: /[ \t]*(\w+)\b/,
      contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),
      "on:begin": (m, resp) => {
        resp.data._beginMatch = m[1] || m[2];
      },
      "on:end": (m, resp) => {
        if (resp.data._beginMatch !== m[1])
          resp.ignoreMatch();
      }
    };
    const NOWDOC = hljs.END_SAME_AS_BEGIN({
      begin: /<<<[ \t]*'(\w+)'\n/,
      end: /[ \t]*(\w+)\b/
    });
    const WHITESPACE = "[ 	\n]";
    const STRING = {
      scope: "string",
      variants: [
        DOUBLE_QUOTED,
        SINGLE_QUOTED,
        HEREDOC,
        NOWDOC
      ]
    };
    const NUMBER = {
      scope: "number",
      variants: [
        { begin: `\\b0[bB][01]+(?:_[01]+)*\\b` },
        // Binary w/ underscore support
        { begin: `\\b0[oO][0-7]+(?:_[0-7]+)*\\b` },
        // Octals w/ underscore support
        { begin: `\\b0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*\\b` },
        // Hex w/ underscore support
        // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.
        { begin: `(?:\\b\\d+(?:_\\d+)*(\\.(?:\\d+(?:_\\d+)*))?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?` }
      ],
      relevance: 0
    };
    const LITERALS2 = [
      "false",
      "null",
      "true"
    ];
    const KWS = [
      // Magic constants:
      // <https://www.php.net/manual/en/language.constants.predefined.php>
      "__CLASS__",
      "__DIR__",
      "__FILE__",
      "__FUNCTION__",
      "__COMPILER_HALT_OFFSET__",
      "__LINE__",
      "__METHOD__",
      "__NAMESPACE__",
      "__TRAIT__",
      // Function that look like language construct or language construct that look like function:
      // List of keywords that may not require parenthesis
      "die",
      "echo",
      "exit",
      "include",
      "include_once",
      "print",
      "require",
      "require_once",
      // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table
      // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +
      // Other keywords:
      // <https://www.php.net/manual/en/reserved.php>
      // <https://www.php.net/manual/en/language.types.type-juggling.php>
      "array",
      "abstract",
      "and",
      "as",
      "binary",
      "bool",
      "boolean",
      "break",
      "callable",
      "case",
      "catch",
      "class",
      "clone",
      "const",
      "continue",
      "declare",
      "default",
      "do",
      "double",
      "else",
      "elseif",
      "empty",
      "enddeclare",
      "endfor",
      "endforeach",
      "endif",
      "endswitch",
      "endwhile",
      "enum",
      "eval",
      "extends",
      "final",
      "finally",
      "float",
      "for",
      "foreach",
      "from",
      "global",
      "goto",
      "if",
      "implements",
      "instanceof",
      "insteadof",
      "int",
      "integer",
      "interface",
      "isset",
      "iterable",
      "list",
      "match|0",
      "mixed",
      "new",
      "never",
      "object",
      "or",
      "private",
      "protected",
      "public",
      "readonly",
      "real",
      "return",
      "string",
      "switch",
      "throw",
      "trait",
      "try",
      "unset",
      "use",
      "var",
      "void",
      "while",
      "xor",
      "yield"
    ];
    const BUILT_INS2 = [
      // Standard PHP library:
      // <https://www.php.net/manual/en/book.spl.php>
      "Error|0",
      "AppendIterator",
      "ArgumentCountError",
      "ArithmeticError",
      "ArrayIterator",
      "ArrayObject",
      "AssertionError",
      "BadFunctionCallException",
      "BadMethodCallException",
      "CachingIterator",
      "CallbackFilterIterator",
      "CompileError",
      "Countable",
      "DirectoryIterator",
      "DivisionByZeroError",
      "DomainException",
      "EmptyIterator",
      "ErrorException",
      "Exception",
      "FilesystemIterator",
      "FilterIterator",
      "GlobIterator",
      "InfiniteIterator",
      "InvalidArgumentException",
      "IteratorIterator",
      "LengthException",
      "LimitIterator",
      "LogicException",
      "MultipleIterator",
      "NoRewindIterator",
      "OutOfBoundsException",
      "OutOfRangeException",
      "OuterIterator",
      "OverflowException",
      "ParentIterator",
      "ParseError",
      "RangeException",
      "RecursiveArrayIterator",
      "RecursiveCachingIterator",
      "RecursiveCallbackFilterIterator",
      "RecursiveDirectoryIterator",
      "RecursiveFilterIterator",
      "RecursiveIterator",
      "RecursiveIteratorIterator",
      "RecursiveRegexIterator",
      "RecursiveTreeIterator",
      "RegexIterator",
      "RuntimeException",
      "SeekableIterator",
      "SplDoublyLinkedList",
      "SplFileInfo",
      "SplFileObject",
      "SplFixedArray",
      "SplHeap",
      "SplMaxHeap",
      "SplMinHeap",
      "SplObjectStorage",
      "SplObserver",
      "SplPriorityQueue",
      "SplQueue",
      "SplStack",
      "SplSubject",
      "SplTempFileObject",
      "TypeError",
      "UnderflowException",
      "UnexpectedValueException",
      "UnhandledMatchError",
      // Reserved interfaces:
      // <https://www.php.net/manual/en/reserved.interfaces.php>
      "ArrayAccess",
      "BackedEnum",
      "Closure",
      "Fiber",
      "Generator",
      "Iterator",
      "IteratorAggregate",
      "Serializable",
      "Stringable",
      "Throwable",
      "Traversable",
      "UnitEnum",
      "WeakReference",
      "WeakMap",
      // Reserved classes:
      // <https://www.php.net/manual/en/reserved.classes.php>
      "Directory",
      "__PHP_Incomplete_Class",
      "parent",
      "php_user_filter",
      "self",
      "static",
      "stdClass"
    ];
    const dualCase = (items2) => {
      const result = [];
      items2.forEach((item) => {
        result.push(item);
        if (item.toLowerCase() === item) {
          result.push(item.toUpperCase());
        } else {
          result.push(item.toLowerCase());
        }
      });
      return result;
    };
    const KEYWORDS2 = {
      keyword: KWS,
      literal: dualCase(LITERALS2),
      built_in: BUILT_INS2
    };
    const normalizeKeywords = (items2) => {
      return items2.map((item) => {
        return item.replace(/\|\d+$/, "");
      });
    };
    const CONSTRUCTOR_CALL = { variants: [
      {
        match: [
          /new/,
          regex.concat(WHITESPACE, "+"),
          // to prevent built ins from being confused as the class constructor call
          regex.concat("(?!", normalizeKeywords(BUILT_INS2).join("\\b|"), "\\b)"),
          PASCAL_CASE_CLASS_NAME_RE
        ],
        scope: {
          1: "keyword",
          4: "title.class"
        }
      }
    ] };
    const CONSTANT_REFERENCE = regex.concat(IDENT_RE2, "\\b(?!\\()");
    const LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON = { variants: [
      {
        match: [
          regex.concat(
            /::/,
            regex.lookahead(/(?!class\b)/)
          ),
          CONSTANT_REFERENCE
        ],
        scope: { 2: "variable.constant" }
      },
      {
        match: [
          /::/,
          /class/
        ],
        scope: { 2: "variable.language" }
      },
      {
        match: [
          PASCAL_CASE_CLASS_NAME_RE,
          regex.concat(
            /::/,
            regex.lookahead(/(?!class\b)/)
          ),
          CONSTANT_REFERENCE
        ],
        scope: {
          1: "title.class",
          3: "variable.constant"
        }
      },
      {
        match: [
          PASCAL_CASE_CLASS_NAME_RE,
          regex.concat(
            "::",
            regex.lookahead(/(?!class\b)/)
          )
        ],
        scope: { 1: "title.class" }
      },
      {
        match: [
          PASCAL_CASE_CLASS_NAME_RE,
          /::/,
          /class/
        ],
        scope: {
          1: "title.class",
          3: "variable.language"
        }
      }
    ] };
    const NAMED_ARGUMENT = {
      scope: "attr",
      match: regex.concat(IDENT_RE2, regex.lookahead(":"), regex.lookahead(/(?!::)/))
    };
    const PARAMS_MODE = {
      relevance: 0,
      begin: /\(/,
      end: /\)/,
      keywords: KEYWORDS2,
      contains: [
        NAMED_ARGUMENT,
        VARIABLE,
        LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
        hljs.C_BLOCK_COMMENT_MODE,
        STRING,
        NUMBER,
        CONSTRUCTOR_CALL
      ]
    };
    const FUNCTION_INVOKE = {
      relevance: 0,
      match: [
        /\b/,
        // to prevent keywords from being confused as the function title
        regex.concat("(?!fn\\b|function\\b|", normalizeKeywords(KWS).join("\\b|"), "|", normalizeKeywords(BUILT_INS2).join("\\b|"), "\\b)"),
        IDENT_RE2,
        regex.concat(WHITESPACE, "*"),
        regex.lookahead(/(?=\()/)
      ],
      scope: { 3: "title.function.invoke" },
      contains: [PARAMS_MODE]
    };
    PARAMS_MODE.contains.push(FUNCTION_INVOKE);
    const ATTRIBUTE_CONTAINS = [
      NAMED_ARGUMENT,
      LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
      hljs.C_BLOCK_COMMENT_MODE,
      STRING,
      NUMBER,
      CONSTRUCTOR_CALL
    ];
    const ATTRIBUTES2 = {
      begin: regex.concat(
        /#\[\s*\\?/,
        regex.either(
          PASCAL_CASE_CLASS_NAME_RE,
          UPCASE_NAME_RE
        )
      ),
      beginScope: "meta",
      end: /]/,
      endScope: "meta",
      keywords: {
        literal: LITERALS2,
        keyword: [
          "new",
          "array"
        ]
      },
      contains: [
        {
          begin: /\[/,
          end: /]/,
          keywords: {
            literal: LITERALS2,
            keyword: [
              "new",
              "array"
            ]
          },
          contains: [
            "self",
            ...ATTRIBUTE_CONTAINS
          ]
        },
        ...ATTRIBUTE_CONTAINS,
        {
          scope: "meta",
          variants: [
            { match: PASCAL_CASE_CLASS_NAME_RE },
            { match: UPCASE_NAME_RE }
          ]
        }
      ]
    };
    return {
      case_insensitive: false,
      keywords: KEYWORDS2,
      contains: [
        ATTRIBUTES2,
        hljs.HASH_COMMENT_MODE,
        hljs.COMMENT("//", "$"),
        hljs.COMMENT(
          "/\\*",
          "\\*/",
          { contains: [
            {
              scope: "doctag",
              match: "@[A-Za-z]+"
            }
          ] }
        ),
        {
          match: /__halt_compiler\(\);/,
          keywords: "__halt_compiler",
          starts: {
            scope: "comment",
            end: hljs.MATCH_NOTHING_RE,
            contains: [
              {
                match: /\?>/,
                scope: "meta",
                endsParent: true
              }
            ]
          }
        },
        PREPROCESSOR,
        {
          scope: "variable.language",
          match: /\$this\b/
        },
        VARIABLE,
        FUNCTION_INVOKE,
        LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
        {
          match: [
            /const/,
            /\s/,
            IDENT_RE2
          ],
          scope: {
            1: "keyword",
            3: "variable.constant"
          }
        },
        CONSTRUCTOR_CALL,
        {
          scope: "function",
          relevance: 0,
          beginKeywords: "fn function",
          end: /[;{]/,
          excludeEnd: true,
          illegal: "[$%\\[]",
          contains: [
            { beginKeywords: "use" },
            hljs.UNDERSCORE_TITLE_MODE,
            {
              begin: "=>",
              // No markup, just a relevance booster
              endsParent: true
            },
            {
              scope: "params",
              begin: "\\(",
              end: "\\)",
              excludeBegin: true,
              excludeEnd: true,
              keywords: KEYWORDS2,
              contains: [
                "self",
                ATTRIBUTES2,
                VARIABLE,
                LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
                hljs.C_BLOCK_COMMENT_MODE,
                STRING,
                NUMBER
              ]
            }
          ]
        },
        {
          scope: "class",
          variants: [
            {
              beginKeywords: "enum",
              illegal: /[($"]/
            },
            {
              beginKeywords: "class interface trait",
              illegal: /[:($"]/
            }
          ],
          relevance: 0,
          end: /\{/,
          excludeEnd: true,
          contains: [
            { beginKeywords: "extends implements" },
            hljs.UNDERSCORE_TITLE_MODE
          ]
        },
        // both use and namespace still use "old style" rules (vs multi-match)
        // because the namespace name can include `\` and we still want each
        // element to be treated as its own *individual* title
        {
          beginKeywords: "namespace",
          relevance: 0,
          end: ";",
          illegal: /[.']/,
          contains: [hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, { scope: "title.class" })]
        },
        {
          beginKeywords: "use",
          relevance: 0,
          end: ";",
          contains: [
            // TODO: title.function vs title.class
            {
              match: /\b(as|const|function)\b/,
              scope: "keyword"
            },
            // TODO: could be title.class or title.function
            hljs.UNDERSCORE_TITLE_MODE
          ]
        },
        STRING,
        NUMBER
      ]
    };
  }
  function phpTemplate(hljs) {
    return {
      name: "PHP template",
      subLanguage: "xml",
      contains: [
        {
          begin: /<\?(php|=)?/,
          end: /\?>/,
          subLanguage: "php",
          contains: [
            // We don't want the php closing tag ?> to close the PHP block when
            // inside any of the following blocks:
            {
              begin: "/\\*",
              end: "\\*/",
              skip: true
            },
            {
              begin: 'b"',
              end: '"',
              skip: true
            },
            {
              begin: "b'",
              end: "'",
              skip: true
            },
            hljs.inherit(hljs.APOS_STRING_MODE, {
              illegal: null,
              className: null,
              contains: null,
              skip: true
            }),
            hljs.inherit(hljs.QUOTE_STRING_MODE, {
              illegal: null,
              className: null,
              contains: null,
              skip: true
            })
          ]
        }
      ]
    };
  }
  function plaintext(hljs) {
    return {
      name: "Plain text",
      aliases: [
        "text",
        "txt"
      ],
      disableAutodetect: true
    };
  }
  function python(hljs) {
    const regex = hljs.regex;
    const IDENT_RE2 = /[\p{XID_Start}_]\p{XID_Continue}*/u;
    const RESERVED_WORDS = [
      "and",
      "as",
      "assert",
      "async",
      "await",
      "break",
      "case",
      "class",
      "continue",
      "def",
      "del",
      "elif",
      "else",
      "except",
      "finally",
      "for",
      "from",
      "global",
      "if",
      "import",
      "in",
      "is",
      "lambda",
      "match",
      "nonlocal|10",
      "not",
      "or",
      "pass",
      "raise",
      "return",
      "try",
      "while",
      "with",
      "yield"
    ];
    const BUILT_INS2 = [
      "__import__",
      "abs",
      "all",
      "any",
      "ascii",
      "bin",
      "bool",
      "breakpoint",
      "bytearray",
      "bytes",
      "callable",
      "chr",
      "classmethod",
      "compile",
      "complex",
      "delattr",
      "dict",
      "dir",
      "divmod",
      "enumerate",
      "eval",
      "exec",
      "filter",
      "float",
      "format",
      "frozenset",
      "getattr",
      "globals",
      "hasattr",
      "hash",
      "help",
      "hex",
      "id",
      "input",
      "int",
      "isinstance",
      "issubclass",
      "iter",
      "len",
      "list",
      "locals",
      "map",
      "max",
      "memoryview",
      "min",
      "next",
      "object",
      "oct",
      "open",
      "ord",
      "pow",
      "print",
      "property",
      "range",
      "repr",
      "reversed",
      "round",
      "set",
      "setattr",
      "slice",
      "sorted",
      "staticmethod",
      "str",
      "sum",
      "super",
      "tuple",
      "type",
      "vars",
      "zip"
    ];
    const LITERALS2 = [
      "__debug__",
      "Ellipsis",
      "False",
      "None",
      "NotImplemented",
      "True"
    ];
    const TYPES2 = [
      "Any",
      "Callable",
      "Coroutine",
      "Dict",
      "List",
      "Literal",
      "Generic",
      "Optional",
      "Sequence",
      "Set",
      "Tuple",
      "Type",
      "Union"
    ];
    const KEYWORDS2 = {
      $pattern: /[A-Za-z]\w+|__\w+__/,
      keyword: RESERVED_WORDS,
      built_in: BUILT_INS2,
      literal: LITERALS2,
      type: TYPES2
    };
    const PROMPT = {
      className: "meta",
      begin: /^(>>>|\.\.\.) /
    };
    const SUBST = {
      className: "subst",
      begin: /\{/,
      end: /\}/,
      keywords: KEYWORDS2,
      illegal: /#/
    };
    const LITERAL_BRACKET = {
      begin: /\{\{/,
      relevance: 0
    };
    const STRING = {
      className: "string",
      contains: [hljs.BACKSLASH_ESCAPE],
      variants: [
        {
          begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,
          end: /'''/,
          contains: [
            hljs.BACKSLASH_ESCAPE,
            PROMPT
          ],
          relevance: 10
        },
        {
          begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,
          end: /"""/,
          contains: [
            hljs.BACKSLASH_ESCAPE,
            PROMPT
          ],
          relevance: 10
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])'''/,
          end: /'''/,
          contains: [
            hljs.BACKSLASH_ESCAPE,
            PROMPT,
            LITERAL_BRACKET,
            SUBST
          ]
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])"""/,
          end: /"""/,
          contains: [
            hljs.BACKSLASH_ESCAPE,
            PROMPT,
            LITERAL_BRACKET,
            SUBST
          ]
        },
        {
          begin: /([uU]|[rR])'/,
          end: /'/,
          relevance: 10
        },
        {
          begin: /([uU]|[rR])"/,
          end: /"/,
          relevance: 10
        },
        {
          begin: /([bB]|[bB][rR]|[rR][bB])'/,
          end: /'/
        },
        {
          begin: /([bB]|[bB][rR]|[rR][bB])"/,
          end: /"/
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])'/,
          end: /'/,
          contains: [
            hljs.BACKSLASH_ESCAPE,
            LITERAL_BRACKET,
            SUBST
          ]
        },
        {
          begin: /([fF][rR]|[rR][fF]|[fF])"/,
          end: /"/,
          contains: [
            hljs.BACKSLASH_ESCAPE,
            LITERAL_BRACKET,
            SUBST
          ]
        },
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE
      ]
    };
    const digitpart = "[0-9](_?[0-9])*";
    const pointfloat = `(\\b(${digitpart}))?\\.(${digitpart})|\\b(${digitpart})\\.`;
    const lookahead2 = `\\b|${RESERVED_WORDS.join("|")}`;
    const NUMBER = {
      className: "number",
      relevance: 0,
      variants: [
        // exponentfloat, pointfloat
        // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals
        // optionally imaginary
        // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
        // Note: no leading \b because floats can start with a decimal point
        // and we don't want to mishandle e.g. `fn(.5)`,
        // no trailing \b for pointfloat because it can end with a decimal point
        // and we don't want to mishandle e.g. `0..hex()`; this should be safe
        // because both MUST contain a decimal point and so cannot be confused with
        // the interior part of an identifier
        {
          begin: `(\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?(?=${lookahead2})`
        },
        {
          begin: `(${pointfloat})[jJ]?`
        },
        // decinteger, bininteger, octinteger, hexinteger
        // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals
        // optionally "long" in Python 2
        // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals
        // decinteger is optionally imaginary
        // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
        {
          begin: `\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${lookahead2})`
        },
        {
          begin: `\\b0[bB](_?[01])+[lL]?(?=${lookahead2})`
        },
        {
          begin: `\\b0[oO](_?[0-7])+[lL]?(?=${lookahead2})`
        },
        {
          begin: `\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${lookahead2})`
        },
        // imagnumber (digitpart-based)
        // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
        {
          begin: `\\b(${digitpart})[jJ](?=${lookahead2})`
        }
      ]
    };
    const COMMENT_TYPE = {
      className: "comment",
      begin: regex.lookahead(/# type:/),
      end: /$/,
      keywords: KEYWORDS2,
      contains: [
        {
          // prevent keywords from coloring `type`
          begin: /# type:/
        },
        // comment within a datatype comment includes no keywords
        {
          begin: /#/,
          end: /\b\B/,
          endsWithParent: true
        }
      ]
    };
    const PARAMS = {
      className: "params",
      variants: [
        // Exclude params in functions without params
        {
          className: "",
          begin: /\(\s*\)/,
          skip: true
        },
        {
          begin: /\(/,
          end: /\)/,
          excludeBegin: true,
          excludeEnd: true,
          keywords: KEYWORDS2,
          contains: [
            "self",
            PROMPT,
            NUMBER,
            STRING,
            hljs.HASH_COMMENT_MODE
          ]
        }
      ]
    };
    SUBST.contains = [
      STRING,
      NUMBER,
      PROMPT
    ];
    return {
      name: "Python",
      aliases: [
        "py",
        "gyp",
        "ipython"
      ],
      unicodeRegex: true,
      keywords: KEYWORDS2,
      illegal: /(<\/|\?)|=>/,
      contains: [
        PROMPT,
        NUMBER,
        {
          // very common convention
          scope: "variable.language",
          match: /\bself\b/
        },
        {
          // eat "if" prior to string so that it won't accidentally be
          // labeled as an f-string
          beginKeywords: "if",
          relevance: 0
        },
        { match: /\bor\b/, scope: "keyword" },
        STRING,
        COMMENT_TYPE,
        hljs.HASH_COMMENT_MODE,
        {
          match: [
            /\bdef/,
            /\s+/,
            IDENT_RE2
          ],
          scope: {
            1: "keyword",
            3: "title.function"
          },
          contains: [PARAMS]
        },
        {
          variants: [
            {
              match: [
                /\bclass/,
                /\s+/,
                IDENT_RE2,
                /\s*/,
                /\(\s*/,
                IDENT_RE2,
                /\s*\)/
              ]
            },
            {
              match: [
                /\bclass/,
                /\s+/,
                IDENT_RE2
              ]
            }
          ],
          scope: {
            1: "keyword",
            3: "title.class",
            6: "title.class.inherited"
          }
        },
        {
          className: "meta",
          begin: /^[\t ]*@/,
          end: /(?=#)|$/,
          contains: [
            NUMBER,
            PARAMS,
            STRING
          ]
        }
      ]
    };
  }
  function pythonRepl(hljs) {
    return {
      aliases: ["pycon"],
      contains: [
        {
          className: "meta.prompt",
          starts: {
            // a space separates the REPL prefix from the actual code
            // this is purely for cleaner HTML output
            end: / |$/,
            starts: {
              end: "$",
              subLanguage: "python"
            }
          },
          variants: [
            { begin: /^>>>(?=[ ]|$)/ },
            { begin: /^\.\.\.(?=[ ]|$)/ }
          ]
        }
      ]
    };
  }
  function r(hljs) {
    const regex = hljs.regex;
    const IDENT_RE2 = /(?:(?:[a-zA-Z]|\.[._a-zA-Z])[._a-zA-Z0-9]*)|\.(?!\d)/;
    const NUMBER_TYPES_RE = regex.either(
      // Special case: only hexadecimal binary powers can contain fractions
      /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/,
      // Hexadecimal numbers without fraction and optional binary power
      /0[xX][0-9a-fA-F]+(?:[pP][+-]?\d+)?[Li]?/,
      // Decimal numbers
      /(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?[Li]?/
    );
    const OPERATORS_RE = /[=!<>:]=|\|\||&&|:::?|<-|<<-|->>|->|\|>|[-+*\/?!$&|:<=>@^~]|\*\*/;
    const PUNCTUATION_RE = regex.either(
      /[()]/,
      /[{}]/,
      /\[\[/,
      /[[\]]/,
      /\\/,
      /,/
    );
    return {
      name: "R",
      keywords: {
        $pattern: IDENT_RE2,
        keyword: "function if in break next repeat else for while",
        literal: "NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10",
        built_in: (
          // Builtin constants
          "LETTERS letters month.abb month.name pi T F abs acos acosh all any anyNA Arg as.call as.character as.complex as.double as.environment as.integer as.logical as.null.default as.numeric as.raw asin asinh atan atanh attr attributes baseenv browser c call ceiling class Conj cos cosh cospi cummax cummin cumprod cumsum digamma dim dimnames emptyenv exp expression floor forceAndCall gamma gc.time globalenv Im interactive invisible is.array is.atomic is.call is.character is.complex is.double is.environment is.expression is.finite is.function is.infinite is.integer is.language is.list is.logical is.matrix is.na is.name is.nan is.null is.numeric is.object is.pairlist is.raw is.recursive is.single is.symbol lazyLoadDBfetch length lgamma list log max min missing Mod names nargs nzchar oldClass on.exit pos.to.env proc.time prod quote range Re rep retracemem return round seq_along seq_len seq.int sign signif sin sinh sinpi sqrt standardGeneric substitute sum switch tan tanh tanpi tracemem trigamma trunc unclass untracemem UseMethod xtfrm"
        )
      },
      contains: [
        // Roxygen comments
        hljs.COMMENT(
          /#'/,
          /$/,
          { contains: [
            {
              // Handle `@examples` separately to cause all subsequent code
              // until the next `@`-tag on its own line to be kept as-is,
              // preventing highlighting. This code is example R code, so nested
              // doctags shouldn’t be treated as such. See
              // `test/markup/r/roxygen.txt` for an example.
              scope: "doctag",
              match: /@examples/,
              starts: {
                end: regex.lookahead(regex.either(
                  // end if another doc comment
                  /\n^#'\s*(?=@[a-zA-Z]+)/,
                  // or a line with no comment
                  /\n^(?!#')/
                )),
                endsParent: true
              }
            },
            {
              // Handle `@param` to highlight the parameter name following
              // after.
              scope: "doctag",
              begin: "@param",
              end: /$/,
              contains: [
                {
                  scope: "variable",
                  variants: [
                    { match: IDENT_RE2 },
                    { match: /`(?:\\.|[^`\\])+`/ }
                  ],
                  endsParent: true
                }
              ]
            },
            {
              scope: "doctag",
              match: /@[a-zA-Z]+/
            },
            {
              scope: "keyword",
              match: /\\[a-zA-Z]+/
            }
          ] }
        ),
        hljs.HASH_COMMENT_MODE,
        {
          scope: "string",
          contains: [hljs.BACKSLASH_ESCAPE],
          variants: [
            hljs.END_SAME_AS_BEGIN({
              begin: /[rR]"(-*)\(/,
              end: /\)(-*)"/
            }),
            hljs.END_SAME_AS_BEGIN({
              begin: /[rR]"(-*)\{/,
              end: /\}(-*)"/
            }),
            hljs.END_SAME_AS_BEGIN({
              begin: /[rR]"(-*)\[/,
              end: /\](-*)"/
            }),
            hljs.END_SAME_AS_BEGIN({
              begin: /[rR]'(-*)\(/,
              end: /\)(-*)'/
            }),
            hljs.END_SAME_AS_BEGIN({
              begin: /[rR]'(-*)\{/,
              end: /\}(-*)'/
            }),
            hljs.END_SAME_AS_BEGIN({
              begin: /[rR]'(-*)\[/,
              end: /\](-*)'/
            }),
            {
              begin: '"',
              end: '"',
              relevance: 0
            },
            {
              begin: "'",
              end: "'",
              relevance: 0
            }
          ]
        },
        // Matching numbers immediately following punctuation and operators is
        // tricky since we need to look at the character ahead of a number to
        // ensure the number is not part of an identifier, and we cannot use
        // negative look-behind assertions. So instead we explicitly handle all
        // possible combinations of (operator|punctuation), number.
        // TODO: replace with negative look-behind when available
        // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/ },
        // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\d+)?[Li]?/ },
        // { begin: /(?<![a-zA-Z0-9._])(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?[Li]?/ }
        {
          relevance: 0,
          variants: [
            {
              scope: {
                1: "operator",
                2: "number"
              },
              match: [
                OPERATORS_RE,
                NUMBER_TYPES_RE
              ]
            },
            {
              scope: {
                1: "operator",
                2: "number"
              },
              match: [
                /%[^%]*%/,
                NUMBER_TYPES_RE
              ]
            },
            {
              scope: {
                1: "punctuation",
                2: "number"
              },
              match: [
                PUNCTUATION_RE,
                NUMBER_TYPES_RE
              ]
            },
            {
              scope: { 2: "number" },
              match: [
                /[^a-zA-Z0-9._]|^/,
                // not part of an identifier, or start of document
                NUMBER_TYPES_RE
              ]
            }
          ]
        },
        // Operators/punctuation when they're not directly followed by numbers
        {
          // Relevance boost for the most common assignment form.
          scope: { 3: "operator" },
          match: [
            IDENT_RE2,
            /\s+/,
            /<-/,
            /\s+/
          ]
        },
        {
          scope: "operator",
          relevance: 0,
          variants: [
            { match: OPERATORS_RE },
            { match: /%[^%]*%/ }
          ]
        },
        {
          scope: "punctuation",
          relevance: 0,
          match: PUNCTUATION_RE
        },
        {
          // Escaped identifier
          begin: "`",
          end: "`",
          contains: [{ begin: /\\./ }]
        }
      ]
    };
  }
  function ruby(hljs) {
    const regex = hljs.regex;
    const RUBY_METHOD_RE = "([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)";
    const CLASS_NAME_RE = regex.either(
      /\b([A-Z]+[a-z0-9]+)+/,
      // ends in caps
      /\b([A-Z]+[a-z0-9]+)+[A-Z]+/
    );
    const CLASS_NAME_WITH_NAMESPACE_RE = regex.concat(CLASS_NAME_RE, /(::\w+)*/);
    const PSEUDO_KWS = [
      "include",
      "extend",
      "prepend",
      "public",
      "private",
      "protected",
      "raise",
      "throw"
    ];
    const RUBY_KEYWORDS = {
      "variable.constant": [
        "__FILE__",
        "__LINE__",
        "__ENCODING__"
      ],
      "variable.language": [
        "self",
        "super"
      ],
      keyword: [
        "alias",
        "and",
        "begin",
        "BEGIN",
        "break",
        "case",
        "class",
        "defined",
        "do",
        "else",
        "elsif",
        "end",
        "END",
        "ensure",
        "for",
        "if",
        "in",
        "module",
        "next",
        "not",
        "or",
        "redo",
        "require",
        "rescue",
        "retry",
        "return",
        "then",
        "undef",
        "unless",
        "until",
        "when",
        "while",
        "yield",
        ...PSEUDO_KWS
      ],
      built_in: [
        "proc",
        "lambda",
        "attr_accessor",
        "attr_reader",
        "attr_writer",
        "define_method",
        "private_constant",
        "module_function"
      ],
      literal: [
        "true",
        "false",
        "nil"
      ]
    };
    const YARDOCTAG = {
      className: "doctag",
      begin: "@[A-Za-z]+"
    };
    const IRB_OBJECT = {
      begin: "#<",
      end: ">"
    };
    const COMMENT_MODES = [
      hljs.COMMENT(
        "#",
        "$",
        { contains: [YARDOCTAG] }
      ),
      hljs.COMMENT(
        "^=begin",
        "^=end",
        {
          contains: [YARDOCTAG],
          relevance: 10
        }
      ),
      hljs.COMMENT("^__END__", hljs.MATCH_NOTHING_RE)
    ];
    const SUBST = {
      className: "subst",
      begin: /#\{/,
      end: /\}/,
      keywords: RUBY_KEYWORDS
    };
    const STRING = {
      className: "string",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ],
      variants: [
        {
          begin: /'/,
          end: /'/
        },
        {
          begin: /"/,
          end: /"/
        },
        {
          begin: /`/,
          end: /`/
        },
        {
          begin: /%[qQwWx]?\(/,
          end: /\)/
        },
        {
          begin: /%[qQwWx]?\[/,
          end: /\]/
        },
        {
          begin: /%[qQwWx]?\{/,
          end: /\}/
        },
        {
          begin: /%[qQwWx]?</,
          end: />/
        },
        {
          begin: /%[qQwWx]?\//,
          end: /\//
        },
        {
          begin: /%[qQwWx]?%/,
          end: /%/
        },
        {
          begin: /%[qQwWx]?-/,
          end: /-/
        },
        {
          begin: /%[qQwWx]?\|/,
          end: /\|/
        },
        // in the following expressions, \B in the beginning suppresses recognition of ?-sequences
        // where ? is the last character of a preceding identifier, as in: `func?4`
        { begin: /\B\?(\\\d{1,3})/ },
        { begin: /\B\?(\\x[A-Fa-f0-9]{1,2})/ },
        { begin: /\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/ },
        { begin: /\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/ },
        { begin: /\B\?\\(c|C-)[\x20-\x7e]/ },
        { begin: /\B\?\\?\S/ },
        // heredocs
        {
          // this guard makes sure that we have an entire heredoc and not a false
          // positive (auto-detect, etc.)
          begin: regex.concat(
            /<<[-~]?'?/,
            regex.lookahead(/(\w+)(?=\W)[^\n]*\n(?:[^\n]*\n)*?\s*\1\b/)
          ),
          contains: [
            hljs.END_SAME_AS_BEGIN({
              begin: /(\w+)/,
              end: /(\w+)/,
              contains: [
                hljs.BACKSLASH_ESCAPE,
                SUBST
              ]
            })
          ]
        }
      ]
    };
    const decimal = "[1-9](_?[0-9])*|0";
    const digits = "[0-9](_?[0-9])*";
    const NUMBER = {
      className: "number",
      relevance: 0,
      variants: [
        // decimal integer/float, optionally exponential or rational, optionally imaginary
        { begin: `\\b(${decimal})(\\.(${digits}))?([eE][+-]?(${digits})|r)?i?\\b` },
        // explicit decimal/binary/octal/hexadecimal integer,
        // optionally rational and/or imaginary
        { begin: "\\b0[dD][0-9](_?[0-9])*r?i?\\b" },
        { begin: "\\b0[bB][0-1](_?[0-1])*r?i?\\b" },
        { begin: "\\b0[oO][0-7](_?[0-7])*r?i?\\b" },
        { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b" },
        // 0-prefixed implicit octal integer, optionally rational and/or imaginary
        { begin: "\\b0(_?[0-7])+r?i?\\b" }
      ]
    };
    const PARAMS = {
      variants: [
        {
          match: /\(\)/
        },
        {
          className: "params",
          begin: /\(/,
          end: /(?=\))/,
          excludeBegin: true,
          endsParent: true,
          keywords: RUBY_KEYWORDS
        }
      ]
    };
    const INCLUDE_EXTEND = {
      match: [
        /(include|extend)\s+/,
        CLASS_NAME_WITH_NAMESPACE_RE
      ],
      scope: {
        2: "title.class"
      },
      keywords: RUBY_KEYWORDS
    };
    const CLASS_DEFINITION = {
      variants: [
        {
          match: [
            /class\s+/,
            CLASS_NAME_WITH_NAMESPACE_RE,
            /\s+<\s+/,
            CLASS_NAME_WITH_NAMESPACE_RE
          ]
        },
        {
          match: [
            /\b(class|module)\s+/,
            CLASS_NAME_WITH_NAMESPACE_RE
          ]
        }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: RUBY_KEYWORDS
    };
    const UPPER_CASE_CONSTANT = {
      relevance: 0,
      match: /\b[A-Z][A-Z_0-9]+\b/,
      className: "variable.constant"
    };
    const METHOD_DEFINITION = {
      match: [
        /def/,
        /\s+/,
        RUBY_METHOD_RE
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        PARAMS
      ]
    };
    const OBJECT_CREATION = {
      relevance: 0,
      match: [
        CLASS_NAME_WITH_NAMESPACE_RE,
        /\.new[. (]/
      ],
      scope: {
        1: "title.class"
      }
    };
    const CLASS_REFERENCE = {
      relevance: 0,
      match: CLASS_NAME_RE,
      scope: "title.class"
    };
    const RUBY_DEFAULT_CONTAINS = [
      STRING,
      CLASS_DEFINITION,
      INCLUDE_EXTEND,
      OBJECT_CREATION,
      UPPER_CASE_CONSTANT,
      CLASS_REFERENCE,
      METHOD_DEFINITION,
      {
        // swallow namespace qualifiers before symbols
        begin: hljs.IDENT_RE + "::"
      },
      {
        className: "symbol",
        begin: hljs.UNDERSCORE_IDENT_RE + "(!|\\?)?:",
        relevance: 0
      },
      {
        className: "symbol",
        begin: ":(?!\\s)",
        contains: [
          STRING,
          { begin: RUBY_METHOD_RE }
        ],
        relevance: 0
      },
      NUMBER,
      {
        // negative-look forward attempts to prevent false matches like:
        // @ident@ or $ident$ that might indicate this is not ruby at all
        className: "variable",
        begin: `(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])`
      },
      {
        className: "params",
        begin: /\|(?!=)/,
        end: /\|/,
        excludeBegin: true,
        excludeEnd: true,
        relevance: 0,
        // this could be a lot of things (in other languages) other than params
        keywords: RUBY_KEYWORDS
      },
      {
        // regexp container
        begin: "(" + hljs.RE_STARTERS_RE + "|unless)\\s*",
        keywords: "unless",
        contains: [
          {
            className: "regexp",
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ],
            illegal: /\n/,
            variants: [
              {
                begin: "/",
                end: "/[a-z]*"
              },
              {
                begin: /%r\{/,
                end: /\}[a-z]*/
              },
              {
                begin: "%r\\(",
                end: "\\)[a-z]*"
              },
              {
                begin: "%r!",
                end: "![a-z]*"
              },
              {
                begin: "%r\\[",
                end: "\\][a-z]*"
              }
            ]
          }
        ].concat(IRB_OBJECT, COMMENT_MODES),
        relevance: 0
      }
    ].concat(IRB_OBJECT, COMMENT_MODES);
    SUBST.contains = RUBY_DEFAULT_CONTAINS;
    PARAMS.contains = RUBY_DEFAULT_CONTAINS;
    const SIMPLE_PROMPT = "[>?]>";
    const DEFAULT_PROMPT = "[\\w#]+\\(\\w+\\):\\d+:\\d+[>*]";
    const RVM_PROMPT = "(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>";
    const IRB_DEFAULT = [
      {
        begin: /^\s*=>/,
        starts: {
          end: "$",
          contains: RUBY_DEFAULT_CONTAINS
        }
      },
      {
        className: "meta.prompt",
        begin: "^(" + SIMPLE_PROMPT + "|" + DEFAULT_PROMPT + "|" + RVM_PROMPT + ")(?=[ ])",
        starts: {
          end: "$",
          keywords: RUBY_KEYWORDS,
          contains: RUBY_DEFAULT_CONTAINS
        }
      }
    ];
    COMMENT_MODES.unshift(IRB_OBJECT);
    return {
      name: "Ruby",
      aliases: [
        "rb",
        "gemspec",
        "podspec",
        "thor",
        "irb"
      ],
      keywords: RUBY_KEYWORDS,
      illegal: /\/\*/,
      contains: [hljs.SHEBANG({ binary: "ruby" })].concat(IRB_DEFAULT).concat(COMMENT_MODES).concat(RUBY_DEFAULT_CONTAINS)
    };
  }
  function rust(hljs) {
    const regex = hljs.regex;
    const RAW_IDENTIFIER = /(r#)?/;
    const UNDERSCORE_IDENT_RE2 = regex.concat(RAW_IDENTIFIER, hljs.UNDERSCORE_IDENT_RE);
    const IDENT_RE2 = regex.concat(RAW_IDENTIFIER, hljs.IDENT_RE);
    const FUNCTION_INVOKE = {
      className: "title.function.invoke",
      relevance: 0,
      begin: regex.concat(
        /\b/,
        /(?!let|for|while|if|else|match\b)/,
        IDENT_RE2,
        regex.lookahead(/\s*\(/)
      )
    };
    const NUMBER_SUFFIX = "([ui](8|16|32|64|128|size)|f(32|64))?";
    const KEYWORDS2 = [
      "abstract",
      "as",
      "async",
      "await",
      "become",
      "box",
      "break",
      "const",
      "continue",
      "crate",
      "do",
      "dyn",
      "else",
      "enum",
      "extern",
      "false",
      "final",
      "fn",
      "for",
      "if",
      "impl",
      "in",
      "let",
      "loop",
      "macro",
      "match",
      "mod",
      "move",
      "mut",
      "override",
      "priv",
      "pub",
      "ref",
      "return",
      "self",
      "Self",
      "static",
      "struct",
      "super",
      "trait",
      "true",
      "try",
      "type",
      "typeof",
      "union",
      "unsafe",
      "unsized",
      "use",
      "virtual",
      "where",
      "while",
      "yield"
    ];
    const LITERALS2 = [
      "true",
      "false",
      "Some",
      "None",
      "Ok",
      "Err"
    ];
    const BUILTINS = [
      // functions
      "drop ",
      // traits
      "Copy",
      "Send",
      "Sized",
      "Sync",
      "Drop",
      "Fn",
      "FnMut",
      "FnOnce",
      "ToOwned",
      "Clone",
      "Debug",
      "PartialEq",
      "PartialOrd",
      "Eq",
      "Ord",
      "AsRef",
      "AsMut",
      "Into",
      "From",
      "Default",
      "Iterator",
      "Extend",
      "IntoIterator",
      "DoubleEndedIterator",
      "ExactSizeIterator",
      "SliceConcatExt",
      "ToString",
      // macros
      "assert!",
      "assert_eq!",
      "bitflags!",
      "bytes!",
      "cfg!",
      "col!",
      "concat!",
      "concat_idents!",
      "debug_assert!",
      "debug_assert_eq!",
      "env!",
      "eprintln!",
      "panic!",
      "file!",
      "format!",
      "format_args!",
      "include_bytes!",
      "include_str!",
      "line!",
      "local_data_key!",
      "module_path!",
      "option_env!",
      "print!",
      "println!",
      "select!",
      "stringify!",
      "try!",
      "unimplemented!",
      "unreachable!",
      "vec!",
      "write!",
      "writeln!",
      "macro_rules!",
      "assert_ne!",
      "debug_assert_ne!"
    ];
    const TYPES2 = [
      "i8",
      "i16",
      "i32",
      "i64",
      "i128",
      "isize",
      "u8",
      "u16",
      "u32",
      "u64",
      "u128",
      "usize",
      "f32",
      "f64",
      "str",
      "char",
      "bool",
      "Box",
      "Option",
      "Result",
      "String",
      "Vec"
    ];
    return {
      name: "Rust",
      aliases: ["rs"],
      keywords: {
        $pattern: hljs.IDENT_RE + "!?",
        type: TYPES2,
        keyword: KEYWORDS2,
        literal: LITERALS2,
        built_in: BUILTINS
      },
      illegal: "</",
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.COMMENT("/\\*", "\\*/", { contains: ["self"] }),
        hljs.inherit(hljs.QUOTE_STRING_MODE, {
          begin: /b?"/,
          illegal: null
        }),
        {
          className: "symbol",
          // negative lookahead to avoid matching `'`
          begin: /'[a-zA-Z_][a-zA-Z0-9_]*(?!')/
        },
        {
          scope: "string",
          variants: [
            { begin: /b?r(#*)"(.|\n)*?"\1(?!#)/ },
            {
              begin: /b?'/,
              end: /'/,
              contains: [
                {
                  scope: "char.escape",
                  match: /\\('|\w|x\w{2}|u\w{4}|U\w{8})/
                }
              ]
            }
          ]
        },
        {
          className: "number",
          variants: [
            { begin: "\\b0b([01_]+)" + NUMBER_SUFFIX },
            { begin: "\\b0o([0-7_]+)" + NUMBER_SUFFIX },
            { begin: "\\b0x([A-Fa-f0-9_]+)" + NUMBER_SUFFIX },
            { begin: "\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)" + NUMBER_SUFFIX }
          ],
          relevance: 0
        },
        {
          begin: [
            /fn/,
            /\s+/,
            UNDERSCORE_IDENT_RE2
          ],
          className: {
            1: "keyword",
            3: "title.function"
          }
        },
        {
          className: "meta",
          begin: "#!?\\[",
          end: "\\]",
          contains: [
            {
              className: "string",
              begin: /"/,
              end: /"/,
              contains: [
                hljs.BACKSLASH_ESCAPE
              ]
            }
          ]
        },
        {
          begin: [
            /let/,
            /\s+/,
            /(?:mut\s+)?/,
            UNDERSCORE_IDENT_RE2
          ],
          className: {
            1: "keyword",
            3: "keyword",
            4: "variable"
          }
        },
        // must come before impl/for rule later
        {
          begin: [
            /for/,
            /\s+/,
            UNDERSCORE_IDENT_RE2,
            /\s+/,
            /in/
          ],
          className: {
            1: "keyword",
            3: "variable",
            5: "keyword"
          }
        },
        {
          begin: [
            /type/,
            /\s+/,
            UNDERSCORE_IDENT_RE2
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          begin: [
            /(?:trait|enum|struct|union|impl|for)/,
            /\s+/,
            UNDERSCORE_IDENT_RE2
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        },
        {
          begin: hljs.IDENT_RE + "::",
          keywords: {
            keyword: "Self",
            built_in: BUILTINS,
            type: TYPES2
          }
        },
        {
          className: "punctuation",
          begin: "->"
        },
        FUNCTION_INVOKE
      ]
    };
  }
  const MODES$1 = (hljs) => {
    return {
      IMPORTANT: {
        scope: "meta",
        begin: "!important"
      },
      BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
      HEXCOLOR: {
        scope: "number",
        begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
      },
      FUNCTION_DISPATCH: {
        className: "built_in",
        begin: /[\w-]+(?=\()/
      },
      ATTRIBUTE_SELECTOR_MODE: {
        scope: "selector-attr",
        begin: /\[/,
        end: /\]/,
        illegal: "$",
        contains: [
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE
        ]
      },
      CSS_NUMBER_MODE: {
        scope: "number",
        begin: hljs.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
        relevance: 0
      },
      CSS_VARIABLE: {
        className: "attr",
        begin: /--[A-Za-z_][A-Za-z0-9_-]*/
      }
    };
  };
  const HTML_TAGS = [
    "a",
    "abbr",
    "address",
    "article",
    "aside",
    "audio",
    "b",
    "blockquote",
    "body",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "dd",
    "del",
    "details",
    "dfn",
    "div",
    "dl",
    "dt",
    "em",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "main",
    "mark",
    "menu",
    "nav",
    "object",
    "ol",
    "optgroup",
    "option",
    "p",
    "picture",
    "q",
    "quote",
    "samp",
    "section",
    "select",
    "source",
    "span",
    "strong",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "tr",
    "ul",
    "var",
    "video"
  ];
  const SVG_TAGS = [
    "defs",
    "g",
    "marker",
    "mask",
    "pattern",
    "svg",
    "switch",
    "symbol",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feFlood",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMorphology",
    "feOffset",
    "feSpecularLighting",
    "feTile",
    "feTurbulence",
    "linearGradient",
    "radialGradient",
    "stop",
    "circle",
    "ellipse",
    "image",
    "line",
    "path",
    "polygon",
    "polyline",
    "rect",
    "text",
    "use",
    "textPath",
    "tspan",
    "foreignObject",
    "clipPath"
  ];
  const TAGS = [
    ...HTML_TAGS,
    ...SVG_TAGS
  ];
  const MEDIA_FEATURES = [
    "any-hover",
    "any-pointer",
    "aspect-ratio",
    "color",
    "color-gamut",
    "color-index",
    "device-aspect-ratio",
    "device-height",
    "device-width",
    "display-mode",
    "forced-colors",
    "grid",
    "height",
    "hover",
    "inverted-colors",
    "monochrome",
    "orientation",
    "overflow-block",
    "overflow-inline",
    "pointer",
    "prefers-color-scheme",
    "prefers-contrast",
    "prefers-reduced-motion",
    "prefers-reduced-transparency",
    "resolution",
    "scan",
    "scripting",
    "update",
    "width",
    // TODO: find a better solution?
    "min-width",
    "max-width",
    "min-height",
    "max-height"
  ].sort().reverse();
  const PSEUDO_CLASSES = [
    "active",
    "any-link",
    "blank",
    "checked",
    "current",
    "default",
    "defined",
    "dir",
    // dir()
    "disabled",
    "drop",
    "empty",
    "enabled",
    "first",
    "first-child",
    "first-of-type",
    "fullscreen",
    "future",
    "focus",
    "focus-visible",
    "focus-within",
    "has",
    // has()
    "host",
    // host or host()
    "host-context",
    // host-context()
    "hover",
    "indeterminate",
    "in-range",
    "invalid",
    "is",
    // is()
    "lang",
    // lang()
    "last-child",
    "last-of-type",
    "left",
    "link",
    "local-link",
    "not",
    // not()
    "nth-child",
    // nth-child()
    "nth-col",
    // nth-col()
    "nth-last-child",
    // nth-last-child()
    "nth-last-col",
    // nth-last-col()
    "nth-last-of-type",
    //nth-last-of-type()
    "nth-of-type",
    //nth-of-type()
    "only-child",
    "only-of-type",
    "optional",
    "out-of-range",
    "past",
    "placeholder-shown",
    "read-only",
    "read-write",
    "required",
    "right",
    "root",
    "scope",
    "target",
    "target-within",
    "user-invalid",
    "valid",
    "visited",
    "where"
    // where()
  ].sort().reverse();
  const PSEUDO_ELEMENTS = [
    "after",
    "backdrop",
    "before",
    "cue",
    "cue-region",
    "first-letter",
    "first-line",
    "grammar-error",
    "marker",
    "part",
    "placeholder",
    "selection",
    "slotted",
    "spelling-error"
  ].sort().reverse();
  const ATTRIBUTES = [
    "accent-color",
    "align-content",
    "align-items",
    "align-self",
    "alignment-baseline",
    "all",
    "anchor-name",
    "animation",
    "animation-composition",
    "animation-delay",
    "animation-direction",
    "animation-duration",
    "animation-fill-mode",
    "animation-iteration-count",
    "animation-name",
    "animation-play-state",
    "animation-range",
    "animation-range-end",
    "animation-range-start",
    "animation-timeline",
    "animation-timing-function",
    "appearance",
    "aspect-ratio",
    "backdrop-filter",
    "backface-visibility",
    "background",
    "background-attachment",
    "background-blend-mode",
    "background-clip",
    "background-color",
    "background-image",
    "background-origin",
    "background-position",
    "background-position-x",
    "background-position-y",
    "background-repeat",
    "background-size",
    "baseline-shift",
    "block-size",
    "border",
    "border-block",
    "border-block-color",
    "border-block-end",
    "border-block-end-color",
    "border-block-end-style",
    "border-block-end-width",
    "border-block-start",
    "border-block-start-color",
    "border-block-start-style",
    "border-block-start-width",
    "border-block-style",
    "border-block-width",
    "border-bottom",
    "border-bottom-color",
    "border-bottom-left-radius",
    "border-bottom-right-radius",
    "border-bottom-style",
    "border-bottom-width",
    "border-collapse",
    "border-color",
    "border-end-end-radius",
    "border-end-start-radius",
    "border-image",
    "border-image-outset",
    "border-image-repeat",
    "border-image-slice",
    "border-image-source",
    "border-image-width",
    "border-inline",
    "border-inline-color",
    "border-inline-end",
    "border-inline-end-color",
    "border-inline-end-style",
    "border-inline-end-width",
    "border-inline-start",
    "border-inline-start-color",
    "border-inline-start-style",
    "border-inline-start-width",
    "border-inline-style",
    "border-inline-width",
    "border-left",
    "border-left-color",
    "border-left-style",
    "border-left-width",
    "border-radius",
    "border-right",
    "border-right-color",
    "border-right-style",
    "border-right-width",
    "border-spacing",
    "border-start-end-radius",
    "border-start-start-radius",
    "border-style",
    "border-top",
    "border-top-color",
    "border-top-left-radius",
    "border-top-right-radius",
    "border-top-style",
    "border-top-width",
    "border-width",
    "bottom",
    "box-align",
    "box-decoration-break",
    "box-direction",
    "box-flex",
    "box-flex-group",
    "box-lines",
    "box-ordinal-group",
    "box-orient",
    "box-pack",
    "box-shadow",
    "box-sizing",
    "break-after",
    "break-before",
    "break-inside",
    "caption-side",
    "caret-color",
    "clear",
    "clip",
    "clip-path",
    "clip-rule",
    "color",
    "color-interpolation",
    "color-interpolation-filters",
    "color-profile",
    "color-rendering",
    "color-scheme",
    "column-count",
    "column-fill",
    "column-gap",
    "column-rule",
    "column-rule-color",
    "column-rule-style",
    "column-rule-width",
    "column-span",
    "column-width",
    "columns",
    "contain",
    "contain-intrinsic-block-size",
    "contain-intrinsic-height",
    "contain-intrinsic-inline-size",
    "contain-intrinsic-size",
    "contain-intrinsic-width",
    "container",
    "container-name",
    "container-type",
    "content",
    "content-visibility",
    "counter-increment",
    "counter-reset",
    "counter-set",
    "cue",
    "cue-after",
    "cue-before",
    "cursor",
    "cx",
    "cy",
    "direction",
    "display",
    "dominant-baseline",
    "empty-cells",
    "enable-background",
    "field-sizing",
    "fill",
    "fill-opacity",
    "fill-rule",
    "filter",
    "flex",
    "flex-basis",
    "flex-direction",
    "flex-flow",
    "flex-grow",
    "flex-shrink",
    "flex-wrap",
    "float",
    "flood-color",
    "flood-opacity",
    "flow",
    "font",
    "font-display",
    "font-family",
    "font-feature-settings",
    "font-kerning",
    "font-language-override",
    "font-optical-sizing",
    "font-palette",
    "font-size",
    "font-size-adjust",
    "font-smooth",
    "font-smoothing",
    "font-stretch",
    "font-style",
    "font-synthesis",
    "font-synthesis-position",
    "font-synthesis-small-caps",
    "font-synthesis-style",
    "font-synthesis-weight",
    "font-variant",
    "font-variant-alternates",
    "font-variant-caps",
    "font-variant-east-asian",
    "font-variant-emoji",
    "font-variant-ligatures",
    "font-variant-numeric",
    "font-variant-position",
    "font-variation-settings",
    "font-weight",
    "forced-color-adjust",
    "gap",
    "glyph-orientation-horizontal",
    "glyph-orientation-vertical",
    "grid",
    "grid-area",
    "grid-auto-columns",
    "grid-auto-flow",
    "grid-auto-rows",
    "grid-column",
    "grid-column-end",
    "grid-column-start",
    "grid-gap",
    "grid-row",
    "grid-row-end",
    "grid-row-start",
    "grid-template",
    "grid-template-areas",
    "grid-template-columns",
    "grid-template-rows",
    "hanging-punctuation",
    "height",
    "hyphenate-character",
    "hyphenate-limit-chars",
    "hyphens",
    "icon",
    "image-orientation",
    "image-rendering",
    "image-resolution",
    "ime-mode",
    "initial-letter",
    "initial-letter-align",
    "inline-size",
    "inset",
    "inset-area",
    "inset-block",
    "inset-block-end",
    "inset-block-start",
    "inset-inline",
    "inset-inline-end",
    "inset-inline-start",
    "isolation",
    "justify-content",
    "justify-items",
    "justify-self",
    "kerning",
    "left",
    "letter-spacing",
    "lighting-color",
    "line-break",
    "line-height",
    "line-height-step",
    "list-style",
    "list-style-image",
    "list-style-position",
    "list-style-type",
    "margin",
    "margin-block",
    "margin-block-end",
    "margin-block-start",
    "margin-bottom",
    "margin-inline",
    "margin-inline-end",
    "margin-inline-start",
    "margin-left",
    "margin-right",
    "margin-top",
    "margin-trim",
    "marker",
    "marker-end",
    "marker-mid",
    "marker-start",
    "marks",
    "mask",
    "mask-border",
    "mask-border-mode",
    "mask-border-outset",
    "mask-border-repeat",
    "mask-border-slice",
    "mask-border-source",
    "mask-border-width",
    "mask-clip",
    "mask-composite",
    "mask-image",
    "mask-mode",
    "mask-origin",
    "mask-position",
    "mask-repeat",
    "mask-size",
    "mask-type",
    "masonry-auto-flow",
    "math-depth",
    "math-shift",
    "math-style",
    "max-block-size",
    "max-height",
    "max-inline-size",
    "max-width",
    "min-block-size",
    "min-height",
    "min-inline-size",
    "min-width",
    "mix-blend-mode",
    "nav-down",
    "nav-index",
    "nav-left",
    "nav-right",
    "nav-up",
    "none",
    "normal",
    "object-fit",
    "object-position",
    "offset",
    "offset-anchor",
    "offset-distance",
    "offset-path",
    "offset-position",
    "offset-rotate",
    "opacity",
    "order",
    "orphans",
    "outline",
    "outline-color",
    "outline-offset",
    "outline-style",
    "outline-width",
    "overflow",
    "overflow-anchor",
    "overflow-block",
    "overflow-clip-margin",
    "overflow-inline",
    "overflow-wrap",
    "overflow-x",
    "overflow-y",
    "overlay",
    "overscroll-behavior",
    "overscroll-behavior-block",
    "overscroll-behavior-inline",
    "overscroll-behavior-x",
    "overscroll-behavior-y",
    "padding",
    "padding-block",
    "padding-block-end",
    "padding-block-start",
    "padding-bottom",
    "padding-inline",
    "padding-inline-end",
    "padding-inline-start",
    "padding-left",
    "padding-right",
    "padding-top",
    "page",
    "page-break-after",
    "page-break-before",
    "page-break-inside",
    "paint-order",
    "pause",
    "pause-after",
    "pause-before",
    "perspective",
    "perspective-origin",
    "place-content",
    "place-items",
    "place-self",
    "pointer-events",
    "position",
    "position-anchor",
    "position-visibility",
    "print-color-adjust",
    "quotes",
    "r",
    "resize",
    "rest",
    "rest-after",
    "rest-before",
    "right",
    "rotate",
    "row-gap",
    "ruby-align",
    "ruby-position",
    "scale",
    "scroll-behavior",
    "scroll-margin",
    "scroll-margin-block",
    "scroll-margin-block-end",
    "scroll-margin-block-start",
    "scroll-margin-bottom",
    "scroll-margin-inline",
    "scroll-margin-inline-end",
    "scroll-margin-inline-start",
    "scroll-margin-left",
    "scroll-margin-right",
    "scroll-margin-top",
    "scroll-padding",
    "scroll-padding-block",
    "scroll-padding-block-end",
    "scroll-padding-block-start",
    "scroll-padding-bottom",
    "scroll-padding-inline",
    "scroll-padding-inline-end",
    "scroll-padding-inline-start",
    "scroll-padding-left",
    "scroll-padding-right",
    "scroll-padding-top",
    "scroll-snap-align",
    "scroll-snap-stop",
    "scroll-snap-type",
    "scroll-timeline",
    "scroll-timeline-axis",
    "scroll-timeline-name",
    "scrollbar-color",
    "scrollbar-gutter",
    "scrollbar-width",
    "shape-image-threshold",
    "shape-margin",
    "shape-outside",
    "shape-rendering",
    "speak",
    "speak-as",
    "src",
    // @font-face
    "stop-color",
    "stop-opacity",
    "stroke",
    "stroke-dasharray",
    "stroke-dashoffset",
    "stroke-linecap",
    "stroke-linejoin",
    "stroke-miterlimit",
    "stroke-opacity",
    "stroke-width",
    "tab-size",
    "table-layout",
    "text-align",
    "text-align-all",
    "text-align-last",
    "text-anchor",
    "text-combine-upright",
    "text-decoration",
    "text-decoration-color",
    "text-decoration-line",
    "text-decoration-skip",
    "text-decoration-skip-ink",
    "text-decoration-style",
    "text-decoration-thickness",
    "text-emphasis",
    "text-emphasis-color",
    "text-emphasis-position",
    "text-emphasis-style",
    "text-indent",
    "text-justify",
    "text-orientation",
    "text-overflow",
    "text-rendering",
    "text-shadow",
    "text-size-adjust",
    "text-transform",
    "text-underline-offset",
    "text-underline-position",
    "text-wrap",
    "text-wrap-mode",
    "text-wrap-style",
    "timeline-scope",
    "top",
    "touch-action",
    "transform",
    "transform-box",
    "transform-origin",
    "transform-style",
    "transition",
    "transition-behavior",
    "transition-delay",
    "transition-duration",
    "transition-property",
    "transition-timing-function",
    "translate",
    "unicode-bidi",
    "user-modify",
    "user-select",
    "vector-effect",
    "vertical-align",
    "view-timeline",
    "view-timeline-axis",
    "view-timeline-inset",
    "view-timeline-name",
    "view-transition-name",
    "visibility",
    "voice-balance",
    "voice-duration",
    "voice-family",
    "voice-pitch",
    "voice-range",
    "voice-rate",
    "voice-stress",
    "voice-volume",
    "white-space",
    "white-space-collapse",
    "widows",
    "width",
    "will-change",
    "word-break",
    "word-spacing",
    "word-wrap",
    "writing-mode",
    "x",
    "y",
    "z-index",
    "zoom"
  ].sort().reverse();
  function scss(hljs) {
    const modes = MODES$1(hljs);
    const PSEUDO_ELEMENTS$12 = PSEUDO_ELEMENTS;
    const PSEUDO_CLASSES$12 = PSEUDO_CLASSES;
    const AT_IDENTIFIER = "@[a-z-]+";
    const AT_MODIFIERS = "and or not only";
    const IDENT_RE2 = "[a-zA-Z-][a-zA-Z0-9_-]*";
    const VARIABLE = {
      className: "variable",
      begin: "(\\$" + IDENT_RE2 + ")\\b",
      relevance: 0
    };
    return {
      name: "SCSS",
      case_insensitive: true,
      illegal: "[=/|']",
      contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        // to recognize keyframe 40% etc which are outside the scope of our
        // attribute value mode
        modes.CSS_NUMBER_MODE,
        {
          className: "selector-id",
          begin: "#[A-Za-z0-9_-]+",
          relevance: 0
        },
        {
          className: "selector-class",
          begin: "\\.[A-Za-z0-9_-]+",
          relevance: 0
        },
        modes.ATTRIBUTE_SELECTOR_MODE,
        {
          className: "selector-tag",
          begin: "\\b(" + TAGS.join("|") + ")\\b",
          // was there, before, but why?
          relevance: 0
        },
        {
          className: "selector-pseudo",
          begin: ":(" + PSEUDO_CLASSES$12.join("|") + ")"
        },
        {
          className: "selector-pseudo",
          begin: ":(:)?(" + PSEUDO_ELEMENTS$12.join("|") + ")"
        },
        VARIABLE,
        {
          // pseudo-selector params
          begin: /\(/,
          end: /\)/,
          contains: [modes.CSS_NUMBER_MODE]
        },
        modes.CSS_VARIABLE,
        {
          className: "attribute",
          begin: "\\b(" + ATTRIBUTES.join("|") + ")\\b"
        },
        { begin: "\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b" },
        {
          begin: /:/,
          end: /[;}{]/,
          relevance: 0,
          contains: [
            modes.BLOCK_COMMENT,
            VARIABLE,
            modes.HEXCOLOR,
            modes.CSS_NUMBER_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.APOS_STRING_MODE,
            modes.IMPORTANT,
            modes.FUNCTION_DISPATCH
          ]
        },
        // matching these here allows us to treat them more like regular CSS
        // rules so everything between the {} gets regular rule highlighting,
        // which is what we want for page and font-face
        {
          begin: "@(page|font-face)",
          keywords: {
            $pattern: AT_IDENTIFIER,
            keyword: "@page @font-face"
          }
        },
        {
          begin: "@",
          end: "[{;]",
          returnBegin: true,
          keywords: {
            $pattern: /[a-z-]+/,
            keyword: AT_MODIFIERS,
            attribute: MEDIA_FEATURES.join(" ")
          },
          contains: [
            {
              begin: AT_IDENTIFIER,
              className: "keyword"
            },
            {
              begin: /[a-z-]+(?=:)/,
              className: "attribute"
            },
            VARIABLE,
            hljs.QUOTE_STRING_MODE,
            hljs.APOS_STRING_MODE,
            modes.HEXCOLOR,
            modes.CSS_NUMBER_MODE
          ]
        },
        modes.FUNCTION_DISPATCH
      ]
    };
  }
  function shell(hljs) {
    return {
      name: "Shell Session",
      aliases: [
        "console",
        "shellsession"
      ],
      contains: [
        {
          className: "meta.prompt",
          // We cannot add \s (spaces) in the regular expression otherwise it will be too broad and produce unexpected result.
          // For instance, in the following example, it would match "echo /path/to/home >" as a prompt:
          // echo /path/to/home > t.exe
          begin: /^\s{0,3}[/~\w\d[\]()@-]*[>%$#][ ]?/,
          starts: {
            end: /[^\\](?=\s*$)/,
            subLanguage: "bash"
          }
        }
      ]
    };
  }
  function sql(hljs) {
    const regex = hljs.regex;
    const COMMENT_MODE = hljs.COMMENT("--", "$");
    const STRING = {
      scope: "string",
      variants: [
        {
          begin: /'/,
          end: /'/,
          contains: [{ match: /''/ }]
        }
      ]
    };
    const QUOTED_IDENTIFIER = {
      begin: /"/,
      end: /"/,
      contains: [{ match: /""/ }]
    };
    const LITERALS2 = [
      "true",
      "false",
      // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.
      // "null",
      "unknown"
    ];
    const MULTI_WORD_TYPES = [
      "double precision",
      "large object",
      "with timezone",
      "without timezone"
    ];
    const TYPES2 = [
      "bigint",
      "binary",
      "blob",
      "boolean",
      "char",
      "character",
      "clob",
      "date",
      "dec",
      "decfloat",
      "decimal",
      "float",
      "int",
      "integer",
      "interval",
      "nchar",
      "nclob",
      "national",
      "numeric",
      "real",
      "row",
      "smallint",
      "time",
      "timestamp",
      "varchar",
      "varying",
      // modifier (character varying)
      "varbinary"
    ];
    const NON_RESERVED_WORDS = [
      "add",
      "asc",
      "collation",
      "desc",
      "final",
      "first",
      "last",
      "view"
    ];
    const RESERVED_WORDS = [
      "abs",
      "acos",
      "all",
      "allocate",
      "alter",
      "and",
      "any",
      "are",
      "array",
      "array_agg",
      "array_max_cardinality",
      "as",
      "asensitive",
      "asin",
      "asymmetric",
      "at",
      "atan",
      "atomic",
      "authorization",
      "avg",
      "begin",
      "begin_frame",
      "begin_partition",
      "between",
      "bigint",
      "binary",
      "blob",
      "boolean",
      "both",
      "by",
      "call",
      "called",
      "cardinality",
      "cascaded",
      "case",
      "cast",
      "ceil",
      "ceiling",
      "char",
      "char_length",
      "character",
      "character_length",
      "check",
      "classifier",
      "clob",
      "close",
      "coalesce",
      "collate",
      "collect",
      "column",
      "commit",
      "condition",
      "connect",
      "constraint",
      "contains",
      "convert",
      "copy",
      "corr",
      "corresponding",
      "cos",
      "cosh",
      "count",
      "covar_pop",
      "covar_samp",
      "create",
      "cross",
      "cube",
      "cume_dist",
      "current",
      "current_catalog",
      "current_date",
      "current_default_transform_group",
      "current_path",
      "current_role",
      "current_row",
      "current_schema",
      "current_time",
      "current_timestamp",
      "current_path",
      "current_role",
      "current_transform_group_for_type",
      "current_user",
      "cursor",
      "cycle",
      "date",
      "day",
      "deallocate",
      "dec",
      "decimal",
      "decfloat",
      "declare",
      "default",
      "define",
      "delete",
      "dense_rank",
      "deref",
      "describe",
      "deterministic",
      "disconnect",
      "distinct",
      "double",
      "drop",
      "dynamic",
      "each",
      "element",
      "else",
      "empty",
      "end",
      "end_frame",
      "end_partition",
      "end-exec",
      "equals",
      "escape",
      "every",
      "except",
      "exec",
      "execute",
      "exists",
      "exp",
      "external",
      "extract",
      "false",
      "fetch",
      "filter",
      "first_value",
      "float",
      "floor",
      "for",
      "foreign",
      "frame_row",
      "free",
      "from",
      "full",
      "function",
      "fusion",
      "get",
      "global",
      "grant",
      "group",
      "grouping",
      "groups",
      "having",
      "hold",
      "hour",
      "identity",
      "in",
      "indicator",
      "initial",
      "inner",
      "inout",
      "insensitive",
      "insert",
      "int",
      "integer",
      "intersect",
      "intersection",
      "interval",
      "into",
      "is",
      "join",
      "json_array",
      "json_arrayagg",
      "json_exists",
      "json_object",
      "json_objectagg",
      "json_query",
      "json_table",
      "json_table_primitive",
      "json_value",
      "lag",
      "language",
      "large",
      "last_value",
      "lateral",
      "lead",
      "leading",
      "left",
      "like",
      "like_regex",
      "listagg",
      "ln",
      "local",
      "localtime",
      "localtimestamp",
      "log",
      "log10",
      "lower",
      "match",
      "match_number",
      "match_recognize",
      "matches",
      "max",
      "member",
      "merge",
      "method",
      "min",
      "minute",
      "mod",
      "modifies",
      "module",
      "month",
      "multiset",
      "national",
      "natural",
      "nchar",
      "nclob",
      "new",
      "no",
      "none",
      "normalize",
      "not",
      "nth_value",
      "ntile",
      "null",
      "nullif",
      "numeric",
      "octet_length",
      "occurrences_regex",
      "of",
      "offset",
      "old",
      "omit",
      "on",
      "one",
      "only",
      "open",
      "or",
      "order",
      "out",
      "outer",
      "over",
      "overlaps",
      "overlay",
      "parameter",
      "partition",
      "pattern",
      "per",
      "percent",
      "percent_rank",
      "percentile_cont",
      "percentile_disc",
      "period",
      "portion",
      "position",
      "position_regex",
      "power",
      "precedes",
      "precision",
      "prepare",
      "primary",
      "procedure",
      "ptf",
      "range",
      "rank",
      "reads",
      "real",
      "recursive",
      "ref",
      "references",
      "referencing",
      "regr_avgx",
      "regr_avgy",
      "regr_count",
      "regr_intercept",
      "regr_r2",
      "regr_slope",
      "regr_sxx",
      "regr_sxy",
      "regr_syy",
      "release",
      "result",
      "return",
      "returns",
      "revoke",
      "right",
      "rollback",
      "rollup",
      "row",
      "row_number",
      "rows",
      "running",
      "savepoint",
      "scope",
      "scroll",
      "search",
      "second",
      "seek",
      "select",
      "sensitive",
      "session_user",
      "set",
      "show",
      "similar",
      "sin",
      "sinh",
      "skip",
      "smallint",
      "some",
      "specific",
      "specifictype",
      "sql",
      "sqlexception",
      "sqlstate",
      "sqlwarning",
      "sqrt",
      "start",
      "static",
      "stddev_pop",
      "stddev_samp",
      "submultiset",
      "subset",
      "substring",
      "substring_regex",
      "succeeds",
      "sum",
      "symmetric",
      "system",
      "system_time",
      "system_user",
      "table",
      "tablesample",
      "tan",
      "tanh",
      "then",
      "time",
      "timestamp",
      "timezone_hour",
      "timezone_minute",
      "to",
      "trailing",
      "translate",
      "translate_regex",
      "translation",
      "treat",
      "trigger",
      "trim",
      "trim_array",
      "true",
      "truncate",
      "uescape",
      "union",
      "unique",
      "unknown",
      "unnest",
      "update",
      "upper",
      "user",
      "using",
      "value",
      "values",
      "value_of",
      "var_pop",
      "var_samp",
      "varbinary",
      "varchar",
      "varying",
      "versioning",
      "when",
      "whenever",
      "where",
      "width_bucket",
      "window",
      "with",
      "within",
      "without",
      "year"
    ];
    const RESERVED_FUNCTIONS = [
      "abs",
      "acos",
      "array_agg",
      "asin",
      "atan",
      "avg",
      "cast",
      "ceil",
      "ceiling",
      "coalesce",
      "corr",
      "cos",
      "cosh",
      "count",
      "covar_pop",
      "covar_samp",
      "cume_dist",
      "dense_rank",
      "deref",
      "element",
      "exp",
      "extract",
      "first_value",
      "floor",
      "json_array",
      "json_arrayagg",
      "json_exists",
      "json_object",
      "json_objectagg",
      "json_query",
      "json_table",
      "json_table_primitive",
      "json_value",
      "lag",
      "last_value",
      "lead",
      "listagg",
      "ln",
      "log",
      "log10",
      "lower",
      "max",
      "min",
      "mod",
      "nth_value",
      "ntile",
      "nullif",
      "percent_rank",
      "percentile_cont",
      "percentile_disc",
      "position",
      "position_regex",
      "power",
      "rank",
      "regr_avgx",
      "regr_avgy",
      "regr_count",
      "regr_intercept",
      "regr_r2",
      "regr_slope",
      "regr_sxx",
      "regr_sxy",
      "regr_syy",
      "row_number",
      "sin",
      "sinh",
      "sqrt",
      "stddev_pop",
      "stddev_samp",
      "substring",
      "substring_regex",
      "sum",
      "tan",
      "tanh",
      "translate",
      "translate_regex",
      "treat",
      "trim",
      "trim_array",
      "unnest",
      "upper",
      "value_of",
      "var_pop",
      "var_samp",
      "width_bucket"
    ];
    const POSSIBLE_WITHOUT_PARENS = [
      "current_catalog",
      "current_date",
      "current_default_transform_group",
      "current_path",
      "current_role",
      "current_schema",
      "current_transform_group_for_type",
      "current_user",
      "session_user",
      "system_time",
      "system_user",
      "current_time",
      "localtime",
      "current_timestamp",
      "localtimestamp"
    ];
    const COMBOS = [
      "create table",
      "insert into",
      "primary key",
      "foreign key",
      "not null",
      "alter table",
      "add constraint",
      "grouping sets",
      "on overflow",
      "character set",
      "respect nulls",
      "ignore nulls",
      "nulls first",
      "nulls last",
      "depth first",
      "breadth first"
    ];
    const FUNCTIONS = RESERVED_FUNCTIONS;
    const KEYWORDS2 = [
      ...RESERVED_WORDS,
      ...NON_RESERVED_WORDS
    ].filter((keyword) => {
      return !RESERVED_FUNCTIONS.includes(keyword);
    });
    const VARIABLE = {
      scope: "variable",
      match: /@[a-z0-9][a-z0-9_]*/
    };
    const OPERATOR = {
      scope: "operator",
      match: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
      relevance: 0
    };
    const FUNCTION_CALL = {
      match: regex.concat(/\b/, regex.either(...FUNCTIONS), /\s*\(/),
      relevance: 0,
      keywords: { built_in: FUNCTIONS }
    };
    function kws_to_regex(list) {
      return regex.concat(
        /\b/,
        regex.either(...list.map((kw) => {
          return kw.replace(/\s+/, "\\s+");
        })),
        /\b/
      );
    }
    const MULTI_WORD_KEYWORDS = {
      scope: "keyword",
      match: kws_to_regex(COMBOS),
      relevance: 0
    };
    function reduceRelevancy(list, {
      exceptions,
      when: when2
    } = {}) {
      const qualifyFn = when2;
      exceptions = exceptions || [];
      return list.map((item) => {
        if (item.match(/\|\d+$/) || exceptions.includes(item)) {
          return item;
        } else if (qualifyFn(item)) {
          return `${item}|0`;
        } else {
          return item;
        }
      });
    }
    return {
      name: "SQL",
      case_insensitive: true,
      // does not include {} or HTML tags `</`
      illegal: /[{}]|<\//,
      keywords: {
        $pattern: /\b[\w\.]+/,
        keyword: reduceRelevancy(KEYWORDS2, { when: (x) => x.length < 3 }),
        literal: LITERALS2,
        type: TYPES2,
        built_in: POSSIBLE_WITHOUT_PARENS
      },
      contains: [
        {
          scope: "type",
          match: kws_to_regex(MULTI_WORD_TYPES)
        },
        MULTI_WORD_KEYWORDS,
        FUNCTION_CALL,
        VARIABLE,
        STRING,
        QUOTED_IDENTIFIER,
        hljs.C_NUMBER_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        COMMENT_MODE,
        OPERATOR
      ]
    };
  }
  function source$1(re) {
    if (!re)
      return null;
    if (typeof re === "string")
      return re;
    return re.source;
  }
  function lookahead$1(re) {
    return concat$1("(?=", re, ")");
  }
  function concat$1(...args) {
    const joined = args.map((x) => source$1(x)).join("");
    return joined;
  }
  function stripOptionsFromArgs$1(args) {
    const opts = args[args.length - 1];
    if (typeof opts === "object" && opts.constructor === Object) {
      args.splice(args.length - 1, 1);
      return opts;
    } else {
      return {};
    }
  }
  function either$1(...args) {
    const opts = stripOptionsFromArgs$1(args);
    const joined = "(" + (opts.capture ? "" : "?:") + args.map((x) => source$1(x)).join("|") + ")";
    return joined;
  }
  const keywordWrapper = (keyword) => concat$1(
    /\b/,
    keyword,
    /\w$/.test(keyword) ? /\b/ : /\B/
  );
  const dotKeywords = [
    "Protocol",
    // contextual
    "Type"
    // contextual
  ].map(keywordWrapper);
  const optionalDotKeywords = [
    "init",
    "self"
  ].map(keywordWrapper);
  const keywordTypes = [
    "Any",
    "Self"
  ];
  const keywords = [
    // strings below will be fed into the regular `keywords` engine while regex
    // will result in additional modes being created to scan for those keywords to
    // avoid conflicts with other rules
    "actor",
    "any",
    // contextual
    "associatedtype",
    "async",
    "await",
    /as\?/,
    // operator
    /as!/,
    // operator
    "as",
    // operator
    "borrowing",
    // contextual
    "break",
    "case",
    "catch",
    "class",
    "consume",
    // contextual
    "consuming",
    // contextual
    "continue",
    "convenience",
    // contextual
    "copy",
    // contextual
    "default",
    "defer",
    "deinit",
    "didSet",
    // contextual
    "distributed",
    "do",
    "dynamic",
    // contextual
    "each",
    "else",
    "enum",
    "extension",
    "fallthrough",
    /fileprivate\(set\)/,
    "fileprivate",
    "final",
    // contextual
    "for",
    "func",
    "get",
    // contextual
    "guard",
    "if",
    "import",
    "indirect",
    // contextual
    "infix",
    // contextual
    /init\?/,
    /init!/,
    "inout",
    /internal\(set\)/,
    "internal",
    "in",
    "is",
    // operator
    "isolated",
    // contextual
    "nonisolated",
    // contextual
    "lazy",
    // contextual
    "let",
    "macro",
    "mutating",
    // contextual
    "nonmutating",
    // contextual
    /open\(set\)/,
    // contextual
    "open",
    // contextual
    "operator",
    "optional",
    // contextual
    "override",
    // contextual
    "package",
    "postfix",
    // contextual
    "precedencegroup",
    "prefix",
    // contextual
    /private\(set\)/,
    "private",
    "protocol",
    /public\(set\)/,
    "public",
    "repeat",
    "required",
    // contextual
    "rethrows",
    "return",
    "set",
    // contextual
    "some",
    // contextual
    "static",
    "struct",
    "subscript",
    "super",
    "switch",
    "throws",
    "throw",
    /try\?/,
    // operator
    /try!/,
    // operator
    "try",
    // operator
    "typealias",
    /unowned\(safe\)/,
    // contextual
    /unowned\(unsafe\)/,
    // contextual
    "unowned",
    // contextual
    "var",
    "weak",
    // contextual
    "where",
    "while",
    "willSet"
    // contextual
  ];
  const literals = [
    "false",
    "nil",
    "true"
  ];
  const precedencegroupKeywords = [
    "assignment",
    "associativity",
    "higherThan",
    "left",
    "lowerThan",
    "none",
    "right"
  ];
  const numberSignKeywords = [
    "#colorLiteral",
    "#column",
    "#dsohandle",
    "#else",
    "#elseif",
    "#endif",
    "#error",
    "#file",
    "#fileID",
    "#fileLiteral",
    "#filePath",
    "#function",
    "#if",
    "#imageLiteral",
    "#keyPath",
    "#line",
    "#selector",
    "#sourceLocation",
    "#warning"
  ];
  const builtIns = [
    "abs",
    "all",
    "any",
    "assert",
    "assertionFailure",
    "debugPrint",
    "dump",
    "fatalError",
    "getVaList",
    "isKnownUniquelyReferenced",
    "max",
    "min",
    "numericCast",
    "pointwiseMax",
    "pointwiseMin",
    "precondition",
    "preconditionFailure",
    "print",
    "readLine",
    "repeatElement",
    "sequence",
    "stride",
    "swap",
    "swift_unboxFromSwiftValueWithType",
    "transcode",
    "type",
    "unsafeBitCast",
    "unsafeDowncast",
    "withExtendedLifetime",
    "withUnsafeMutablePointer",
    "withUnsafePointer",
    "withVaList",
    "withoutActuallyEscaping",
    "zip"
  ];
  const operatorHead = either$1(
    /[/=\-+!*%<>&|^~?]/,
    /[\u00A1-\u00A7]/,
    /[\u00A9\u00AB]/,
    /[\u00AC\u00AE]/,
    /[\u00B0\u00B1]/,
    /[\u00B6\u00BB\u00BF\u00D7\u00F7]/,
    /[\u2016-\u2017]/,
    /[\u2020-\u2027]/,
    /[\u2030-\u203E]/,
    /[\u2041-\u2053]/,
    /[\u2055-\u205E]/,
    /[\u2190-\u23FF]/,
    /[\u2500-\u2775]/,
    /[\u2794-\u2BFF]/,
    /[\u2E00-\u2E7F]/,
    /[\u3001-\u3003]/,
    /[\u3008-\u3020]/,
    /[\u3030]/
  );
  const operatorCharacter = either$1(
    operatorHead,
    /[\u0300-\u036F]/,
    /[\u1DC0-\u1DFF]/,
    /[\u20D0-\u20FF]/,
    /[\uFE00-\uFE0F]/,
    /[\uFE20-\uFE2F]/
    // TODO: The following characters are also allowed, but the regex isn't supported yet.
    // /[\u{E0100}-\u{E01EF}]/u
  );
  const operator = concat$1(operatorHead, operatorCharacter, "*");
  const identifierHead = either$1(
    /[a-zA-Z_]/,
    /[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,
    /[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,
    /[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,
    /[\u1E00-\u1FFF]/,
    /[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,
    /[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,
    /[\u2C00-\u2DFF\u2E80-\u2FFF]/,
    /[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,
    /[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,
    /[\uFE47-\uFEFE\uFF00-\uFFFD]/
    // Should be /[\uFE47-\uFFFD]/, but we have to exclude FEFF.
    // The following characters are also allowed, but the regexes aren't supported yet.
    // /[\u{10000}-\u{1FFFD}\u{20000-\u{2FFFD}\u{30000}-\u{3FFFD}\u{40000}-\u{4FFFD}]/u,
    // /[\u{50000}-\u{5FFFD}\u{60000-\u{6FFFD}\u{70000}-\u{7FFFD}\u{80000}-\u{8FFFD}]/u,
    // /[\u{90000}-\u{9FFFD}\u{A0000-\u{AFFFD}\u{B0000}-\u{BFFFD}\u{C0000}-\u{CFFFD}]/u,
    // /[\u{D0000}-\u{DFFFD}\u{E0000-\u{EFFFD}]/u
  );
  const identifierCharacter = either$1(
    identifierHead,
    /\d/,
    /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/
  );
  const identifier = concat$1(identifierHead, identifierCharacter, "*");
  const typeIdentifier = concat$1(/[A-Z]/, identifierCharacter, "*");
  const keywordAttributes = [
    "attached",
    "autoclosure",
    concat$1(/convention\(/, either$1("swift", "block", "c"), /\)/),
    "discardableResult",
    "dynamicCallable",
    "dynamicMemberLookup",
    "escaping",
    "freestanding",
    "frozen",
    "GKInspectable",
    "IBAction",
    "IBDesignable",
    "IBInspectable",
    "IBOutlet",
    "IBSegueAction",
    "inlinable",
    "main",
    "nonobjc",
    "NSApplicationMain",
    "NSCopying",
    "NSManaged",
    concat$1(/objc\(/, identifier, /\)/),
    "objc",
    "objcMembers",
    "propertyWrapper",
    "requires_stored_property_inits",
    "resultBuilder",
    "Sendable",
    "testable",
    "UIApplicationMain",
    "unchecked",
    "unknown",
    "usableFromInline",
    "warn_unqualified_access"
  ];
  const availabilityKeywords = [
    "iOS",
    "iOSApplicationExtension",
    "macOS",
    "macOSApplicationExtension",
    "macCatalyst",
    "macCatalystApplicationExtension",
    "watchOS",
    "watchOSApplicationExtension",
    "tvOS",
    "tvOSApplicationExtension",
    "swift"
  ];
  function swift(hljs) {
    const WHITESPACE = {
      match: /\s+/,
      relevance: 0
    };
    const BLOCK_COMMENT = hljs.COMMENT(
      "/\\*",
      "\\*/",
      { contains: ["self"] }
    );
    const COMMENTS = [
      hljs.C_LINE_COMMENT_MODE,
      BLOCK_COMMENT
    ];
    const DOT_KEYWORD = {
      match: [
        /\./,
        either$1(...dotKeywords, ...optionalDotKeywords)
      ],
      className: { 2: "keyword" }
    };
    const KEYWORD_GUARD = {
      // Consume .keyword to prevent highlighting properties and methods as keywords.
      match: concat$1(/\./, either$1(...keywords)),
      relevance: 0
    };
    const PLAIN_KEYWORDS = keywords.filter((kw) => typeof kw === "string").concat(["_|0"]);
    const REGEX_KEYWORDS = keywords.filter((kw) => typeof kw !== "string").concat(keywordTypes).map(keywordWrapper);
    const KEYWORD = { variants: [
      {
        className: "keyword",
        match: either$1(...REGEX_KEYWORDS, ...optionalDotKeywords)
      }
    ] };
    const KEYWORDS2 = {
      $pattern: either$1(
        /\b\w+/,
        // regular keywords
        /#\w+/
        // number keywords
      ),
      keyword: PLAIN_KEYWORDS.concat(numberSignKeywords),
      literal: literals
    };
    const KEYWORD_MODES = [
      DOT_KEYWORD,
      KEYWORD_GUARD,
      KEYWORD
    ];
    const BUILT_IN_GUARD = {
      // Consume .built_in to prevent highlighting properties and methods.
      match: concat$1(/\./, either$1(...builtIns)),
      relevance: 0
    };
    const BUILT_IN = {
      className: "built_in",
      match: concat$1(/\b/, either$1(...builtIns), /(?=\()/)
    };
    const BUILT_INS2 = [
      BUILT_IN_GUARD,
      BUILT_IN
    ];
    const OPERATOR_GUARD = {
      // Prevent -> from being highlighting as an operator.
      match: /->/,
      relevance: 0
    };
    const OPERATOR = {
      className: "operator",
      relevance: 0,
      variants: [
        { match: operator },
        {
          // dot-operator: only operators that start with a dot are allowed to use dots as
          // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more
          // characters that may also include dots.
          match: `\\.(\\.|${operatorCharacter})+`
        }
      ]
    };
    const OPERATORS = [
      OPERATOR_GUARD,
      OPERATOR
    ];
    const decimalDigits2 = "([0-9]_*)+";
    const hexDigits2 = "([0-9a-fA-F]_*)+";
    const NUMBER = {
      className: "number",
      relevance: 0,
      variants: [
        // decimal floating-point-literal (subsumes decimal-literal)
        { match: `\\b(${decimalDigits2})(\\.(${decimalDigits2}))?([eE][+-]?(${decimalDigits2}))?\\b` },
        // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
        { match: `\\b0x(${hexDigits2})(\\.(${hexDigits2}))?([pP][+-]?(${decimalDigits2}))?\\b` },
        // octal-literal
        { match: /\b0o([0-7]_*)+\b/ },
        // binary-literal
        { match: /\b0b([01]_*)+\b/ }
      ]
    };
    const ESCAPED_CHARACTER = (rawDelimiter = "") => ({
      className: "subst",
      variants: [
        { match: concat$1(/\\/, rawDelimiter, /[0\\tnr"']/) },
        { match: concat$1(/\\/, rawDelimiter, /u\{[0-9a-fA-F]{1,8}\}/) }
      ]
    });
    const ESCAPED_NEWLINE = (rawDelimiter = "") => ({
      className: "subst",
      match: concat$1(/\\/, rawDelimiter, /[\t ]*(?:[\r\n]|\r\n)/)
    });
    const INTERPOLATION = (rawDelimiter = "") => ({
      className: "subst",
      label: "interpol",
      begin: concat$1(/\\/, rawDelimiter, /\(/),
      end: /\)/
    });
    const MULTILINE_STRING = (rawDelimiter = "") => ({
      begin: concat$1(rawDelimiter, /"""/),
      end: concat$1(/"""/, rawDelimiter),
      contains: [
        ESCAPED_CHARACTER(rawDelimiter),
        ESCAPED_NEWLINE(rawDelimiter),
        INTERPOLATION(rawDelimiter)
      ]
    });
    const SINGLE_LINE_STRING = (rawDelimiter = "") => ({
      begin: concat$1(rawDelimiter, /"/),
      end: concat$1(/"/, rawDelimiter),
      contains: [
        ESCAPED_CHARACTER(rawDelimiter),
        INTERPOLATION(rawDelimiter)
      ]
    });
    const STRING = {
      className: "string",
      variants: [
        MULTILINE_STRING(),
        MULTILINE_STRING("#"),
        MULTILINE_STRING("##"),
        MULTILINE_STRING("###"),
        SINGLE_LINE_STRING(),
        SINGLE_LINE_STRING("#"),
        SINGLE_LINE_STRING("##"),
        SINGLE_LINE_STRING("###")
      ]
    };
    const REGEXP_CONTENTS = [
      hljs.BACKSLASH_ESCAPE,
      {
        begin: /\[/,
        end: /\]/,
        relevance: 0,
        contains: [hljs.BACKSLASH_ESCAPE]
      }
    ];
    const BARE_REGEXP_LITERAL = {
      begin: /\/[^\s](?=[^/\n]*\/)/,
      end: /\//,
      contains: REGEXP_CONTENTS
    };
    const EXTENDED_REGEXP_LITERAL = (rawDelimiter) => {
      const begin = concat$1(rawDelimiter, /\//);
      const end2 = concat$1(/\//, rawDelimiter);
      return {
        begin,
        end: end2,
        contains: [
          ...REGEXP_CONTENTS,
          {
            scope: "comment",
            begin: `#(?!.*${end2})`,
            end: /$/
          }
        ]
      };
    };
    const REGEXP = {
      scope: "regexp",
      variants: [
        EXTENDED_REGEXP_LITERAL("###"),
        EXTENDED_REGEXP_LITERAL("##"),
        EXTENDED_REGEXP_LITERAL("#"),
        BARE_REGEXP_LITERAL
      ]
    };
    const QUOTED_IDENTIFIER = { match: concat$1(/`/, identifier, /`/) };
    const IMPLICIT_PARAMETER = {
      className: "variable",
      match: /\$\d+/
    };
    const PROPERTY_WRAPPER_PROJECTION = {
      className: "variable",
      match: `\\$${identifierCharacter}+`
    };
    const IDENTIFIERS = [
      QUOTED_IDENTIFIER,
      IMPLICIT_PARAMETER,
      PROPERTY_WRAPPER_PROJECTION
    ];
    const AVAILABLE_ATTRIBUTE = {
      match: /(@|#(un)?)available/,
      scope: "keyword",
      starts: { contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: availabilityKeywords,
          contains: [
            ...OPERATORS,
            NUMBER,
            STRING
          ]
        }
      ] }
    };
    const KEYWORD_ATTRIBUTE = {
      scope: "keyword",
      match: concat$1(/@/, either$1(...keywordAttributes), lookahead$1(either$1(/\(/, /\s+/)))
    };
    const USER_DEFINED_ATTRIBUTE = {
      scope: "meta",
      match: concat$1(/@/, identifier)
    };
    const ATTRIBUTES2 = [
      AVAILABLE_ATTRIBUTE,
      KEYWORD_ATTRIBUTE,
      USER_DEFINED_ATTRIBUTE
    ];
    const TYPE = {
      match: lookahead$1(/\b[A-Z]/),
      relevance: 0,
      contains: [
        {
          // Common Apple frameworks, for relevance boost
          className: "type",
          match: concat$1(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, "+")
        },
        {
          // Type identifier
          className: "type",
          match: typeIdentifier,
          relevance: 0
        },
        {
          // Optional type
          match: /[?!]+/,
          relevance: 0
        },
        {
          // Variadic parameter
          match: /\.\.\./,
          relevance: 0
        },
        {
          // Protocol composition
          match: concat$1(/\s+&\s+/, lookahead$1(typeIdentifier)),
          relevance: 0
        }
      ]
    };
    const GENERIC_ARGUMENTS = {
      begin: /</,
      end: />/,
      keywords: KEYWORDS2,
      contains: [
        ...COMMENTS,
        ...KEYWORD_MODES,
        ...ATTRIBUTES2,
        OPERATOR_GUARD,
        TYPE
      ]
    };
    TYPE.contains.push(GENERIC_ARGUMENTS);
    const TUPLE_ELEMENT_NAME = {
      match: concat$1(identifier, /\s*:/),
      keywords: "_|0",
      relevance: 0
    };
    const TUPLE = {
      begin: /\(/,
      end: /\)/,
      relevance: 0,
      keywords: KEYWORDS2,
      contains: [
        "self",
        TUPLE_ELEMENT_NAME,
        ...COMMENTS,
        REGEXP,
        ...KEYWORD_MODES,
        ...BUILT_INS2,
        ...OPERATORS,
        NUMBER,
        STRING,
        ...IDENTIFIERS,
        ...ATTRIBUTES2,
        TYPE
      ]
    };
    const GENERIC_PARAMETERS = {
      begin: /</,
      end: />/,
      keywords: "repeat each",
      contains: [
        ...COMMENTS,
        TYPE
      ]
    };
    const FUNCTION_PARAMETER_NAME = {
      begin: either$1(
        lookahead$1(concat$1(identifier, /\s*:/)),
        lookahead$1(concat$1(identifier, /\s+/, identifier, /\s*:/))
      ),
      end: /:/,
      relevance: 0,
      contains: [
        {
          className: "keyword",
          match: /\b_\b/
        },
        {
          className: "params",
          match: identifier
        }
      ]
    };
    const FUNCTION_PARAMETERS = {
      begin: /\(/,
      end: /\)/,
      keywords: KEYWORDS2,
      contains: [
        FUNCTION_PARAMETER_NAME,
        ...COMMENTS,
        ...KEYWORD_MODES,
        ...OPERATORS,
        NUMBER,
        STRING,
        ...ATTRIBUTES2,
        TYPE,
        TUPLE
      ],
      endsParent: true,
      illegal: /["']/
    };
    const FUNCTION_OR_MACRO = {
      match: [
        /(func|macro)/,
        /\s+/,
        either$1(QUOTED_IDENTIFIER.match, identifier, operator)
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        GENERIC_PARAMETERS,
        FUNCTION_PARAMETERS,
        WHITESPACE
      ],
      illegal: [
        /\[/,
        /%/
      ]
    };
    const INIT_SUBSCRIPT = {
      match: [
        /\b(?:subscript|init[?!]?)/,
        /\s*(?=[<(])/
      ],
      className: { 1: "keyword" },
      contains: [
        GENERIC_PARAMETERS,
        FUNCTION_PARAMETERS,
        WHITESPACE
      ],
      illegal: /\[|%/
    };
    const OPERATOR_DECLARATION = {
      match: [
        /operator/,
        /\s+/,
        operator
      ],
      className: {
        1: "keyword",
        3: "title"
      }
    };
    const PRECEDENCEGROUP = {
      begin: [
        /precedencegroup/,
        /\s+/,
        typeIdentifier
      ],
      className: {
        1: "keyword",
        3: "title"
      },
      contains: [TYPE],
      keywords: [
        ...precedencegroupKeywords,
        ...literals
      ],
      end: /}/
    };
    const CLASS_FUNC_DECLARATION = {
      match: [
        /class\b/,
        /\s+/,
        /func\b/,
        /\s+/,
        /\b[A-Za-z_][A-Za-z0-9_]*\b/
      ],
      scope: {
        1: "keyword",
        3: "keyword",
        5: "title.function"
      }
    };
    const CLASS_VAR_DECLARATION = {
      match: [
        /class\b/,
        /\s+/,
        /var\b/
      ],
      scope: {
        1: "keyword",
        3: "keyword"
      }
    };
    const TYPE_DECLARATION = {
      begin: [
        /(struct|protocol|class|extension|enum|actor)/,
        /\s+/,
        identifier,
        /\s*/
      ],
      beginScope: {
        1: "keyword",
        3: "title.class"
      },
      keywords: KEYWORDS2,
      contains: [
        GENERIC_PARAMETERS,
        ...KEYWORD_MODES,
        {
          begin: /:/,
          end: /\{/,
          keywords: KEYWORDS2,
          contains: [
            {
              scope: "title.class.inherited",
              match: typeIdentifier
            },
            ...KEYWORD_MODES
          ],
          relevance: 0
        }
      ]
    };
    for (const variant of STRING.variants) {
      const interpolation = variant.contains.find((mode) => mode.label === "interpol");
      interpolation.keywords = KEYWORDS2;
      const submodes = [
        ...KEYWORD_MODES,
        ...BUILT_INS2,
        ...OPERATORS,
        NUMBER,
        STRING,
        ...IDENTIFIERS
      ];
      interpolation.contains = [
        ...submodes,
        {
          begin: /\(/,
          end: /\)/,
          contains: [
            "self",
            ...submodes
          ]
        }
      ];
    }
    return {
      name: "Swift",
      keywords: KEYWORDS2,
      contains: [
        ...COMMENTS,
        FUNCTION_OR_MACRO,
        INIT_SUBSCRIPT,
        CLASS_FUNC_DECLARATION,
        CLASS_VAR_DECLARATION,
        TYPE_DECLARATION,
        OPERATOR_DECLARATION,
        PRECEDENCEGROUP,
        {
          beginKeywords: "import",
          end: /$/,
          contains: [...COMMENTS],
          relevance: 0
        },
        REGEXP,
        ...KEYWORD_MODES,
        ...BUILT_INS2,
        ...OPERATORS,
        NUMBER,
        STRING,
        ...IDENTIFIERS,
        ...ATTRIBUTES2,
        TYPE,
        TUPLE
      ]
    };
  }
  const IDENT_RE$1 = "[A-Za-z$_][0-9A-Za-z$_]*";
  const KEYWORDS = [
    "as",
    // for exports
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    // JS handles these with a special rule
    // "get",
    // "set",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends",
    // It's reached stage 3, which is "recommended for implementation":
    "using"
  ];
  const LITERALS = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ];
  const TYPES = [
    // Fundamental objects
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    // numbers and dates
    "Math",
    "Date",
    "Number",
    "BigInt",
    // text
    "String",
    "RegExp",
    // Indexed collections
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    // Keyed collections
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    // Structured data
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    // Control abstraction objects
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    // Reflection
    "Reflect",
    "Proxy",
    // Internationalization
    "Intl",
    // WebAssembly
    "WebAssembly"
  ];
  const ERROR_TYPES = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ];
  const BUILT_IN_GLOBALS = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ];
  const BUILT_IN_VARIABLES = [
    "arguments",
    "this",
    "super",
    "console",
    "window",
    "document",
    "localStorage",
    "sessionStorage",
    "module",
    "global"
    // Node.js
  ];
  const BUILT_INS = [].concat(
    BUILT_IN_GLOBALS,
    TYPES,
    ERROR_TYPES
  );
  function javascript(hljs) {
    const regex = hljs.regex;
    const hasClosingTag = (match2, { after: after2 }) => {
      const tag = "</" + match2[0].slice(1);
      const pos = match2.input.indexOf(tag, after2);
      return pos !== -1;
    };
    const IDENT_RE$1$1 = IDENT_RE$1;
    const FRAGMENT = {
      begin: "<>",
      end: "</>"
    };
    const XML_SELF_CLOSING = /<[A-Za-z0-9\\._:-]+\s*\/>/;
    const XML_TAG = {
      begin: /<[A-Za-z0-9\\._:-]+/,
      end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
      /**
       * @param {RegExpMatchArray} match
       * @param {CallbackResponse} response
       */
      isTrulyOpeningTag: (match2, response) => {
        const afterMatchIndex = match2[0].length + match2.index;
        const nextChar = match2.input[afterMatchIndex];
        if (
          // HTML should not include another raw `<` inside a tag
          // nested type?
          // `<Array<Array<number>>`, etc.
          nextChar === "<" || // the , gives away that this is not HTML
          // `<T, A extends keyof T, V>`
          nextChar === ","
        ) {
          response.ignoreMatch();
          return;
        }
        if (nextChar === ">") {
          if (!hasClosingTag(match2, { after: afterMatchIndex })) {
            response.ignoreMatch();
          }
        }
        let m;
        const afterMatch = match2.input.substring(afterMatchIndex);
        if (m = afterMatch.match(/^\s*=/)) {
          response.ignoreMatch();
          return;
        }
        if (m = afterMatch.match(/^\s+extends\s+/)) {
          if (m.index === 0) {
            response.ignoreMatch();
            return;
          }
        }
      }
    };
    const KEYWORDS$12 = {
      $pattern: IDENT_RE$1,
      keyword: KEYWORDS,
      literal: LITERALS,
      built_in: BUILT_INS,
      "variable.language": BUILT_IN_VARIABLES
    };
    const decimalDigits2 = "[0-9](_?[0-9])*";
    const frac2 = `\\.(${decimalDigits2})`;
    const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;
    const NUMBER = {
      className: "number",
      variants: [
        // DecimalLiteral
        { begin: `(\\b(${decimalInteger})((${frac2})|\\.)?|(${frac2}))[eE][+-]?(${decimalDigits2})\\b` },
        { begin: `\\b(${decimalInteger})\\b((${frac2})\\b|\\.)?|(${frac2})\\b` },
        // DecimalBigIntegerLiteral
        { begin: `\\b(0|[1-9](_?[0-9])*)n\\b` },
        // NonDecimalIntegerLiteral
        { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
        { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
        { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
        // LegacyOctalIntegerLiteral (does not include underscore separators)
        // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
        { begin: "\\b0[0-7]+n?\\b" }
      ],
      relevance: 0
    };
    const SUBST = {
      className: "subst",
      begin: "\\$\\{",
      end: "\\}",
      keywords: KEYWORDS$12,
      contains: []
      // defined later
    };
    const HTML_TEMPLATE = {
      begin: ".?html`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          SUBST
        ],
        subLanguage: "xml"
      }
    };
    const CSS_TEMPLATE = {
      begin: ".?css`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          SUBST
        ],
        subLanguage: "css"
      }
    };
    const GRAPHQL_TEMPLATE = {
      begin: ".?gql`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          SUBST
        ],
        subLanguage: "graphql"
      }
    };
    const TEMPLATE_STRING = {
      className: "string",
      begin: "`",
      end: "`",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ]
    };
    const JSDOC_COMMENT = hljs.COMMENT(
      /\/\*\*(?!\/)/,
      "\\*/",
      {
        relevance: 0,
        contains: [
          {
            begin: "(?=@[A-Za-z]+)",
            relevance: 0,
            contains: [
              {
                className: "doctag",
                begin: "@[A-Za-z]+"
              },
              {
                className: "type",
                begin: "\\{",
                end: "\\}",
                excludeEnd: true,
                excludeBegin: true,
                relevance: 0
              },
              {
                className: "variable",
                begin: IDENT_RE$1$1 + "(?=\\s*(-)|$)",
                endsParent: true,
                relevance: 0
              },
              // eat spaces (not newlines) so we can find
              // types or variables
              {
                begin: /(?=[^\n])\s/,
                relevance: 0
              }
            ]
          }
        ]
      }
    );
    const COMMENT2 = {
      className: "comment",
      variants: [
        JSDOC_COMMENT,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.C_LINE_COMMENT_MODE
      ]
    };
    const SUBST_INTERNALS = [
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      HTML_TEMPLATE,
      CSS_TEMPLATE,
      GRAPHQL_TEMPLATE,
      TEMPLATE_STRING,
      // Skip numbers when they are part of a variable name
      { match: /\$\d+/ },
      NUMBER
      // This is intentional:
      // See https://github.com/highlightjs/highlight.js/issues/3288
      // hljs.REGEXP_MODE
    ];
    SUBST.contains = SUBST_INTERNALS.concat({
      // we need to pair up {} inside our subst to prevent
      // it from ending too early by matching another }
      begin: /\{/,
      end: /\}/,
      keywords: KEYWORDS$12,
      contains: [
        "self"
      ].concat(SUBST_INTERNALS)
    });
    const SUBST_AND_COMMENTS = [].concat(COMMENT2, SUBST.contains);
    const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
      // eat recursive parens in sub expressions
      {
        begin: /(\s*)\(/,
        end: /\)/,
        keywords: KEYWORDS$12,
        contains: ["self"].concat(SUBST_AND_COMMENTS)
      }
    ]);
    const PARAMS = {
      className: "params",
      // convert this to negative lookbehind in v12
      begin: /(\s*)\(/,
      // to match the parms with
      end: /\)/,
      excludeBegin: true,
      excludeEnd: true,
      keywords: KEYWORDS$12,
      contains: PARAMS_CONTAINS
    };
    const CLASS_OR_EXTENDS = {
      variants: [
        // class Car extends vehicle
        {
          match: [
            /class/,
            /\s+/,
            IDENT_RE$1$1,
            /\s+/,
            /extends/,
            /\s+/,
            regex.concat(IDENT_RE$1$1, "(", regex.concat(/\./, IDENT_RE$1$1), ")*")
          ],
          scope: {
            1: "keyword",
            3: "title.class",
            5: "keyword",
            7: "title.class.inherited"
          }
        },
        // class Car
        {
          match: [
            /class/,
            /\s+/,
            IDENT_RE$1$1
          ],
          scope: {
            1: "keyword",
            3: "title.class"
          }
        }
      ]
    };
    const CLASS_REFERENCE = {
      relevance: 0,
      match: regex.either(
        // Hard coded exceptions
        /\bJSON/,
        // Float32Array, OutT
        /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
        // CSSFactory, CSSFactoryT
        /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
        // FPs, FPsT
        /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/
        // P
        // single letters are not highlighted
        // BLAH
        // this will be flagged as a UPPER_CASE_CONSTANT instead
      ),
      className: "title.class",
      keywords: {
        _: [
          // se we still get relevance credit for JS library classes
          ...TYPES,
          ...ERROR_TYPES
        ]
      }
    };
    const USE_STRICT = {
      label: "use_strict",
      className: "meta",
      relevance: 10,
      begin: /^\s*['"]use (strict|asm)['"]/
    };
    const FUNCTION_DEFINITION = {
      variants: [
        {
          match: [
            /function/,
            /\s+/,
            IDENT_RE$1$1,
            /(?=\s*\()/
          ]
        },
        // anonymous function
        {
          match: [
            /function/,
            /\s*(?=\()/
          ]
        }
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      label: "func.def",
      contains: [PARAMS],
      illegal: /%/
    };
    const UPPER_CASE_CONSTANT = {
      relevance: 0,
      match: /\b[A-Z][A-Z_0-9]+\b/,
      className: "variable.constant"
    };
    function noneOf(list) {
      return regex.concat("(?!", list.join("|"), ")");
    }
    const FUNCTION_CALL = {
      match: regex.concat(
        /\b/,
        noneOf([
          ...BUILT_IN_GLOBALS,
          "super",
          "import"
        ].map((x) => `${x}\\s*\\(`)),
        IDENT_RE$1$1,
        regex.lookahead(/\s*\(/)
      ),
      className: "title.function",
      relevance: 0
    };
    const PROPERTY_ACCESS = {
      begin: regex.concat(/\./, regex.lookahead(
        regex.concat(IDENT_RE$1$1, /(?![0-9A-Za-z$_(])/)
      )),
      end: IDENT_RE$1$1,
      excludeBegin: true,
      keywords: "prototype",
      className: "property",
      relevance: 0
    };
    const GETTER_OR_SETTER = {
      match: [
        /get|set/,
        /\s+/,
        IDENT_RE$1$1,
        /(?=\()/
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        {
          // eat to avoid empty params
          begin: /\(\)/
        },
        PARAMS
      ]
    };
    const FUNC_LEAD_IN_RE = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + hljs.UNDERSCORE_IDENT_RE + ")\\s*=>";
    const FUNCTION_VARIABLE = {
      match: [
        /const|var|let/,
        /\s+/,
        IDENT_RE$1$1,
        /\s*/,
        /=\s*/,
        /(async\s*)?/,
        // async is optional
        regex.lookahead(FUNC_LEAD_IN_RE)
      ],
      keywords: "async",
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        PARAMS
      ]
    };
    return {
      name: "JavaScript",
      aliases: ["js", "jsx", "mjs", "cjs"],
      keywords: KEYWORDS$12,
      // this will be extended by TypeScript
      exports: { PARAMS_CONTAINS, CLASS_REFERENCE },
      illegal: /#(?![$_A-z])/,
      contains: [
        hljs.SHEBANG({
          label: "shebang",
          binary: "node",
          relevance: 5
        }),
        USE_STRICT,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        HTML_TEMPLATE,
        CSS_TEMPLATE,
        GRAPHQL_TEMPLATE,
        TEMPLATE_STRING,
        COMMENT2,
        // Skip numbers when they are part of a variable name
        { match: /\$\d+/ },
        NUMBER,
        CLASS_REFERENCE,
        {
          scope: "attr",
          match: IDENT_RE$1$1 + regex.lookahead(":"),
          relevance: 0
        },
        FUNCTION_VARIABLE,
        {
          // "value" container
          begin: "(" + hljs.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
          keywords: "return throw case",
          relevance: 0,
          contains: [
            COMMENT2,
            hljs.REGEXP_MODE,
            {
              className: "function",
              // we have to count the parens to make sure we actually have the
              // correct bounding ( ) before the =>.  There could be any number of
              // sub-expressions inside also surrounded by parens.
              begin: FUNC_LEAD_IN_RE,
              returnBegin: true,
              end: "\\s*=>",
              contains: [
                {
                  className: "params",
                  variants: [
                    {
                      begin: hljs.UNDERSCORE_IDENT_RE,
                      relevance: 0
                    },
                    {
                      className: null,
                      begin: /\(\s*\)/,
                      skip: true
                    },
                    {
                      begin: /(\s*)\(/,
                      end: /\)/,
                      excludeBegin: true,
                      excludeEnd: true,
                      keywords: KEYWORDS$12,
                      contains: PARAMS_CONTAINS
                    }
                  ]
                }
              ]
            },
            {
              // could be a comma delimited list of params to a function call
              begin: /,/,
              relevance: 0
            },
            {
              match: /\s+/,
              relevance: 0
            },
            {
              // JSX
              variants: [
                { begin: FRAGMENT.begin, end: FRAGMENT.end },
                { match: XML_SELF_CLOSING },
                {
                  begin: XML_TAG.begin,
                  // we carefully check the opening tag to see if it truly
                  // is a tag and not a false positive
                  "on:begin": XML_TAG.isTrulyOpeningTag,
                  end: XML_TAG.end
                }
              ],
              subLanguage: "xml",
              contains: [
                {
                  begin: XML_TAG.begin,
                  end: XML_TAG.end,
                  skip: true,
                  contains: ["self"]
                }
              ]
            }
          ]
        },
        FUNCTION_DEFINITION,
        {
          // prevent this from getting swallowed up by function
          // since they appear "function like"
          beginKeywords: "while if switch catch for"
        },
        {
          // we have to count the parens to make sure we actually have the correct
          // bounding ( ).  There could be any number of sub-expressions inside
          // also surrounded by parens.
          begin: "\\b(?!function)" + hljs.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
          // end parens
          returnBegin: true,
          label: "func.def",
          contains: [
            PARAMS,
            hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1$1, className: "title.function" })
          ]
        },
        // catch ... so it won't trigger the property rule below
        {
          match: /\.\.\./,
          relevance: 0
        },
        PROPERTY_ACCESS,
        // hack: prevents detection of keywords in some circumstances
        // .keyword()
        // $keyword = x
        {
          match: "\\$" + IDENT_RE$1$1,
          relevance: 0
        },
        {
          match: [/\bconstructor(?=\s*\()/],
          className: { 1: "title.function" },
          contains: [PARAMS]
        },
        FUNCTION_CALL,
        UPPER_CASE_CONSTANT,
        CLASS_OR_EXTENDS,
        GETTER_OR_SETTER,
        {
          match: /\$[(.]/
          // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
        }
      ]
    };
  }
  function typescript(hljs) {
    const regex = hljs.regex;
    const tsLanguage = javascript(hljs);
    const IDENT_RE$1$1 = IDENT_RE$1;
    const TYPES2 = [
      "any",
      "void",
      "number",
      "boolean",
      "string",
      "object",
      "never",
      "symbol",
      "bigint",
      "unknown"
    ];
    const NAMESPACE = {
      begin: [
        /namespace/,
        /\s+/,
        hljs.IDENT_RE
      ],
      beginScope: {
        1: "keyword",
        3: "title.class"
      }
    };
    const INTERFACE = {
      beginKeywords: "interface",
      end: /\{/,
      excludeEnd: true,
      keywords: {
        keyword: "interface extends",
        built_in: TYPES2
      },
      contains: [tsLanguage.exports.CLASS_REFERENCE]
    };
    const USE_STRICT = {
      className: "meta",
      relevance: 10,
      begin: /^\s*['"]use strict['"]/
    };
    const TS_SPECIFIC_KEYWORDS = [
      "type",
      // "namespace",
      "interface",
      "public",
      "private",
      "protected",
      "implements",
      "declare",
      "abstract",
      "readonly",
      "enum",
      "override",
      "satisfies"
    ];
    const KEYWORDS$12 = {
      $pattern: IDENT_RE$1,
      keyword: KEYWORDS.concat(TS_SPECIFIC_KEYWORDS),
      literal: LITERALS,
      built_in: BUILT_INS.concat(TYPES2),
      "variable.language": BUILT_IN_VARIABLES
    };
    const DECORATOR = {
      className: "meta",
      begin: "@" + IDENT_RE$1$1
    };
    const swapMode = (mode, label, replacement) => {
      const indx = mode.contains.findIndex((m) => m.label === label);
      if (indx === -1) {
        throw new Error("can not find mode to replace");
      }
      mode.contains.splice(indx, 1, replacement);
    };
    Object.assign(tsLanguage.keywords, KEYWORDS$12);
    tsLanguage.exports.PARAMS_CONTAINS.push(DECORATOR);
    const ATTRIBUTE_HIGHLIGHT = tsLanguage.contains.find((c2) => c2.scope === "attr");
    const OPTIONAL_KEY_OR_ARGUMENT = Object.assign(
      {},
      ATTRIBUTE_HIGHLIGHT,
      { match: regex.concat(IDENT_RE$1$1, regex.lookahead(/\s*\?:/)) }
    );
    tsLanguage.exports.PARAMS_CONTAINS.push([
      tsLanguage.exports.CLASS_REFERENCE,
      // class reference for highlighting the params types
      ATTRIBUTE_HIGHLIGHT,
      // highlight the params key
      OPTIONAL_KEY_OR_ARGUMENT
      // Added for optional property assignment highlighting
    ]);
    tsLanguage.contains = tsLanguage.contains.concat([
      DECORATOR,
      NAMESPACE,
      INTERFACE,
      OPTIONAL_KEY_OR_ARGUMENT
      // Added for optional property assignment highlighting
    ]);
    swapMode(tsLanguage, "shebang", hljs.SHEBANG());
    swapMode(tsLanguage, "use_strict", USE_STRICT);
    const functionDeclaration = tsLanguage.contains.find((m) => m.label === "func.def");
    functionDeclaration.relevance = 0;
    Object.assign(tsLanguage, {
      name: "TypeScript",
      aliases: [
        "ts",
        "tsx",
        "mts",
        "cts"
      ]
    });
    return tsLanguage;
  }
  function vbnet(hljs) {
    const regex = hljs.regex;
    const CHARACTER = {
      className: "string",
      begin: /"(""|[^/n])"C\b/
    };
    const STRING = {
      className: "string",
      begin: /"/,
      end: /"/,
      illegal: /\n/,
      contains: [
        {
          // double quote escape
          begin: /""/
        }
      ]
    };
    const MM_DD_YYYY = /\d{1,2}\/\d{1,2}\/\d{4}/;
    const YYYY_MM_DD = /\d{4}-\d{1,2}-\d{1,2}/;
    const TIME_12H = /(\d|1[012])(:\d+){0,2} *(AM|PM)/;
    const TIME_24H = /\d{1,2}(:\d{1,2}){1,2}/;
    const DATE = {
      className: "literal",
      variants: [
        {
          // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)
          begin: regex.concat(/# */, regex.either(YYYY_MM_DD, MM_DD_YYYY), / *#/)
        },
        {
          // #H:mm[:ss]# (24h Time)
          begin: regex.concat(/# */, TIME_24H, / *#/)
        },
        {
          // #h[:mm[:ss]] A# (12h Time)
          begin: regex.concat(/# */, TIME_12H, / *#/)
        },
        {
          // date plus time
          begin: regex.concat(
            /# */,
            regex.either(YYYY_MM_DD, MM_DD_YYYY),
            / +/,
            regex.either(TIME_12H, TIME_24H),
            / *#/
          )
        }
      ]
    };
    const NUMBER = {
      className: "number",
      relevance: 0,
      variants: [
        {
          // Float
          begin: /\b\d[\d_]*((\.[\d_]+(E[+-]?[\d_]+)?)|(E[+-]?[\d_]+))[RFD@!#]?/
        },
        {
          // Integer (base 10)
          begin: /\b\d[\d_]*((U?[SIL])|[%&])?/
        },
        {
          // Integer (base 16)
          begin: /&H[\dA-F_]+((U?[SIL])|[%&])?/
        },
        {
          // Integer (base 8)
          begin: /&O[0-7_]+((U?[SIL])|[%&])?/
        },
        {
          // Integer (base 2)
          begin: /&B[01_]+((U?[SIL])|[%&])?/
        }
      ]
    };
    const LABEL = {
      className: "label",
      begin: /^\w+:/
    };
    const DOC_COMMENT = hljs.COMMENT(/'''/, /$/, { contains: [
      {
        className: "doctag",
        begin: /<\/?/,
        end: />/
      }
    ] });
    const COMMENT2 = hljs.COMMENT(null, /$/, { variants: [
      { begin: /'/ },
      {
        // TODO: Use multi-class for leading spaces
        begin: /([\t ]|^)REM(?=\s)/
      }
    ] });
    const DIRECTIVES = {
      className: "meta",
      // TODO: Use multi-class for indentation once available
      begin: /[\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\b/,
      end: /$/,
      keywords: { keyword: "const disable else elseif enable end externalsource if region then" },
      contains: [COMMENT2]
    };
    return {
      name: "Visual Basic .NET",
      aliases: ["vb"],
      case_insensitive: true,
      classNameAliases: { label: "symbol" },
      keywords: {
        keyword: "addhandler alias aggregate ansi as async assembly auto binary by byref byval call case catch class compare const continue custom declare default delegate dim distinct do each equals else elseif end enum erase error event exit explicit finally for friend from function get global goto group handles if implements imports in inherits interface into iterator join key let lib loop me mid module mustinherit mustoverride mybase myclass namespace narrowing new next notinheritable notoverridable of off on operator option optional order overloads overridable overrides paramarray partial preserve private property protected public raiseevent readonly redim removehandler resume return select set shadows shared skip static step stop structure strict sub synclock take text then throw to try unicode until using when where while widening with withevents writeonly yield",
        built_in: (
          // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators
          "addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort"
        ),
        type: (
          // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types
          "boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort"
        ),
        literal: "true false nothing"
      },
      illegal: "//|\\{|\\}|endif|gosub|variant|wend|^\\$ ",
      contains: [
        CHARACTER,
        STRING,
        DATE,
        NUMBER,
        LABEL,
        DOC_COMMENT,
        COMMENT2,
        DIRECTIVES
      ]
    };
  }
  function wasm(hljs) {
    hljs.regex;
    const BLOCK_COMMENT = hljs.COMMENT(/\(;/, /;\)/);
    BLOCK_COMMENT.contains.push("self");
    const LINE_COMMENT = hljs.COMMENT(/;;/, /$/);
    const KWS = [
      "anyfunc",
      "block",
      "br",
      "br_if",
      "br_table",
      "call",
      "call_indirect",
      "data",
      "drop",
      "elem",
      "else",
      "end",
      "export",
      "func",
      "global.get",
      "global.set",
      "local.get",
      "local.set",
      "local.tee",
      "get_global",
      "get_local",
      "global",
      "if",
      "import",
      "local",
      "loop",
      "memory",
      "memory.grow",
      "memory.size",
      "module",
      "mut",
      "nop",
      "offset",
      "param",
      "result",
      "return",
      "select",
      "set_global",
      "set_local",
      "start",
      "table",
      "tee_local",
      "then",
      "type",
      "unreachable"
    ];
    const FUNCTION_REFERENCE = {
      begin: [
        /(?:func|call|call_indirect)/,
        /\s+/,
        /\$[^\s)]+/
      ],
      className: {
        1: "keyword",
        3: "title.function"
      }
    };
    const ARGUMENT = {
      className: "variable",
      begin: /\$[\w_]+/
    };
    const PARENS = {
      match: /(\((?!;)|\))+/,
      className: "punctuation",
      relevance: 0
    };
    const NUMBER = {
      className: "number",
      relevance: 0,
      // borrowed from Prism, TODO: split out into variants
      match: /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/
    };
    const TYPE = {
      // look-ahead prevents us from gobbling up opcodes
      match: /(i32|i64|f32|f64)(?!\.)/,
      className: "type"
    };
    const MATH_OPERATIONS = {
      className: "keyword",
      // borrowed from Prism, TODO: split out into variants
      match: /\b(f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))\b/
    };
    const OFFSET_ALIGN = {
      match: [
        /(?:offset|align)/,
        /\s*/,
        /=/
      ],
      className: {
        1: "keyword",
        3: "operator"
      }
    };
    return {
      name: "WebAssembly",
      keywords: {
        $pattern: /[\w.]+/,
        keyword: KWS
      },
      contains: [
        LINE_COMMENT,
        BLOCK_COMMENT,
        OFFSET_ALIGN,
        ARGUMENT,
        PARENS,
        FUNCTION_REFERENCE,
        hljs.QUOTE_STRING_MODE,
        TYPE,
        MATH_OPERATIONS,
        NUMBER
      ]
    };
  }
  function xml(hljs) {
    const regex = hljs.regex;
    const TAG_NAME_RE = regex.concat(/[\p{L}_]/u, regex.optional(/[\p{L}0-9_.-]*:/u), /[\p{L}0-9_.-]*/u);
    const XML_IDENT_RE = /[\p{L}0-9._:-]+/u;
    const XML_ENTITIES = {
      className: "symbol",
      begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/
    };
    const XML_META_KEYWORDS = {
      begin: /\s/,
      contains: [
        {
          className: "keyword",
          begin: /#?[a-z_][a-z1-9_-]+/,
          illegal: /\n/
        }
      ]
    };
    const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {
      begin: /\(/,
      end: /\)/
    });
    const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, { className: "string" });
    const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, { className: "string" });
    const TAG_INTERNALS = {
      endsWithParent: true,
      illegal: /</,
      relevance: 0,
      contains: [
        {
          className: "attr",
          begin: XML_IDENT_RE,
          relevance: 0
        },
        {
          begin: /=\s*/,
          relevance: 0,
          contains: [
            {
              className: "string",
              endsParent: true,
              variants: [
                {
                  begin: /"/,
                  end: /"/,
                  contains: [XML_ENTITIES]
                },
                {
                  begin: /'/,
                  end: /'/,
                  contains: [XML_ENTITIES]
                },
                { begin: /[^\s"'=<>`]+/ }
              ]
            }
          ]
        }
      ]
    };
    return {
      name: "HTML, XML",
      aliases: [
        "html",
        "xhtml",
        "rss",
        "atom",
        "xjb",
        "xsd",
        "xsl",
        "plist",
        "wsf",
        "svg"
      ],
      case_insensitive: true,
      unicodeRegex: true,
      contains: [
        {
          className: "meta",
          begin: /<![a-z]/,
          end: />/,
          relevance: 10,
          contains: [
            XML_META_KEYWORDS,
            QUOTE_META_STRING_MODE,
            APOS_META_STRING_MODE,
            XML_META_PAR_KEYWORDS,
            {
              begin: /\[/,
              end: /\]/,
              contains: [
                {
                  className: "meta",
                  begin: /<![a-z]/,
                  end: />/,
                  contains: [
                    XML_META_KEYWORDS,
                    XML_META_PAR_KEYWORDS,
                    QUOTE_META_STRING_MODE,
                    APOS_META_STRING_MODE
                  ]
                }
              ]
            }
          ]
        },
        hljs.COMMENT(
          /<!--/,
          /-->/,
          { relevance: 10 }
        ),
        {
          begin: /<!\[CDATA\[/,
          end: /\]\]>/,
          relevance: 10
        },
        XML_ENTITIES,
        // xml processing instructions
        {
          className: "meta",
          end: /\?>/,
          variants: [
            {
              begin: /<\?xml/,
              relevance: 10,
              contains: [
                QUOTE_META_STRING_MODE
              ]
            },
            {
              begin: /<\?[a-z][a-z0-9]+/
            }
          ]
        },
        {
          className: "tag",
          /*
          The lookahead pattern (?=...) ensures that 'begin' only matches
          '<style' as a single word, followed by a whitespace or an
          ending bracket.
          */
          begin: /<style(?=\s|>)/,
          end: />/,
          keywords: { name: "style" },
          contains: [TAG_INTERNALS],
          starts: {
            end: /<\/style>/,
            returnEnd: true,
            subLanguage: [
              "css",
              "xml"
            ]
          }
        },
        {
          className: "tag",
          // See the comment in the <style tag about the lookahead pattern
          begin: /<script(?=\s|>)/,
          end: />/,
          keywords: { name: "script" },
          contains: [TAG_INTERNALS],
          starts: {
            end: /<\/script>/,
            returnEnd: true,
            subLanguage: [
              "javascript",
              "handlebars",
              "xml"
            ]
          }
        },
        // we need this for now for jSX
        {
          className: "tag",
          begin: /<>|<\/>/
        },
        // open tag
        {
          className: "tag",
          begin: regex.concat(
            /</,
            regex.lookahead(regex.concat(
              TAG_NAME_RE,
              // <tag/>
              // <tag>
              // <tag ...
              regex.either(/\/>/, />/, /\s/)
            ))
          ),
          end: /\/?>/,
          contains: [
            {
              className: "name",
              begin: TAG_NAME_RE,
              relevance: 0,
              starts: TAG_INTERNALS
            }
          ]
        },
        // close tag
        {
          className: "tag",
          begin: regex.concat(
            /<\//,
            regex.lookahead(regex.concat(
              TAG_NAME_RE,
              />/
            ))
          ),
          contains: [
            {
              className: "name",
              begin: TAG_NAME_RE,
              relevance: 0
            },
            {
              begin: />/,
              relevance: 0,
              endsParent: true
            }
          ]
        }
      ]
    };
  }
  function yaml(hljs) {
    const LITERALS2 = "true false yes no null";
    const URI_CHARACTERS = "[\\w#;/?:@&=+$,.~*'()[\\]]+";
    const KEY = {
      className: "attr",
      variants: [
        // added brackets support and special char support
        { begin: /[\w*@][\w*@ :()\./-]*:(?=[ \t]|$)/ },
        {
          // double quoted keys - with brackets and special char support
          begin: /"[\w*@][\w*@ :()\./-]*":(?=[ \t]|$)/
        },
        {
          // single quoted keys - with brackets and special char support
          begin: /'[\w*@][\w*@ :()\./-]*':(?=[ \t]|$)/
        }
      ]
    };
    const TEMPLATE_VARIABLES = {
      className: "template-variable",
      variants: [
        {
          // jinja templates Ansible
          begin: /\{\{/,
          end: /\}\}/
        },
        {
          // Ruby i18n
          begin: /%\{/,
          end: /\}/
        }
      ]
    };
    const SINGLE_QUOTE_STRING = {
      className: "string",
      relevance: 0,
      begin: /'/,
      end: /'/,
      contains: [
        {
          match: /''/,
          scope: "char.escape",
          relevance: 0
        }
      ]
    };
    const STRING = {
      className: "string",
      relevance: 0,
      variants: [
        {
          begin: /"/,
          end: /"/
        },
        { begin: /\S+/ }
      ],
      contains: [
        hljs.BACKSLASH_ESCAPE,
        TEMPLATE_VARIABLES
      ]
    };
    const CONTAINER_STRING = hljs.inherit(STRING, { variants: [
      {
        begin: /'/,
        end: /'/,
        contains: [
          {
            begin: /''/,
            relevance: 0
          }
        ]
      },
      {
        begin: /"/,
        end: /"/
      },
      { begin: /[^\s,{}[\]]+/ }
    ] });
    const DATE_RE = "[0-9]{4}(-[0-9][0-9]){0,2}";
    const TIME_RE = "([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?";
    const FRACTION_RE = "(\\.[0-9]*)?";
    const ZONE_RE = "([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?";
    const TIMESTAMP = {
      className: "number",
      begin: "\\b" + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + "\\b"
    };
    const VALUE_CONTAINER = {
      end: ",",
      endsWithParent: true,
      excludeEnd: true,
      keywords: LITERALS2,
      relevance: 0
    };
    const OBJECT = {
      begin: /\{/,
      end: /\}/,
      contains: [VALUE_CONTAINER],
      illegal: "\\n",
      relevance: 0
    };
    const ARRAY = {
      begin: "\\[",
      end: "\\]",
      contains: [VALUE_CONTAINER],
      illegal: "\\n",
      relevance: 0
    };
    const MODES2 = [
      KEY,
      {
        className: "meta",
        begin: "^---\\s*$",
        relevance: 10
      },
      {
        // multi line string
        // Blocks start with a | or > followed by a newline
        //
        // Indentation of subsequent lines must be the same to
        // be considered part of the block
        className: "string",
        begin: "[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*"
      },
      {
        // Ruby/Rails erb
        begin: "<%[%=-]?",
        end: "[%-]?%>",
        subLanguage: "ruby",
        excludeBegin: true,
        excludeEnd: true,
        relevance: 0
      },
      {
        // named tags
        className: "type",
        begin: "!\\w+!" + URI_CHARACTERS
      },
      // https://yaml.org/spec/1.2/spec.html#id2784064
      {
        // verbatim tags
        className: "type",
        begin: "!<" + URI_CHARACTERS + ">"
      },
      {
        // primary tags
        className: "type",
        begin: "!" + URI_CHARACTERS
      },
      {
        // secondary tags
        className: "type",
        begin: "!!" + URI_CHARACTERS
      },
      {
        // fragment id &ref
        className: "meta",
        begin: "&" + hljs.UNDERSCORE_IDENT_RE + "$"
      },
      {
        // fragment reference *ref
        className: "meta",
        begin: "\\*" + hljs.UNDERSCORE_IDENT_RE + "$"
      },
      {
        // array listing
        className: "bullet",
        // TODO: remove |$ hack when we have proper look-ahead support
        begin: "-(?=[ ]|$)",
        relevance: 0
      },
      hljs.HASH_COMMENT_MODE,
      {
        beginKeywords: LITERALS2,
        keywords: { literal: LITERALS2 }
      },
      TIMESTAMP,
      // numbers are any valid C-style number that
      // sit isolated from other words
      {
        className: "number",
        begin: hljs.C_NUMBER_RE + "\\b",
        relevance: 0
      },
      OBJECT,
      ARRAY,
      SINGLE_QUOTE_STRING,
      STRING
    ];
    const VALUE_MODES = [...MODES2];
    VALUE_MODES.pop();
    VALUE_MODES.push(CONTAINER_STRING);
    VALUE_CONTAINER.contains = VALUE_MODES;
    return {
      name: "YAML",
      case_insensitive: true,
      aliases: ["yml"],
      contains: MODES2
    };
  }
  const grammars$1 = {
    arduino,
    bash,
    c,
    cpp,
    csharp,
    css,
    diff,
    go,
    graphql,
    ini,
    java,
    javascript: javascript$1,
    json,
    kotlin,
    less,
    lua,
    makefile,
    markdown,
    objectivec,
    perl,
    php,
    "php-template": phpTemplate,
    plaintext,
    python,
    "python-repl": pythonRepl,
    r,
    ruby,
    rust,
    scss,
    shell,
    sql,
    swift,
    typescript,
    vbnet,
    wasm,
    xml,
    yaml
  };
  const grammars = {
    ...grammars$1,
    "1c": _1c,
    abnf,
    accesslog,
    actionscript,
    ada,
    angelscript,
    apache,
    applescript,
    arcade,
    armasm,
    asciidoc,
    aspectj,
    autohotkey,
    autoit,
    avrasm,
    awk,
    axapta,
    basic,
    bnf,
    brainfuck,
    cal,
    capnproto,
    ceylon,
    clean,
    clojure,
    "clojure-repl": clojureRepl,
    cmake,
    coffeescript,
    coq,
    cos,
    crmsh,
    crystal,
    csp,
    d,
    dart,
    delphi,
    django,
    dns,
    dockerfile,
    dos,
    dsconfig,
    dts,
    dust,
    ebnf,
    elixir,
    elm,
    erb,
    erlang,
    "erlang-repl": erlangRepl,
    excel,
    fix,
    flix,
    fortran,
    fsharp,
    gams,
    gauss,
    gcode,
    gherkin,
    glsl,
    gml,
    golo,
    gradle,
    groovy,
    haml,
    handlebars,
    haskell,
    haxe,
    hsp,
    http,
    hy,
    inform7,
    irpf90,
    isbl,
    "jboss-cli": jbossCli,
    julia,
    "julia-repl": juliaRepl,
    lasso,
    latex,
    ldif,
    leaf,
    lisp,
    livecodeserver,
    livescript,
    llvm,
    lsl,
    mathematica,
    matlab,
    maxima,
    mel,
    mercury,
    mipsasm,
    mizar,
    mojolicious,
    monkey,
    moonscript,
    n1ql,
    nestedtext,
    nginx,
    nim,
    nix,
    "node-repl": nodeRepl,
    nsis,
    ocaml,
    openscad,
    oxygene,
    parser3,
    pf,
    pgsql,
    pony,
    powershell,
    processing,
    profile,
    prolog,
    properties,
    protobuf,
    puppet,
    purebasic,
    q,
    qml,
    reasonml,
    rib,
    roboconf,
    routeros,
    rsl,
    ruleslanguage,
    sas,
    scala,
    scheme,
    scilab,
    smali,
    smalltalk,
    sml,
    sqf,
    stan,
    stata,
    step21,
    stylus,
    subunit,
    taggerscript,
    tap,
    tcl,
    thrift,
    tp,
    twig,
    vala,
    vbscript,
    "vbscript-html": vbscriptHtml,
    verilog,
    vhdl,
    vim,
    wren,
    x86asm,
    xl,
    xquery,
    zephir
  };
  function deepFreeze(obj) {
    if (obj instanceof Map) {
      obj.clear = obj.delete = obj.set = function() {
        throw new Error("map is read-only");
      };
    } else if (obj instanceof Set) {
      obj.add = obj.clear = obj.delete = function() {
        throw new Error("set is read-only");
      };
    }
    Object.freeze(obj);
    Object.getOwnPropertyNames(obj).forEach((name) => {
      const prop2 = obj[name];
      const type = typeof prop2;
      if ((type === "object" || type === "function") && !Object.isFrozen(prop2)) {
        deepFreeze(prop2);
      }
    });
    return obj;
  }
  class Response {
    /**
     * @param {CompiledMode} mode
     */
    constructor(mode) {
      if (mode.data === void 0)
        mode.data = {};
      this.data = mode.data;
      this.isMatchIgnored = false;
    }
    ignoreMatch() {
      this.isMatchIgnored = true;
    }
  }
  function escapeHTML(value) {
    return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
  }
  function inherit$1(original, ...objects) {
    const result = /* @__PURE__ */ Object.create(null);
    for (const key in original) {
      result[key] = original[key];
    }
    objects.forEach(function(obj) {
      for (const key in obj) {
        result[key] = obj[key];
      }
    });
    return (
      /** @type {T} */
      result
    );
  }
  const SPAN_CLOSE = "</span>";
  const emitsWrappingTags = (node2) => {
    return !!node2.scope;
  };
  const scopeToCSSClass = (name, { prefix }) => {
    if (name.startsWith("language:")) {
      return name.replace("language:", "language-");
    }
    if (name.includes(".")) {
      const pieces = name.split(".");
      return [
        `${prefix}${pieces.shift()}`,
        ...pieces.map((x, i2) => `${x}${"_".repeat(i2 + 1)}`)
      ].join(" ");
    }
    return `${prefix}${name}`;
  };
  class HTMLRenderer {
    /**
     * Creates a new HTMLRenderer
     *
     * @param {Tree} parseTree - the parse tree (must support `walk` API)
     * @param {{classPrefix: string}} options
     */
    constructor(parseTree, options) {
      this.buffer = "";
      this.classPrefix = options.classPrefix;
      parseTree.walk(this);
    }
    /**
     * Adds texts to the output stream
     *
     * @param {string} text */
    addText(text) {
      this.buffer += escapeHTML(text);
    }
    /**
     * Adds a node open to the output stream (if needed)
     *
     * @param {Node} node */
    openNode(node2) {
      if (!emitsWrappingTags(node2))
        return;
      const className = scopeToCSSClass(
        node2.scope,
        { prefix: this.classPrefix }
      );
      this.span(className);
    }
    /**
     * Adds a node close to the output stream (if needed)
     *
     * @param {Node} node */
    closeNode(node2) {
      if (!emitsWrappingTags(node2))
        return;
      this.buffer += SPAN_CLOSE;
    }
    /**
     * returns the accumulated buffer
    */
    value() {
      return this.buffer;
    }
    // helpers
    /**
     * Builds a span element
     *
     * @param {string} className */
    span(className) {
      this.buffer += `<span class="${className}">`;
    }
  }
  const newNode = (opts = {}) => {
    const result = { children: [] };
    Object.assign(result, opts);
    return result;
  };
  class TokenTree {
    constructor() {
      this.rootNode = newNode();
      this.stack = [this.rootNode];
    }
    get top() {
      return this.stack[this.stack.length - 1];
    }
    get root() {
      return this.rootNode;
    }
    /** @param {Node} node */
    add(node2) {
      this.top.children.push(node2);
    }
    /** @param {string} scope */
    openNode(scope) {
      const node2 = newNode({ scope });
      this.add(node2);
      this.stack.push(node2);
    }
    closeNode() {
      if (this.stack.length > 1) {
        return this.stack.pop();
      }
      return void 0;
    }
    closeAllNodes() {
      while (this.closeNode())
        ;
    }
    toJSON() {
      return JSON.stringify(this.rootNode, null, 4);
    }
    /**
     * @typedef { import("./html_renderer").Renderer } Renderer
     * @param {Renderer} builder
     */
    walk(builder) {
      return this.constructor._walk(builder, this.rootNode);
    }
    /**
     * @param {Renderer} builder
     * @param {Node} node
     */
    static _walk(builder, node2) {
      if (typeof node2 === "string") {
        builder.addText(node2);
      } else if (node2.children) {
        builder.openNode(node2);
        node2.children.forEach((child) => this._walk(builder, child));
        builder.closeNode(node2);
      }
      return builder;
    }
    /**
     * @param {Node} node
     */
    static _collapse(node2) {
      if (typeof node2 === "string")
        return;
      if (!node2.children)
        return;
      if (node2.children.every((el) => typeof el === "string")) {
        node2.children = [node2.children.join("")];
      } else {
        node2.children.forEach((child) => {
          TokenTree._collapse(child);
        });
      }
    }
  }
  class TokenTreeEmitter extends TokenTree {
    /**
     * @param {*} options
     */
    constructor(options) {
      super();
      this.options = options;
    }
    /**
     * @param {string} text
     */
    addText(text) {
      if (text === "") {
        return;
      }
      this.add(text);
    }
    /** @param {string} scope */
    startScope(scope) {
      this.openNode(scope);
    }
    endScope() {
      this.closeNode();
    }
    /**
     * @param {Emitter & {root: DataNode}} emitter
     * @param {string} name
     */
    __addSublanguage(emitter, name) {
      const node2 = emitter.root;
      if (name)
        node2.scope = `language:${name}`;
      this.add(node2);
    }
    toHTML() {
      const renderer = new HTMLRenderer(this, this.options);
      return renderer.value();
    }
    finalize() {
      this.closeAllNodes();
      return true;
    }
  }
  function source(re) {
    if (!re)
      return null;
    if (typeof re === "string")
      return re;
    return re.source;
  }
  function lookahead(re) {
    return concat("(?=", re, ")");
  }
  function anyNumberOfTimes(re) {
    return concat("(?:", re, ")*");
  }
  function optional(re) {
    return concat("(?:", re, ")?");
  }
  function concat(...args) {
    const joined = args.map((x) => source(x)).join("");
    return joined;
  }
  function stripOptionsFromArgs(args) {
    const opts = args[args.length - 1];
    if (typeof opts === "object" && opts.constructor === Object) {
      args.splice(args.length - 1, 1);
      return opts;
    } else {
      return {};
    }
  }
  function either(...args) {
    const opts = stripOptionsFromArgs(args);
    const joined = "(" + (opts.capture ? "" : "?:") + args.map((x) => source(x)).join("|") + ")";
    return joined;
  }
  function countMatchGroups(re) {
    return new RegExp(re.toString() + "|").exec("").length - 1;
  }
  function startsWith(re, lexeme) {
    const match2 = re && re.exec(lexeme);
    return match2 && match2.index === 0;
  }
  const BACKREF_RE = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
  function _rewriteBackreferences(regexps, { joinWith }) {
    let numCaptures = 0;
    return regexps.map((regex) => {
      numCaptures += 1;
      const offset = numCaptures;
      let re = source(regex);
      let out = "";
      while (re.length > 0) {
        const match2 = BACKREF_RE.exec(re);
        if (!match2) {
          out += re;
          break;
        }
        out += re.substring(0, match2.index);
        re = re.substring(match2.index + match2[0].length);
        if (match2[0][0] === "\\" && match2[1]) {
          out += "\\" + String(Number(match2[1]) + offset);
        } else {
          out += match2[0];
          if (match2[0] === "(") {
            numCaptures++;
          }
        }
      }
      return out;
    }).map((re) => `(${re})`).join(joinWith);
  }
  const MATCH_NOTHING_RE = /\b\B/;
  const IDENT_RE = "[a-zA-Z]\\w*";
  const UNDERSCORE_IDENT_RE = "[a-zA-Z_]\\w*";
  const NUMBER_RE = "\\b\\d+(\\.\\d+)?";
  const C_NUMBER_RE = "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)";
  const BINARY_NUMBER_RE = "\\b(0b[01]+)";
  const RE_STARTERS_RE = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~";
  const SHEBANG = (opts = {}) => {
    const beginShebang = /^#![ ]*\//;
    if (opts.binary) {
      opts.begin = concat(
        beginShebang,
        /.*\b/,
        opts.binary,
        /\b.*/
      );
    }
    return inherit$1({
      scope: "meta",
      begin: beginShebang,
      end: /$/,
      relevance: 0,
      /** @type {ModeCallback} */
      "on:begin": (m, resp) => {
        if (m.index !== 0)
          resp.ignoreMatch();
      }
    }, opts);
  };
  const BACKSLASH_ESCAPE = {
    begin: "\\\\[\\s\\S]",
    relevance: 0
  };
  const APOS_STRING_MODE = {
    scope: "string",
    begin: "'",
    end: "'",
    illegal: "\\n",
    contains: [BACKSLASH_ESCAPE]
  };
  const QUOTE_STRING_MODE = {
    scope: "string",
    begin: '"',
    end: '"',
    illegal: "\\n",
    contains: [BACKSLASH_ESCAPE]
  };
  const PHRASAL_WORDS_MODE = {
    begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
  };
  const COMMENT = function(begin, end2, modeOptions = {}) {
    const mode = inherit$1(
      {
        scope: "comment",
        begin,
        end: end2,
        contains: []
      },
      modeOptions
    );
    mode.contains.push({
      scope: "doctag",
      // hack to avoid the space from being included. the space is necessary to
      // match here to prevent the plain text rule below from gobbling up doctags
      begin: "[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",
      end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
      excludeBegin: true,
      relevance: 0
    });
    const ENGLISH_WORD = either(
      // list of common 1 and 2 letter words in English
      "I",
      "a",
      "is",
      "so",
      "us",
      "to",
      "at",
      "if",
      "in",
      "it",
      "on",
      // note: this is not an exhaustive list of contractions, just popular ones
      /[A-Za-z]+['](d|ve|re|ll|t|s|n)/,
      // contractions - can't we'd they're let's, etc
      /[A-Za-z]+[-][a-z]+/,
      // `no-way`, etc.
      /[A-Za-z][a-z]{2,}/
      // allow capitalized words at beginning of sentences
    );
    mode.contains.push(
      {
        // TODO: how to include ", (, ) without breaking grammars that use these for
        // comment delimiters?
        // begin: /[ ]+([()"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()":]?([.][ ]|[ ]|\))){3}/
        // ---
        // this tries to find sequences of 3 english words in a row (without any
        // "programming" type syntax) this gives us a strong signal that we've
        // TRULY found a comment - vs perhaps scanning with the wrong language.
        // It's possible to find something that LOOKS like the start of the
        // comment - but then if there is no readable text - good chance it is a
        // false match and not a comment.
        //
        // for a visual example please see:
        // https://github.com/highlightjs/highlight.js/issues/2827
        begin: concat(
          /[ ]+/,
          // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */
          "(",
          ENGLISH_WORD,
          /[.]?[:]?([.][ ]|[ ])/,
          "){3}"
        )
        // look for 3 words in a row
      }
    );
    return mode;
  };
  const C_LINE_COMMENT_MODE = COMMENT("//", "$");
  const C_BLOCK_COMMENT_MODE = COMMENT("/\\*", "\\*/");
  const HASH_COMMENT_MODE = COMMENT("#", "$");
  const NUMBER_MODE = {
    scope: "number",
    begin: NUMBER_RE,
    relevance: 0
  };
  const C_NUMBER_MODE = {
    scope: "number",
    begin: C_NUMBER_RE,
    relevance: 0
  };
  const BINARY_NUMBER_MODE = {
    scope: "number",
    begin: BINARY_NUMBER_RE,
    relevance: 0
  };
  const REGEXP_MODE = {
    scope: "regexp",
    begin: /\/(?=[^/\n]*\/)/,
    end: /\/[gimuy]*/,
    contains: [
      BACKSLASH_ESCAPE,
      {
        begin: /\[/,
        end: /\]/,
        relevance: 0,
        contains: [BACKSLASH_ESCAPE]
      }
    ]
  };
  const TITLE_MODE = {
    scope: "title",
    begin: IDENT_RE,
    relevance: 0
  };
  const UNDERSCORE_TITLE_MODE = {
    scope: "title",
    begin: UNDERSCORE_IDENT_RE,
    relevance: 0
  };
  const METHOD_GUARD = {
    // excludes method names from keyword processing
    begin: "\\.\\s*" + UNDERSCORE_IDENT_RE,
    relevance: 0
  };
  const END_SAME_AS_BEGIN = function(mode) {
    return Object.assign(
      mode,
      {
        /** @type {ModeCallback} */
        "on:begin": (m, resp) => {
          resp.data._beginMatch = m[1];
        },
        /** @type {ModeCallback} */
        "on:end": (m, resp) => {
          if (resp.data._beginMatch !== m[1])
            resp.ignoreMatch();
        }
      }
    );
  };
  var MODES = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    APOS_STRING_MODE,
    BACKSLASH_ESCAPE,
    BINARY_NUMBER_MODE,
    BINARY_NUMBER_RE,
    COMMENT,
    C_BLOCK_COMMENT_MODE,
    C_LINE_COMMENT_MODE,
    C_NUMBER_MODE,
    C_NUMBER_RE,
    END_SAME_AS_BEGIN,
    HASH_COMMENT_MODE,
    IDENT_RE,
    MATCH_NOTHING_RE,
    METHOD_GUARD,
    NUMBER_MODE,
    NUMBER_RE,
    PHRASAL_WORDS_MODE,
    QUOTE_STRING_MODE,
    REGEXP_MODE,
    RE_STARTERS_RE,
    SHEBANG,
    TITLE_MODE,
    UNDERSCORE_IDENT_RE,
    UNDERSCORE_TITLE_MODE
  });
  function skipIfHasPrecedingDot(match2, response) {
    const before2 = match2.input[match2.index - 1];
    if (before2 === ".") {
      response.ignoreMatch();
    }
  }
  function scopeClassName(mode, _parent2) {
    if (mode.className !== void 0) {
      mode.scope = mode.className;
      delete mode.className;
    }
  }
  function beginKeywords(mode, parent2) {
    if (!parent2)
      return;
    if (!mode.beginKeywords)
      return;
    mode.begin = "\\b(" + mode.beginKeywords.split(" ").join("|") + ")(?!\\.)(?=\\b|\\s)";
    mode.__beforeBegin = skipIfHasPrecedingDot;
    mode.keywords = mode.keywords || mode.beginKeywords;
    delete mode.beginKeywords;
    if (mode.relevance === void 0)
      mode.relevance = 0;
  }
  function compileIllegal(mode, _parent2) {
    if (!Array.isArray(mode.illegal))
      return;
    mode.illegal = either(...mode.illegal);
  }
  function compileMatch(mode, _parent2) {
    if (!mode.match)
      return;
    if (mode.begin || mode.end)
      throw new Error("begin & end are not supported with match");
    mode.begin = mode.match;
    delete mode.match;
  }
  function compileRelevance(mode, _parent2) {
    if (mode.relevance === void 0)
      mode.relevance = 1;
  }
  const beforeMatchExt = (mode, parent2) => {
    if (!mode.beforeMatch)
      return;
    if (mode.starts)
      throw new Error("beforeMatch cannot be used with starts");
    const originalMode = Object.assign({}, mode);
    Object.keys(mode).forEach((key) => {
      delete mode[key];
    });
    mode.keywords = originalMode.keywords;
    mode.begin = concat(originalMode.beforeMatch, lookahead(originalMode.begin));
    mode.starts = {
      relevance: 0,
      contains: [
        Object.assign(originalMode, { endsParent: true })
      ]
    };
    mode.relevance = 0;
    delete originalMode.beforeMatch;
  };
  const COMMON_KEYWORDS = [
    "of",
    "and",
    "for",
    "in",
    "not",
    "or",
    "if",
    "then",
    "parent",
    // common variable name
    "list",
    // common variable name
    "value"
    // common variable name
  ];
  const DEFAULT_KEYWORD_SCOPE = "keyword";
  function compileKeywords(rawKeywords, caseInsensitive, scopeName = DEFAULT_KEYWORD_SCOPE) {
    const compiledKeywords = /* @__PURE__ */ Object.create(null);
    if (typeof rawKeywords === "string") {
      compileList(scopeName, rawKeywords.split(" "));
    } else if (Array.isArray(rawKeywords)) {
      compileList(scopeName, rawKeywords);
    } else {
      Object.keys(rawKeywords).forEach(function(scopeName2) {
        Object.assign(
          compiledKeywords,
          compileKeywords(rawKeywords[scopeName2], caseInsensitive, scopeName2)
        );
      });
    }
    return compiledKeywords;
    function compileList(scopeName2, keywordList) {
      if (caseInsensitive) {
        keywordList = keywordList.map((x) => x.toLowerCase());
      }
      keywordList.forEach(function(keyword) {
        const pair = keyword.split("|");
        compiledKeywords[pair[0]] = [scopeName2, scoreForKeyword(pair[0], pair[1])];
      });
    }
  }
  function scoreForKeyword(keyword, providedScore) {
    if (providedScore) {
      return Number(providedScore);
    }
    return commonKeyword(keyword) ? 0 : 1;
  }
  function commonKeyword(keyword) {
    return COMMON_KEYWORDS.includes(keyword.toLowerCase());
  }
  const seenDeprecations = {};
  const error = (message) => {
    console.error(message);
  };
  const warn = (message, ...args) => {
    console.log(`WARN: ${message}`, ...args);
  };
  const deprecated = (version2, message) => {
    if (seenDeprecations[`${version2}/${message}`])
      return;
    console.log(`Deprecated as of ${version2}. ${message}`);
    seenDeprecations[`${version2}/${message}`] = true;
  };
  const MultiClassError = new Error();
  function remapScopeNames(mode, regexes, { key }) {
    let offset = 0;
    const scopeNames = mode[key];
    const emit = {};
    const positions2 = {};
    for (let i2 = 1; i2 <= regexes.length; i2++) {
      positions2[i2 + offset] = scopeNames[i2];
      emit[i2 + offset] = true;
      offset += countMatchGroups(regexes[i2 - 1]);
    }
    mode[key] = positions2;
    mode[key]._emit = emit;
    mode[key]._multi = true;
  }
  function beginMultiClass(mode) {
    if (!Array.isArray(mode.begin))
      return;
    if (mode.skip || mode.excludeBegin || mode.returnBegin) {
      error("skip, excludeBegin, returnBegin not compatible with beginScope: {}");
      throw MultiClassError;
    }
    if (typeof mode.beginScope !== "object" || mode.beginScope === null) {
      error("beginScope must be object");
      throw MultiClassError;
    }
    remapScopeNames(mode, mode.begin, { key: "beginScope" });
    mode.begin = _rewriteBackreferences(mode.begin, { joinWith: "" });
  }
  function endMultiClass(mode) {
    if (!Array.isArray(mode.end))
      return;
    if (mode.skip || mode.excludeEnd || mode.returnEnd) {
      error("skip, excludeEnd, returnEnd not compatible with endScope: {}");
      throw MultiClassError;
    }
    if (typeof mode.endScope !== "object" || mode.endScope === null) {
      error("endScope must be object");
      throw MultiClassError;
    }
    remapScopeNames(mode, mode.end, { key: "endScope" });
    mode.end = _rewriteBackreferences(mode.end, { joinWith: "" });
  }
  function scopeSugar(mode) {
    if (mode.scope && typeof mode.scope === "object" && mode.scope !== null) {
      mode.beginScope = mode.scope;
      delete mode.scope;
    }
  }
  function MultiClass(mode) {
    scopeSugar(mode);
    if (typeof mode.beginScope === "string") {
      mode.beginScope = { _wrap: mode.beginScope };
    }
    if (typeof mode.endScope === "string") {
      mode.endScope = { _wrap: mode.endScope };
    }
    beginMultiClass(mode);
    endMultiClass(mode);
  }
  function compileLanguage(language) {
    function langRe(value, global2) {
      return new RegExp(
        source(value),
        "m" + (language.case_insensitive ? "i" : "") + (language.unicodeRegex ? "u" : "") + (global2 ? "g" : "")
      );
    }
    class MultiRegex {
      constructor() {
        this.matchIndexes = {};
        this.regexes = [];
        this.matchAt = 1;
        this.position = 0;
      }
      // @ts-ignore
      addRule(re, opts) {
        opts.position = this.position++;
        this.matchIndexes[this.matchAt] = opts;
        this.regexes.push([opts, re]);
        this.matchAt += countMatchGroups(re) + 1;
      }
      compile() {
        if (this.regexes.length === 0) {
          this.exec = () => null;
        }
        const terminators = this.regexes.map((el) => el[1]);
        this.matcherRe = langRe(_rewriteBackreferences(terminators, { joinWith: "|" }), true);
        this.lastIndex = 0;
      }
      /** @param {string} s */
      exec(s2) {
        this.matcherRe.lastIndex = this.lastIndex;
        const match2 = this.matcherRe.exec(s2);
        if (!match2) {
          return null;
        }
        const i2 = match2.findIndex((el, i3) => i3 > 0 && el !== void 0);
        const matchData = this.matchIndexes[i2];
        match2.splice(0, i2);
        return Object.assign(match2, matchData);
      }
    }
    class ResumableMultiRegex {
      constructor() {
        this.rules = [];
        this.multiRegexes = [];
        this.count = 0;
        this.lastIndex = 0;
        this.regexIndex = 0;
      }
      // @ts-ignore
      getMatcher(index) {
        if (this.multiRegexes[index])
          return this.multiRegexes[index];
        const matcher = new MultiRegex();
        this.rules.slice(index).forEach(([re, opts]) => matcher.addRule(re, opts));
        matcher.compile();
        this.multiRegexes[index] = matcher;
        return matcher;
      }
      resumingScanAtSamePosition() {
        return this.regexIndex !== 0;
      }
      considerAll() {
        this.regexIndex = 0;
      }
      // @ts-ignore
      addRule(re, opts) {
        this.rules.push([re, opts]);
        if (opts.type === "begin")
          this.count++;
      }
      /** @param {string} s */
      exec(s2) {
        const m = this.getMatcher(this.regexIndex);
        m.lastIndex = this.lastIndex;
        let result = m.exec(s2);
        if (this.resumingScanAtSamePosition()) {
          if (result && result.index === this.lastIndex)
            ;
          else {
            const m2 = this.getMatcher(0);
            m2.lastIndex = this.lastIndex + 1;
            result = m2.exec(s2);
          }
        }
        if (result) {
          this.regexIndex += result.position + 1;
          if (this.regexIndex === this.count) {
            this.considerAll();
          }
        }
        return result;
      }
    }
    function buildModeRegex(mode) {
      const mm = new ResumableMultiRegex();
      mode.contains.forEach((term) => mm.addRule(term.begin, { rule: term, type: "begin" }));
      if (mode.terminatorEnd) {
        mm.addRule(mode.terminatorEnd, { type: "end" });
      }
      if (mode.illegal) {
        mm.addRule(mode.illegal, { type: "illegal" });
      }
      return mm;
    }
    function compileMode(mode, parent2) {
      const cmode = (
        /** @type CompiledMode */
        mode
      );
      if (mode.isCompiled)
        return cmode;
      [
        scopeClassName,
        // do this early so compiler extensions generally don't have to worry about
        // the distinction between match/begin
        compileMatch,
        MultiClass,
        beforeMatchExt
      ].forEach((ext) => ext(mode, parent2));
      language.compilerExtensions.forEach((ext) => ext(mode, parent2));
      mode.__beforeBegin = null;
      [
        beginKeywords,
        // do this later so compiler extensions that come earlier have access to the
        // raw array if they wanted to perhaps manipulate it, etc.
        compileIllegal,
        // default to 1 relevance if not specified
        compileRelevance
      ].forEach((ext) => ext(mode, parent2));
      mode.isCompiled = true;
      let keywordPattern = null;
      if (typeof mode.keywords === "object" && mode.keywords.$pattern) {
        mode.keywords = Object.assign({}, mode.keywords);
        keywordPattern = mode.keywords.$pattern;
        delete mode.keywords.$pattern;
      }
      keywordPattern = keywordPattern || /\w+/;
      if (mode.keywords) {
        mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);
      }
      cmode.keywordPatternRe = langRe(keywordPattern, true);
      if (parent2) {
        if (!mode.begin)
          mode.begin = /\B|\b/;
        cmode.beginRe = langRe(cmode.begin);
        if (!mode.end && !mode.endsWithParent)
          mode.end = /\B|\b/;
        if (mode.end)
          cmode.endRe = langRe(cmode.end);
        cmode.terminatorEnd = source(cmode.end) || "";
        if (mode.endsWithParent && parent2.terminatorEnd) {
          cmode.terminatorEnd += (mode.end ? "|" : "") + parent2.terminatorEnd;
        }
      }
      if (mode.illegal)
        cmode.illegalRe = langRe(
          /** @type {RegExp | string} */
          mode.illegal
        );
      if (!mode.contains)
        mode.contains = [];
      mode.contains = [].concat(...mode.contains.map(function(c2) {
        return expandOrCloneMode(c2 === "self" ? mode : c2);
      }));
      mode.contains.forEach(function(c2) {
        compileMode(
          /** @type Mode */
          c2,
          cmode
        );
      });
      if (mode.starts) {
        compileMode(mode.starts, parent2);
      }
      cmode.matcher = buildModeRegex(cmode);
      return cmode;
    }
    if (!language.compilerExtensions)
      language.compilerExtensions = [];
    if (language.contains && language.contains.includes("self")) {
      throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
    }
    language.classNameAliases = inherit$1(language.classNameAliases || {});
    return compileMode(
      /** @type Mode */
      language
    );
  }
  function dependencyOnParent(mode) {
    if (!mode)
      return false;
    return mode.endsWithParent || dependencyOnParent(mode.starts);
  }
  function expandOrCloneMode(mode) {
    if (mode.variants && !mode.cachedVariants) {
      mode.cachedVariants = mode.variants.map(function(variant) {
        return inherit$1(mode, { variants: null }, variant);
      });
    }
    if (mode.cachedVariants) {
      return mode.cachedVariants;
    }
    if (dependencyOnParent(mode)) {
      return inherit$1(mode, { starts: mode.starts ? inherit$1(mode.starts) : null });
    }
    if (Object.isFrozen(mode)) {
      return inherit$1(mode);
    }
    return mode;
  }
  var version = "11.11.1";
  class HTMLInjectionError extends Error {
    constructor(reason, html) {
      super(reason);
      this.name = "HTMLInjectionError";
      this.html = html;
    }
  }
  const escape = escapeHTML;
  const inherit = inherit$1;
  const NO_MATCH = Symbol("nomatch");
  const MAX_KEYWORD_HITS = 7;
  const HLJS = function(hljs) {
    const languages2 = /* @__PURE__ */ Object.create(null);
    const aliases = /* @__PURE__ */ Object.create(null);
    const plugins2 = [];
    let SAFE_MODE = true;
    const LANGUAGE_NOT_FOUND = "Could not find the language '{}', did you forget to load/include a language module?";
    const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: "Plain text", contains: [] };
    let options = {
      ignoreUnescapedHTML: false,
      throwUnescapedHTML: false,
      noHighlightRe: /^(no-?highlight)$/i,
      languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
      classPrefix: "hljs-",
      cssSelector: "pre code",
      languages: null,
      // beta configuration options, subject to change, welcome to discuss
      // https://github.com/highlightjs/highlight.js/issues/1086
      __emitter: TokenTreeEmitter
    };
    function shouldNotHighlight(languageName) {
      return options.noHighlightRe.test(languageName);
    }
    function blockLanguage(block2) {
      let classes = block2.className + " ";
      classes += block2.parentNode ? block2.parentNode.className : "";
      const match2 = options.languageDetectRe.exec(classes);
      if (match2) {
        const language = getLanguage(match2[1]);
        if (!language) {
          warn(LANGUAGE_NOT_FOUND.replace("{}", match2[1]));
          warn("Falling back to no-highlight mode for this block.", block2);
        }
        return language ? match2[1] : "no-highlight";
      }
      return classes.split(/\s+/).find((_class) => shouldNotHighlight(_class) || getLanguage(_class));
    }
    function highlight2(codeOrLanguageName, optionsOrCode, ignoreIllegals) {
      let code = "";
      let languageName = "";
      if (typeof optionsOrCode === "object") {
        code = codeOrLanguageName;
        ignoreIllegals = optionsOrCode.ignoreIllegals;
        languageName = optionsOrCode.language;
      } else {
        deprecated("10.7.0", "highlight(lang, code, ...args) has been deprecated.");
        deprecated("10.7.0", "Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277");
        languageName = codeOrLanguageName;
        code = optionsOrCode;
      }
      if (ignoreIllegals === void 0) {
        ignoreIllegals = true;
      }
      const context = {
        code,
        language: languageName
      };
      fire("before:highlight", context);
      const result = context.result ? context.result : _highlight(context.language, context.code, ignoreIllegals);
      result.code = context.code;
      fire("after:highlight", result);
      return result;
    }
    function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {
      const keywordHits = /* @__PURE__ */ Object.create(null);
      function keywordData(mode, matchText) {
        return mode.keywords[matchText];
      }
      function processKeywords() {
        if (!top.keywords) {
          emitter.addText(modeBuffer);
          return;
        }
        let lastIndex = 0;
        top.keywordPatternRe.lastIndex = 0;
        let match2 = top.keywordPatternRe.exec(modeBuffer);
        let buf = "";
        while (match2) {
          buf += modeBuffer.substring(lastIndex, match2.index);
          const word = language.case_insensitive ? match2[0].toLowerCase() : match2[0];
          const data = keywordData(top, word);
          if (data) {
            const [kind, keywordRelevance] = data;
            emitter.addText(buf);
            buf = "";
            keywordHits[word] = (keywordHits[word] || 0) + 1;
            if (keywordHits[word] <= MAX_KEYWORD_HITS)
              relevance += keywordRelevance;
            if (kind.startsWith("_")) {
              buf += match2[0];
            } else {
              const cssClass = language.classNameAliases[kind] || kind;
              emitKeyword(match2[0], cssClass);
            }
          } else {
            buf += match2[0];
          }
          lastIndex = top.keywordPatternRe.lastIndex;
          match2 = top.keywordPatternRe.exec(modeBuffer);
        }
        buf += modeBuffer.substring(lastIndex);
        emitter.addText(buf);
      }
      function processSubLanguage() {
        if (modeBuffer === "")
          return;
        let result2 = null;
        if (typeof top.subLanguage === "string") {
          if (!languages2[top.subLanguage]) {
            emitter.addText(modeBuffer);
            return;
          }
          result2 = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);
          continuations[top.subLanguage] = /** @type {CompiledMode} */
          result2._top;
        } else {
          result2 = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);
        }
        if (top.relevance > 0) {
          relevance += result2.relevance;
        }
        emitter.__addSublanguage(result2._emitter, result2.language);
      }
      function processBuffer() {
        if (top.subLanguage != null) {
          processSubLanguage();
        } else {
          processKeywords();
        }
        modeBuffer = "";
      }
      function emitKeyword(keyword, scope) {
        if (keyword === "")
          return;
        emitter.startScope(scope);
        emitter.addText(keyword);
        emitter.endScope();
      }
      function emitMultiClass(scope, match2) {
        let i2 = 1;
        const max2 = match2.length - 1;
        while (i2 <= max2) {
          if (!scope._emit[i2]) {
            i2++;
            continue;
          }
          const klass = language.classNameAliases[scope[i2]] || scope[i2];
          const text = match2[i2];
          if (klass) {
            emitKeyword(text, klass);
          } else {
            modeBuffer = text;
            processKeywords();
            modeBuffer = "";
          }
          i2++;
        }
      }
      function startNewMode(mode, match2) {
        if (mode.scope && typeof mode.scope === "string") {
          emitter.openNode(language.classNameAliases[mode.scope] || mode.scope);
        }
        if (mode.beginScope) {
          if (mode.beginScope._wrap) {
            emitKeyword(modeBuffer, language.classNameAliases[mode.beginScope._wrap] || mode.beginScope._wrap);
            modeBuffer = "";
          } else if (mode.beginScope._multi) {
            emitMultiClass(mode.beginScope, match2);
            modeBuffer = "";
          }
        }
        top = Object.create(mode, { parent: { value: top } });
        return top;
      }
      function endOfMode(mode, match2, matchPlusRemainder) {
        let matched = startsWith(mode.endRe, matchPlusRemainder);
        if (matched) {
          if (mode["on:end"]) {
            const resp = new Response(mode);
            mode["on:end"](match2, resp);
            if (resp.isMatchIgnored)
              matched = false;
          }
          if (matched) {
            while (mode.endsParent && mode.parent) {
              mode = mode.parent;
            }
            return mode;
          }
        }
        if (mode.endsWithParent) {
          return endOfMode(mode.parent, match2, matchPlusRemainder);
        }
      }
      function doIgnore(lexeme) {
        if (top.matcher.regexIndex === 0) {
          modeBuffer += lexeme[0];
          return 1;
        } else {
          resumeScanAtSamePosition = true;
          return 0;
        }
      }
      function doBeginMatch(match2) {
        const lexeme = match2[0];
        const newMode = match2.rule;
        const resp = new Response(newMode);
        const beforeCallbacks = [newMode.__beforeBegin, newMode["on:begin"]];
        for (const cb of beforeCallbacks) {
          if (!cb)
            continue;
          cb(match2, resp);
          if (resp.isMatchIgnored)
            return doIgnore(lexeme);
        }
        if (newMode.skip) {
          modeBuffer += lexeme;
        } else {
          if (newMode.excludeBegin) {
            modeBuffer += lexeme;
          }
          processBuffer();
          if (!newMode.returnBegin && !newMode.excludeBegin) {
            modeBuffer = lexeme;
          }
        }
        startNewMode(newMode, match2);
        return newMode.returnBegin ? 0 : lexeme.length;
      }
      function doEndMatch(match2) {
        const lexeme = match2[0];
        const matchPlusRemainder = codeToHighlight.substring(match2.index);
        const endMode = endOfMode(top, match2, matchPlusRemainder);
        if (!endMode) {
          return NO_MATCH;
        }
        const origin = top;
        if (top.endScope && top.endScope._wrap) {
          processBuffer();
          emitKeyword(lexeme, top.endScope._wrap);
        } else if (top.endScope && top.endScope._multi) {
          processBuffer();
          emitMultiClass(top.endScope, match2);
        } else if (origin.skip) {
          modeBuffer += lexeme;
        } else {
          if (!(origin.returnEnd || origin.excludeEnd)) {
            modeBuffer += lexeme;
          }
          processBuffer();
          if (origin.excludeEnd) {
            modeBuffer = lexeme;
          }
        }
        do {
          if (top.scope) {
            emitter.closeNode();
          }
          if (!top.skip && !top.subLanguage) {
            relevance += top.relevance;
          }
          top = top.parent;
        } while (top !== endMode.parent);
        if (endMode.starts) {
          startNewMode(endMode.starts, match2);
        }
        return origin.returnEnd ? 0 : lexeme.length;
      }
      function processContinuations() {
        const list = [];
        for (let current2 = top; current2 !== language; current2 = current2.parent) {
          if (current2.scope) {
            list.unshift(current2.scope);
          }
        }
        list.forEach((item) => emitter.openNode(item));
      }
      let lastMatch = {};
      function processLexeme(textBeforeMatch, match2) {
        const lexeme = match2 && match2[0];
        modeBuffer += textBeforeMatch;
        if (lexeme == null) {
          processBuffer();
          return 0;
        }
        if (lastMatch.type === "begin" && match2.type === "end" && lastMatch.index === match2.index && lexeme === "") {
          modeBuffer += codeToHighlight.slice(match2.index, match2.index + 1);
          if (!SAFE_MODE) {
            const err = new Error(`0 width match regex (${languageName})`);
            err.languageName = languageName;
            err.badRule = lastMatch.rule;
            throw err;
          }
          return 1;
        }
        lastMatch = match2;
        if (match2.type === "begin") {
          return doBeginMatch(match2);
        } else if (match2.type === "illegal" && !ignoreIllegals) {
          const err = new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.scope || "<unnamed>") + '"');
          err.mode = top;
          throw err;
        } else if (match2.type === "end") {
          const processed = doEndMatch(match2);
          if (processed !== NO_MATCH) {
            return processed;
          }
        }
        if (match2.type === "illegal" && lexeme === "") {
          modeBuffer += "\n";
          return 1;
        }
        if (iterations > 1e5 && iterations > match2.index * 3) {
          const err = new Error("potential infinite loop, way more iterations than matches");
          throw err;
        }
        modeBuffer += lexeme;
        return lexeme.length;
      }
      const language = getLanguage(languageName);
      if (!language) {
        error(LANGUAGE_NOT_FOUND.replace("{}", languageName));
        throw new Error('Unknown language: "' + languageName + '"');
      }
      const md = compileLanguage(language);
      let result = "";
      let top = continuation || md;
      const continuations = {};
      const emitter = new options.__emitter(options);
      processContinuations();
      let modeBuffer = "";
      let relevance = 0;
      let index = 0;
      let iterations = 0;
      let resumeScanAtSamePosition = false;
      try {
        if (!language.__emitTokens) {
          top.matcher.considerAll();
          for (; ; ) {
            iterations++;
            if (resumeScanAtSamePosition) {
              resumeScanAtSamePosition = false;
            } else {
              top.matcher.considerAll();
            }
            top.matcher.lastIndex = index;
            const match2 = top.matcher.exec(codeToHighlight);
            if (!match2)
              break;
            const beforeMatch = codeToHighlight.substring(index, match2.index);
            const processedCount = processLexeme(beforeMatch, match2);
            index = match2.index + processedCount;
          }
          processLexeme(codeToHighlight.substring(index));
        } else {
          language.__emitTokens(codeToHighlight, emitter);
        }
        emitter.finalize();
        result = emitter.toHTML();
        return {
          language: languageName,
          value: result,
          relevance,
          illegal: false,
          _emitter: emitter,
          _top: top
        };
      } catch (err) {
        if (err.message && err.message.includes("Illegal")) {
          return {
            language: languageName,
            value: escape(codeToHighlight),
            illegal: true,
            relevance: 0,
            _illegalBy: {
              message: err.message,
              index,
              context: codeToHighlight.slice(index - 100, index + 100),
              mode: err.mode,
              resultSoFar: result
            },
            _emitter: emitter
          };
        } else if (SAFE_MODE) {
          return {
            language: languageName,
            value: escape(codeToHighlight),
            illegal: false,
            relevance: 0,
            errorRaised: err,
            _emitter: emitter,
            _top: top
          };
        } else {
          throw err;
        }
      }
    }
    function justTextHighlightResult(code) {
      const result = {
        value: escape(code),
        illegal: false,
        relevance: 0,
        _top: PLAINTEXT_LANGUAGE,
        _emitter: new options.__emitter(options)
      };
      result._emitter.addText(code);
      return result;
    }
    function highlightAuto(code, languageSubset) {
      languageSubset = languageSubset || options.languages || Object.keys(languages2);
      const plaintext2 = justTextHighlightResult(code);
      const results = languageSubset.filter(getLanguage).filter(autoDetection).map(
        (name) => _highlight(name, code, false)
      );
      results.unshift(plaintext2);
      const sorted = results.sort((a2, b) => {
        if (a2.relevance !== b.relevance)
          return b.relevance - a2.relevance;
        if (a2.language && b.language) {
          if (getLanguage(a2.language).supersetOf === b.language) {
            return 1;
          } else if (getLanguage(b.language).supersetOf === a2.language) {
            return -1;
          }
        }
        return 0;
      });
      const [best, secondBest] = sorted;
      const result = best;
      result.secondBest = secondBest;
      return result;
    }
    function updateClassName(element, currentLang, resultLang) {
      const language = currentLang && aliases[currentLang] || resultLang;
      element.classList.add("hljs");
      element.classList.add(`language-${language}`);
    }
    function highlightElement(element) {
      let node2 = null;
      const language = blockLanguage(element);
      if (shouldNotHighlight(language))
        return;
      fire(
        "before:highlightElement",
        { el: element, language }
      );
      if (element.dataset.highlighted) {
        console.log("Element previously highlighted. To highlight again, first unset `dataset.highlighted`.", element);
        return;
      }
      if (element.children.length > 0) {
        if (!options.ignoreUnescapedHTML) {
          console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk.");
          console.warn("https://github.com/highlightjs/highlight.js/wiki/security");
          console.warn("The element with unescaped HTML:");
          console.warn(element);
        }
        if (options.throwUnescapedHTML) {
          const err = new HTMLInjectionError(
            "One of your code blocks includes unescaped HTML.",
            element.innerHTML
          );
          throw err;
        }
      }
      node2 = element;
      const text = node2.textContent;
      const result = language ? highlight2(text, { language, ignoreIllegals: true }) : highlightAuto(text);
      element.innerHTML = result.value;
      element.dataset.highlighted = "yes";
      updateClassName(element, language, result.language);
      element.result = {
        language: result.language,
        // TODO: remove with version 11.0
        re: result.relevance,
        relevance: result.relevance
      };
      if (result.secondBest) {
        element.secondBest = {
          language: result.secondBest.language,
          relevance: result.secondBest.relevance
        };
      }
      fire("after:highlightElement", { el: element, result, text });
    }
    function configure(userOptions) {
      options = inherit(options, userOptions);
    }
    const initHighlighting = () => {
      highlightAll();
      deprecated("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
    };
    function initHighlightingOnLoad() {
      highlightAll();
      deprecated("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
    }
    let wantsHighlight = false;
    function highlightAll() {
      function boot() {
        highlightAll();
      }
      if (document.readyState === "loading") {
        if (!wantsHighlight) {
          window.addEventListener("DOMContentLoaded", boot, false);
        }
        wantsHighlight = true;
        return;
      }
      const blocks2 = document.querySelectorAll(options.cssSelector);
      blocks2.forEach(highlightElement);
    }
    function registerLanguage(languageName, languageDefinition) {
      let lang = null;
      try {
        lang = languageDefinition(hljs);
      } catch (error$1) {
        error("Language definition for '{}' could not be registered.".replace("{}", languageName));
        if (!SAFE_MODE) {
          throw error$1;
        } else {
          error(error$1);
        }
        lang = PLAINTEXT_LANGUAGE;
      }
      if (!lang.name)
        lang.name = languageName;
      languages2[languageName] = lang;
      lang.rawDefinition = languageDefinition.bind(null, hljs);
      if (lang.aliases) {
        registerAliases(lang.aliases, { languageName });
      }
    }
    function unregisterLanguage(languageName) {
      delete languages2[languageName];
      for (const alias of Object.keys(aliases)) {
        if (aliases[alias] === languageName) {
          delete aliases[alias];
        }
      }
    }
    function listLanguages() {
      return Object.keys(languages2);
    }
    function getLanguage(name) {
      name = (name || "").toLowerCase();
      return languages2[name] || languages2[aliases[name]];
    }
    function registerAliases(aliasList, { languageName }) {
      if (typeof aliasList === "string") {
        aliasList = [aliasList];
      }
      aliasList.forEach((alias) => {
        aliases[alias.toLowerCase()] = languageName;
      });
    }
    function autoDetection(name) {
      const lang = getLanguage(name);
      return lang && !lang.disableAutodetect;
    }
    function upgradePluginAPI(plugin) {
      if (plugin["before:highlightBlock"] && !plugin["before:highlightElement"]) {
        plugin["before:highlightElement"] = (data) => {
          plugin["before:highlightBlock"](
            Object.assign({ block: data.el }, data)
          );
        };
      }
      if (plugin["after:highlightBlock"] && !plugin["after:highlightElement"]) {
        plugin["after:highlightElement"] = (data) => {
          plugin["after:highlightBlock"](
            Object.assign({ block: data.el }, data)
          );
        };
      }
    }
    function addPlugin(plugin) {
      upgradePluginAPI(plugin);
      plugins2.push(plugin);
    }
    function removePlugin(plugin) {
      const index = plugins2.indexOf(plugin);
      if (index !== -1) {
        plugins2.splice(index, 1);
      }
    }
    function fire(event, args) {
      const cb = event;
      plugins2.forEach(function(plugin) {
        if (plugin[cb]) {
          plugin[cb](args);
        }
      });
    }
    function deprecateHighlightBlock(el) {
      deprecated("10.7.0", "highlightBlock will be removed entirely in v12.0");
      deprecated("10.7.0", "Please use highlightElement now.");
      return highlightElement(el);
    }
    Object.assign(hljs, {
      highlight: highlight2,
      highlightAuto,
      highlightAll,
      highlightElement,
      // TODO: Remove with v12 API
      highlightBlock: deprecateHighlightBlock,
      configure,
      initHighlighting,
      initHighlightingOnLoad,
      registerLanguage,
      unregisterLanguage,
      listLanguages,
      getLanguage,
      registerAliases,
      autoDetection,
      inherit,
      addPlugin,
      removePlugin
    });
    hljs.debugMode = function() {
      SAFE_MODE = false;
    };
    hljs.safeMode = function() {
      SAFE_MODE = true;
    };
    hljs.versionString = version;
    hljs.regex = {
      concat,
      lookahead,
      either,
      optional,
      anyNumberOfTimes
    };
    for (const key in MODES) {
      if (typeof MODES[key] === "object") {
        deepFreeze(MODES[key]);
      }
    }
    Object.assign(hljs, MODES);
    return hljs;
  };
  const highlight = HLJS({});
  highlight.newInstance = () => HLJS({});
  var core = highlight;
  highlight.HighlightJS = highlight;
  highlight.default = highlight;
  const HighlightJS = /* @__PURE__ */ getDefaultExportFromCjs(core);
  const emptyOptions = {};
  const defaultPrefix = "hljs-";
  function createLowlight(grammars2) {
    const high = HighlightJS.newInstance();
    if (grammars2) {
      register(grammars2);
    }
    return {
      highlight: highlight2,
      highlightAuto,
      listLanguages,
      register,
      registerAlias,
      registered
    };
    function highlight2(language, value, options) {
      const settings = options || emptyOptions;
      const prefix = typeof settings.prefix === "string" ? settings.prefix : defaultPrefix;
      if (!high.getLanguage(language)) {
        throw new Error("Unknown language: `" + language + "` is not registered");
      }
      high.configure({ __emitter: HastEmitter, classPrefix: prefix });
      const result = (
        /** @type {HighlightResult & {_emitter: HastEmitter}} */
        high.highlight(value, { ignoreIllegals: true, language })
      );
      if (result.errorRaised) {
        throw new Error("Could not highlight with `Highlight.js`", {
          cause: result.errorRaised
        });
      }
      const root2 = result._emitter.root;
      const data = (
        /** @type {RootData} */
        root2.data
      );
      data.language = result.language;
      data.relevance = result.relevance;
      return root2;
    }
    function highlightAuto(value, options) {
      const settings = options || emptyOptions;
      const subset = settings.subset || listLanguages();
      let index = -1;
      let relevance = 0;
      let result;
      while (++index < subset.length) {
        const name = subset[index];
        if (!high.getLanguage(name))
          continue;
        const current2 = highlight2(name, value, options);
        if (current2.data && current2.data.relevance !== void 0 && current2.data.relevance > relevance) {
          relevance = current2.data.relevance;
          result = current2;
        }
      }
      return result || {
        type: "root",
        children: [],
        data: { language: void 0, relevance }
      };
    }
    function listLanguages() {
      return high.listLanguages();
    }
    function register(grammarsOrName, grammar) {
      if (typeof grammarsOrName === "string") {
        high.registerLanguage(grammarsOrName, grammar);
      } else {
        let name;
        for (name in grammarsOrName) {
          if (Object.hasOwn(grammarsOrName, name)) {
            high.registerLanguage(name, grammarsOrName[name]);
          }
        }
      }
    }
    function registerAlias(aliasesOrName, alias) {
      if (typeof aliasesOrName === "string") {
        high.registerAliases(
          // Note: copy needed because hljs doesn’t accept readonly arrays yet.
          typeof alias === "string" ? alias : [...alias],
          { languageName: aliasesOrName }
        );
      } else {
        let key;
        for (key in aliasesOrName) {
          if (Object.hasOwn(aliasesOrName, key)) {
            const aliases = aliasesOrName[key];
            high.registerAliases(
              // Note: copy needed because hljs doesn’t accept readonly arrays yet.
              typeof aliases === "string" ? aliases : [...aliases],
              { languageName: key }
            );
          }
        }
      }
    }
    function registered(aliasOrName) {
      return Boolean(high.getLanguage(aliasOrName));
    }
  }
  class HastEmitter {
    /**
     * @param {Readonly<HljsOptions>} options
     *   Configuration.
     * @returns
     *   Instance.
     */
    constructor(options) {
      this.options = options;
      this.root = {
        type: "root",
        children: [],
        data: { language: void 0, relevance: 0 }
      };
      this.stack = [this.root];
    }
    /**
     * @param {string} value
     *   Text to add.
     * @returns {undefined}
     *   Nothing.
     *
     */
    addText(value) {
      if (value === "")
        return;
      const current2 = this.stack[this.stack.length - 1];
      const tail = current2.children[current2.children.length - 1];
      if (tail && tail.type === "text") {
        tail.value += value;
      } else {
        current2.children.push({ type: "text", value });
      }
    }
    /**
     *
     * @param {unknown} rawName
     *   Name to add.
     * @returns {undefined}
     *   Nothing.
     */
    startScope(rawName) {
      this.openNode(String(rawName));
    }
    /**
     * @returns {undefined}
     *   Nothing.
     */
    endScope() {
      this.closeNode();
    }
    /**
     * @param {HastEmitter} other
     *   Other emitter.
     * @param {string} name
     *   Name of the sublanguage.
     * @returns {undefined}
     *   Nothing.
     */
    __addSublanguage(other, name) {
      const current2 = this.stack[this.stack.length - 1];
      const results = (
        /** @type {Array<ElementContent>} */
        other.root.children
      );
      if (name) {
        current2.children.push({
          type: "element",
          tagName: "span",
          properties: { className: [name] },
          children: results
        });
      } else {
        current2.children.push(...results);
      }
    }
    /**
     * @param {string} name
     *   Name to add.
     * @returns {undefined}
     *   Nothing.
     */
    openNode(name) {
      const self2 = this;
      const className = name.split(".").map(function(d2, i2) {
        return i2 ? d2 + "_".repeat(i2) : self2.options.classPrefix + d2;
      });
      const current2 = this.stack[this.stack.length - 1];
      const child = {
        type: "element",
        tagName: "span",
        properties: { className },
        children: []
      };
      current2.children.push(child);
      this.stack.push(child);
    }
    /**
     * @returns {undefined}
     *   Nothing.
     */
    closeNode() {
      this.stack.pop();
    }
    /**
     * @returns {undefined}
     *   Nothing.
     */
    finalize() {
    }
    /**
     * @returns {string}
     *   Nothing.
     */
    toHTML() {
      return "";
    }
  }
  const createHTMLBlockPlugin = createPlatePlugin({
    key: "html",
    node: {
      isElement: true,
      isVoid: true,
      isInline: false
    }
  });
  const createHTMLInlinePlugin = createPlatePlugin({
    key: "html_inline",
    node: {
      isElement: true,
      isVoid: true,
      isInline: true
    }
  });
  const KEY_BLOCKQUOTE_ENTER_BREAK = "blockquote-enter-break";
  const createBlockquoteEnterBreakPlugin = createPlatePlugin({
    key: KEY_BLOCKQUOTE_ENTER_BREAK,
    handlers: {
      onKeyDown: ({ editor, event }) => {
        var _a2;
        if (event.key !== "Enter")
          return;
        const blockquoteEntry = editor.api.above({
          match: { type: BlockquotePlugin.key }
        });
        if (!blockquoteEntry)
          return;
        event.preventDefault();
        const cursorPosition = (_a2 = editor.selection) == null ? void 0 : _a2.focus;
        if (!cursorPosition)
          return;
        editor.tf.insertNodes(
          [
            { type: ELEMENT_BREAK, children: [{ text: "" }] },
            { type: "text", text: "" }
          ],
          {
            at: { path: cursorPosition.path, offset: cursorPosition.offset },
            select: true
          }
        );
      }
    }
  });
  const ELEMENT_BREAK = "break";
  const createBreakPlugin = createPlatePlugin({
    key: ELEMENT_BREAK,
    node: {
      isElement: true,
      isVoid: true,
      isInline: true,
      component: () => {
        return /* @__PURE__ */ React.createElement("br", null);
      }
    }
  });
  [
    plateHeading.HEADING_KEYS.h1,
    plateHeading.HEADING_KEYS.h2,
    plateHeading.HEADING_KEYS.h3,
    plateHeading.HEADING_KEYS.h4,
    plateHeading.HEADING_KEYS.h5,
    plateHeading.HEADING_KEYS.h6,
    ParagraphPlugin.key
  ];
  const resetBlockTypesCommonRule = {
    defaultType: ParagraphPlugin.key,
    types: [...plateHeading.HEADING_LEVELS, BlockquotePlugin.key]
  };
  const resetBlockTypesCodeBlockRule = {
    types: [CodeBlockPlugin.key],
    defaultType: ParagraphPlugin.key,
    onReset: plateCodeBlock.unwrapCodeBlock
  };
  const viewPlugins = [
    BasicMarksPlugin,
    UnderlinePlugin,
    HeadingPlugin.configure({ options: { levels: 6 } }),
    ParagraphPlugin,
    CodeBlockPlugin.configure({
      options: { lowlight: createLowlight(grammars) }
    }),
    BlockquotePlugin
  ];
  const CorrectNodeBehaviorPlugin = plate.createSlatePlugin({
    key: "WITH_CORRECT_NODE_BEHAVIOR"
  });
  const editorPlugins = [
    createMdxBlockPlugin,
    createMdxInlinePlugin,
    createImgPlugin,
    createHTMLBlockPlugin,
    createHTMLInlinePlugin,
    createBlockquoteEnterBreakPlugin,
    createInvalidMarkdownPlugin,
    CorrectNodeBehaviorPlugin,
    LinkPlugin.configure({
      options: {
        // Custom validation function to allow relative links, e.g., /about
        isUrl: (url) => isUrl(url)
      },
      render: { afterEditable: () => /* @__PURE__ */ React.createElement(LinkFloatingToolbar, null) }
    }),
    ...viewPlugins,
    ListPlugin,
    IndentListPlugin,
    HorizontalRulePlugin,
    plateNodeId.NodeIdPlugin,
    TablePlugin,
    SlashPlugin,
    // This lets users keep typing after end of marks like headings or quotes
    plateTrailingBlock.TrailingBlockPlugin,
    //makes sure there's always a blank paragraph at the end of the editor.
    createBreakPlugin,
    FloatingToolbarPlugin,
    AutoformatPlugin.configure({
      options: {
        enableUndoOnDelete: true,
        rules: [
          ...autoformatMarks,
          ...autoformatBlocks,
          ...autoformatLists,
          ...plateAutoformat.autoformatSmartQuotes,
          ...plateAutoformat.autoformatPunctuation,
          ...plateAutoformat.autoformatLegal,
          ...plateAutoformat.autoformatArrow,
          ...plateAutoformat.autoformatMath
        ].map(
          (rule) => ({
            ...rule,
            query: (editor) => !editor.api.some({
              match: { type: editor.getType(CodeBlockPlugin) }
            })
          })
        )
      }
    }),
    // ExitBreakPlugin lets users "break out" of a block (like a heading)
    ExitBreakPlugin.configure({
      options: {
        rules: [
          {
            hotkey: "mod+enter"
          },
          {
            hotkey: "mod+shift+enter",
            before: true
          },
          {
            hotkey: "enter",
            query: {
              start: true,
              end: true,
              allow: plateHeading.HEADING_LEVELS
            }
          }
        ]
      }
    }),
    // ResetNodePlugin lets users turn a heading back into a paragraph by pressing Enter (when empty) or Backspace (at the start).
    ResetNodePlugin.configure({
      options: {
        rules: [
          {
            ...resetBlockTypesCommonRule,
            hotkey: "Enter",
            predicate: (editor) => editor.api.isEmpty(editor.selection, { block: true })
          },
          {
            ...resetBlockTypesCommonRule,
            hotkey: "Backspace",
            predicate: (editor) => {
              return editor.api.isAt({ start: true });
            }
          },
          {
            ...resetBlockTypesCodeBlockRule,
            hotkey: "Enter",
            predicate: plateCodeBlock.isCodeBlockEmpty
          },
          {
            ...resetBlockTypesCodeBlockRule,
            hotkey: "Backspace",
            predicate: plateCodeBlock.isSelectionAtCodeBlockStart
          },
          // NOTE: Plate's ListPlugin usually handles resetting lists to paragraphs when pressing Backspace at the start of a list item.
          // However, if the list is the first node in the editor, the default reset behavior may not fully unwrap the list item,
          // which can leave an invalid structure (like a <li> inside a <p>).
          // This rule uses `onReset: unwrapList` to ensure lists are always properly reset to paragraphs, even when they are the first node.
          {
            types: [BulletedListPlugin.key, NumberedListPlugin.key],
            defaultType: ParagraphPlugin.key,
            hotkey: "Backspace",
            predicate: (editor) => editor.api.isAt({ start: true }),
            onReset: plateList.unwrapList
          }
        ]
      }
    }),
    SoftBreakPlugin.configure({
      options: {
        rules: [
          { hotkey: "shift+enter" },
          {
            hotkey: "enter",
            query: {
              allow: [CodeBlockPlugin.key, BlockquotePlugin.key]
            }
          }
        ]
      }
    })
  ];
  const RichEditor = ({ input, tinaForm, field }) => {
    var _a2;
    const initialValue = React.useMemo(() => {
      var _a3, _b, _c;
      if (((_a3 = field == null ? void 0 : field.parser) == null ? void 0 : _a3.type) === "slatejson") {
        return input.value.children;
      } else if ((_c = (_b = input.value) == null ? void 0 : _b.children) == null ? void 0 : _c.length) {
        const normalized = input.value.children.map(helpers.normalize);
        return normalized;
      } else {
        return [{ type: "p", children: [{ type: "text", text: "" }] }];
      }
    }, []);
    const editor = useCreateEditor({
      plugins: [...editorPlugins],
      value: initialValue,
      components: Components()
    });
    const ref = React.useRef(null);
    React.useEffect(() => {
      if (ref.current) {
        setTimeout(() => {
          var _a3;
          const plateElement = (_a3 = ref.current) == null ? void 0 : _a3.querySelector(
            '[role="textbox"]'
          );
          if (field.experimental_focusIntent && plateElement) {
            if (plateElement)
              plateElement.focus();
          }
        }, 100);
      }
    }, [field.experimental_focusIntent, ref]);
    return /* @__PURE__ */ React.createElement("div", { ref }, /* @__PURE__ */ React.createElement(
      Plate,
      {
        editor,
        onChange: (value) => {
          const normalized = value.value.map(
            normalizeLinksInCodeBlocks
          );
          input.onChange({
            type: "root",
            children: normalized
          });
        }
      },
      /* @__PURE__ */ React.createElement(EditorContainer, null, /* @__PURE__ */ React.createElement(TooltipProvider$1, null, /* @__PURE__ */ React.createElement(
        ToolbarProvider,
        {
          tinaForm,
          templates: field.templates,
          overrides: (field == null ? void 0 : field.toolbarOverride) ? field.toolbarOverride : field.overrides
        },
        /* @__PURE__ */ React.createElement(FixedToolbar, null, /* @__PURE__ */ React.createElement(FixedToolbarButtons, null)),
        ((_a2 = field == null ? void 0 : field.overrides) == null ? void 0 : _a2.showFloatingToolbar) !== false ? /* @__PURE__ */ React.createElement(FloatingToolbar, null, /* @__PURE__ */ React.createElement(FloatingToolbarButtons, null)) : null
      ), /* @__PURE__ */ React.createElement(Editor$1, null)))
    ));
  };
  const MdxFieldPlugin = {
    name: "rich-text",
    Component: wrapFieldsWithMeta((props) => {
      const [rawMode, setRawMode] = React.useState(false);
      const [key, setKey] = React.useState(0);
      React.useMemo(() => {
        const { reset: reset2 } = props.form;
        props.form.reset = (initialValues) => {
          setKey((key2) => key2 + 1);
          return reset2(initialValues);
        };
      }, []);
      return /* @__PURE__ */ React.createElement(
        EditorContext$1.Provider,
        {
          key,
          value: {
            fieldName: props.field.name,
            templates: props.field.templates,
            rawMode,
            setRawMode
          }
        },
        /* @__PURE__ */ React.createElement(
          "div",
          {
            className: "min-h-[100px] max-w-full tina-prose relative shadow-inner focus-within:shadow-outline focus-within:border-blue-500 block w-full bg-white border border-gray-200 text-gray-600 focus-within:text-gray-900 rounded pt-0 py-2"
          },
          /* @__PURE__ */ React.createElement(RichEditor, { ...props })
        )
      );
    })
  };
  const MdxFieldPluginExtendible = {
    name: "rich-text",
    validate(value) {
      if (typeof value !== "undefined" && value !== null && Array.isArray(value.children) && value.children[0] && value.children[0].type === "invalid_markdown") {
        return "Unable to parse rich-text";
      }
      return void 0;
    },
    Component: wrapFieldsWithMeta((props) => {
      const [key, setKey] = React.useState(0);
      React.useMemo(() => {
        const { reset: reset2 } = props.form;
        props.form.reset = (initialValues) => {
          setKey((key2) => key2 + 1);
          return reset2(initialValues);
        };
      }, []);
      return /* @__PURE__ */ React.createElement(
        EditorContext$1.Provider,
        {
          key,
          value: {
            fieldName: props.field.name,
            templates: props.field.templates,
            rawMode: props.rawMode,
            setRawMode: props.setRawMode
          }
        },
        /* @__PURE__ */ React.createElement(
          "div",
          {
            className: "min-h-[100px] max-w-full tina-prose relative shadow-inner focus-within:shadow-outline focus-within:border-blue-500 block w-full bg-white border border-gray-200 text-gray-600 focus-within:text-gray-900 rounded pt-0 py-2"
          },
          props.rawMode ? props.rawEditor : /* @__PURE__ */ React.createElement(RichEditor, { ...props })
        )
      );
    })
  };
  class FormMetaPlugin {
    constructor(options) {
      this.__type = "form:meta";
      this.name = options.name;
      this.Component = options.Component;
    }
  }
  function useLocalStorage(key, initialValue) {
    const [storedValue, setStoredValue] = React__namespace.useState(initialValue);
    React__namespace.useEffect(() => {
      const valueFromStorage = window.localStorage && window.localStorage.getItem(key);
      if (valueFromStorage != null && valueFromStorage != void 0) {
        setStoredValue(JSON.parse(valueFromStorage));
      }
    }, [key]);
    const setValue = (value) => {
      try {
        const valueToStore = value instanceof Function ? value(storedValue) : value;
        setStoredValue(valueToStore);
        localStorage.setItem(key, JSON.stringify(valueToStore));
      } catch (error2) {
        console.log(error2);
      }
    };
    return [storedValue, setValue];
  }
  const num123 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
  const numFas = ["۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹", "۰"];
  const numKor = ["０", "１", "２", "３", "４", "５", "６", "７", "８", "９"];
  const numMya = ["၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉"];
  const numTel = ["౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯"];
  const _123 = [...num123, ...numFas, ...numKor, ...numMya, ...numTel];
  const afr = [
    "die",
    "het",
    "en",
    "sy",
    "nie",
    "was",
    "hy",
    "te",
    "is",
    "ek",
    "om",
    "hulle",
    "in",
    "my",
    "'n",
    "vir",
    "toe",
    "haar",
    "van",
    "dit",
    "op",
    "se",
    "wat",
    "met",
    "gaan",
    "baie",
    "ons",
    "jy",
    "na",
    "maar",
    "hom",
    "so",
    "n",
    "huis",
    "kan",
    "aan",
    "dat",
    "daar",
    "sal",
    "jou",
    "gesê",
    "by",
    "kom",
    "een",
    "ma",
    "as",
    "son",
    "groot",
    "begin",
    "al"
  ];
  const ara = [
    "،",
    "ّآض",
    "آمينَ",
    "آه",
    "آهاً",
    "آي",
    "أ",
    "أب",
    "أجل",
    "أجمع",
    "أخ",
    "أخذ",
    "أصبح",
    "أضحى",
    "أقبل",
    "أقل",
    "أكثر",
    "ألا",
    "أم",
    "أما",
    "أمامك",
    "أمامكَ",
    "أمسى",
    "أمّا",
    "أن",
    "أنا",
    "أنت",
    "أنتم",
    "أنتما",
    "أنتن",
    "أنتِ",
    "أنشأ",
    "أنّى",
    "أو",
    "أوشك",
    "أولئك",
    "أولئكم",
    "أولاء",
    "أولالك",
    "أوّهْ",
    "أي",
    "أيا",
    "أين",
    "أينما",
    "أيّ",
    "أَنَّ",
    "أََيُّ",
    "أُفٍّ",
    "إذ",
    "إذا",
    "إذاً",
    "إذما",
    "إذن",
    "إلى",
    "إليكم",
    "إليكما",
    "إليكنّ",
    "إليكَ",
    "إلَيْكَ",
    "إلّا",
    "إمّا",
    "إن",
    "إنّما",
    "إي",
    "إياك",
    "إياكم",
    "إياكما",
    "إياكن",
    "إيانا",
    "إياه",
    "إياها",
    "إياهم",
    "إياهما",
    "إياهن",
    "إياي",
    "إيهٍ",
    "إِنَّ",
    "ا",
    "ابتدأ",
    "اثر",
    "اجل",
    "احد",
    "اخرى",
    "اخلولق",
    "اذا",
    "اربعة",
    "ارتدّ",
    "استحال",
    "اطار",
    "اعادة",
    "اعلنت",
    "اف",
    "اكثر",
    "اكد",
    "الألاء",
    "الألى",
    "الا",
    "الاخيرة",
    "الان",
    "الاول",
    "الاولى",
    "التى",
    "التي",
    "الثاني",
    "الثانية",
    "الذاتي",
    "الذى",
    "الذي",
    "الذين",
    "السابق",
    "الف",
    "اللائي",
    "اللاتي",
    "اللتان",
    "اللتيا",
    "اللتين",
    "اللذان",
    "اللذين",
    "اللواتي",
    "الماضي",
    "المقبل",
    "الوقت",
    "الى",
    "اليوم",
    "اما",
    "امام",
    "امس",
    "ان",
    "انبرى",
    "انقلب",
    "انه",
    "انها",
    "او",
    "اول",
    "اي",
    "ايار",
    "ايام",
    "ايضا",
    "ب",
    "بات",
    "باسم",
    "بان",
    "بخٍ",
    "برس",
    "بسبب",
    "بسّ",
    "بشكل",
    "بضع",
    "بطآن",
    "بعد",
    "بعض",
    "بك",
    "بكم",
    "بكما",
    "بكن",
    "بل",
    "بلى",
    "بما",
    "بماذا",
    "بمن",
    "بن",
    "بنا",
    "به",
    "بها",
    "بي",
    "بيد",
    "بين",
    "بَسْ",
    "بَلْهَ",
    "بِئْسَ",
    "تانِ",
    "تانِك",
    "تبدّل",
    "تجاه",
    "تحوّل",
    "تلقاء",
    "تلك",
    "تلكم",
    "تلكما",
    "تم",
    "تينك",
    "تَيْنِ",
    "تِه",
    "تِي",
    "ثلاثة",
    "ثم",
    "ثمّ",
    "ثمّة",
    "ثُمَّ",
    "جعل",
    "جلل",
    "جميع",
    "جير",
    "حار",
    "حاشا",
    "حاليا",
    "حاي",
    "حتى",
    "حرى",
    "حسب",
    "حم",
    "حوالى",
    "حول",
    "حيث",
    "حيثما",
    "حين",
    "حيَّ",
    "حَبَّذَا",
    "حَتَّى",
    "حَذارِ",
    "خلا",
    "خلال",
    "دون",
    "دونك",
    "ذا",
    "ذات",
    "ذاك",
    "ذانك",
    "ذانِ",
    "ذلك",
    "ذلكم",
    "ذلكما",
    "ذلكن",
    "ذو",
    "ذوا",
    "ذواتا",
    "ذواتي",
    "ذيت",
    "ذينك",
    "ذَيْنِ",
    "ذِه",
    "ذِي",
    "راح",
    "رجع",
    "رويدك",
    "ريث",
    "رُبَّ",
    "زيارة",
    "سبحان",
    "سرعان",
    "سنة",
    "سنوات",
    "سوف",
    "سوى",
    "سَاءَ",
    "سَاءَمَا",
    "شبه",
    "شخصا",
    "شرع",
    "شَتَّانَ",
    "صار",
    "صباح",
    "صفر",
    "صهٍ",
    "صهْ",
    "ضد",
    "ضمن",
    "طاق",
    "طالما",
    "طفق",
    "طَق",
    "ظلّ",
    "عاد",
    "عام",
    "عاما",
    "عامة",
    "عدا",
    "عدة",
    "عدد",
    "عدم",
    "عسى",
    "عشر",
    "عشرة",
    "علق",
    "على",
    "عليك",
    "عليه",
    "عليها",
    "علًّ",
    "عن",
    "عند",
    "عندما",
    "عوض",
    "عين",
    "عَدَسْ",
    "عَمَّا",
    "غدا",
    "غير",
    "ـ",
    "ف",
    "فان",
    "فلان",
    "فو",
    "فى",
    "في",
    "فيم",
    "فيما",
    "فيه",
    "فيها",
    "قال",
    "قام",
    "قبل",
    "قد",
    "قطّ",
    "قلما",
    "قوة",
    "كأنّما",
    "كأين",
    "كأيّ",
    "كأيّن",
    "كاد",
    "كان",
    "كانت",
    "كذا",
    "كذلك",
    "كرب",
    "كل",
    "كلا",
    "كلاهما",
    "كلتا",
    "كلم",
    "كليكما",
    "كليهما",
    "كلّما",
    "كلَّا",
    "كم",
    "كما",
    "كي",
    "كيت",
    "كيف",
    "كيفما",
    "كَأَنَّ",
    "كِخ",
    "لئن",
    "لا",
    "لات",
    "لاسيما",
    "لدن",
    "لدى",
    "لعمر",
    "لقاء",
    "لك",
    "لكم",
    "لكما",
    "لكن",
    "لكنَّما",
    "لكي",
    "لكيلا",
    "للامم",
    "لم",
    "لما",
    "لمّا",
    "لن",
    "لنا",
    "له",
    "لها",
    "لو",
    "لوكالة",
    "لولا",
    "لوما",
    "لي",
    "لَسْتَ",
    "لَسْتُ",
    "لَسْتُم",
    "لَسْتُمَا",
    "لَسْتُنَّ",
    "لَسْتِ",
    "لَسْنَ",
    "لَعَلَّ",
    "لَكِنَّ",
    "لَيْتَ",
    "لَيْسَ",
    "لَيْسَا",
    "لَيْسَتَا",
    "لَيْسَتْ",
    "لَيْسُوا",
    "لَِسْنَا",
    "ما",
    "ماانفك",
    "مابرح",
    "مادام",
    "ماذا",
    "مازال",
    "مافتئ",
    "مايو",
    "متى",
    "مثل",
    "مذ",
    "مساء",
    "مع",
    "معاذ",
    "مقابل",
    "مكانكم",
    "مكانكما",
    "مكانكنّ",
    "مكانَك",
    "مليار",
    "مليون",
    "مما",
    "ممن",
    "من",
    "منذ",
    "منها",
    "مه",
    "مهما",
    "مَنْ",
    "مِن",
    "نحن",
    "نحو",
    "نعم",
    "نفس",
    "نفسه",
    "نهاية",
    "نَخْ",
    "نِعِمّا",
    "نِعْمَ",
    "ها",
    "هاؤم",
    "هاكَ",
    "هاهنا",
    "هبّ",
    "هذا",
    "هذه",
    "هكذا",
    "هل",
    "هلمَّ",
    "هلّا",
    "هم",
    "هما",
    "هن",
    "هنا",
    "هناك",
    "هنالك",
    "هو",
    "هي",
    "هيا",
    "هيت",
    "هيّا",
    "هَؤلاء",
    "هَاتانِ",
    "هَاتَيْنِ",
    "هَاتِه",
    "هَاتِي",
    "هَجْ",
    "هَذا",
    "هَذانِ",
    "هَذَيْنِ",
    "هَذِه",
    "هَذِي",
    "هَيْهَاتَ",
    "و",
    "وا",
    "واحد",
    "واضاف",
    "واضافت",
    "واكد",
    "وان",
    "واهاً",
    "واوضح",
    "وراءَك",
    "وفي",
    "وقال",
    "وقالت",
    "وقد",
    "وقف",
    "وكان",
    "وكانت",
    "ولا",
    "ولم",
    "ومن",
    "وهو",
    "وهي",
    "ويكأنّ",
    "وَيْ",
    "وُشْكَانََ",
    "يكون",
    "يمكن",
    "يوم",
    "ّأيّان"
  ];
  const hye = [
    "այդ",
    "այլ",
    "այն",
    "այս",
    "դու",
    "դուք",
    "եմ",
    "են",
    "ենք",
    "ես",
    "եք",
    "է",
    "էի",
    "էին",
    "էինք",
    "էիր",
    "էիք",
    "էր",
    "ըստ",
    "թ",
    "ի",
    "ին",
    "իսկ",
    "իր",
    "կամ",
    "համար",
    "հետ",
    "հետո",
    "մենք",
    "մեջ",
    "մի",
    "ն",
    "նա",
    "նաև",
    "նրա",
    "նրանք",
    "որ",
    "որը",
    "որոնք",
    "որպես",
    "ու",
    "ում",
    "պիտի",
    "վրա",
    "և"
  ];
  const eus = [
    "al",
    "anitz",
    "arabera",
    "asko",
    "baina",
    "bat",
    "batean",
    "batek",
    "bati",
    "batzuei",
    "batzuek",
    "batzuetan",
    "batzuk",
    "bera",
    "beraiek",
    "berau",
    "berauek",
    "bere",
    "berori",
    "beroriek",
    "beste",
    "bezala",
    "da",
    "dago",
    "dira",
    "ditu",
    "du",
    "dute",
    "edo",
    "egin",
    "ere",
    "eta",
    "eurak",
    "ez",
    "gainera",
    "gu",
    "gutxi",
    "guzti",
    "haiei",
    "haiek",
    "haietan",
    "hainbeste",
    "hala",
    "han",
    "handik",
    "hango",
    "hara",
    "hari",
    "hark",
    "hartan",
    "hau",
    "hauei",
    "hauek",
    "hauetan",
    "hemen",
    "hemendik",
    "hemengo",
    "hi",
    "hona",
    "honek",
    "honela",
    "honetan",
    "honi",
    "hor",
    "hori",
    "horiei",
    "horiek",
    "horietan",
    "horko",
    "horra",
    "horrek",
    "horrela",
    "horretan",
    "horri",
    "hortik",
    "hura",
    "izan",
    "ni",
    "noiz",
    "nola",
    "non",
    "nondik",
    "nongo",
    "nor",
    "nora",
    "ze",
    "zein",
    "zen",
    "zenbait",
    "zenbat",
    "zer",
    "zergatik",
    "ziren",
    "zituen",
    "zu",
    "zuek",
    "zuen",
    "zuten"
  ];
  const ben = [
    "অতএব",
    "অথচ",
    "অথবা",
    "অনুযায়ী",
    "অনেক",
    "অনেকে",
    "অনেকেই",
    "অন্তত",
    "অন্য",
    "অবধি",
    "অবশ্য",
    "অর্থাত",
    "আই",
    "আগামী",
    "আগে",
    "আগেই",
    "আছে",
    "আজ",
    "আদ্যভাগে",
    "আপনার",
    "আপনি",
    "আবার",
    "আমরা",
    "আমাকে",
    "আমাদের",
    "আমার",
    "আমি",
    "আর",
    "আরও",
    "ই",
    "ইত্যাদি",
    "ইহা",
    "উচিত",
    "উত্তর",
    "উনি",
    "উপর",
    "উপরে",
    "এ",
    "এঁদের",
    "এঁরা",
    "এই",
    "একই",
    "একটি",
    "একবার",
    "একে",
    "এক্",
    "এখন",
    "এখনও",
    "এখানে",
    "এখানেই",
    "এটা",
    "এটাই",
    "এটি",
    "এত",
    "এতটাই",
    "এতে",
    "এদের",
    "এব",
    "এবং",
    "এবার",
    "এমন",
    "এমনকী",
    "এমনি",
    "এর",
    "এরা",
    "এল",
    "এস",
    "এসে",
    "ঐ",
    "ও",
    "ওঁদের",
    "ওঁর",
    "ওঁরা",
    "ওই",
    "ওকে",
    "ওখানে",
    "ওদের",
    "ওর",
    "ওরা",
    "কখনও",
    "কত",
    "কবে",
    "কমনে",
    "কয়েক",
    "কয়েকটি",
    "করছে",
    "করছেন",
    "করতে",
    "করবে",
    "করবেন",
    "করলে",
    "করলেন",
    "করা",
    "করাই",
    "করায়",
    "করার",
    "করি",
    "করিতে",
    "করিয়া",
    "করিয়ে",
    "করে",
    "করেই",
    "করেছিলেন",
    "করেছে",
    "করেছেন",
    "করেন",
    "কাউকে",
    "কাছ",
    "কাছে",
    "কাজ",
    "কাজে",
    "কারও",
    "কারণ",
    "কি",
    "কিংবা",
    "কিছু",
    "কিছুই",
    "কিন্তু",
    "কী",
    "কে",
    "কেউ",
    "কেউই",
    "কেখা",
    "কেন",
    "কোটি",
    "কোন",
    "কোনও",
    "কোনো",
    "ক্ষেত্রে",
    "কয়েক",
    "খুব",
    "গিয়ে",
    "গিয়েছে",
    "গিয়ে",
    "গুলি",
    "গেছে",
    "গেল",
    "গেলে",
    "গোটা",
    "চলে",
    "চান",
    "চায়",
    "চার",
    "চালু",
    "চেয়ে",
    "চেষ্টা",
    "ছাড়া",
    "ছাড়াও",
    "ছিল",
    "ছিলেন",
    "জন",
    "জনকে",
    "জনের",
    "জন্য",
    "জন্যওজে",
    "জানতে",
    "জানা",
    "জানানো",
    "জানায়",
    "জানিয়ে",
    "জানিয়েছে",
    "জে",
    "জ্নজন",
    "টি",
    "ঠিক",
    "তখন",
    "তত",
    "তথা",
    "তবু",
    "তবে",
    "তা",
    "তাঁকে",
    "তাঁদের",
    "তাঁর",
    "তাঁরা",
    "তাঁাহারা",
    "তাই",
    "তাও",
    "তাকে",
    "তাতে",
    "তাদের",
    "তার",
    "তারপর",
    "তারা",
    "তারৈ",
    "তাহলে",
    "তাহা",
    "তাহাতে",
    "তাহার",
    "তিনঐ",
    "তিনি",
    "তিনিও",
    "তুমি",
    "তুলে",
    "তেমন",
    "তো",
    "তোমার",
    "থাকবে",
    "থাকবেন",
    "থাকা",
    "থাকায়",
    "থাকে",
    "থাকেন",
    "থেকে",
    "থেকেই",
    "থেকেও",
    "দিকে",
    "দিতে",
    "দিন",
    "দিয়ে",
    "দিয়েছে",
    "দিয়েছেন",
    "দিলেন",
    "দু",
    "দুই",
    "দুটি",
    "দুটো",
    "দেওয়া",
    "দেওয়ার",
    "দেওয়া",
    "দেখতে",
    "দেখা",
    "দেখে",
    "দেন",
    "দেয়",
    "দ্বারা",
    "ধরা",
    "ধরে",
    "ধামার",
    "নতুন",
    "নয়",
    "না",
    "নাই",
    "নাকি",
    "নাগাদ",
    "নানা",
    "নিজে",
    "নিজেই",
    "নিজেদের",
    "নিজের",
    "নিতে",
    "নিয়ে",
    "নিয়ে",
    "নেই",
    "নেওয়া",
    "নেওয়ার",
    "নেওয়া",
    "নয়",
    "পক্ষে",
    "পর",
    "পরে",
    "পরেই",
    "পরেও",
    "পর্যন্ত",
    "পাওয়া",
    "পাচ",
    "পারি",
    "পারে",
    "পারেন",
    "পি",
    "পেয়ে",
    "পেয়্র্",
    "প্রতি",
    "প্রথম",
    "প্রভৃতি",
    "প্রযন্ত",
    "প্রাথমিক",
    "প্রায়",
    "প্রায়",
    "ফলে",
    "ফিরে",
    "ফের",
    "বক্তব্য",
    "বদলে",
    "বন",
    "বরং",
    "বলতে",
    "বলল",
    "বললেন",
    "বলা",
    "বলে",
    "বলেছেন",
    "বলেন",
    "বসে",
    "বহু",
    "বা",
    "বাদে",
    "বার",
    "বি",
    "বিনা",
    "বিভিন্ন",
    "বিশেষ",
    "বিষয়টি",
    "বেশ",
    "বেশি",
    "ব্যবহার",
    "ব্যাপারে",
    "ভাবে",
    "ভাবেই",
    "মতো",
    "মতোই",
    "মধ্যভাগে",
    "মধ্যে",
    "মধ্যেই",
    "মধ্যেও",
    "মনে",
    "মাত্র",
    "মাধ্যমে",
    "মোট",
    "মোটেই",
    "যখন",
    "যত",
    "যতটা",
    "যথেষ্ট",
    "যদি",
    "যদিও",
    "যা",
    "যাঁর",
    "যাঁরা",
    "যাওয়া",
    "যাওয়ার",
    "যাওয়া",
    "যাকে",
    "যাচ্ছে",
    "যাতে",
    "যাদের",
    "যান",
    "যাবে",
    "যায়",
    "যার",
    "যারা",
    "যিনি",
    "যে",
    "যেখানে",
    "যেতে",
    "যেন",
    "যেমন",
    "র",
    "রকম",
    "রয়েছে",
    "রাখা",
    "রেখে",
    "লক্ষ",
    "শুধু",
    "শুরু",
    "সঙ্গে",
    "সঙ্গেও",
    "সব",
    "সবার",
    "সমস্ত",
    "সম্প্রতি",
    "সহ",
    "সহিত",
    "সাধারণ",
    "সামনে",
    "সি",
    "সুতরাং",
    "সে",
    "সেই",
    "সেখান",
    "সেখানে",
    "সেটা",
    "সেটাই",
    "সেটাও",
    "সেটি",
    "স্পষ্ট",
    "স্বয়ং",
    "হইতে",
    "হইবে",
    "হইয়া",
    "হওয়া",
    "হওয়ায়",
    "হওয়ার",
    "হচ্ছে",
    "হত",
    "হতে",
    "হতেই",
    "হন",
    "হবে",
    "হবেন",
    "হয়",
    "হয়তো",
    "হয়নি",
    "হয়ে",
    "হয়েই",
    "হয়েছিল",
    "হয়েছে",
    "হয়েছেন",
    "হল",
    "হলে",
    "হলেই",
    "হলেও",
    "হলো",
    "হাজার",
    "হিসাবে",
    "হৈলে",
    "হোক",
    "হয়"
  ];
  const bre = [
    "'blam",
    "'d",
    "'m",
    "'r",
    "'ta",
    "'vat",
    "'z",
    "'zo",
    "a",
    "a:",
    "aba",
    "abalamour",
    "abaoe",
    "ac'hane",
    "ac'hanoc'h",
    "ac'hanomp",
    "ac'hanon",
    "ac'hanout",
    "adal",
    "adalek",
    "adarre",
    "ae",
    "aec'h",
    "aed",
    "aemp",
    "aen",
    "aent",
    "aes",
    "afe",
    "afec'h",
    "afed",
    "afemp",
    "afen",
    "afent",
    "afes",
    "ag",
    "ah",
    "aimp",
    "aint",
    "aio",
    "aiou",
    "aje",
    "ajec'h",
    "ajed",
    "ajemp",
    "ajen",
    "ajent",
    "ajes",
    "al",
    "alato",
    "alies",
    "aliesañ",
    "alkent",
    "all",
    "allas",
    "allo",
    "allô",
    "am",
    "amañ",
    "amzer",
    "an",
    "anezhañ",
    "anezhe",
    "anezhi",
    "anezho",
    "anvet",
    "aon",
    "aotren",
    "ar",
    "arall",
    "araok",
    "araoki",
    "araozañ",
    "araozo",
    "araozoc'h",
    "araozomp",
    "araozon",
    "araozor",
    "araozout",
    "arbenn",
    "arre",
    "atalek",
    "atav",
    "az",
    "azalek",
    "azirazañ",
    "azirazi",
    "azirazo",
    "azirazoc'h",
    "azirazomp",
    "azirazon",
    "azirazor",
    "azirazout",
    "b:",
    "ba",
    "ba'l",
    "ba'n",
    "ba'r",
    "bad",
    "bah",
    "bal",
    "ban",
    "bar",
    "bastañ",
    "befe",
    "bell",
    "benaos",
    "benn",
    "bennag",
    "bennak",
    "bennozh",
    "bep",
    "bepred",
    "berr",
    "berzh",
    "bet",
    "betek",
    "betra",
    "bev",
    "bevet",
    "bez",
    "bezañ",
    "beze",
    "bezent",
    "bezet",
    "bezh",
    "bezit",
    "bezomp",
    "bihan",
    "bije",
    "biou",
    "biskoazh",
    "blam",
    "bo",
    "boa",
    "bominapl",
    "boudoudom",
    "bouez",
    "boull",
    "boum",
    "bout",
    "bras",
    "brasañ",
    "brav",
    "bravo",
    "bremañ",
    "bres",
    "brokenn",
    "bronn",
    "brrr",
    "brutal",
    "buhezek",
    "c'h:",
    "c'haout",
    "c'he",
    "c'hem",
    "c'herz",
    "c'heñver",
    "c'hichen",
    "c'hiz",
    "c'hoazh",
    "c'horre",
    "c'houde",
    "c'houst",
    "c'hreiz",
    "c'hwec'h",
    "c'hwec'hvet",
    "c'hwezek",
    "c'hwi",
    "ch:",
    "chaous",
    "chik",
    "chit",
    "chom",
    "chut",
    "d'",
    "d'al",
    "d'an",
    "d'ar",
    "d'az",
    "d'e",
    "d'he",
    "d'ho",
    "d'hol",
    "d'hon",
    "d'hor",
    "d'o",
    "d'ober",
    "d'ul",
    "d'un",
    "d'ur",
    "d:",
    "da",
    "dak",
    "daka",
    "dal",
    "dalbezh",
    "dalc'hmat",
    "dalit",
    "damdost",
    "damheñvel",
    "damm",
    "dan",
    "danvez",
    "dao",
    "daol",
    "daonet",
    "daou",
    "daoust",
    "daouzek",
    "daouzekvet",
    "darn",
    "dastrewiñ",
    "dav",
    "davedoc'h",
    "davedomp",
    "davedon",
    "davedor",
    "davedout",
    "davet",
    "davetañ",
    "davete",
    "daveti",
    "daveto",
    "defe",
    "dehou",
    "dek",
    "dekvet",
    "den",
    "deoc'h",
    "deomp",
    "deor",
    "derc'hel",
    "deus",
    "dez",
    "deze",
    "dezhañ",
    "dezhe",
    "dezhi",
    "dezho",
    "di",
    "diabarzh",
    "diagent",
    "diar",
    "diaraok",
    "diavaez",
    "dibaoe",
    "dibaot",
    "dibar",
    "dic'halañ",
    "didiac'h",
    "dienn",
    "difer",
    "diganeoc'h",
    "diganeomp",
    "diganeor",
    "diganimp",
    "diganin",
    "diganit",
    "digant",
    "digantañ",
    "digante",
    "diganti",
    "diganto",
    "digemmesk",
    "diget",
    "digor",
    "digoret",
    "dija",
    "dije",
    "dimp",
    "din",
    "dinaou",
    "dindan",
    "dindanañ",
    "dindani",
    "dindano",
    "dindanoc'h",
    "dindanomp",
    "dindanon",
    "dindanor",
    "dindanout",
    "dioutañ",
    "dioute",
    "diouti",
    "diouto",
    "diouzh",
    "diouzhin",
    "diouzhit",
    "diouzhoc'h",
    "diouzhomp",
    "diouzhor",
    "dirak",
    "dirazañ",
    "dirazi",
    "dirazo",
    "dirazoc'h",
    "dirazomp",
    "dirazon",
    "dirazor",
    "dirazout",
    "disheñvel",
    "dispar",
    "distank",
    "dister",
    "disterañ",
    "disterig",
    "distro",
    "dit",
    "divaez",
    "diwar",
    "diwezhat",
    "diwezhañ",
    "do",
    "doa",
    "doare",
    "dont",
    "dost",
    "doue",
    "douetus",
    "douez",
    "doug",
    "draou",
    "draoñ",
    "dre",
    "drede",
    "dreist",
    "dreistañ",
    "dreisti",
    "dreisto",
    "dreistoc'h",
    "dreistomp",
    "dreiston",
    "dreistor",
    "dreistout",
    "drek",
    "dreñv",
    "dring",
    "dro",
    "du",
    "e",
    "e:",
    "eas",
    "ebet",
    "ec'h",
    "edo",
    "edoc'h",
    "edod",
    "edomp",
    "edon",
    "edont",
    "edos",
    "eer",
    "eeun",
    "efed",
    "egedoc'h",
    "egedomp",
    "egedon",
    "egedor",
    "egedout",
    "eget",
    "egetañ",
    "egete",
    "egeti",
    "egeto",
    "eh",
    "eil",
    "eilvet",
    "eizh",
    "eizhvet",
    "ejoc'h",
    "ejod",
    "ejomp",
    "ejont",
    "ejout",
    "el",
    "em",
    "emaint",
    "emaoc'h",
    "emaomp",
    "emaon",
    "emaout",
    "emañ",
    "eme",
    "emeur",
    "emezañ",
    "emezi",
    "emezo",
    "emezoc'h",
    "emezomp",
    "emezon",
    "emezout",
    "emporzhiañ",
    "en",
    "end",
    "endan",
    "endra",
    "enep",
    "ennañ",
    "enni",
    "enno",
    "ennoc'h",
    "ennomp",
    "ennon",
    "ennor",
    "ennout",
    "enta",
    "eo",
    "eomp",
    "eont",
    "eor",
    "eot",
    "er",
    "erbet",
    "erfin",
    "esa",
    "esae",
    "espar",
    "estlamm",
    "estrañj",
    "eta",
    "etre",
    "etreoc'h",
    "etrezo",
    "etrezoc'h",
    "etrezomp",
    "etrezor",
    "euh",
    "eur",
    "eus",
    "evel",
    "evelato",
    "eveldoc'h",
    "eveldomp",
    "eveldon",
    "eveldor",
    "eveldout",
    "evelkent",
    "eveltañ",
    "evelte",
    "evelti",
    "evelto",
    "evidoc'h",
    "evidomp",
    "evidon",
    "evidor",
    "evidout",
    "evit",
    "evitañ",
    "evite",
    "eviti",
    "evito",
    "ez",
    "eñ",
    "f:",
    "fac'h",
    "fall",
    "fed",
    "feiz",
    "fenn",
    "fezh",
    "fin",
    "finsalvet",
    "foei",
    "fouilhezañ",
    "g:",
    "gallout",
    "ganeoc'h",
    "ganeomp",
    "ganin",
    "ganit",
    "gant",
    "gantañ",
    "ganti",
    "ganto",
    "gaout",
    "gast",
    "gein",
    "gellout",
    "genndost",
    "gentañ",
    "ger",
    "gerz",
    "get",
    "geñver",
    "gichen",
    "gin",
    "giz",
    "glan",
    "gloev",
    "goll",
    "gorre",
    "goude",
    "gouez",
    "gouezit",
    "gouezomp",
    "goulz",
    "gounnar",
    "gour",
    "goust",
    "gouze",
    "gouzout",
    "gra",
    "grak",
    "grec'h",
    "greiz",
    "grenn",
    "greomp",
    "grit",
    "groñs",
    "gutez",
    "gwall",
    "gwashoc'h",
    "gwazh",
    "gwech",
    "gwechall",
    "gwechoù",
    "gwell",
    "gwezh",
    "gwezhall",
    "gwezharall",
    "gwezhoù",
    "gwig",
    "gwirionez",
    "gwitibunan",
    "gêr",
    "h:",
    "ha",
    "hag",
    "han",
    "hanter",
    "hanterc'hantad",
    "hanterkantved",
    "harz",
    "hañ",
    "hañval",
    "he",
    "hebioù",
    "hec'h",
    "hei",
    "hein",
    "hem",
    "hemañ",
    "hen",
    "hend",
    "henhont",
    "henn",
    "hennezh",
    "hent",
    "hep",
    "hervez",
    "hervezañ",
    "hervezi",
    "hervezo",
    "hervezoc'h",
    "hervezomp",
    "hervezon",
    "hervezor",
    "hervezout",
    "heul",
    "heuliañ",
    "hevelep",
    "heverk",
    "heñvel",
    "heñvelat",
    "heñvelañ",
    "heñveliñ",
    "heñveloc'h",
    "heñvelout",
    "hi",
    "hilh",
    "hini",
    "hirie",
    "hirio",
    "hiziv",
    "hiziviken",
    "ho",
    "hoaliñ",
    "hoc'h",
    "hogen",
    "hogos",
    "hogozik",
    "hol",
    "holl",
    "holà",
    "homañ",
    "hon",
    "honhont",
    "honnezh",
    "hont",
    "hop",
    "hopala",
    "hor",
    "hou",
    "houp",
    "hudu",
    "hue",
    "hui",
    "hum",
    "hurrah",
    "i",
    "i:",
    "in",
    "int",
    "is",
    "ispisial",
    "isurzhiet",
    "it",
    "ivez",
    "izelañ",
    "j:",
    "just",
    "k:",
    "kae",
    "kaer",
    "kalon",
    "kalz",
    "kant",
    "kaout",
    "kar",
    "kazi",
    "keid",
    "kein",
    "keit",
    "kel",
    "kellies",
    "keloù",
    "kement",
    "ken",
    "kenkent",
    "kenkoulz",
    "kenment",
    "kent",
    "kentañ",
    "kentizh",
    "kentoc'h",
    "kentre",
    "ker",
    "kerkent",
    "kerz",
    "kerzh",
    "ket",
    "keta",
    "keñver",
    "keñverel",
    "keñverius",
    "kichen",
    "kichenik",
    "kit",
    "kiz",
    "klak",
    "klek",
    "klik",
    "komprenet",
    "komz",
    "kont",
    "korf",
    "korre",
    "koulskoude",
    "koulz",
    "koust",
    "krak",
    "krampouezh",
    "krec'h",
    "kreiz",
    "kuit",
    "kwir",
    "l:",
    "la",
    "laez",
    "laoskel",
    "laouen",
    "lavar",
    "lavaret",
    "lavarout",
    "lec'h",
    "lein",
    "leizh",
    "lerc'h",
    "leun",
    "leuskel",
    "lew",
    "lies",
    "liesañ",
    "lod",
    "lusk",
    "lâr",
    "lârout",
    "m:",
    "ma",
    "ma'z",
    "mac'h",
    "mac'hat",
    "mac'hañ",
    "mac'hoc'h",
    "mad",
    "maez",
    "maksimal",
    "mann",
    "mar",
    "mard",
    "marg",
    "marzh",
    "mat",
    "mañ",
    "me",
    "memes",
    "memestra",
    "merkapl",
    "mersi",
    "mes",
    "mesk",
    "met",
    "meur",
    "mil",
    "minimal",
    "moan",
    "moaniaat",
    "mod",
    "mont",
    "mout",
    "mui",
    "muiañ",
    "muioc'h",
    "n",
    "n'",
    "n:",
    "na",
    "nag",
    "naontek",
    "naturel",
    "nav",
    "navet",
    "ne",
    "nebeudig",
    "nebeut",
    "nebeutañ",
    "nebeutoc'h",
    "neketa",
    "nemedoc'h",
    "nemedomp",
    "nemedon",
    "nemedor",
    "nemedout",
    "nemet",
    "nemetañ",
    "nemete",
    "nemeti",
    "nemeto",
    "nemeur",
    "neoac'h",
    "nepell",
    "nerzh",
    "nes",
    "neseser",
    "netra",
    "neubeudoù",
    "neuhe",
    "neuze",
    "nevez",
    "newazh",
    "nez",
    "ni",
    "nikun",
    "niverus",
    "nul",
    "o",
    "o:",
    "oa",
    "oac'h",
    "oad",
    "oamp",
    "oan",
    "oant",
    "oar",
    "oas",
    "ober",
    "oc'h",
    "oc'ho",
    "oc'hola",
    "oc'hpenn",
    "oh",
    "ohe",
    "ollé",
    "olole",
    "olé",
    "omp",
    "on",
    "ordin",
    "ordinal",
    "ouejoc'h",
    "ouejod",
    "ouejomp",
    "ouejont",
    "ouejout",
    "ouek",
    "ouezas",
    "ouezi",
    "ouezimp",
    "ouezin",
    "ouezint",
    "ouezis",
    "ouezo",
    "ouezoc'h",
    "ouezor",
    "ouf",
    "oufe",
    "oufec'h",
    "oufed",
    "oufemp",
    "oufen",
    "oufent",
    "oufes",
    "ouie",
    "ouiec'h",
    "ouied",
    "ouiemp",
    "ouien",
    "ouient",
    "ouies",
    "ouije",
    "ouijec'h",
    "ouijed",
    "ouijemp",
    "ouijen",
    "ouijent",
    "ouijes",
    "out",
    "outañ",
    "outi",
    "outo",
    "ouzer",
    "ouzh",
    "ouzhin",
    "ouzhit",
    "ouzhoc'h",
    "ouzhomp",
    "ouzhor",
    "ouzhpenn",
    "ouzhpennik",
    "ouzoc'h",
    "ouzomp",
    "ouzon",
    "ouzont",
    "ouzout",
    "p'",
    "p:",
    "pa",
    "pad",
    "padal",
    "paf",
    "pan",
    "panevedeoc'h",
    "panevedo",
    "panevedomp",
    "panevedon",
    "panevedout",
    "panevet",
    "panevetañ",
    "paneveti",
    "pas",
    "paseet",
    "pe",
    "peadra",
    "peder",
    "pedervet",
    "pedervetvet",
    "pefe",
    "pegeit",
    "pegement",
    "pegen",
    "pegiz",
    "pegoulz",
    "pehini",
    "pelec'h",
    "pell",
    "pemod",
    "pemp",
    "pempved",
    "pemzek",
    "penaos",
    "penn",
    "peogwir",
    "peotramant",
    "pep",
    "perak",
    "perc'hennañ",
    "pergen",
    "permetiñ",
    "peseurt",
    "pet",
    "petiaoul",
    "petoare",
    "petra",
    "peur",
    "peurgetket",
    "peurheñvel",
    "peurliesañ",
    "peurvuiañ",
    "peus",
    "peustost",
    "peuz",
    "pevar",
    "pevare",
    "pevarevet",
    "pevarzek",
    "pez",
    "peze",
    "pezh",
    "pff",
    "pfft",
    "pfut",
    "picher",
    "pif",
    "pife",
    "pign",
    "pije",
    "pikol",
    "pitiaoul",
    "piv",
    "plaouf",
    "plok",
    "plouf",
    "po",
    "poa",
    "poelladus",
    "pof",
    "pok",
    "posupl",
    "pouah",
    "pourc'henn",
    "prest",
    "prestik",
    "prim",
    "prin",
    "provostapl",
    "pst",
    "pu",
    "pur",
    "r:",
    "ra",
    "rae",
    "raec'h",
    "raed",
    "raemp",
    "raen",
    "raent",
    "raes",
    "rafe",
    "rafec'h",
    "rafed",
    "rafemp",
    "rafen",
    "rafent",
    "rafes",
    "rag",
    "raimp",
    "raint",
    "raio",
    "raje",
    "rajec'h",
    "rajed",
    "rajemp",
    "rajen",
    "rajent",
    "rajes",
    "rak",
    "ral",
    "ran",
    "rankout",
    "raok",
    "razh",
    "re",
    "reas",
    "reer",
    "regennoù",
    "reiñ",
    "rejoc'h",
    "rejod",
    "rejomp",
    "rejont",
    "rejout",
    "rener",
    "rentañ",
    "reoc'h",
    "reomp",
    "reont",
    "reor",
    "reot",
    "resis",
    "ret",
    "reve",
    "rez",
    "ri",
    "rik",
    "rin",
    "ris",
    "rit",
    "rouez",
    "s:",
    "sac'h",
    "sant",
    "sav",
    "sañset",
    "se",
    "sed",
    "seitek",
    "seizh",
    "seizhvet",
    "sell",
    "sellit",
    "ser",
    "setu",
    "seul",
    "seurt",
    "siwazh",
    "skignañ",
    "skoaz",
    "skouer",
    "sort",
    "souden",
    "souvitañ",
    "soñj",
    "speriañ",
    "spririñ",
    "stad",
    "stlabezañ",
    "stop",
    "stranañ",
    "strewiñ",
    "strishaat",
    "stumm",
    "sujed",
    "surtoud",
    "t:",
    "ta",
    "taer",
    "tailh",
    "tak",
    "tal",
    "talvoudegezh",
    "tamm",
    "tanav",
    "taol",
    "te",
    "techet",
    "teir",
    "teirvet",
    "telt",
    "teltenn",
    "teus",
    "teut",
    "teuteu",
    "ti",
    "tik",
    "toa",
    "tok",
    "tost",
    "tostig",
    "toud",
    "touesk",
    "touez",
    "toull",
    "tra",
    "trantenn",
    "traoñ",
    "trawalc'h",
    "tre",
    "trede",
    "tregont",
    "tremenet",
    "tri",
    "trivet",
    "triwec'h",
    "trizek",
    "tro",
    "trugarez",
    "trumm",
    "tsoin",
    "tsouin",
    "tu",
    "tud",
    "u:",
    "ugent",
    "uhel",
    "uhelañ",
    "ul",
    "un",
    "unan",
    "unanez",
    "unanig",
    "unnek",
    "unnekvet",
    "ur",
    "urzh",
    "us",
    "v:",
    "va",
    "vale",
    "van",
    "vare",
    "vat",
    "vefe",
    "vefec'h",
    "vefed",
    "vefemp",
    "vefen",
    "vefent",
    "vefes",
    "vesk",
    "vete",
    "vez",
    "vezan",
    "vezañ",
    "veze",
    "vezec'h",
    "vezed",
    "vezemp",
    "vezen",
    "vezent",
    "vezer",
    "vezes",
    "vezez",
    "vezit",
    "vezomp",
    "vezont",
    "vi",
    "vihan",
    "vihanañ",
    "vije",
    "vijec'h",
    "vijed",
    "vijemp",
    "vijen",
    "vijent",
    "vijes",
    "viken",
    "vimp",
    "vin",
    "vint",
    "vior",
    "viot",
    "virviken",
    "viskoazh",
    "vlan",
    "vlaou",
    "vo",
    "vod",
    "voe",
    "voec'h",
    "voed",
    "voemp",
    "voen",
    "voent",
    "voes",
    "vont",
    "vostapl",
    "vrac'h",
    "vrasañ",
    "vremañ",
    "w:",
    "walc'h",
    "war",
    "warnañ",
    "warni",
    "warno",
    "warnoc'h",
    "warnomp",
    "warnon",
    "warnor",
    "warnout",
    "wazh",
    "wech",
    "wechoù",
    "well",
    "y:",
    "you",
    "youadenn",
    "youc'hadenn",
    "youc'hou",
    "z:",
    "za",
    "zan",
    "zaw",
    "zeu",
    "zi",
    "ziar",
    "zigarez",
    "ziget",
    "zindan",
    "zioc'h",
    "ziouzh",
    "zirak",
    "zivout",
    "ziwar",
    "ziwezhañ",
    "zo",
    "zoken",
    "zokenoc'h",
    "zouesk",
    "zouez",
    "zro",
    "zu"
  ];
  const bul = [
    "а",
    "автентичен",
    "аз",
    "ако",
    "ала",
    "бе",
    "без",
    "беше",
    "би",
    "бивш",
    "бивша",
    "бившо",
    "бил",
    "била",
    "били",
    "било",
    "благодаря",
    "близо",
    "бъдат",
    "бъде",
    "бяха",
    "в",
    "вас",
    "ваш",
    "ваша",
    "вероятно",
    "вече",
    "взема",
    "ви",
    "вие",
    "винаги",
    "внимава",
    "време",
    "все",
    "всеки",
    "всички",
    "всичко",
    "всяка",
    "във",
    "въпреки",
    "върху",
    "г",
    "ги",
    "главен",
    "главна",
    "главно",
    "глас",
    "го",
    "година",
    "години",
    "годишен",
    "д",
    "да",
    "дали",
    "два",
    "двама",
    "двамата",
    "две",
    "двете",
    "ден",
    "днес",
    "дни",
    "до",
    "добра",
    "добре",
    "добро",
    "добър",
    "докато",
    "докога",
    "дори",
    "досега",
    "доста",
    "друг",
    "друга",
    "други",
    "е",
    "евтин",
    "едва",
    "един",
    "една",
    "еднаква",
    "еднакви",
    "еднакъв",
    "едно",
    "екип",
    "ето",
    "живот",
    "за",
    "забавям",
    "зад",
    "заедно",
    "заради",
    "засега",
    "заспал",
    "затова",
    "защо",
    "защото",
    "и",
    "из",
    "или",
    "им",
    "има",
    "имат",
    "иска",
    "й",
    "каза",
    "как",
    "каква",
    "какво",
    "както",
    "какъв",
    "като",
    "кога",
    "когато",
    "което",
    "които",
    "кой",
    "който",
    "колко",
    "която",
    "къде",
    "където",
    "към",
    "лесен",
    "лесно",
    "ли",
    "лош",
    "м",
    "май",
    "малко",
    "ме",
    "между",
    "мек",
    "мен",
    "месец",
    "ми",
    "много",
    "мнозина",
    "мога",
    "могат",
    "може",
    "мокър",
    "моля",
    "момента",
    "му",
    "н",
    "на",
    "над",
    "назад",
    "най",
    "направи",
    "напред",
    "например",
    "нас",
    "не",
    "него",
    "нещо",
    "нея",
    "ни",
    "ние",
    "никой",
    "нито",
    "нищо",
    "но",
    "нов",
    "нова",
    "нови",
    "новина",
    "някои",
    "някой",
    "няколко",
    "няма",
    "обаче",
    "около",
    "освен",
    "особено",
    "от",
    "отгоре",
    "отново",
    "още",
    "пак",
    "по",
    "повече",
    "повечето",
    "под",
    "поне",
    "поради",
    "после",
    "почти",
    "прави",
    "пред",
    "преди",
    "през",
    "при",
    "пък",
    "първата",
    "първи",
    "първо",
    "пъти",
    "равен",
    "равна",
    "с",
    "са",
    "сам",
    "само",
    "се",
    "сега",
    "си",
    "син",
    "скоро",
    "след",
    "следващ",
    "сме",
    "смях",
    "според",
    "сред",
    "срещу",
    "сте",
    "съм",
    "със",
    "също",
    "т",
    "т.н.",
    "тази",
    "така",
    "такива",
    "такъв",
    "там",
    "твой",
    "те",
    "тези",
    "ти",
    "то",
    "това",
    "тогава",
    "този",
    "той",
    "толкова",
    "точно",
    "три",
    "трябва",
    "тук",
    "тъй",
    "тя",
    "тях",
    "у",
    "утре",
    "харесва",
    "хиляди",
    "ч",
    "часа",
    "че",
    "често",
    "чрез",
    "ще",
    "щом",
    "юмрук",
    "я",
    "як"
  ];
  const cat = [
    "a",
    "abans",
    "ací",
    "ah",
    "així",
    "això",
    "al",
    "aleshores",
    "algun",
    "alguna",
    "algunes",
    "alguns",
    "alhora",
    "allà",
    "allí",
    "allò",
    "als",
    "altra",
    "altre",
    "altres",
    "amb",
    "ambdues",
    "ambdós",
    "apa",
    "aquell",
    "aquella",
    "aquelles",
    "aquells",
    "aquest",
    "aquesta",
    "aquestes",
    "aquests",
    "aquí",
    "baix",
    "cada",
    "cadascuna",
    "cadascunes",
    "cadascuns",
    "cadascú",
    "com",
    "contra",
    "d'un",
    "d'una",
    "d'unes",
    "d'uns",
    "dalt",
    "de",
    "del",
    "dels",
    "des",
    "després",
    "dins",
    "dintre",
    "donat",
    "doncs",
    "durant",
    "e",
    "eh",
    "el",
    "els",
    "em",
    "en",
    "encara",
    "ens",
    "entre",
    "eren",
    "es",
    "esta",
    "estaven",
    "esteu",
    "està",
    "estàvem",
    "estàveu",
    "et",
    "etc",
    "ets",
    "fins",
    "fora",
    "gairebé",
    "ha",
    "han",
    "has",
    "havia",
    "he",
    "hem",
    "heu",
    "hi",
    "ho",
    "i",
    "igual",
    "iguals",
    "ja",
    "l'hi",
    "la",
    "les",
    "li",
    "li'n",
    "llavors",
    "m'he",
    "ma",
    "mal",
    "malgrat",
    "mateix",
    "mateixa",
    "mateixes",
    "mateixos",
    "me",
    "mentre",
    "meu",
    "meus",
    "meva",
    "meves",
    "molt",
    "molta",
    "moltes",
    "molts",
    "mon",
    "mons",
    "més",
    "n'he",
    "n'hi",
    "ne",
    "ni",
    "no",
    "nogensmenys",
    "només",
    "nosaltres",
    "nostra",
    "nostre",
    "nostres",
    "o",
    "oh",
    "oi",
    "on",
    "pas",
    "pel",
    "pels",
    "per",
    "perquè",
    "però",
    "poc",
    "poca",
    "pocs",
    "poques",
    "potser",
    "propi",
    "qual",
    "quals",
    "quan",
    "quant",
    "que",
    "quelcom",
    "qui",
    "quin",
    "quina",
    "quines",
    "quins",
    "què",
    "s'ha",
    "s'han",
    "sa",
    "semblant",
    "semblants",
    "ses",
    "seu",
    "seus",
    "seva",
    "seves",
    "si",
    "sobre",
    "sobretot",
    "solament",
    "sols",
    "son",
    "sons",
    "sota",
    "sou",
    "sóc",
    "són",
    "t'ha",
    "t'han",
    "t'he",
    "ta",
    "tal",
    "també",
    "tampoc",
    "tan",
    "tant",
    "tanta",
    "tantes",
    "teu",
    "teus",
    "teva",
    "teves",
    "ton",
    "tons",
    "tot",
    "tota",
    "totes",
    "tots",
    "un",
    "una",
    "unes",
    "uns",
    "us",
    "va",
    "vaig",
    "vam",
    "van",
    "vas",
    "veu",
    "vosaltres",
    "vostra",
    "vostre",
    "vostres",
    "érem",
    "éreu",
    "és"
  ];
  const zho = [
    "的",
    "地",
    "得",
    "和",
    "跟",
    "与",
    "及",
    "向",
    "并",
    "等",
    "更",
    "已",
    "含",
    "做",
    "我",
    "你",
    "他",
    "她",
    "们",
    "某",
    "该",
    "各",
    "每",
    "这",
    "那",
    "哪",
    "什",
    "么",
    "谁",
    "年",
    "月",
    "日",
    "时",
    "分",
    "秒",
    "几",
    "多",
    "来",
    "在",
    "就",
    "又",
    "很",
    "呢",
    "吧",
    "吗",
    "了",
    "嘛",
    "哇",
    "儿",
    "哼",
    "啊",
    "嗯",
    "是",
    "着",
    "都",
    "不",
    "说",
    "也",
    "看",
    "把",
    "还",
    "个",
    "有",
    "小",
    "到",
    "一",
    "为",
    "中",
    "于",
    "对",
    "会",
    "之",
    "第",
    "此",
    "或",
    "共",
    "按",
    "请"
  ];
  const hrv = [
    "a",
    "ako",
    "ali",
    "bi",
    "bih",
    "bila",
    "bili",
    "bilo",
    "bio",
    "bismo",
    "biste",
    "biti",
    "bumo",
    "da",
    "do",
    "duž",
    "ga",
    "hoće",
    "hoćemo",
    "hoćete",
    "hoćeš",
    "hoću",
    "i",
    "iako",
    "ih",
    "ili",
    "iz",
    "ja",
    "je",
    "jedna",
    "jedne",
    "jedno",
    "jer",
    "jesam",
    "jesi",
    "jesmo",
    "jest",
    "jeste",
    "jesu",
    "jim",
    "joj",
    "još",
    "ju",
    "kada",
    "kako",
    "kao",
    "koja",
    "koje",
    "koji",
    "kojima",
    "koju",
    "kroz",
    "li",
    "me",
    "mene",
    "meni",
    "mi",
    "mimo",
    "moj",
    "moja",
    "moje",
    "mu",
    "na",
    "nad",
    "nakon",
    "nam",
    "nama",
    "nas",
    "naš",
    "naša",
    "naše",
    "našeg",
    "ne",
    "nego",
    "neka",
    "neki",
    "nekog",
    "neku",
    "nema",
    "netko",
    "neće",
    "nećemo",
    "nećete",
    "nećeš",
    "neću",
    "nešto",
    "ni",
    "nije",
    "nikoga",
    "nikoje",
    "nikoju",
    "nisam",
    "nisi",
    "nismo",
    "niste",
    "nisu",
    "njega",
    "njegov",
    "njegova",
    "njegovo",
    "njemu",
    "njezin",
    "njezina",
    "njezino",
    "njih",
    "njihov",
    "njihova",
    "njihovo",
    "njim",
    "njima",
    "njoj",
    "nju",
    "no",
    "o",
    "od",
    "odmah",
    "on",
    "ona",
    "oni",
    "ono",
    "ova",
    "pa",
    "pak",
    "po",
    "pod",
    "pored",
    "prije",
    "s",
    "sa",
    "sam",
    "samo",
    "se",
    "sebe",
    "sebi",
    "si",
    "smo",
    "ste",
    "su",
    "sve",
    "svi",
    "svog",
    "svoj",
    "svoja",
    "svoje",
    "svom",
    "ta",
    "tada",
    "taj",
    "tako",
    "te",
    "tebe",
    "tebi",
    "ti",
    "to",
    "toj",
    "tome",
    "tu",
    "tvoj",
    "tvoja",
    "tvoje",
    "u",
    "uz",
    "vam",
    "vama",
    "vas",
    "vaš",
    "vaša",
    "vaše",
    "već",
    "vi",
    "vrlo",
    "za",
    "zar",
    "će",
    "ćemo",
    "ćete",
    "ćeš",
    "ću",
    "što"
  ];
  const ces = [
    "a",
    "aby",
    "ahoj",
    "aj",
    "ale",
    "anebo",
    "ani",
    "ano",
    "asi",
    "aspoň",
    "atd",
    "atp",
    "ačkoli",
    "až",
    "bez",
    "beze",
    "blízko",
    "bohužel",
    "brzo",
    "bude",
    "budem",
    "budeme",
    "budete",
    "budeš",
    "budou",
    "budu",
    "by",
    "byl",
    "byla",
    "byli",
    "bylo",
    "byly",
    "bys",
    "být",
    "během",
    "chce",
    "chceme",
    "chcete",
    "chceš",
    "chci",
    "chtít",
    "chtějí",
    "chut'",
    "chuti",
    "co",
    "což",
    "cz",
    "daleko",
    "další",
    "den",
    "deset",
    "devatenáct",
    "devět",
    "dnes",
    "do",
    "dobrý",
    "docela",
    "dva",
    "dvacet",
    "dvanáct",
    "dvě",
    "dál",
    "dále",
    "děkovat",
    "děkujeme",
    "děkuji",
    "ho",
    "hodně",
    "i",
    "jak",
    "jakmile",
    "jako",
    "jakož",
    "jde",
    "je",
    "jeden",
    "jedenáct",
    "jedna",
    "jedno",
    "jednou",
    "jedou",
    "jeho",
    "jehož",
    "jej",
    "jejich",
    "její",
    "jelikož",
    "jemu",
    "jen",
    "jenom",
    "jestli",
    "jestliže",
    "ještě",
    "jež",
    "ji",
    "jich",
    "jimi",
    "jinak",
    "jiné",
    "již",
    "jsem",
    "jseš",
    "jsi",
    "jsme",
    "jsou",
    "jste",
    "já",
    "jí",
    "jím",
    "jíž",
    "k",
    "kam",
    "kde",
    "kdo",
    "kdy",
    "když",
    "ke",
    "kolik",
    "kromě",
    "kterou",
    "která",
    "které",
    "který",
    "kteří",
    "kvůli",
    "mají",
    "mezi",
    "mi",
    "mne",
    "mnou",
    "mně",
    "moc",
    "mohl",
    "mohou",
    "moje",
    "moji",
    "možná",
    "musí",
    "my",
    "má",
    "málo",
    "mám",
    "máme",
    "máte",
    "máš",
    "mé",
    "mí",
    "mít",
    "mě",
    "můj",
    "může",
    "na",
    "nad",
    "nade",
    "napište",
    "naproti",
    "načež",
    "naše",
    "naši",
    "ne",
    "nebo",
    "nebyl",
    "nebyla",
    "nebyli",
    "nebyly",
    "nedělají",
    "nedělá",
    "nedělám",
    "neděláme",
    "neděláte",
    "neděláš",
    "neg",
    "nejsi",
    "nejsou",
    "nemají",
    "nemáme",
    "nemáte",
    "neměl",
    "není",
    "nestačí",
    "nevadí",
    "než",
    "nic",
    "nich",
    "nimi",
    "nové",
    "nový",
    "nula",
    "nám",
    "námi",
    "nás",
    "náš",
    "ním",
    "ně",
    "něco",
    "nějak",
    "někde",
    "někdo",
    "němu",
    "němuž",
    "o",
    "od",
    "ode",
    "on",
    "ona",
    "oni",
    "ono",
    "ony",
    "osm",
    "osmnáct",
    "pak",
    "patnáct",
    "po",
    "pod",
    "podle",
    "pokud",
    "potom",
    "pouze",
    "pozdě",
    "pořád",
    "pravé",
    "pro",
    "prostě",
    "prosím",
    "proti",
    "proto",
    "protože",
    "proč",
    "první",
    "pta",
    "pět",
    "před",
    "přes",
    "přese",
    "při",
    "přičemž",
    "re",
    "rovně",
    "s",
    "se",
    "sedm",
    "sedmnáct",
    "si",
    "skoro",
    "smí",
    "smějí",
    "snad",
    "spolu",
    "sta",
    "sto",
    "strana",
    "sté",
    "své",
    "svých",
    "svým",
    "svými",
    "ta",
    "tady",
    "tak",
    "takhle",
    "taky",
    "také",
    "takže",
    "tam",
    "tamhle",
    "tamhleto",
    "tamto",
    "tato",
    "tebe",
    "tebou",
    "ted'",
    "tedy",
    "ten",
    "tento",
    "teto",
    "ti",
    "tipy",
    "tisíc",
    "tisíce",
    "to",
    "tobě",
    "tohle",
    "toho",
    "tohoto",
    "tom",
    "tomto",
    "tomu",
    "tomuto",
    "toto",
    "trošku",
    "tu",
    "tuto",
    "tvoje",
    "tvá",
    "tvé",
    "tvůj",
    "ty",
    "tyto",
    "téma",
    "tím",
    "tímto",
    "tě",
    "těm",
    "těmu",
    "třeba",
    "tři",
    "třináct",
    "u",
    "určitě",
    "už",
    "v",
    "vaše",
    "vaši",
    "ve",
    "vedle",
    "večer",
    "vlastně",
    "vy",
    "vám",
    "vámi",
    "vás",
    "váš",
    "více",
    "však",
    "všechno",
    "všichni",
    "vůbec",
    "vždy",
    "z",
    "za",
    "zatímco",
    "zač",
    "zda",
    "zde",
    "ze",
    "zprávy",
    "zpět",
    "čau",
    "či",
    "článku",
    "články",
    "čtrnáct",
    "čtyři",
    "šest",
    "šestnáct",
    "že"
  ];
  const dan = [
    "ad",
    "af",
    "aldrig",
    "alle",
    "alt",
    "anden",
    "andet",
    "andre",
    "at",
    "bare",
    "begge",
    "blev",
    "blive",
    "bliver",
    "da",
    "de",
    "dem",
    "den",
    "denne",
    "der",
    "deres",
    "det",
    "dette",
    "dig",
    "din",
    "dine",
    "disse",
    "dit",
    "dog",
    "du",
    "efter",
    "ej",
    "eller",
    "en",
    "end",
    "ene",
    "eneste",
    "enhver",
    "er",
    "et",
    "far",
    "fem",
    "fik",
    "fire",
    "flere",
    "fleste",
    "for",
    "fordi",
    "forrige",
    "fra",
    "få",
    "får",
    "før",
    "god",
    "godt",
    "ham",
    "han",
    "hans",
    "har",
    "havde",
    "have",
    "hej",
    "helt",
    "hende",
    "hendes",
    "her",
    "hos",
    "hun",
    "hvad",
    "hvem",
    "hver",
    "hvilken",
    "hvis",
    "hvor",
    "hvordan",
    "hvorfor",
    "hvornår",
    "i",
    "ikke",
    "ind",
    "ingen",
    "intet",
    "ja",
    "jeg",
    "jer",
    "jeres",
    "jo",
    "kan",
    "kom",
    "komme",
    "kommer",
    "kun",
    "kunne",
    "lad",
    "lav",
    "lidt",
    "lige",
    "lille",
    "man",
    "mand",
    "mange",
    "med",
    "meget",
    "men",
    "mens",
    "mere",
    "mig",
    "min",
    "mine",
    "mit",
    "mod",
    "må",
    "ned",
    "nej",
    "ni",
    "nogen",
    "noget",
    "nogle",
    "nu",
    "ny",
    "nyt",
    "når",
    "nær",
    "næste",
    "næsten",
    "og",
    "også",
    "okay",
    "om",
    "op",
    "os",
    "otte",
    "over",
    "på",
    "se",
    "seks",
    "selv",
    "ser",
    "ses",
    "sig",
    "sige",
    "sin",
    "sine",
    "sit",
    "skal",
    "skulle",
    "som",
    "stor",
    "store",
    "syv",
    "så",
    "sådan",
    "tag",
    "tage",
    "thi",
    "ti",
    "til",
    "to",
    "tre",
    "ud",
    "under",
    "var",
    "ved",
    "vi",
    "vil",
    "ville",
    "vor",
    "vores",
    "være",
    "været"
  ];
  const nld = [
    "aan",
    "af",
    "al",
    "alles",
    "als",
    "altijd",
    "andere",
    "ben",
    "bij",
    "daar",
    "dan",
    "dat",
    "de",
    "der",
    "deze",
    "die",
    "dit",
    "doch",
    "doen",
    "door",
    "dus",
    "een",
    "eens",
    "en",
    "er",
    "ge",
    "geen",
    "geweest",
    "haar",
    "had",
    "heb",
    "hebben",
    "heeft",
    "hem",
    "het",
    "hier",
    "hij",
    "hoe",
    "hun",
    "iemand",
    "iets",
    "ik",
    "in",
    "is",
    "ja",
    "je ",
    "kan",
    "kon",
    "kunnen",
    "maar",
    "me",
    "meer",
    "men",
    "met",
    "mij",
    "mijn",
    "moet",
    "na",
    "naar",
    "niet",
    "niets",
    "nog",
    "nu",
    "of",
    "om",
    "omdat",
    "ons",
    "ook",
    "op",
    "over",
    "reeds",
    "te",
    "tegen",
    "toch",
    "toen",
    "tot",
    "u",
    "uit",
    "uw",
    "van",
    "veel",
    "voor",
    "want",
    "waren",
    "was",
    "wat",
    "we",
    "wel",
    "werd",
    "wezen",
    "wie",
    "wij",
    "wil",
    "worden",
    "zal",
    "ze",
    "zei",
    "zelf",
    "zich",
    "zij",
    "zijn",
    "zo",
    "zonder",
    "zou"
  ];
  const eng = [
    "about",
    "after",
    "all",
    "also",
    "am",
    "an",
    "and",
    "another",
    "any",
    "are",
    "as",
    "at",
    "be",
    "because",
    "been",
    "before",
    "being",
    "between",
    "both",
    "but",
    "by",
    "came",
    "can",
    "come",
    "could",
    "did",
    "do",
    "each",
    "for",
    "from",
    "get",
    "got",
    "has",
    "had",
    "he",
    "have",
    "her",
    "here",
    "him",
    "himself",
    "his",
    "how",
    "if",
    "in",
    "into",
    "is",
    "it",
    "like",
    "make",
    "many",
    "me",
    "might",
    "more",
    "most",
    "much",
    "must",
    "my",
    "never",
    "now",
    "of",
    "on",
    "only",
    "or",
    "other",
    "our",
    "out",
    "over",
    "said",
    "same",
    "should",
    "since",
    "some",
    "still",
    "such",
    "take",
    "than",
    "that",
    "the",
    "their",
    "them",
    "then",
    "there",
    "these",
    "they",
    "this",
    "those",
    "through",
    "to",
    "too",
    "under",
    "up",
    "very",
    "was",
    "way",
    "we",
    "well",
    "were",
    "what",
    "where",
    "which",
    "while",
    "who",
    "with",
    "would",
    "you",
    "your",
    "a",
    "i"
  ];
  const epo = [
    "adiaŭ",
    "ajn",
    "al",
    "ankoraŭ",
    "antaŭ",
    "aŭ",
    "bonan",
    "bonvole",
    "bonvolu",
    "bv",
    "ci",
    "cia",
    "cian",
    "cin",
    "d-ro",
    "da",
    "de",
    "dek",
    "deka",
    "do",
    "doktor'",
    "doktoro",
    "du",
    "dua",
    "dum",
    "eble",
    "ekz",
    "ekzemple",
    "en",
    "estas",
    "estis",
    "estos",
    "estu",
    "estus",
    "eĉ",
    "f-no",
    "feliĉan",
    "for",
    "fraŭlino",
    "ha",
    "havas",
    "havis",
    "havos",
    "havu",
    "havus",
    "he",
    "ho",
    "hu",
    "ili",
    "ilia",
    "ilian",
    "ilin",
    "inter",
    "io",
    "ion",
    "iu",
    "iujn",
    "iun",
    "ja",
    "jam",
    "je",
    "jes",
    "k",
    "kaj",
    "ke",
    "kio",
    "kion",
    "kiu",
    "kiujn",
    "kiun",
    "kvankam",
    "kvar",
    "kvara",
    "kvazaŭ",
    "kvin",
    "kvina",
    "la",
    "li",
    "lia",
    "lian",
    "lin",
    "malantaŭ",
    "male",
    "malgraŭ",
    "mem",
    "mi",
    "mia",
    "mian",
    "min",
    "minus",
    "naŭ",
    "naŭa",
    "ne",
    "nek",
    "nenio",
    "nenion",
    "neniu",
    "neniun",
    "nepre",
    "ni",
    "nia",
    "nian",
    "nin",
    "nu",
    "nun",
    "nur",
    "ok",
    "oka",
    "oni",
    "onia",
    "onian",
    "onin",
    "plej",
    "pli",
    "plu",
    "plus",
    "por",
    "post",
    "preter",
    "s-no",
    "s-ro",
    "se",
    "sed",
    "sep",
    "sepa",
    "ses",
    "sesa",
    "si",
    "sia",
    "sian",
    "sin",
    "sinjor'",
    "sinjorino",
    "sinjoro",
    "sub",
    "super",
    "supren",
    "sur",
    "tamen",
    "tio",
    "tion",
    "tiu",
    "tiujn",
    "tiun",
    "tra",
    "tri",
    "tria",
    "tuj",
    "tute",
    "unu",
    "unua",
    "ve",
    "verŝajne",
    "vi",
    "via",
    "vian",
    "vin",
    "ĉi",
    "ĉio",
    "ĉion",
    "ĉiu",
    "ĉiujn",
    "ĉiun",
    "ĉu",
    "ĝi",
    "ĝia",
    "ĝian",
    "ĝin",
    "ĝis",
    "ĵus",
    "ŝi",
    "ŝia",
    "ŝin"
  ];
  const est = [
    "aga",
    "ei",
    "et",
    "ja",
    "jah",
    "kas",
    "kui",
    "kõik",
    "ma",
    "me",
    "mida",
    "midagi",
    "mind",
    "minu",
    "mis",
    "mu",
    "mul",
    "mulle",
    "nad",
    "nii",
    "oled",
    "olen",
    "oli",
    "oma",
    "on",
    "pole",
    "sa",
    "seda",
    "see",
    "selle",
    "siin",
    "siis",
    "ta",
    "te",
    "ära"
  ];
  const fin = [
    "ja",
    "on",
    "oli",
    "hän",
    "vuonna",
    "myös",
    "joka",
    "se",
    "sekä",
    "sen",
    "mutta",
    "ei",
    "ovat",
    "hänen",
    "n",
    "kanssa",
    "vuoden",
    "jälkeen",
    "että",
    "s",
    "tai",
    "jonka",
    "jossa",
    "mukaan",
    "kun",
    "muun",
    "muassa",
    "hänet",
    "olivat",
    "kuitenkin",
    "noin",
    "vuosina",
    "aikana",
    "lisäksi",
    "kaksi",
    "kuin",
    "ollut",
    "the",
    "myöhemmin",
    "eli",
    "vain",
    "teki",
    "mm",
    "jotka",
    "ennen",
    "ensimmäinen",
    "a",
    "9",
    "jo",
    "kuten",
    "yksi",
    "ensimmäisen",
    "vastaan",
    "tämän",
    "vuodesta",
    "sitä",
    "voi",
    "luvun",
    "luvulla",
    "of",
    "ole",
    "kauden",
    "osa",
    "esimerkiksi",
    "jolloin",
    "yli",
    "de",
    "kaudella",
    "eri",
    "sillä",
    "kolme",
    "he",
    "vuotta"
  ];
  const fra = [
    "être",
    "avoir",
    "faire",
    "a",
    "au",
    "aux",
    "avec",
    "ce",
    "ces",
    "dans",
    "de",
    "des",
    "du",
    "elle",
    "en",
    "et",
    "eux",
    "il",
    "je",
    "la",
    "le",
    "leur",
    "lui",
    "ma",
    "mais",
    "me",
    "même",
    "mes",
    "moi",
    "mon",
    "ne",
    "nos",
    "notre",
    "nous",
    "on",
    "ou",
    "où",
    "par",
    "pas",
    "pour",
    "qu",
    "que",
    "qui",
    "sa",
    "se",
    "ses",
    "son",
    "sur",
    "ta",
    "te",
    "tes",
    "toi",
    "ton",
    "tu",
    "un",
    "une",
    "vos",
    "votre",
    "vous",
    "c",
    "d",
    "j",
    "l",
    "à",
    "m",
    "n",
    "s",
    "t",
    "y",
    "été",
    "étée",
    "étées",
    "étés",
    "étant",
    "suis",
    "es",
    "est",
    "sommes",
    "êtes",
    "sont",
    "serai",
    "seras",
    "sera",
    "serons",
    "serez",
    "seront",
    "serais",
    "serait",
    "serions",
    "seriez",
    "seraient",
    "étais",
    "était",
    "étions",
    "étiez",
    "étaient",
    "fus",
    "fut",
    "fûmes",
    "fûtes",
    "furent",
    "sois",
    "soit",
    "soyons",
    "soyez",
    "soient",
    "fusse",
    "fusses",
    "fût",
    "fussions",
    "fussiez",
    "fussent",
    "ayant",
    "eu",
    "eue",
    "eues",
    "eus",
    "ai",
    "as",
    "avons",
    "avez",
    "ont",
    "aurai",
    "auras",
    "aura",
    "aurons",
    "aurez",
    "auront",
    "aurais",
    "aurait",
    "aurions",
    "auriez",
    "auraient",
    "avais",
    "avait",
    "avions",
    "aviez",
    "avaient",
    "eut",
    "eûmes",
    "eûtes",
    "eurent",
    "aie",
    "aies",
    "ait",
    "ayons",
    "ayez",
    "aient",
    "eusse",
    "eusses",
    "eût",
    "eussions",
    "eussiez",
    "eussent",
    "ceci",
    "cela",
    "cet",
    "cette",
    "ici",
    "ils",
    "les",
    "leurs",
    "quel",
    "quels",
    "quelle",
    "quelles",
    "sans",
    "soi"
  ];
  const glg = [
    "a",
    "alí",
    "ao",
    "aos",
    "aquel",
    "aquela",
    "aquelas",
    "aqueles",
    "aquilo",
    "aquí",
    "as",
    "así",
    "aínda",
    "ben",
    "cando",
    "che",
    "co",
    "coa",
    "coas",
    "comigo",
    "con",
    "connosco",
    "contigo",
    "convosco",
    "cos",
    "cun",
    "cunha",
    "cunhas",
    "cuns",
    "da",
    "dalgunha",
    "dalgunhas",
    "dalgún",
    "dalgúns",
    "das",
    "de",
    "del",
    "dela",
    "delas",
    "deles",
    "desde",
    "deste",
    "do",
    "dos",
    "dun",
    "dunha",
    "dunhas",
    "duns",
    "e",
    "el",
    "ela",
    "elas",
    "eles",
    "en",
    "era",
    "eran",
    "esa",
    "esas",
    "ese",
    "eses",
    "esta",
    "estaba",
    "estar",
    "este",
    "estes",
    "estiven",
    "estou",
    "está",
    "están",
    "eu",
    "facer",
    "foi",
    "foron",
    "fun",
    "había",
    "hai",
    "iso",
    "isto",
    "la",
    "las",
    "lle",
    "lles",
    "lo",
    "los",
    "mais",
    "me",
    "meu",
    "meus",
    "min",
    "miña",
    "miñas",
    "moi",
    "na",
    "nas",
    "neste",
    "nin",
    "no",
    "non",
    "nos",
    "nosa",
    "nosas",
    "noso",
    "nosos",
    "nun",
    "nunha",
    "nunhas",
    "nuns",
    "nós",
    "o",
    "os",
    "ou",
    "para",
    "pero",
    "pode",
    "pois",
    "pola",
    "polas",
    "polo",
    "polos",
    "por",
    "que",
    "se",
    "senón",
    "ser",
    "seu",
    "seus",
    "sexa",
    "sido",
    "sobre",
    "súa",
    "súas",
    "tamén",
    "tan",
    "te",
    "ten",
    "ter",
    "teu",
    "teus",
    "teñen",
    "teño",
    "ti",
    "tido",
    "tiven",
    "tiña",
    "túa",
    "túas",
    "un",
    "unha",
    "unhas",
    "uns",
    "vos",
    "vosa",
    "vosas",
    "voso",
    "vosos",
    "vós",
    "á",
    "é",
    "ó",
    "ós"
  ];
  const deu = [
    "a",
    "ab",
    "aber",
    "ach",
    "acht",
    "achte",
    "achten",
    "achter",
    "achtes",
    "ag",
    "alle",
    "allein",
    "allem",
    "allen",
    "aller",
    "allerdings",
    "alles",
    "allgemeinen",
    "als",
    "also",
    "am",
    "an",
    "ander",
    "andere",
    "anderem",
    "anderen",
    "anderer",
    "anderes",
    "anderm",
    "andern",
    "anderr",
    "anders",
    "au",
    "auch",
    "auf",
    "aus",
    "ausser",
    "ausserdem",
    "außer",
    "außerdem",
    "b",
    "bald",
    "bei",
    "beide",
    "beiden",
    "beim",
    "beispiel",
    "bekannt",
    "bereits",
    "besonders",
    "besser",
    "besten",
    "bin",
    "bis",
    "bisher",
    "bist",
    "c",
    "d",
    "d.h",
    "da",
    "dabei",
    "dadurch",
    "dafür",
    "dagegen",
    "daher",
    "dahin",
    "dahinter",
    "damals",
    "damit",
    "danach",
    "daneben",
    "dank",
    "dann",
    "daran",
    "darauf",
    "daraus",
    "darf",
    "darfst",
    "darin",
    "darum",
    "darunter",
    "darüber",
    "das",
    "dasein",
    "daselbst",
    "dass",
    "dasselbe",
    "davon",
    "davor",
    "dazu",
    "dazwischen",
    "daß",
    "dein",
    "deine",
    "deinem",
    "deinen",
    "deiner",
    "deines",
    "dem",
    "dementsprechend",
    "demgegenüber",
    "demgemäss",
    "demgemäß",
    "demselben",
    "demzufolge",
    "den",
    "denen",
    "denn",
    "denselben",
    "der",
    "deren",
    "derer",
    "derjenige",
    "derjenigen",
    "dermassen",
    "dermaßen",
    "derselbe",
    "derselben",
    "des",
    "deshalb",
    "desselben",
    "dessen",
    "deswegen",
    "dich",
    "die",
    "diejenige",
    "diejenigen",
    "dies",
    "diese",
    "dieselbe",
    "dieselben",
    "diesem",
    "diesen",
    "dieser",
    "dieses",
    "dir",
    "doch",
    "dort",
    "drei",
    "drin",
    "dritte",
    "dritten",
    "dritter",
    "drittes",
    "du",
    "durch",
    "durchaus",
    "durfte",
    "durften",
    "dürfen",
    "dürft",
    "e",
    "eben",
    "ebenso",
    "ehrlich",
    "ei",
    "ei, ",
    "eigen",
    "eigene",
    "eigenen",
    "eigener",
    "eigenes",
    "ein",
    "einander",
    "eine",
    "einem",
    "einen",
    "einer",
    "eines",
    "einig",
    "einige",
    "einigem",
    "einigen",
    "einiger",
    "einiges",
    "einmal",
    "eins",
    "elf",
    "en",
    "ende",
    "endlich",
    "entweder",
    "er",
    "ernst",
    "erst",
    "erste",
    "ersten",
    "erster",
    "erstes",
    "es",
    "etwa",
    "etwas",
    "euch",
    "euer",
    "eure",
    "eurem",
    "euren",
    "eurer",
    "eures",
    "f",
    "folgende",
    "früher",
    "fünf",
    "fünfte",
    "fünften",
    "fünfter",
    "fünftes",
    "für",
    "g",
    "gab",
    "ganz",
    "ganze",
    "ganzen",
    "ganzer",
    "ganzes",
    "gar",
    "gedurft",
    "gegen",
    "gegenüber",
    "gehabt",
    "gehen",
    "geht",
    "gekannt",
    "gekonnt",
    "gemacht",
    "gemocht",
    "gemusst",
    "genug",
    "gerade",
    "gern",
    "gesagt",
    "geschweige",
    "gewesen",
    "gewollt",
    "geworden",
    "gibt",
    "ging",
    "gleich",
    "gott",
    "gross",
    "grosse",
    "grossen",
    "grosser",
    "grosses",
    "groß",
    "große",
    "großen",
    "großer",
    "großes",
    "gut",
    "gute",
    "guter",
    "gutes",
    "h",
    "hab",
    "habe",
    "haben",
    "habt",
    "hast",
    "hat",
    "hatte",
    "hatten",
    "hattest",
    "hattet",
    "heisst",
    "her",
    "heute",
    "hier",
    "hin",
    "hinter",
    "hoch",
    "hätte",
    "hätten",
    "i",
    "ich",
    "ihm",
    "ihn",
    "ihnen",
    "ihr",
    "ihre",
    "ihrem",
    "ihren",
    "ihrer",
    "ihres",
    "im",
    "immer",
    "in",
    "indem",
    "infolgedessen",
    "ins",
    "irgend",
    "ist",
    "j",
    "ja",
    "jahr",
    "jahre",
    "jahren",
    "je",
    "jede",
    "jedem",
    "jeden",
    "jeder",
    "jedermann",
    "jedermanns",
    "jedes",
    "jedoch",
    "jemand",
    "jemandem",
    "jemanden",
    "jene",
    "jenem",
    "jenen",
    "jener",
    "jenes",
    "jetzt",
    "k",
    "kam",
    "kann",
    "kannst",
    "kaum",
    "kein",
    "keine",
    "keinem",
    "keinen",
    "keiner",
    "keines",
    "kleine",
    "kleinen",
    "kleiner",
    "kleines",
    "kommen",
    "kommt",
    "konnte",
    "konnten",
    "kurz",
    "können",
    "könnt",
    "könnte",
    "l",
    "lang",
    "lange",
    "leicht",
    "leide",
    "lieber",
    "los",
    "m",
    "machen",
    "macht",
    "machte",
    "mag",
    "magst",
    "mahn",
    "mal",
    "man",
    "manche",
    "manchem",
    "manchen",
    "mancher",
    "manches",
    "mann",
    "mehr",
    "mein",
    "meine",
    "meinem",
    "meinen",
    "meiner",
    "meines",
    "mensch",
    "menschen",
    "mich",
    "mir",
    "mit",
    "mittel",
    "mochte",
    "mochten",
    "morgen",
    "muss",
    "musst",
    "musste",
    "mussten",
    "muß",
    "mußt",
    "möchte",
    "mögen",
    "möglich",
    "mögt",
    "müssen",
    "müsst",
    "müßt",
    "n",
    "na",
    "nach",
    "nachdem",
    "nahm",
    "natürlich",
    "neben",
    "nein",
    "neue",
    "neuen",
    "neun",
    "neunte",
    "neunten",
    "neunter",
    "neuntes",
    "nicht",
    "nichts",
    "nie",
    "niemand",
    "niemandem",
    "niemanden",
    "noch",
    "nun",
    "nur",
    "o",
    "ob",
    "oben",
    "oder",
    "offen",
    "oft",
    "ohne",
    "ordnung",
    "p",
    "q",
    "r",
    "recht",
    "rechte",
    "rechten",
    "rechter",
    "rechtes",
    "richtig",
    "rund",
    "s",
    "sa",
    "sache",
    "sagt",
    "sagte",
    "sah",
    "satt",
    "schlecht",
    "schluss",
    "schon",
    "sechs",
    "sechste",
    "sechsten",
    "sechster",
    "sechstes",
    "sehr",
    "sei",
    "seid",
    "seien",
    "sein",
    "seine",
    "seinem",
    "seinen",
    "seiner",
    "seines",
    "seit",
    "seitdem",
    "selbst",
    "sich",
    "sie",
    "sieben",
    "siebente",
    "siebenten",
    "siebenter",
    "siebentes",
    "sind",
    "so",
    "solang",
    "solche",
    "solchem",
    "solchen",
    "solcher",
    "solches",
    "soll",
    "sollen",
    "sollst",
    "sollt",
    "sollte",
    "sollten",
    "sondern",
    "sonst",
    "soweit",
    "sowie",
    "später",
    "startseite",
    "statt",
    "steht",
    "suche",
    "t",
    "tag",
    "tage",
    "tagen",
    "tat",
    "teil",
    "tel",
    "tritt",
    "trotzdem",
    "tun",
    "u",
    "uhr",
    "um",
    "und",
    "und?",
    "uns",
    "unse",
    "unsem",
    "unsen",
    "unser",
    "unsere",
    "unserer",
    "unses",
    "unter",
    "v",
    "vergangenen",
    "viel",
    "viele",
    "vielem",
    "vielen",
    "vielleicht",
    "vier",
    "vierte",
    "vierten",
    "vierter",
    "viertes",
    "vom",
    "von",
    "vor",
    "w",
    "wahr?",
    "wann",
    "war",
    "waren",
    "warst",
    "wart",
    "warum",
    "was",
    "weg",
    "wegen",
    "weil",
    "weit",
    "weiter",
    "weitere",
    "weiteren",
    "weiteres",
    "welche",
    "welchem",
    "welchen",
    "welcher",
    "welches",
    "wem",
    "wen",
    "wenig",
    "wenige",
    "weniger",
    "weniges",
    "wenigstens",
    "wenn",
    "wer",
    "werde",
    "werden",
    "werdet",
    "weshalb",
    "wessen",
    "wie",
    "wieder",
    "wieso",
    "will",
    "willst",
    "wir",
    "wird",
    "wirklich",
    "wirst",
    "wissen",
    "wo",
    "woher",
    "wohin",
    "wohl",
    "wollen",
    "wollt",
    "wollte",
    "wollten",
    "worden",
    "wurde",
    "wurden",
    "während",
    "währenddem",
    "währenddessen",
    "wäre",
    "würde",
    "würden",
    "x",
    "y",
    "z",
    "z.b",
    "zehn",
    "zehnte",
    "zehnten",
    "zehnter",
    "zehntes",
    "zeit",
    "zu",
    "zuerst",
    "zugleich",
    "zum",
    "zunächst",
    "zur",
    "zurück",
    "zusammen",
    "zwanzig",
    "zwar",
    "zwei",
    "zweite",
    "zweiten",
    "zweiter",
    "zweites",
    "zwischen",
    "zwölf",
    "über",
    "überhaupt",
    "übrigens"
  ];
  const ell = [
    "αλλα",
    "αν",
    "αντι",
    "απο",
    "αυτα",
    "αυτεσ",
    "αυτη",
    "αυτο",
    "αυτοι",
    "αυτοσ",
    "αυτουσ",
    "αυτων",
    "για",
    "δε",
    "δεν",
    "εαν",
    "ειμαι",
    "ειμαστε",
    "ειναι",
    "εισαι",
    "ειστε",
    "εκεινα",
    "εκεινεσ",
    "εκεινη",
    "εκεινο",
    "εκεινοι",
    "εκεινοσ",
    "εκεινουσ",
    "εκεινων",
    "ενω",
    "επι",
    "η",
    "θα",
    "ισωσ",
    "κ",
    "και",
    "κατα",
    "κι",
    "μα",
    "με",
    "μετα",
    "μη",
    "μην",
    "να",
    "ο",
    "οι",
    "ομωσ",
    "οπωσ",
    "οσο",
    "οτι",
    "παρα",
    "ποια",
    "ποιεσ",
    "ποιο",
    "ποιοι",
    "ποιοσ",
    "ποιουσ",
    "ποιων",
    "που",
    "προσ",
    "πωσ",
    "σε",
    "στη",
    "στην",
    "στο",
    "στον",
    "τα",
    "την",
    "τησ",
    "το",
    "τον",
    "τοτε",
    "του",
    "των",
    "ωσ"
  ];
  const guj = [
    "અંગે",
    "અંદર",
    "અથવા",
    "અને",
    "અમને",
    "અમારું",
    "અમે",
    "અહીં",
    "આ",
    "આગળ",
    "આથી",
    "આનું",
    "આને",
    "આપણને",
    "આપણું",
    "આપણે",
    "આપી",
    "આર",
    "આવી",
    "આવે",
    "ઉપર",
    "ઉભા",
    "ઊંચે",
    "ઊભું",
    "એ",
    "એક",
    "એન",
    "એના",
    "એનાં",
    "એની",
    "એનું",
    "એને",
    "એનો",
    "એમ",
    "એવા",
    "એવાં",
    "એવી",
    "એવું",
    "એવો",
    "ઓછું",
    "કંઈક",
    "કઈ",
    "કયું",
    "કયો",
    "કરતાં",
    "કરવું",
    "કરી",
    "કરીએ",
    "કરું",
    "કરે",
    "કરેલું",
    "કર્યા",
    "કર્યાં",
    "કર્યું",
    "કર્યો",
    "કાંઈ",
    "કે",
    "કેટલું",
    "કેમ",
    "કેવી",
    "કેવું",
    "કોઈ",
    "કોઈક",
    "કોણ",
    "કોણે",
    "કોને",
    "ક્યાં",
    "ક્યારે",
    "ખૂબ",
    "ગઈ",
    "ગયા",
    "ગયાં",
    "ગયું",
    "ગયો",
    "ઘણું",
    "છ",
    "છતાં",
    "છીએ",
    "છું",
    "છે",
    "છેક",
    "છો",
    "જ",
    "જાય",
    "જી",
    "જે",
    "જેટલું",
    "જેને",
    "જેમ",
    "જેવી",
    "જેવું",
    "જેવો",
    "જો",
    "જોઈએ",
    "જ્યાં",
    "જ્યારે",
    "ઝાઝું",
    "તને",
    "તમને",
    "તમારું",
    "તમે",
    "તા",
    "તારાથી",
    "તારામાં",
    "તારું",
    "તું",
    "તે",
    "તેં",
    "તેઓ",
    "તેણે",
    "તેથી",
    "તેના",
    "તેની",
    "તેનું",
    "તેને",
    "તેમ",
    "તેમનું",
    "તેમને",
    "તેવી",
    "તેવું",
    "તો",
    "ત્યાં",
    "ત્યારે",
    "થઇ",
    "થઈ",
    "થઈએ",
    "થતા",
    "થતાં",
    "થતી",
    "થતું",
    "થતો",
    "થયા",
    "થયાં",
    "થયું",
    "થયેલું",
    "થયો",
    "થવું",
    "થાઉં",
    "થાઓ",
    "થાય",
    "થી",
    "થોડું",
    "દરેક",
    "ન",
    "નં",
    "નં.",
    "નથી",
    "નહિ",
    "નહી",
    "નહીં",
    "ના",
    "ની",
    "નીચે",
    "નું",
    "ને",
    "નો",
    "પછી",
    "પણ",
    "પર",
    "પરંતુ",
    "પહેલાં",
    "પાછળ",
    "પાસે",
    "પોતાનું",
    "પ્રત્યેક",
    "ફક્ત",
    "ફરી",
    "ફરીથી",
    "બંને",
    "બધા",
    "બધું",
    "બની",
    "બહાર",
    "બહુ",
    "બાદ",
    "બે",
    "મને",
    "મા",
    "માં",
    "માટે",
    "માત્ર",
    "મારું",
    "મી",
    "મૂકવું",
    "મૂકી",
    "મૂક્યા",
    "મૂક્યાં",
    "મૂક્યું",
    "મેં",
    "રહી",
    "રહે",
    "રહેવું",
    "રહ્યા",
    "રહ્યાં",
    "રહ્યો",
    "રીતે",
    "રૂ.",
    "રૂા",
    "લેતા",
    "લેતું",
    "લેવા",
    "વગેરે",
    "વધુ",
    "શકે",
    "શા",
    "શું",
    "સરખું",
    "સામે",
    "સુધી",
    "હતા",
    "હતાં",
    "હતી",
    "હતું",
    "હવે",
    "હશે",
    "હશો",
    "હા",
    "હું",
    "હો",
    "હોઈ",
    "હોઈશ",
    "હોઈશું",
    "હોય",
    "હોવા"
  ];
  const hau = [
    "ta",
    "da",
    "ya",
    "sai",
    "ba",
    "yi",
    "na",
    "kuma",
    "ma",
    "ji",
    "cikin",
    "in",
    "ni",
    "wata",
    "wani",
    "ce",
    "tana",
    "don",
    "za",
    "sun",
    "amma",
    "ga",
    "ina",
    "ne",
    "tselane",
    "mai",
    "suka",
    "wannan",
    "a",
    "ko",
    "lokacin",
    "su",
    "take",
    "kaka",
    "shi",
    "yake",
    "yana",
    "mulongo",
    "mata",
    "ka",
    "ban",
    "ita",
    "tafi",
    "shanshani",
    "kai",
    "daɗi",
    "mi",
    "ƙato",
    "fara",
    "rana"
  ];
  const heb = [
    "אבל",
    "או",
    "אולי",
    "אותה",
    "אותו",
    "אותי",
    "אותך",
    "אותם",
    "אותן",
    "אותנו",
    "אז",
    "אחר",
    "אחרות",
    "אחרי",
    "אחריכן",
    "אחרים",
    "אחרת",
    "אי",
    "איזה",
    "איך",
    "אין",
    "איפה",
    "איתה",
    "איתו",
    "איתי",
    "איתך",
    "איתכם",
    "איתכן",
    "איתם",
    "איתן",
    "איתנו",
    "אך",
    "אל",
    "אלה",
    "אלו",
    "אם",
    "אנחנו",
    "אני",
    "אס",
    "אף",
    "אצל",
    "אשר",
    "את",
    "אתה",
    "אתכם",
    "אתכן",
    "אתם",
    "אתן",
    "באיזומידה",
    "באמצע",
    "באמצעות",
    "בגלל",
    "בין",
    "בלי",
    "במידה",
    "במקוםשבו",
    "ברם",
    "בשביל",
    "בשעהש",
    "בתוך",
    "גם",
    "דרך",
    "הוא",
    "היא",
    "היה",
    "היכן",
    "היתה",
    "היתי",
    "הם",
    "הן",
    "הנה",
    "הסיבהשבגללה",
    "הרי",
    "ואילו",
    "ואת",
    "זאת",
    "זה",
    "זות",
    "יהיה",
    "יוכל",
    "יוכלו",
    "יותרמדי",
    "יכול",
    "יכולה",
    "יכולות",
    "יכולים",
    "יכל",
    "יכלה",
    "יכלו",
    "יש",
    "כאן",
    "כאשר",
    "כולם",
    "כולן",
    "כזה",
    "כי",
    "כיצד",
    "כך",
    "ככה",
    "כל",
    "כלל",
    "כמו",
    "כן",
    "כפי",
    "כש",
    "לא",
    "לאו",
    "לאיזותכלית",
    "לאן",
    "לבין",
    "לה",
    "להיות",
    "להם",
    "להן",
    "לו",
    "לי",
    "לכם",
    "לכן",
    "למה",
    "למטה",
    "למעלה",
    "למקוםשבו",
    "למרות",
    "לנו",
    "לעבר",
    "לעיכן",
    "לפיכך",
    "לפני",
    "מאד",
    "מאחורי",
    "מאיזוסיבה",
    "מאין",
    "מאיפה",
    "מבלי",
    "מבעד",
    "מדוע",
    "מה",
    "מהיכן",
    "מול",
    "מחוץ",
    "מי",
    "מכאן",
    "מכיוון",
    "מלבד",
    "מן",
    "מנין",
    "מסוגל",
    "מעט",
    "מעטים",
    "מעל",
    "מצד",
    "מקוםבו",
    "מתחת",
    "מתי",
    "נגד",
    "נגר",
    "נו",
    "עד",
    "עז",
    "על",
    "עלי",
    "עליה",
    "עליהם",
    "עליהן",
    "עליו",
    "עליך",
    "עליכם",
    "עלינו",
    "עם",
    "עצמה",
    "עצמהם",
    "עצמהן",
    "עצמו",
    "עצמי",
    "עצמם",
    "עצמן",
    "עצמנו",
    "פה",
    "רק",
    "שוב",
    "של",
    "שלה",
    "שלהם",
    "שלהן",
    "שלו",
    "שלי",
    "שלך",
    "שלכה",
    "שלכם",
    "שלכן",
    "שלנו",
    "שם",
    "תהיה",
    "תחת"
  ];
  const hin = [
    "अंदर",
    "अत",
    "अदि",
    "अप",
    "अपना",
    "अपनि",
    "अपनी",
    "अपने",
    "अभि",
    "अभी",
    "आदि",
    "आप",
    "इंहिं",
    "इंहें",
    "इंहों",
    "इतयादि",
    "इत्यादि",
    "इन",
    "इनका",
    "इन्हीं",
    "इन्हें",
    "इन्हों",
    "इस",
    "इसका",
    "इसकि",
    "इसकी",
    "इसके",
    "इसमें",
    "इसि",
    "इसी",
    "इसे",
    "उंहिं",
    "उंहें",
    "उंहों",
    "उन",
    "उनका",
    "उनकि",
    "उनकी",
    "उनके",
    "उनको",
    "उन्हीं",
    "उन्हें",
    "उन्हों",
    "उस",
    "उसके",
    "उसि",
    "उसी",
    "उसे",
    "एक",
    "एवं",
    "एस",
    "एसे",
    "ऐसे",
    "ओर",
    "और",
    "कइ",
    "कई",
    "कर",
    "करता",
    "करते",
    "करना",
    "करने",
    "करें",
    "कहते",
    "कहा",
    "का",
    "काफि",
    "काफ़ी",
    "कि",
    "किंहें",
    "किंहों",
    "कितना",
    "किन्हें",
    "किन्हों",
    "किया",
    "किर",
    "किस",
    "किसि",
    "किसी",
    "किसे",
    "की",
    "कुछ",
    "कुल",
    "के",
    "को",
    "कोइ",
    "कोई",
    "कोन",
    "कोनसा",
    "कौन",
    "कौनसा",
    "गया",
    "घर",
    "जब",
    "जहाँ",
    "जहां",
    "जा",
    "जिंहें",
    "जिंहों",
    "जितना",
    "जिधर",
    "जिन",
    "जिन्हें",
    "जिन्हों",
    "जिस",
    "जिसे",
    "जीधर",
    "जेसा",
    "जेसे",
    "जैसा",
    "जैसे",
    "जो",
    "तक",
    "तब",
    "तरह",
    "तिंहें",
    "तिंहों",
    "तिन",
    "तिन्हें",
    "तिन्हों",
    "तिस",
    "तिसे",
    "तो",
    "था",
    "थि",
    "थी",
    "थे",
    "दबारा",
    "दवारा",
    "दिया",
    "दुसरा",
    "दुसरे",
    "दूसरे",
    "दो",
    "द्वारा",
    "न",
    "नहिं",
    "नहीं",
    "ना",
    "निचे",
    "निहायत",
    "नीचे",
    "ने",
    "पर",
    "पहले",
    "पुरा",
    "पूरा",
    "पे",
    "फिर",
    "बनि",
    "बनी",
    "बहि",
    "बही",
    "बहुत",
    "बाद",
    "बाला",
    "बिलकुल",
    "भि",
    "भितर",
    "भी",
    "भीतर",
    "मगर",
    "मानो",
    "मे",
    "में",
    "यदि",
    "यह",
    "यहाँ",
    "यहां",
    "यहि",
    "यही",
    "या",
    "यिह",
    "ये",
    "रखें",
    "रवासा",
    "रहा",
    "रहे",
    "ऱ्वासा",
    "लिए",
    "लिये",
    "लेकिन",
    "व",
    "वगेरह",
    "वरग",
    "वर्ग",
    "वह",
    "वहाँ",
    "वहां",
    "वहिं",
    "वहीं",
    "वाले",
    "वुह",
    "वे",
    "वग़ैरह",
    "संग",
    "सकता",
    "सकते",
    "सबसे",
    "सभि",
    "सभी",
    "साथ",
    "साबुत",
    "साभ",
    "सारा",
    "से",
    "सो",
    "हि",
    "ही",
    "हुअ",
    "हुआ",
    "हुइ",
    "हुई",
    "हुए",
    "हे",
    "हें",
    "है",
    "हैं",
    "हो",
    "होता",
    "होति",
    "होती",
    "होते",
    "होना",
    "होने"
  ];
  const gle = [
    "a",
    "ach",
    "ag",
    "agus",
    "an",
    "aon",
    "ar",
    "arna",
    "as",
    "b'",
    "ba",
    "beirt",
    "bhúr",
    "caoga",
    "ceathair",
    "ceathrar",
    "chomh",
    "chtó",
    "chuig",
    "chun",
    "cois",
    "céad",
    "cúig",
    "cúigear",
    "d'",
    "daichead",
    "dar",
    "de",
    "deich",
    "deichniúr",
    "den",
    "dhá",
    "do",
    "don",
    "dtí",
    "dá",
    "dár",
    "dó",
    "faoi",
    "faoin",
    "faoina",
    "faoinár",
    "fara",
    "fiche",
    "gach",
    "gan",
    "go",
    "gur",
    "haon",
    "hocht",
    "i",
    "iad",
    "idir",
    "in",
    "ina",
    "ins",
    "inár",
    "is",
    "le",
    "leis",
    "lena",
    "lenár",
    "m'",
    "mar",
    "mo",
    "mé",
    "na",
    "nach",
    "naoi",
    "naonúr",
    "ná",
    "ní",
    "níor",
    "nó",
    "nócha",
    "ocht",
    "ochtar",
    "os",
    "roimh",
    "sa",
    "seacht",
    "seachtar",
    "seachtó",
    "seasca",
    "seisear",
    "siad",
    "sibh",
    "sinn",
    "sna",
    "sé",
    "sí",
    "tar",
    "thar",
    "thú",
    "triúr",
    "trí",
    "trína",
    "trínár",
    "tríocha",
    "tú",
    "um",
    "ár",
    "é",
    "éis",
    "í",
    "ó",
    "ón",
    "óna",
    "ónár"
  ];
  const hun = [
    "a",
    "abba",
    "abban",
    "abból",
    "addig",
    "ahhoz",
    "ahogy",
    "ahol",
    "aki",
    "akik",
    "akkor",
    "akár",
    "alapján",
    "alatt",
    "alatta",
    "alattad",
    "alattam",
    "alattatok",
    "alattuk",
    "alattunk",
    "alá",
    "alád",
    "alájuk",
    "alám",
    "alánk",
    "alátok",
    "alól",
    "alóla",
    "alólad",
    "alólam",
    "alólatok",
    "alóluk",
    "alólunk",
    "amely",
    "amelyből",
    "amelyek",
    "amelyekben",
    "amelyeket",
    "amelyet",
    "amelyik",
    "amelynek",
    "ami",
    "amikor",
    "amit",
    "amolyan",
    "amott",
    "amíg",
    "annak",
    "annál",
    "arra",
    "arról",
    "attól",
    "az",
    "aznap",
    "azok",
    "azokat",
    "azokba",
    "azokban",
    "azokból",
    "azokhoz",
    "azokig",
    "azokkal",
    "azokká",
    "azoknak",
    "azoknál",
    "azokon",
    "azokra",
    "azokról",
    "azoktól",
    "azokért",
    "azon",
    "azonban",
    "azonnal",
    "azt",
    "aztán",
    "azután",
    "azzal",
    "azzá",
    "azért",
    "bal",
    "balra",
    "ban",
    "be",
    "belé",
    "beléd",
    "beléjük",
    "belém",
    "belénk",
    "belétek",
    "belül",
    "belőle",
    "belőled",
    "belőlem",
    "belőletek",
    "belőlük",
    "belőlünk",
    "ben",
    "benne",
    "benned",
    "bennem",
    "bennetek",
    "bennük",
    "bennünk",
    "bár",
    "bárcsak",
    "bármilyen",
    "búcsú",
    "cikk",
    "cikkek",
    "cikkeket",
    "csak",
    "csakhogy",
    "csupán",
    "de",
    "dehogy",
    "e",
    "ebbe",
    "ebben",
    "ebből",
    "eddig",
    "egy",
    "egyebek",
    "egyebet",
    "egyedül",
    "egyelőre",
    "egyes",
    "egyet",
    "egyetlen",
    "egyik",
    "egymás",
    "egyre",
    "egyszerre",
    "egyéb",
    "együtt",
    "egész",
    "egészen",
    "ehhez",
    "ekkor",
    "el",
    "eleinte",
    "ellen",
    "ellenes",
    "elleni",
    "ellenére",
    "elmondta",
    "első",
    "elsők",
    "elsősorban",
    "elsőt",
    "elé",
    "eléd",
    "elég",
    "eléjük",
    "elém",
    "elénk",
    "elétek",
    "elő",
    "előbb",
    "elől",
    "előle",
    "előled",
    "előlem",
    "előletek",
    "előlük",
    "előlünk",
    "először",
    "előtt",
    "előtte",
    "előtted",
    "előttem",
    "előttetek",
    "előttük",
    "előttünk",
    "előző",
    "emilyen",
    "engem",
    "ennek",
    "ennyi",
    "ennél",
    "enyém",
    "erre",
    "erről",
    "esetben",
    "ettől",
    "ez",
    "ezek",
    "ezekbe",
    "ezekben",
    "ezekből",
    "ezeken",
    "ezeket",
    "ezekhez",
    "ezekig",
    "ezekkel",
    "ezekké",
    "ezeknek",
    "ezeknél",
    "ezekre",
    "ezekről",
    "ezektől",
    "ezekért",
    "ezen",
    "ezentúl",
    "ezer",
    "ezret",
    "ezt",
    "ezután",
    "ezzel",
    "ezzé",
    "ezért",
    "fel",
    "fele",
    "felek",
    "felet",
    "felett",
    "felé",
    "fent",
    "fenti",
    "fél",
    "fölé",
    "gyakran",
    "ha",
    "halló",
    "hamar",
    "hanem",
    "harmadik",
    "harmadikat",
    "harminc",
    "hat",
    "hatodik",
    "hatodikat",
    "hatot",
    "hatvan",
    "helyett",
    "hetedik",
    "hetediket",
    "hetet",
    "hetven",
    "hirtelen",
    "hiszen",
    "hiába",
    "hogy",
    "hogyan",
    "hol",
    "holnap",
    "holnapot",
    "honnan",
    "hova",
    "hozzá",
    "hozzád",
    "hozzájuk",
    "hozzám",
    "hozzánk",
    "hozzátok",
    "hurrá",
    "huszadik",
    "hány",
    "hányszor",
    "hármat",
    "három",
    "hát",
    "hátha",
    "hátulsó",
    "hét",
    "húsz",
    "ide",
    "ide-оda",
    "idén",
    "igazán",
    "igen",
    "ill",
    "illetve",
    "ilyen",
    "ilyenkor",
    "immár",
    "inkább",
    "is",
    "ismét",
    "ison",
    "itt",
    "jelenleg",
    "jobban",
    "jobbra",
    "jó",
    "jól",
    "jólesik",
    "jóval",
    "jövőre",
    "kell",
    "kellene",
    "kellett",
    "kelljen",
    "keressünk",
    "keresztül",
    "ketten",
    "kettő",
    "kettőt",
    "kevés",
    "ki",
    "kiben",
    "kiből",
    "kicsit",
    "kicsoda",
    "kihez",
    "kik",
    "kikbe",
    "kikben",
    "kikből",
    "kiken",
    "kiket",
    "kikhez",
    "kikkel",
    "kikké",
    "kiknek",
    "kiknél",
    "kikre",
    "kikről",
    "kiktől",
    "kikért",
    "kilenc",
    "kilencedik",
    "kilencediket",
    "kilencet",
    "kilencven",
    "kin",
    "kinek",
    "kinél",
    "kire",
    "kiről",
    "kit",
    "kitől",
    "kivel",
    "kivé",
    "kié",
    "kiért",
    "korábban",
    "képest",
    "kérem",
    "kérlek",
    "kész",
    "késő",
    "később",
    "későn",
    "két",
    "kétszer",
    "kívül",
    "körül",
    "köszönhetően",
    "köszönöm",
    "közben",
    "közel",
    "közepesen",
    "közepén",
    "közé",
    "között",
    "közül",
    "külön",
    "különben",
    "különböző",
    "különbözőbb",
    "különbözőek",
    "lassan",
    "le",
    "legalább",
    "legyen",
    "lehet",
    "lehetetlen",
    "lehetett",
    "lehetőleg",
    "lehetőség",
    "lenne",
    "lenni",
    "lennék",
    "lennének",
    "lesz",
    "leszek",
    "lesznek",
    "leszünk",
    "lett",
    "lettek",
    "lettem",
    "lettünk",
    "lévő",
    "ma",
    "maga",
    "magad",
    "magam",
    "magatokat",
    "magukat",
    "magunkat",
    "magát",
    "mai",
    "majd",
    "majdnem",
    "manapság",
    "meg",
    "megcsinál",
    "megcsinálnak",
    "megint",
    "megvan",
    "mellett",
    "mellette",
    "melletted",
    "mellettem",
    "mellettetek",
    "mellettük",
    "mellettünk",
    "mellé",
    "melléd",
    "melléjük",
    "mellém",
    "mellénk",
    "mellétek",
    "mellől",
    "mellőle",
    "mellőled",
    "mellőlem",
    "mellőletek",
    "mellőlük",
    "mellőlünk",
    "mely",
    "melyek",
    "melyik",
    "mennyi",
    "mert",
    "mi",
    "miatt",
    "miatta",
    "miattad",
    "miattam",
    "miattatok",
    "miattuk",
    "miattunk",
    "mibe",
    "miben",
    "miből",
    "mihez",
    "mik",
    "mikbe",
    "mikben",
    "mikből",
    "miken",
    "miket",
    "mikhez",
    "mikkel",
    "mikké",
    "miknek",
    "miknél",
    "mikor",
    "mikre",
    "mikről",
    "miktől",
    "mikért",
    "milyen",
    "min",
    "mind",
    "mindegyik",
    "mindegyiket",
    "minden",
    "mindenesetre",
    "mindenki",
    "mindent",
    "mindenütt",
    "mindig",
    "mindketten",
    "minek",
    "minket",
    "mint",
    "mintha",
    "minél",
    "mire",
    "miről",
    "mit",
    "mitől",
    "mivel",
    "mivé",
    "miért",
    "mondta",
    "most",
    "mostanáig",
    "már",
    "más",
    "másik",
    "másikat",
    "másnap",
    "második",
    "másodszor",
    "mások",
    "másokat",
    "mást",
    "még",
    "mégis",
    "míg",
    "mögé",
    "mögéd",
    "mögéjük",
    "mögém",
    "mögénk",
    "mögétek",
    "mögött",
    "mögötte",
    "mögötted",
    "mögöttem",
    "mögöttetek",
    "mögöttük",
    "mögöttünk",
    "mögül",
    "mögüle",
    "mögüled",
    "mögülem",
    "mögületek",
    "mögülük",
    "mögülünk",
    "múltkor",
    "múlva",
    "na",
    "nagy",
    "nagyobb",
    "nagyon",
    "naponta",
    "napot",
    "ne",
    "negyedik",
    "negyediket",
    "negyven",
    "neked",
    "nekem",
    "neki",
    "nekik",
    "nektek",
    "nekünk",
    "nem",
    "nemcsak",
    "nemrég",
    "nincs",
    "nyolc",
    "nyolcadik",
    "nyolcadikat",
    "nyolcat",
    "nyolcvan",
    "nála",
    "nálad",
    "nálam",
    "nálatok",
    "náluk",
    "nálunk",
    "négy",
    "négyet",
    "néha",
    "néhány",
    "nélkül",
    "o",
    "oda",
    "ok",
    "olyan",
    "onnan",
    "ott",
    "pedig",
    "persze",
    "pár",
    "például",
    "rajta",
    "rajtad",
    "rajtam",
    "rajtatok",
    "rajtuk",
    "rajtunk",
    "rendben",
    "rosszul",
    "rá",
    "rád",
    "rájuk",
    "rám",
    "ránk",
    "rátok",
    "régen",
    "régóta",
    "részére",
    "róla",
    "rólad",
    "rólam",
    "rólatok",
    "róluk",
    "rólunk",
    "rögtön",
    "s",
    "saját",
    "se",
    "sem",
    "semmi",
    "semmilyen",
    "semmiség",
    "senki",
    "soha",
    "sok",
    "sokan",
    "sokat",
    "sokkal",
    "sokszor",
    "sokáig",
    "során",
    "stb.",
    "szemben",
    "szerbusz",
    "szerint",
    "szerinte",
    "szerinted",
    "szerintem",
    "szerintetek",
    "szerintük",
    "szerintünk",
    "szervusz",
    "szinte",
    "számára",
    "száz",
    "századik",
    "százat",
    "szépen",
    "szét",
    "szíves",
    "szívesen",
    "szíveskedjék",
    "sőt",
    "talán",
    "tavaly",
    "te",
    "tegnap",
    "tegnapelőtt",
    "tehát",
    "tele",
    "teljes",
    "tessék",
    "ti",
    "tied",
    "titeket",
    "tizedik",
    "tizediket",
    "tizenegy",
    "tizenegyedik",
    "tizenhat",
    "tizenhárom",
    "tizenhét",
    "tizenkettedik",
    "tizenkettő",
    "tizenkilenc",
    "tizenkét",
    "tizennyolc",
    "tizennégy",
    "tizenöt",
    "tizet",
    "tovább",
    "további",
    "továbbá",
    "távol",
    "téged",
    "tényleg",
    "tíz",
    "több",
    "többi",
    "többször",
    "túl",
    "tőle",
    "tőled",
    "tőlem",
    "tőletek",
    "tőlük",
    "tőlünk",
    "ugyanakkor",
    "ugyanez",
    "ugyanis",
    "ugye",
    "urak",
    "uram",
    "urat",
    "utoljára",
    "utolsó",
    "után",
    "utána",
    "vagy",
    "vagyis",
    "vagyok",
    "vagytok",
    "vagyunk",
    "vajon",
    "valahol",
    "valaki",
    "valakit",
    "valamelyik",
    "valami",
    "valamint",
    "való",
    "van",
    "vannak",
    "vele",
    "veled",
    "velem",
    "veletek",
    "velük",
    "velünk",
    "vissza",
    "viszlát",
    "viszont",
    "viszontlátásra",
    "volna",
    "volnának",
    "volnék",
    "volt",
    "voltak",
    "voltam",
    "voltunk",
    "végre",
    "végén",
    "végül",
    "által",
    "általában",
    "ám",
    "át",
    "éljen",
    "én",
    "éppen",
    "érte",
    "érted",
    "értem",
    "értetek",
    "értük",
    "értünk",
    "és",
    "év",
    "évben",
    "éve",
    "évek",
    "éves",
    "évi",
    "évvel",
    "így",
    "óta",
    "ön",
    "önbe",
    "önben",
    "önből",
    "önhöz",
    "önnek",
    "önnel",
    "önnél",
    "önre",
    "önről",
    "önt",
    "öntől",
    "önért",
    "önök",
    "önökbe",
    "önökben",
    "önökből",
    "önöket",
    "önökhöz",
    "önökkel",
    "önöknek",
    "önöknél",
    "önökre",
    "önökről",
    "önöktől",
    "önökért",
    "önökön",
    "önön",
    "össze",
    "öt",
    "ötven",
    "ötödik",
    "ötödiket",
    "ötöt",
    "úgy",
    "úgyis",
    "úgynevezett",
    "új",
    "újabb",
    "újra",
    "úr",
    "ő",
    "ők",
    "őket",
    "őt"
  ];
  const ind = [
    "ada",
    "adalah",
    "adanya",
    "adapun",
    "agak",
    "agaknya",
    "agar",
    "akan",
    "akankah",
    "akhir",
    "akhiri",
    "akhirnya",
    "aku",
    "akulah",
    "amat",
    "amatlah",
    "anda",
    "andalah",
    "antar",
    "antara",
    "antaranya",
    "apa",
    "apaan",
    "apabila",
    "apakah",
    "apalagi",
    "apatah",
    "artinya",
    "asal",
    "asalkan",
    "atas",
    "atau",
    "ataukah",
    "ataupun",
    "awal",
    "awalnya",
    "bagai",
    "bagaikan",
    "bagaimana",
    "bagaimanakah",
    "bagaimanapun",
    "bagi",
    "bagian",
    "bahkan",
    "bahwa",
    "bahwasanya",
    "bakal",
    "bakalan",
    "balik",
    "banyak",
    "bapak",
    "baru",
    "bawah",
    "beberapa",
    "begini",
    "beginian",
    "beginikah",
    "beginilah",
    "begitu",
    "begitukah",
    "begitulah",
    "begitupun",
    "bekerja",
    "belakang",
    "belakangan",
    "belum",
    "belumlah",
    "benar",
    "benarkah",
    "benarlah",
    "berada",
    "berakhir",
    "berakhirlah",
    "berakhirnya",
    "berapa",
    "berapakah",
    "berapalah",
    "berapapun",
    "berarti",
    "berawal",
    "berbagai",
    "berdatangan",
    "beri",
    "berikan",
    "berikut",
    "berikutnya",
    "berjumlah",
    "berkali-kali",
    "berkata",
    "berkehendak",
    "berkeinginan",
    "berkenaan",
    "berlainan",
    "berlalu",
    "berlangsung",
    "berlebihan",
    "bermacam",
    "bermacam-macam",
    "bermaksud",
    "bermula",
    "bersama",
    "bersama-sama",
    "bersiap",
    "bersiap-siap",
    "bertanya",
    "bertanya-tanya",
    "berturut",
    "berturut-turut",
    "bertutur",
    "berujar",
    "berupa",
    "besar",
    "betul",
    "betulkah",
    "biasa",
    "biasanya",
    "bila",
    "bilakah",
    "bisa",
    "bisakah",
    "boleh",
    "bolehkah",
    "bolehlah",
    "buat",
    "bukan",
    "bukankah",
    "bukanlah",
    "bukannya",
    "bulan",
    "bung",
    "cara",
    "caranya",
    "cukup",
    "cukupkah",
    "cukuplah",
    "cuma",
    "dahulu",
    "dalam",
    "dan",
    "dapat",
    "dari",
    "daripada",
    "datang",
    "dekat",
    "demi",
    "demikian",
    "demikianlah",
    "dengan",
    "depan",
    "di",
    "dia",
    "diakhiri",
    "diakhirinya",
    "dialah",
    "diantara",
    "diantaranya",
    "diberi",
    "diberikan",
    "diberikannya",
    "dibuat",
    "dibuatnya",
    "didapat",
    "didatangkan",
    "digunakan",
    "diibaratkan",
    "diibaratkannya",
    "diingat",
    "diingatkan",
    "diinginkan",
    "dijawab",
    "dijelaskan",
    "dijelaskannya",
    "dikarenakan",
    "dikatakan",
    "dikatakannya",
    "dikerjakan",
    "diketahui",
    "diketahuinya",
    "dikira",
    "dilakukan",
    "dilalui",
    "dilihat",
    "dimaksud",
    "dimaksudkan",
    "dimaksudkannya",
    "dimaksudnya",
    "diminta",
    "dimintai",
    "dimisalkan",
    "dimulai",
    "dimulailah",
    "dimulainya",
    "dimungkinkan",
    "dini",
    "dipastikan",
    "diperbuat",
    "diperbuatnya",
    "dipergunakan",
    "diperkirakan",
    "diperlihatkan",
    "diperlukan",
    "diperlukannya",
    "dipersoalkan",
    "dipertanyakan",
    "dipunyai",
    "diri",
    "dirinya",
    "disampaikan",
    "disebut",
    "disebutkan",
    "disebutkannya",
    "disini",
    "disinilah",
    "ditambahkan",
    "ditandaskan",
    "ditanya",
    "ditanyai",
    "ditanyakan",
    "ditegaskan",
    "ditujukan",
    "ditunjuk",
    "ditunjuki",
    "ditunjukkan",
    "ditunjukkannya",
    "ditunjuknya",
    "dituturkan",
    "dituturkannya",
    "diucapkan",
    "diucapkannya",
    "diungkapkan",
    "dong",
    "dulu",
    "empat",
    "enggak",
    "enggaknya",
    "entah",
    "entahlah",
    "guna",
    "gunakan",
    "hal",
    "hampir",
    "hanya",
    "hanyalah",
    "harus",
    "haruslah",
    "harusnya",
    "hendak",
    "hendaklah",
    "hendaknya",
    "hingga",
    "ia",
    "ialah",
    "ibarat",
    "ibaratkan",
    "ibaratnya",
    "ikut",
    "ingat",
    "ingat-ingat",
    "ingin",
    "inginkah",
    "inginkan",
    "ini",
    "inikah",
    "inilah",
    "itu",
    "itukah",
    "itulah",
    "jadi",
    "jadilah",
    "jadinya",
    "jangan",
    "jangankan",
    "janganlah",
    "jauh",
    "jawab",
    "jawaban",
    "jawabnya",
    "jelas",
    "jelaskan",
    "jelaslah",
    "jelasnya",
    "jika",
    "jikalau",
    "juga",
    "jumlah",
    "jumlahnya",
    "justru",
    "kala",
    "kalau",
    "kalaulah",
    "kalaupun",
    "kalian",
    "kami",
    "kamilah",
    "kamu",
    "kamulah",
    "kan",
    "kapan",
    "kapankah",
    "kapanpun",
    "karena",
    "karenanya",
    "kasus",
    "kata",
    "katakan",
    "katakanlah",
    "katanya",
    "ke",
    "keadaan",
    "kebetulan",
    "kecil",
    "kedua",
    "keduanya",
    "keinginan",
    "kelamaan",
    "kelihatan",
    "kelihatannya",
    "kelima",
    "keluar",
    "kembali",
    "kemudian",
    "kemungkinan",
    "kemungkinannya",
    "kenapa",
    "kepada",
    "kepadanya",
    "kesampaian",
    "keseluruhan",
    "keseluruhannya",
    "keterlaluan",
    "ketika",
    "khususnya",
    "kini",
    "kinilah",
    "kira",
    "kira-kira",
    "kiranya",
    "kita",
    "kitalah",
    "kok",
    "kurang",
    "lagi",
    "lagian",
    "lah",
    "lain",
    "lainnya",
    "lalu",
    "lama",
    "lamanya",
    "lanjut",
    "lanjutnya",
    "lebih",
    "lewat",
    "lima",
    "luar",
    "macam",
    "maka",
    "makanya",
    "makin",
    "malah",
    "malahan",
    "mampu",
    "mampukah",
    "mana",
    "manakala",
    "manalagi",
    "masa",
    "masalah",
    "masalahnya",
    "masih",
    "masihkah",
    "masing",
    "masing-masing",
    "mau",
    "maupun",
    "melainkan",
    "melakukan",
    "melalui",
    "melihat",
    "melihatnya",
    "memang",
    "memastikan",
    "memberi",
    "memberikan",
    "membuat",
    "memerlukan",
    "memihak",
    "meminta",
    "memintakan",
    "memisalkan",
    "memperbuat",
    "mempergunakan",
    "memperkirakan",
    "memperlihatkan",
    "mempersiapkan",
    "mempersoalkan",
    "mempertanyakan",
    "mempunyai",
    "memulai",
    "memungkinkan",
    "menaiki",
    "menambahkan",
    "menandaskan",
    "menanti",
    "menanti-nanti",
    "menantikan",
    "menanya",
    "menanyai",
    "menanyakan",
    "mendapat",
    "mendapatkan",
    "mendatang",
    "mendatangi",
    "mendatangkan",
    "menegaskan",
    "mengakhiri",
    "mengapa",
    "mengatakan",
    "mengatakannya",
    "mengenai",
    "mengerjakan",
    "mengetahui",
    "menggunakan",
    "menghendaki",
    "mengibaratkan",
    "mengibaratkannya",
    "mengingat",
    "mengingatkan",
    "menginginkan",
    "mengira",
    "mengucapkan",
    "mengucapkannya",
    "mengungkapkan",
    "menjadi",
    "menjawab",
    "menjelaskan",
    "menuju",
    "menunjuk",
    "menunjuki",
    "menunjukkan",
    "menunjuknya",
    "menurut",
    "menuturkan",
    "menyampaikan",
    "menyangkut",
    "menyatakan",
    "menyebutkan",
    "menyeluruh",
    "menyiapkan",
    "merasa",
    "mereka",
    "merekalah",
    "merupakan",
    "meski",
    "meskipun",
    "meyakini",
    "meyakinkan",
    "minta",
    "mirip",
    "misal",
    "misalkan",
    "misalnya",
    "mula",
    "mulai",
    "mulailah",
    "mulanya",
    "mungkin",
    "mungkinkah",
    "nah",
    "naik",
    "namun",
    "nanti",
    "nantinya",
    "nyaris",
    "nyatanya",
    "oleh",
    "olehnya",
    "pada",
    "padahal",
    "padanya",
    "paling",
    "panjang",
    "pantas",
    "para",
    "pasti",
    "pastilah",
    "penting",
    "pentingnya",
    "per",
    "percuma",
    "perlu",
    "perlukah",
    "perlunya",
    "pernah",
    "persoalan",
    "pertama",
    "pertama-tama",
    "pertanyaan",
    "pertanyakan",
    "pihak",
    "pihaknya",
    "pukul",
    "pula",
    "pun",
    "punya",
    "rasa",
    "rasanya",
    "rata",
    "rupanya",
    "saat",
    "saatnya",
    "saja",
    "sajalah",
    "saling",
    "sama",
    "sama-sama",
    "sambil",
    "sampai",
    "sampai-sampai",
    "sampaikan",
    "sana",
    "sangat",
    "sangatlah",
    "satu",
    "saya",
    "sayalah",
    "se",
    "sebab",
    "sebabnya",
    "sebagai",
    "sebagaimana",
    "sebagainya",
    "sebagian",
    "sebaik",
    "sebaik-baiknya",
    "sebaiknya",
    "sebaliknya",
    "sebanyak",
    "sebegini",
    "sebegitu",
    "sebelum",
    "sebelumnya",
    "sebenarnya",
    "seberapa",
    "sebesar",
    "sebetulnya",
    "sebisanya",
    "sebuah",
    "sebut",
    "sebutlah",
    "sebutnya",
    "secara",
    "secukupnya",
    "sedang",
    "sedangkan",
    "sedemikian",
    "sedikit",
    "sedikitnya",
    "seenaknya",
    "segala",
    "segalanya",
    "segera",
    "seharusnya",
    "sehingga",
    "seingat",
    "sejak",
    "sejauh",
    "sejenak",
    "sejumlah",
    "sekadar",
    "sekadarnya",
    "sekali",
    "sekali-kali",
    "sekalian",
    "sekaligus",
    "sekalipun",
    "sekarang",
    "sekarang",
    "sekecil",
    "seketika",
    "sekiranya",
    "sekitar",
    "sekitarnya",
    "sekurang-kurangnya",
    "sekurangnya",
    "sela",
    "selain",
    "selaku",
    "selalu",
    "selama",
    "selama-lamanya",
    "selamanya",
    "selanjutnya",
    "seluruh",
    "seluruhnya",
    "semacam",
    "semakin",
    "semampu",
    "semampunya",
    "semasa",
    "semasih",
    "semata",
    "semata-mata",
    "semaunya",
    "sementara",
    "semisal",
    "semisalnya",
    "sempat",
    "semua",
    "semuanya",
    "semula",
    "sendiri",
    "sendirian",
    "sendirinya",
    "seolah",
    "seolah-olah",
    "seorang",
    "sepanjang",
    "sepantasnya",
    "sepantasnyalah",
    "seperlunya",
    "seperti",
    "sepertinya",
    "sepihak",
    "sering",
    "seringnya",
    "serta",
    "serupa",
    "sesaat",
    "sesama",
    "sesampai",
    "sesegera",
    "sesekali",
    "seseorang",
    "sesuatu",
    "sesuatunya",
    "sesudah",
    "sesudahnya",
    "setelah",
    "setempat",
    "setengah",
    "seterusnya",
    "setiap",
    "setiba",
    "setibanya",
    "setidak-tidaknya",
    "setidaknya",
    "setinggi",
    "seusai",
    "sewaktu",
    "siap",
    "siapa",
    "siapakah",
    "siapapun",
    "sini",
    "sinilah",
    "soal",
    "soalnya",
    "suatu",
    "sudah",
    "sudahkah",
    "sudahlah",
    "supaya",
    "tadi",
    "tadinya",
    "tahu",
    "tahun",
    "tak",
    "tambah",
    "tambahnya",
    "tampak",
    "tampaknya",
    "tandas",
    "tandasnya",
    "tanpa",
    "tanya",
    "tanyakan",
    "tanyanya",
    "tapi",
    "tegas",
    "tegasnya",
    "telah",
    "tempat",
    "tengah",
    "tentang",
    "tentu",
    "tentulah",
    "tentunya",
    "tepat",
    "terakhir",
    "terasa",
    "terbanyak",
    "terdahulu",
    "terdapat",
    "terdiri",
    "terhadap",
    "terhadapnya",
    "teringat",
    "teringat-ingat",
    "terjadi",
    "terjadilah",
    "terjadinya",
    "terkira",
    "terlalu",
    "terlebih",
    "terlihat",
    "termasuk",
    "ternyata",
    "tersampaikan",
    "tersebut",
    "tersebutlah",
    "tertentu",
    "tertuju",
    "terus",
    "terutama",
    "tetap",
    "tetapi",
    "tiap",
    "tiba",
    "tiba-tiba",
    "tidak",
    "tidakkah",
    "tidaklah",
    "tiga",
    "tinggi",
    "toh",
    "tunjuk",
    "turut",
    "tutur",
    "tuturnya",
    "ucap",
    "ucapnya",
    "ujar",
    "ujarnya",
    "umum",
    "umumnya",
    "ungkap",
    "ungkapnya",
    "untuk",
    "usah",
    "usai",
    "waduh",
    "wah",
    "wahai",
    "waktu",
    "waktunya",
    "walau",
    "walaupun",
    "wong",
    "yaitu",
    "yakin",
    "yakni",
    "yang"
  ];
  const ita = [
    "ad",
    "al",
    "allo",
    "ai",
    "agli",
    "all",
    "agl",
    "alla",
    "alle",
    "con",
    "col",
    "coi",
    "da",
    "dal",
    "dallo",
    "dai",
    "dagli",
    "dall",
    "dagl",
    "dalla",
    "dalle",
    "di",
    "del",
    "dello",
    "dei",
    "degli",
    "dell",
    "degl",
    "della",
    "delle",
    "in",
    "nel",
    "nello",
    "nei",
    "negli",
    "nell",
    "negl",
    "nella",
    "nelle",
    "su",
    "sul",
    "sullo",
    "sui",
    "sugli",
    "sull",
    "sugl",
    "sulla",
    "sulle",
    "per",
    "tra",
    "contro",
    "io",
    "tu",
    "lui",
    "lei",
    "noi",
    "voi",
    "loro",
    "mio",
    "mia",
    "miei",
    "mie",
    "tuo",
    "tua",
    "tuoi",
    "tue",
    "suo",
    "sua",
    "suoi",
    "sue",
    "nostro",
    "nostra",
    "nostri",
    "nostre",
    "vostro",
    "vostra",
    "vostri",
    "vostre",
    "mi",
    "ti",
    "ci",
    "vi",
    "lo",
    "la",
    "li",
    "le",
    "gli",
    "ne",
    "il",
    "un",
    "uno",
    "una",
    "ma",
    "ed",
    "se",
    "perché",
    "anche",
    "come",
    "dov",
    "dove",
    "che",
    "chi",
    "cui",
    "non",
    "più",
    "quale",
    "quanto",
    "quanti",
    "quanta",
    "quante",
    "quello",
    "quelli",
    "quella",
    "quelle",
    "questo",
    "questi",
    "questa",
    "queste",
    "si",
    "tutto",
    "tutti",
    "a",
    "c",
    "e",
    "i",
    "l",
    "o",
    "ho",
    "hai",
    "ha",
    "abbiamo",
    "avete",
    "hanno",
    "abbia",
    "abbiate",
    "abbiano",
    "avrò",
    "avrai",
    "avrà",
    "avremo",
    "avrete",
    "avranno",
    "avrei",
    "avresti",
    "avrebbe",
    "avremmo",
    "avreste",
    "avrebbero",
    "avevo",
    "avevi",
    "aveva",
    "avevamo",
    "avevate",
    "avevano",
    "ebbi",
    "avesti",
    "ebbe",
    "avemmo",
    "aveste",
    "ebbero",
    "avessi",
    "avesse",
    "avessimo",
    "avessero",
    "avendo",
    "avuto",
    "avuta",
    "avuti",
    "avute",
    "sono",
    "sei",
    "è",
    "siamo",
    "siete",
    "sia",
    "siate",
    "siano",
    "sarò",
    "sarai",
    "sarà",
    "saremo",
    "sarete",
    "saranno",
    "sarei",
    "saresti",
    "sarebbe",
    "saremmo",
    "sareste",
    "sarebbero",
    "ero",
    "eri",
    "era",
    "eravamo",
    "eravate",
    "erano",
    "fui",
    "fosti",
    "fu",
    "fummo",
    "foste",
    "furono",
    "fossi",
    "fosse",
    "fossimo",
    "fossero",
    "essendo",
    "faccio",
    "fai",
    "facciamo",
    "fanno",
    "faccia",
    "facciate",
    "facciano",
    "farò",
    "farai",
    "farà",
    "faremo",
    "farete",
    "faranno",
    "farei",
    "faresti",
    "farebbe",
    "faremmo",
    "fareste",
    "farebbero",
    "facevo",
    "facevi",
    "faceva",
    "facevamo",
    "facevate",
    "facevano",
    "feci",
    "facesti",
    "fece",
    "facemmo",
    "faceste",
    "fecero",
    "facessi",
    "facesse",
    "facessimo",
    "facessero",
    "facendo",
    "sto",
    "stai",
    "sta",
    "stiamo",
    "stanno",
    "stia",
    "stiate",
    "stiano",
    "starò",
    "starai",
    "starà",
    "staremo",
    "starete",
    "staranno",
    "starei",
    "staresti",
    "starebbe",
    "staremmo",
    "stareste",
    "starebbero",
    "stavo",
    "stavi",
    "stava",
    "stavamo",
    "stavate",
    "stavano",
    "stetti",
    "stesti",
    "stette",
    "stemmo",
    "steste",
    "stettero",
    "stessi",
    "stesse",
    "stessimo",
    "stessero",
    "stando"
  ];
  const jpn = [
    "の",
    "に",
    "は",
    "を",
    "た",
    "が",
    "で",
    "て",
    "と",
    "し",
    "れ",
    "さ",
    "ある",
    "いる",
    "も",
    "する",
    "から",
    "な",
    "こと",
    "として",
    "い",
    "や",
    "れる",
    "など",
    "なっ",
    "ない",
    "この",
    "ため",
    "その",
    "あっ",
    "よう",
    "また",
    "もの",
    "という",
    "あり",
    "まで",
    "られ",
    "なる",
    "へ",
    "か",
    "だ",
    "これ",
    "によって",
    "により",
    "おり",
    "より",
    "による",
    "ず",
    "なり",
    "られる",
    "において",
    "ば",
    "なかっ",
    "なく",
    "しかし",
    "について",
    "せ",
    "だっ",
    "その後",
    "できる",
    "それ",
    "う",
    "ので",
    "なお",
    "のみ",
    "でき",
    "き",
    "つ",
    "における",
    "および",
    "いう",
    "さらに",
    "でも",
    "ら",
    "たり",
    "その他",
    "に関する",
    "たち",
    "ます",
    "ん",
    "なら",
    "に対して",
    "特に",
    "せる",
    "及び",
    "これら",
    "とき",
    "では",
    "にて",
    "ほか",
    "ながら",
    "うち",
    "そして",
    "とともに",
    "ただし",
    "かつて",
    "それぞれ",
    "または",
    "お",
    "ほど",
    "ものの",
    "に対する",
    "ほとんど",
    "と共に",
    "といった",
    "です",
    "とも",
    "ところ",
    "ここ"
  ];
  const kor = [
    "가",
    "가까스로",
    "가령",
    "각",
    "각각",
    "각자",
    "각종",
    "갖고말하자면",
    "같다",
    "같이",
    "개의치않고",
    "거니와",
    "거바",
    "거의",
    "것",
    "것과 같이",
    "것들",
    "게다가",
    "게우다",
    "겨우",
    "견지에서",
    "결과에 이르다",
    "결국",
    "결론을 낼 수 있다",
    "겸사겸사",
    "고려하면",
    "고로",
    "곧",
    "공동으로",
    "과",
    "과연",
    "관계가 있다",
    "관계없이",
    "관련이 있다",
    "관하여",
    "관한",
    "관해서는",
    "구",
    "구체적으로",
    "구토하다",
    "그",
    "그들",
    "그때",
    "그래",
    "그래도",
    "그래서",
    "그러나",
    "그러니",
    "그러니까",
    "그러면",
    "그러므로",
    "그러한즉",
    "그런 까닭에",
    "그런데",
    "그런즉",
    "그럼",
    "그럼에도 불구하고",
    "그렇게 함으로써",
    "그렇지",
    "그렇지 않다면",
    "그렇지 않으면",
    "그렇지만",
    "그렇지않으면",
    "그리고",
    "그리하여",
    "그만이다",
    "그에 따르는",
    "그위에",
    "그저",
    "그중에서",
    "그치지 않다",
    "근거로",
    "근거하여",
    "기대여",
    "기점으로",
    "기준으로",
    "기타",
    "까닭으로",
    "까악",
    "까지",
    "까지 미치다",
    "까지도",
    "꽈당",
    "끙끙",
    "끼익",
    "나",
    "나머지는",
    "남들",
    "남짓",
    "너",
    "너희",
    "너희들",
    "네",
    "넷",
    "년",
    "논하지 않다",
    "놀라다",
    "누가 알겠는가",
    "누구",
    "다른",
    "다른 방면으로",
    "다만",
    "다섯",
    "다소",
    "다수",
    "다시 말하자면",
    "다시말하면",
    "다음",
    "다음에",
    "다음으로",
    "단지",
    "답다",
    "당신",
    "당장",
    "대로 하다",
    "대하면",
    "대하여",
    "대해 말하자면",
    "대해서",
    "댕그",
    "더구나",
    "더군다나",
    "더라도",
    "더불어",
    "더욱더",
    "더욱이는",
    "도달하다",
    "도착하다",
    "동시에",
    "동안",
    "된바에야",
    "된이상",
    "두번째로",
    "둘",
    "둥둥",
    "뒤따라",
    "뒤이어",
    "든간에",
    "들",
    "등",
    "등등",
    "딩동",
    "따라",
    "따라서",
    "따위",
    "따지지 않다",
    "딱",
    "때",
    "때가 되어",
    "때문에",
    "또",
    "또한",
    "뚝뚝",
    "라 해도",
    "령",
    "로",
    "로 인하여",
    "로부터",
    "로써",
    "륙",
    "를",
    "마음대로",
    "마저",
    "마저도",
    "마치",
    "막론하고",
    "만 못하다",
    "만약",
    "만약에",
    "만은 아니다",
    "만이 아니다",
    "만일",
    "만큼",
    "말하자면",
    "말할것도 없고",
    "매",
    "매번",
    "메쓰겁다",
    "몇",
    "모",
    "모두",
    "무렵",
    "무릎쓰고",
    "무슨",
    "무엇",
    "무엇때문에",
    "물론",
    "및",
    "바꾸어말하면",
    "바꾸어말하자면",
    "바꾸어서 말하면",
    "바꾸어서 한다면",
    "바꿔 말하면",
    "바로",
    "바와같이",
    "밖에 안된다",
    "반대로",
    "반대로 말하자면",
    "반드시",
    "버금",
    "보는데서",
    "보다더",
    "보드득",
    "본대로",
    "봐",
    "봐라",
    "부류의 사람들",
    "부터",
    "불구하고",
    "불문하고",
    "붕붕",
    "비걱거리다",
    "비교적",
    "비길수 없다",
    "비로소",
    "비록",
    "비슷하다",
    "비추어 보아",
    "비하면",
    "뿐만 아니라",
    "뿐만아니라",
    "뿐이다",
    "삐걱",
    "삐걱거리다",
    "사",
    "삼",
    "상대적으로 말하자면",
    "생각한대로",
    "설령",
    "설마",
    "설사",
    "셋",
    "소생",
    "소인",
    "솨",
    "쉿",
    "습니까",
    "습니다",
    "시각",
    "시간",
    "시작하여",
    "시초에",
    "시키다",
    "실로",
    "심지어",
    "아",
    "아니",
    "아니나다를가",
    "아니라면",
    "아니면",
    "아니었다면",
    "아래윗",
    "아무거나",
    "아무도",
    "아야",
    "아울러",
    "아이",
    "아이고",
    "아이구",
    "아이야",
    "아이쿠",
    "아하",
    "아홉",
    "안 그러면",
    "않기 위하여",
    "않기 위해서",
    "알 수 있다",
    "알았어",
    "앗",
    "앞에서",
    "앞의것",
    "야",
    "약간",
    "양자",
    "어",
    "어기여차",
    "어느",
    "어느 년도",
    "어느것",
    "어느곳",
    "어느때",
    "어느쪽",
    "어느해",
    "어디",
    "어때",
    "어떠한",
    "어떤",
    "어떤것",
    "어떤것들",
    "어떻게",
    "어떻해",
    "어이",
    "어째서",
    "어쨋든",
    "어쩔수 없다",
    "어찌",
    "어찌됏든",
    "어찌됏어",
    "어찌하든지",
    "어찌하여",
    "언제",
    "언젠가",
    "얼마",
    "얼마 안 되는 것",
    "얼마간",
    "얼마나",
    "얼마든지",
    "얼마만큼",
    "얼마큼",
    "엉엉",
    "에",
    "에 가서",
    "에 달려 있다",
    "에 대해",
    "에 있다",
    "에 한하다",
    "에게",
    "에서",
    "여",
    "여기",
    "여덟",
    "여러분",
    "여보시오",
    "여부",
    "여섯",
    "여전히",
    "여차",
    "연관되다",
    "연이서",
    "영",
    "영차",
    "옆사람",
    "예",
    "예를 들면",
    "예를 들자면",
    "예컨대",
    "예하면",
    "오",
    "오로지",
    "오르다",
    "오자마자",
    "오직",
    "오호",
    "오히려",
    "와",
    "와 같은 사람들",
    "와르르",
    "와아",
    "왜",
    "왜냐하면",
    "외에도",
    "요만큼",
    "요만한 것",
    "요만한걸",
    "요컨대",
    "우르르",
    "우리",
    "우리들",
    "우선",
    "우에 종합한것과같이",
    "운운",
    "월",
    "위에서 서술한바와같이",
    "위하여",
    "위해서",
    "윙윙",
    "육",
    "으로",
    "으로 인하여",
    "으로서",
    "으로써",
    "을",
    "응",
    "응당",
    "의",
    "의거하여",
    "의지하여",
    "의해",
    "의해되다",
    "의해서",
    "이",
    "이 되다",
    "이 때문에",
    "이 밖에",
    "이 외에",
    "이 정도의",
    "이것",
    "이곳",
    "이때",
    "이라면",
    "이래",
    "이러이러하다",
    "이러한",
    "이런",
    "이럴정도로",
    "이렇게 많은 것",
    "이렇게되면",
    "이렇게말하자면",
    "이렇구나",
    "이로 인하여",
    "이르기까지",
    "이리하여",
    "이만큼",
    "이번",
    "이봐",
    "이상",
    "이어서",
    "이었다",
    "이와 같다",
    "이와 같은",
    "이와 반대로",
    "이와같다면",
    "이외에도",
    "이용하여",
    "이유만으로",
    "이젠",
    "이지만",
    "이쪽",
    "이천구",
    "이천육",
    "이천칠",
    "이천팔",
    "인 듯하다",
    "인젠",
    "일",
    "일것이다",
    "일곱",
    "일단",
    "일때",
    "일반적으로",
    "일지라도",
    "임에 틀림없다",
    "입각하여",
    "입장에서",
    "잇따라",
    "있다",
    "자",
    "자기",
    "자기집",
    "자마자",
    "자신",
    "잠깐",
    "잠시",
    "저",
    "저것",
    "저것만큼",
    "저기",
    "저쪽",
    "저희",
    "전부",
    "전자",
    "전후",
    "점에서 보아",
    "정도에 이르다",
    "제",
    "제각기",
    "제외하고",
    "조금",
    "조차",
    "조차도",
    "졸졸",
    "좀",
    "좋아",
    "좍좍",
    "주룩주룩",
    "주저하지 않고",
    "줄은 몰랏다",
    "줄은모른다",
    "중에서",
    "중의하나",
    "즈음하여",
    "즉",
    "즉시",
    "지든지",
    "지만",
    "지말고",
    "진짜로",
    "쪽으로",
    "차라리",
    "참",
    "참나",
    "첫번째로",
    "쳇",
    "총적으로",
    "총적으로 말하면",
    "총적으로 보면",
    "칠",
    "콸콸",
    "쾅쾅",
    "쿵",
    "타다",
    "타인",
    "탕탕",
    "토하다",
    "통하여",
    "툭",
    "퉤",
    "틈타",
    "팍",
    "팔",
    "퍽",
    "펄렁",
    "하",
    "하게될것이다",
    "하게하다",
    "하겠는가",
    "하고 있다",
    "하고있었다",
    "하곤하였다",
    "하구나",
    "하기 때문에",
    "하기 위하여",
    "하기는한데",
    "하기만 하면",
    "하기보다는",
    "하기에",
    "하나",
    "하느니",
    "하는 김에",
    "하는 편이 낫다",
    "하는것도",
    "하는것만 못하다",
    "하는것이 낫다",
    "하는바",
    "하더라도",
    "하도다",
    "하도록시키다",
    "하도록하다",
    "하든지",
    "하려고하다",
    "하마터면",
    "하면 할수록",
    "하면된다",
    "하면서",
    "하물며",
    "하여금",
    "하여야",
    "하자마자",
    "하지 않는다면",
    "하지 않도록",
    "하지마",
    "하지마라",
    "하지만",
    "하하",
    "한 까닭에",
    "한 이유는",
    "한 후",
    "한다면",
    "한다면 몰라도",
    "한데",
    "한마디",
    "한적이있다",
    "한켠으로는",
    "한항목",
    "할 따름이다",
    "할 생각이다",
    "할 줄 안다",
    "할 지경이다",
    "할 힘이 있다",
    "할때",
    "할만하다",
    "할망정",
    "할뿐",
    "할수있다",
    "할수있어",
    "할줄알다",
    "할지라도",
    "할지언정",
    "함께",
    "해도된다",
    "해도좋다",
    "해봐요",
    "해서는 안된다",
    "해야한다",
    "해요",
    "했어요",
    "향하다",
    "향하여",
    "향해서",
    "허",
    "허걱",
    "허허",
    "헉",
    "헉헉",
    "헐떡헐떡",
    "형식으로 쓰여",
    "혹시",
    "혹은",
    "혼자",
    "훨씬",
    "휘익",
    "휴",
    "흐흐",
    "흥",
    "힘입어",
    "︿",
    "～",
    "￥"
  ];
  const kur = [
    "ئێمە",
    "ئێوە",
    "ئەم",
    "ئەو",
    "ئەوان",
    "ئەوەی",
    "بۆ",
    "بێ",
    "بێجگە",
    "بە",
    "بەبێ",
    "بەدەم",
    "بەردەم",
    "بەرلە",
    "بەرەوی",
    "بەرەوە",
    "بەلای",
    "بەپێی",
    "تۆ",
    "تێ",
    "جگە",
    "دوای",
    "دوو",
    "دە",
    "دەکات",
    "دەگەڵ",
    "سەر",
    "لێ",
    "لە",
    "لەبابەت",
    "لەباتی",
    "لەبارەی",
    "لەبرێتی",
    "لەبن",
    "لەبەر",
    "لەبەینی",
    "لەدەم",
    "لەرێ",
    "لەرێگا",
    "لەرەوی",
    "لەسەر",
    "لەلایەن",
    "لەناو",
    "لەنێو",
    "لەو",
    "لەپێناوی",
    "لەژێر",
    "لەگەڵ",
    "من",
    "ناو",
    "نێوان",
    "هەر",
    "هەروەها",
    "و",
    "وەک",
    "پاش",
    "پێ",
    "پێش",
    "چەند",
    "کرد",
    "کە",
    "ی"
  ];
  const lat = [
    "a",
    "ab",
    "ac",
    "ad",
    "at",
    "atque",
    "aut",
    "autem",
    "cum",
    "de",
    "dum",
    "e",
    "erant",
    "erat",
    "est",
    "et",
    "etiam",
    "ex",
    "haec",
    "hic",
    "hoc",
    "in",
    "ita",
    "me",
    "nec",
    "neque",
    "non",
    "per",
    "qua",
    "quae",
    "quam",
    "qui",
    "quibus",
    "quidem",
    "quo",
    "quod",
    "re",
    "rebus",
    "rem",
    "res",
    "sed",
    "si",
    "sic",
    "sunt",
    "tamen",
    "tandem",
    "te",
    "ut",
    "vel"
  ];
  const lav = [
    "aiz",
    "ap",
    "apakš",
    "apakšpus",
    "ar",
    "arī",
    "augšpus",
    "bet",
    "bez",
    "bija",
    "biji",
    "biju",
    "bijām",
    "bijāt",
    "būs",
    "būsi",
    "būsiet",
    "būsim",
    "būt",
    "būšu",
    "caur",
    "diemžēl",
    "diezin",
    "droši",
    "dēļ",
    "esam",
    "esat",
    "esi",
    "esmu",
    "gan",
    "gar",
    "iekam",
    "iekams",
    "iekām",
    "iekāms",
    "iekš",
    "iekšpus",
    "ik",
    "ir",
    "it",
    "itin",
    "iz",
    "ja",
    "jau",
    "jeb",
    "jebšu",
    "jel",
    "jo",
    "jā",
    "ka",
    "kamēr",
    "kaut",
    "kolīdz",
    "kopš",
    "kā",
    "kļuva",
    "kļuvi",
    "kļuvu",
    "kļuvām",
    "kļuvāt",
    "kļūs",
    "kļūsi",
    "kļūsiet",
    "kļūsim",
    "kļūst",
    "kļūstam",
    "kļūstat",
    "kļūsti",
    "kļūstu",
    "kļūt",
    "kļūšu",
    "labad",
    "lai",
    "lejpus",
    "līdz",
    "līdzko",
    "ne",
    "nebūt",
    "nedz",
    "nekā",
    "nevis",
    "nezin",
    "no",
    "nu",
    "nē",
    "otrpus",
    "pa",
    "par",
    "pat",
    "pie",
    "pirms",
    "pret",
    "priekš",
    "pār",
    "pēc",
    "starp",
    "tad",
    "tak",
    "tapi",
    "taps",
    "tapsi",
    "tapsiet",
    "tapsim",
    "tapt",
    "tapāt",
    "tapšu",
    "taču",
    "te",
    "tiec",
    "tiek",
    "tiekam",
    "tiekat",
    "tieku",
    "tik",
    "tika",
    "tikai",
    "tiki",
    "tikko",
    "tiklab",
    "tiklīdz",
    "tiks",
    "tiksiet",
    "tiksim",
    "tikt",
    "tiku",
    "tikvien",
    "tikām",
    "tikāt",
    "tikšu",
    "tomēr",
    "topat",
    "turpretim",
    "turpretī",
    "tā",
    "tādēļ",
    "tālab",
    "tāpēc",
    "un",
    "uz",
    "vai",
    "var",
    "varat",
    "varēja",
    "varēji",
    "varēju",
    "varējām",
    "varējāt",
    "varēs",
    "varēsi",
    "varēsiet",
    "varēsim",
    "varēt",
    "varēšu",
    "vien",
    "virs",
    "virspus",
    "vis",
    "viņpus",
    "zem",
    "ārpus",
    "šaipus"
  ];
  const lit = [
    "abi",
    "abidvi",
    "abiejose",
    "abiejuose",
    "abiejø",
    "abiem",
    "abigaliai",
    "abipus",
    "abu",
    "abudu",
    "ai",
    "ana",
    "anaiptol",
    "anaisiais",
    "anajai",
    "anajam",
    "anajame",
    "anapus",
    "anas",
    "anasai",
    "anasis",
    "anei",
    "aniedvi",
    "anieji",
    "aniesiems",
    "anoji",
    "anojo",
    "anojoje",
    "anokia",
    "anoks",
    "anosiomis",
    "anosioms",
    "anosios",
    "anosiose",
    "anot",
    "ant",
    "antai",
    "anuodu",
    "anuoju",
    "anuosiuose",
    "anuosius",
    "anàja",
    "anàjà",
    "anàjá",
    "anàsias",
    "anøjø",
    "apie",
    "aplink",
    "ar",
    "arba",
    "argi",
    "arti",
    "aukðèiau",
    "að",
    "be",
    "bei",
    "beje",
    "bemaþ",
    "bent",
    "bet",
    "betgi",
    "beveik",
    "dar",
    "dargi",
    "daugmaþ",
    "deja",
    "dëka",
    "dël",
    "dëlei",
    "dëlto",
    "ech",
    "et",
    "gal",
    "galbût",
    "galgi",
    "gan",
    "gana",
    "gi",
    "greta",
    "idant",
    "iki",
    "ir",
    "irgi",
    "it",
    "itin",
    "ið",
    "iðilgai",
    "iðvis",
    "jaisiais",
    "jajai",
    "jajam",
    "jajame",
    "jei",
    "jeigu",
    "ji",
    "jiedu",
    "jiedvi",
    "jieji",
    "jiesiems",
    "jinai",
    "jis",
    "jisai",
    "jog",
    "joji",
    "jojo",
    "jojoje",
    "jokia",
    "joks",
    "josiomis",
    "josioms",
    "josios",
    "josiose",
    "judu",
    "judvi",
    "juk",
    "jumis",
    "jums",
    "jumyse",
    "juodu",
    "juoju",
    "juosiuose",
    "juosius",
    "jus",
    "jàja",
    "jàjà",
    "jàsias",
    "jájá",
    "jøjø",
    "jûs",
    "jûsiðkis",
    "jûsiðkë",
    "jûsø",
    "kad",
    "kada",
    "kadangi",
    "kai",
    "kaip",
    "kaipgi",
    "kas",
    "katra",
    "katras",
    "katriedvi",
    "katruodu",
    "kaþin",
    "kaþkas",
    "kaþkatra",
    "kaþkatras",
    "kaþkokia",
    "kaþkoks",
    "kaþkuri",
    "kaþkuris",
    "kiaurai",
    "kiek",
    "kiekvienas",
    "kieno",
    "kita",
    "kitas",
    "kitokia",
    "kitoks",
    "kodël",
    "kokia",
    "koks",
    "kol",
    "kolei",
    "kone",
    "kuomet",
    "kur",
    "kurgi",
    "kuri",
    "kuriedvi",
    "kuris",
    "kuriuodu",
    "lai",
    "lig",
    "ligi",
    "link",
    "lyg",
    "man",
    "manaisiais",
    "manajai",
    "manajam",
    "manajame",
    "manas",
    "manasai",
    "manasis",
    "mane",
    "manieji",
    "maniesiems",
    "manim",
    "manimi",
    "maniðkis",
    "maniðkë",
    "mano",
    "manoji",
    "manojo",
    "manojoje",
    "manosiomis",
    "manosioms",
    "manosios",
    "manosiose",
    "manuoju",
    "manuosiuose",
    "manuosius",
    "manyje",
    "manàja",
    "manàjà",
    "manàjá",
    "manàsias",
    "manæs",
    "manøjø",
    "mat",
    "maþdaug",
    "maþne",
    "mes",
    "mudu",
    "mudvi",
    "mumis",
    "mums",
    "mumyse",
    "mus",
    "mûsiðkis",
    "mûsiðkë",
    "mûsø",
    "na",
    "nagi",
    "ne",
    "nebe",
    "nebent",
    "negi",
    "negu",
    "nei",
    "nejau",
    "nejaugi",
    "nekaip",
    "nelyginant",
    "nes",
    "net",
    "netgi",
    "netoli",
    "neva",
    "nors",
    "nuo",
    "në",
    "o",
    "ogi",
    "oi",
    "paeiliui",
    "pagal",
    "pakeliui",
    "palaipsniui",
    "palei",
    "pas",
    "pasak",
    "paskos",
    "paskui",
    "paskum",
    "pat",
    "pati",
    "patiems",
    "paties",
    "pats",
    "patys",
    "patá",
    "paèiais",
    "paèiam",
    "paèiame",
    "paèiu",
    "paèiuose",
    "paèius",
    "paèiø",
    "per",
    "pernelyg",
    "pirm",
    "pirma",
    "pirmiau",
    "po",
    "prie",
    "prieð",
    "prieðais",
    "pro",
    "pusiau",
    "rasi",
    "rodos",
    "sau",
    "savaisiais",
    "savajai",
    "savajam",
    "savajame",
    "savas",
    "savasai",
    "savasis",
    "save",
    "savieji",
    "saviesiems",
    "savimi",
    "saviðkis",
    "saviðkë",
    "savo",
    "savoji",
    "savojo",
    "savojoje",
    "savosiomis",
    "savosioms",
    "savosios",
    "savosiose",
    "savuoju",
    "savuosiuose",
    "savuosius",
    "savyje",
    "savàja",
    "savàjà",
    "savàjá",
    "savàsias",
    "savæs",
    "savøjø",
    "skersai",
    "skradþiai",
    "staèiai",
    "su",
    "sulig",
    "ta",
    "tad",
    "tai",
    "taigi",
    "taip",
    "taipogi",
    "taisiais",
    "tajai",
    "tajam",
    "tajame",
    "tamsta",
    "tarp",
    "tarsi",
    "tartum",
    "tarytum",
    "tas",
    "tasai",
    "tau",
    "tavaisiais",
    "tavajai",
    "tavajam",
    "tavajame",
    "tavas",
    "tavasai",
    "tavasis",
    "tave",
    "tavieji",
    "taviesiems",
    "tavimi",
    "taviðkis",
    "taviðkë",
    "tavo",
    "tavoji",
    "tavojo",
    "tavojoje",
    "tavosiomis",
    "tavosioms",
    "tavosios",
    "tavosiose",
    "tavuoju",
    "tavuosiuose",
    "tavuosius",
    "tavyje",
    "tavàja",
    "tavàjà",
    "tavàjá",
    "tavàsias",
    "tavæs",
    "tavøjø",
    "taèiau",
    "te",
    "tegu",
    "tegul",
    "tiedvi",
    "tieji",
    "ties",
    "tiesiems",
    "tiesiog",
    "tik",
    "tikriausiai",
    "tiktai",
    "toji",
    "tojo",
    "tojoje",
    "tokia",
    "toks",
    "tol",
    "tolei",
    "toliau",
    "tosiomis",
    "tosioms",
    "tosios",
    "tosiose",
    "tu",
    "tuodu",
    "tuoju",
    "tuosiuose",
    "tuosius",
    "turbût",
    "tàja",
    "tàjà",
    "tàjá",
    "tàsias",
    "tøjø",
    "tûlas",
    "uþ",
    "uþtat",
    "uþvis",
    "va",
    "vai",
    "viduj",
    "vidury",
    "vien",
    "vienas",
    "vienokia",
    "vienoks",
    "vietoj",
    "virð",
    "virðuj",
    "virðum",
    "vis",
    "vis dëlto",
    "visa",
    "visas",
    "visgi",
    "visokia",
    "visoks",
    "vos",
    "vël",
    "vëlgi",
    "ypaè",
    "á",
    "ákypai",
    "ástriþai",
    "ðalia",
    "ðe",
    "ði",
    "ðiaisiais",
    "ðiajai",
    "ðiajam",
    "ðiajame",
    "ðiapus",
    "ðiedvi",
    "ðieji",
    "ðiesiems",
    "ðioji",
    "ðiojo",
    "ðiojoje",
    "ðiokia",
    "ðioks",
    "ðiosiomis",
    "ðiosioms",
    "ðiosios",
    "ðiosiose",
    "ðis",
    "ðisai",
    "ðit",
    "ðita",
    "ðitas",
    "ðitiedvi",
    "ðitokia",
    "ðitoks",
    "ðituodu",
    "ðiuodu",
    "ðiuoju",
    "ðiuosiuose",
    "ðiuosius",
    "ðiàja",
    "ðiàjà",
    "ðiàsias",
    "ðiøjø",
    "ðtai",
    "ðájá",
    "þemiau"
  ];
  const lgg = [
    "́",
    "̀",
    "nɨ",
    "mà",
    "rɨ",
    "dɨ",
    "ɨ",
    "́nɨ",
    "èrɨ",
    "́á'",
    "sɨ",
    "àzɨ",
    "yɨ",
    "rá",
    "vɨ",
    "nga",
    "be",
    "mɨ",
    "à",
    "dà",
    "kʉ",
    "bá",
    " ́lé",
    "má",
    "e",
    "yo",
    "̀yɨ",
    "ma",
    "kɨ",
    "àlʉ",
    "́mà",
    "rʉ́",
    "drɨ",
    "patí",
    "a",
    "è",
    "yó",
    "te",
    "̀á",
    "mà",
    "mâ",
    "dálé",
    "yí",
    "̌",
    "pɨ",
    "e'yó",
    "ndráa",
    "bo",
    "di",
    "drìá"
  ];
  const lggNd = [
    "ma",
    "ni",
    "ri",
    "eri",
    "di",
    "yi",
    "si",
    "ba",
    "nga",
    "i",
    "ra",
    "ku",
    "be",
    "yo",
    "da",
    "azini",
    "dria",
    "ru",
    "azi",
    "mu",
    "te",
    "ndra",
    "diyi",
    "ima",
    "mi",
    "alu",
    "nde",
    "alia",
    "le",
    "vile",
    "dri",
    "pati",
    "aria",
    "bo",
    "e'yo",
    "tu",
    "kini",
    "dii",
    "ama",
    "eyi",
    "dika",
    "pi",
    "e",
    "angu",
    "e'do",
    "pie",
    "ka",
    "ti",
    "o'du",
    "du"
  ];
  const msa = [
    "abdul",
    "abdullah",
    "acara",
    "ada",
    "adalah",
    "ahmad",
    "air",
    "akan",
    "akhbar",
    "akhir",
    "aktiviti",
    "alam",
    "amat",
    "amerika",
    "anak",
    "anggota",
    "antara",
    "antarabangsa",
    "apa",
    "apabila",
    "april",
    "as",
    "asas",
    "asean",
    "asia",
    "asing",
    "atas",
    "atau",
    "australia",
    "awal",
    "awam",
    "bagaimanapun",
    "bagi",
    "bahagian",
    "bahan",
    "baharu",
    "bahawa",
    "baik",
    "bandar",
    "bank",
    "banyak",
    "barangan",
    "baru",
    "baru-baru",
    "bawah",
    "beberapa",
    "bekas",
    "beliau",
    "belum",
    "berada",
    "berakhir",
    "berbanding",
    "berdasarkan",
    "berharap",
    "berikutan",
    "berjaya",
    "berjumlah",
    "berkaitan",
    "berkata",
    "berkenaan",
    "berlaku",
    "bermula",
    "bernama",
    "bernilai",
    "bersama",
    "berubah",
    "besar",
    "bhd",
    "bidang",
    "bilion",
    "bn",
    "boleh",
    "bukan",
    "bulan",
    "bursa",
    "cadangan",
    "china",
    "dagangan",
    "dalam",
    "dan",
    "dana",
    "dapat",
    "dari",
    "daripada",
    "dasar",
    "datang",
    "datuk",
    "demikian",
    "dengan",
    "depan",
    "derivatives",
    "dewan",
    "di",
    "diadakan",
    "dibuka",
    "dicatatkan",
    "dijangka",
    "diniagakan",
    "dis",
    "disember",
    "ditutup",
    "dolar",
    "dr",
    "dua",
    "dunia",
    "ekonomi",
    "eksekutif",
    "eksport",
    "empat",
    "enam",
    "faedah",
    "feb",
    "global",
    "hadapan",
    "hanya",
    "harga",
    "hari",
    "hasil",
    "hingga",
    "hubungan",
    "ia",
    "iaitu",
    "ialah",
    "indeks",
    "india",
    "indonesia",
    "industri",
    "ini",
    "islam",
    "isnin",
    "isu",
    "itu",
    "jabatan",
    "jalan",
    "jan",
    "jawatan",
    "jawatankuasa",
    "jepun",
    "jika",
    "jualan",
    "juga",
    "julai",
    "jumaat",
    "jumlah",
    "jun",
    "juta",
    "kadar",
    "kalangan",
    "kali",
    "kami",
    "kata",
    "katanya",
    "kaunter",
    "kawasan",
    "ke",
    "keadaan",
    "kecil",
    "kedua",
    "kedua-dua",
    "kedudukan",
    "kekal",
    "kementerian",
    "kemudahan",
    "kenaikan",
    "kenyataan",
    "kepada",
    "kepentingan",
    "keputusan",
    "kerajaan",
    "kerana",
    "kereta",
    "kerja",
    "kerjasama",
    "kes",
    "keselamatan",
    "keseluruhan",
    "kesihatan",
    "ketika",
    "ketua",
    "keuntungan",
    "kewangan",
    "khamis",
    "kini",
    "kira-kira",
    "kita",
    "klci",
    "klibor",
    "komposit",
    "kontrak",
    "kos",
    "kuala",
    "kuasa",
    "kukuh",
    "kumpulan",
    "lagi",
    "lain",
    "langkah",
    "laporan",
    "lebih",
    "lepas",
    "lima",
    "lot",
    "luar",
    "lumpur",
    "mac",
    "mahkamah",
    "mahu",
    "majlis",
    "makanan",
    "maklumat",
    "malam",
    "malaysia",
    "mana",
    "manakala",
    "masa",
    "masalah",
    "masih",
    "masing-masing",
    "masyarakat",
    "mata",
    "media",
    "mei",
    "melalui",
    "melihat",
    "memandangkan",
    "memastikan",
    "membantu",
    "membawa",
    "memberi",
    "memberikan",
    "membolehkan",
    "membuat",
    "mempunyai",
    "menambah",
    "menarik",
    "menawarkan",
    "mencapai",
    "mencatatkan",
    "mendapat",
    "mendapatkan",
    "menerima",
    "menerusi",
    "mengadakan",
    "mengambil",
    "mengenai",
    "menggalakkan",
    "menggunakan",
    "mengikut",
    "mengumumkan",
    "mengurangkan",
    "meningkat",
    "meningkatkan",
    "menjadi",
    "menjelang",
    "menokok",
    "menteri",
    "menunjukkan",
    "menurut",
    "menyaksikan",
    "menyediakan",
    "mereka",
    "merosot",
    "merupakan",
    "mesyuarat",
    "minat",
    "minggu",
    "minyak",
    "modal",
    "mohd",
    "mudah",
    "mungkin",
    "naik",
    "najib",
    "nasional",
    "negara",
    "negara-negara",
    "negeri",
    "niaga",
    "nilai",
    "nov",
    "ogos",
    "okt",
    "oleh",
    "operasi",
    "orang",
    "pada",
    "pagi",
    "paling",
    "pameran",
    "papan",
    "para",
    "paras",
    "parlimen",
    "parti",
    "pasaran",
    "pasukan",
    "pegawai",
    "pejabat",
    "pekerja",
    "pelabur",
    "pelaburan",
    "pelancongan",
    "pelanggan",
    "pelbagai",
    "peluang",
    "pembangunan",
    "pemberita",
    "pembinaan",
    "pemimpin",
    "pendapatan",
    "pendidikan",
    "penduduk",
    "penerbangan",
    "pengarah",
    "pengeluaran",
    "pengerusi",
    "pengguna",
    "pengurusan",
    "peniaga",
    "peningkatan",
    "penting",
    "peratus",
    "perdagangan",
    "perdana",
    "peringkat",
    "perjanjian",
    "perkara",
    "perkhidmatan",
    "perladangan",
    "perlu",
    "permintaan",
    "perniagaan",
    "persekutuan",
    "persidangan",
    "pertama",
    "pertubuhan",
    "pertumbuhan",
    "perusahaan",
    "peserta",
    "petang",
    "pihak",
    "pilihan",
    "pinjaman",
    "polis",
    "politik",
    "presiden",
    "prestasi",
    "produk",
    "program",
    "projek",
    "proses",
    "proton",
    "pukul",
    "pula",
    "pusat",
    "rabu",
    "rakan",
    "rakyat",
    "ramai",
    "rantau",
    "raya",
    "rendah",
    "ringgit",
    "rumah",
    "sabah",
    "sahaja",
    "saham",
    "sama",
    "sarawak",
    "satu",
    "sawit",
    "saya",
    "sdn",
    "sebagai",
    "sebahagian",
    "sebanyak",
    "sebarang",
    "sebelum",
    "sebelumnya",
    "sebuah",
    "secara",
    "sedang",
    "segi",
    "sehingga",
    "sejak",
    "sekarang",
    "sektor",
    "sekuriti",
    "selain",
    "selama",
    "selasa",
    "selatan",
    "selepas",
    "seluruh",
    "semakin",
    "semalam",
    "semasa",
    "sementara",
    "semua",
    "semula",
    "sen",
    "sendiri",
    "seorang",
    "sepanjang",
    "seperti",
    "sept",
    "september",
    "serantau",
    "seri",
    "serta",
    "sesi",
    "setiap",
    "setiausaha",
    "sidang",
    "singapura",
    "sini",
    "sistem",
    "sokongan",
    "sri",
    "sudah",
    "sukan",
    "suku",
    "sumber",
    "supaya",
    "susut",
    "syarikat",
    "syed",
    "tahap",
    "tahun",
    "tan",
    "tanah",
    "tanpa",
    "tawaran",
    "teknologi",
    "telah",
    "tempat",
    "tempatan",
    "tempoh",
    "tenaga",
    "tengah",
    "tentang",
    "terbaik",
    "terbang",
    "terbesar",
    "terbuka",
    "terdapat",
    "terhadap",
    "termasuk",
    "tersebut",
    "terus",
    "tetapi",
    "thailand",
    "tiada",
    "tidak",
    "tiga",
    "timbalan",
    "timur",
    "tindakan",
    "tinggi",
    "tun",
    "tunai",
    "turun",
    "turut",
    "umno",
    "unit",
    "untuk",
    "untung",
    "urus",
    "usaha",
    "utama",
    "walaupun",
    "wang",
    "wanita",
    "wilayah",
    "yang"
  ];
  const mar = [
    "अधिक",
    "अनेक",
    "अशी",
    "असलयाचे",
    "असलेल्या",
    "असा",
    "असून",
    "असे",
    "आज",
    "आणि",
    "आता",
    "आपल्या",
    "आला",
    "आली",
    "आले",
    "आहे",
    "आहेत",
    "एक",
    "एका",
    "कमी",
    "करणयात",
    "करून",
    "का",
    "काम",
    "काय",
    "काही",
    "किवा",
    "की",
    "केला",
    "केली",
    "केले",
    "कोटी",
    "गेल्या",
    "घेऊन",
    "जात",
    "झाला",
    "झाली",
    "झाले",
    "झालेल्या",
    "टा",
    "डॉ",
    "तर",
    "तरी",
    "तसेच",
    "ता",
    "ती",
    "तीन",
    "ते",
    "तो",
    "त्या",
    "त्याचा",
    "त्याची",
    "त्याच्या",
    "त्याना",
    "त्यानी",
    "त्यामुळे",
    "त्री",
    "दिली",
    "दोन",
    "न",
    "नाही",
    "निर्ण्य",
    "पण",
    "पम",
    "परयतन",
    "पाटील",
    "म",
    "मात्र",
    "माहिती",
    "मी",
    "मुबी",
    "म्हणजे",
    "म्हणाले",
    "म्हणून",
    "या",
    "याचा",
    "याची",
    "याच्या",
    "याना",
    "यानी",
    "येणार",
    "येत",
    "येथील",
    "येथे",
    "लाख",
    "व",
    "व्यकत",
    "सर्व",
    "सागित्ले",
    "सुरू",
    "हजार",
    "हा",
    "ही",
    "हे",
    "होणार",
    "होत",
    "होता",
    "होती",
    "होते"
  ];
  const mya = [
    "အပေါ်",
    "အနက်",
    "အမြဲတမ်း",
    "အတွင်းတွင်",
    "မကြာမီ",
    "မတိုင်မီ",
    "ဒါ့အပြင်",
    "အောက်မှာ",
    "အထဲမှာ",
    "ဘယ်တော့မျှ",
    "မကြာခဏ",
    "တော်တော်လေး",
    "စဉ်တွင်",
    "နှင့်အတူ",
    "နှင့်",
    "နှင့်တကွ",
    "ကျွန်တော်",
    "ကျွန်မ",
    "ငါ",
    "ကျုပ်",
    "ကျွနု်ပ်",
    "ကျနော်",
    "ကျမ",
    "သူ",
    "သူမ",
    "ထိုဟာ",
    "ထိုအရာ",
    "ဤအရာ",
    "ထို",
    "၄င်း",
    "ကျွန်တော်တို့",
    "ကျွန်မတို့",
    "ငါတို့",
    "ကျုပ်တို့",
    "ကျွနု်ပ်တို့",
    "ကျနော်တို့",
    "ကျမတို့",
    "သင်",
    "သင်တို့",
    "နင်တို့",
    "မင်း",
    "မင်းတို့",
    "သူတို့",
    "ကျွန်တော်အား",
    "ကျွန်တော်ကို",
    "ကျွန်မကို",
    "ငါကို",
    "ကျုပ်ကို",
    "ကျွနု်ပ်ကို",
    "သူ့ကို",
    "သူမကို",
    "ထိုအရာကို",
    "သင့်ကို",
    "သင်တို့ကို",
    "နင်တို့ကို",
    "မင်းကို",
    "မင်းတို့ကို",
    "ငါတို့ကို",
    "ကျုပ်တို့ကို",
    "ကျွနု်ပ်တို့ကို",
    "မိမိကိုယ်တိုင်",
    "မိမိဘာသာ",
    "မင်းကိုယ်တိုင်",
    "မင်းဘာသာ",
    "မင်းတို့ကိုယ်တိုင်",
    "မင်းတို့ဘာသာ",
    "သူကိုယ်တိုင်",
    "ကိုယ်တိုင်",
    "သူမကိုယ်တိုင်",
    "သူ့ဘာသာ",
    "သူ့ကိုယ်ကို",
    "ကိုယ့်ကိုယ်ကို",
    "မိမိကိုယ်ကို",
    "၄င်းပင်",
    "ထိုအရာပင်",
    "သည့်",
    "မည့်",
    "တဲ့",
    "ကျွနု်ပ်၏",
    "ကျွန်တော်၏",
    "ကျွန်မ၏",
    "ကျနော်၏",
    "ကျမ၏",
    "သူ၏",
    "သူမ၏",
    "ထိုအရာ၏",
    "ထိုဟာ၏",
    "ကျွနု်ပ်တို့၏",
    "ငါတို့၏",
    "ကျွန်တော်တို့၏",
    "ကျွန်မတို့၏",
    "ကျနော်တို့၏",
    "ကျမတို့၏",
    "သင်၏",
    "သင်တို့၏",
    "မင်း၏",
    "မင်းတို့၏",
    "သူတို့၏",
    "ကျွန်တော့်ဟာ",
    "ကျွန်မဟာ",
    "ကျနော်၏ဟာ",
    "ကျမ၏ဟာ",
    "ကျမဟာ",
    "ကျနော်ဟာ",
    "သူဟာ",
    "သူမဟာ",
    "သူ့ဟာ",
    "ကျွနု်ပ်တို့ဟာ",
    "ကျွန်တော်တို့ဟာ",
    "ကျွန်မတို့ဟာ",
    "သင်တို့ဟာ",
    "မင်းတို့ဟာ",
    "သူတို့ဟာ",
    "သူမတို့ဟာ",
    "ဤအရာ",
    "ဟောဒါ",
    "ဟောဒီ",
    "ဟောဒီဟာ",
    "ဒီဟာ",
    "ဒါ",
    "ထိုအရာ",
    "၄င်းအရာ",
    "ယင်းအရာ",
    "အဲဒါ",
    "ဟိုဟာ",
    "အချို့",
    "တစ်ခုခု",
    "အဘယ်မဆို",
    "ဘယ်အရာမဆို",
    "အဘယ်မည်သော",
    "အကြင်",
    "အရာရာတိုင်း",
    "စိုးစဉ်မျှ",
    "စိုးစဉ်းမျှ",
    "ဘယ်လောက်မဆို",
    "တစ်စုံတစ်ရာ",
    "တစုံတရာ",
    "အလျဉ်းမဟုတ်",
    "မည်သည့်နည်းနှင့်မျှမဟုတ်",
    "အလျဉ်းမရှိသော",
    "အခြားဖြစ်သော",
    "အခြားသော",
    "အခြားတစ်ခု",
    "အခြားတစ်ယောက်",
    "အားလုံး",
    "အရာရာတိုင်း",
    "အကုန်လုံး",
    "အလုံးစုံ",
    "အရာခပ်သိမ်း",
    "တစ်ခုစီ",
    "အသီးသီး",
    "တစ်ဦးဦး",
    "တစ်ခုခု",
    "ကိုယ်စီကိုယ်ငှ",
    "ကိုယ်စီ",
    "တစ်ဦးစီ",
    "တစ်ယောက်စီ",
    "တစ်ခုစီ",
    "အကုန်",
    "အပြည့်အစုံ",
    "လုံးလုံး",
    "နှစ်ခုလုံး",
    "နှစ်ယောက်လုံး",
    "နှစ်ဘက်လုံး",
    "တစ်စုံတစ်ရာ",
    "တစ်စုံတစ်ခု",
    "တစုံတခု",
    "တစ်စုံတစ်ယောက်",
    "တစုံတယောက်",
    "တစ်ယောက်ယောက်",
    "မည်သူမဆို",
    "ဘာမျှမရှိ",
    "ဘာမှမရှိ",
    "အဘယ်အရာမျှမရှိ",
    "လူတိုင်း",
    "လူတကာ",
    "နှင့်",
    "ပြီးလျှင်",
    "၄င်းနောက်",
    "သို့မဟုတ်",
    "သို့တည်းမဟုတ်",
    "သို့မဟုတ်လျှင်",
    "ဒါမှမဟုတ်",
    "ဖြစ်စေ",
    "သို့စေကာမူ",
    "ဒါပေမယ့်",
    "ဒါပေမဲ့",
    "မှတစ်ပါး",
    "မှလွဲလျှင်",
    "အဘယ်ကြောင့်ဆိုသော်",
    "သောကြောင့်",
    "သဖြင့်",
    "၍",
    "သည့်အတွက်ကြောင့်",
    "လျှင်",
    "ပါက",
    "အကယ်၍",
    "သော်ငြားလည်း",
    "စေကာမူ",
    "နည်းတူ",
    "ပေမယ့်",
    "ပေမဲ့",
    "ထိုနည်းတူစွာ",
    "ထိုနည်းတူ",
    "ကဲ့သို့",
    "သကဲ့သို့",
    "ယင်းကဲ့သို့",
    "ထိုကဲ့သို့",
    "နှင့်စပ်လျဉ်း၍",
    "ဤမျှ",
    "ဤမျှလောက်",
    "ဤကဲ့သို့",
    "အခုလောက်ထိ",
    "ဒါကတော့",
    "အဘယ်ကဲ့သလို့",
    "မည်ကဲ့သို့",
    "မည်သည့်နည်းနှင့်",
    "မည်သည့်နည်းဖြင့်",
    "မည်သည့်နည့်နှင့်မဆို",
    "မည်သည့်နည်းဖြင့်မဆို",
    "မည်သို့",
    "ဘယ်လိုလဲ",
    "သို့ပေတည့်",
    "သို့ပေမည့်",
    "ဘယ်နည်းနှင့်",
    "မည်ရွေ့မည်မျှ",
    "အဘယ်မျှလောက်",
    "ဘယ်လောက်",
    "မည်သူ",
    "ဘယ်သူ",
    "မည်သည့်အကြောင်းကြောင့်",
    "ဘာအတွက်ကြောင့်",
    "အဘယ်ကြောင့်",
    "မည်သည့်အတွက်ကြောင့်",
    "ဘာကြောင့်",
    "ဘာအတွက်နဲ့လဲ",
    "မည်သည်",
    "ဘာလဲ",
    "အဘယ်အရာနည်း",
    "မည်သည့်အရပ်မှာ",
    "ဘယ်နေရာတွင်",
    "မည်သည့်နေရာတွင်",
    "မည်သည့်နေရာသို့",
    "ဘယ်နေရာသို့",
    "ဘယ်နေရာမှာ",
    "ဘယ်သူ၏",
    "မည်သည့်အရာ၏",
    "မည်သည့်အခါ",
    "ဘယ်အချိန်",
    "ဘယ်အခါ",
    "မည်သည့်အချိန်",
    "ဘယ်တော့",
    "မည်သူကို",
    "မည်သူက",
    "ဘယ်သူ့ကို",
    "မည်သူမည်ဝါ",
    "မည်သည့်အရာ",
    "ဘယ်အရာ",
    "မည်သို့ပင်ဖြစ်စေ",
    "ဘယ်လိုပဲဖြစ်ဖြစ်",
    "မည်ရွေ့မည်မျှဖြစ်စေ",
    "မည်သည့်နည်းနှင့်မဆို",
    "ဘယ်နည်းနဲ့ဖြစ်ဖြစ်",
    "မည်သူမဆို",
    "ဘယ်သူမဆို",
    "အဘယ်သူမဆို",
    "မည်သည့်အရာမဆို",
    "ဘာဖြစ်ဖြစ်",
    "မည်သည့်အရာဖြစ်ဖြစ်",
    "မည်သည့်အရပ်၌မဆို",
    "မည်သည့်နေရာမဆို",
    "ဘယ်အခါမဆို",
    "ဘယ်အချိန်မဆို",
    "ဘယ်အခါဖြစ်ဖြစ်",
    "အချိန်အခါမရွေး"
  ];
  const nob = [
    "og",
    "i",
    "jeg",
    "det",
    "at",
    "en",
    "et",
    "den",
    "til",
    "er",
    "som",
    "på",
    "de",
    "med",
    "han",
    "av",
    "ikke",
    "der",
    "så",
    "var",
    "meg",
    "seg",
    "men",
    "ett",
    "har",
    "om",
    "vi",
    "min",
    "mitt",
    "ha",
    "hadde",
    "hun",
    "nå",
    "over",
    "da",
    "ved",
    "fra",
    "du",
    "ut",
    "sin",
    "dem",
    "oss",
    "opp",
    "man",
    "kan",
    "hans",
    "hvor",
    "eller",
    "hva",
    "skal",
    "selv",
    "sjøl",
    "her",
    "alle",
    "vil",
    "bli",
    "ble",
    "blitt",
    "kunne",
    "inn",
    "når",
    "kom",
    "noen",
    "noe",
    "ville",
    "dere",
    "som",
    "deres",
    "kun",
    "ja",
    "etter",
    "ned",
    "skulle",
    "denne",
    "for",
    "deg",
    "si",
    "sine",
    "sitt",
    "mot",
    "å",
    "meget",
    "hvorfor",
    "dette",
    "disse",
    "uten",
    "hvordan",
    "ingen",
    "din",
    "ditt",
    "blir",
    "samme",
    "hvilken",
    "hvilke",
    "sånn",
    "inni",
    "mellom",
    "vår",
    "hver",
    "hvem",
    "vors",
    "hvis",
    "både",
    "bare",
    "enn",
    "fordi",
    "før",
    "mange",
    "også",
    "slik",
    "vært",
    "være",
    "begge",
    "siden",
    "henne",
    "hennar",
    "hennes"
  ];
  const panGu = [
    "ਦੇ",
    "ਵਿੱਚ",
    "ਦਾ",
    "ਅਤੇ",
    "ਦੀ",
    "ਇੱਕ",
    "ਨੂੰ",
    "ਹੈ",
    "ਤੋਂ",
    "ਇਸ",
    "ਇਹ",
    "ਨੇ",
    "ਤੇ",
    "ਨਾਲ",
    "ਲਈ",
    "ਵੀ",
    "ਸੀ",
    "ਵਿਚ",
    "ਕਿ",
    "ਜੋ",
    "ਉਹ",
    "ਉਸ",
    "ਹਨ",
    "ਜਾਂਦਾ",
    "ਕੀਤਾ",
    "ਗਿਆ",
    "ਹੀ",
    "ਕੇ",
    "ਜਾਂ",
    "ਦੀਆਂ",
    "ਜਿਸ",
    "ਕਰਨ",
    "ਹੋ",
    "ਕਰ",
    "ਆਪਣੇ",
    "ਕੀਤੀ",
    "ਤੌਰ",
    "ਬਾਅਦ",
    "ਨਹੀਂ",
    "ਭਾਰਤੀ",
    "ਪਿੰਡ",
    "ਸਿੰਘ",
    "ਉੱਤੇ",
    "ਸਾਲ",
    "।",
    "ਪੰਜਾਬ",
    "ਸਭ",
    "ਭਾਰਤ",
    "ਉਨ੍ਹਾਂ",
    "ਹੁੰਦਾ",
    "ਤੱਕ",
    "ਇਕ",
    "ਹੋਇਆ",
    "ਜਨਮ",
    "ਬਹੁਤ",
    "ਪਰ",
    "ਦੁਆਰਾ",
    "ਰੂਪ",
    "ਹੋਰ",
    "ਕੰਮ",
    "ਆਪਣੀ",
    "ਤਾਂ",
    "ਸਮੇਂ",
    "ਪੰਜਾਬੀ",
    "ਗਈ",
    "ਦਿੱਤਾ",
    "ਦੋ",
    "ਕਿਸੇ",
    "ਕਈ",
    "ਜਾ",
    "ਵਾਲੇ",
    "ਸ਼ੁਰੂ",
    "ਉਸਨੇ",
    "ਕਿਹਾ",
    "ਹੋਣ",
    "ਲੋਕ",
    "ਜਾਂਦੀ",
    "ਵਿੱਚੋਂ",
    "ਨਾਮ",
    "ਜਦੋਂ",
    "ਪਹਿਲਾਂ",
    "ਕਰਦਾ",
    "ਹੁੰਦੀ",
    "ਹੋਏ",
    "ਸਨ",
    "ਵਜੋਂ",
    "ਰਾਜ",
    "ਮੁੱਖ",
    "ਕਰਦੇ",
    "ਕੁਝ",
    "ਸਾਰੇ",
    "ਹੁੰਦੇ",
    "ਸ਼ਹਿਰ",
    "ਭਾਸ਼ਾ",
    "ਹੋਈ",
    "ਅਨੁਸਾਰ",
    "ਸਕਦਾ",
    "ਆਮ",
    "ਵੱਖ",
    "ਕੋਈ",
    "ਵਾਰ",
    "ਗਏ",
    "ਖੇਤਰ",
    "ਜੀ",
    "ਕਾਰਨ",
    "ਕਰਕੇ",
    "ਜਿਵੇਂ",
    "ਜ਼ਿਲ੍ਹੇ",
    "ਲੋਕਾਂ",
    "ਚ",
    "ਸਾਹਿਤ",
    "ਸਦੀ",
    "ਬਾਰੇ",
    "ਜਾਂਦੇ",
    "ਵਾਲਾ",
    "ਜਾਣ",
    "ਪਹਿਲੀ",
    "ਪ੍ਰਾਪਤ",
    "ਰਿਹਾ",
    "ਵਾਲੀ",
    "ਨਾਂ",
    "ਦੌਰਾਨ",
    "ਤਰ੍ਹਾਂ",
    "ਯੂਨੀਵਰਸਿਟੀ",
    "ਨਾ",
    "ਏ",
    "ਤਿੰਨ",
    "ਇਨ੍ਹਾਂ",
    "ਗੁਰੂ",
    "ਇਸਨੂੰ",
    "ਇਹਨਾਂ",
    "ਪਿਤਾ",
    "ਲਿਆ",
    "ਸ਼ਾਮਲ",
    "ਸ਼ਬਦ",
    "ਅੰਗਰੇਜ਼ੀ",
    "ਉਸਨੂੰ",
    "ਉਹਨਾਂ",
    "ਸਥਿਤ",
    "ਫਿਰ",
    "ਜੀਵਨ",
    "ਸਕੂਲ",
    "ਹੁਣ",
    "ਦਿਨ",
    "ਕੀਤੇ",
    "ਆਦਿ",
    "ਵੱਧ",
    "ਲੈ",
    "ਘਰ",
    "ਵੱਲ",
    "ਦੇਸ਼",
    "ਵਲੋਂ",
    "ਬਣ",
    "ਵੀਂ",
    "ਫਿਲਮ",
    "ਉਮਰ",
    "ਬਲਾਕ",
    "ਰਹੇ",
    "ਸਾਹਿਬ",
    "ਕਰਦੀ",
    "ਹਰ",
    "ਪੈਦਾ",
    "ਘੱਟ",
    "ਲੇਖਕ",
    "ਹਿੱਸਾ",
    "ਫ਼ਿਲਮ",
    "ਮੌਤ",
    "ਜਿੱਥੇ",
    "ਵੱਡਾ",
    "ਵਿਖੇ",
    "ਆਪਣਾ",
    "ਪਹਿਲਾ",
    "ਵਰਤੋਂ",
    "ਆਪ",
    "ਕਰਨਾ",
    "ਵਿਆਹ",
    "ਰਹੀ",
    "ਰਾਹੀਂ",
    "ਦਿੱਤੀ",
    "ਉਸਦੇ",
    "ਪਰਿਵਾਰ",
    "ਆ",
    "ਦੂਜੇ",
    "ਅਮਰੀਕਾ",
    "ਮੰਨਿਆ",
    "ਇਸਦੇ",
    "ਈ",
    "ਕਾਲਜ",
    "ਸਰਕਾਰ",
    "ਇੱਥੇ",
    "ਪਾਕਿਸਤਾਨ",
    "ਸ਼ਾਮਿਲ",
    "ਵਿਗਿਆਨ",
    "ਉਸਦੀ",
    "ਪੇਸ਼",
    "ਕਿਉਂਕਿ",
    "ਪਹਿਲੇ",
    "ਧਰਮ",
    "ਮਸ਼ਹੂਰ",
    "ਅੰਦਰ",
    "ਵਿਚੋਂ",
    "ਜਿਨ੍ਹਾਂ",
    "ਜਾਣਿਆ",
    "ਪਾਣੀ",
    "ਇਲਾਵਾ",
    "ਅਰਥ",
    "ਚਾਰ",
    "ਪ੍ਰਸਿੱਧ",
    "ਨਾਵਲ",
    "ਵੱਡੇ",
    "ਵੱਲੋਂ",
    "ਕਹਾਣੀ",
    "ਵਿਸ਼ਵ",
    "ਮੂਲ",
    "ਅਮਰੀਕੀ",
    "ਸਥਾਨ",
    "ਇਤਿਹਾਸ",
    "ਕੁੱਝ",
    "ਵਿਕਾਸ",
    "ਉੱਤਰ",
    "ਸਿੱਖਿਆ",
    "ਹਿੰਦੀ",
    "ਪ੍ਰਮੁੱਖ",
    "ਰਚਨਾ",
    "ਬਣਾਇਆ",
    "ਵਿਸ਼ੇਸ਼",
    "ਡਾ",
    "ਉੱਪਰ",
    "ਪੱਛਮੀ",
    "ਦੇਣ",
    "ਇਸਦਾ",
    "ਸਕਦੇ",
    "ਰੱਖਿਆ",
    "ਕਵੀ",
    "ਦਿੱਲੀ",
    "ਵੱਡੀ",
    "ਭੂਮਿਕਾ",
    "ਸਮਾਜ",
    "ਕਾਵਿ",
    "ਕੀ",
    "ਕੋਲ",
    "ਦ",
    "ਗੱਲ",
    "ਸੰਸਾਰ",
    "ਭਾਗ",
    "ਆਈ",
    "ਦੱਖਣ",
    "ਅੱਜ",
    "ਸਿੱਖ",
    "ਕਹਿੰਦੇ",
    "ਸੰਗੀਤ",
    "ਕਿਲੋਮੀਟਰ",
    "ਜਿਹਨਾਂ",
    "ਸਭਾ",
    "ਜਿਸਦਾ",
    "ਜਨਵਰੀ",
    "ਕਵਿਤਾ",
    "ਮੈਂਬਰ",
    "ਲਿਖਿਆ",
    "ਮਾਂ",
    "ਕਲਾ",
    "ਪੰਜ",
    "ਥਾਂ",
    "ਹੇਠ",
    "ਜਿਆਦਾ",
    "ਵਰਤਿਆ",
    "ਮਾਰਚ",
    "ਡੀ",
    "ਅਕਤੂਬਰ",
    "ਤਕ",
    "ਨਾਟਕ",
    "ਬੀ",
    "ਖਾਸ",
    "ਇਸੇ",
    "ਆਧੁਨਿਕ",
    "ਅਗਸਤ",
    "ਤਿਆਰ",
    "ਮਾਤਾ",
    "ਬਣਾਉਣ",
    "ਨਵੰਬਰ",
    "ਵਿਅਕਤੀ",
    "ਦੱਖਣੀ",
    "ਦਸੰਬਰ",
    "ਆਫ",
    "ਗੀਤ",
    "ਗਿਣਤੀ",
    "ਕਾਲ",
    "ਖੋਜ",
    "ਸਾਲਾਂ",
    "ਪੂਰੀ",
    "ਸਮਾਂ",
    "ਜ਼ਿਆਦਾ",
    "ਇਸਦੀ",
    "ਸਕਦੀ",
    "ਵਿਚਕਾਰ",
    "ਰਾਜਧਾਨੀ",
    "ਉਸਦਾ",
    "ਜੁਲਾਈ",
    "ਜੂਨ",
    "ਅਧੀਨ",
    "ਸਥਾਪਨਾ",
    "ਸੇਵਾ",
    "ਭਾਵ",
    "ਵਰਗ",
    "ਛੋਟੇ",
    "ਦਿੰਦਾ",
    "ਸਮਾਜਿਕ",
    "ਹੁੰਦੀਆਂ",
    "ਟੀਮ",
    "ਔਰਤਾਂ",
    "ਅਕਸਰ",
    "ਪ੍ਰਕਾਸ਼ਿਤ",
    "ਉਰਦੂ",
    "ਰੰਗ",
    "ਪਾਰਟੀ",
    "ਬਣਾ",
    "ਪ੍ਰਭਾਵ",
    "ਸ਼ੁਰੂਆਤ",
    "ਲਗਭਗ",
    "ਮਈ",
    "ਸਿਰਫ",
    "ਨੇੜੇ",
    "ਜਿਸਨੂੰ",
    "ਹਾਲਾਂਕਿ",
    "ਦੂਰ",
    "ਸਤੰਬਰ",
    "ਕਿਤਾਬ",
    "ਕਦੇ",
    "ਉੱਤਰੀ",
    "ਪ੍ਰਕਾਰ",
    "ਇਸਨੇ",
    "ਪ੍ਰਦੇਸ਼",
    "ਅੱਗੇ",
    "ਸੰਯੁਕਤ",
    "ਪੜ੍ਹਾਈ",
    "ਵਧੇਰੇ",
    "ਨਾਲ਼",
    "ਮਨੁੱਖ",
    "ਬਾਕੀ",
    "ਪ੍ਰਧਾਨ",
    "ਦੂਜੀ",
    "ਕੁੱਲ",
    "ਆਫ਼",
    "ਅਧਿਐਨ",
    "ਰਾਸ਼ਟਰੀ",
    "ਪੁੱਤਰ",
    "ਅੰਤਰਰਾਸ਼ਟਰੀ",
    "ਧਰਤੀ",
    "ਕੇਂਦਰ",
    "ਦੇਸ਼ਾਂ",
    "ਮੱਧ",
    "ਜ਼ਿਲ੍ਹਾ",
    "ਸਾਰੀਆਂ",
    "ਪੱਧਰ",
    "ਹੋਵੇ",
    "ਜੇ",
    "ਭਾਈ",
    "ਰਹਿਣ",
    "ਪੁਰਸਕਾਰ",
    "ਸਭਿਆਚਾਰ",
    "ਪਤਾ",
    "ਪਾਸੇ",
    "ਨਵੇਂ",
    "ਕੰਪਨੀ",
    "ਬਾਹਰ",
    "ਵੇਲੇ",
    "ਸੰਨ",
    "ਪੂਰਬੀ",
    "ਵਿਚਾਰ",
    "ਕਾਰਜ",
    "ਪੀ",
    "ਮਹੱਤਵਪੂਰਨ",
    "ਦੁਨੀਆਂ",
    "ਧਾਰਮਿਕ",
    "ਮਨੁੱਖੀ",
    "ਸਮੂਹ",
    "ਅਜਿਹੇ",
    "ਲਾਲ",
    "ਦੂਜਾ",
    "ਭਰਾ",
    "ਸ੍ਰੀ",
    "ਅੰਤ",
    "ਜਾਂਦੀਆਂ",
    "ਸ਼ਾਹ",
    "ਰਹਿੰਦੇ",
    "ਮਹਾਨ",
    "ਚੀਨ",
    "ਮੀਟਰ",
    "ਵਰਗੇ",
    "ਨਾਲੋਂ",
    "ਹਾਸਲ",
    "ਕਿਸਮ",
    "ਅਜਿਹਾ",
    "ਬਣਿਆ",
    "ਭਰ",
    "ਛੱਡ",
    "ਲੈਣ",
    "ਹਿੱਸੇ",
    "ਟੀ",
    "ਲਿਖੇ",
    "ਮਿਲ",
    "ਮੌਜੂਦ",
    "ਦਿੱਤੇ",
    "ਵਾਸਤੇ",
    "ਵਾਲੀਆਂ",
    "ਵਧੀਆ",
    "ਰੂਸੀ",
    "ਜਾਰੀ",
    "ਸਰਕਾਰੀ",
    "ਡਿਗਰੀ",
    "ਪੱਛਮ",
    "ਲੜਾਈ",
    "ਭਾਸ਼ਾਵਾਂ",
    "ਰਾਜਾ",
    "ਜਲੰਧਰ",
    "ਹਿੰਦੂ",
    "ਔਰਤ",
    "ਜੰਗ",
    "ਬਾਬਾ",
    "ਬੱਚਿਆਂ",
    "ਮੰਤਰੀ",
    "ਪਟਿਆਲਾ",
    "ਵਾਂਗ",
    "ਆਉਣ",
    "ਭਾਵੇਂ",
    "ਕੇਵਲ",
    "ਐਸ",
    "ਪ੍ਰਾਚੀਨ",
    "ਰਹਿੰਦਾ",
    "ਬੋਲੀ",
    "ਅਵਾਰਡ",
    "ਨਗਰ",
    "ਖੇਡਾਂ",
    "ਫਿਲਮਾਂ",
    "ਬੱਚੇ",
    "ਕੌਰ",
    "ਤੋ",
    "ਪ੍ਰਤੀ",
    "ਕੁਆਂਟਮ",
    "ਅਬਾਦੀ",
    "ਪੁਸਤਕ",
    "ਐਮ",
    "ਰਾਮ",
    "ਖੇਤਰਾਂ",
    "ਫਰਵਰੀ",
    "ਕ੍ਰਿਕਟ",
    "ਪੈਂਦਾ",
    "ਇਤਿਹਾਸਕ",
    "ਲੱਗ",
    "ਬ੍ਰਿਟਿਸ਼",
    "ਆਇਆ",
    "ਮਿਲਦਾ"
  ];
  const fas = [
    "از",
    "با",
    "به",
    "برای",
    "و",
    "باید",
    "شاید",
    "اکنون",
    "اگر",
    "اگرچه",
    "الا",
    "اما",
    "اندر",
    "اینکه",
    "باری",
    "بالعکس",
    "بدون",
    "بر",
    "بلکه",
    "بنابراین",
    "بی",
    "پس",
    "تا",
    "جز",
    "چنانچه",
    "چه",
    "چون",
    "در",
    "را",
    "روی",
    "زیرا",
    "سپس",
    "غیر",
    "که",
    "لیکن",
    "مانند",
    "مثل",
    "مگر",
    "نه",
    "نیز",
    "هرچند",
    "هم",
    "همان",
    "وانگهی",
    "ولی",
    "ولو",
    "همانند",
    "همچو"
  ];
  const pol = [
    "a",
    "aby",
    "ach",
    "acz",
    "aczkolwiek",
    "aj",
    "albo",
    "ale",
    "ależ",
    "ani",
    "aż",
    "bardziej",
    "bardzo",
    "bo",
    "bowiem",
    "by",
    "byli",
    "bynajmniej",
    "być",
    "był",
    "była",
    "było",
    "były",
    "będzie",
    "będą",
    "cali",
    "cała",
    "cały",
    "ci",
    "cię",
    "ciebie",
    "co",
    "cokolwiek",
    "coś",
    "czasami",
    "czasem",
    "czemu",
    "czy",
    "czyli",
    "daleko",
    "dla",
    "dlaczego",
    "dlatego",
    "do",
    "dobrze",
    "dokąd",
    "dość",
    "dużo",
    "dwa",
    "dwaj",
    "dwie",
    "dwoje",
    "dziś",
    "dzisiaj",
    "gdy",
    "gdyby",
    "gdyż",
    "gdzie",
    "gdziekolwiek",
    "gdzieś",
    "i",
    "ich",
    "ile",
    "im",
    "inna",
    "inne",
    "inny",
    "innych",
    "iż",
    "ja",
    "ją",
    "jak",
    "jakaś",
    "jakby",
    "jaki",
    "jakichś",
    "jakie",
    "jakiś",
    "jakiż",
    "jakkolwiek",
    "jako",
    "jakoś",
    "je",
    "jeden",
    "jedna",
    "jedno",
    "jednak",
    "jednakże",
    "jego",
    "jej",
    "jemu",
    "jest",
    "jestem",
    "jeszcze",
    "jeśli",
    "jeżeli",
    "już",
    "ją",
    "każdy",
    "kiedy",
    "kilka",
    "kimś",
    "kto",
    "ktokolwiek",
    "ktoś",
    "która",
    "które",
    "którego",
    "której",
    "który",
    "których",
    "którym",
    "którzy",
    "ku",
    "lat",
    "lecz",
    "lub",
    "ma",
    "mają",
    "mało",
    "mam",
    "mi",
    "mimo",
    "między",
    "mną",
    "mnie",
    "mogą",
    "moi",
    "moim",
    "moja",
    "moje",
    "może",
    "możliwe",
    "można",
    "mój",
    "mu",
    "musi",
    "my",
    "na",
    "nad",
    "nam",
    "nami",
    "nas",
    "nasi",
    "nasz",
    "nasza",
    "nasze",
    "naszego",
    "naszych",
    "natomiast",
    "natychmiast",
    "nawet",
    "nią",
    "nic",
    "nich",
    "nie",
    "niech",
    "niego",
    "niej",
    "niemu",
    "nigdy",
    "nim",
    "nimi",
    "niż",
    "no",
    "o",
    "obok",
    "od",
    "około",
    "on",
    "ona",
    "one",
    "oni",
    "ono",
    "oraz",
    "oto",
    "owszem",
    "pan",
    "pana",
    "pani",
    "po",
    "pod",
    "podczas",
    "pomimo",
    "ponad",
    "ponieważ",
    "powinien",
    "powinna",
    "powinni",
    "powinno",
    "poza",
    "prawie",
    "przecież",
    "przed",
    "przede",
    "przedtem",
    "przez",
    "przy",
    "roku",
    "również",
    "sam",
    "sama",
    "są",
    "się",
    "skąd",
    "sobie",
    "sobą",
    "sposób",
    "swoje",
    "ta",
    "tak",
    "taka",
    "taki",
    "takie",
    "także",
    "tam",
    "te",
    "tego",
    "tej",
    "temu",
    "ten",
    "teraz",
    "też",
    "to",
    "tobą",
    "tobie",
    "toteż",
    "trzeba",
    "tu",
    "tutaj",
    "twoi",
    "twoim",
    "twoja",
    "twoje",
    "twym",
    "twój",
    "ty",
    "tych",
    "tylko",
    "tym",
    "u",
    "w",
    "wam",
    "wami",
    "was",
    "wasz",
    "zaś",
    "wasza",
    "wasze",
    "we",
    "według",
    "wiele",
    "wielu",
    "więc",
    "więcej",
    "tę",
    "wszyscy",
    "wszystkich",
    "wszystkie",
    "wszystkim",
    "wszystko",
    "wtedy",
    "wy",
    "właśnie",
    "z",
    "za",
    "zapewne",
    "zawsze",
    "ze",
    "zł",
    "znowu",
    "znów",
    "został",
    "żaden",
    "żadna",
    "żadne",
    "żadnych",
    "że",
    "żeby"
  ];
  const por = [
    "a",
    "à",
    "ao",
    "aos",
    "aquela",
    "aquelas",
    "aquele",
    "aqueles",
    "aquilo",
    "as",
    "às",
    "até",
    "com",
    "como",
    "da",
    "das",
    "de",
    "dela",
    "delas",
    "dele",
    "deles",
    "depois",
    "do",
    "dos",
    "e",
    "ela",
    "elas",
    "ele",
    "eles",
    "em",
    "entre",
    "essa",
    "essas",
    "esse",
    "esses",
    "esta",
    "estas",
    "este",
    "estes",
    "eu",
    "isso",
    "isto",
    "já",
    "lhe",
    "lhes",
    "mais",
    "mas",
    "me",
    "mesmo",
    "meu",
    "meus",
    "minha",
    "minhas",
    "muito",
    "muitos",
    "na",
    "não",
    "nas",
    "nem",
    "no",
    "nos",
    "nós",
    "nossa",
    "nossas",
    "nosso",
    "nossos",
    "num",
    "nuns",
    "numa",
    "numas",
    "o",
    "os",
    "ou",
    "para",
    "pela",
    "pelas",
    "pelo",
    "pelos",
    "por",
    "quais",
    "qual",
    "quando",
    "que",
    "quem",
    "se",
    "sem",
    "seu",
    "seus",
    "só",
    "sua",
    "suas",
    "também",
    "te",
    "teu",
    "teus",
    "tu",
    "tua",
    "tuas",
    "um",
    "uma",
    "umas",
    "você",
    "vocês",
    "vos",
    "vosso",
    "vossos"
  ];
  const porBr = [
    "a",
    "à",
    "adeus",
    "agora",
    "aí",
    "ainda",
    "além",
    "algo",
    "alguém",
    "algum",
    "alguma",
    "algumas",
    "alguns",
    "ali",
    "ampla",
    "amplas",
    "amplo",
    "amplos",
    "ano",
    "anos",
    "ante",
    "antes",
    "ao",
    "aos",
    "apenas",
    "apoio",
    "após",
    "aquela",
    "aquelas",
    "aquele",
    "aqueles",
    "aqui",
    "aquilo",
    "área",
    "as",
    "às",
    "assim",
    "até",
    "atrás",
    "através",
    "baixo",
    "bastante",
    "bem",
    "boa",
    "boas",
    "bom",
    "bons",
    "breve",
    "cá",
    "cada",
    "catorze",
    "cedo",
    "cento",
    "certamente",
    "certeza",
    "cima",
    "cinco",
    "coisa",
    "coisas",
    "com",
    "como",
    "conselho",
    "contra",
    "contudo",
    "custa",
    "da",
    "dá",
    "dão",
    "daquela",
    "daquelas",
    "daquele",
    "daqueles",
    "dar",
    "das",
    "de",
    "debaixo",
    "dela",
    "delas",
    "dele",
    "deles",
    "demais",
    "dentro",
    "depois",
    "desde",
    "dessa",
    "dessas",
    "desse",
    "desses",
    "desta",
    "destas",
    "deste",
    "destes",
    "deve",
    "devem",
    "devendo",
    "dever",
    "deverá",
    "deverão",
    "deveria",
    "deveriam",
    "devia",
    "deviam",
    "dez",
    "dezenove",
    "dezesseis",
    "dezessete",
    "dezoito",
    "dia",
    "diante",
    "disse",
    "disso",
    "disto",
    "dito",
    "diz",
    "dizem",
    "dizer",
    "do",
    "dois",
    "dos",
    "doze",
    "duas",
    "dúvida",
    "e",
    "é",
    "ela",
    "elas",
    "ele",
    "eles",
    "em",
    "embora",
    "enquanto",
    "entre",
    "era",
    "eram",
    "éramos",
    "és",
    "essa",
    "essas",
    "esse",
    "esses",
    "esta",
    "está",
    "estamos",
    "estão",
    "estar",
    "estas",
    "estás",
    "estava",
    "estavam",
    "estávamos",
    "este",
    "esteja",
    "estejam",
    "estejamos",
    "estes",
    "esteve",
    "estive",
    "estivemos",
    "estiver",
    "estivera",
    "estiveram",
    "estivéramos",
    "estiverem",
    "estivermos",
    "estivesse",
    "estivessem",
    "estivéssemos",
    "estiveste",
    "estivestes",
    "estou",
    "etc",
    "eu",
    "exemplo",
    "faço",
    "falta",
    "favor",
    "faz",
    "fazeis",
    "fazem",
    "fazemos",
    "fazendo",
    "fazer",
    "fazes",
    "feita",
    "feitas",
    "feito",
    "feitos",
    "fez",
    "fim",
    "final",
    "foi",
    "fomos",
    "for",
    "fora",
    "foram",
    "fôramos",
    "forem",
    "forma",
    "formos",
    "fosse",
    "fossem",
    "fôssemos",
    "foste",
    "fostes",
    "fui",
    "geral",
    "grande",
    "grandes",
    "grupo",
    "há",
    "haja",
    "hajam",
    "hajamos",
    "hão",
    "havemos",
    "havia",
    "hei",
    "hoje",
    "hora",
    "horas",
    "houve",
    "houvemos",
    "houver",
    "houvera",
    "houverá",
    "houveram",
    "houvéramos",
    "houverão",
    "houverei",
    "houverem",
    "houveremos",
    "houveria",
    "houveriam",
    "houveríamos",
    "houvermos",
    "houvesse",
    "houvessem",
    "houvéssemos",
    "isso",
    "isto",
    "já",
    "la",
    "lá",
    "lado",
    "lhe",
    "lhes",
    "lo",
    "local",
    "logo",
    "longe",
    "lugar",
    "maior",
    "maioria",
    "mais",
    "mal",
    "mas",
    "máximo",
    "me",
    "meio",
    "menor",
    "menos",
    "mês",
    "meses",
    "mesma",
    "mesmas",
    "mesmo",
    "mesmos",
    "meu",
    "meus",
    "mil",
    "minha",
    "minhas",
    "momento",
    "muita",
    "muitas",
    "muito",
    "muitos",
    "na",
    "nada",
    "não",
    "naquela",
    "naquelas",
    "naquele",
    "naqueles",
    "nas",
    "nem",
    "nenhum",
    "nenhuma",
    "nessa",
    "nessas",
    "nesse",
    "nesses",
    "nesta",
    "nestas",
    "neste",
    "nestes",
    "ninguém",
    "nível",
    "no",
    "noite",
    "nome",
    "nos",
    "nós",
    "nossa",
    "nossas",
    "nosso",
    "nossos",
    "nova",
    "novas",
    "nove",
    "novo",
    "novos",
    "num",
    "numa",
    "número",
    "nunca",
    "o",
    "obra",
    "obrigada",
    "obrigado",
    "oitava",
    "oitavo",
    "oito",
    "onde",
    "ontem",
    "onze",
    "os",
    "ou",
    "outra",
    "outras",
    "outro",
    "outros",
    "para",
    "parece",
    "parte",
    "partir",
    "paucas",
    "pela",
    "pelas",
    "pelo",
    "pelos",
    "pequena",
    "pequenas",
    "pequeno",
    "pequenos",
    "per",
    "perante",
    "perto",
    "pode",
    "pude",
    "pôde",
    "podem",
    "podendo",
    "poder",
    "poderia",
    "poderiam",
    "podia",
    "podiam",
    "põe",
    "põem",
    "pois",
    "ponto",
    "pontos",
    "por",
    "porém",
    "porque",
    "porquê",
    "posição",
    "possível",
    "possivelmente",
    "posso",
    "pouca",
    "poucas",
    "pouco",
    "poucos",
    "primeira",
    "primeiras",
    "primeiro",
    "primeiros",
    "própria",
    "próprias",
    "próprio",
    "próprios",
    "próxima",
    "próximas",
    "próximo",
    "próximos",
    "pude",
    "puderam",
    "quais",
    "quáis",
    "qual",
    "quando",
    "quanto",
    "quantos",
    "quarta",
    "quarto",
    "quatro",
    "que",
    "quê",
    "quem",
    "quer",
    "quereis",
    "querem",
    "queremas",
    "queres",
    "quero",
    "questão",
    "quinta",
    "quinto",
    "quinze",
    "relação",
    "sabe",
    "sabem",
    "são",
    "se",
    "segunda",
    "segundo",
    "sei",
    "seis",
    "seja",
    "sejam",
    "sejamos",
    "sem",
    "sempre",
    "sendo",
    "ser",
    "será",
    "serão",
    "serei",
    "seremos",
    "seria",
    "seriam",
    "seríamos",
    "sete",
    "sétima",
    "sétimo",
    "seu",
    "seus",
    "sexta",
    "sexto",
    "si",
    "sido",
    "sim",
    "sistema",
    "só",
    "sob",
    "sobre",
    "sois",
    "somos",
    "sou",
    "sua",
    "suas",
    "tal",
    "talvez",
    "também",
    "tampouco",
    "tanta",
    "tantas",
    "tanto",
    "tão",
    "tarde",
    "te",
    "tem",
    "tém",
    "têm",
    "temos",
    "tendes",
    "tendo",
    "tenha",
    "tenham",
    "tenhamos",
    "tenho",
    "tens",
    "ter",
    "terá",
    "terão",
    "terceira",
    "terceiro",
    "terei",
    "teremos",
    "teria",
    "teriam",
    "teríamos",
    "teu",
    "teus",
    "teve",
    "ti",
    "tido",
    "tinha",
    "tinham",
    "tínhamos",
    "tive",
    "tivemos",
    "tiver",
    "tivera",
    "tiveram",
    "tivéramos",
    "tiverem",
    "tivermos",
    "tivesse",
    "tivessem",
    "tivéssemos",
    "tiveste",
    "tivestes",
    "toda",
    "todas",
    "todavia",
    "todo",
    "todos",
    "trabalho",
    "três",
    "treze",
    "tu",
    "tua",
    "tuas",
    "tudo",
    "última",
    "últimas",
    "último",
    "últimos",
    "um",
    "uma",
    "umas",
    "uns",
    "vai",
    "vais",
    "vão",
    "vários",
    "vem",
    "vêm",
    "vendo",
    "vens",
    "ver",
    "vez",
    "vezes",
    "viagem",
    "vindo",
    "vinte",
    "vir",
    "você",
    "vocês",
    "vos",
    "vós",
    "vossa",
    "vossas",
    "vosso",
    "vossos",
    "zero"
  ];
  const ron = [
    "acea",
    "aceasta",
    "această",
    "aceea",
    "acei",
    "aceia",
    "acel",
    "acela",
    "acele",
    "acelea",
    "acest",
    "acesta",
    "aceste",
    "acestea",
    "aceşti",
    "aceştia",
    "acolo",
    "acord",
    "acum",
    "ai",
    "aia",
    "aibă",
    "aici",
    "al",
    "ale",
    "alea",
    "altceva",
    "altcineva",
    "am",
    "ar",
    "are",
    "asemenea",
    "asta",
    "astea",
    "astăzi",
    "asupra",
    "au",
    "avea",
    "avem",
    "aveţi",
    "azi",
    "aş",
    "aşadar",
    "aţi",
    "bine",
    "bucur",
    "bună",
    "ca",
    "care",
    "caut",
    "ce",
    "cel",
    "ceva",
    "chiar",
    "cinci",
    "cine",
    "cineva",
    "contra",
    "cu",
    "cum",
    "cumva",
    "curând",
    "curînd",
    "când",
    "cât",
    "câte",
    "câtva",
    "câţi",
    "cînd",
    "cît",
    "cîte",
    "cîtva",
    "cîţi",
    "că",
    "căci",
    "cărei",
    "căror",
    "cărui",
    "către",
    "da",
    "dacă",
    "dar",
    "datorită",
    "dată",
    "dau",
    "de",
    "deci",
    "deja",
    "deoarece",
    "departe",
    "deşi",
    "din",
    "dinaintea",
    "dintr-",
    "dintre",
    "doi",
    "doilea",
    "două",
    "drept",
    "după",
    "dă",
    "ea",
    "ei",
    "el",
    "ele",
    "eram",
    "este",
    "eu",
    "eşti",
    "face",
    "fata",
    "fi",
    "fie",
    "fiecare",
    "fii",
    "fim",
    "fiu",
    "fiţi",
    "frumos",
    "fără",
    "graţie",
    "halbă",
    "iar",
    "ieri",
    "la",
    "le",
    "li",
    "lor",
    "lui",
    "lângă",
    "lîngă",
    "mai",
    "mea",
    "mei",
    "mele",
    "mereu",
    "meu",
    "mi",
    "mie",
    "mine",
    "mult",
    "multă",
    "mulţi",
    "mulţumesc",
    "mâine",
    "mîine",
    "mă",
    "ne",
    "nevoie",
    "nici",
    "nicăieri",
    "nimeni",
    "nimeri",
    "nimic",
    "nişte",
    "noastre",
    "noastră",
    "noi",
    "noroc",
    "nostru",
    "nouă",
    "noştri",
    "nu",
    "opt",
    "ori",
    "oricare",
    "orice",
    "oricine",
    "oricum",
    "oricând",
    "oricât",
    "oricînd",
    "oricît",
    "oriunde",
    "patra",
    "patru",
    "patrulea",
    "pe",
    "pentru",
    "peste",
    "pic",
    "poate",
    "pot",
    "prea",
    "prima",
    "primul",
    "prin",
    "printr-",
    "puţin",
    "puţina",
    "puţină",
    "până",
    "pînă",
    "rog",
    "sa",
    "sale",
    "sau",
    "se",
    "spate",
    "spre",
    "sub",
    "sunt",
    "suntem",
    "sunteţi",
    "sută",
    "sînt",
    "sîntem",
    "sînteţi",
    "să",
    "săi",
    "său",
    "ta",
    "tale",
    "te",
    "timp",
    "tine",
    "toate",
    "toată",
    "tot",
    "totuşi",
    "toţi",
    "trei",
    "treia",
    "treilea",
    "tu",
    "tăi",
    "tău",
    "un",
    "una",
    "unde",
    "undeva",
    "unei",
    "uneia",
    "unele",
    "uneori",
    "unii",
    "unor",
    "unora",
    "unu",
    "unui",
    "unuia",
    "unul",
    "vi",
    "voastre",
    "voastră",
    "voi",
    "vostru",
    "vouă",
    "voştri",
    "vreme",
    "vreo",
    "vreun",
    "vă",
    "zece",
    "zero",
    "zi",
    "zice",
    "îi",
    "îl",
    "îmi",
    "împotriva",
    "în",
    "înainte",
    "înaintea",
    "încotro",
    "încât",
    "încît",
    "între",
    "întrucât",
    "întrucît",
    "îţi",
    "ăla",
    "ălea",
    "ăsta",
    "ăstea",
    "ăştia",
    "şapte",
    "şase",
    "şi",
    "ştiu",
    "ţi",
    "ţie"
  ];
  const rus = [
    "и",
    "в",
    "во",
    "не",
    "что",
    "он",
    "на",
    "я",
    "с",
    "со",
    "как",
    "а",
    "то",
    "все",
    "она",
    "так",
    "его",
    "но",
    "да",
    "ты",
    "к",
    "у",
    "же",
    "вы",
    "за",
    "бы",
    "по",
    "только",
    "ее",
    "мне",
    "было",
    "вот",
    "от",
    "меня",
    "еще",
    "нет",
    "о",
    "из",
    "ему",
    "теперь",
    "когда",
    "даже",
    "ну",
    "ли",
    "если",
    "уже",
    "или",
    "ни",
    "быть",
    "был",
    "него",
    "до",
    "вас",
    "нибудь",
    "уж",
    "вам",
    "сказал",
    "ведь",
    "там",
    "потом",
    "себя",
    "ничего",
    "ей",
    "может",
    "они",
    "тут",
    "где",
    "есть",
    "надо",
    "ней",
    "для",
    "мы",
    "тебя",
    "их",
    "чем",
    "была",
    "сам",
    "чтоб",
    "без",
    "будто",
    "чего",
    "раз",
    "тоже",
    "себе",
    "под",
    "будет",
    "ж",
    "тогда",
    "кто",
    "этот",
    "того",
    "потому",
    "этого",
    "какой",
    "совсем",
    "ним",
    "этом",
    "почти",
    "мой",
    "тем",
    "чтобы",
    "нее",
    "были",
    "куда",
    "всех",
    "никогда",
    "сегодня",
    "можно",
    "при",
    "об",
    "другой",
    "хоть",
    "после",
    "над",
    "больше",
    "тот",
    "через",
    "эти",
    "нас",
    "про",
    "всего",
    "них",
    "какая",
    "много",
    "разве",
    "эту",
    "моя",
    "свою",
    "этой",
    "перед",
    "иногда",
    "лучше",
    "чуть",
    "том",
    "нельзя",
    "такой",
    "им",
    "более",
    "всегда",
    "конечно",
    "всю",
    "между",
    "это",
    "лишь"
  ];
  const slk = [
    "a",
    "aby",
    "aj",
    "ako",
    "aký",
    "ale",
    "alebo",
    "ani",
    "avšak",
    "ba",
    "bez",
    "buï",
    "cez",
    "do",
    "ho",
    "hoci",
    "i",
    "ich",
    "im",
    "ja",
    "jeho",
    "jej",
    "jemu",
    "ju",
    "k",
    "kam",
    "kde",
    "kedže",
    "keï",
    "kto",
    "ktorý",
    "ku",
    "lebo",
    "ma",
    "mi",
    "mne",
    "mnou",
    "mu",
    "my",
    "mòa",
    "môj",
    "na",
    "nad",
    "nami",
    "neho",
    "nej",
    "nemu",
    "nich",
    "nielen",
    "nim",
    "no",
    "nám",
    "nás",
    "náš",
    "ním",
    "o",
    "od",
    "on",
    "ona",
    "oni",
    "ono",
    "ony",
    "po",
    "pod",
    "pre",
    "pred",
    "pri",
    "s",
    "sa",
    "seba",
    "sem",
    "so",
    "svoj",
    "taký",
    "tam",
    "teba",
    "tebe",
    "tebou",
    "tej",
    "ten",
    "ti",
    "tie",
    "to",
    "toho",
    "tomu",
    "tou",
    "tvoj",
    "ty",
    "tá",
    "tým",
    "v",
    "vami",
    "veï",
    "vo",
    "vy",
    "vám",
    "vás",
    "váš",
    "však",
    "z",
    "za",
    "zo",
    "a",
    "èi",
    "èo",
    "èí",
    "òom",
    "òou",
    "òu",
    "že"
  ];
  const slv = [
    "a",
    "ali",
    "april",
    "avgust",
    "b",
    "bi",
    "bil",
    "bila",
    "bile",
    "bili",
    "bilo",
    "biti",
    "blizu",
    "bo",
    "bodo",
    "bojo",
    "bolj",
    "bom",
    "bomo",
    "boste",
    "bova",
    "boš",
    "brez",
    "c",
    "cel",
    "cela",
    "celi",
    "celo",
    "d",
    "da",
    "daleč",
    "dan",
    "danes",
    "datum",
    "december",
    "deset",
    "deseta",
    "deseti",
    "deseto",
    "devet",
    "deveta",
    "deveti",
    "deveto",
    "do",
    "dober",
    "dobra",
    "dobri",
    "dobro",
    "dokler",
    "dol",
    "dolg",
    "dolga",
    "dolgi",
    "dovolj",
    "drug",
    "druga",
    "drugi",
    "drugo",
    "dva",
    "dve",
    "e",
    "eden",
    "en",
    "ena",
    "ene",
    "eni",
    "enkrat",
    "eno",
    "etc.",
    "f",
    "februar",
    "g",
    "g.",
    "ga",
    "ga.",
    "gor",
    "gospa",
    "gospod",
    "h",
    "halo",
    "i",
    "idr.",
    "ii",
    "iii",
    "in",
    "iv",
    "ix",
    "iz",
    "j",
    "januar",
    "jaz",
    "je",
    "ji",
    "jih",
    "jim",
    "jo",
    "julij",
    "junij",
    "jutri",
    "k",
    "kadarkoli",
    "kaj",
    "kajti",
    "kako",
    "kakor",
    "kamor",
    "kamorkoli",
    "kar",
    "karkoli",
    "katerikoli",
    "kdaj",
    "kdo",
    "kdorkoli",
    "ker",
    "ki",
    "kje",
    "kjer",
    "kjerkoli",
    "ko",
    "koder",
    "koderkoli",
    "koga",
    "komu",
    "kot",
    "kratek",
    "kratka",
    "kratke",
    "kratki",
    "l",
    "lahka",
    "lahke",
    "lahki",
    "lahko",
    "le",
    "lep",
    "lepa",
    "lepe",
    "lepi",
    "lepo",
    "leto",
    "m",
    "maj",
    "majhen",
    "majhna",
    "majhni",
    "malce",
    "malo",
    "manj",
    "marec",
    "me",
    "med",
    "medtem",
    "mene",
    "mesec",
    "mi",
    "midva",
    "midve",
    "mnogo",
    "moj",
    "moja",
    "moje",
    "mora",
    "morajo",
    "moram",
    "moramo",
    "morate",
    "moraš",
    "morem",
    "mu",
    "n",
    "na",
    "nad",
    "naj",
    "najina",
    "najino",
    "najmanj",
    "naju",
    "največ",
    "nam",
    "narobe",
    "nas",
    "nato",
    "nazaj",
    "naš",
    "naša",
    "naše",
    "ne",
    "nedavno",
    "nedelja",
    "nek",
    "neka",
    "nekaj",
    "nekatere",
    "nekateri",
    "nekatero",
    "nekdo",
    "neke",
    "nekega",
    "neki",
    "nekje",
    "neko",
    "nekoga",
    "nekoč",
    "ni",
    "nikamor",
    "nikdar",
    "nikjer",
    "nikoli",
    "nič",
    "nje",
    "njega",
    "njegov",
    "njegova",
    "njegovo",
    "njej",
    "njemu",
    "njen",
    "njena",
    "njeno",
    "nji",
    "njih",
    "njihov",
    "njihova",
    "njihovo",
    "njiju",
    "njim",
    "njo",
    "njun",
    "njuna",
    "njuno",
    "no",
    "nocoj",
    "november",
    "npr.",
    "o",
    "ob",
    "oba",
    "obe",
    "oboje",
    "od",
    "odprt",
    "odprta",
    "odprti",
    "okoli",
    "oktober",
    "on",
    "onadva",
    "one",
    "oni",
    "onidve",
    "osem",
    "osma",
    "osmi",
    "osmo",
    "oz.",
    "p",
    "pa",
    "pet",
    "peta",
    "petek",
    "peti",
    "peto",
    "po",
    "pod",
    "pogosto",
    "poleg",
    "poln",
    "polna",
    "polni",
    "polno",
    "ponavadi",
    "ponedeljek",
    "ponovno",
    "potem",
    "povsod",
    "pozdravljen",
    "pozdravljeni",
    "prav",
    "prava",
    "prave",
    "pravi",
    "pravo",
    "prazen",
    "prazna",
    "prazno",
    "prbl.",
    "precej",
    "pred",
    "prej",
    "preko",
    "pri",
    "pribl.",
    "približno",
    "primer",
    "pripravljen",
    "pripravljena",
    "pripravljeni",
    "proti",
    "prva",
    "prvi",
    "prvo",
    "r",
    "ravno",
    "redko",
    "res",
    "reč",
    "s",
    "saj",
    "sam",
    "sama",
    "same",
    "sami",
    "samo",
    "se",
    "sebe",
    "sebi",
    "sedaj",
    "sedem",
    "sedma",
    "sedmi",
    "sedmo",
    "sem",
    "september",
    "seveda",
    "si",
    "sicer",
    "skoraj",
    "skozi",
    "slab",
    "smo",
    "so",
    "sobota",
    "spet",
    "sreda",
    "srednja",
    "srednji",
    "sta",
    "ste",
    "stran",
    "stvar",
    "sva",
    "t",
    "ta",
    "tak",
    "taka",
    "take",
    "taki",
    "tako",
    "takoj",
    "tam",
    "te",
    "tebe",
    "tebi",
    "tega",
    "težak",
    "težka",
    "težki",
    "težko",
    "ti",
    "tista",
    "tiste",
    "tisti",
    "tisto",
    "tj.",
    "tja",
    "to",
    "toda",
    "torek",
    "tretja",
    "tretje",
    "tretji",
    "tri",
    "tu",
    "tudi",
    "tukaj",
    "tvoj",
    "tvoja",
    "tvoje",
    "u",
    "v",
    "vaju",
    "vam",
    "vas",
    "vaš",
    "vaša",
    "vaše",
    "ve",
    "vedno",
    "velik",
    "velika",
    "veliki",
    "veliko",
    "vendar",
    "ves",
    "več",
    "vi",
    "vidva",
    "vii",
    "viii",
    "visok",
    "visoka",
    "visoke",
    "visoki",
    "vsa",
    "vsaj",
    "vsak",
    "vsaka",
    "vsakdo",
    "vsake",
    "vsaki",
    "vsakomur",
    "vse",
    "vsega",
    "vsi",
    "vso",
    "včasih",
    "včeraj",
    "x",
    "z",
    "za",
    "zadaj",
    "zadnji",
    "zakaj",
    "zaprta",
    "zaprti",
    "zaprto",
    "zdaj",
    "zelo",
    "zunaj",
    "č",
    "če",
    "često",
    "četrta",
    "četrtek",
    "četrti",
    "četrto",
    "čez",
    "čigav",
    "š",
    "šest",
    "šesta",
    "šesti",
    "šesto",
    "štiri",
    "ž",
    "že"
  ];
  const som = [
    "oo",
    "atabo",
    "ay",
    "ku",
    "waxeey",
    "uu",
    "lakin",
    "si",
    "ayuu",
    "soo",
    "waa",
    "ka",
    "kasoo",
    "kale",
    "waxuu",
    "ayee",
    "ayaa",
    "kuu",
    "isku",
    "ugu",
    "jiray",
    "dhan",
    "dambeestii",
    "inuu",
    "in",
    "jirtay",
    "uheestay",
    "aad",
    "uga",
    "hadana",
    "timaado",
    "timaaday"
  ];
  const sot = [
    "a",
    "le",
    "o",
    "ba",
    "ho",
    "oa",
    "ea",
    "ka",
    "hae",
    "tselane",
    "eaba",
    "ke",
    "hore",
    "ha",
    "e",
    "ne",
    "re",
    "bona",
    "me",
    "limo",
    "tsa",
    "haholo",
    "la",
    "empa",
    "ngoanake",
    "se",
    "moo",
    "m'e",
    "bane",
    "mo",
    "tse",
    "sa",
    "li",
    "ena",
    "bina",
    "pina",
    "hape"
  ];
  const spa = [
    "a",
    "un",
    "el",
    "ella",
    "y",
    "sobre",
    "de",
    "la",
    "que",
    "en",
    "los",
    "del",
    "se",
    "las",
    "por",
    "un",
    "para",
    "con",
    "no",
    "una",
    "su",
    "al",
    "lo",
    "como",
    "más",
    "pero",
    "sus",
    "le",
    "ya",
    "o",
    "porque",
    "cuando",
    "muy",
    "sin",
    "sobre",
    "también",
    "me",
    "hasta",
    "donde",
    "quien",
    "desde",
    "nos",
    "durante",
    "uno",
    "ni",
    "contra",
    "ese",
    "eso",
    "mí",
    "qué",
    "otro",
    "él",
    "cual",
    "poco",
    "mi",
    "tú",
    "te",
    "ti",
    "sí"
  ];
  const swa = [
    "na",
    "ya",
    "wa",
    "kwa",
    "ni",
    "za",
    "katika",
    "la",
    "kuwa",
    "kama",
    "kwamba",
    "cha",
    "hiyo",
    "lakini",
    "yake",
    "hata",
    "wakati",
    "hivyo",
    "sasa",
    "wake",
    "au",
    "watu",
    "hii",
    "zaidi",
    "vya",
    "huo",
    "tu",
    "kwenye",
    "si",
    "pia",
    "ili",
    "moja",
    "kila",
    "baada",
    "ambao",
    "ambayo",
    "yao",
    "wao",
    "kuna",
    "hilo",
    "kutoka",
    "kubwa",
    "pamoja",
    "bila",
    "huu",
    "hayo",
    "sana",
    "ndani",
    "mkuu",
    "hizo",
    "kufanya",
    "wengi",
    "hadi",
    "mmoja",
    "hili",
    "juu",
    "kwanza",
    "wetu",
    "kuhusu",
    "baadhi",
    "wote",
    "yetu",
    "hivi",
    "kweli",
    "mara",
    "wengine",
    "nini",
    "ndiyo",
    "zao",
    "kati",
    "hao",
    "hapa",
    "kutokana",
    "muda",
    "habari",
    "ambaye",
    "wenye",
    "nyingine",
    "hakuna",
    "tena",
    "hatua",
    "bado",
    "nafasi",
    "basi",
    "kabisa",
    "hicho",
    "nje",
    "huyo",
    "vile",
    "yote",
    "mkubwa",
    "alikuwa",
    "zote",
    "leo",
    "haya",
    "huko",
    "kutoa",
    "mwa",
    "kiasi",
    "hasa",
    "nyingi",
    "kabla",
    "wale",
    "chini",
    "gani",
    "hapo",
    "lazima",
    "mwingine",
    "bali",
    "huku",
    "zake",
    "ilikuwa",
    "tofauti",
    "kupata",
    "mbalimbali",
    "pale",
    "kusema",
    "badala",
    "wazi",
    "yeye",
    "alisema",
    "hawa",
    "ndio",
    "hizi",
    "tayari",
    "wala",
    "muhimu",
    "ile",
    "mpya",
    "ambazo",
    "dhidi",
    "kwenda",
    "sisi",
    "kwani",
    "jinsi",
    "binafsi",
    "kutumia",
    "mbili",
    "mbali",
    "kuu",
    "mengine",
    "mbele",
    "namna",
    "mengi",
    "upande"
  ];
  const swe = [
    "aderton",
    "adertonde",
    "adjö",
    "aldrig",
    "alla",
    "allas",
    "allt",
    "alltid",
    "alltså",
    "andra",
    "andras",
    "annan",
    "annat",
    "artonde",
    "artonn",
    "att",
    "av",
    "bakom",
    "bara",
    "behöva",
    "behövas",
    "behövde",
    "behövt",
    "beslut",
    "beslutat",
    "beslutit",
    "bland",
    "blev",
    "bli",
    "blir",
    "blivit",
    "bort",
    "borta",
    "bra",
    "bäst",
    "bättre",
    "båda",
    "bådas",
    "dag",
    "dagar",
    "dagarna",
    "dagen",
    "de",
    "del",
    "delen",
    "dem",
    "den",
    "denna",
    "deras",
    "dess",
    "dessa",
    "det",
    "detta",
    "dig",
    "din",
    "dina",
    "dit",
    "ditt",
    "dock",
    "dom",
    "du",
    "där",
    "därför",
    "då",
    "e",
    "efter",
    "eftersom",
    "ej",
    "elfte",
    "eller",
    "elva",
    "emot",
    "en",
    "enkel",
    "enkelt",
    "enkla",
    "enligt",
    "ens",
    "er",
    "era",
    "ers",
    "ert",
    "ett",
    "ettusen",
    "fanns",
    "fem",
    "femte",
    "femtio",
    "femtionde",
    "femton",
    "femtonde",
    "fick",
    "fin",
    "finnas",
    "finns",
    "fjorton",
    "fjortonde",
    "fjärde",
    "fler",
    "flera",
    "flesta",
    "fram",
    "framför",
    "från",
    "fyra",
    "fyrtio",
    "fyrtionde",
    "få",
    "får",
    "fått",
    "följande",
    "för",
    "före",
    "förlåt",
    "förra",
    "första",
    "genast",
    "genom",
    "gick",
    "gjorde",
    "gjort",
    "god",
    "goda",
    "godare",
    "godast",
    "gott",
    "gälla",
    "gäller",
    "gällt",
    "gärna",
    "gå",
    "går",
    "gått",
    "gör",
    "göra",
    "ha",
    "hade",
    "haft",
    "han",
    "hans",
    "har",
    "heller",
    "hellre",
    "helst",
    "helt",
    "henne",
    "hennes",
    "hit",
    "hon",
    "honom",
    "hundra",
    "hundraen",
    "hundraett",
    "hur",
    "här",
    "hög",
    "höger",
    "högre",
    "högst",
    "i",
    "ibland",
    "icke",
    "idag",
    "igen",
    "igår",
    "imorgon",
    "in",
    "inför",
    "inga",
    "ingen",
    "ingenting",
    "inget",
    "innan",
    "inne",
    "inom",
    "inte",
    "inuti",
    "ja",
    "jag",
    "jo",
    "ju",
    "just",
    "jämfört",
    "kan",
    "kanske",
    "knappast",
    "kom",
    "komma",
    "kommer",
    "kommit",
    "kr",
    "kunde",
    "kunna",
    "kunnat",
    "kvar",
    "legat",
    "ligga",
    "ligger",
    "lika",
    "likställd",
    "likställda",
    "lilla",
    "lite",
    "liten",
    "litet",
    "länge",
    "längre",
    "längst",
    "lätt",
    "lättare",
    "lättast",
    "långsam",
    "långsammare",
    "långsammast",
    "långsamt",
    "långt",
    "låt",
    "man",
    "med",
    "mej",
    "mellan",
    "men",
    "mer",
    "mera",
    "mest",
    "mig",
    "min",
    "mina",
    "mindre",
    "minst",
    "mitt",
    "mittemot",
    "mot",
    "mycket",
    "många",
    "måste",
    "möjlig",
    "möjligen",
    "möjligt",
    "möjligtvis",
    "ned",
    "nederst",
    "nedersta",
    "nedre",
    "nej",
    "ner",
    "ni",
    "nio",
    "nionde",
    "nittio",
    "nittionde",
    "nitton",
    "nittonde",
    "nog",
    "noll",
    "nr",
    "nu",
    "nummer",
    "när",
    "nästa",
    "någon",
    "någonting",
    "något",
    "några",
    "nån",
    "nånting",
    "nåt",
    "nödvändig",
    "nödvändiga",
    "nödvändigt",
    "nödvändigtvis",
    "och",
    "också",
    "ofta",
    "oftast",
    "olika",
    "olikt",
    "om",
    "oss",
    "på",
    "rakt",
    "redan",
    "rätt",
    "sa",
    "sade",
    "sagt",
    "samma",
    "sedan",
    "senare",
    "senast",
    "sent",
    "sex",
    "sextio",
    "sextionde",
    "sexton",
    "sextonde",
    "sig",
    "sin",
    "sina",
    "sist",
    "sista",
    "siste",
    "sitt",
    "sitta",
    "sju",
    "sjunde",
    "sjuttio",
    "sjuttionde",
    "sjutton",
    "sjuttonde",
    "själv",
    "sjätte",
    "ska",
    "skall",
    "skulle",
    "slutligen",
    "små",
    "smått",
    "snart",
    "som",
    "stor",
    "stora",
    "stort",
    "större",
    "störst",
    "säga",
    "säger",
    "sämre",
    "sämst",
    "så",
    "sådan",
    "sådana",
    "sådant",
    "ta",
    "tack",
    "tar",
    "tidig",
    "tidigare",
    "tidigast",
    "tidigt",
    "till",
    "tills",
    "tillsammans",
    "tio",
    "tionde",
    "tjugo",
    "tjugoen",
    "tjugoett",
    "tjugonde",
    "tjugotre",
    "tjugotvå",
    "tjungo",
    "tolfte",
    "tolv",
    "tre",
    "tredje",
    "trettio",
    "trettionde",
    "tretton",
    "trettonde",
    "två",
    "tvåhundra",
    "under",
    "upp",
    "ur",
    "ursäkt",
    "ut",
    "utan",
    "utanför",
    "ute",
    "va",
    "vad",
    "var",
    "vara",
    "varför",
    "varifrån",
    "varit",
    "varje",
    "varken",
    "vars",
    "varsågod",
    "vart",
    "vem",
    "vems",
    "verkligen",
    "vi",
    "vid",
    "vidare",
    "viktig",
    "viktigare",
    "viktigast",
    "viktigt",
    "vilka",
    "vilkas",
    "vilken",
    "vilket",
    "vill",
    "väl",
    "vänster",
    "vänstra",
    "värre",
    "vår",
    "våra",
    "vårt",
    "än",
    "ännu",
    "är",
    "även",
    "åt",
    "åtminstone",
    "åtta",
    "åttio",
    "åttionde",
    "åttonde",
    "över",
    "övermorgon",
    "överst",
    "övre"
  ];
  const tha = [
    "กล่าว",
    "กว่า",
    "กัน",
    "กับ",
    "การ",
    "ก็",
    "ก่อน",
    "ขณะ",
    "ขอ",
    "ของ",
    "ขึ้น",
    "คง",
    "ครั้ง",
    "ความ",
    "คือ",
    "จะ",
    "จัด",
    "จาก",
    "จึง",
    "ช่วง",
    "ซึ่ง",
    "ดัง",
    "ด้วย",
    "ด้าน",
    "ตั้ง",
    "ตั้งแต่",
    "ตาม",
    "ต่อ",
    "ต่าง",
    "ต่างๆ",
    "ต้อง",
    "ถึง",
    "ถูก",
    "ถ้า",
    "ทั้ง",
    "ทั้งนี้",
    "ทาง",
    "ที่",
    "ที่สุด",
    "ทุก",
    "ทํา",
    "ทําให้",
    "นอกจาก",
    "นัก",
    "นั้น",
    "นี้",
    "น่า",
    "นํา",
    "บาง",
    "ผล",
    "ผ่าน",
    "พบ",
    "พร้อม",
    "มา",
    "มาก",
    "มี",
    "ยัง",
    "รวม",
    "ระหว่าง",
    "รับ",
    "ราย",
    "ร่วม",
    "ลง",
    "วัน",
    "ว่า",
    "สุด",
    "ส่ง",
    "ส่วน",
    "สําหรับ",
    "หนึ่ง",
    "หรือ",
    "หลัง",
    "หลังจาก",
    "หลาย",
    "หาก",
    "อยาก",
    "อยู่",
    "อย่าง",
    "ออก",
    "อะไร",
    "อาจ",
    "อีก",
    "เขา",
    "เข้า",
    "เคย",
    "เฉพาะ",
    "เช่น",
    "เดียว",
    "เดียวกัน",
    "เนื่องจาก",
    "เปิด",
    "เปิดเผย",
    "เป็น",
    "เป็นการ",
    "เพราะ",
    "เพื่อ",
    "เมื่อ",
    "เรา",
    "เริ่ม",
    "เลย",
    "เห็น",
    "เอง",
    "แต่",
    "แบบ",
    "แรก",
    "และ",
    "แล้ว",
    "แห่ง",
    "โดย",
    "ใน",
    "ให้",
    "ได้",
    "ไป",
    "ไม่",
    "ไว้"
  ];
  const tgl = [
    "akin",
    "aking",
    "ako",
    "alin",
    "am",
    "amin",
    "aming",
    "ang",
    "ano",
    "anumang",
    "apat",
    "at",
    "atin",
    "ating",
    "ay",
    "bababa",
    "bago",
    "bakit",
    "bawat",
    "bilang",
    "dahil",
    "dalawa",
    "dapat",
    "din",
    "dito",
    "doon",
    "gagawin",
    "gayunman",
    "ginagawa",
    "ginawa",
    "ginawang",
    "gumawa",
    "gusto",
    "habang",
    "hanggang",
    "hindi",
    "huwag",
    "iba",
    "ibaba",
    "ibabaw",
    "ibig",
    "ikaw",
    "ilagay",
    "ilalim",
    "ilan",
    "inyong",
    "isa",
    "isang",
    "itaas",
    "ito",
    "iyo",
    "iyon",
    "iyong",
    "ka",
    "kahit",
    "kailangan",
    "kailanman",
    "kami",
    "kanila",
    "kanilang",
    "kanino",
    "kanya",
    "kanyang",
    "kapag",
    "kapwa",
    "karamihan",
    "katiyakan",
    "katulad",
    "kaya",
    "kaysa",
    "ko",
    "kong",
    "kulang",
    "kumuha",
    "kung",
    "laban",
    "lahat",
    "lamang",
    "likod",
    "lima",
    "maaari",
    "maaaring",
    "maging",
    "mahusay",
    "makita",
    "marami",
    "marapat",
    "masyado",
    "may",
    "mayroon",
    "mga",
    "minsan",
    "mismo",
    "mula",
    "muli",
    "na",
    "nabanggit",
    "naging",
    "nagkaroon",
    "nais",
    "nakita",
    "namin",
    "napaka",
    "narito",
    "nasaan",
    "ng",
    "ngayon",
    "ni",
    "nila",
    "nilang",
    "nito",
    "niya",
    "niyang",
    "noon",
    "o",
    "pa",
    "paano",
    "pababa",
    "paggawa",
    "pagitan",
    "pagkakaroon",
    "pagkatapos",
    "palabas",
    "pamamagitan",
    "panahon",
    "pangalawa",
    "para",
    "paraan",
    "pareho",
    "pataas",
    "pero",
    "pumunta",
    "pumupunta",
    "sa",
    "saan",
    "sabi",
    "sabihin",
    "sarili",
    "sila",
    "sino",
    "siya",
    "tatlo",
    "tayo",
    "tulad",
    "tungkol",
    "una",
    "walang"
  ];
  const tur = [
    "acaba",
    "acep",
    "adeta",
    "altmış",
    "altmış",
    "altı",
    "altı",
    "ama",
    "ancak",
    "arada",
    "artık",
    "aslında",
    "aynen",
    "ayrıca",
    "az",
    "bana",
    "bari",
    "bazen",
    "bazı",
    "bazı",
    "başka",
    "belki",
    "ben",
    "benden",
    "beni",
    "benim",
    "beri",
    "beş",
    "beş",
    "beş",
    "bile",
    "bin",
    "bir",
    "biraz",
    "biri",
    "birkaç",
    "birkez",
    "birçok",
    "birşey",
    "birşeyi",
    "birşey",
    "birşeyi",
    "birşey",
    "biz",
    "bizden",
    "bize",
    "bizi",
    "bizim",
    "bu",
    "buna",
    "bunda",
    "bundan",
    "bunlar",
    "bunları",
    "bunların",
    "bunu",
    "bunun",
    "burada",
    "böyle",
    "böylece",
    "bütün",
    "da",
    "daha",
    "dahi",
    "dahil",
    "daima",
    "dair",
    "dayanarak",
    "de",
    "defa",
    "deđil",
    "değil",
    "diye",
    "diđer",
    "diğer",
    "doksan",
    "dokuz",
    "dolayı",
    "dolayısıyla",
    "dört",
    "edecek",
    "eden",
    "ederek",
    "edilecek",
    "ediliyor",
    "edilmesi",
    "ediyor",
    "elli",
    "en",
    "etmesi",
    "etti",
    "ettiği",
    "ettiğini",
    "eđer",
    "eğer",
    "fakat",
    "gibi",
    "göre",
    "halbuki",
    "halen",
    "hangi",
    "hani",
    "hariç",
    "hatta",
    "hele",
    "hem",
    "henüz",
    "hep",
    "hepsi",
    "her",
    "herhangi",
    "herkes",
    "herkesin",
    "hiç",
    "hiçbir",
    "iken",
    "iki",
    "ila",
    "ile",
    "ilgili",
    "ilk",
    "illa",
    "ise",
    "itibaren",
    "itibariyle",
    "iyi",
    "iyice",
    "için",
    "işte",
    "işte",
    "kadar",
    "kanımca",
    "karşın",
    "katrilyon",
    "kendi",
    "kendilerine",
    "kendini",
    "kendisi",
    "kendisine",
    "kendisini",
    "kere",
    "kez",
    "keşke",
    "ki",
    "kim",
    "kimden",
    "kime",
    "kimi",
    "kimse",
    "kırk",
    "kısaca",
    "kırk",
    "lakin",
    "madem",
    "međer",
    "milyar",
    "milyon",
    "mu",
    "mü",
    "mı",
    "mı",
    "nasıl",
    "nasıl",
    "ne",
    "neden",
    "nedenle",
    "nerde",
    "nere",
    "nerede",
    "nereye",
    "nitekim",
    "niye",
    "niçin",
    "o",
    "olan",
    "olarak",
    "oldu",
    "olduklarını",
    "olduğu",
    "olduğunu",
    "olmadı",
    "olmadığı",
    "olmak",
    "olması",
    "olmayan",
    "olmaz",
    "olsa",
    "olsun",
    "olup",
    "olur",
    "olursa",
    "oluyor",
    "on",
    "ona",
    "ondan",
    "onlar",
    "onlardan",
    "onlari",
    "onların",
    "onları",
    "onların",
    "onu",
    "onun",
    "otuz",
    "oysa",
    "pek",
    "rağmen",
    "sadece",
    "sanki",
    "sekiz",
    "seksen",
    "sen",
    "senden",
    "seni",
    "senin",
    "siz",
    "sizden",
    "sizi",
    "sizin",
    "sonra",
    "tarafından",
    "trilyon",
    "tüm",
    "var",
    "vardı",
    "ve",
    "veya",
    "veyahut",
    "ya",
    "yahut",
    "yani",
    "yapacak",
    "yapmak",
    "yaptı",
    "yaptıkları",
    "yaptığı",
    "yaptığını",
    "yapılan",
    "yapılması",
    "yapıyor",
    "yedi",
    "yerine",
    "yetmiş",
    "yetmiş",
    "yetmiş",
    "yine",
    "yirmi",
    "yoksa",
    "yüz",
    "zaten",
    "çok",
    "çünkü",
    "öyle",
    "üzere",
    "üç",
    "şey",
    "şeyden",
    "şeyi",
    "şeyler",
    "şu",
    "şuna",
    "şunda",
    "şundan",
    "şunu",
    "şey",
    "şeyden",
    "şeyi",
    "şeyler",
    "şu",
    "şuna",
    "şunda",
    "şundan",
    "şunları",
    "şunu",
    "şöyle",
    "şayet",
    "şimdi",
    "şu",
    "şöyle"
  ];
  const ukr = [
    "а",
    "або",
    "авжеж",
    "адже",
    "аж",
    "але",
    "ані",
    "б",
    "без",
    "би",
    "бо",
    "був",
    "була",
    "були",
    "було",
    "бути",
    "більш",
    "в",
    "вам",
    "вами",
    "вас",
    "весь",
    "вже",
    "вздовж",
    "ви",
    "від",
    "вниз",
    "внизу",
    "вона",
    "вони",
    "воно",
    "все",
    "всередині",
    "всіх",
    "вся",
    "від",
    "він",
    "да",
    "давай",
    "давати",
    "де",
    "десь",
    "дещо",
    "для",
    "до",
    "є",
    "ж",
    "же",
    "з",
    "за",
    "завжди",
    "замість",
    "зі",
    "і",
    "із",
    "інших",
    "її",
    "їй",
    "їм",
    "їх",
    "й",
    "його",
    "йому",
    "коли",
    "ледве",
    "лиш",
    "майже",
    "мене",
    "мені",
    "ми",
    "між",
    "мій",
    "мною",
    "мов",
    "мого",
    "моєї",
    "моє",
    "може",
    "мої",
    "моїх",
    "моя",
    "на",
    "над",
    "навколо",
    "навіть",
    "нам",
    "нами",
    "нас",
    "наче",
    "наш",
    "не",
    "нє",
    "неї",
    "нема",
    "немов",
    "неначе",
    "нею",
    "ним",
    "ними",
    "них",
    "ні",
    "ніби",
    "ніщо",
    "нього",
    "о",
    "ось",
    "от",
    "отже",
    "отож",
    "під",
    "по",
    "поза",
    "про",
    "під",
    "сам",
    "сама",
    "свій",
    "свої",
    "своя",
    "свою",
    "себе",
    "собі",
    "та",
    "там",
    "так",
    "така",
    "такий",
    "також",
    "твій",
    "твого",
    "твоєї",
    "твої",
    "твоя",
    "те",
    "тебе",
    "ти",
    "ті",
    "тільки",
    "то",
    "тобі",
    "тобою",
    "тобто",
    "тоді",
    "тож",
    "той",
    "тощо",
    "тут",
    "у",
    "хіба",
    "хоч",
    "хоча",
    "це",
    "цей",
    "ці",
    "ця",
    "чи",
    "чого",
    "ще",
    "що",
    "щоб",
    "щось",
    "я",
    "як",
    "яка",
    "який",
    "якої"
  ];
  const urd = [
    "آئی",
    "آئے",
    "آج",
    "آخر",
    "آخرکبر",
    "آدهی",
    "آًب",
    "آٹھ",
    "آیب",
    "اة",
    "اخبزت",
    "اختتبم",
    "ادھر",
    "ارد",
    "اردگرد",
    "ارکبى",
    "اش",
    "اضتعوبل",
    "اضتعوبلات",
    "اضطرذ",
    "اضکب",
    "اضکی",
    "اضکے",
    "اطراف",
    "اغیب",
    "افراد",
    "الگ",
    "اور",
    "اوًچب",
    "اوًچبئی",
    "اوًچی",
    "اوًچے",
    "اى",
    "اً",
    "اًذر",
    "اًہیں",
    "اٹھبًب",
    "اپٌب",
    "اپٌے",
    "اچھب",
    "اچھی",
    "اچھے",
    "اکثر",
    "اکٹھب",
    "اکٹھی",
    "اکٹھے",
    "اکیلا",
    "اکیلی",
    "اکیلے",
    "اگرچہ",
    "اہن",
    "ایطے",
    "ایک",
    "ب",
    "ت",
    "تبزٍ",
    "تت",
    "تر",
    "ترتیت",
    "تریي",
    "تعذاد",
    "تن",
    "تو",
    "توبم",
    "توہی",
    "توہیں",
    "تٌہب",
    "تک",
    "تھب",
    "تھوڑا",
    "تھوڑی",
    "تھوڑے",
    "تھی",
    "تھے",
    "تیي",
    "ثب",
    "ثبئیں",
    "ثبترتیت",
    "ثبری",
    "ثبرے",
    "ثبعث",
    "ثبلا",
    "ثبلترتیت",
    "ثبہر",
    "ثدبئے",
    "ثرآں",
    "ثراں",
    "ثرش",
    "ثعذ",
    "ثغیر",
    "ثلٌذ",
    "ثلٌذوثبلا",
    "ثلکہ",
    "ثي",
    "ثٌب",
    "ثٌبرہب",
    "ثٌبرہی",
    "ثٌبرہے",
    "ثٌبًب",
    "ثٌذ",
    "ثٌذکرو",
    "ثٌذکرًب",
    "ثٌذی",
    "ثڑا",
    "ثڑوں",
    "ثڑی",
    "ثڑے",
    "ثھر",
    "ثھرا",
    "ثھراہوا",
    "ثھرپور",
    "ثھی",
    "ثہت",
    "ثہتر",
    "ثہتری",
    "ثہتریي",
    "ثیچ",
    "ج",
    "خب",
    "خبرہب",
    "خبرہی",
    "خبرہے",
    "خبهوظ",
    "خبًب",
    "خبًتب",
    "خبًتی",
    "خبًتے",
    "خبًٌب",
    "خت",
    "ختن",
    "خجکہ",
    "خص",
    "خططرذ",
    "خلذی",
    "خو",
    "خواى",
    "خوًہی",
    "خوکہ",
    "خٌبة",
    "خگہ",
    "خگہوں",
    "خگہیں",
    "خیطب",
    "خیطبکہ",
    "در",
    "درخبت",
    "درخہ",
    "درخے",
    "درزقیقت",
    "درضت",
    "دش",
    "دفعہ",
    "دلچطپ",
    "دلچطپی",
    "دلچطپیبں",
    "دو",
    "دور",
    "دوراى",
    "دوضرا",
    "دوضروں",
    "دوضری",
    "دوضرے",
    "دوًوں",
    "دکھبئیں",
    "دکھبتب",
    "دکھبتی",
    "دکھبتے",
    "دکھبو",
    "دکھبًب",
    "دکھبیب",
    "دی",
    "دیب",
    "دیتب",
    "دیتی",
    "دیتے",
    "دیر",
    "دیٌب",
    "دیکھو",
    "دیکھٌب",
    "دیکھی",
    "دیکھیں",
    "دے",
    "ر",
    "راضتوں",
    "راضتہ",
    "راضتے",
    "رریعہ",
    "رریعے",
    "رکي",
    "رکھ",
    "رکھب",
    "رکھتب",
    "رکھتبہوں",
    "رکھتی",
    "رکھتے",
    "رکھی",
    "رکھے",
    "رہب",
    "رہی",
    "رہے",
    "ز",
    "زبصل",
    "زبضر",
    "زبل",
    "زبلات",
    "زبلیہ",
    "زصوں",
    "زصہ",
    "زصے",
    "زقبئق",
    "زقیتیں",
    "زقیقت",
    "زکن",
    "زکویہ",
    "زیبدٍ",
    "صبف",
    "صسیر",
    "صفر",
    "صورت",
    "صورتسبل",
    "صورتوں",
    "صورتیں",
    "ض",
    "ضبت",
    "ضبتھ",
    "ضبدٍ",
    "ضبرا",
    "ضبرے",
    "ضبل",
    "ضبلوں",
    "ضت",
    "ضرور",
    "ضرورت",
    "ضروری",
    "ضلطلہ",
    "ضوچ",
    "ضوچب",
    "ضوچتب",
    "ضوچتی",
    "ضوچتے",
    "ضوچو",
    "ضوچٌب",
    "ضوچی",
    "ضوچیں",
    "ضکب",
    "ضکتب",
    "ضکتی",
    "ضکتے",
    "ضکٌب",
    "ضکی",
    "ضکے",
    "ضیذھب",
    "ضیذھی",
    "ضیذھے",
    "ضیکٌڈ",
    "ضے",
    "طرف",
    "طریق",
    "طریقوں",
    "طریقہ",
    "طریقے",
    "طور",
    "طورپر",
    "ظبہر",
    "ع",
    "عذد",
    "عظین",
    "علاقوں",
    "علاقہ",
    "علاقے",
    "علاوٍ",
    "عووهی",
    "غبیذ",
    "غخص",
    "غذ",
    "غروع",
    "غروعبت",
    "غے",
    "فرد",
    "فی",
    "ق",
    "قجل",
    "قجیلہ",
    "قطن",
    "لئے",
    "لا",
    "لازهی",
    "لو",
    "لوجب",
    "لوجی",
    "لوجے",
    "لوسبت",
    "لوسہ",
    "لوگ",
    "لوگوں",
    "لڑکپي",
    "لگتب",
    "لگتی",
    "لگتے",
    "لگٌب",
    "لگی",
    "لگیں",
    "لگے",
    "لی",
    "لیب",
    "لیٌب",
    "لیں",
    "لے",
    "ه",
    "هتعلق",
    "هختلف",
    "هسترم",
    "هسترهہ",
    "هسطوش",
    "هسیذ",
    "هطئلہ",
    "هطئلے",
    "هطبئل",
    "هطتعول",
    "هطلق",
    "هعلوم",
    "هػتول",
    "هلا",
    "هوکي",
    "هوکٌبت",
    "هوکٌہ",
    "هٌبضت",
    "هڑا",
    "هڑًب",
    "هڑے",
    "هکول",
    "هگر",
    "هہرثبى",
    "هیرا",
    "هیری",
    "هیرے",
    "هیں",
    "و",
    "وار",
    "والے",
    "وٍ",
    "ًئی",
    "ًئے",
    "ًب",
    "ًبپطٌذ",
    "ًبگسیر",
    "ًطجت",
    "ًقطہ",
    "ًو",
    "ًوخواى",
    "ًکبلٌب",
    "ًکتہ",
    "ًہ",
    "ًہیں",
    "ًیب",
    "ًے",
    "ٓ آش",
    "ٹھیک",
    "پبئے",
    "پبش",
    "پبًب",
    "پبًچ",
    "پر",
    "پراًب",
    "پطٌذ",
    "پل",
    "پورا",
    "پوچھب",
    "پوچھتب",
    "پوچھتی",
    "پوچھتے",
    "پوچھو",
    "پوچھوں",
    "پوچھٌب",
    "پوچھیں",
    "پچھلا",
    "پھر",
    "پہلا",
    "پہلی",
    "پہلےضی",
    "پہلےضے",
    "پہلےضےہی",
    "پیع",
    "چبر",
    "چبہب",
    "چبہٌب",
    "چبہے",
    "چلا",
    "چلو",
    "چلیں",
    "چلے",
    "چکب",
    "چکی",
    "چکیں",
    "چکے",
    "چھوٹب",
    "چھوٹوں",
    "چھوٹی",
    "چھوٹے",
    "چھہ",
    "چیسیں",
    "ڈھوًڈا",
    "ڈھوًڈلیب",
    "ڈھوًڈو",
    "ڈھوًڈًب",
    "ڈھوًڈی",
    "ڈھوًڈیں",
    "ک",
    "کئی",
    "کئے",
    "کب",
    "کبفی",
    "کبم",
    "کت",
    "کجھی",
    "کرا",
    "کرتب",
    "کرتبہوں",
    "کرتی",
    "کرتے",
    "کرتےہو",
    "کررہب",
    "کررہی",
    "کررہے",
    "کرو",
    "کرًب",
    "کریں",
    "کرے",
    "کطی",
    "کل",
    "کن",
    "کوئی",
    "کوتر",
    "کورا",
    "کوروں",
    "کورٍ",
    "کورے",
    "کوطي",
    "کوى",
    "کوًطب",
    "کوًطی",
    "کوًطے",
    "کھولا",
    "کھولو",
    "کھولٌب",
    "کھولی",
    "کھولیں",
    "کھولے",
    "کہ",
    "کہب",
    "کہتب",
    "کہتی",
    "کہتے",
    "کہو",
    "کہوں",
    "کہٌب",
    "کہی",
    "کہیں",
    "کہے",
    "کی",
    "کیب",
    "کیطب",
    "کیطرف",
    "کیطے",
    "کیلئے",
    "کیوًکہ",
    "کیوں",
    "کیے",
    "کے",
    "کےثعذ",
    "کےرریعے",
    "گئی",
    "گئے",
    "گب",
    "گرد",
    "گروٍ",
    "گروپ",
    "گروہوں",
    "گٌتی",
    "گی",
    "گیب",
    "گے",
    "ہر",
    "ہن",
    "ہو",
    "ہوئی",
    "ہوئے",
    "ہوا",
    "ہوبرا",
    "ہوبری",
    "ہوبرے",
    "ہوتب",
    "ہوتی",
    "ہوتے",
    "ہورہب",
    "ہورہی",
    "ہورہے",
    "ہوضکتب",
    "ہوضکتی",
    "ہوضکتے",
    "ہوًب",
    "ہوًی",
    "ہوًے",
    "ہوچکب",
    "ہوچکی",
    "ہوچکے",
    "ہوگئی",
    "ہوگئے",
    "ہوگیب",
    "ہوں",
    "ہی",
    "ہیں",
    "ہے",
    "ی",
    "یقیٌی",
    "یہ",
    "یہبں"
  ];
  const vie = [
    "bị",
    "bởi",
    "cả",
    "các",
    "cái",
    "cần",
    "càng",
    "chỉ",
    "chiếc",
    "cho",
    "chứ",
    "chưa",
    "chuyện",
    "có",
    "có thể",
    "cứ",
    "của",
    "cùng",
    "cũng",
    "đã",
    "đang",
    "để",
    "đến nỗi",
    "đều",
    "điều",
    "do",
    "đó",
    "được",
    "dưới",
    "gì",
    "khi",
    "không",
    "là",
    "lại",
    "lên",
    "lúc",
    "mà",
    "mỗi",
    "một cách",
    "này",
    "nên",
    "nếu",
    "ngay",
    "nhiều",
    "như",
    "nhưng",
    "những",
    "nơi",
    "nữa",
    "phải",
    "qua",
    "ra",
    "rằng",
    "rất",
    "rồi",
    "sau",
    "sẽ",
    "so",
    "sự",
    "tại",
    "theo",
    "thì",
    "trên",
    "trước",
    "từ",
    "từng",
    "và",
    "vẫn",
    "vào",
    "vậy",
    "vì",
    "việc",
    "với",
    "vừa",
    "vâng",
    "à",
    "ừ",
    "từ"
  ];
  const yor = [
    "ó",
    "ní",
    "ìjàpá",
    "ṣe",
    "rẹ̀",
    "tí",
    "àwọn",
    "sí",
    "ni",
    "náà",
    "anansi",
    "láti",
    "kan",
    "ti",
    "ń",
    "lọ",
    "o",
    "bí",
    "padà",
    "sì",
    "wá",
    "wangari",
    "lè",
    "wà",
    "kí",
    "púpọ̀",
    "odò",
    "mi",
    "wọ́n",
    "pẹ̀lú",
    "a",
    "ṣùgbọ́n",
    "fún",
    "jẹ́",
    "fẹ́",
    "oúnjẹ",
    "rí",
    "igi",
    "kò",
    "ilé",
    "jù",
    "olóńgbò",
    "pé",
    "é",
    "gbogbo",
    "iṣu",
    "inú",
    "bẹ̀rẹ̀",
    "jẹ",
    "fi",
    "dúró",
    "alẹ́",
    "ọjọ́",
    "nítorí",
    "nǹkan",
    "ọ̀rẹ́",
    "àkókò",
    "sínú",
    "ṣ",
    "yìí"
  ];
  const zul = [
    "ukuthi",
    "kodwa",
    "futhi",
    "kakhulu",
    "wakhe",
    "kusho",
    "uma",
    "wathi",
    "umama",
    "kanye",
    "phansi",
    "ngesikhathi",
    "lapho",
    "u",
    "zakhe",
    "khona",
    "ukuba",
    "nje",
    "phezulu",
    "yakhe",
    "kungani",
    "wase",
    "la",
    "mina",
    "wami",
    "ukuze",
    "unonkungu",
    "wabona",
    "wahamba",
    "lakhe",
    "yami",
    "kanjani",
    "kwakukhona",
    "ngelinye"
  ];
  const removeStopwords = (tokens, stopwords = eng) => {
    if (!Array.isArray(tokens) || !Array.isArray(stopwords)) {
      throw new Error("expected Arrays try: removeStopwords(Array[, Array])");
    }
    return tokens.filter((x) => !stopwords.includes(x.toLowerCase()));
  };
  const sw = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    _123,
    afr,
    ara,
    ben,
    bre,
    bul,
    cat,
    ces,
    dan,
    deu,
    ell,
    eng,
    epo,
    est,
    eus,
    fas,
    fin,
    fra,
    gle,
    glg,
    guj,
    hau,
    heb,
    hin,
    hrv,
    hun,
    hye,
    ind,
    ita,
    jpn,
    kor,
    kur,
    lat,
    lav,
    lgg,
    lggNd,
    lit,
    mar,
    msa,
    mya,
    nld,
    nob,
    panGu,
    pol,
    por,
    porBr,
    removeStopwords,
    ron,
    rus,
    slk,
    slv,
    som,
    sot,
    spa,
    swa,
    swe,
    tgl,
    tha,
    tur,
    ukr,
    urd,
    vie,
    yor,
    zho,
    zul
  }, Symbol.toStringTag, { value: "Module" }));
  class StringBuilder {
    constructor(limit) {
      this.length = 0;
      this.buffer = [];
      this.limit = limit;
    }
    append(str) {
      if (this.length + str.length > this.limit) {
        return true;
      } else {
        this.buffer.push(str);
        this.length += str.length;
        if (this.length > this.limit) {
          return true;
        }
        return false;
      }
    }
    toString() {
      return this.buffer.join(" ");
    }
  }
  const extractText = (data, acc, indexableNodeTypes) => {
    var _a2, _b;
    if (data) {
      if (indexableNodeTypes.indexOf(data.type) !== -1 && (data.text || data.value)) {
        const tokens = tokenizeString(data.text || data.value);
        for (const token of tokens) {
          if (acc.append(token)) {
            return;
          }
        }
      }
      (_b = (_a2 = data.children) == null ? void 0 : _a2.forEach) == null ? void 0 : _b.call(
        _a2,
        (child) => extractText(child, acc, indexableNodeTypes)
      );
    }
  };
  const relativePath = (path2, collection) => {
    return path2.replace(/\\/g, "/").replace(collection.path, "").replace(/^\/|\/$/g, "");
  };
  const tokenizeString = (str) => {
    return str.split(/[\s\.,]+/).map((s2) => s2.toLowerCase()).filter((s2) => s2);
  };
  const processTextFieldValue = (value, maxLen) => {
    const tokens = tokenizeString(value);
    const builder = new StringBuilder(maxLen);
    for (const part of tokens) {
      if (builder.append(part)) {
        break;
      }
    }
    return builder.toString();
  };
  const processDocumentForIndexing = (data, path2, collection, textIndexLength, field) => {
    if (!field) {
      const relPath = relativePath(path2, collection);
      data["_id"] = `${collection.name}:${relPath}`;
      data["_relativePath"] = relPath;
    }
    for (const f2 of (field == null ? void 0 : field.fields) || collection.fields || []) {
      if (!f2.searchable) {
        delete data[f2.name];
        continue;
      }
      const isList = f2.list;
      if (data[f2.name]) {
        if (f2.type === "object") {
          if (isList) {
            data[f2.name] = data[f2.name].map(
              (obj) => processDocumentForIndexing(
                obj,
                path2,
                collection,
                textIndexLength,
                f2
              )
            );
          } else {
            data[f2.name] = processDocumentForIndexing(
              data[f2.name],
              path2,
              collection,
              textIndexLength,
              f2
            );
          }
        } else if (f2.type === "string") {
          const fieldTextIndexLength = f2.maxSearchIndexFieldLength || textIndexLength;
          if (isList) {
            data[f2.name] = data[f2.name].map(
              (value) => processTextFieldValue(value, fieldTextIndexLength)
            );
          } else {
            data[f2.name] = processTextFieldValue(
              data[f2.name],
              fieldTextIndexLength
            );
          }
        } else if (f2.type === "rich-text") {
          const fieldTextIndexLength = f2.maxSearchIndexFieldLength || textIndexLength;
          if (isList) {
            data[f2.name] = data[f2.name].map((value) => {
              const acc = new StringBuilder(fieldTextIndexLength);
              extractText(value, acc, ["text", "code_block", "html"]);
              return acc.toString();
            });
          } else {
            const acc = new StringBuilder(fieldTextIndexLength);
            extractText(data[f2.name], acc, ["text", "code_block", "html"]);
            data[f2.name] = acc.toString();
          }
        }
      }
    }
    return data;
  };
  const memo = {};
  const lookupStopwords = (keys2, defaultStopWords = eng) => {
    let stopwords = defaultStopWords;
    if (keys2) {
      if (memo[keys2.join(",")]) {
        return memo[keys2.join(",")];
      }
      stopwords = [];
      for (const key of keys2) {
        stopwords.push(...sw[key]);
      }
      memo[keys2.join(",")] = stopwords;
    }
    return stopwords;
  };
  const queryToSearchIndexQuery = (query, stopwordLanguages) => {
    let q2;
    const parts = query.split(" ");
    const stopwords = lookupStopwords(stopwordLanguages);
    if (parts.length === 1) {
      q2 = { AND: [parts[0]] };
    } else {
      q2 = {
        AND: parts.filter(
          (part) => part.toLowerCase() !== "and" && stopwords.indexOf(part.toLowerCase()) === -1
        )
      };
    }
    return q2;
  };
  const optionsToSearchIndexOptions = (options) => {
    const opt = {};
    if (options == null ? void 0 : options.limit) {
      opt["PAGE"] = {
        SIZE: options.limit,
        NUMBER: (options == null ? void 0 : options.cursor) ? parseInt(options.cursor) : 0
      };
    }
    return opt;
  };
  const parseSearchIndexResponse = (data, options) => {
    const results = data["RESULT"];
    const total = data["RESULT_LENGTH"];
    if ((options == null ? void 0 : options.cursor) && (options == null ? void 0 : options.limit)) {
      const prevCursor = options.cursor === "0" ? null : (parseInt(options.cursor) - 1).toString();
      const nextCursor = total <= (parseInt(options.cursor) + 1) * options.limit ? null : (parseInt(options.cursor) + 1).toString();
      return {
        results,
        total,
        prevCursor,
        nextCursor
      };
    } else if (!(options == null ? void 0 : options.cursor) && (options == null ? void 0 : options.limit)) {
      const prevCursor = null;
      const nextCursor = total <= options.limit ? null : "1";
      return {
        results,
        total,
        prevCursor,
        nextCursor
      };
    } else {
      return {
        results,
        total,
        prevCursor: null,
        nextCursor: null
      };
    }
  };
  function asyncPoll(fn, pollInterval = 5 * 1e3, pollTimeout = 30 * 1e3) {
    const endTime = (/* @__PURE__ */ new Date()).getTime() + pollTimeout;
    let stop = false;
    const cancel = () => {
      stop = true;
    };
    const checkCondition = (resolve, reject) => {
      Promise.resolve(fn()).then((result) => {
        const now2 = (/* @__PURE__ */ new Date()).getTime();
        if (stop) {
          reject(new Error("AsyncPoller: cancelled"));
        } else if (result.done) {
          resolve(result.data);
        } else if (now2 < endTime) {
          setTimeout(checkCondition, pollInterval, resolve, reject);
        } else {
          reject(new Error("AsyncPoller: reached timeout"));
        }
      }).catch((err) => {
        reject(err);
      });
    };
    return [new Promise(checkCondition), cancel];
  }
  function popupWindow(url, title, window2, w2, h) {
    const y = window2.top.outerHeight / 2 + window2.top.screenY - h / 2;
    const x = window2.top.outerWidth / 2 + window2.top.screenX - w2 / 2;
    return window2.open(
      url,
      title,
      "toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=yes, copyhistory=no, width=" + w2 + ", height=" + h + ", top=" + y + ", left=" + x
    );
  }
  const TINA_LOGIN_EVENT = "tinaCloudLogin";
  const AUTH_TOKEN_KEY = "tinacms-auth";
  const authenticate = (clientId, frontendUrl) => {
    return new Promise((resolve) => {
      const origin = `${window.location.protocol}//${window.location.host}`;
      const authTab = popupWindow(
        `${frontendUrl}/signin?clientId=${clientId}&origin=${origin}`,
        "_blank",
        window,
        1e3,
        700
      );
      window.addEventListener("message", function(e3) {
        if (e3.data.source === TINA_LOGIN_EVENT) {
          if (authTab) {
            authTab.close();
          }
          resolve({
            id_token: e3.data.id_token,
            access_token: e3.data.access_token,
            refresh_token: e3.data.refresh_token
          });
        }
      });
    });
  };
  const DefaultSessionProvider = ({
    children
  }) => /* @__PURE__ */ React.createElement(React.Fragment, null, children);
  class AbstractAuthProvider {
    /**
     * Wraps the normal fetch function with same API but adds the authorization header token.
     *
     * @example
     * const test = await tinaCloudClient.fetchWithToken(`/mycustomAPI/thing/one`) // the token will be passed in the authorization header
     *
     * @param input fetch function input
     * @param init fetch function init
     */
    async fetchWithToken(input, init) {
      const headers = (init == null ? void 0 : init.headers) || {};
      const token = await this.getToken();
      if (token == null ? void 0 : token.id_token) {
        headers["Authorization"] = "Bearer " + (token == null ? void 0 : token.id_token);
      }
      return await fetch(input, {
        ...init || {},
        headers: new Headers(headers)
      });
    }
    async authorize(context) {
      return this.getToken();
    }
    async isAuthorized(context) {
      return !!await this.authorize(context);
    }
    async isAuthenticated() {
      return !!await this.getUser();
    }
    getLoginStrategy() {
      return "Redirect";
    }
    /**
     * A React component that renders the custom UI for the login screen.
     * Set the LoginStrategy to LoginScreen when providing this function.
     */
    getLoginScreen() {
      return null;
    }
    getSessionProvider() {
      return DefaultSessionProvider;
    }
  }
  class TinaCloudAuthProvider extends AbstractAuthProvider {
    constructor({
      clientId,
      identityApiUrl,
      tokenStorage = "MEMORY",
      frontendUrl,
      ...options
    }) {
      super();
      this.frontendUrl = frontendUrl;
      this.clientId = clientId;
      this.identityApiUrl = identityApiUrl;
      switch (tokenStorage) {
        case "LOCAL_STORAGE":
          this.getToken = async function() {
            const tokens = localStorage.getItem(AUTH_TOKEN_KEY) || null;
            if (tokens) {
              return await this.getRefreshedToken(tokens);
            } else {
              return {
                access_token: null,
                id_token: null,
                refresh_token: null
              };
            }
          };
          this.setToken = function(token) {
            localStorage.setItem(AUTH_TOKEN_KEY, JSON.stringify(token, null, 2));
          };
          break;
        case "MEMORY":
          this.getToken = async () => {
            if (this.token) {
              return await this.getRefreshedToken(this.token);
            } else {
              return {
                access_token: null,
                id_token: null,
                refresh_token: null
              };
            }
          };
          this.setToken = (token) => {
            this.token = JSON.stringify(token, null, 2);
          };
          break;
        case "CUSTOM":
          if (!options.getTokenFn) {
            throw new Error(
              "When CUSTOM token storage is selected, a getTokenFn must be provided"
            );
          }
          this.getToken = options.getTokenFn;
          break;
      }
    }
    async authenticate() {
      const token = await authenticate(this.clientId, this.frontendUrl);
      this.setToken(token);
      return token;
    }
    async getUser() {
      if (!this.clientId) {
        return null;
      }
      const url = `${this.identityApiUrl}/v2/apps/${this.clientId}/currentUser`;
      try {
        const res = await this.fetchWithToken(url, {
          method: "GET"
        });
        const val = await res.json();
        if (!res.status.toString().startsWith("2")) {
          console.error(val.error);
          return null;
        }
        return val;
      } catch (e3) {
        console.error(e3);
        return null;
      }
    }
    async logout() {
      this.setToken(null);
    }
    async getRefreshedToken(tokens) {
      const { access_token, id_token, refresh_token } = JSON.parse(tokens);
      const { exp, iss, client_id } = this.parseJwt(access_token);
      if (Date.now() / 1e3 >= exp - 120) {
        const refreshResponse = await fetch(iss, {
          method: "POST",
          headers: {
            "Content-Type": "application/x-amz-json-1.1",
            "x-amz-target": "AWSCognitoIdentityProviderService.InitiateAuth"
          },
          body: JSON.stringify({
            ClientId: client_id,
            AuthFlow: "REFRESH_TOKEN_AUTH",
            AuthParameters: {
              REFRESH_TOKEN: refresh_token,
              DEVICE_KEY: null
            }
          })
        });
        if (refreshResponse.status !== 200) {
          throw new Error("Unable to refresh auth tokens");
        }
        const responseJson = await refreshResponse.json();
        const newToken = {
          access_token: responseJson.AuthenticationResult.AccessToken,
          id_token: responseJson.AuthenticationResult.IdToken,
          refresh_token
        };
        this.setToken(newToken);
        return Promise.resolve(newToken);
      }
      return Promise.resolve({ access_token, id_token, refresh_token });
    }
    parseJwt(token) {
      const base64Url = token.split(".")[1];
      const base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
      const jsonPayload = decodeURIComponent(
        atob(base64).split("").map(function(c2) {
          return "%" + ("00" + c2.charCodeAt(0).toString(16)).slice(-2);
        }).join("")
      );
      return JSON.parse(jsonPayload);
    }
  }
  const LOCAL_CLIENT_KEY = "tina.local.isLogedIn";
  class LocalAuthProvider extends AbstractAuthProvider {
    constructor() {
      super();
    }
    async authenticate() {
      localStorage.setItem(LOCAL_CLIENT_KEY, "true");
      return { access_token: "LOCAL", id_token: "LOCAL", refresh_token: "LOCAL" };
    }
    async getUser() {
      return localStorage.getItem(LOCAL_CLIENT_KEY) === "true";
    }
    async getToken() {
      return Promise.resolve({ id_token: "" });
    }
    async logout() {
      localStorage.removeItem(LOCAL_CLIENT_KEY);
    }
  }
  const captureBranchName = /^refs\/heads\/(.*)/;
  const parseRefForBranchName = (ref) => {
    const matches = ref.match(captureBranchName);
    return matches[1];
  };
  const ListBranchResponse = zod.z.object({
    name: zod.z.string(),
    protected: zod.z.boolean().optional().default(false),
    githubPullRequestUrl: zod.z.string().optional()
  }).array().nonempty();
  const IndexStatusResponse = zod.z.object({
    status: zod.z.union([
      zod.z.literal("complete"),
      zod.z.literal("unknown"),
      zod.z.literal("failed"),
      zod.z.literal("inprogress")
    ]).optional(),
    timestamp: zod.z.number().optional()
  });
  class Client {
    constructor({ tokenStorage = "MEMORY", ...options }) {
      var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u;
      this.events = new EventBus();
      this.protectedBranches = [];
      this.usingEditorialWorkflow = false;
      this.addPendingContent = async (props) => {
        const mutation = `#graphql
mutation addPendingDocumentMutation(
  $relativePath: String!
  $collection: String!
  $template: String
) {
  addPendingDocument(
    relativePath: $relativePath
    template: $template
    collection: $collection
  ) {
    ... on Document {
      _sys {
        relativePath
        path
        breadcrumbs
        collection {
          slug
        }
      }
    }
  }
}`;
        const result = await this.request(mutation, {
          variables: props
        });
        return result;
      };
      this.getSchema = async () => {
        if (!this.gqlSchema) {
          const data = await this.request(graphql$1.getIntrospectionQuery(), {
            variables: {}
          });
          this.gqlSchema = graphql$1.buildClientSchema(data);
        }
        return this.gqlSchema;
      };
      this.getOptimizedQuery = async (documentNode) => {
        const data = await this.request(
          `query GetOptimizedQuery($queryString: String!) {
        getOptimizedQuery(queryString: $queryString)
      }`,
          {
            variables: { queryString: graphql$1.print(documentNode) }
          }
        );
        return graphql$1.parse(data.getOptimizedQuery);
      };
      this.tinaGraphQLVersion = options.tinaGraphQLVersion;
      this.onLogin = ((_d = (_c = (_b = (_a2 = options.schema) == null ? void 0 : _a2.config) == null ? void 0 : _b.admin) == null ? void 0 : _c.authHooks) == null ? void 0 : _d.onLogin) || ((_h = (_g = (_f = (_e = options.schema) == null ? void 0 : _e.config) == null ? void 0 : _f.admin) == null ? void 0 : _g.auth) == null ? void 0 : _h.onLogin);
      this.onLogout = ((_l = (_k = (_j = (_i = options.schema) == null ? void 0 : _i.config) == null ? void 0 : _j.admin) == null ? void 0 : _k.authHooks) == null ? void 0 : _l.onLogout) || ((_p = (_o = (_n = (_m = options.schema) == null ? void 0 : _m.config) == null ? void 0 : _n.admin) == null ? void 0 : _o.auth) == null ? void 0 : _p.onLogout);
      if (options.schema) {
        const enrichedSchema = new schemaTools.TinaSchema({
          version: { fullVersion: "", major: "", minor: "", patch: "" },
          meta: { flags: [] },
          ...schemaTools.addNamespaceToSchema({ ...options.schema }, [])
        });
        this.schema = enrichedSchema;
      }
      this.options = options;
      if ((_r = (_q = options.schema) == null ? void 0 : _q.config) == null ? void 0 : _r.contentApiUrlOverride) {
        this.options.customContentApiUrl = options.schema.config.contentApiUrlOverride;
      }
      this.setBranch(options.branch);
      this.events.subscribe(
        "branch:change",
        ({ branchName }) => {
          this.setBranch(branchName);
        }
      );
      this.clientId = options.clientId;
      this.authProvider = ((_u = (_t = (_s = this.schema) == null ? void 0 : _s.config) == null ? void 0 : _t.config) == null ? void 0 : _u.authProvider) || new TinaCloudAuthProvider({
        clientId: options.clientId,
        identityApiUrl: this.identityApiUrl,
        getTokenFn: options.getTokenFn,
        tokenStorage,
        frontendUrl: this.frontendUrl
      });
    }
    get isLocalMode() {
      return false;
    }
    get isCustomContentApi() {
      return !!this.options.customContentApiUrl;
    }
    setBranch(branchName) {
      var _a2, _b, _c, _d;
      const encodedBranch = encodeURIComponent(branchName);
      document.cookie = `x-branch=${encodedBranch}; path=/; max-age=3600`;
      this.branch = encodedBranch;
      this.assetsApiUrl = ((_a2 = this.options.tinaioConfig) == null ? void 0 : _a2.assetsApiUrlOverride) || "https://assets.tinajs.io";
      this.frontendUrl = ((_b = this.options.tinaioConfig) == null ? void 0 : _b.frontendUrlOverride) || "https://app.tina.io";
      this.identityApiUrl = ((_c = this.options.tinaioConfig) == null ? void 0 : _c.identityApiUrlOverride) || "https://identity.tinajs.io";
      this.contentApiBase = ((_d = this.options.tinaioConfig) == null ? void 0 : _d.contentApiUrlOverride) || `https://content.tinajs.io`;
      this.contentApiUrl = this.options.customContentApiUrl || `${this.contentApiBase}/${this.tinaGraphQLVersion}/content/${this.options.clientId}/github/${encodedBranch}`;
      if (this.authProvider instanceof TinaCloudAuthProvider) {
        this.authProvider.identityApiUrl = this.identityApiUrl;
        this.authProvider.frontendUrl = this.frontendUrl;
      }
    }
    getBranch() {
      return this.branch;
    }
    async request(query, { variables }) {
      const token = await this.authProvider.getToken();
      const headers = {
        "Content-Type": "application/json"
      };
      if (token == null ? void 0 : token.id_token) {
        headers["Authorization"] = "Bearer " + (token == null ? void 0 : token.id_token);
      }
      const res = await fetch(this.contentApiUrl, {
        method: "POST",
        headers,
        body: JSON.stringify({
          query: typeof query === "function" ? graphql$1.print(query(gql)) : query,
          variables
        })
      });
      if (res.status !== 200) {
        let errorMessage = `Unable to complete request, ${res.statusText}`;
        const resBody = await res.json();
        if (resBody.message) {
          errorMessage = `${errorMessage}, Response: ${resBody.message}`;
        }
        if (!this.isCustomContentApi) {
          errorMessage = `${errorMessage}, Please check that the following information is correct: 
	clientId: ${this.options.clientId}
	branch: ${this.branch}.`;
          if (this.branch !== "main") {
            errorMessage = `${errorMessage}
	Note: This error can occur if the branch does not exist on GitHub or on TinaCloud`;
          }
        }
        throw new Error(errorMessage);
      }
      const json2 = await res.json();
      if (json2.errors) {
        throw new Error(
          `Unable to fetch, errors: 
	${json2.errors.map((error2) => error2.message).join("\n")}`
        );
      }
      return json2.data;
    }
    get appDashboardLink() {
      return `${this.frontendUrl}/projects/${this.clientId}`;
    }
    async checkSyncStatus({
      assetsSyncing
    }) {
      const res = await this.authProvider.fetchWithToken(
        `${this.assetsApiUrl}/v1/${this.clientId}/syncStatus`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ assetsSyncing })
        }
      );
      const jsonRes = await res.json();
      return jsonRes;
    }
    async getProject() {
      const res = await this.authProvider.fetchWithToken(
        `${this.identityApiUrl}/v2/apps/${this.clientId}`,
        {
          method: "GET"
        }
      );
      const val = await res.json();
      return val;
    }
    async getRequestStatus(requestId) {
      const res = await this.authProvider.fetchWithToken(
        `${this.contentApiBase}/request-status/${this.clientId}/${requestId}`,
        {
          method: "GET"
        }
      );
      const val = await res.json();
      return val;
    }
    async createPullRequest({
      baseBranch,
      branch,
      title
    }) {
      const url = `${this.contentApiBase}/github/${this.clientId}/create_pull_request`;
      try {
        const res = await this.authProvider.fetchWithToken(url, {
          method: "POST",
          body: JSON.stringify({
            baseBranch,
            branch,
            title
          }),
          headers: {
            "Content-Type": "application/json"
          }
        });
        if (!res.ok) {
          throw new Error(
            `There was an error creating a new branch. ${res.statusText}`
          );
        }
        const values = await res.json();
        return values;
      } catch (error2) {
        console.error("There was an error creating a new branch.", error2);
        throw error2;
      }
    }
    async fetchEvents(limit, cursor) {
      if (this.isLocalMode) {
        return {
          events: []
        };
      } else {
        return (await this.authProvider.fetchWithToken(
          `${this.contentApiBase}/events/${this.clientId}/${this.branch}?limit=${limit || 1}${cursor ? `&cursor=${cursor}` : ""}`,
          { method: "GET" }
        )).json();
      }
    }
    async getBillingState() {
      if (!this.clientId) {
        return null;
      }
      const url = `${this.identityApiUrl}/v2/apps/${this.clientId}/billing/state`;
      try {
        const res = await this.authProvider.fetchWithToken(url, {
          method: "GET"
        });
        const val = await res.json();
        if (!res.status.toString().startsWith("2")) {
          console.error(val.error);
          return null;
        }
        return {
          clientId: val.clientId || this.clientId,
          delinquencyDate: val.delinquencyDate,
          billingState: val.billingState
        };
      } catch (e3) {
        console.error(e3);
        return null;
      }
    }
    waitForIndexStatus({ ref }) {
      let unknownCount = 0;
      try {
        const [prom, cancel] = asyncPoll(
          async () => {
            try {
              const result = await this.getIndexStatus({ ref });
              if (!(result.status === "inprogress" || result.status === "unknown")) {
                return Promise.resolve({
                  done: true,
                  data: result
                });
              } else {
                if (result.status === "unknown") {
                  unknownCount++;
                  if (unknownCount > 5) {
                    throw new Error(
                      "AsyncPoller: status unknown for too long, please check indexing progress the TinaCloud dashboard"
                    );
                  }
                }
                return Promise.resolve({
                  done: false
                });
              }
            } catch (err) {
              return Promise.reject(err);
            }
          },
          // interval is 5s
          5e3,
          // interval
          //  timeout is 15 min
          9e5
          // timeout
        );
        return [prom, cancel];
      } catch (error2) {
        if (error2.message === "AsyncPoller: reached timeout") {
          console.warn(error2);
          return [Promise.resolve({ status: "timeout" }), () => {
          }];
        }
        throw error2;
      }
    }
    async getIndexStatus({ ref }) {
      const url = `${this.contentApiBase}/db/${this.clientId}/status/${ref}`;
      const res = await this.authProvider.fetchWithToken(url);
      const result = await res.json();
      const parsedResult = IndexStatusResponse.parse(result);
      return parsedResult;
    }
    async listBranches(args) {
      try {
        const url = `${this.contentApiBase}/github/${this.clientId}/list_branches`;
        const res = await this.authProvider.fetchWithToken(url, {
          method: "GET"
        });
        const branches = await res.json();
        const parsedBranches = await ListBranchResponse.parseAsync(branches);
        if ((args == null ? void 0 : args.includeIndexStatus) === false) {
          return parsedBranches;
        }
        const indexStatusPromises = parsedBranches.map(async (branch) => {
          const indexStatus2 = await this.getIndexStatus({ ref: branch.name });
          return {
            ...branch,
            indexStatus: indexStatus2
          };
        });
        this.protectedBranches = parsedBranches.filter((x) => x.protected).map((x) => x.name);
        const indexStatus = await Promise.all(indexStatusPromises);
        return indexStatus;
      } catch (error2) {
        console.error("There was an error listing branches.", error2);
        throw error2;
      }
    }
    usingProtectedBranch() {
      var _a2;
      return this.usingEditorialWorkflow && ((_a2 = this.protectedBranches) == null ? void 0 : _a2.includes(this.branch));
    }
    async createBranch({ baseBranch, branchName }) {
      const url = `${this.contentApiBase}/github/${this.clientId}/create_branch`;
      try {
        const res = await this.authProvider.fetchWithToken(url, {
          method: "POST",
          body: JSON.stringify({
            baseBranch,
            branchName
          }),
          headers: {
            "Content-Type": "application/json"
          }
        });
        if (!res.ok) {
          console.error("There was an error creating a new branch.");
          const error2 = await res.json();
          throw new Error(error2 == null ? void 0 : error2.message);
        }
        const values = await res.json();
        return parseRefForBranchName(values.data.ref);
      } catch (error2) {
        console.error("There was an error creating a new branch.", error2);
        throw error2;
      }
    }
    async getLatestVersion() {
      const url = "https://content.tinajs.io/latest-version";
      try {
        const res = await fetch(url, {
          method: "GET"
        });
        if (!res.ok) {
          throw new Error(`Failed to fetch latest version: ${res.statusText}`);
        }
        const data = await res.json();
        return data;
      } catch (error2) {
        console.error("Error fetching latest version:", error2);
        throw error2;
      }
    }
  }
  const DEFAULT_LOCAL_TINA_GQL_SERVER_URL = "http://localhost:4001/graphql";
  class LocalClient extends Client {
    constructor(props) {
      var _a2, _b, _c;
      const clientProps = {
        ...props,
        clientId: "",
        branch: "",
        tinaGraphQLVersion: "",
        customContentApiUrl: props && props.customContentApiUrl ? props.customContentApiUrl : DEFAULT_LOCAL_TINA_GQL_SERVER_URL
      };
      super(clientProps);
      this.authProvider = ((_c = (_b = (_a2 = this.schema) == null ? void 0 : _a2.config) == null ? void 0 : _b.config) == null ? void 0 : _c.authProvider) || new LocalAuthProvider();
    }
    get isLocalMode() {
      return true;
    }
  }
  class TinaCMSSearchClient {
    constructor(client, tinaSearchConfig) {
      this.client = client;
      this.tinaSearchConfig = tinaSearchConfig;
    }
    async query(query, options) {
      var _a2;
      const q2 = queryToSearchIndexQuery(
        query,
        (_a2 = this.tinaSearchConfig) == null ? void 0 : _a2.stopwordLanguages
      );
      const opt = optionsToSearchIndexOptions(options);
      const optionsParam = opt["PAGE"] ? `&options=${JSON.stringify(opt)}` : "";
      const res = await this.client.authProvider.fetchWithToken(
        `${this.client.contentApiBase}/searchIndex/${this.client.clientId}/${this.client.getBranch()}?q=${JSON.stringify(q2)}${optionsParam}`
      );
      return parseSearchIndexResponse(await res.json(), options);
    }
    async del(ids) {
      const res = await this.client.authProvider.fetchWithToken(
        `${this.client.contentApiBase}/searchIndex/${this.client.clientId}/${this.client.getBranch()}?ids=${ids.join(",")}`,
        {
          method: "DELETE"
        }
      );
      if (res.status !== 200) {
        throw new Error("Failed to update search index");
      }
    }
    async put(docs) {
      const res = await this.client.authProvider.fetchWithToken(
        `${this.client.contentApiBase}/searchIndex/${this.client.clientId}/${this.client.getBranch()}`,
        {
          method: "POST",
          body: JSON.stringify({ docs }),
          headers: {
            "Content-Type": "application/json"
          }
        }
      );
      if (res.status !== 200) {
        throw new Error("Failed to update search index");
      }
    }
    supportsClientSideIndexing() {
      return true;
    }
  }
  class LocalSearchClient {
    constructor(client) {
      this.client = client;
    }
    async query(query, options) {
      const q2 = queryToSearchIndexQuery(query);
      const opt = optionsToSearchIndexOptions(options);
      const optionsParam = opt["PAGE"] ? `&options=${JSON.stringify(opt)}` : "";
      const res = await this.client.authProvider.fetchWithToken(
        `http://localhost:4001/searchIndex?q=${JSON.stringify(q2)}${optionsParam}`
      );
      return parseSearchIndexResponse(await res.json(), options);
    }
    del(ids) {
      return Promise.resolve(void 0);
    }
    put(docs) {
      return Promise.resolve(void 0);
    }
    supportsClientSideIndexing() {
      return false;
    }
  }
  function ModalBuilder(modalProps) {
    return /* @__PURE__ */ React.createElement(Modal, null, /* @__PURE__ */ React.createElement(ModalPopup, null, /* @__PURE__ */ React.createElement(ModalHeader, null, modalProps.title), /* @__PURE__ */ React.createElement(ModalBody, { padded: true }, modalProps.message && /* @__PURE__ */ React.createElement("p", null, modalProps.message), modalProps.error && /* @__PURE__ */ React.createElement(ErrorLabel, null, modalProps.error), modalProps.children), /* @__PURE__ */ React.createElement(ModalActions, null, modalProps.actions.map((action) => /* @__PURE__ */ React.createElement(AsyncButton, { key: action.name, ...action })))));
  }
  const ErrorLabel = ({ style = {}, ...props }) => /* @__PURE__ */ React.createElement("p", { style: { ...style, color: "var(--tina-color-error)" }, ...props });
  const AsyncButton = ({ name, primary, action }) => {
    const [submitting, setSubmitting] = React.useState(false);
    const [mounted, setMounted] = React.useState(false);
    React.useEffect(() => {
      setMounted(true);
      return () => setMounted(false);
    }, []);
    const onClick = React.useCallback(async () => {
      if (!mounted)
        return;
      setSubmitting(true);
      try {
        await action();
        setSubmitting(false);
      } catch (e3) {
        setSubmitting(false);
        throw e3;
      }
    }, [action, setSubmitting, mounted]);
    return /* @__PURE__ */ React.createElement(
      Button$1,
      {
        "data-test": name.replace(/\s/g, "-").toLowerCase(),
        variant: primary ? "primary" : "secondary",
        onClick,
        busy: submitting,
        disabled: submitting
      },
      submitting && /* @__PURE__ */ React.createElement(LoadingDots, null),
      !submitting && name
    );
  };
  class TinaAdminApi {
    constructor(cms) {
      var _a2, _b, _c, _d;
      this.maxSearchIndexFieldLength = 100;
      this.api = cms.api.tina;
      this.schema = cms.api.tina.schema;
      if (cms.api.search && ((_a2 = cms.api.search) == null ? void 0 : _a2.supportsClientSideIndexing())) {
        this.searchClient = cms.api.searchClient;
        this.maxSearchIndexFieldLength = ((_d = (_c = (_b = this.schema.config) == null ? void 0 : _b.config) == null ? void 0 : _c.search) == null ? void 0 : _d.maxSearchIndexFieldLength) || 100;
      }
    }
    async isAuthenticated() {
      return await this.api.authProvider.isAuthenticated();
    }
    async checkGraphqlSchema({ localSchema }) {
      const schemaFromCloud = await this.api.getSchema();
      const schema1 = schemaFromCloud;
      const schema2 = graphql$1.buildSchema(graphql$1.print(localSchema));
      const diffOutput = await core$1.diff(schema1, schema2);
      if (diffOutput.length > 0) {
        return false;
      } else {
        return true;
      }
    }
    fetchCollections() {
      return this.schema.getCollections();
    }
    async renameDocument({ collection, relativePath: relativePath2, newRelativePath }) {
      await this.api.request(
        `#graphql
              mutation RenameDocument($collection: String!, $relativePath: String! $newRelativePath: String!) {
                updateDocument(collection: $collection, relativePath: $relativePath, params: {relativePath: $newRelativePath}){
    __typename
  }
              }
            `,
        { variables: { collection, relativePath: relativePath2, newRelativePath } }
      );
      if (this.searchClient) {
        const { document: doc } = await this.fetchDocument(
          collection.name,
          newRelativePath
        );
        const processed = processDocumentForIndexing(
          doc["_values"],
          `${collection.path}/${newRelativePath}`,
          collection,
          this.maxSearchIndexFieldLength
        );
        await this.searchClient.put([processed]);
        await this.searchClient.del([`${collection.name}:${relativePath2}`]);
      }
    }
    async deleteDocument({
      collection,
      relativePath: relativePath2
    }) {
      var _a2;
      await this.api.request(
        `#graphql
      mutation DeleteDocument($collection: String!, $relativePath: String!  ){
  deleteDocument(collection: $collection, relativePath: $relativePath){
    __typename
  }
}`,
        { variables: { collection, relativePath: relativePath2 } }
      );
      await ((_a2 = this.searchClient) == null ? void 0 : _a2.del([`${collection}:${relativePath2}`]));
    }
    async fetchCollection(collectionName, includeDocuments, folder = "", after2, sortKey, order, filterArgs) {
      let filter2 = null;
      const filterField = filterArgs == null ? void 0 : filterArgs.filterField;
      if (filterField) {
        filter2 = {
          [collectionName]: {
            [filterField]: {}
          }
        };
      }
      if (filterField && (filterArgs == null ? void 0 : filterArgs.startsWith)) {
        filter2[collectionName][filterField] = {
          ...filter2[collectionName][filterField] || {},
          startsWith: filterArgs.startsWith
        };
      }
      if (filterField && (filterArgs == null ? void 0 : filterArgs.before)) {
        filter2[collectionName][filterField] = {
          ...filter2[collectionName][filterField] || {},
          before: filterArgs.before
        };
      }
      if (filterField && (filterArgs == null ? void 0 : filterArgs.after)) {
        filter2[collectionName][filterField] = {
          ...filter2[collectionName][filterField] || {},
          after: filterArgs.after
        };
      }
      if (filterField && (filterArgs == null ? void 0 : filterArgs.booleanEquals) !== null && (filterArgs == null ? void 0 : filterArgs.booleanEquals) !== void 0) {
        filter2[collectionName][filterField] = {
          ...filter2[collectionName][filterField] || {},
          eq: filterArgs.booleanEquals
        };
      }
      if (includeDocuments === true) {
        const sort = sortKey || this.schema.getIsTitleFieldName(collectionName);
        const response = order === "asc" ? await this.api.request(
          `#graphql
      query($collection: String!, $includeDocuments: Boolean!, $sort: String,  $limit: Float, $after: String, $filter: DocumentFilter, $folder: String){
        collection(collection: $collection){
          name
          label
          format
          templates
          documents(sort: $sort, after: $after, first: $limit, filter: $filter, folder: $folder) @include(if: $includeDocuments) {
            totalCount
            pageInfo {
              hasPreviousPage
              hasNextPage
              startCursor
              endCursor
            }
            edges {
              node {
                __typename
                ... on Folder {
                    name
                    path
                }
                ... on Document {
                  _sys {
                    title
                    template
                    breadcrumbs
                    path
                    basename
                    relativePath
                    filename
                    extension
                    hasReferences
                  }
                }
              }
            }
          }
        }
      }`,
          {
            variables: {
              collection: collectionName,
              includeDocuments,
              folder,
              sort,
              limit: 50,
              after: after2,
              filter: filter2
            }
          }
        ) : await this.api.request(
          `#graphql
      query($collection: String!, $includeDocuments: Boolean!, $sort: String,  $limit: Float, $after: String, $filter: DocumentFilter, $folder: String) {
        collection(collection: $collection){
          name
          label
          format
          templates
          documents(sort: $sort, before: $after, last: $limit, filter: $filter, folder: $folder) @include(if: $includeDocuments) {
            totalCount
            pageInfo {
              hasPreviousPage
              hasNextPage
              startCursor
              endCursor
            }
            edges {
              node {
                __typename
                ... on Folder {
                    name
                    path
                }
                ... on Document {
                  _sys {
                    title
                    template
                    breadcrumbs
                    path
                    basename
                    relativePath
                    filename
                    extension
                  }
                }
              }
            }
          }
        }
      }`,
          {
            variables: {
              collection: collectionName,
              includeDocuments,
              folder,
              sort,
              limit: 50,
              after: after2,
              filter: filter2
            }
          }
        );
        return response.collection;
      } else {
        try {
          const collection = this.schema.getCollection(collectionName);
          return collection;
        } catch (e3) {
          console.error(
            `[TinaAdminAPI] Unable to fetchCollection(): ${e3.message}`
          );
          return void 0;
        }
      }
    }
    async fetchDocument(collectionName, relativePath2, values = true) {
      let query;
      if (values) {
        query = `#graphql
        query($collection: String!, $relativePath: String!) {
          document(collection:$collection, relativePath:$relativePath) {
            ... on Document {
              _values
              _sys {
                hasReferences
              }
            }
          }
        }`;
      } else {
        query = `#graphql
        query($collection: String!, $relativePath: String!) {
          document(collection:$collection, relativePath:$relativePath) {
            __typename
            ... on Document {
              _sys {
                title
                template
                breadcrumbs
                path
                basename
                relativePath
                filename
                extension
              }
            }
          }
        }`;
      }
      const response = await this.api.request(query, {
        variables: { collection: collectionName, relativePath: relativePath2 }
      });
      return response;
    }
    async createDocument(collection, relativePath2, params) {
      const response = await this.api.request(
        `#graphql
      mutation($collection: String!, $relativePath: String!, $params: DocumentMutation!) {
        createDocument(
          collection: $collection,
          relativePath: $relativePath,
          params: $params
        ){__typename}
      }`,
        {
          variables: {
            collection: collection.name,
            relativePath: relativePath2,
            params
          }
        }
      );
      if (this.searchClient) {
        const { document: doc } = await this.fetchDocument(
          collection.name,
          relativePath2
        );
        const processed = processDocumentForIndexing(
          doc["_values"],
          `${collection.path}/${relativePath2}`,
          collection,
          this.maxSearchIndexFieldLength
        );
        await this.searchClient.put([processed]);
      }
      return response;
    }
    async updateDocument(collection, relativePath2, params) {
      const response = await this.api.request(
        `#graphql
      mutation($collection: String!, $relativePath: String!, $params: DocumentUpdateMutation!) {
        updateDocument(
          collection: $collection,
          relativePath: $relativePath,
          params: $params
        ){__typename}
      }`,
        {
          variables: {
            collection: collection.name,
            relativePath: relativePath2,
            params
          }
        }
      );
      if (this.searchClient) {
        const { document: doc } = await this.fetchDocument(
          collection.name,
          relativePath2
        );
        const processed = processDocumentForIndexing(
          doc["_values"],
          `${collection.path}/${relativePath2}`,
          collection,
          this.maxSearchIndexFieldLength
        );
        await this.searchClient.put([processed]);
      }
      return response;
    }
    async createFolder(collection, folderName) {
      return this.api.request(
        `#graphql
      mutation($collection: String!, $folderName: String!) {
        createFolder(
          collection: $collection,
          relativePath: $folderName
        ){__typename}
      }`,
        {
          variables: {
            collection,
            folderName
          }
        }
      );
    }
  }
  const createClient = ({
    clientId,
    isLocalClient = true,
    branch,
    tinaioConfig,
    schema,
    apiUrl,
    tinaGraphQLVersion
  }) => {
    return isLocalClient ? new LocalClient({ customContentApiUrl: apiUrl, schema }) : new Client({
      clientId: clientId || "",
      branch: branch || "main",
      tokenStorage: "LOCAL_STORAGE",
      tinaioConfig,
      schema,
      tinaGraphQLVersion
    });
  };
  function assertShape(value, yupSchema, errorMessage) {
    const shape = yupSchema(yup__namespace);
    try {
      shape.validateSync(value);
    } catch (e3) {
      const message = errorMessage || `Failed to assertShape - ${e3.message}`;
      throw new Error(message);
    }
  }
  function safeAssertShape(value, yupSchema) {
    try {
      assertShape(value, yupSchema);
      return true;
    } catch (e3) {
      return false;
    }
  }
  const TINA_AUTH_CONFIG = "tina_auth_config";
  const useTinaAuthRedirect = () => {
    React.useEffect(() => {
      const urlParams = new URLSearchParams(window.location.search);
      const config = {
        code: urlParams.get("code") || "",
        scope: urlParams.get("scope") || "email",
        state: urlParams.get("state")
      };
      if (!config.code) {
        return;
      }
      localStorage[TINA_AUTH_CONFIG] = JSON.stringify(config);
    }, []);
  };
  function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
  const AuthWallInner = ({
    children,
    cms,
    getModalActions
  }) => {
    var _a2, _b, _c, _d;
    const client = cms.api.tina;
    const isTinaCloud = !client.isLocalMode && !((_c = (_b = (_a2 = client.schema) == null ? void 0 : _a2.config) == null ? void 0 : _b.config) == null ? void 0 : _c.contentApiUrlOverride);
    const loginStrategy = client.authProvider.getLoginStrategy();
    const loginScreen = client.authProvider.getLoginScreen();
    if (loginStrategy === "LoginScreen" && !loginScreen) {
      throw new Error(
        "LoginScreen is set as the login strategy but no login screen component was provided"
      );
    }
    const [activeModal, setActiveModal] = React.useState(null);
    const [errorMessage, setErrorMessage] = React.useState();
    const [showChildren, setShowChildren] = React.useState(false);
    const [authProps, setAuthProps] = React.useState({ username: "", password: "" });
    const [authenticated, setAuthenticated] = React.useState(false);
    React.useEffect(() => {
      let mounted = true;
      client.authProvider.isAuthenticated().then((isAuthenticated) => {
        if (!mounted)
          return;
        if (isAuthenticated) {
          client.authProvider.isAuthorized().then(async (isAuthorized) => {
            if (!mounted)
              return;
            if (isAuthorized) {
              const user = await client.authProvider.getUser();
              if (user.passwordChangeRequired) {
                window.location.hash = "#/screens/change_password";
              }
              setShowChildren(true);
              cms.enable();
            } else {
              setErrorMessage({
                title: "Access Denied:",
                message: "Not Authorized To Edit"
              });
              setActiveModal("error");
            }
          }).catch((e3) => {
            if (!mounted)
              return;
            console.error(e3);
            setErrorMessage({ title: "Unexpected Error:", message: `${e3}` });
            setActiveModal("error");
          });
        } else {
          sleep(500).then(() => {
            setActiveModal("authenticate");
          });
        }
      }).catch((e3) => {
        if (!mounted)
          return;
        console.error(e3);
        setErrorMessage({ title: "Unexpected Error:", message: `${e3}` });
        setActiveModal("error");
      });
      return () => {
        mounted = false;
      };
    }, [authenticated]);
    const onAuthenticated = async () => {
      setAuthenticated(true);
      setActiveModal(null);
      cms.events.dispatch({ type: "cms:login" });
    };
    const otherModalActions = getModalActions ? getModalActions({
      closeModal: () => {
        setActiveModal(null);
      }
    }) : [];
    const handleAuthenticate = async (loginScreenProps) => {
      try {
        setAuthenticated(false);
        const token = await client.authProvider.authenticate(
          loginScreenProps || authProps
        );
        if (typeof (client == null ? void 0 : client.onLogin) === "function") {
          await (client == null ? void 0 : client.onLogin({ token }));
        }
        return onAuthenticated();
      } catch (e3) {
        console.error(e3);
        setActiveModal("error");
        setErrorMessage({
          title: "Authentication Error",
          message: `${e3}`
        });
      }
    };
    let modalTitle = "TinaCloud";
    if (activeModal === "authenticate" && loginStrategy === "Redirect" && !isTinaCloud) {
      modalTitle = "Enter into edit mode";
    } else if (activeModal === "authenticate" && loginStrategy === "UsernamePassword") {
      modalTitle = "Sign in to Tina";
    } else if (activeModal === "error") {
      if (loginStrategy === "Redirect" && !isTinaCloud) {
        modalTitle = "Enter into edit mode";
      } else if (loginStrategy === "UsernamePassword") {
        modalTitle = "Sign in to Tina";
      }
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, null, activeModal === "authenticate" && loginStrategy === "Redirect" && /* @__PURE__ */ React.createElement(
      ModalBuilder,
      {
        title: modalTitle,
        message: isTinaCloud ? "Your site uses TinaCloud to track changes. To make edits, you must log in." : "To save edits, enter into edit mode. On save, changes will saved to the local filesystem.",
        close,
        actions: [
          ...otherModalActions,
          {
            name: isTinaCloud ? "Log in" : "Enter Edit Mode",
            action: handleAuthenticate,
            primary: true
          }
        ]
      }
    ), activeModal === "authenticate" && loginStrategy === "UsernamePassword" && /* @__PURE__ */ React.createElement(
      ModalBuilder,
      {
        title: modalTitle,
        message: "",
        close,
        actions: [
          ...otherModalActions,
          {
            name: "Login",
            action: handleAuthenticate,
            primary: true
          }
        ]
      },
      /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-center bg-gray-50 px-4 sm:px-6 lg:px-8" }, /* @__PURE__ */ React.createElement("div", { className: "max-w-md w-full space-y-6" }, /* @__PURE__ */ React.createElement("label", { className: "block" }, /* @__PURE__ */ React.createElement("span", { className: "text-gray-700" }, "Username"), /* @__PURE__ */ React.createElement(
        BaseTextField,
        {
          id: "username",
          name: "username",
          type: "text",
          autoComplete: "username",
          required: true,
          placeholder: "Username",
          value: authProps.username,
          onChange: (e3) => setAuthProps((prevState) => ({
            ...prevState,
            username: e3.target.value
          }))
        }
      )), /* @__PURE__ */ React.createElement("label", { className: "block" }, /* @__PURE__ */ React.createElement("span", { className: "text-gray-700" }, "Password"), /* @__PURE__ */ React.createElement(
        BaseTextField,
        {
          id: "password",
          name: "password",
          type: "password",
          autoComplete: "current-password",
          required: true,
          placeholder: "Password",
          value: authProps.password,
          onChange: (e3) => setAuthProps((prevState) => ({
            ...prevState,
            password: e3.target.value
          }))
        }
      ))))
    ), activeModal === "error" && errorMessage && /* @__PURE__ */ React.createElement(
      ModalBuilder,
      {
        title: modalTitle,
        message: errorMessage.title,
        error: errorMessage.message,
        close,
        actions: [
          ...otherModalActions,
          {
            name: "Retry",
            action: async () => {
              try {
                setActiveModal(null);
                setErrorMessage(void 0);
                const { authProvider } = client;
                await authProvider.logout();
                if (typeof (client == null ? void 0 : client.onLogout) === "function") {
                  await client.onLogout();
                  await new Promise((resolve) => setTimeout(resolve, 500));
                }
                window.location.href = new URL(window.location.href).pathname;
              } catch (e3) {
                console.error(e3);
                setActiveModal("error");
                setErrorMessage({
                  title: "Unexpected Error:",
                  message: `${e3}`
                });
              }
            },
            primary: true
          }
        ]
      }
    ), showChildren ? children : ((_d = client.authProvider) == null ? void 0 : _d.getLoginStrategy()) === "LoginScreen" && loginScreen ? loginScreen({
      handleAuthenticate: async (props) => handleAuthenticate(props)
    }) : null);
  };
  const TinaCloudProvider = (props) => {
    var _a2, _b, _c;
    const baseBranch = props.branch || "main";
    const [currentBranch, setCurrentBranch] = useLocalStorage(
      "tinacms-current-branch",
      baseBranch
    );
    useTinaAuthRedirect();
    const cms = React.useMemo(
      () => props.cms || new TinaCMS({
        enabled: true,
        sidebar: true,
        isLocalClient: props.isLocalClient,
        isSelfHosted: props.isSelfHosted,
        clientId: props.clientId
      }),
      [props.cms]
    );
    if (!cms.api.tina) {
      cms.registerApi("tina", createClient({ ...props, branch: currentBranch }));
    } else {
      cms.api.tina.setBranch(currentBranch);
    }
    React.useEffect(() => {
      var _a3, _b2, _c2, _d, _e, _f;
      let searchClient;
      if (props.isLocalClient) {
        searchClient = new LocalSearchClient(cms.api.tina);
      } else {
        const hasTinaSearch = Boolean((_b2 = (_a3 = props.schema.config) == null ? void 0 : _a3.search) == null ? void 0 : _b2.tina);
        if (hasTinaSearch) {
          searchClient = new TinaCMSSearchClient(
            cms.api.tina,
            (_d = (_c2 = props.schema.config) == null ? void 0 : _c2.search) == null ? void 0 : _d.tina
          );
        } else {
          searchClient = (_f = (_e = props.schema.config) == null ? void 0 : _e.search) == null ? void 0 : _f.searchClient;
        }
      }
      if (searchClient) {
        cms.registerApi("search", searchClient);
      }
    }, [props]);
    if (!cms.api.admin) {
      cms.registerApi("admin", new TinaAdminApi(cms));
    }
    const setupMedia = async (staticMedia) => {
      var _a3, _b2, _c2, _d, _e, _f, _g;
      const hasTinaMedia = Boolean((_b2 = (_a3 = props.schema.config) == null ? void 0 : _a3.media) == null ? void 0 : _b2.tina);
      if (hasTinaMedia) {
        cms.media.store = new TinaMediaStore(cms, staticMedia);
      } else if (
        /*
        Has tina custom media (set up in the schema or define schema)
         */
        ((_d = (_c2 = props.schema.config) == null ? void 0 : _c2.media) == null ? void 0 : _d.loadCustomStore) || props.mediaStore
      ) {
        const mediaStoreFromProps = ((_f = (_e = props.schema.config) == null ? void 0 : _e.media) == null ? void 0 : _f.loadCustomStore) || props.mediaStore;
        if ((_g = mediaStoreFromProps.prototype) == null ? void 0 : _g.persist) {
          cms.media.store = new mediaStoreFromProps(cms.api.tina);
        } else {
          const MediaClass = await mediaStoreFromProps();
          cms.media.store = new MediaClass(cms.api.tina);
        }
      } else {
        cms.media.store = new DummyMediaStore();
      }
    };
    const client = cms.api.tina;
    const isTinaCloud = !client.isLocalMode && !((_c = (_b = (_a2 = client.schema) == null ? void 0 : _a2.config) == null ? void 0 : _b.config) == null ? void 0 : _c.contentApiUrlOverride);
    const SessionProvider = client.authProvider.getSessionProvider();
    const handleListBranches = async () => {
      const branches = await cms.api.tina.listBranches({
        includeIndexStatus: true
      });
      if (!Array.isArray(branches)) {
        return [];
      }
      return branches;
    };
    const handleCreateBranch = async (data) => {
      const newBranch = await cms.api.tina.createBranch(data);
      return newBranch;
    };
    setupMedia(props.staticMedia).catch((e3) => {
      console.error(e3);
    });
    const [branchingEnabled, setBranchingEnabled] = React.useState(
      () => cms.flags.get("branch-switcher")
    );
    React.useEffect(() => {
      cms.events.subscribe("flag:set", ({ key, value }) => {
        if (key === "branch-switcher") {
          setBranchingEnabled(value);
        }
      });
    }, [cms.events]);
    React.useEffect(() => {
      let branchSwitcher;
      if (branchingEnabled) {
        branchSwitcher = new BranchSwitcherPlugin({
          listBranches: handleListBranches,
          createBranch: handleCreateBranch,
          chooseBranch: setCurrentBranch
        });
        cms.plugins.add(branchSwitcher);
      }
      return () => {
        if (branchingEnabled && branchSwitcher) {
          cms.plugins.remove(branchSwitcher);
        }
      };
    }, [branchingEnabled, props.branch]);
    React.useEffect(() => {
      if (props.cmsCallback) {
        props.cmsCallback(cms);
      }
    }, []);
    React.useEffect(() => {
      const setupEditorialWorkflow = () => {
        client.getProject().then((project) => {
          var _a3;
          if ((_a3 = project == null ? void 0 : project.features) == null ? void 0 : _a3.includes("editorial-workflow")) {
            cms.flags.set("branch-switcher", true);
            client.usingEditorialWorkflow = true;
            client.protectedBranches = project.protectedBranches;
            if (!project.metadata[currentBranch]) {
              setCurrentBranch(project.defaultBranch || "main");
            }
          }
        });
      };
      if (isTinaCloud) {
        setupEditorialWorkflow();
      }
      const unsubscribe = cms.events.subscribe("cms:login", () => {
        if (isTinaCloud) {
          setupEditorialWorkflow();
        }
      });
      return unsubscribe;
    }, [currentBranch, isTinaCloud, cms]);
    return /* @__PURE__ */ React.createElement(SessionProvider, { basePath: "/api/tina/auth" }, /* @__PURE__ */ React.createElement(
      BranchDataProvider,
      {
        currentBranch,
        setCurrentBranch: (b) => {
          setCurrentBranch(b);
        }
      },
      /* @__PURE__ */ React.createElement(TinaProvider, { cms }, /* @__PURE__ */ React.createElement(AuthWallInner, { ...props, cms }))
    ));
  };
  const TinaCloudAuthWall = TinaCloudProvider;
  class ContentCreatorPlugin {
    constructor(options) {
      this.__type = "content-creator";
      this.fields = options.fields;
      this.name = options.label;
      this.onNewDocument = options.onNewDocument;
      this.collections = options.collections;
      this.onChange = options.onChange;
      this.initialValues = options.initialValues;
    }
    async onSubmit({ collection, template, relativePath: relativePath2 }, cms) {
      try {
        const selectedCollection = this.collections.find(
          (collectionItem) => collectionItem.slug === collection
        );
        const collectionFormat = selectedCollection.format;
        const extensionLength = -1 * (collectionFormat.length + 1);
        let relativePathWithExt = relativePath2;
        if (relativePath2.slice(extensionLength).toLocaleLowerCase() === `.${collectionFormat}`) {
          relativePathWithExt = `${relativePath2.slice(0, -3)}.${collectionFormat}`;
        } else {
          relativePathWithExt = `${relativePath2}.${collectionFormat}`;
        }
        const payload = {
          relativePath: relativePathWithExt,
          collection,
          template
        };
        try {
          const res = await cms.api.tina.addPendingContent(payload);
          if (res.errors) {
            res.errors.map((e3) => {
              cms.alerts.error(e3.message);
            });
          } else {
            cms.alerts.info("Document created!");
            if (typeof this.onNewDocument === "function") {
              this.onNewDocument(res.addPendingDocument._sys);
            }
          }
        } catch (e3) {
          cms.alerts.error(e3.message);
        }
      } catch (e3) {
        cms.alerts.error(e3.message);
      }
    }
  }
  const useDocumentCreatorPlugin = (args) => {
    const cms = useCMS$1();
    const [values, setValues] = React.useState({});
    const [plugin, setPlugin] = React.useState(null);
    React.useEffect(() => {
      const run = async () => {
        var _a2;
        const res = await cms.api.tina.request(
          (gql2) => gql2`
          {
            collections {
              label
              slug
              format
              templates
            }
          }
        `,
          { variables: {} }
        );
        const allCollectionOptions = [];
        res.collections.forEach((collection) => {
          const value = collection.slug;
          const label = `${collection.label}`;
          allCollectionOptions.push({ value, label });
        });
        let collectionOptions;
        if (args && args.filterCollections && typeof args.filterCollections === "function") {
          const filtered = args.filterCollections(allCollectionOptions);
          collectionOptions = [
            { value: "", label: "Choose Collection" },
            ...filtered
          ];
        } else {
          collectionOptions = [
            { value: "", label: "Choose Collection" },
            ...allCollectionOptions
          ];
        }
        const templateOptions = [
          { value: "", label: "Choose Template" }
        ];
        if (values.collection) {
          const filteredCollection = res.collections.find(
            (c2) => c2.slug === values.collection
          );
          (_a2 = filteredCollection == null ? void 0 : filteredCollection.templates) == null ? void 0 : _a2.forEach((template) => {
            templateOptions.push({ value: template.name, label: template.label });
          });
        }
        setPlugin(
          new ContentCreatorPlugin({
            label: "Add Document",
            onNewDocument: args && args.onNewDocument,
            // @ts-ignore
            collections: res.collections,
            onChange: async ({ values: values2 }) => {
              setValues(values2);
            },
            initialValues: values,
            fields: [
              {
                component: "select",
                name: "collection",
                label: "Collection",
                description: "Select the collection.",
                options: collectionOptions,
                validate: async (value, allValues, meta) => {
                  if (!value) {
                    return true;
                  }
                }
              },
              {
                component: "select",
                name: "template",
                label: "Template",
                description: "Select the template.",
                options: templateOptions,
                validate: async (value, allValues, meta) => {
                  if (!value && templateOptions.length > 1) {
                    if (meta.dirty) {
                      return "Required";
                    }
                    return true;
                  }
                }
              },
              {
                component: "text",
                name: "relativePath",
                label: "Name",
                description: `A unique name for the content. Example: "newPost" or "blog_022021`,
                placeholder: "newPost",
                validate: (value, allValues, meta) => {
                  if (!value) {
                    if (meta.dirty) {
                      return "Required";
                    }
                    return true;
                  }
                  const isValid = /^[_a-zA-Z0-9][\-_a-zA-Z0-9]*$/.test(value);
                  if (value && !isValid) {
                    return "Must begin with a-z, A-Z, 0-9, or _ and contain only a-z, A-Z, 0-9, - or _";
                  }
                }
              }
            ]
          })
        );
      };
      run();
    }, [cms]);
    React.useEffect(() => {
      if (plugin) {
        cms.plugins.add(plugin);
      }
      return () => {
        if (plugin) {
          cms.plugins.remove(plugin);
        }
      };
    }, [plugin]);
  };
  const errorButtonStyles = {
    background: "#eb6337",
    padding: "12px 18px",
    cursor: "pointer",
    borderRadius: "50px",
    textTransform: "uppercase",
    letterSpacing: "2px",
    fontWeight: "bold",
    border: "none",
    color: "white",
    margin: "1rem 0"
  };
  class ErrorBoundary extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        hasError: props.hasError,
        message: "",
        pageRefresh: false
      };
    }
    static getDerivedStateFromError(error2) {
      return { hasError: true, message: error2.message };
    }
    /**
     * Ideally we can track the last valid state and provide a button to go back, which
     * would just reset the form to that state. This isn't ideal for many cases though,
     * in general you'd probably want to push through the invalid state until you arrive at
     * a new state which you are happy with. So we should offer the opportunity to try rendering
     * again in the new, hopefully valid, state.
     */
    render() {
      if (this.state.hasError && !this.state.pageRefresh) {
        return /* @__PURE__ */ React.createElement(
          "div",
          {
            style: {
              background: "#efefef",
              height: "100vh",
              display: "flex",
              alignItems: "center",
              justifyContent: "center"
            }
          },
          /* @__PURE__ */ React.createElement("style", null, "            body {              margin: 0;            }          "),
          /* @__PURE__ */ React.createElement(
            "div",
            {
              style: {
                background: "#fff",
                maxWidth: "400px",
                padding: "20px",
                fontFamily: "'Inter', sans-serif",
                borderRadius: "5px",
                boxShadow: "0 6px 24px rgb(0 37 91 / 5%), 0 2px 4px rgb(0 37 91 / 3%)"
              }
            },
            /* @__PURE__ */ React.createElement("h3", { style: { color: "#eb6337" } }, "TinaCMS Render Error"),
            /* @__PURE__ */ React.createElement("p", null, "Tina caught an error while updating the page:"),
            /* @__PURE__ */ React.createElement("pre", { style: { marginTop: "1rem", overflowX: "auto" } }, this.state.message),
            /* @__PURE__ */ React.createElement("br", null),
            /* @__PURE__ */ React.createElement("p", null, `If you've just updated the form, undo your most recent changes and click "refresh". If after a few refreshes, you're still encountering this error. There is a bigger issue with the site. Please reach out to your site admin.`),
            /* @__PURE__ */ React.createElement("p", null, "See our", " ", /* @__PURE__ */ React.createElement(
              "a",
              {
                className: "text-gray-600",
                style: { textDecoration: "underline" },
                href: "https://tina.io/docs/errors/faq/",
                target: "_blank"
              },
              " ",
              "Error FAQ",
              " "
            ), " ", "for more information."),
            /* @__PURE__ */ React.createElement(
              "button",
              {
                type: "button",
                style: errorButtonStyles,
                onClick: () => {
                  this.setState({ pageRefresh: true });
                  setTimeout(
                    () => this.setState({ hasError: false, pageRefresh: false }),
                    3e3
                  );
                }
              },
              "Refresh"
            )
          )
        );
      }
      if (this.state.pageRefresh) {
        return /* @__PURE__ */ React.createElement(Loader, null, "Let's try that again.");
      }
      return this.props.children;
    }
  }
  const TinaCMSProvider2 = ({
    query,
    documentCreatorCallback,
    formifyCallback,
    schema,
    ...props
  }) => {
    var _a2, _b, _c;
    if (props == null ? void 0 : props.apiURL) {
      console.warn(
        "The apiURL prop is deprecated. Please see https://tina.io/blog/tina-v-0.68.14 for information on how to upgrade to the new API"
      );
    }
    const apiURL = ((_a2 = props == null ? void 0 : props.client) == null ? void 0 : _a2.apiUrl) || (props == null ? void 0 : props.apiURL);
    const { branch, clientId, isLocalClient } = apiURL ? schemaTools.parseURL(apiURL) : {
      branch: props.branch,
      clientId: props.clientId,
      // @ts-expect-error this is for backwards compatibility
      isLocalClient: props == null ? void 0 : props.isLocalClient
    };
    if (
      // Check if local client is defined
      typeof isLocalClient === "undefined" || // If in not in localMode check if clientId and branch are defined
      !isLocalClient && (!branch || !clientId) && // if they pass a custom apiURL, we don't need to throw an error
      !schema.config.contentApiUrlOverride
    ) {
      throw new Error(
        "Invalid setup. See https://tina.io/docs/tina-cloud/overview for more information."
      );
    }
    if (!schema) {
      throw new Error(
        "`schema` is required to be passed as a property to `TinaProvider`.  You can learn more about this change here: https://github.com/tinacms/tinacms/pull/2823"
      );
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      TinaCloudProvider,
      {
        branch,
        clientId: clientId || ((_b = schema == null ? void 0 : schema.config) == null ? void 0 : _b.clientId),
        tinaioConfig: props.tinaioConfig,
        isLocalClient,
        isSelfHosted: !!((_c = schema == null ? void 0 : schema.config) == null ? void 0 : _c.contentApiUrlOverride),
        cmsCallback: props.cmsCallback,
        mediaStore: props.mediaStore,
        apiUrl: apiURL,
        staticMedia: props.staticMedia,
        schema: { ...schema, config: { ...schema.config, ...props } },
        tinaGraphQLVersion: props.tinaGraphQLVersion
      },
      /* @__PURE__ */ React.createElement(FontLoader, null),
      /* @__PURE__ */ React.createElement(ErrorBoundary, null, props.children)
    ));
  };
  const Loader = (props) => {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      "div",
      {
        style: {
          position: "fixed",
          background: "rgba(0, 0, 0, 0.5)",
          inset: 0,
          zIndex: 200,
          opacity: "0.8",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          padding: "40px"
        }
      },
      /* @__PURE__ */ React.createElement(
        "div",
        {
          style: {
            background: "#f6f6f9",
            boxShadow: "0px 2px 3px rgba(0, 0, 0, 0.05), 0 4px 12px rgba(0, 0, 0, 0.1)",
            borderRadius: "5px",
            padding: "40px 32px",
            width: "460px",
            maxWidth: "90%",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            flexDirection: "column"
          }
        },
        /* @__PURE__ */ React.createElement(
          "svg",
          {
            style: {
              width: "64px",
              color: "#2296fe",
              marginTop: "-8px",
              marginBottom: "16px"
            },
            version: "1.1",
            id: "L5",
            xmlns: "http://www.w3.org/2000/svg",
            xmlnsXlink: "http://www.w3.org/1999/xlink",
            x: "0px",
            y: "0px",
            viewBox: "0 0 100 64",
            enableBackground: "new 0 0 0 0",
            xmlSpace: "preserve"
          },
          /* @__PURE__ */ React.createElement("circle", { fill: "currentColor", stroke: "none", cx: 6, cy: 32, r: 6 }, /* @__PURE__ */ React.createElement(
            "animateTransform",
            {
              attributeName: "transform",
              dur: "1s",
              type: "translate",
              values: "0 15 ; 0 -15; 0 15",
              calcMode: "spline",
              keySplines: "0.8 0 0.4 1; 0.4 0 0.2 1",
              repeatCount: "indefinite",
              begin: "0.1"
            }
          )),
          /* @__PURE__ */ React.createElement("circle", { fill: "currentColor", stroke: "none", cx: 30, cy: 32, r: 6 }, /* @__PURE__ */ React.createElement(
            "animateTransform",
            {
              attributeName: "transform",
              dur: "1s",
              type: "translate",
              values: "0 15 ; 0 -10; 0 15",
              calcMode: "spline",
              keySplines: "0.8 0 0.4 1; 0.4 0 0.2 1",
              repeatCount: "indefinite",
              begin: "0.2"
            }
          )),
          /* @__PURE__ */ React.createElement("circle", { fill: "currentColor", stroke: "none", cx: 54, cy: 32, r: 6 }, /* @__PURE__ */ React.createElement(
            "animateTransform",
            {
              attributeName: "transform",
              dur: "1s",
              type: "translate",
              values: "0 15 ; 0 -5; 0 15",
              calcMode: "spline",
              keySplines: "0.8 0 0.4 1; 0.4 0 0.2 1",
              repeatCount: "indefinite",
              begin: "0.3"
            }
          ))
        ),
        /* @__PURE__ */ React.createElement(
          "p",
          {
            style: {
              fontSize: "18px",
              color: "#252336",
              textAlign: "center",
              lineHeight: "1.3",
              fontFamily: "'Inter', sans-serif",
              fontWeight: "normal"
            }
          },
          "Please wait, Tina is loading data..."
        )
      )
    ), props.children);
  };
  const getStaticPropsForTina = async ({
    query,
    variables
  }) => {
    try {
      const data = await staticRequest({ query, variables });
      return JSON.parse(
        JSON.stringify({
          data,
          query,
          variables
        })
      );
    } catch (e3) {
      return JSON.parse(
        JSON.stringify({
          data: {},
          query,
          variables
        })
      );
    }
  };
  function is_server() {
    return !(typeof window != "undefined" && window.document);
  }
  const staticRequest = async ({
    query,
    variables
  }) => {
    const client = new LocalClient();
    if (!is_server()) {
      console.warn(`Whoops! Looks like you are using \`staticRequest\` in the browser to fetch data.

The local server is not available outside of \`getStaticProps\` or \`getStaticPaths\` functions.
This function should only be called on the server at build time.

This will work when developing locally but NOT when deployed to production.
`);
    }
    return client.request(query, { variables });
  };
  const GetCMS = ({ children }) => {
    const cms = useCMS$1();
    try {
      return /* @__PURE__ */ React.createElement(React.Fragment, null, children(cms));
    } catch (e3) {
      return null;
    }
  };
  const Layout = ({ children }) => {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      "div",
      {
        style: {
          position: "fixed",
          top: 0,
          left: 0,
          width: "100%",
          height: "100%",
          overflow: "auto",
          background: "#F6F6F9",
          fontFamily: "'Inter', sans-serif",
          zIndex: 9999
        }
      },
      children
    ));
  };
  const useGetCollections = (cms) => {
    const api = new TinaAdminApi(cms);
    return { collections: api.fetchCollections() };
  };
  const slugify = (text) => {
    return text.toString().toLowerCase().trim().replace(/[^\w\s-]/g, "").replace(/[\s_-]+/g, "_").replace(/^-+|-+$/g, "");
  };
  const Sidebar = ({ cms }) => {
    var _a2, _b;
    const collectionsInfo = useGetCollections(cms);
    const screens = cms.plugins.getType("screen").all();
    const cloudConfigs = cms.plugins.getType("cloud-config").all();
    const [menuIsOpen, setMenuIsOpen] = React.useState(false);
    const isLocalMode = (_b = (_a2 = cms.api) == null ? void 0 : _a2.tina) == null ? void 0 : _b.isLocalMode;
    const activeScreens = screens.filter(
      (screen) => {
        var _a3;
        return screen.navCategory !== "Account" || ((_a3 = cms.api.tina.authProvider) == null ? void 0 : _a3.getLoginStrategy()) === "UsernamePassword";
      }
    );
    return /* @__PURE__ */ React.createElement(
      Nav,
      {
        isLocalMode,
        showHamburger: false,
        menuIsOpen,
        toggleMenu: () => setMenuIsOpen((menu) => !menu),
        sidebarWidth: 360,
        showCollections: true,
        collectionsInfo,
        screens: activeScreens,
        cloudConfigs,
        contentCreators: [],
        RenderNavSite: ({ view }) => /* @__PURE__ */ React.createElement(
          SidebarLink,
          {
            label: view.name,
            to: `/screens/${slugify(view.name)}`,
            Icon: view.Icon ? view.Icon : ImFilesEmpty
          }
        ),
        RenderNavCloud: ({ config }) => /* @__PURE__ */ React.createElement(SidebarCloudLink, { config }),
        RenderNavCollection: ({ collection }) => /* @__PURE__ */ React.createElement(
          SidebarLink,
          {
            label: collection.label ? collection.label : collection.name,
            to: `/collections/${collection.name}/~`,
            Icon: ImFilesEmpty
          }
        ),
        AuthRenderNavCollection: ({ collection }) => /* @__PURE__ */ React.createElement(
          SidebarLink,
          {
            label: collection.label ? collection.label : collection.name,
            to: `/collections/${collection.name}/~`,
            Icon: ImUsers
          }
        )
      }
    );
  };
  const SidebarLink = (props) => {
    const { to: to2, label, Icon } = props;
    return /* @__PURE__ */ React.createElement(
      reactRouterDom.NavLink,
      {
        className: ({ isActive }) => {
          return `text-base tracking-wide ${isActive ? "text-blue-600" : "text-gray-500"} hover:text-blue-600 flex items-center opacity-90 hover:opacity-100`;
        },
        onClick: props.onClick ? props.onClick : () => {
        },
        to: to2
      },
      /* @__PURE__ */ React.createElement(Icon, { className: "mr-2 h-6 opacity-80 w-auto" }),
      " ",
      label
    );
  };
  const SidebarCloudLink = ({ config }) => {
    if (config.text) {
      return /* @__PURE__ */ React.createElement("span", { className: "text-base tracking-wide text-gray-500 flex items-center opacity-90" }, config.text, " ", /* @__PURE__ */ React.createElement(
        "a",
        {
          target: "_blank",
          className: "ml-1 text-blue-600 hover:opacity-60",
          href: config.link.href
        },
        config.link.text
      ));
    }
    return /* @__PURE__ */ React.createElement("span", { className: "text-base tracking-wide text-gray-500 hover:text-blue-600 flex items-center opacity-90 hover:opacity-100" }, /* @__PURE__ */ React.createElement(config.Icon, { className: "mr-2 h-6 opacity-80 w-auto" }), /* @__PURE__ */ React.createElement("a", { target: "_blank", href: config.link.href }, config.link.text));
  };
  const ErrorDialog = (props) => {
    return /* @__PURE__ */ React.createElement(
      "div",
      {
        style: {
          background: "#efefef",
          display: "flex",
          alignItems: "center",
          justifyContent: "center"
        }
      },
      /* @__PURE__ */ React.createElement("style", null, "        body {          margin: 0;        }      "),
      /* @__PURE__ */ React.createElement(
        "div",
        {
          style: {
            background: "#fff",
            maxWidth: "400px",
            padding: "20px",
            fontFamily: "'Inter', sans-serif",
            borderRadius: "5px",
            boxShadow: "0 6px 24px rgb(0 37 91 / 5%), 0 2px 4px rgb(0 37 91 / 3%)"
          }
        },
        /* @__PURE__ */ React.createElement("h3", { style: { color: "#eb6337" } }, props.title),
        /* @__PURE__ */ React.createElement("p", null, props.message, ":"),
        /* @__PURE__ */ React.createElement(
          "pre",
          {
            style: { marginTop: "1rem", overflowX: "auto" }
          },
          `${props.error}`
        ),
        /* @__PURE__ */ React.createElement("p", null, "See our", " ", /* @__PURE__ */ React.createElement(
          "a",
          {
            className: "text-gray-600",
            style: { textDecoration: "underline" },
            href: "https://tina.io/docs/errors/faq/",
            target: "_blank"
          },
          " ",
          "Error FAQ",
          " "
        ), " ", "for more information.")
      )
    );
  };
  const LoadingPage = () => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    "div",
    {
      style: {
        position: "absolute",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        zIndex: 200,
        opacity: "0.8",
        display: "flex",
        alignItems: "start",
        justifyContent: "center",
        padding: "120px 40px 40px 40px"
      }
    },
    /* @__PURE__ */ React.createElement(
      "div",
      {
        style: {
          background: "#FFF",
          border: "1px solid #EDECF3",
          boxShadow: "0px 2px 3px rgba(0, 0, 0, 0.05), 0 4px 12px rgba(0, 0, 0, 0.1)",
          borderRadius: "8px",
          padding: "32px 24px",
          width: "460px",
          maxWidth: "90%",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          flexDirection: "column"
        }
      },
      /* @__PURE__ */ React.createElement(
        "svg",
        {
          style: {
            width: "64px",
            color: "#2296fe",
            marginTop: "-8px",
            marginBottom: "16px"
          },
          version: "1.1",
          id: "L5",
          xmlns: "http://www.w3.org/2000/svg",
          xmlnsXlink: "http://www.w3.org/1999/xlink",
          x: "0px",
          y: "0px",
          viewBox: "0 0 100 64",
          enableBackground: "new 0 0 0 0",
          xmlSpace: "preserve"
        },
        /* @__PURE__ */ React.createElement("circle", { fill: "currentColor", stroke: "none", cx: 6, cy: 32, r: 6 }, /* @__PURE__ */ React.createElement(
          "animateTransform",
          {
            attributeName: "transform",
            dur: "1s",
            type: "translate",
            values: "0 15 ; 0 -15; 0 15",
            calcMode: "spline",
            keySplines: "0.8 0 0.4 1; 0.4 0 0.2 1",
            repeatCount: "indefinite",
            begin: "0.1"
          }
        )),
        /* @__PURE__ */ React.createElement("circle", { fill: "currentColor", stroke: "none", cx: 30, cy: 32, r: 6 }, /* @__PURE__ */ React.createElement(
          "animateTransform",
          {
            attributeName: "transform",
            dur: "1s",
            type: "translate",
            values: "0 15 ; 0 -10; 0 15",
            calcMode: "spline",
            keySplines: "0.8 0 0.4 1; 0.4 0 0.2 1",
            repeatCount: "indefinite",
            begin: "0.2"
          }
        )),
        /* @__PURE__ */ React.createElement("circle", { fill: "currentColor", stroke: "none", cx: 54, cy: 32, r: 6 }, /* @__PURE__ */ React.createElement(
          "animateTransform",
          {
            attributeName: "transform",
            dur: "1s",
            type: "translate",
            values: "0 15 ; 0 -5; 0 15",
            calcMode: "spline",
            keySplines: "0.8 0 0.4 1; 0.4 0 0.2 1",
            repeatCount: "indefinite",
            begin: "0.3"
          }
        ))
      ),
      /* @__PURE__ */ React.createElement(
        "p",
        {
          style: {
            fontSize: "16px",
            color: "#716c7f",
            textAlign: "center",
            lineHeight: "1.3",
            fontFamily: "'Inter', sans-serif",
            fontWeight: "normal"
          }
        },
        "Please wait, Tina is loading data..."
      )
    )
  ));
  function RiHome2Line(props) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M19 21H5C4.44772 21 4 20.5523 4 20V11L1 11L11.3273 1.6115C11.7087 1.26475 12.2913 1.26475 12.6727 1.6115L23 11L20 11V20C20 20.5523 19.5523 21 19 21ZM6 19H18V9.15745L12 3.7029L6 9.15745V19Z" }, "child": [] }] })(props);
  }
  const PageWrapper = ({
    headerClassName,
    children
  }) => {
    return /* @__PURE__ */ React.createElement("div", { className: "relative left-0 w-full h-full bg-gradient-to-b from-gray-50/50 to-gray-50 shadow-2xl overflow-y-auto transition-opacity duration-300 ease-out flex flex-col opacity-100" }, /* @__PURE__ */ React.createElement("div", { className: `py-2 px-4 ${headerClassName}` }, /* @__PURE__ */ React.createElement(LocalWarning, null), /* @__PURE__ */ React.createElement(BillingWarning, null), /* @__PURE__ */ React.createElement("div", { className: "flex justify-between items-center" }, /* @__PURE__ */ React.createElement(BranchButton, null), /* @__PURE__ */ React.createElement(BranchPreviewButton, null))), children);
  };
  const PageHeader = ({
    children
  }) => {
    return /* @__PURE__ */ React.createElement("div", { className: "pt-4 pb-2 px-6" }, /* @__PURE__ */ React.createElement("div", { className: "w-full flex justify-between items-end" }, children));
  };
  const PageBody = ({ children }) => /* @__PURE__ */ React.createElement("div", { className: "py-4 px-6" }, children);
  const TooltipProvider = TooltipPrimitive__namespace.Provider;
  const Tooltip = TooltipPrimitive__namespace.Root;
  const TooltipTrigger = TooltipPrimitive__namespace.Trigger;
  const TooltipContent = React__namespace.forwardRef(({ className, sideOffset = 4, ...props }, ref) => /* @__PURE__ */ React__namespace.createElement(TooltipPrimitive__namespace.Portal, null, /* @__PURE__ */ React__namespace.createElement(
    TooltipPrimitive__namespace.Content,
    {
      ref,
      sideOffset,
      className: cn$1(
        "z-[10000] overflow-hidden rounded bg-[#FFF] px-3 py-1.5 text-xs text-[#504E5E] shadow-sm animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]",
        className
      ),
      ...props
    }
  )));
  TooltipContent.displayName = TooltipPrimitive__namespace.Content.displayName;
  const folderRegex = /^.*\/~\/*(.*)$/;
  const parentFolder = (folder) => {
    return {
      ...folder,
      name: folder.name.split("/").slice(0, -1).join("/"),
      fullyQualifiedName: folder.fullyQualifiedName.split("/").slice(0, -1).join("/"),
      parentName: folder.parentName.split("/").slice(0, -1).join("/")
    };
  };
  const useCollectionFolder = () => {
    const [folder, setFolder] = React.useState({
      loading: true,
      name: "",
      fullyQualifiedName: "",
      parentName: ""
    });
    const loc = reactRouterDom.useLocation();
    React.useEffect(() => {
      const match2 = loc.pathname.match(folderRegex);
      const folderName = match2 ? decodeURIComponent(match2[1]) : "";
      const update = {
        name: folderName,
        fullyQualifiedName: match2 ? folderName ? `~/${folderName}` : "~" : "",
        loading: false,
        parentName: ""
      };
      if (update.fullyQualifiedName) {
        const pathParts = update.fullyQualifiedName.split("/");
        update.parentName = `/${pathParts.slice(0, pathParts.length - 1).join("/")}`;
      }
      setFolder({
        ...folder,
        ...update
      });
    }, [loc]);
    return folder;
  };
  const LOCAL_STORAGE_KEY = "tinacms.admin.collection.list.page";
  const isSSR = typeof window === "undefined";
  const TemplateMenu = ({
    templates,
    folder,
    collectionName
  }) => {
    return /* @__PURE__ */ React.createElement(react$1.Menu, { as: "div", className: "relative inline-block text-left" }, () => /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(react$1.MenuButton, { className: "icon-parent inline-flex items-center font-medium focus:outline-none focus:ring-2 focus:shadow-outline text-center rounded justify-center transition-all duration-150 ease-out  shadow text-white bg-blue-500 hover:bg-blue-600 focus:ring-blue-500 text-sm h-10 px-6" }, "Create New ", /* @__PURE__ */ React.createElement(BiPlus, { className: "w-5 h-full ml-1 opacity-70" }))), /* @__PURE__ */ React.createElement(
      react$1.Transition,
      {
        enter: "transition ease-out duration-100",
        enterFrom: "transform opacity-0 scale-95",
        enterTo: "transform opacity-100 scale-100",
        leave: "transition ease-in duration-75",
        leaveFrom: "transform opacity-100 scale-100",
        leaveTo: "transform opacity-0 scale-95"
      },
      /* @__PURE__ */ React.createElement(react$1.MenuItems, { className: "origin-top-right absolute right-0 mt-2 z-menu w-56 rounded shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none" }, /* @__PURE__ */ React.createElement("div", { className: "py-1" }, templates.map((template) => /* @__PURE__ */ React.createElement(react$1.MenuItem, { key: `${template.label}-${template.name}` }, ({ focus: focus2 }) => /* @__PURE__ */ React.createElement(
        reactRouterDom.Link,
        {
          to: `/${folder.fullyQualifiedName ? [
            "collections",
            "new",
            collectionName,
            template.name,
            "~",
            folder.name
          ].join("/") : [
            "collections",
            "new",
            collectionName,
            template.name
          ].join("/")}`,
          className: `w-full text-md px-4 py-2 tracking-wide flex items-center transition ease-out duration-100 ${focus2 ? "text-blue-600 opacity-100 bg-gray-50" : "opacity-80 text-gray-600"}`
        },
        template.label
      )))))
    )));
  };
  const handleNavigate = async (navigate, cms, collection, collectionDefinition, document2) => {
    var _a2, _b;
    const plugins2 = cms.plugins.all("tina-admin");
    const routeMapping = plugins2.find(({ name }) => name === "route-mapping");
    const tinaPreview = cms.flags.get("tina-preview") || false;
    let routeOverride = ((_a2 = collectionDefinition.ui) == null ? void 0 : _a2.router) ? await ((_b = collectionDefinition.ui) == null ? void 0 : _b.router({
      document: document2,
      collection: collectionDefinition
    })) : routeMapping ? routeMapping.mapper(collection, document2) : void 0;
    if (routeOverride) {
      if (routeOverride.startsWith("/")) {
        routeOverride = routeOverride.slice(1);
      }
      tinaPreview ? navigate(`/~/${routeOverride}`) : window.location.href = routeOverride;
      return null;
    } else {
      const pathToDoc = document2._sys.breadcrumbs;
      navigate(
        `/${["collections", "edit", collection.name, ...pathToDoc].join("/")}`,
        { replace: true }
      );
    }
  };
  function getUniqueTemplateFields(collection) {
    const fieldSet = [];
    collection.templates.forEach((template) => {
      template.fields.filter((f2) => {
        return fieldSet.find((x) => x.name === f2.name) === void 0;
      }).forEach((field) => {
        fieldSet.push(field);
      });
    });
    return [...fieldSet];
  }
  const CollectionListPage = () => {
    const navigate = reactRouterDom.useNavigate();
    const { collectionName } = reactRouterDom.useParams();
    const [deleteModalOpen, setDeleteModalOpen] = React.useState(false);
    const [renameModalOpen, setRenameModalOpen] = React.useState(false);
    const [folderModalOpen, setFolderModalOpen] = React.useState(false);
    const [vars, setVars] = React.useState({
      collection: collectionName,
      relativePath: "",
      relativePathWithoutExtension: "",
      newRelativePath: "",
      filterField: "",
      folderName: "",
      startsWith: "",
      endsWith: "",
      before: "",
      after: "",
      booleanEquals: null
    });
    const [endCursor, setEndCursor] = React.useState("");
    const [prevCursors, setPrevCursors] = React.useState([]);
    const [sortKey, setSortKey] = React.useState(
      // set sort key to cached value if it exists
      isSSR ? "" : window.localStorage.getItem(`${LOCAL_STORAGE_KEY}.${collectionName}`) || JSON.stringify({
        order: "asc",
        name: ""
      })
    );
    const [search, setSearch] = React.useState("");
    const [searchInput, setSearchInput] = React.useState("");
    const { order = "asc", name: sortName } = JSON.parse(sortKey || "{}");
    const [sortOrder, setSortOrder] = React.useState(order);
    const loc = reactRouterDom.useLocation();
    const folder = useCollectionFolder();
    React.useEffect(() => {
      setSortKey(
        window.localStorage.getItem(`${LOCAL_STORAGE_KEY}.${collectionName}`) || JSON.stringify({
          order: "asc",
          name: ""
        })
      );
      setEndCursor("");
      setPrevCursors([]);
      setSearch("");
      setSearchInput("");
    }, [loc]);
    React.useEffect(() => {
      setVars((old) => ({
        ...old,
        collection: collectionName,
        relativePath: "",
        relativePathWithoutExtension: "",
        newRelativePath: "",
        filterField: "",
        startsWith: "",
        endsWith: "",
        before: "",
        after: "",
        booleanEquals: null
      }));
    }, [collectionName]);
    return /* @__PURE__ */ React.createElement(GetCMS, null, (cms) => {
      return /* @__PURE__ */ React.createElement(PageWrapper, null, /* @__PURE__ */ React.createElement(
        GetCollection,
        {
          cms,
          collectionName,
          includeDocuments: true,
          startCursor: endCursor,
          sortKey,
          folder,
          filterArgs: (
            // only pass filter args if the collection is the same as the current route
            // We need this hear because this runs before the useEffect above
            collectionName === vars.collection ? vars : {
              collection: collectionName,
              relativePath: "",
              relativePathWithoutExtension: "",
              newRelativePath: "",
              filterField: "",
              startsWith: "",
              endsWith: "",
              before: "",
              after: "",
              booleanEquals: null
            }
          ),
          search
        },
        (collection, _loading, reFetchCollection, collectionExtra) => {
          var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j;
          const documents = collection.documents.edges;
          const admin = cms.api.admin;
          const pageInfo = collection.documents.pageInfo;
          const fields = (((_a2 = collectionExtra.templates) == null ? void 0 : _a2.length) ? getUniqueTemplateFields(collectionExtra) : collectionExtra.fields).filter(
            (x) => (
              // only allow sortable fields
              ["string", "number", "datetime", "boolean"].includes(x.type)
            )
          );
          const sortField = fields == null ? void 0 : fields.find(
            (field) => field.name === sortName
          );
          const searchEnabled = !!((_d = (_c = (_b = cms.api.tina.schema) == null ? void 0 : _b.config) == null ? void 0 : _c.config) == null ? void 0 : _d.search);
          const collectionDefinition = cms.api.tina.schema.getCollection(
            collection.name
          );
          const allowCreate = ((_f = (_e = collectionDefinition == null ? void 0 : collectionDefinition.ui) == null ? void 0 : _e.allowedActions) == null ? void 0 : _f.create) ?? true;
          const allowDelete = ((_h = (_g = collectionDefinition == null ? void 0 : collectionDefinition.ui) == null ? void 0 : _g.allowedActions) == null ? void 0 : _h.delete) ?? true;
          const allowCreateNestedFolder = ((_j = (_i = collectionDefinition == null ? void 0 : collectionDefinition.ui) == null ? void 0 : _i.allowedActions) == null ? void 0 : _j.createNestedFolder) ?? true;
          const folderView = folder.fullyQualifiedName !== "";
          return /* @__PURE__ */ React.createElement(React.Fragment, null, deleteModalOpen && !cms.api.tina.usingProtectedBranch() && /* @__PURE__ */ React.createElement(
            DeleteModal,
            {
              filename: vars.relativePath,
              checkRefsFunc: async () => {
                var _a3, _b2;
                try {
                  const doc = await admin.fetchDocument(
                    collection.name,
                    vars.relativePath,
                    true
                  );
                  return (_b2 = (_a3 = doc == null ? void 0 : doc.document) == null ? void 0 : _a3._sys) == null ? void 0 : _b2.hasReferences;
                } catch (error2) {
                  cms.alerts.error(
                    "Document was not found, ask a developer for help or check the console for an error message"
                  );
                  console.error(error2);
                  throw error2;
                }
              },
              deleteFunc: async () => {
                try {
                  await admin.deleteDocument(vars);
                  cms.alerts.info(
                    "Document was successfully deleted"
                  );
                  reFetchCollection();
                } catch (error2) {
                  if (error2.message.indexOf("has references")) {
                    cms.alerts.error(
                      error2.message.split("\n	").filter(Boolean)[1]
                    );
                    return;
                  }
                  cms.alerts.warn(
                    "Document was not deleted, ask a developer for help or check the console for an error message"
                  );
                  console.error(error2);
                  throw error2;
                }
              },
              close: () => setDeleteModalOpen(false)
            }
          ), deleteModalOpen && cms.api.tina.usingProtectedBranch() && /* @__PURE__ */ React.createElement(
            CreateBranchModal,
            {
              crudType: "delete",
              path: `${collectionExtra.path}/${vars.relativePath}`,
              values: vars,
              close: () => setDeleteModalOpen(false),
              safeSubmit: async () => {
                try {
                  await admin.deleteDocument(vars);
                  cms.alerts.info(
                    "Document was successfully deleted"
                  );
                  reFetchCollection();
                } catch (error2) {
                  cms.alerts.warn(
                    "Document was not deleted, ask a developer for help or check the console for an error message"
                  );
                  console.error(error2);
                  throw error2;
                }
              }
            }
          ), renameModalOpen && /* @__PURE__ */ React.createElement(
            RenameModal,
            {
              filename: vars.relativePathWithoutExtension,
              newRelativePath: vars.newRelativePath,
              setNewRelativePath: (newRelativePath) => {
                setVars((vars2) => {
                  return { ...vars2, newRelativePath };
                });
              },
              renameFunc: async () => {
                const newRelativePath = `${vars.newRelativePath}.${collection.format}`;
                try {
                  await admin.renameDocument({
                    collection: vars.collection,
                    relativePath: vars.relativePath,
                    newRelativePath
                  });
                  cms.alerts.info(
                    "Document was successfully renamed"
                  );
                  reFetchCollection();
                } catch (error2) {
                  if (error2.message.indexOf("has references")) {
                    cms.alerts.error(
                      error2.message.split("\n	").filter(Boolean)[1]
                    );
                    return;
                  }
                  cms.alerts.warn(
                    "Document was not renamed, ask a developer for help or check the console for an error message"
                  );
                  console.error(error2);
                  throw error2;
                }
              },
              close: () => setRenameModalOpen(false)
            }
          ), folderModalOpen && /* @__PURE__ */ React.createElement(
            FolderModal,
            {
              folderName: vars.folderName,
              setFolderName: (folderName) => {
                setVars((vars2) => {
                  return { ...vars2, folderName };
                });
              },
              createFunc: async () => {
                try {
                  admin.createFolder(
                    vars.collection,
                    folder.name ? [folder.name, vars.folderName].join("/") : vars.folderName
                  ).then(() => {
                    reFetchCollection();
                    navigate(
                      `/${[
                        "collections",
                        collectionName,
                        "~",
                        ...folder.name ? [folder.name, vars.folderName] : [vars.folderName]
                      ].join("/")}`,
                      { replace: true }
                    );
                    cms.alerts.info(
                      "Folder was successfully created"
                    );
                  }).catch((error2) => {
                    throw error2;
                  });
                } catch (error2) {
                  cms.alerts.warn(
                    "Folder was not created, ask a developer for help or check the console for an error message"
                  );
                  console.error(error2);
                  throw error2;
                }
              },
              close: () => setFolderModalOpen(false)
            }
          ), /* @__PURE__ */ React.createElement(PageHeader, null, /* @__PURE__ */ React.createElement("div", { className: "w-full" }, /* @__PURE__ */ React.createElement("h3", { className: "font-sans text-2xl text-gray-700" }, collection.label ? collection.label : collection.name), /* @__PURE__ */ React.createElement("div", { className: "flex flex-col lg:flex-row justify-between lg:items-end pt-2" }, /* @__PURE__ */ React.createElement("div", { className: "flex flex-col md:flex-row gap-2 md:gap-4 items-start" }, (fields == null ? void 0 : fields.length) > 0 && /* @__PURE__ */ React.createElement(React.Fragment, null, !search && /* @__PURE__ */ React.createElement("div", { className: "flex flex-col gap-2 items-start w-full md:w-auto" }, /* @__PURE__ */ React.createElement(
            "label",
            {
              htmlFor: "sort",
              className: "block font-sans text-xs font-semibold text-gray-500 whitespace-normal"
            },
            "Sort by"
          ), /* @__PURE__ */ React.createElement(
            Select,
            {
              name: "sort",
              options: [
                {
                  label: "Default",
                  value: JSON.stringify({
                    order: "asc",
                    name: ""
                  })
                },
                ...fields.flatMap((x) => [
                  {
                    label: (x.label || x.name) + (x.type === "datetime" ? " (Oldest First)" : " (Ascending)"),
                    value: JSON.stringify({
                      name: x.name,
                      order: "asc"
                    })
                  },
                  {
                    label: (x.label || x.name) + (x.type === "datetime" ? " (Newest First)" : " (Descending)"),
                    value: JSON.stringify({
                      name: x.name,
                      order: "desc"
                    })
                  }
                ])
              ],
              input: {
                id: "sort",
                name: "sort",
                value: sortKey,
                onChange: (e3) => {
                  const val = JSON.parse(
                    e3.target.value
                  );
                  setEndCursor("");
                  setPrevCursors([]);
                  window == null ? void 0 : window.localStorage.setItem(
                    `${LOCAL_STORAGE_KEY}.${collectionName}`,
                    e3.target.value
                  );
                  setSortKey(e3.target.value);
                  setSortOrder(val.order);
                }
              }
            }
          ))), /* @__PURE__ */ React.createElement("div", { className: "flex flex-1 flex-col gap-2 items-start w-full" }, searchEnabled ? /* @__PURE__ */ React.createElement(
            SearchInput,
            {
              loading: _loading,
              search,
              setSearch,
              searchInput,
              setSearchInput
            }
          ) : /* @__PURE__ */ React.createElement("div", { className: "flex flex-col gap-2 items-start w-full md:w-auto" }, /* @__PURE__ */ React.createElement("div", { className: "h-4" }), /* @__PURE__ */ React.createElement(
            Message,
            {
              link: "https://tina.io/docs/reference/search/overview",
              linkLabel: "Read The Docs",
              type: "info",
              size: "small"
            },
            "Search not configured."
          )))), allowCreate && /* @__PURE__ */ React.createElement("div", { className: "flex flex-col md:flex-row items-start md:items-end gap-2 md:gap-0 pt-4 lg:pt-0" }, allowCreateNestedFolder && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(TooltipProvider, null, /* @__PURE__ */ React.createElement(Tooltip, null, /* @__PURE__ */ React.createElement(TooltipTrigger, { asChild: true }, /* @__PURE__ */ React.createElement("span", null, /* @__PURE__ */ React.createElement(
            reactRouterDom.Link,
            {
              onMouseDown: (evt) => {
                if (collection.templates) {
                  evt.preventDefault();
                  return;
                }
                setVars((old) => ({
                  ...old,
                  collection: collectionName,
                  folderName: ""
                }));
                setFolderModalOpen(true);
                evt.stopPropagation();
              },
              to: "/collections/new-folder",
              className: cn$1(
                "icon-parent inline-flex items-center font-medium focus:outline-none focus:ring-2 focus:shadow-outline text-center rounded justify-center transition-all duration-150 ease-out whitespace-nowrap shadow text-blue-500 bg-white hover:bg-[#f1f5f9] focus:ring-white focus:ring-blue-500 w-full md:w-auto text-sm h-10 px-6 mr-4",
                collection.templates && "opacity-50 pointer-events-none cursor-not-allowed"
              ),
              "aria-disabled": !!collection.templates,
              tabIndex: collection.templates ? -1 : 0
            },
            /* @__PURE__ */ React.createElement(FaFolder, { className: "mr-2" }),
            "Add Folder"
          ))), collection.templates && /* @__PURE__ */ React.createElement(
            TooltipContent,
            {
              side: "top",
              align: "center"
            },
            /* @__PURE__ */ React.createElement("p", null, "Folders can’t be manually added when using templates.", /* @__PURE__ */ React.createElement("br", null), "See the docs -", " ", /* @__PURE__ */ React.createElement(
              "a",
              {
                href: "https://tina.io/docs/reference/templates",
                target: "_blank",
                rel: "noopener noreferrer",
                className: "underline text-blue-500"
              },
              "https://tina.io/docs/reference/templates"
            ))
          )))), !collection.templates && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
            reactRouterDom.Link,
            {
              to: `/${folder.fullyQualifiedName ? [
                "collections",
                "new",
                collectionName,
                "~",
                folder.name
              ].join("/") : [
                "collections",
                "new",
                collectionName
              ].join("/")}`,
              className: "inline-flex items-center font-medium focus:outline-none focus:ring-2 focus:shadow-outline text-center rounded justify-center transition-all duration-150 ease-out whitespace-nowrap shadow text-white bg-blue-500 hover:bg-blue-600 w-full md:w-auto text-sm h-10 px-6"
            },
            /* @__PURE__ */ React.createElement(FaFile, { className: "mr-2" }),
            "Add File"
          )), collection.templates && /* @__PURE__ */ React.createElement(
            TemplateMenu,
            {
              collectionName,
              templates: collection.templates,
              folder
            }
          ))))), /* @__PURE__ */ React.createElement(PageBody, null, /* @__PURE__ */ React.createElement("div", { className: "w-full mx-auto max-w-screen-xl" }, sortField && !sortField.required && /* @__PURE__ */ React.createElement("p", { className: "mb-4 text-gray-500" }, /* @__PURE__ */ React.createElement("em", null, "Sorting on a non-required field. Some documents may be excluded (if they don't have a value for", " ", sortName, ")")), /* @__PURE__ */ React.createElement("div", { className: "w-full overflow-x-auto" }, (folder.name && !search || documents.length > 0) && /* @__PURE__ */ React.createElement("table", { className: "table-auto shadow bg-white border-b border-gray-200 w-full max-w-full rounded-lg" }, /* @__PURE__ */ React.createElement("tbody", { className: "divide-y divide-gray-150" }, folder.name && !search ? /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("td", { colSpan: 5 }, /* @__PURE__ */ React.createElement(
            Breadcrumb,
            {
              folder,
              navigate,
              collectionName
            }
          ))) : null, documents.length > 0 && documents.map((document2) => {
            var _a3;
            if (document2.node.__typename === "Folder") {
              return /* @__PURE__ */ React.createElement(
                "tr",
                {
                  key: `folder-${document2.node.path}`
                },
                /* @__PURE__ */ React.createElement("td", { className: "pl-5 pr-3 py-3" }, /* @__PURE__ */ React.createElement(
                  "a",
                  {
                    className: "text-blue-600 hover:text-blue-400 flex items-center gap-3 cursor-pointer truncate",
                    onClick: () => {
                      navigate(
                        `/${[
                          "collections",
                          collectionName,
                          document2.node.path
                        ].join("/")}`,
                        { replace: true }
                      );
                    }
                  },
                  /* @__PURE__ */ React.createElement(BiFolder, { className: "inline-block h-6 w-auto flex-shrink-0 opacity-70" }),
                  /* @__PURE__ */ React.createElement("span", { className: "truncate block" }, /* @__PURE__ */ React.createElement("span", { className: "block text-xs text-gray-400 mb-1 uppercase" }, "Name"), /* @__PURE__ */ React.createElement("span", { className: "h-5 leading-5 block truncate" }, /* @__PURE__ */ React.createElement("span", null, document2.node.name)))
                )),
                /* @__PURE__ */ React.createElement("td", { className: "px-3 py-3", colSpan: 4 }, /* @__PURE__ */ React.createElement("span", { className: "block text-xs text-gray-400 mb-1 uppercase" }, "Path"), /* @__PURE__ */ React.createElement("span", { className: "leading-5 block text-sm font-medium text-gray-900 truncate" }, document2.node.path.substring(2).split("/").map((node2) => {
                  return /* @__PURE__ */ React.createElement("span", { key: node2 }, /* @__PURE__ */ React.createElement("span", { className: "text-gray-300 pr-0.5" }, "/"), /* @__PURE__ */ React.createElement("span", { className: "pr-0.5" }, node2));
                })))
              );
            }
            const hasTitle = Boolean(
              document2.node._sys.title
            );
            const subfolders = document2.node._sys.breadcrumbs.slice(0, -1).join("/");
            return /* @__PURE__ */ React.createElement(
              "tr",
              {
                key: `document-${document2.node._sys.relativePath}`
              },
              /* @__PURE__ */ React.createElement(
                "td",
                {
                  className: "pl-5 pr-3 py-3",
                  colSpan: hasTitle ? 1 : 2
                },
                /* @__PURE__ */ React.createElement(
                  "a",
                  {
                    className: "text-blue-600 hover:text-blue-400 flex items-center gap-3 cursor-pointer truncate",
                    onClick: () => {
                      handleNavigate(
                        navigate,
                        cms,
                        collection,
                        collectionDefinition,
                        document2.node
                      );
                    }
                  },
                  /* @__PURE__ */ React.createElement(BiFile, { className: "inline-block h-6 w-auto flex-shrink-0 opacity-70" }),
                  /* @__PURE__ */ React.createElement("span", { className: "truncate block" }, /* @__PURE__ */ React.createElement("span", { className: "block text-xs text-gray-400 mb-1 uppercase" }, hasTitle ? "Title" : "Filename"), /* @__PURE__ */ React.createElement("span", { className: "h-5 leading-5 block truncate mb-1" }, !folderView && !hasTitle && subfolders && /* @__PURE__ */ React.createElement("span", { className: "text-xs text-gray-400" }, `${subfolders}/`), /* @__PURE__ */ React.createElement("span", null, hasTitle ? (_a3 = document2.node._sys) == null ? void 0 : _a3.title : document2.node._sys.filename)), /* @__PURE__ */ React.createElement("span", { className: "block text-xs text-gray-400" }, document2.node._sys.path))
                )
              ),
              hasTitle && /* @__PURE__ */ React.createElement("td", { className: "px-3 py-3" }, /* @__PURE__ */ React.createElement("span", { className: "block text-xs text-gray-400 mb-1 uppercase" }, "Filename"), /* @__PURE__ */ React.createElement("span", { className: "h-5 leading-5 block text-sm font-medium text-gray-900 truncate" }, !folderView && subfolders && /* @__PURE__ */ React.createElement("span", { className: "text-xs text-gray-400" }, `${subfolders}/`), /* @__PURE__ */ React.createElement("span", null, document2.node._sys.filename))),
              /* @__PURE__ */ React.createElement("td", { className: "px-3 py-3" }, /* @__PURE__ */ React.createElement("span", { className: "block text-xs text-gray-400 mb-1 uppercase" }, "Extension"), /* @__PURE__ */ React.createElement("span", { className: "h-5 leading-5 block text-sm font-medium text-gray-900" }, document2.node._sys.extension)),
              /* @__PURE__ */ React.createElement("td", { className: "px-3 py-3" }, /* @__PURE__ */ React.createElement("span", { className: "block text-xs text-gray-400 mb-1 uppercase" }, "Template"), /* @__PURE__ */ React.createElement("span", { className: "h-5 leading-5 block text-sm font-medium text-gray-900" }, document2.node._sys.template)),
              /* @__PURE__ */ React.createElement("td", { className: "w-0" }, /* @__PURE__ */ React.createElement(
                OverflowMenu$1,
                {
                  toolbarItems: [
                    {
                      name: "edit",
                      label: "Edit in Admin",
                      Icon: /* @__PURE__ */ React.createElement(BiEdit, { size: "1.3rem" }),
                      onMouseDown: () => {
                        const pathToDoc = document2.node._sys.breadcrumbs;
                        if (folder.fullyQualifiedName) {
                          pathToDoc.unshift("~");
                        }
                        navigate(
                          `/${[
                            "collections",
                            "edit",
                            collectionName,
                            ...pathToDoc
                          ].join("/")}`,
                          { replace: true }
                        );
                      }
                    },
                    allowCreate && {
                      name: "duplicate",
                      label: "Duplicate",
                      Icon: /* @__PURE__ */ React.createElement(BiCopy, { size: "1.3rem" }),
                      onMouseDown: () => {
                        const pathToDoc = document2.node._sys.breadcrumbs;
                        if (folder.fullyQualifiedName) {
                          pathToDoc.unshift("~");
                        }
                        navigate(
                          `/${[
                            "collections",
                            "duplicate",
                            collectionName,
                            ...pathToDoc
                          ].join("/")}`,
                          { replace: true }
                        );
                      }
                    },
                    allowDelete && {
                      name: "delete",
                      label: "Delete",
                      Icon: /* @__PURE__ */ React.createElement(
                        BiTrash,
                        {
                          size: "1.3rem",
                          className: "text-red-500"
                        }
                      ),
                      onMouseDown: () => {
                        setVars((old) => ({
                          ...old,
                          collection: collectionName,
                          relativePathWithoutExtension: document2.node._sys.breadcrumbs.join(
                            "/"
                          ),
                          relativePath: document2.node._sys.breadcrumbs.join(
                            "/"
                          ) + document2.node._sys.extension,
                          newRelativePath: ""
                        }));
                        setDeleteModalOpen(true);
                      }
                    },
                    allowDelete && {
                      name: "rename",
                      label: "Rename",
                      Icon: /* @__PURE__ */ React.createElement(
                        BiRename,
                        {
                          size: "1.3rem",
                          className: "text-red-500"
                        }
                      ),
                      onMouseDown: () => {
                        setVars((old) => ({
                          ...old,
                          collection: collectionName,
                          relativePathWithoutExtension: document2.node._sys.breadcrumbs.join(
                            "/"
                          ),
                          relativePath: document2.node._sys.breadcrumbs.join(
                            "/"
                          ) + document2.node._sys.extension,
                          newRelativePath: ""
                        }));
                        setRenameModalOpen(true);
                      }
                    }
                  ].filter(Boolean)
                }
              ))
            );
          })))), documents.length === 0 && /* @__PURE__ */ React.createElement(NoDocumentsPlaceholder, null), /* @__PURE__ */ React.createElement("div", { className: "pt-4" }, /* @__PURE__ */ React.createElement(
            CursorPaginator,
            {
              variant: "white",
              hasNext: sortOrder === "asc" ? pageInfo == null ? void 0 : pageInfo.hasNextPage : pageInfo.hasPreviousPage,
              navigateNext: () => {
                const newState = [...prevCursors, endCursor];
                setPrevCursors(newState);
                setEndCursor(pageInfo == null ? void 0 : pageInfo.endCursor);
              },
              hasPrev: prevCursors.length > 0,
              navigatePrev: () => {
                const prev = prevCursors[prevCursors.length - 1];
                if (typeof prev === "string") {
                  const newState = prevCursors.slice(0, -1);
                  setPrevCursors(newState);
                  setEndCursor(prev);
                }
              }
            }
          )))));
        }
      ));
    });
  };
  const SearchInput = ({
    loading,
    search,
    setSearch,
    searchInput,
    setSearchInput
  }) => {
    const [searchLoaded, setSearchLoaded] = React.useState(false);
    React.useEffect(() => {
      if (loading) {
        setSearchLoaded(false);
      } else {
        setSearchLoaded(true);
      }
    }, [loading]);
    return /* @__PURE__ */ React.createElement("form", { className: "flex flex-1 flex-col gap-2 items-start w-full" }, /* @__PURE__ */ React.createElement("div", { className: "h-4" }), /* @__PURE__ */ React.createElement("div", { className: "flex flex-col md:flex-row items-start md:items-center w-full md:w-auto gap-3" }, /* @__PURE__ */ React.createElement("div", { className: "flex-1 min-w-[200px] w-full md:w-auto relative" }, /* @__PURE__ */ React.createElement(BiSearch, { className: "absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400 pointer-events-none" }), /* @__PURE__ */ React.createElement(
      "input",
      {
        type: "text",
        name: "search",
        placeholder: "Search...",
        value: searchInput,
        onChange: (e3) => {
          setSearchInput(e3.target.value);
        },
        onKeyDown: (e3) => {
          if (e3.key === "Enter") {
            e3.preventDefault();
            if (searchInput.trim()) {
              setSearch(searchInput);
              setSearchLoaded(false);
            }
          }
        },
        className: "shadow appearance-none bg-white block pl-10 pr-10 py-2 truncate w-full text-base border border-gray-200 focus:outline-none focus:shadow-outline focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded placeholder:text-gray-300 text-gray-600 focus:text-gray-900"
      }
    ), search && searchLoaded && /* @__PURE__ */ React.createElement(
      "button",
      {
        onClick: (e3) => {
          e3.preventDefault();
          setSearch("");
          setSearchInput("");
        },
        className: "absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
      },
      /* @__PURE__ */ React.createElement(BiX, { className: "w-5 h-5" })
    ))));
  };
  const Breadcrumb = ({ folder, navigate, collectionName }) => {
    const folderArray = folder.name.split("/");
    return /* @__PURE__ */ React.createElement("div", { className: "w-full bg-gray-50/30 flex items-stretch" }, /* @__PURE__ */ React.createElement(
      "button",
      {
        onClick: () => {
          const folders = folder.fullyQualifiedName.split("/");
          navigate(
            `/${[
              "collections",
              collectionName,
              ...folders.slice(0, folders.length - 1)
            ].join("/")}`,
            { replace: true }
          );
        },
        className: "px-3 py-2 bg-white hover:bg-gray-50/50 transition ease-out duration-100 border-r border-gray-100 text-blue-500 hover:text-blue-600"
      },
      /* @__PURE__ */ React.createElement(BiArrowBack, { className: "w-6 h-full opacity-70" })
    ), /* @__PURE__ */ React.createElement("span", { className: "px-3 py-2 text-gray-600 flex flex-wrap items-center justify-start gap-1" }, /* @__PURE__ */ React.createElement(
      "button",
      {
        onClick: () => {
          navigate(`/collections/${collectionName}/~`, {
            replace: true
          });
        },
        className: "shrink-0 bg-transparent p-0 border-0 text-blue-400 hover:text-blue-500 transition-all ease-out duration-100 opacity-70 hover:opacity-100"
      },
      /* @__PURE__ */ React.createElement(RiHome2Line, { className: "w-5 h-auto" })
    ), folderArray.map((node2, index) => {
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("span", { className: "text-gray-200 shrink-0" }, "/"), index < folderArray.length - 1 ? /* @__PURE__ */ React.createElement(
        "button",
        {
          className: "bg-transparent whitespace-nowrap truncate p-0 border-0 text-blue-500 hover:text-blue-600 transition-all ease-out duration-100 underline underline-offset-2 decoration-1	decoration-blue-200 hover:decoration-blue-400",
          onClick: () => {
            const folders = folder.fullyQualifiedName.split("/");
            navigate(
              `/${[
                "collections",
                collectionName,
                ...folders.slice(
                  0,
                  folders.length - (folders.length - (index + 2))
                )
              ].join("/")}`,
              { replace: true }
            );
          }
        },
        node2
      ) : /* @__PURE__ */ React.createElement("span", { className: "whitespace-nowrap truncate" }, node2));
    })));
  };
  const NoDocumentsPlaceholder = () => {
    return /* @__PURE__ */ React.createElement("div", { className: "text-center px-5 py-3 flex flex-col items-center justify-center shadow border border-gray-100 bg-gray-50 border-b border-gray-200 w-full max-w-full rounded-lg" }, /* @__PURE__ */ React.createElement("p", { className: "text-base italic font-medium text-gray-300" }, "No documents found."));
  };
  const DeleteModal = ({
    close: close2,
    deleteFunc,
    checkRefsFunc,
    filename
  }) => {
    const [hasRefs, setHasRefs] = React.useState();
    React.useEffect(() => {
      checkRefsFunc().then((result) => {
        setHasRefs(result);
      });
    }, [filename, checkRefsFunc]);
    return /* @__PURE__ */ React.createElement(Modal, null, /* @__PURE__ */ React.createElement(PopupModal, null, /* @__PURE__ */ React.createElement(ModalHeader, { close: close2 }, "Delete ", filename), /* @__PURE__ */ React.createElement(ModalBody, { padded: true }, /* @__PURE__ */ React.createElement("p", null, `Are you sure you want to delete ${filename}?${hasRefs ? " References to this document will also be deleted." : ""}`)), /* @__PURE__ */ React.createElement(ModalActions, null, /* @__PURE__ */ React.createElement(Button$1, { style: { flexGrow: 2 }, onClick: close2 }, "Cancel"), /* @__PURE__ */ React.createElement(
      Button$1,
      {
        style: { flexGrow: 3 },
        variant: "danger",
        onClick: async () => {
          await deleteFunc();
          close2();
        }
      },
      "Delete"
    ))));
  };
  const FolderModal = ({
    close: close2,
    createFunc,
    folderName,
    setFolderName
  }) => {
    return /* @__PURE__ */ React.createElement(Modal, null, /* @__PURE__ */ React.createElement(PopupModal, null, /* @__PURE__ */ React.createElement(ModalHeader, { close: close2 }, "Create Folder"), /* @__PURE__ */ React.createElement(ModalBody, { padded: true }, /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      BaseTextField,
      {
        placeholder: "Enter the name of the new folder",
        value: folderName,
        onChange: (event) => setFolderName(event.target.value)
      }
    ))), /* @__PURE__ */ React.createElement(ModalActions, null, /* @__PURE__ */ React.createElement(Button$1, { style: { flexGrow: 2 }, onClick: close2 }, "Cancel"), /* @__PURE__ */ React.createElement(
      Button$1,
      {
        style: { flexGrow: 3 },
        variant: "primary",
        onClick: async () => {
          await createFunc();
          close2();
        }
      },
      "Create"
    ))));
  };
  const RenameModal = ({
    close: close2,
    renameFunc,
    filename,
    newRelativePath,
    setNewRelativePath
  }) => {
    return /* @__PURE__ */ React.createElement(Modal, null, /* @__PURE__ */ React.createElement(PopupModal, null, /* @__PURE__ */ React.createElement(ModalHeader, { close: close2 }, "Rename ", filename), /* @__PURE__ */ React.createElement(ModalBody, { padded: true }, /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("p", { className: "mb-4" }, "Are you sure you want to rename ", /* @__PURE__ */ React.createElement("strong", null, filename), "?"), /* @__PURE__ */ React.createElement(
      BaseTextField,
      {
        placeholder: "Enter a new name for the document's file",
        value: newRelativePath,
        onChange: (event) => setNewRelativePath(event.target.value)
      }
    ))), /* @__PURE__ */ React.createElement(ModalActions, null, /* @__PURE__ */ React.createElement(Button$1, { style: { flexGrow: 2 }, onClick: close2 }, "Cancel"), /* @__PURE__ */ React.createElement(
      Button$1,
      {
        style: { flexGrow: 3 },
        variant: "primary",
        onClick: async () => {
          await renameFunc();
          close2();
        },
        disabled: !newRelativePath || newRelativePath === filename
      },
      "Rename"
    ))));
  };
  const FullscreenError = ({
    title = "Error",
    errorMessage = "It looks like something went wrong."
  }) => {
    return /* @__PURE__ */ React.createElement("div", { className: "flex flex-col justify-center items-center h-screen bg-gray-100" }, /* @__PURE__ */ React.createElement("div", { className: "text-red-500 text-4xl mb-6 flex items-center" }, /* @__PURE__ */ React.createElement(BiError, { className: "w-12 h-auto fill-current text-red-400 opacity-70 mr-1" }), " ", title), /* @__PURE__ */ React.createElement("p", { className: "text-gray-700 text-xl mb-8" }, errorMessage), /* @__PURE__ */ React.createElement(Button$1, { variant: "danger", onClick: () => window.location.reload() }, /* @__PURE__ */ React.createElement(BiSync, { className: "w-7 h-auto fill-current opacity-70 mr-1" }), " Reload"));
  };
  const isValidSortKey = (sortKey, collection) => {
    if (collection.fields) {
      const sortKeys = collection.fields.map((x) => x.name);
      return sortKeys.includes(sortKey);
    } else if (collection.templates) {
      const collectionMap = {};
      const conflictedFields = /* @__PURE__ */ new Set();
      for (const template of collection.templates) {
        for (const field of template.fields) {
          if (collectionMap[field.name]) {
            if (collectionMap[field.name].type !== field.type) {
              conflictedFields.add(field.name);
            }
          } else {
            collectionMap[field.name] = field;
          }
        }
      }
      for (const key in conflictedFields) {
        delete collectionMap[key];
      }
      for (const key in collectionMap) {
        if (key === sortKey) {
          return true;
        }
      }
      return false;
    }
  };
  const useGetCollection = (cms, collectionName, includeDocuments = true, folder, after2 = "", sortKey, filterArgs) => {
    const api = new TinaAdminApi(cms);
    const schema = cms.api.tina.schema;
    const collectionExtra = schema.getCollection(collectionName);
    const [collection, setCollection] = React.useState(void 0);
    const [loading, setLoading] = React.useState(true);
    const [error2, setError] = React.useState(void 0);
    const [resetState, setResetSate] = React.useState(0);
    React.useEffect(() => {
      let cancelled = false;
      const fetchCollection = async () => {
        if (await api.isAuthenticated() && !folder.loading && !cancelled) {
          const { name, order } = JSON.parse(sortKey || "{}");
          const validSortKey = isValidSortKey(name, collectionExtra) ? name : void 0;
          try {
            const collection2 = await api.fetchCollection(
              collectionName,
              includeDocuments,
              (filterArgs == null ? void 0 : filterArgs.filterField) ? "" : folder.fullyQualifiedName,
              after2,
              validSortKey,
              order,
              filterArgs
            );
            setCollection(collection2);
          } catch (error22) {
            cms.alerts.error(
              `[${error22.name}] GetCollection failed: ${error22.message}`
            );
            console.error(error22);
            setCollection(void 0);
            setError(error22);
          }
          setLoading(false);
        }
      };
      if (cancelled)
        return;
      setLoading(true);
      fetchCollection();
      return () => {
        cancelled = true;
      };
    }, [
      cms,
      collectionName,
      folder.loading,
      folder.fullyQualifiedName,
      resetState,
      after2,
      sortKey
    ]);
    const reFetchCollection = () => setResetSate((x) => x + 1);
    return { collection, loading, error: error2, reFetchCollection, collectionExtra };
  };
  const useSearchCollection = (cms, collectionName, includeDocuments = true, folder, after2 = "", search) => {
    const api = new TinaAdminApi(cms);
    const schema = cms.api.tina.schema;
    const collectionExtra = schema.getCollection(collectionName);
    const [collection, setCollection] = React.useState(void 0);
    const [loading, setLoading] = React.useState(true);
    const [error2, setError] = React.useState(void 0);
    const [resetState, setResetSate] = React.useState(0);
    React.useEffect(() => {
      let cancelled = false;
      const searchCollection = async () => {
        if (await api.isAuthenticated() && !folder.loading && !cancelled) {
          try {
            const response = await cms.api.search.query(
              `${search} AND _collection:${collectionName}`,
              {
                limit: 15,
                cursor: after2
              }
            );
            const docs = await Promise.allSettled(
              response.results.map((result) => {
                const [collection2, relativePath2] = result._id.split(":");
                return api.fetchDocument(collection2, relativePath2, false);
              })
            );
            const edges2 = docs.filter((p2) => {
              var _a2;
              return p2.status === "fulfilled" && !!((_a2 = p2.value) == null ? void 0 : _a2.document);
            }).map((result) => ({ node: result.value.document }));
            const c2 = await api.fetchCollection(collectionName, false, "");
            setCollection({
              format: collection.format,
              label: collection.label,
              name: collectionName,
              templates: collection.templates,
              documents: {
                pageInfo: {
                  hasNextPage: !!response.nextCursor,
                  hasPreviousPage: !!response.prevCursor,
                  startCursor: "",
                  endCursor: response.nextCursor || ""
                },
                edges: edges2
              }
            });
          } catch (error22) {
            cms.alerts.error(
              `[${error22.name}] GetCollection failed: ${error22.message}`
            );
            console.error(error22);
            setCollection(void 0);
            setError(error22);
          }
          setLoading(false);
        }
      };
      if (cancelled)
        return;
      setLoading(true);
      searchCollection();
      return () => {
        cancelled = true;
      };
    }, [
      cms,
      collectionName,
      folder.loading,
      folder.fullyQualifiedName,
      resetState,
      after2,
      search
    ]);
    const reFetchCollection = () => setResetSate((x) => x + 1);
    return { collection, loading, error: error2, reFetchCollection, collectionExtra };
  };
  const GetCollection = ({
    cms,
    collectionName,
    folder,
    includeDocuments = true,
    startCursor,
    sortKey,
    children,
    filterArgs,
    search
  }) => {
    const navigate = reactRouterDom.useNavigate();
    const { collection, loading, error: error2, reFetchCollection, collectionExtra } = search ? (
      // biome-ignore lint/correctness/useHookAtTopLevel: not ready to fix these yet
      useSearchCollection(
        cms,
        collectionName,
        includeDocuments,
        folder,
        startCursor || "",
        search
      )
    ) : (
      // biome-ignore lint/correctness/useHookAtTopLevel: not ready to fix these yet
      useGetCollection(
        cms,
        collectionName,
        includeDocuments,
        folder,
        startCursor || "",
        sortKey,
        filterArgs
      ) || {}
    );
    React.useEffect(() => {
      var _a2, _b, _c, _d, _e, _f, _g, _h, _i;
      if (loading)
        return;
      const collectionDefinition = cms.api.tina.schema.getCollection(
        collection.name
      );
      const allowCreate = ((_b = (_a2 = collectionDefinition == null ? void 0 : collectionDefinition.ui) == null ? void 0 : _a2.allowedActions) == null ? void 0 : _b.create) ?? true;
      const allowDelete = ((_d = (_c = collectionDefinition == null ? void 0 : collectionDefinition.ui) == null ? void 0 : _c.allowedActions) == null ? void 0 : _d.delete) ?? true;
      const collectionResponse = collection;
      if (!allowCreate && !allowDelete && // Check there is only one document
      ((_f = (_e = collectionResponse.documents) == null ? void 0 : _e.edges) == null ? void 0 : _f.length) === 1 && // Check to make sure the file is not a folder
      ((_i = (_h = (_g = collectionResponse.documents) == null ? void 0 : _g.edges[0]) == null ? void 0 : _h.node) == null ? void 0 : _i.__typename) !== "Folder") {
        const doc = collectionResponse.documents.edges[0].node;
        handleNavigate(
          navigate,
          cms,
          collectionResponse,
          collectionDefinition,
          doc
        );
      }
    }, [(collection == null ? void 0 : collection.name) || "", loading]);
    if (error2) {
      return /* @__PURE__ */ React.createElement(FullscreenError, null);
    }
    if (loading) {
      return /* @__PURE__ */ React.createElement(LoadingPage, null);
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, null, children(collection, loading, reFetchCollection, collectionExtra));
  };
  const createDocument = async (cms, collection, template, mutationInfo, folder, values) => {
    const api = new TinaAdminApi(cms);
    const { filename, ...leftover } = values;
    if (typeof filename !== "string") {
      throw new Error("Filename must be a string");
    }
    const appendFolder = folder && !filename.startsWith("/") ? `/${folder}/` : "/";
    const relativePath2 = `${appendFolder}${filename}.${collection.format}`;
    const params = api.schema.transformPayload(collection.name, {
      _collection: collection.name,
      ...template && { _template: template.name },
      ...leftover
    });
    if (await api.isAuthenticated()) {
      await api.createDocument(collection, relativePath2, params);
    } else {
      const authMessage = `CreateDocument failed: User is no longer authenticated; please login and try again.`;
      cms.alerts.error(authMessage);
      console.error(authMessage);
      return false;
    }
  };
  const CollectionCreatePage = () => {
    const folder = useCollectionFolder();
    const { collectionName, templateName } = reactRouterDom.useParams();
    return /* @__PURE__ */ React.createElement(GetCMS, null, (cms) => /* @__PURE__ */ React.createElement(
      GetCollection,
      {
        cms,
        collectionName,
        folder,
        includeDocuments: false
      },
      (collection) => {
        const mutationInfo = {
          includeCollection: true,
          includeTemplate: !!collection.templates
        };
        return /* @__PURE__ */ React.createElement(
          RenderForm$1,
          {
            cms,
            collection,
            templateName,
            mutationInfo,
            folder
          }
        );
      }
    ));
  };
  const FilenameInput = (props) => {
    const [filenameTouched, setFilenameTouched] = React.useState(false);
    return /* @__PURE__ */ React.createElement(
      "div",
      {
        className: "group relative block cursor-pointer",
        onClick: () => {
          setFilenameTouched(true);
        }
      },
      /* @__PURE__ */ React.createElement(
        "input",
        {
          type: "text",
          className: `shadow-inner focus:shadow-outline focus:border-blue-500 focus:outline-none block text-base pr-3 truncate py-2 w-full border transition-all ease-out duration-150 focus:text-gray-900 rounded ${props.readonly || !filenameTouched ? "bg-gray-50 text-gray-300  border-gray-150 pointer-events-none pl-8 group-hover:bg-white group-hover:text-gray-600  group-hover:border-gray-200" : "bg-white text-gray-600  border-gray-200 pl-3"}`,
          ...props,
          disabled: props.readonly || !filenameTouched
        }
      ),
      /* @__PURE__ */ React.createElement(
        FaLock,
        {
          className: `text-gray-400 absolute top-1/2 left-2 -translate-y-1/2 pointer-events-none h-5 w-auto transition-opacity duration-150 ease-out ${!filenameTouched && !props.readonly ? "opacity-20 group-hover:opacity-0 group-active:opacity-0" : "opacity-0"}`
        }
      ),
      /* @__PURE__ */ React.createElement(
        FaUnlock,
        {
          className: `text-blue-500 absolute top-1/2 left-2 -translate-y-1/2 pointer-events-none h-5 w-auto transition-opacity duration-150 ease-out ${!filenameTouched && !props.readonly ? "opacity-0 group-hover:opacity-80 group-active:opacity-80" : "opacity-0"}`
        }
      )
    );
  };
  const RenderForm$1 = ({
    cms,
    collection,
    folder,
    templateName,
    mutationInfo,
    customDefaults
  }) => {
    var _a2, _b, _c, _d, _e, _f, _g, _h;
    const navigate = reactRouterDom.useNavigate();
    const [formIsPristine, setFormIsPristine] = React.useState(true);
    const schema = cms.api.tina.schema;
    const schemaCollection = schema.getCollection(collection.name);
    const template = schema.getTemplateForData({
      collection: schemaCollection,
      data: { _template: templateName }
    });
    const formInfo = schemaTools.resolveForm({
      collection: schemaCollection,
      basename: schemaCollection.name,
      schema,
      template
    });
    let slugFunction = (_b = (_a2 = schemaCollection.ui) == null ? void 0 : _a2.filename) == null ? void 0 : _b.slugify;
    if (!slugFunction) {
      const titleField = (_c = template == null ? void 0 : template.fields.find(
        (x) => x.required && x.type === "string" && x.isTitle
      )) == null ? void 0 : _c.name;
      if (titleField) {
        slugFunction = (values) => {
          var _a3;
          return (_a3 = values[titleField]) == null ? void 0 : _a3.replace(/ /g, "-").replace(/[^a-zA-Z0-9-]/g, "");
        };
      }
    }
    const defaultItem2 = customDefaults || // @ts-ignore internal types aren't up to date
    ((_d = template.ui) == null ? void 0 : _d.defaultItem) || // @ts-ignore
    (template == null ? void 0 : template.defaultItem) || {};
    const filenameField = {
      name: "filename",
      label: "Filename",
      component: slugFunction ? wrapFieldsWithMeta(({ field, input, meta }) => {
        var _a3, _b2;
        return /* @__PURE__ */ React.createElement(
          FilenameInput,
          {
            readOnly: (_b2 = (_a3 = schemaCollection == null ? void 0 : schemaCollection.ui) == null ? void 0 : _a3.filename) == null ? void 0 : _b2.readonly,
            ...input
          }
        );
      }) : "text",
      disabled: (_f = (_e = schemaCollection == null ? void 0 : schemaCollection.ui) == null ? void 0 : _e.filename) == null ? void 0 : _f.readonly,
      description: ((_h = (_g = collection.ui) == null ? void 0 : _g.filename) == null ? void 0 : _h.description) ? /* @__PURE__ */ React.createElement(
        "span",
        {
          dangerouslySetInnerHTML: { __html: collection.ui.filename.description }
        }
      ) : /* @__PURE__ */ React.createElement("span", null, "A unique filename for the content.", /* @__PURE__ */ React.createElement("br", null), "Examples: ", /* @__PURE__ */ React.createElement("code", null, "My_Document"), ", ", /* @__PURE__ */ React.createElement("code", null, "My_Document.en"), ",", " ", /* @__PURE__ */ React.createElement("code", null, "sub-folder/My_Document")),
      placeholder: "My_Document",
      validate: (value, allValues, meta) => {
        var _a3, _b2;
        if (!value) {
          if (meta.dirty) {
            return "Required";
          }
          return true;
        }
        const isValid = /[\.\-_\/a-zA-Z0-9]*$/.test(value);
        if (value && !isValid) {
          return "Must contain only a-z, A-Z, 0-9, -, _, ., or /.";
        }
        if (((_a3 = schemaCollection.match) == null ? void 0 : _a3.exclude) || ((_b2 = schemaCollection.match) == null ? void 0 : _b2.include)) {
          const filePath = `${schemaTools.normalizePath(schemaCollection.path)}/${value}.${schemaCollection.format || "md"}`;
          const match2 = schema == null ? void 0 : schema.matchFiles({
            files: [filePath],
            collection: schemaCollection
          });
          if ((match2 == null ? void 0 : match2.length) === 0) {
            return `The filename "${value}" is not allowed for this collection.`;
          }
        }
      }
    };
    const form = React.useMemo(() => {
      var _a3, _b2, _c2, _d2;
      const folderName = folder.fullyQualifiedName ? folder.name : "";
      return new Form({
        crudType: "create",
        initialValues: typeof defaultItem2 === "function" ? { ...defaultItem2(), _template: templateName } : { ...defaultItem2, _template: templateName },
        extraSubscribeValues: { active: true, submitting: true, touched: true },
        onChange: (values) => {
          var _a4, _b3;
          if (!(values == null ? void 0 : values.submitting)) {
            const filename = (_a4 = values == null ? void 0 : values.values) == null ? void 0 : _a4.filename;
            const appendFolder = folderName && !(filename == null ? void 0 : filename.startsWith("/")) ? `/${folderName}/` : "/";
            form.path = schemaCollection.path + appendFolder + `${filename}.${schemaCollection.format || "md"}`;
          }
          if (slugFunction && (values == null ? void 0 : values.active) !== "filename" && !(values == null ? void 0 : values.submitting) && !((_b3 = values.touched) == null ? void 0 : _b3.filename)) {
            const value = slugFunction(values.values, {
              template,
              collection: schemaCollection
            });
            form.finalForm.change("filename", value);
          }
        },
        id: schemaCollection.path + folderName + `/new-post.${schemaCollection.format || "md"}`,
        label: "form",
        fields: [
          ((_b2 = (_a3 = collection.ui) == null ? void 0 : _a3.filename) == null ? void 0 : _b2.showFirst) && filenameField,
          ...formInfo.fields,
          !((_d2 = (_c2 = collection.ui) == null ? void 0 : _c2.filename) == null ? void 0 : _d2.showFirst) && filenameField
        ].filter((x) => !!x),
        onSubmit: async (values) => {
          try {
            const folderName2 = folder.fullyQualifiedName ? folder.name : "";
            await createDocument(
              cms,
              collection,
              template,
              mutationInfo,
              folderName2,
              values
            );
            cms.alerts.success("Document created!");
            setTimeout(() => {
              navigate(
                `/collections/${collection.name}${folder.fullyQualifiedName ? `/${folder.fullyQualifiedName}` : ""}`
              );
            }, 10);
          } catch (error2) {
            console.error(error2);
            const defaultErrorText = "There was a problem saving your document.";
            if (error2.message.includes("already exists")) {
              cms.alerts.error(
                `${defaultErrorText} The "Filename" is already used for another document, please modify it.`
              );
            } else {
              cms.alerts.error(
                () => ErrorDialog({
                  title: defaultErrorText,
                  message: "Tina caught an error while creating the page",
                  error: error2
                })
              );
            }
            throw new Error(
              `[${error2.name}] CreateDocument failed: ${error2.message}`
            );
          }
        }
      });
    }, [cms, collection, mutationInfo]);
    React.useEffect(() => {
      cms.dispatch({ type: "forms:add", value: form });
      cms.dispatch({ type: "forms:set-active-form-id", value: form.id });
      return () => {
        cms.dispatch({ type: "forms:remove", value: form.id });
        cms.dispatch({ type: "forms:set-active-form-id", value: null });
      };
    }, [JSON.stringify(formInfo.fields)]);
    if (!cms.state.activeFormId) {
      return null;
    }
    const activeForm = cms.state.forms.find(
      ({ tinaForm }) => tinaForm.id === form.id
    );
    return /* @__PURE__ */ React.createElement(PageWrapper, { headerClassName: "bg-white" }, /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      "div",
      {
        className: `py-4 px-6 border-b border-gray-200 bg-white w-full grow-0 shrink basis-0 flex justify-center`
      },
      /* @__PURE__ */ React.createElement("div", { className: "w-full flex gap-1.5 justify-between items-center" }, /* @__PURE__ */ React.createElement(
        FormBreadcrumbs,
        {
          className: "w-[calc(100%-3rem)]",
          rootBreadcrumbName: "Create New"
        }
      ), /* @__PURE__ */ React.createElement(FormStatus, { pristine: formIsPristine }))
    ), activeForm && /* @__PURE__ */ React.createElement(FormBuilder, { form: activeForm, onPristineChange: setFormIsPristine })));
  };
  const useGetDocument = (cms, collectionName, relativePath2) => {
    const api = new TinaAdminApi(cms);
    const [document2, setDocument] = React.useState(void 0);
    const [loading, setLoading] = React.useState(true);
    const [error2, setError] = React.useState(void 0);
    React.useEffect(() => {
      let isCancelled = false;
      const fetchDocument = async () => {
        if (api.isAuthenticated() && !isCancelled) {
          try {
            const response = await api.fetchDocument(
              collectionName,
              relativePath2
            );
            if (!isCancelled) {
              setDocument(response.document);
            }
          } catch (error22) {
            if (!isCancelled) {
              cms.alerts.error(
                `[${error22.name}] GetDocument failed: ${error22.message}`
              );
              console.error(error22);
              setDocument(void 0);
              setError(error22);
            }
          }
          if (!isCancelled) {
            setLoading(false);
          }
        }
      };
      setLoading(true);
      fetchDocument();
      return () => {
        isCancelled = true;
      };
    }, [cms, collectionName, relativePath2]);
    return { document: document2, loading, error: error2 };
  };
  const GetDocument = ({
    cms,
    collectionName,
    relativePath: relativePath2,
    children
  }) => {
    const { document: document2, loading, error: error2 } = useGetDocument(
      cms,
      collectionName,
      relativePath2
    );
    if (error2) {
      return /* @__PURE__ */ React.createElement(FullscreenError, null);
    }
    if (loading) {
      return /* @__PURE__ */ React.createElement(LoadingPage, null);
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, null, children(document2, loading));
  };
  const CollectionDuplicatePage = () => {
    const folder = useCollectionFolder();
    const { collectionName, ...rest } = reactRouterDom.useParams();
    const { "*": filename } = rest;
    return /* @__PURE__ */ React.createElement(GetCMS, null, (cms) => /* @__PURE__ */ React.createElement(
      GetCollection,
      {
        cms,
        collectionName,
        folder,
        includeDocuments: false
      },
      (collection) => {
        const relativePath2 = `${filename.startsWith("~/") ? filename.substring(2) : filename}.${collection.format}`;
        const mutationInfo = {
          includeCollection: true,
          includeTemplate: !!collection.templates
        };
        return /* @__PURE__ */ React.createElement(
          GetDocument,
          {
            cms,
            collectionName: collection.name,
            relativePath: relativePath2
          },
          (document2) => {
            var _a2;
            return /* @__PURE__ */ React.createElement(
              RenderForm$1,
              {
                cms,
                collection,
                templateName: (_a2 = document2._values) == null ? void 0 : _a2._template,
                folder: parentFolder(folder),
                mutationInfo,
                customDefaults: document2._values
              }
            );
          }
        );
      }
    ));
  };
  const updateDocument = async (cms, relativePath2, collection, mutationInfo, values) => {
    const api = new TinaAdminApi(cms);
    const params = api.schema.transformPayload(collection.name, values);
    if (await api.isAuthenticated()) {
      await api.updateDocument(collection, relativePath2, params);
    } else {
      const authMessage = `UpdateDocument failed: User is no longer authenticated; please login and try again.`;
      cms.alerts.error(authMessage);
      console.error(authMessage);
      return false;
    }
  };
  const CollectionUpdatePage = () => {
    const { collectionName, ...rest } = reactRouterDom.useParams();
    const folder = useCollectionFolder();
    const { "*": filename } = rest;
    const resolvedFile = folder.fullyQualifiedName ? folder.name : filename;
    return /* @__PURE__ */ React.createElement(GetCMS, null, (cms) => /* @__PURE__ */ React.createElement(
      GetCollection,
      {
        cms,
        collectionName,
        folder,
        includeDocuments: false
      },
      (collection) => {
        const relativePath2 = `${resolvedFile}.${collection.format}`;
        const mutationInfo = {
          includeCollection: true,
          includeTemplate: !!collection.templates
        };
        return /* @__PURE__ */ React.createElement(PageWrapper, { headerClassName: "bg-white" }, /* @__PURE__ */ React.createElement(
          GetDocument,
          {
            cms,
            collectionName: collection.name,
            relativePath: relativePath2
          },
          (document2) => /* @__PURE__ */ React.createElement(
            RenderForm,
            {
              cms,
              document: document2,
              filename: resolvedFile,
              relativePath: relativePath2,
              collection,
              mutationInfo
            }
          )
        ));
      }
    ));
  };
  const RenderForm = ({
    cms,
    document: document2,
    filename,
    relativePath: relativePath2,
    collection,
    mutationInfo
  }) => {
    const [formIsPristine, setFormIsPristine] = React.useState(true);
    const schema = cms.api.tina.schema;
    const schemaCollection = schema.getCollection(collection.name);
    const template = schema.getTemplateForData({
      collection: schemaCollection,
      data: document2._values
    });
    const formInfo = schemaTools.resolveForm({
      collection: schemaCollection,
      basename: schemaCollection.name,
      schema,
      template
    });
    const form = React.useMemo(() => {
      return new Form({
        // id is the full document path
        id: schemaTools.canonicalPath(`${schemaCollection.path}/${relativePath2}`),
        label: "form",
        fields: formInfo.fields,
        initialValues: document2._values,
        onSubmit: async (values) => {
          try {
            await updateDocument(
              cms,
              relativePath2,
              collection,
              mutationInfo,
              values
            );
            cms.alerts.success("Document updated!");
          } catch (error2) {
            cms.alerts.error(
              () => ErrorDialog({
                title: "There was a problem saving your document",
                message: "Tina caught an error while updating the page",
                error: error2
              })
            );
            console.error(error2);
            throw new Error(
              `[${error2.name}] UpdateDocument failed: ${error2.message}`
            );
          }
        }
      });
    }, [cms, document2, relativePath2, collection, mutationInfo]);
    React.useEffect(() => {
      cms.dispatch({ type: "forms:add", value: form });
      cms.dispatch({ type: "forms:set-active-form-id", value: form.id });
      return () => {
        cms.dispatch({ type: "forms:remove", value: form.id });
        cms.dispatch({ type: "forms:set-active-form-id", value: null });
      };
    }, [JSON.stringify(document2._values)]);
    if (!cms.state.activeFormId) {
      return null;
    }
    const activeForm = cms.state.forms.find(
      ({ tinaForm }) => tinaForm.id === form.id
    );
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      "div",
      {
        className: `py-4 px-6 border-b border-gray-200 bg-white w-full grow-0 shrink basis-0 flex justify-center`
      },
      /* @__PURE__ */ React.createElement("div", { className: "w-full flex gap-1.5 justify-between items-center" }, /* @__PURE__ */ React.createElement(
        FormBreadcrumbs,
        {
          className: "w-[calc(100%-3rem)]",
          rootBreadcrumbName: `${filename}.${collection.format}`
        }
      ), /* @__PURE__ */ React.createElement(FormStatus, { pristine: formIsPristine }))
    ), activeForm && /* @__PURE__ */ React.createElement(FormBuilder, { form: activeForm, onPristineChange: setFormIsPristine }));
  };
  const DashboardPage = () => {
    return /* @__PURE__ */ React.createElement(GetCMS, null, (cms) => /* @__PURE__ */ React.createElement(PageWrapper, null, /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(PageHeader, null, /* @__PURE__ */ React.createElement("h3", { className: "text-2xl font-sans text-gray-700" }, "Welcome to Tina!")), /* @__PURE__ */ React.createElement(PageBody, null, "This is your dashboard for editing or creating content. Select a collection on the left to begin."))));
  };
  const ScreenPage = () => {
    const { screenName } = reactRouterDom.useParams();
    return /* @__PURE__ */ React.createElement(GetCMS, null, (cms) => {
      const screens = cms.plugins.getType("screen").all();
      const selectedScreen = screens.find(
        ({ name }) => slugify(name) === screenName
      );
      return /* @__PURE__ */ React.createElement("div", { className: "relative w-full h-full flex flex-col items-stretch justify-between" }, /* @__PURE__ */ React.createElement("div", { className: "pt-2 px-6 bg-white" }, /* @__PURE__ */ React.createElement(LocalWarning, null), /* @__PURE__ */ React.createElement(BillingWarning, null)), /* @__PURE__ */ React.createElement(
        "div",
        {
          className: `xl:hidden pl-6 py-5 border-b border-gray-200 bg-white`
        },
        selectedScreen.name
      ), /* @__PURE__ */ React.createElement("div", { className: "flex-1 overflow-y-auto relative flex flex-col items-stretch justify-between" }, /* @__PURE__ */ React.createElement(selectedScreen.Component, { close: () => {
      } })));
    });
  };
  const IndexingPage = () => {
    const cms = useCMS$1();
    const tinaApi = cms.api.tina;
    const currentBranch = tinaApi.branch;
    const kind = localStorage == null ? void 0 : localStorage.getItem("tina.createBranchState.kind");
    const { setCurrentBranch } = useBranchData();
    const [state, setState] = React.useState(
      localStorage == null ? void 0 : localStorage.getItem("tina.createBranchState")
    );
    const [errorMessage, setErrorMessage] = React.useState("");
    const [baseBranch, setBaseBranch] = React.useState(
      localStorage == null ? void 0 : localStorage.getItem("tina.createBranchState.baseBranch")
    );
    const [searchParams] = reactRouterDom.useSearchParams();
    const back = localStorage == null ? void 0 : localStorage.getItem("tina.createBranchState.back");
    const fullPath = localStorage == null ? void 0 : localStorage.getItem("tina.createBranchState.fullPath");
    const values = JSON.parse(
      localStorage == null ? void 0 : localStorage.getItem("tina.createBranchState.values")
    );
    const [branch, setBranch] = React.useState(
      "tina/" + searchParams.get("branch")
    );
    React.useEffect(() => {
      const run = async () => {
        if (state === "starting") {
          try {
            console.log("starting", branch, formatBranchName(branch));
            const name = await tinaApi.createBranch({
              branchName: formatBranchName(branch),
              baseBranch: currentBranch
            });
            if (!name) {
              throw new Error("Branch creation failed.");
            }
            setBranch(name);
            localStorage.setItem("tina.createBranchState", "indexing");
            cms.alerts.success("Branch created.");
            setState("indexing");
          } catch (e3) {
            console.error(e3);
            cms.alerts.error("Branch creation failed: " + e3.message);
            setErrorMessage(
              "Branch creation failed, please try again. By refreshing the page."
            );
            setState("error");
          }
        }
        if (state === "indexing") {
          try {
            const [
              // When this promise resolves, we know the index status is no longer 'inprogress' or 'unknown'
              waitForIndexStatusPromise,
              // Calling this function will cancel the polling
              _cancelWaitForIndexFunc
            ] = tinaApi.waitForIndexStatus({
              ref: branch
            });
            await waitForIndexStatusPromise;
            cms.alerts.success("Branch indexed.");
            localStorage.setItem("tina.createBranchState", "submitting");
            setState("submitting");
          } catch {
            cms.alerts.error("Branch indexing failed.");
            setErrorMessage(
              'Branch indexing failed, please check the TinaCloud dashboard for more information. To try again chick "re-index" on the branch in the dashboard.'
            );
            setState("error");
          }
        }
        if (state === "submitting") {
          try {
            setBaseBranch(tinaApi.branch);
            localStorage.setItem(
              "tina.createBranchState.baseBranch",
              tinaApi.branch
            );
            setCurrentBranch(branch);
            const collection = tinaApi.schema.getCollectionByFullPath(fullPath);
            const api = new TinaAdminApi(cms);
            const params = api.schema.transformPayload(collection.name, values);
            const relativePath2 = pathRelativeToCollection(
              collection.path,
              fullPath
            );
            if (await api.isAuthenticated()) {
              if (kind === "delete") {
                await api.deleteDocument(values);
              } else if (kind === "create") {
                await api.createDocument(collection, relativePath2, params);
              } else {
                await api.updateDocument(collection, relativePath2, params);
              }
            } else {
              const authMessage = `UpdateDocument failed: User is no longer authenticated; please login and try again.`;
              cms.alerts.error(authMessage);
              console.error(authMessage);
              return false;
            }
            localStorage.setItem("tina.createBranchState", "creatingPR");
            cms.alerts.success("Content saved.");
            setState("creatingPR");
          } catch (e3) {
            console.error(e3);
            cms.alerts.error("Content save failed.");
            setErrorMessage(
              "Content save failed, please try again. If the problem persists please contact support."
            );
            setState("error");
          }
        }
        if (state === "creatingPR") {
          try {
            const foo = await tinaApi.createPullRequest({
              baseBranch,
              branch,
              title: `${branch.replace("tina/", "").replace("-", " ")} (PR from TinaCMS)`
            });
            console.log("PR created", foo);
            cms.alerts.success("Pull request created.");
            localStorage.setItem("tina.createBranchState", "done");
            setState("done");
          } catch (e3) {
            console.error(e3);
            cms.alerts.error("Failed to create PR");
            setErrorMessage(
              "Failed to create PR, please try again. If the problem persists please contact support."
            );
            setState("error");
          }
        }
        if (state === "done") {
          window.location.href = back;
        }
      };
      if (fullPath && values && branch && back) {
        run();
      }
    }, [state]);
    if (!back || !fullPath || !values || !branch) {
      return /* @__PURE__ */ React.createElement(Wrapper, null, /* @__PURE__ */ React.createElement("p", null, "Missing params please try again."));
    }
    return /* @__PURE__ */ React.createElement(Wrapper, null, state !== "done" && state !== "error" && /* @__PURE__ */ React.createElement(
      BiLoaderAlt,
      {
        className: `opacity-70 text-blue-400 animate-spin w-10 h-auto`
      }
    ), (state === "starting" || state === "creatingBranch") && /* @__PURE__ */ React.createElement("p", null, "Creating branch…"), state === "indexing" && /* @__PURE__ */ React.createElement("p", null, "Indexing Content…"), state === "submitting" && /* @__PURE__ */ React.createElement("p", null, "Saving content…"), state === "creatingPR" && /* @__PURE__ */ React.createElement("p", null, "Creating Pull Request…"), state === "error" && /* @__PURE__ */ React.createElement("p", { className: "flex items-center gap-1 text-red-700" }, /* @__PURE__ */ React.createElement(BiError, { className: "w-7 h-auto text-red-400 flex-shrink-0" }), " ", /* @__PURE__ */ React.createElement("b", null, "Error:"), " ", errorMessage, " "));
  };
  const Wrapper = ({ children }) => /* @__PURE__ */ React.createElement("div", { className: "w-full h-full flex flex-col justify-center items-center gap-4 p-6 text-xl text-gray-700" }, children);
  const pathRelativeToCollection = (collectionPath, fullPath) => {
    const cleanCollectionPath = schemaTools.canonicalPath(collectionPath) + "/";
    const cleanFullPath = schemaTools.canonicalPath(fullPath);
    if (cleanFullPath.startsWith(cleanCollectionPath)) {
      return cleanFullPath.substring(cleanCollectionPath.length);
    }
    throw new Error(
      `Path ${fullPath} not within collection path ${collectionPath}`
    );
  };
  const Redirect = () => {
    React.useEffect(() => {
      if (window) {
        window.location.assign("/");
      }
    }, []);
    return null;
  };
  const MaybeRedirectToPreview = ({
    redirect,
    children
  }) => {
    const cms = useCMS$1();
    const navigate = reactRouterDom.useNavigate();
    React.useEffect(() => {
      const basePath = cms.flags.get("tina-basepath");
      if (redirect) {
        navigate(`/~${basePath ? `/${basePath}` : ""}`);
      }
    }, [redirect]);
    return children;
  };
  const SetPreviewFlag = ({
    preview: preview2,
    cms
  }) => {
    React.useEffect(() => {
      if (preview2) {
        cms.flags.set("tina-iframe", true);
      }
    }, [preview2]);
    return null;
  };
  const PreviewInner = ({ preview: preview2, config }) => {
    const params = reactRouterDom.useParams();
    const navigate = reactRouterDom.useNavigate();
    const [url, setURL] = React.useState(`/${params["*"]}`);
    const [reportedURL, setReportedURL] = React.useState(null);
    const ref = React.useRef(null);
    const paramURL = `/${params["*"]}`;
    React.useEffect(() => {
      if (reportedURL !== paramURL && paramURL) {
        setURL(paramURL);
      }
    }, [paramURL]);
    React.useEffect(() => {
      if ((reportedURL !== url || reportedURL !== paramURL) && reportedURL) {
        navigate(`/~${reportedURL}`);
      }
    }, [reportedURL]);
    React.useEffect(() => {
      setInterval(() => {
        var _a2;
        if (ref.current) {
          const url2 = new URL(((_a2 = ref.current.contentWindow) == null ? void 0 : _a2.location.href) || "");
          if (url2.origin === "null") {
            return;
          }
          const href = url2.href.replace(url2.origin, "");
          setReportedURL(href);
        }
      }, 100);
    }, [ref.current]);
    const Preview = preview2;
    return /* @__PURE__ */ React.createElement(Preview, { url, iframeRef: ref, ...config });
  };
  const CheckSchema = ({
    schemaJson,
    children
  }) => {
    const cms = useCMS$1();
    const api = new TinaAdminApi(cms);
    const url = api.api.contentApiUrl;
    const [schemaMissingError, setSchemaMissingError] = React.useState(false);
    const currentBranch = decodeURIComponent(cms.api.tina.branch);
    React.useEffect(() => {
      if (schemaJson && cms) {
        api.checkGraphqlSchema({
          localSchema: schemaJson
        }).then((x) => {
          if (x === false) {
            cms.alerts.error(
              "GraphQL Schema Mismatch. Editing may not work. If you just switched branches, try going back to the previous branch"
            );
          }
        }).catch((e3) => {
          if (e3.message.includes("has not been indexed by TinaCloud")) {
            setSchemaMissingError(true);
          } else {
            cms.alerts.error(`Unexpected error checking schema: ${e3}`);
            throw e3;
          }
        });
      }
    }, [cms, JSON.stringify(schemaJson || {}), url]);
    return /* @__PURE__ */ React.createElement(React.Fragment, null, schemaMissingError ? /* @__PURE__ */ React.createElement(Modal, null, /* @__PURE__ */ React.createElement(PopupModal, null, /* @__PURE__ */ React.createElement(ModalHeader, null, "Branch Not Found"), /* @__PURE__ */ React.createElement(ModalBody, { padded: true }, /* @__PURE__ */ React.createElement("div", { className: "tina-prose" }, "The current branch (", /* @__PURE__ */ React.createElement("span", { className: "font-bold" }, currentBranch), ") has either been merged or deleted.")), /* @__PURE__ */ React.createElement(ModalActions, null, /* @__PURE__ */ React.createElement("div", { className: "flex-1" }), /* @__PURE__ */ React.createElement(
      Button$1,
      {
        style: { flexGrow: 1 },
        className: "w-full",
        variant: "primary",
        onClick: () => {
          window.localStorage.removeItem("tinacms-current-branch");
          window.location.reload();
        }
      },
      "Switch back to default branch"
    )))) : children);
  };
  const TinaAdmin = ({
    preview: preview2,
    Playground,
    config,
    schemaJson
  }) => {
    const isSSR2 = typeof window === "undefined";
    if (isSSR2) {
      return null;
    }
    return /* @__PURE__ */ React.createElement(GetCMS, null, (cms) => {
      var _a2, _b, _c;
      const isTinaAdminEnabled = cms.flags.get("tina-admin") === false ? false : true;
      if (isTinaAdminEnabled) {
        const tinaClient = (_a2 = cms.api) == null ? void 0 : _a2.tina;
        const collectionWithRouter = (_c = (_b = tinaClient == null ? void 0 : tinaClient.schema) == null ? void 0 : _b.config) == null ? void 0 : _c.collections.find((x) => {
          var _a3;
          return typeof ((_a3 = x == null ? void 0 : x.ui) == null ? void 0 : _a3.router) === "function";
        });
        const hasRouter = Boolean(collectionWithRouter);
        return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(CheckSchema, { schemaJson }, /* @__PURE__ */ React.createElement(reactRouterDom.HashRouter, null, /* @__PURE__ */ React.createElement(SetPreviewFlag, { preview: preview2, cms }), /* @__PURE__ */ React.createElement(reactRouterDom.Routes, null, preview2 && /* @__PURE__ */ React.createElement(
          reactRouterDom.Route,
          {
            path: "/~/*",
            element: /* @__PURE__ */ React.createElement(PreviewInner, { config, preview: preview2 })
          }
        ), /* @__PURE__ */ React.createElement(
          reactRouterDom.Route,
          {
            path: "graphql",
            element: /* @__PURE__ */ React.createElement(PlainLayout, null, /* @__PURE__ */ React.createElement(Playground, null))
          }
        ), /* @__PURE__ */ React.createElement(
          reactRouterDom.Route,
          {
            path: "branch/new",
            element: /* @__PURE__ */ React.createElement(DefaultWrapper, { cms }, /* @__PURE__ */ React.createElement(IndexingPage, null))
          }
        ), /* @__PURE__ */ React.createElement(
          reactRouterDom.Route,
          {
            path: "collections/new/:collectionName",
            element: /* @__PURE__ */ React.createElement(DefaultWrapper, { cms }, /* @__PURE__ */ React.createElement(CollectionCreatePage, null))
          }
        ), /* @__PURE__ */ React.createElement(
          reactRouterDom.Route,
          {
            path: "collections/duplicate/:collectionName/~/*",
            element: /* @__PURE__ */ React.createElement(DefaultWrapper, { cms }, /* @__PURE__ */ React.createElement(CollectionDuplicatePage, null))
          }
        ), /* @__PURE__ */ React.createElement(
          reactRouterDom.Route,
          {
            path: "collections/duplicate/:collectionName/*",
            element: /* @__PURE__ */ React.createElement(DefaultWrapper, { cms }, /* @__PURE__ */ React.createElement(CollectionDuplicatePage, null))
          }
        ), /* @__PURE__ */ React.createElement(
          reactRouterDom.Route,
          {
            path: "collections/new/:collectionName/:templateName",
            element: /* @__PURE__ */ React.createElement(DefaultWrapper, { cms }, /* @__PURE__ */ React.createElement(CollectionCreatePage, null))
          }
        ), /* @__PURE__ */ React.createElement(
          reactRouterDom.Route,
          {
            path: "collections/new/:collectionName/:templateName/~/*",
            element: /* @__PURE__ */ React.createElement(DefaultWrapper, { cms }, /* @__PURE__ */ React.createElement(CollectionCreatePage, null))
          }
        ), /* @__PURE__ */ React.createElement(
          reactRouterDom.Route,
          {
            path: "collections/new/:collectionName/~/*",
            element: /* @__PURE__ */ React.createElement(DefaultWrapper, { cms }, /* @__PURE__ */ React.createElement(CollectionCreatePage, null))
          }
        ), /* @__PURE__ */ React.createElement(
          reactRouterDom.Route,
          {
            path: "collections/edit/:collectionName/*",
            element: /* @__PURE__ */ React.createElement(DefaultWrapper, { cms }, /* @__PURE__ */ React.createElement(CollectionUpdatePage, null))
          }
        ), /* @__PURE__ */ React.createElement(
          reactRouterDom.Route,
          {
            path: "collections/:collectionName/*",
            element: /* @__PURE__ */ React.createElement(DefaultWrapper, { cms }, /* @__PURE__ */ React.createElement(CollectionListPage, null))
          }
        ), /* @__PURE__ */ React.createElement(
          reactRouterDom.Route,
          {
            path: "screens/:screenName",
            element: /* @__PURE__ */ React.createElement(DefaultWrapper, { cms }, /* @__PURE__ */ React.createElement(ScreenPage, null))
          }
        ), /* @__PURE__ */ React.createElement(
          reactRouterDom.Route,
          {
            path: "/",
            element: /* @__PURE__ */ React.createElement(
              MaybeRedirectToPreview,
              {
                redirect: !!preview2 && hasRouter
              },
              /* @__PURE__ */ React.createElement(DefaultWrapper, { cms }, /* @__PURE__ */ React.createElement(DashboardPage, null))
            )
          }
        )))));
      } else {
        return /* @__PURE__ */ React.createElement(Layout, null, /* @__PURE__ */ React.createElement(reactRouterDom.HashRouter, null, /* @__PURE__ */ React.createElement(reactRouterDom.Routes, null, /* @__PURE__ */ React.createElement(reactRouterDom.Route, { path: "/", element: /* @__PURE__ */ React.createElement(Redirect, null) }))));
      }
    });
  };
  const DefaultWrapper = ({
    cms,
    children
  }) => {
    return /* @__PURE__ */ React.createElement(Layout, null, /* @__PURE__ */ React.createElement("div", { className: "flex items-stretch h-dvh overflow-hidden" }, /* @__PURE__ */ React.createElement(Sidebar, { cms }), /* @__PURE__ */ React.createElement("div", { className: "w-full relative" }, children)));
  };
  const PlainLayout = ({ children }) => {
    return /* @__PURE__ */ React.createElement(
      "div",
      {
        style: {
          position: "fixed",
          top: 0,
          left: 0,
          width: "100%",
          height: "100%",
          overflow: "auto",
          background: "#F6F6F9",
          fontFamily: "'Inter', sans-serif",
          zIndex: 9999
        }
      },
      children
    );
  };
  class RouteMappingPlugin {
    constructor(mapper) {
      this.__type = "tina-admin";
      this.name = "route-mapping";
      this.mapper = mapper;
    }
  }
  const tinaTableTemplate = {
    name: "table",
    label: "Table",
    fields: [
      {
        name: "firstRowHeader",
        label: "First row is a header",
        type: "boolean"
      },
      {
        name: "align",
        label: "Align",
        type: "string",
        list: true,
        description: 'Possible values: "left", "right", or "center".'
      },
      {
        name: "tableRows",
        label: "Rows",
        type: "object",
        list: true,
        ui: {
          itemProps: (value) => {
            if (value == null ? void 0 : value.tableCells) {
              if (Array.isArray(value.tableCells)) {
                return {
                  label: value.tableCells.map((cellItem) => stringifyCell(cellItem.value)).join(" | ")
                };
              }
            }
            return { label: "Row" };
          }
        },
        fields: [
          {
            name: "tableCells",
            label: "Table Cells",
            list: true,
            type: "object",
            ui: {
              itemProps: (cell) => {
                if (cell) {
                  if (cell.value) {
                    return {
                      label: stringifyCell(cell.value)
                    };
                  }
                }
                return { label: "Value" };
              }
            },
            fields: [
              {
                label: "Value",
                description: "Note: table cells do not support block-level elements like headers, code blocks, or lists. Any block-level items other than the first paragraph will be considered invalid.",
                name: "value",
                type: "rich-text",
                ui: {
                  validate(value) {
                    try {
                      tableCellSchema.parse(value);
                    } catch (e3) {
                      if (e3 instanceof zod.z.ZodError) {
                        return e3.errors[0].message;
                      }
                      return e3.message;
                    }
                  }
                }
              }
            ]
          }
        ]
      }
    ]
  };
  const tableCellSchema = zod.z.object({
    type: zod.z.literal("root"),
    children: zod.z.array(
      zod.z.object({
        type: zod.z.string(),
        children: zod.z.any().array()
      })
    ).refine(
      (value) => {
        const firstValue = value[0];
        return firstValue && firstValue.type === "p";
      },
      {
        message: `Table cell content cannot contain block elements like headers, blockquotes, or lists.`
      }
    ).refine(
      (value) => {
        var _a2;
        if (value.length > 1) {
          const secondBlock = value[1];
          return secondBlock && secondBlock.children.length === 1 && !((_a2 = secondBlock.children[0]) == null ? void 0 : _a2.text);
        }
        return true;
      },
      {
        message: `Table cells can only have 1 block level element.`
      }
    )
  });
  const stringifyCell = (cell) => {
    const serialized = mdx.serializeMDX(
      cell,
      { name: "body", type: "rich-text" },
      () => ""
    );
    if (typeof serialized !== "string") {
      throw new Error("stringifyCell: Expected serializeMDX to return a string");
    }
    return serialized == null ? void 0 : serialized.trim();
  };
  const defineSchema = (config) => {
    schemaTools.validateSchema({ schema: config });
    return config;
  };
  const defineLegacyConfig = (config) => {
    schemaTools.validateSchema({ schema: config.schema });
    return config;
  };
  const defineStaticConfig = (config) => {
    if (!config.schema) {
      throw new Error("Static config must have a schema");
    }
    schemaTools.validateSchema({ schema: config.schema });
    return config;
  };
  const defineConfig = defineStaticConfig;
  Object.defineProperty(exports2, "NAMER", {
    enumerable: true,
    get: () => schemaTools.NAMER
  });
  Object.defineProperty(exports2, "resolveField", {
    enumerable: true,
    get: () => schemaTools.resolveField
  });
  exports2.AbstractAuthProvider = AbstractAuthProvider;
  exports2.ActionButton = ActionButton;
  exports2.AddIcon = AddIcon;
  exports2.AlertIcon = AlertIcon;
  exports2.Alerts = Alerts$1;
  exports2.AlignCenter = AlignCenter;
  exports2.AlignLeft = AlignLeft;
  exports2.AlignRight = AlignRight;
  exports2.AuthWallInner = AuthWallInner;
  exports2.BasePasswordField = BasePasswordField;
  exports2.BaseTextField = BaseTextField;
  exports2.BillingWarning = BillingWarning;
  exports2.BlocksField = BlocksField;
  exports2.BlocksFieldPlugin = BlocksFieldPlugin;
  exports2.BoldIcon = BoldIcon$1;
  exports2.BranchButton = BranchButton;
  exports2.BranchDataProvider = BranchDataProvider;
  exports2.BranchPreviewButton = BranchPreviewButton;
  exports2.BranchSwitcher = BranchSwitcher;
  exports2.BranchSwitcherPlugin = BranchSwitcherPlugin;
  exports2.Button = Button$1;
  exports2.ButtonToggle = ButtonToggle;
  exports2.ButtonToggleField = ButtonToggleField;
  exports2.ButtonToggleFieldPlugin = ButtonToggleFieldPlugin;
  exports2.CheckboxGroup = CheckboxGroup;
  exports2.CheckboxGroupField = CheckboxGroupField;
  exports2.CheckboxGroupFieldPlugin = CheckboxGroupFieldPlugin;
  exports2.ChevronDownIcon = ChevronDownIcon;
  exports2.ChevronLeftIcon = ChevronLeftIcon;
  exports2.ChevronRightIcon = ChevronRightIcon;
  exports2.ChevronUpIcon = ChevronUpIcon;
  exports2.Circle = Circle;
  exports2.CircleCheck = CircleCheck;
  exports2.Client = Client;
  exports2.CloseIcon = CloseIcon;
  exports2.CodeIcon = CodeIcon$1;
  exports2.ColorField = ColorField;
  exports2.ColorFieldPlugin = ColorFieldPlugin;
  exports2.ColorPicker = ColorPicker;
  exports2.CreateBranchModal = CreateBranchModal;
  exports2.CreateBranchModel = CreateBranchModel;
  exports2.CursorPaginator = CursorPaginator;
  exports2.DEFAULT_LOCAL_TINA_GQL_SERVER_URL = DEFAULT_LOCAL_TINA_GQL_SERVER_URL;
  exports2.DEFAULT_MEDIA_UPLOAD_TYPES = DEFAULT_MEDIA_UPLOAD_TYPES;
  exports2.DateField = DateField;
  exports2.DateFieldPlugin = DateFieldPlugin;
  exports2.DeleteImageButton = DeleteImageButton;
  exports2.Dismissible = Dismissible;
  exports2.DragHandle = DragHandle;
  exports2.DragIcon = DragIcon;
  exports2.DummyMediaStore = DummyMediaStore;
  exports2.DuplicateIcon = DuplicateIcon;
  exports2.EditIcon = EditIcon;
  exports2.EditoralBranchSwitcher = EditoralBranchSwitcher;
  exports2.EllipsisVerticalIcon = EllipsisVerticalIcon;
  exports2.ErrorDialog = ErrorDialog;
  exports2.ErrorIcon = ErrorIcon;
  exports2.EventBus = EventBus;
  exports2.ExitIcon = ExitIcon;
  exports2.FieldDescription = FieldDescription;
  exports2.FieldError = FieldError;
  exports2.FieldLabel = FieldLabel;
  exports2.FieldMeta = FieldMeta;
  exports2.FieldWrapper = FieldWrapper;
  exports2.FieldsBuilder = FieldsBuilder;
  exports2.FieldsGroup = FieldsGroup;
  exports2.File = File;
  exports2.Folder = Folder;
  exports2.FontLoader = FontLoader;
  exports2.Form = Form;
  exports2.FormActionMenu = FormActionMenu;
  exports2.FormBuilder = FormBuilder;
  exports2.FormLegacy = FormLegacy;
  exports2.FormMetaPlugin = FormMetaPlugin;
  exports2.FormPortalProvider = FormPortalProvider;
  exports2.FormStatus = FormStatus;
  exports2.FormWrapper = FormWrapper;
  exports2.FullscreenModal = FullscreenModal;
  exports2.GlobalFormPlugin = GlobalFormPlugin;
  exports2.Group = Group;
  exports2.GroupField = GroupField;
  exports2.GroupFieldPlugin = GroupFieldPlugin;
  exports2.GroupLabel = GroupLabel;
  exports2.GroupListField = GroupListField;
  exports2.GroupListFieldPlugin = GroupListFieldPlugin;
  exports2.GroupPanel = GroupPanel;
  exports2.HamburgerIcon = HamburgerIcon;
  exports2.HeadingIcon = HeadingIcon$1;
  exports2.HiddenField = HiddenField;
  exports2.HiddenFieldPlugin = HiddenFieldPlugin;
  exports2.IconButton = IconButton;
  exports2.ImageField = ImageField;
  exports2.ImageFieldPlugin = ImageFieldPlugin;
  exports2.ImageUpload = ImageUpload;
  exports2.InfoIcon = InfoIcon;
  exports2.Input = Input;
  exports2.ItalicIcon = ItalicIcon$1;
  exports2.ItemClickTarget = ItemClickTarget;
  exports2.ItemDeleteButton = ItemDeleteButton;
  exports2.ItemHeader = ItemHeader;
  exports2.LeftArrowIcon = LeftArrowIcon;
  exports2.LinkIcon = LinkIcon$1;
  exports2.ListField = ListField;
  exports2.ListFieldPlugin = ListFieldPlugin;
  exports2.LoadingDots = LoadingDots;
  exports2.LocalAuthProvider = LocalAuthProvider;
  exports2.LocalClient = LocalClient;
  exports2.LocalSearchClient = LocalSearchClient;
  exports2.LocalWarning = LocalWarning;
  exports2.LockIcon = LockIcon;
  exports2.MarkdownIcon = MarkdownIcon;
  exports2.MdxFieldPlugin = MdxFieldPlugin;
  exports2.MdxFieldPluginExtendible = MdxFieldPluginExtendible;
  exports2.MediaIcon = MediaIcon;
  exports2.MediaListError = MediaListError;
  exports2.MediaManager = MediaManager$1;
  exports2.Message = Message;
  exports2.Modal = Modal;
  exports2.ModalActions = ModalActions;
  exports2.ModalBody = ModalBody;
  exports2.ModalFullscreen = ModalFullscreen;
  exports2.ModalHeader = ModalHeader;
  exports2.ModalOverlay = ModalOverlay;
  exports2.ModalPopup = ModalPopup;
  exports2.ModalProvider = ModalProvider;
  exports2.Nav = Nav;
  exports2.NumberField = NumberField;
  exports2.NumberFieldPlugin = NumberFieldPlugin;
  exports2.NumberInput = NumberInput;
  exports2.OrderedListIcon = OrderedListIcon$1;
  exports2.OverflowMenu = OverflowMenu$1;
  exports2.PanelBody = PanelBody;
  exports2.PanelHeader = PanelHeader;
  exports2.PasswordFieldComponent = PasswordFieldComponent;
  exports2.PasswordFieldPlugin = PasswordFieldPlugin;
  exports2.PopupModal = PopupModal;
  exports2.PrefixedTextField = PrefixedTextField;
  exports2.PullRequestIcon = PullRequestIcon;
  exports2.QuoteIcon = QuoteIcon$1;
  exports2.RadioGroup = RadioGroup;
  exports2.RadioGroupField = RadioGroupField;
  exports2.RadioGroupFieldPlugin = RadioGroupFieldPlugin;
  exports2.ReactDateTimeWithStyles = ReactDateTimeWithStyles;
  exports2.RedoIcon = RedoIcon;
  exports2.Reference = Reference;
  exports2.ReferenceField = ReferenceField;
  exports2.ReferenceFieldPlugin = ReferenceFieldPlugin;
  exports2.ReorderIcon = ReorderIcon;
  exports2.ReorderRowIcon = ReorderRowIcon;
  exports2.ResetForm = ResetForm;
  exports2.ResetIcon = ResetIcon;
  exports2.RightArrowIcon = RightArrowIcon;
  exports2.RouteMappingPlugin = RouteMappingPlugin;
  exports2.Select = Select;
  exports2.SelectField = SelectField;
  exports2.SelectFieldPlugin = SelectFieldPlugin;
  exports2.SettingsIcon = SettingsIcon;
  exports2.StrikethroughIcon = StrikethroughIcon;
  exports2.StyledFile = StyledFile;
  exports2.StyledImage = StyledImage;
  exports2.SyncStatusButton = SyncStatusButton;
  exports2.TableIcon = TableIcon;
  exports2.TagsField = TagsField;
  exports2.TagsFieldPlugin = TagsFieldPlugin;
  exports2.TextArea = TextArea;
  exports2.TextField = TextField;
  exports2.TextFieldPlugin = TextFieldPlugin;
  exports2.TextareaFieldPlugin = TextareaFieldPlugin;
  exports2.Tina = Tina;
  exports2.TinaAdmin = TinaAdmin;
  exports2.TinaAdminApi = TinaAdminApi;
  exports2.TinaCMS = TinaCMS;
  exports2.TinaCMSProvider = TinaCMSProvider;
  exports2.TinaCMSProvider2 = TinaCMSProvider2;
  exports2.TinaCMSSearchClient = TinaCMSSearchClient;
  exports2.TinaCloudAuthProvider = TinaCloudAuthProvider;
  exports2.TinaCloudAuthWall = TinaCloudAuthWall;
  exports2.TinaCloudProvider = TinaCloudProvider;
  exports2.TinaField = TinaField;
  exports2.TinaForm = TinaForm;
  exports2.TinaIcon = TinaIcon;
  exports2.TinaMediaStore = TinaMediaStore;
  exports2.TinaProvider = TinaProvider;
  exports2.TinaUI = TinaUI;
  exports2.Toggle = Toggle;
  exports2.ToggleField = ToggleField;
  exports2.ToggleFieldPlugin = ToggleFieldPlugin;
  exports2.TrashIcon = TrashIcon;
  exports2.UnderlineIcon = UnderlineIcon;
  exports2.UndoIcon = UndoIcon;
  exports2.UnorderedListIcon = UnorderedListIcon$1;
  exports2.UploadIcon = UploadIcon;
  exports2.WarningIcon = WarningIcon;
  exports2.assertShape = assertShape;
  exports2.classNames = classNames;
  exports2.createClient = createClient;
  exports2.default = TinaCMSProvider2;
  exports2.defineConfig = defineConfig;
  exports2.defineLegacyConfig = defineLegacyConfig;
  exports2.defineSchema = defineSchema;
  exports2.defineStaticConfig = defineStaticConfig;
  exports2.formatBranchName = formatBranchName;
  exports2.getFilteredBranchList = getFilteredBranchList;
  exports2.getStaticPropsForTina = getStaticPropsForTina;
  exports2.passwordFieldClasses = passwordFieldClasses;
  exports2.safeAssertShape = safeAssertShape;
  exports2.selectFieldClasses = selectFieldClasses;
  exports2.staticRequest = staticRequest;
  exports2.textFieldClasses = textFieldClasses;
  exports2.tinaTableTemplate = tinaTableTemplate;
  exports2.useBranchData = useBranchData;
  exports2.useCMS = useCMS$1;
  exports2.useDismissible = useDismissible;
  exports2.useDocumentCreatorPlugin = useDocumentCreatorPlugin;
  exports2.useFormPortal = useFormPortal;
  exports2.useLocalStorage = useLocalStorage;
  exports2.useModalContainer = useModalContainer;
  exports2.useScreenPlugin = useScreenPlugin;
  exports2.useTinaAuthRedirect = useTinaAuthRedirect;
  exports2.wrapFieldWithError = wrapFieldWithError;
  exports2.wrapFieldWithNoHeader = wrapFieldWithNoHeader;
  exports2.wrapFieldsWithMeta = wrapFieldsWithMeta;
  Object.defineProperties(exports2, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
});
